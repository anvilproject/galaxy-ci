<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Results (powered by Planemo)"
           tests="68"
           errors="0"
           failures="1"
           skip="0">
    
    <testcase classname="bamtools (Test #1)" name="0" time="68.04502964019775">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Pileup::Run() : Data not sorted correctly!Pileup::Run() : Data not sorted correctly!Pileup::Run() : Data not sorted correctly!
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bamtools (Test #2)" name="1" time="62.99946188926697">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bamtools (Test #3)" name="2" time="61.08710837364197">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Pileup::Run() : Data not sorted correctly!Pileup::Run() : Data not sorted correctly!Pileup::Run() : Data not sorted correctly!
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bamtools (Test #4)" name="3" time="60.99024415016174">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_gtcheck (Test #1)" name="0" time="67.30977082252502">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_plugin_tag2tag (Test #1)" name="0" time="62.25744700431824">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_reheader (Test #1)" name="0" time="63.74101638793945">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_reheader (Test #2)" name="1" time="63.81811833381653">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_reheader (Test #3)" name="2" time="66.74972891807556">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deeptools_multi_bigwig_summary (Test #1)" name="0" time="95.1668963432312">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Number of bins found: 120
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fasta_compute_length (Test #1)" name="0" time="70.81434774398804">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fasta_compute_length (Test #2)" name="1" time="62.05103015899658">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fasta_compute_length (Test #3)" name="2" time="61.365413665771484">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fasta_compute_length (Test #4)" name="3" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 3, "tool_id": "fasta_compute_length", "tool_version": "1.0.3"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="fasta_compute_length (Test #5)" name="4" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 4, "tool_id": "fasta_compute_length", "tool_version": "1.0.3"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="flye (Test #1)" name="0" time="193.0210530757904">
        
            
            <system-out><![CDATA[
            [2024-01-16 13:22:09] INFO: Starting Flye 2.6-release[2024-01-16 13:22:09] INFO: >>>STAGE: configure[2024-01-16 13:22:09] INFO: Configuring run[2024-01-16 13:22:09] INFO: Total read length: 1466260[2024-01-16 13:22:09] INFO: Input genome size: 10000[2024-01-16 13:22:09] INFO: Estimated coverage: 146[2024-01-16 13:22:09] INFO: Reads N50/N90: 9054 / 4697[2024-01-16 13:22:09] INFO: Minimum overlap set to 5000[2024-01-16 13:22:09] INFO: Selected k-mer size: 15[2024-01-16 13:22:09] INFO: >>>STAGE: assembly[2024-01-16 13:22:09] INFO: Assembling disjointigs[2024-01-16 13:22:09] INFO: Reading sequences[2024-01-16 13:22:09] INFO: Generating solid k-mer index[2024-01-16 13:22:29] INFO: Counting k-mers (1/2):0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:22:29] INFO: Counting k-mers (2/2):0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:22:30] INFO: Filling index table0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:23:10] INFO: Extending reads[2024-01-16 13:23:15] INFO: Overlap-based coverage: 25[2024-01-16 13:23:15] INFO: Median overlap divergence: 0.1692240% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:23:16] INFO: Assembled 1 disjointigs[2024-01-16 13:23:16] INFO: Generating sequence10% 20% 40% 50% 70% 80% 100% [2024-01-16 13:23:17] INFO: >>>STAGE: consensus[2024-01-16 13:23:18] INFO: Running Minimap2[2024-01-16 13:23:19] INFO: Computing consensus[2024-01-16 13:23:20] INFO: Alignment error rate: 0.156879[2024-01-16 13:23:20] INFO: >>>STAGE: repeat[2024-01-16 13:23:20] INFO: Building and resolving repeat graph[2024-01-16 13:23:20] INFO: Reading sequences[2024-01-16 13:23:20] INFO: Building repeat graph50% 100% [2024-01-16 13:23:40] INFO: Median overlap divergence: 0[2024-01-16 13:23:40] INFO: Aligning reads to the graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:24:00] INFO: Aligned read sequence: 1184744 / 1313105 (0.902246)[2024-01-16 13:24:00] INFO: Median overlap divergence: 0.0616647[2024-01-16 13:24:01] INFO: Mean edge coverage: 29[2024-01-16 13:24:01] INFO: Resolving repeats[2024-01-16 13:24:01] INFO: >>>STAGE: trestle[2024-01-16 13:24:01] INFO: Simple unbridged repeats: 0[2024-01-16 13:24:01] INFO: Resolved: 0[2024-01-16 13:24:01] INFO: >>>STAGE: contigger[2024-01-16 13:24:01] INFO: Generating contigs[2024-01-16 13:24:01] INFO: Reading sequences[2024-01-16 13:24:01] INFO: Generated 1 contigs[2024-01-16 13:24:01] INFO: Added 0 scaffold connections[2024-01-16 13:24:01] INFO: >>>STAGE: polishing[2024-01-16 13:24:01] INFO: Polishing genome (1/1)[2024-01-16 13:24:01] INFO: Running minimap2Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs00000000007e538b0000004a'[2024-01-16 13:24:02] INFO: Separating alignment into bubbles[2024-01-16 13:24:03] INFO: Alignment error rate: 0.104507[2024-01-16 13:24:03] INFO: Correcting bubbles0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs00000000007e53a40000004b'[2024-01-16 13:24:09] INFO: >>>STAGE: finalize[2024-01-16 13:24:09] INFO: Assembly statistics:Total length:39944Fragments:1Fragments N50:39944Largest frg:39944Scaffolds:0Mean coverage:27[2024-01-16 13:24:09] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/74/working/out_dir/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flye (Test #2)" name="1" time="183.56453132629395">
        
            
            <system-out><![CDATA[
            [2024-01-16 13:25:15] INFO: Starting Flye 2.6-release[2024-01-16 13:25:15] INFO: >>>STAGE: configure[2024-01-16 13:25:15] INFO: Configuring run[2024-01-16 13:25:15] INFO: Total read length: 1466260[2024-01-16 13:25:15] INFO: Input genome size: 10000[2024-01-16 13:25:15] INFO: Estimated coverage: 146[2024-01-16 13:25:15] INFO: Reads N50/N90: 9054 / 4697[2024-01-16 13:25:15] INFO: Minimum overlap set to 5000[2024-01-16 13:25:15] INFO: Selected k-mer size: 15[2024-01-16 13:25:15] INFO: >>>STAGE: assembly[2024-01-16 13:25:15] INFO: Assembling disjointigs[2024-01-16 13:25:15] INFO: Reading sequences[2024-01-16 13:25:15] INFO: Generating solid k-mer index[2024-01-16 13:25:35] INFO: Counting k-mers (1/2):0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:25:35] INFO: Counting k-mers (2/2):0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:25:36] INFO: Filling index table0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:26:15] INFO: Extending reads[2024-01-16 13:26:20] INFO: Overlap-based coverage: 25[2024-01-16 13:26:20] INFO: Median overlap divergence: 0.1692240% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:26:21] INFO: Assembled 1 disjointigs[2024-01-16 13:26:21] INFO: Generating sequence10% 20% 40% 50% 70% 80% 100% [2024-01-16 13:26:23] INFO: >>>STAGE: consensus[2024-01-16 13:26:23] INFO: Running Minimap2[2024-01-16 13:26:24] INFO: Computing consensus[2024-01-16 13:26:25] INFO: Alignment error rate: 0.157030[2024-01-16 13:26:25] INFO: >>>STAGE: repeat[2024-01-16 13:26:25] INFO: Building and resolving repeat graph[2024-01-16 13:26:25] INFO: Reading sequences[2024-01-16 13:26:25] INFO: Building repeat graph50% 100% [2024-01-16 13:26:45] INFO: Median overlap divergence: 0[2024-01-16 13:26:45] INFO: Aligning reads to the graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:27:06] INFO: Aligned read sequence: 1184737 / 1313105 (0.902241)[2024-01-16 13:27:06] INFO: Median overlap divergence: 0.0613459[2024-01-16 13:27:06] INFO: Mean edge coverage: 29[2024-01-16 13:27:06] INFO: Resolving repeats[2024-01-16 13:27:06] INFO: >>>STAGE: trestle[2024-01-16 13:27:06] INFO: Simple unbridged repeats: 0[2024-01-16 13:27:06] INFO: Resolved: 0[2024-01-16 13:27:06] INFO: >>>STAGE: contigger[2024-01-16 13:27:06] INFO: Generating contigs[2024-01-16 13:27:06] INFO: Reading sequences[2024-01-16 13:27:06] INFO: Generated 1 contigs[2024-01-16 13:27:06] INFO: Added 0 scaffold connections[2024-01-16 13:27:06] INFO: >>>STAGE: polishing[2024-01-16 13:27:06] INFO: Polishing genome (1/1)[2024-01-16 13:27:06] INFO: Running minimap2Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs00000000007e53f50000004f'[2024-01-16 13:27:07] INFO: Separating alignment into bubbles[2024-01-16 13:27:09] INFO: Alignment error rate: 0.104939[2024-01-16 13:27:09] INFO: Correcting bubbles0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs00000000007e540c00000050'[2024-01-16 13:27:13] INFO: >>>STAGE: finalize[2024-01-16 13:27:13] INFO: Assembly statistics:Total length:40419Fragments:1Fragments N50:40419Largest frg:40419Scaffolds:0Mean coverage:26[2024-01-16 13:27:13] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/76/working/out_dir/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flye (Test #3)" name="2" time="176.8706078529358">
        
            
            <system-out><![CDATA[
            [2024-01-16 13:28:19] INFO: Starting Flye 2.6-release[2024-01-16 13:28:19] INFO: >>>STAGE: configure[2024-01-16 13:28:19] INFO: Configuring run[2024-01-16 13:28:19] INFO: Total read length: 1466260[2024-01-16 13:28:19] INFO: Input genome size: 10000[2024-01-16 13:28:19] INFO: Estimated coverage: 146[2024-01-16 13:28:19] INFO: Reads N50/N90: 9054 / 4697[2024-01-16 13:28:19] INFO: Minimum overlap set to 5000[2024-01-16 13:28:19] INFO: Selected k-mer size: 17[2024-01-16 13:28:19] INFO: Using longest 40x reads for contig assembly[2024-01-16 13:28:19] INFO: >>>STAGE: assembly[2024-01-16 13:28:19] INFO: Assembling disjointigs[2024-01-16 13:28:19] INFO: Reading sequences[2024-01-16 13:28:19] INFO: Generating solid k-mer index[2024-01-16 13:28:39] INFO: Counting k-mers (1/2):0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:28:39] INFO: Counting k-mers (2/2):0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:28:39] INFO: Filling index table0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:29:12] INFO: Extending reads[2024-01-16 13:29:12] INFO: Overlap-based coverage: 3[2024-01-16 13:29:12] INFO: Median overlap divergence: 0.1735210% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:29:13] INFO: Assembled 1 disjointigs[2024-01-16 13:29:13] INFO: Generating sequence10% 20% 40% 50% 70% 80% 100% [2024-01-16 13:29:14] INFO: >>>STAGE: consensus[2024-01-16 13:29:14] INFO: Running Minimap2[2024-01-16 13:29:15] INFO: Computing consensus[2024-01-16 13:29:17] INFO: Alignment error rate: 0.146313[2024-01-16 13:29:17] INFO: >>>STAGE: repeat[2024-01-16 13:29:17] INFO: Building and resolving repeat graph[2024-01-16 13:29:17] INFO: Reading sequences[2024-01-16 13:29:17] INFO: Building repeat graph50% 100% [2024-01-16 13:29:37] INFO: Median overlap divergence: 0[2024-01-16 13:29:37] INFO: Aligning reads to the graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:29:57] INFO: Aligned read sequence: 1174263 / 1313105 (0.894264)[2024-01-16 13:29:57] INFO: Median overlap divergence: 0.0589391[2024-01-16 13:29:57] INFO: Mean edge coverage: 29[2024-01-16 13:29:57] INFO: Resolving repeats[2024-01-16 13:29:57] INFO: >>>STAGE: contigger[2024-01-16 13:29:57] INFO: Generating contigs[2024-01-16 13:29:57] INFO: Reading sequences[2024-01-16 13:29:57] INFO: Generated 1 contigs[2024-01-16 13:29:57] INFO: Added 0 scaffold connections[2024-01-16 13:29:57] INFO: >>>STAGE: polishing[2024-01-16 13:29:57] INFO: Polishing genome (1/2)[2024-01-16 13:29:57] INFO: Running minimap2[2024-01-16 13:29:58] INFO: Separating alignment into bubblesTraceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs00000000007e545e00000054'[2024-01-16 13:30:00] INFO: Alignment error rate: 0.099017[2024-01-16 13:30:00] INFO: Correcting bubbles0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs00000000007e547000000055'[2024-01-16 13:30:04] INFO: Polishing genome (2/2)[2024-01-16 13:30:04] INFO: Running minimap2[2024-01-16 13:30:05] INFO: Separating alignment into bubbles[2024-01-16 13:30:07] INFO: Alignment error rate: 0.094400[2024-01-16 13:30:07] INFO: Correcting bubbles0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:30:10] INFO: >>>STAGE: finalize[2024-01-16 13:30:11] INFO: Assembly statistics:Total length:40414Fragments:1Fragments N50:40414Largest frg:40414Scaffolds:0Mean coverage:27[2024-01-16 13:30:11] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/78/working/out_dir/assembly.fastaTraceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs00000000007e547100000057'
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flye (Test #4)" name="3" time="185.81241273880005">
        
            
            <system-out><![CDATA[
            [2024-01-16 13:31:16] INFO: Starting Flye 2.6-release[2024-01-16 13:31:16] INFO: >>>STAGE: configure[2024-01-16 13:31:16] INFO: Configuring run[2024-01-16 13:31:16] INFO: Total read length: 1466260[2024-01-16 13:31:16] INFO: Input genome size: 10000[2024-01-16 13:31:16] INFO: Estimated coverage: 146[2024-01-16 13:31:16] INFO: Reads N50/N90: 9054 / 4697[2024-01-16 13:31:16] INFO: Minimum overlap set to 5000[2024-01-16 13:31:16] INFO: Selected k-mer size: 15[2024-01-16 13:31:16] INFO: >>>STAGE: assembly[2024-01-16 13:31:16] INFO: Assembling disjointigs[2024-01-16 13:31:16] INFO: Reading sequences[2024-01-16 13:31:16] INFO: Generating solid k-mer index[2024-01-16 13:31:36] INFO: Counting k-mers (1/2):0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:31:36] INFO: Counting k-mers (2/2):0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:31:36] INFO: Filling index table (1/2)0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:31:37] INFO: Filling index table (2/2)0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:32:15] INFO: Extending reads[2024-01-16 13:32:20] INFO: Overlap-based coverage: 24[2024-01-16 13:32:20] INFO: Median overlap divergence: 0.1841870% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:32:21] INFO: Assembled 1 disjointigs[2024-01-16 13:32:21] INFO: Generating sequence10% 20% 30% 40% 50% 60% 70% 80% 100% [2024-01-16 13:32:23] INFO: >>>STAGE: consensus[2024-01-16 13:32:23] INFO: Running Minimap2[2024-01-16 13:32:24] INFO: Computing consensus[2024-01-16 13:32:26] INFO: Alignment error rate: 0.183209[2024-01-16 13:32:26] INFO: >>>STAGE: repeat[2024-01-16 13:32:26] INFO: Building and resolving repeat graph[2024-01-16 13:32:26] INFO: Reading sequences[2024-01-16 13:32:26] INFO: Building repeat graph50% 100% [2024-01-16 13:32:46] INFO: Median overlap divergence: 0[2024-01-16 13:32:46] INFO: Aligning reads to the graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-01-16 13:33:06] INFO: Aligned read sequence: 1158698 / 1313105 (0.882411)[2024-01-16 13:33:06] INFO: Median overlap divergence: 0.0642069[2024-01-16 13:33:06] INFO: Mean edge coverage: 32[2024-01-16 13:33:06] INFO: Resolving repeats[2024-01-16 13:33:06] INFO: >>>STAGE: plasmids[2024-01-16 13:33:06] INFO: Recovering short unassembled sequencesTraceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs00000000007e4fd60000005b'[2024-01-16 13:33:07] INFO: Added 0 extra contigs[2024-01-16 13:33:07] INFO: >>>STAGE: contigger[2024-01-16 13:33:07] INFO: Generating contigs[2024-01-16 13:33:07] INFO: Reading sequences[2024-01-16 13:33:07] INFO: Generated 1 contigs[2024-01-16 13:33:07] INFO: Added 0 scaffold connections[2024-01-16 13:33:07] INFO: >>>STAGE: polishing[2024-01-16 13:33:07] INFO: Polishing genome (1/1)[2024-01-16 13:33:07] INFO: Running minimap2[2024-01-16 13:33:08] INFO: Separating alignment into bubbles[2024-01-16 13:33:09] INFO: Alignment error rate: 0.115105[2024-01-16 13:33:09] INFO: Correcting bubbles0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs00000000007e54d40000005c'Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs00000000007e54e00000005d'[2024-01-16 13:33:15] INFO: >>>STAGE: finalize[2024-01-16 13:33:15] INFO: Assembly statistics:Total length:35685Fragments:1Fragments N50:35685Largest frg:35685Scaffolds:0Mean coverage:36[2024-01-16 13:33:15] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/80/working/out_dir/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #1)" name="0" time="78.93809080123901">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 5, merged 20; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 184.759 (target: 251)Getting block 1 of 29Getting block 2 of 29  Reserving size (252) for bucket 1  Reserving size (252) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2Getting block 3 of 29  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:Getting block 4 of 29  Reserving size (252) for bucket 4  Reserving size (252) for bucket 3  bucket 2: 10%  bucket 1: 10%  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 3  bucket 1: 20%  bucket 2: 20%  bucket 1: 30%  bucket 2: 30%  bucket 1: 40%  Entering block accumulator loop for bucket 4:  bucket 2: 40%  Entering block accumulator loop for bucket 3:  bucket 1: 50%  bucket 2: 50%  bucket 4: 10%  bucket 1: 60%  bucket 2: 60%  bucket 3: 10%  bucket 4: 20%  bucket 1: 70%  bucket 2: 70%  bucket 3: 20%  bucket 1: 80%  bucket 2: 80%  bucket 4: 30%  bucket 1: 90%  bucket 2: 90%  bucket 3: 30%  bucket 1: 100%  Sorting block of length 127 for bucket 1  (Using difference cover)  bucket 2: 100%  bucket 3: 40%  Sorting block of length 239 for bucket 2  (Using difference cover)  bucket 4: 40%  bucket 3: 50%  bucket 4: 50%  bucket 3: 60%  bucket 4: 60%  bucket 3: 70%  bucket 4: 70%  bucket 3: 80%  bucket 4: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 166 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 242 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 128 for bucket 1  Sorting block time: 00:00:00Returning block of 240 for bucket 2  Sorting block time: 00:00:00Returning block of 243 for bucket 4  Sorting block time: 00:00:00Returning block of 167 for bucket 3Getting block 5 of 29  Reserving size (252) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 29  Reserving size (252) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 5: 30%  bucket 6: 10%  bucket 5: 40%  bucket 5: 50%  bucket 6: 20%  bucket 5: 60%  bucket 5: 70%  bucket 6: 30%  bucket 5: 80%  bucket 6: 40%  bucket 5: 90%  bucket 6: 50%  bucket 5: 100%  Sorting block of length 162 for bucket 5  (Using difference cover)  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 164 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 5  Sorting block time: 00:00:00Returning block of 165 for bucket 6Getting block 7 of 29  Reserving size (252) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:Getting block 8 of 29  bucket 7: 10%  Reserving size (252) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 20%  Entering block accumulator loop for bucket 8:  bucket 7: 30%  bucket 8: 10%  bucket 7: 40%  bucket 8: 20%  bucket 7: 50%  bucket 8: 30%  bucket 7: 60%  bucket 8: 40%  bucket 7: 70%  bucket 8: 50%  bucket 7: 80%  bucket 8: 60%  bucket 7: 90%  bucket 8: 70%  bucket 7: 100%  bucket 8: 80%  Sorting block of length 220 for bucket 7  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block of length 242 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 221 for bucket 7  Sorting block time: 00:00:00Returning block of 243 for bucket 8Getting block 9 of 29  Reserving size (252) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 29  Reserving size (252) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 10%  bucket 9: 20%  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 10: 20%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  bucket 10: 80%  Sorting block of length 216 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 214 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 217 for bucket 9  Sorting block time: 00:00:00Returning block of 215 for bucket 10Getting block 11 of 29  Reserving size (252) for bucket 11Getting block 12 of 29  Reserving size (252) for bucket 12  Calculating Z arrays for bucket 11  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 229 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 195 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 230 for bucket 11  Sorting block time: 00:00:00Returning block of 196 for bucket 12Getting block 13 of 29  Reserving size (252) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 197 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 198 for bucket 13Getting block 14 of 29  Reserving size (252) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 191 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 192 for bucket 14Getting block 15 of 29  Reserving size (252) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%Getting block 16 of 29  Reserving size (252) for bucket 16  Calculating Z arrays for bucket 16  bucket 15: 20%  bucket 15: 30%  Entering block accumulator loop for bucket 16:  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 16: 10%  bucket 15: 80%  bucket 16: 20%  bucket 16: 30%  bucket 15: 90%  bucket 16: 40%  bucket 15: 100%  Sorting block of length 177 for bucket 15  (Using difference cover)  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 102 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 178 for bucket 15  Sorting block time: 00:00:00Returning block of 103 for bucket 16Getting block 17 of 29  Reserving size (252) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%Getting block 18 of 29  Reserving size (252) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 70%  bucket 17: 80%  Entering block accumulator loop for bucket 18:  bucket 17: 90%  bucket 17: 100%  bucket 18: 10%  Sorting block of length 162 for bucket 17  (Using difference cover)  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  Sorting block time: 00:00:00Returning block of 163 for bucket 17  bucket 18: 90%  bucket 18: 100%  Sorting block of length 117 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 18Getting block 19 of 29  Reserving size (252) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 29  Reserving size (252) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 19:  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 19: 20%  bucket 19: 30%  bucket 20: 10%  bucket 19: 40%  bucket 20: 20%  bucket 19: 50%  bucket 20: 30%  bucket 19: 60%  bucket 20: 40%  bucket 19: 70%  bucket 20: 50%  bucket 19: 80%  bucket 20: 60%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 161 for bucket 19  (Using difference cover)  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 232 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 162 for bucket 19  Sorting block time: 00:00:00Returning block of 233 for bucket 20Getting block 21 of 29  Reserving size (252) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 131 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Getting block 22 of 29  Reserving size (252) for bucket 22  Calculating Z arrays for bucket 22Returning block of 132 for bucket 21  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 220 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 221 for bucket 22Getting block 23 of 29  Reserving size (252) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:Getting block 24 of 29  Reserving size (252) for bucket 24  Calculating Z arrays for bucket 24  bucket 23: 10%  bucket 23: 20%  Entering block accumulator loop for bucket 24:  bucket 23: 30%  bucket 23: 40%  bucket 24: 10%  bucket 23: 50%  bucket 24: 20%  bucket 23: 60%  bucket 24: 30%  bucket 23: 70%  bucket 24: 40%  bucket 23: 80%  bucket 24: 50%  bucket 23: 90%  bucket 24: 60%  bucket 23: 100%  Sorting block of length 141 for bucket 23  (Using difference cover)  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 196 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 142 for bucket 23  Sorting block time: 00:00:00Returning block of 197 for bucket 24Getting block 25 of 29  Reserving size (252) for bucket 25  Calculating Z arrays for bucket 25Getting block 26 of 29  Reserving size (252) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 25:  Entering block accumulator loop for bucket 26:  bucket 25: 10%  bucket 26: 10%  bucket 25: 20%  bucket 26: 20%  bucket 25: 30%  bucket 26: 30%  bucket 25: 40%  bucket 26: 40%  bucket 25: 50%  bucket 26: 50%  bucket 25: 60%  bucket 26: 60%  bucket 25: 70%  bucket 26: 70%  bucket 25: 80%  bucket 26: 80%  bucket 25: 90%  bucket 26: 90%  bucket 25: 100%  Sorting block of length 227 for bucket 25  (Using difference cover)  bucket 26: 100%  Sorting block of length 195 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 228 for bucket 25  Sorting block time: 00:00:00Returning block of 196 for bucket 26Getting block 27 of 29  Reserving size (252) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%Getting block 28 of 29  Reserving size (252) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 20%  bucket 27: 30%  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 27: 40%  bucket 28: 20%  bucket 27: 50%  bucket 28: 30%  bucket 27: 60%  bucket 28: 40%  bucket 27: 70%  bucket 28: 50%  bucket 27: 80%  bucket 28: 60%  bucket 27: 90%  bucket 28: 70%  bucket 27: 100%  Sorting block of length 233 for bucket 27  (Using difference cover)  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 80 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 234 for bucket 27  Sorting block time: 00:00:00Returning block of 81 for bucket 28Getting block 29 of 29  Reserving size (252) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 180 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 181 for bucket 29
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 252 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #2)" name="1" time="68.85129523277283">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 5, merged 20; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 184.759 (target: 251)Getting block 1 of 29Getting block 2 of 29  Reserving size (252) for bucket 1Getting block 3 of 29  Reserving size (252) for bucket 3  Reserving size (252) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 3Getting block 4 of 29  Reserving size (252) for bucket 4  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 4  bucket 3: 10%  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 3: 20%  bucket 1: 20%  Entering block accumulator loop for bucket 4:  bucket 3: 30%  bucket 2: 10%  bucket 1: 30%  bucket 3: 40%  bucket 4: 10%  bucket 1: 40%  bucket 2: 20%  bucket 3: 50%  bucket 1: 50%  bucket 2: 30%  bucket 4: 20%  bucket 1: 60%  bucket 2: 40%  bucket 3: 60%  bucket 4: 30%  bucket 2: 50%  bucket 1: 70%  bucket 3: 70%  bucket 4: 40%  bucket 1: 80%  bucket 2: 60%  bucket 3: 80%  bucket 1: 90%  bucket 4: 50%  bucket 2: 70%  bucket 3: 90%  bucket 4: 60%  bucket 1: 100%  Sorting block of length 127 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 3: 100%  bucket 4: 70%  Sorting block of length 166 for bucket 3  (Using difference cover)  bucket 2: 90%  bucket 4: 80%  bucket 2: 100%  Sorting block of length 239 for bucket 2  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 242 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 128 for bucket 1  Sorting block time: 00:00:00Returning block of 240 for bucket 2  Sorting block time: 00:00:00Returning block of 167 for bucket 3  Sorting block time: 00:00:00Returning block of 243 for bucket 4Getting block 5 of 29  Reserving size (252) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%Getting block 6 of 29  Reserving size (252) for bucket 6  bucket 5: 90%  Calculating Z arrays for bucket 6  bucket 5: 100%  Sorting block of length 162 for bucket 5  (Using difference cover)  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  Sorting block time: 00:00:00Returning block of 163 for bucket 5  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 164 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 165 for bucket 6Getting block 7 of 29  Reserving size (252) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:Getting block 8 of 29  Reserving size (252) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 10%  Entering block accumulator loop for bucket 8:  bucket 7: 20%  bucket 8: 10%  bucket 7: 30%  bucket 8: 20%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 220 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 242 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 221 for bucket 7  Sorting block time: 00:00:00Returning block of 243 for bucket 8Getting block 9 of 29  Reserving size (252) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 216 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 217 for bucket 9Getting block 10 of 29  Reserving size (252) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 214 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 215 for bucket 10Getting block 11 of 29  Reserving size (252) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 229 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 230 for bucket 11Getting block 12 of 29  Reserving size (252) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%Getting block 13 of 29  Reserving size (252) for bucket 13  Calculating Z arrays for bucket 13  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  Entering block accumulator loop for bucket 13:  bucket 12: 80%  bucket 12: 90%  bucket 13: 10%  bucket 12: 100%  Sorting block of length 195 for bucket 12  (Using difference cover)  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  Sorting block time: 00:00:00Returning block of 196 for bucket 12  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 197 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 198 for bucket 13Getting block 14 of 29  Reserving size (252) for bucket 14  Calculating Z arrays for bucket 14Getting block 15 of 29  Reserving size (252) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 14:  bucket 14: 10%  Entering block accumulator loop for bucket 15:  bucket 14: 20%  bucket 15: 10%  bucket 14: 30%  bucket 15: 20%  bucket 14: 40%  bucket 15: 30%  bucket 14: 50%  bucket 15: 40%  bucket 15: 50%  bucket 14: 60%  bucket 15: 60%  bucket 15: 70%  bucket 14: 70%  bucket 15: 80%  bucket 14: 80%  bucket 15: 90%  bucket 14: 90%  bucket 15: 100%  bucket 14: 100%  Sorting block of length 177 for bucket 15  (Using difference cover)  Sorting block of length 191 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 178 for bucket 15  Sorting block time: 00:00:00Returning block of 192 for bucket 14Getting block 16 of 29  Reserving size (252) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 29  Entering block accumulator loop for bucket 16:  Reserving size (252) for bucket 17  Calculating Z arrays for bucket 17  bucket 16: 10%  Entering block accumulator loop for bucket 17:  bucket 16: 20%  bucket 16: 30%  bucket 17: 10%  bucket 16: 40%  bucket 17: 20%  bucket 16: 50%  bucket 17: 30%  bucket 16: 60%  bucket 17: 40%  bucket 16: 70%  bucket 17: 50%  bucket 16: 80%  bucket 17: 60%  bucket 16: 90%  bucket 17: 70%  bucket 16: 100%  Sorting block of length 102 for bucket 16  (Using difference cover)  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 162 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 103 for bucket 16  Sorting block time: 00:00:00Returning block of 163 for bucket 17Getting block 18 of 29  Reserving size (252) for bucket 18  Calculating Z arrays for bucket 18Getting block 19 of 29  Reserving size (252) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 18:  Entering block accumulator loop for bucket 19:  bucket 18: 10%  bucket 19: 10%  bucket 18: 20%  bucket 19: 20%  bucket 18: 30%  bucket 19: 30%  bucket 18: 40%  bucket 19: 40%  bucket 18: 50%  bucket 19: 50%  bucket 18: 60%  bucket 19: 60%  bucket 18: 70%  bucket 19: 70%  bucket 18: 80%  bucket 19: 80%  bucket 18: 90%  bucket 19: 90%  bucket 18: 100%  Sorting block of length 117 for bucket 18  (Using difference cover)  bucket 19: 100%  Sorting block of length 161 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 18  Sorting block time: 00:00:00Returning block of 162 for bucket 19Getting block 20 of 29  Reserving size (252) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 232 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 233 for bucket 20Getting block 21 of 29  Reserving size (252) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%Getting block 22 of 29  Reserving size (252) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 29  Reserving size (252) for bucket 23  Calculating Z arrays for bucket 23  bucket 21: 40%  Entering block accumulator loop for bucket 22:  bucket 21: 50%  Entering block accumulator loop for bucket 23:  bucket 21: 60%  bucket 22: 10%  bucket 21: 70%  bucket 23: 10%  bucket 21: 80%  bucket 22: 20%  bucket 23: 20%  bucket 21: 90%  bucket 23: 30%  bucket 21: 100%  bucket 22: 30%  Sorting block of length 131 for bucket 21  (Using difference cover)  bucket 23: 40%  bucket 22: 40%  bucket 23: 50%  bucket 22: 50%  bucket 23: 60%  bucket 23: 70%  bucket 22: 60%  bucket 23: 80%  bucket 22: 70%  bucket 23: 90%  bucket 23: 100%  bucket 22: 80%  Sorting block of length 141 for bucket 23  (Using difference cover)  bucket 22: 90%  bucket 22: 100%  Sorting block of length 220 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 132 for bucket 21  Sorting block time: 00:00:00Returning block of 142 for bucket 23  Sorting block time: 00:00:00Returning block of 221 for bucket 22Getting block 24 of 29  Reserving size (252) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 196 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 197 for bucket 24Getting block 25 of 29  Reserving size (252) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:Getting block 26 of 29  Reserving size (252) for bucket 26  bucket 25: 10%  Calculating Z arrays for bucket 26  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  Entering block accumulator loop for bucket 26:  bucket 25: 50%  bucket 26: 10%  bucket 25: 60%  bucket 26: 20%  bucket 25: 70%  bucket 26: 30%  bucket 25: 80%  bucket 26: 40%  bucket 25: 90%  bucket 26: 50%  bucket 25: 100%  Sorting block of length 227 for bucket 25  (Using difference cover)  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 195 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 228 for bucket 25  Sorting block time: 00:00:00Returning block of 196 for bucket 26Getting block 27 of 29  Reserving size (252) for bucket 27  Calculating Z arrays for bucket 27Getting block 28 of 29  Reserving size (252) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 27:  bucket 27: 10%  Entering block accumulator loop for bucket 28:  bucket 27: 20%  bucket 28: 10%  bucket 27: 30%  bucket 28: 20%  bucket 27: 40%  bucket 28: 30%  bucket 27: 50%  bucket 28: 40%  bucket 27: 60%  bucket 28: 50%  bucket 27: 70%  bucket 28: 60%  bucket 27: 80%  bucket 28: 70%  bucket 27: 90%  bucket 28: 80%  bucket 27: 100%  Sorting block of length 233 for bucket 27  (Using difference cover)  bucket 28: 90%  bucket 28: 100%  Sorting block of length 80 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 234 for bucket 27  Sorting block time: 00:00:00Returning block of 81 for bucket 28Getting block 29 of 29  Reserving size (252) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 180 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 181 for bucket 29
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 252 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #11)" name="10" time="66.23824453353882">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 5, merged 20; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 184.759 (target: 251)Getting block 1 of 29Getting block 2 of 29  Reserving size (252) for bucket 2  Reserving size (252) for bucket 1  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2Getting block 3 of 29  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:Getting block 4 of 29  Reserving size (252) for bucket 4  Calculating Z arrays for bucket 4  Reserving size (252) for bucket 3  bucket 1: 10%  Calculating Z arrays for bucket 3  bucket 2: 10%  bucket 1: 20%  Entering block accumulator loop for bucket 4:  bucket 1: 30%  bucket 2: 20%  Entering block accumulator loop for bucket 3:  bucket 1: 40%  bucket 2: 30%  bucket 4: 10%  bucket 1: 50%  bucket 2: 40%  bucket 3: 10%  bucket 4: 20%  bucket 1: 60%  bucket 2: 50%  bucket 3: 20%  bucket 1: 70%  bucket 2: 60%  bucket 4: 30%  bucket 1: 80%  bucket 3: 30%  bucket 2: 70%  bucket 4: 40%  bucket 1: 90%  bucket 2: 80%  bucket 3: 40%  bucket 4: 50%  bucket 1: 100%  Sorting block of length 127 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 3: 50%  bucket 4: 60%  bucket 2: 100%  Sorting block of length 239 for bucket 2  (Using difference cover)  bucket 3: 60%  bucket 4: 70%  bucket 3: 70%  bucket 4: 80%  bucket 3: 80%  bucket 4: 90%  bucket 3: 90%  bucket 4: 100%  Sorting block of length 242 for bucket 4  (Using difference cover)  bucket 3: 100%  Sorting block of length 166 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 167 for bucket 3  Sorting block time: 00:00:00Returning block of 128 for bucket 1  Sorting block time: 00:00:00Returning block of 240 for bucket 2  Sorting block time: 00:00:00Returning block of 243 for bucket 4Getting block 5 of 29  Reserving size (252) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%Getting block 6 of 29  bucket 5: 60%  Reserving size (252) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 70%  Entering block accumulator loop for bucket 6:  bucket 5: 80%  bucket 6: 10%  bucket 5: 90%  bucket 6: 20%  bucket 5: 100%  Sorting block of length 162 for bucket 5  (Using difference cover)  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 164 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 5  Sorting block time: 00:00:00Returning block of 165 for bucket 6Getting block 7 of 29  Reserving size (252) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 220 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 221 for bucket 7Getting block 8 of 29  Reserving size (252) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 242 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 243 for bucket 8Getting block 9 of 29  Reserving size (252) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 29  Reserving size (252) for bucket 10Getting block 11 of 29  Reserving size (252) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 9:  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 11:  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 11: 10%  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 11: 20%  bucket 10: 20%  bucket 9: 50%  bucket 11: 30%  bucket 9: 60%  bucket 10: 30%  bucket 9: 70%  bucket 11: 40%  bucket 9: 80%  bucket 10: 40%  bucket 11: 50%  bucket 9: 90%  bucket 10: 50%  bucket 9: 100%  Sorting block of length 216 for bucket 9  (Using difference cover)  bucket 11: 60%  bucket 10: 60%  bucket 11: 70%  bucket 10: 70%  bucket 11: 80%  bucket 10: 80%  bucket 11: 90%  bucket 10: 90%  bucket 11: 100%  bucket 10: 100%  Sorting block of length 229 for bucket 11  Sorting block time: 00:00:00  (Using difference cover)Returning block of 217 for bucket 9  Sorting block of length 214 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 230 for bucket 11  Sorting block time: 00:00:00Returning block of 215 for bucket 10Getting block 12 of 29  Reserving size (252) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 195 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 196 for bucket 12Getting block 13 of 29  Reserving size (252) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%Getting block 14 of 29  Reserving size (252) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 90%  bucket 13: 100%  Entering block accumulator loop for bucket 14:  Sorting block of length 197 for bucket 13  (Using difference cover)  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  Sorting block time: 00:00:00Returning block of 198 for bucket 13  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 191 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 192 for bucket 14Getting block 15 of 29  Reserving size (252) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 177 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 178 for bucket 15Getting block 16 of 29  Reserving size (252) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 102 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 103 for bucket 16Getting block 17 of 29  Reserving size (252) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%Getting block 18 of 29  Reserving size (252) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 30%  bucket 17: 40%  Entering block accumulator loop for bucket 18:  bucket 17: 50%  bucket 18: 10%  bucket 17: 60%  bucket 18: 20%  bucket 17: 70%  bucket 18: 30%  bucket 17: 80%  bucket 18: 40%  bucket 17: 90%  bucket 18: 50%  bucket 17: 100%  Sorting block of length 162 for bucket 17  (Using difference cover)  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 117 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 17  Sorting block time: 00:00:00Returning block of 118 for bucket 18Getting block 19 of 29  Reserving size (252) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 29  Reserving size (252) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 19:  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 19: 20%  bucket 20: 10%  bucket 19: 30%  bucket 20: 20%  bucket 19: 40%  bucket 20: 30%  bucket 19: 50%  bucket 19: 60%  bucket 20: 40%  bucket 19: 70%  bucket 20: 50%  bucket 19: 80%  bucket 20: 60%  bucket 19: 90%  bucket 20: 70%  bucket 19: 100%  Sorting block of length 161 for bucket 19  (Using difference cover)  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 232 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 162 for bucket 19  Sorting block time: 00:00:00Returning block of 233 for bucket 20Getting block 21 of 29  Reserving size (252) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 131 for bucket 21  (Using difference cover)Getting block 22 of 29  Reserving size (252) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  Sorting block time: 00:00:00Returning block of 132 for bucket 21  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 220 for bucket 22  (Using difference cover)Getting block 23 of 29  Reserving size (252) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  Sorting block time: 00:00:00Returning block of 221 for bucket 22  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 141 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 142 for bucket 23Getting block 24 of 29  Reserving size (252) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 196 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 197 for bucket 24Getting block 25 of 29  Reserving size (252) for bucket 25  Calculating Z arrays for bucket 25Getting block 26 of 29  Reserving size (252) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 25:  bucket 25: 10%  Entering block accumulator loop for bucket 26:  bucket 25: 20%  bucket 26: 10%  bucket 25: 30%  bucket 26: 20%  bucket 25: 40%  bucket 26: 30%  bucket 25: 50%  bucket 26: 40%  bucket 25: 60%  bucket 26: 50%  bucket 25: 70%  bucket 26: 60%  bucket 25: 80%  bucket 26: 70%  bucket 25: 90%  bucket 26: 80%  bucket 25: 100%  Sorting block of length 227 for bucket 25  (Using difference cover)  bucket 26: 90%  bucket 26: 100%  Sorting block of length 195 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 196 for bucket 26  Sorting block time: 00:00:00Returning block of 228 for bucket 25Getting block 27 of 29  Reserving size (252) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%Getting block 28 of 29  Reserving size (252) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 40%  bucket 27: 50%  Entering block accumulator loop for bucket 28:  bucket 27: 60%  bucket 28: 10%  bucket 27: 70%  bucket 28: 20%  bucket 27: 80%  bucket 28: 30%  bucket 27: 90%  bucket 28: 40%  bucket 27: 100%  Sorting block of length 233 for bucket 27  (Using difference cover)  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 80 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 234 for bucket 27  Sorting block time: 00:00:00Returning block of 81 for bucket 28Getting block 29 of 29  Reserving size (252) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 180 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 181 for bucket 29
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 252 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:01HISAT2 summary stats:Total reads: 10Aligned 0 time: 0 (0.00%)Aligned 1 time: 10 (100.00%)Aligned >1 times: 0 (0.00%)Overall alignment rate: 100.00%
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #12)" name="11" time="66.04819655418396">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 5, merged 20; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 184.759 (target: 251)Getting block 1 of 29  Reserving size (252) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 29  Entering block accumulator loop for bucket 1:Getting block 3 of 29  Reserving size (252) for bucket 3  Calculating Z arrays for bucket 3  bucket 1: 10%  Reserving size (252) for bucket 2  Calculating Z arrays for bucket 2  bucket 1: 20%Getting block 4 of 29  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 2:  Reserving size (252) for bucket 4  bucket 1: 30%  Calculating Z arrays for bucket 4  bucket 2: 10%  bucket 3: 10%  bucket 1: 40%  bucket 2: 20%  bucket 3: 20%  bucket 1: 50%  bucket 2: 30%  Entering block accumulator loop for bucket 4:  bucket 1: 60%  bucket 3: 30%  bucket 2: 40%  bucket 1: 70%  bucket 3: 40%  bucket 4: 10%  bucket 1: 80%  bucket 3: 50%  bucket 2: 50%  bucket 4: 20%  bucket 2: 60%  bucket 1: 90%  bucket 3: 60%  bucket 4: 30%  bucket 2: 70%  bucket 1: 100%  Sorting block of length 127 for bucket 1  (Using difference cover)  bucket 4: 40%  bucket 2: 80%  bucket 3: 70%  bucket 4: 50%  bucket 2: 90%  bucket 3: 80%  bucket 4: 60%  bucket 2: 100%  Sorting block of length 239 for bucket 2  (Using difference cover)  bucket 3: 90%  bucket 4: 70%  bucket 3: 100%  Sorting block of length 166 for bucket 3  (Using difference cover)  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 242 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 240 for bucket 2  Sorting block time: 00:00:00Returning block of 128 for bucket 1  Sorting block time: 00:00:00Returning block of 167 for bucket 3  Sorting block time: 00:00:00Returning block of 243 for bucket 4Getting block 5 of 29  Reserving size (252) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%Getting block 6 of 29  Reserving size (252) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 60%  bucket 5: 70%  Entering block accumulator loop for bucket 6:  bucket 5: 80%  bucket 5: 90%  bucket 6: 10%  bucket 5: 100%  Sorting block of length 162 for bucket 5  (Using difference cover)  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%Getting block 7 of 29  Reserving size (252) for bucket 7  Calculating Z arrays for bucket 7  bucket 6: 70%  bucket 6: 80%  Entering block accumulator loop for bucket 7:  bucket 6: 90%  bucket 6: 100%  Sorting block of length 164 for bucket 6  (Using difference cover)Getting block 8 of 29  Sorting block time: 00:00:00  Reserving size (252) for bucket 8  Calculating Z arrays for bucket 8Returning block of 163 for bucket 5  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  Sorting block time: 00:00:00  bucket 8: 30%Returning block of 165 for bucket 6  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 220 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 221 for bucket 7  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 242 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 243 for bucket 8Getting block 9 of 29  Reserving size (252) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 29  Reserving size (252) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 9: 50%  bucket 10: 60%  bucket 9: 60%  bucket 10: 70%  bucket 9: 70%  bucket 10: 80%  bucket 9: 80%  bucket 10: 90%  bucket 9: 90%  bucket 10: 100%  Sorting block of length 214 for bucket 10  (Using difference cover)  bucket 9: 100%  Sorting block of length 216 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 215 for bucket 10  Sorting block time: 00:00:00Returning block of 217 for bucket 9Getting block 11 of 29  Reserving size (252) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:Getting block 12 of 29  Reserving size (252) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 10%  Entering block accumulator loop for bucket 12:  bucket 11: 20%  bucket 11: 30%  bucket 12: 10%  bucket 11: 40%  bucket 12: 20%  bucket 11: 50%  bucket 11: 60%  bucket 12: 30%  bucket 11: 70%  bucket 12: 40%  bucket 11: 80%  bucket 11: 90%  bucket 12: 50%  bucket 11: 100%  Sorting block of length 229 for bucket 11  (Using difference cover)  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 195 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 230 for bucket 11  Sorting block time: 00:00:00Returning block of 196 for bucket 12Getting block 13 of 29  Reserving size (252) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 29Getting block 15 of 29  Reserving size (252) for bucket 15Getting block 16 of 29  Reserving size (252) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 13:  Calculating Z arrays for bucket 15  Reserving size (252) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 10%  Entering block accumulator loop for bucket 16:  Entering block accumulator loop for bucket 15:  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 16: 10%  bucket 15: 10%  bucket 14: 10%  bucket 13: 30%  bucket 16: 20%  bucket 15: 20%  bucket 14: 20%  bucket 13: 40%  bucket 16: 30%  bucket 15: 30%  bucket 14: 30%  bucket 13: 50%  bucket 16: 40%  bucket 15: 40%  bucket 14: 40%  bucket 13: 60%  bucket 16: 50%  bucket 15: 50%  bucket 14: 50%  bucket 13: 70%  bucket 16: 60%  bucket 15: 60%  bucket 14: 60%  bucket 13: 80%  bucket 16: 70%  bucket 15: 70%  bucket 14: 70%  bucket 13: 90%  bucket 16: 80%  bucket 15: 80%  bucket 14: 80%  bucket 13: 100%  bucket 16: 90%  Sorting block of length 197 for bucket 13  (Using difference cover)  bucket 14: 90%  bucket 15: 90%  bucket 16: 100%  Sorting block of length 102 for bucket 16  (Using difference cover)  bucket 14: 100%  bucket 15: 100%  Sorting block of length 191 for bucket 14  (Using difference cover)  Sorting block of length 177 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 103 for bucket 16  Sorting block time: 00:00:00Returning block of 198 for bucket 13  Sorting block time: 00:00:00Returning block of 178 for bucket 15  Sorting block time: 00:00:00Returning block of 192 for bucket 14Getting block 17 of 29  Reserving size (252) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%Getting block 18 of 29  Reserving size (252) for bucket 18  Calculating Z arrays for bucket 18Getting block 19 of 29  Reserving size (252) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 18:  Entering block accumulator loop for bucket 19:  bucket 17: 30%  bucket 18: 10%  bucket 19: 10%  bucket 17: 40%  bucket 18: 20%  bucket 19: 20%  bucket 17: 50%  bucket 18: 30%  bucket 19: 30%  bucket 17: 60%  bucket 18: 40%  bucket 19: 40%  bucket 17: 70%  bucket 18: 50%  bucket 19: 50%  bucket 17: 80%  bucket 18: 60%  bucket 19: 60%  bucket 17: 90%  bucket 18: 70%  bucket 19: 70%  bucket 17: 100%  Sorting block of length 162 for bucket 17  (Using difference cover)  bucket 18: 80%  bucket 18: 90%  bucket 19: 80%  bucket 18: 100%  Sorting block of length 117 for bucket 18  (Using difference cover)  bucket 19: 90%  bucket 19: 100%  Sorting block of length 161 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 17Getting block 20 of 29  Reserving size (252) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  Sorting block time: 00:00:00  bucket 20: 20%Returning block of 118 for bucket 18  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  Sorting block time: 00:00:00Returning block of 162 for bucket 19  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 232 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 233 for bucket 20Getting block 21 of 29  Reserving size (252) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%Getting block 22 of 29  Reserving size (252) for bucket 22  Calculating Z arrays for bucket 22  bucket 21: 20%Getting block 23 of 29  Reserving size (252) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 22:  bucket 21: 30%  bucket 21: 40%  bucket 22: 10%  Entering block accumulator loop for bucket 23:  bucket 21: 50%  bucket 22: 20%  bucket 21: 60%  bucket 23: 10%  bucket 22: 30%  bucket 21: 70%  bucket 23: 20%  bucket 22: 40%  bucket 21: 80%  bucket 23: 30%  bucket 22: 50%  bucket 21: 90%  bucket 23: 40%  bucket 22: 60%  bucket 21: 100%  Sorting block of length 131 for bucket 21  (Using difference cover)  bucket 23: 50%  bucket 22: 70%  bucket 23: 60%  bucket 22: 80%  bucket 23: 70%  bucket 22: 90%  bucket 23: 80%  bucket 22: 100%  Sorting block of length 220 for bucket 22  (Using difference cover)  bucket 23: 90%  bucket 23: 100%  Sorting block of length 141 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 132 for bucket 21  Sorting block time: 00:00:00Returning block of 221 for bucket 22  Sorting block time: 00:00:00Returning block of 142 for bucket 23Getting block 24 of 29  Reserving size (252) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 196 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 197 for bucket 24Getting block 25 of 29  Reserving size (252) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%Getting block 26 of 29  Reserving size (252) for bucket 26  Calculating Z arrays for bucket 26  bucket 25: 20%  bucket 25: 30%  Entering block accumulator loop for bucket 26:  bucket 25: 40%  bucket 26: 10%  bucket 25: 50%  bucket 26: 20%  bucket 25: 60%  bucket 26: 30%  bucket 25: 70%  bucket 26: 40%  bucket 25: 80%  bucket 26: 50%  bucket 25: 90%  bucket 26: 60%  bucket 25: 100%  Sorting block of length 227 for bucket 25  (Using difference cover)  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 195 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 228 for bucket 25  Sorting block time: 00:00:00Returning block of 196 for bucket 26Getting block 27 of 29  Reserving size (252) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%Getting block 28 of 29  Reserving size (252) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 40%  bucket 27: 50%  Entering block accumulator loop for bucket 28:  bucket 27: 60%  bucket 28: 10%  bucket 27: 70%  bucket 28: 20%  bucket 27: 80%  bucket 28: 30%  bucket 27: 90%  bucket 28: 40%  bucket 27: 100%  Sorting block of length 233 for bucket 27  (Using difference cover)  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 80 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 234 for bucket 27  Sorting block time: 00:00:00Returning block of 81 for bucket 28Getting block 29 of 29  Reserving size (252) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 180 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 181 for bucket 29
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 252 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #13)" name="12" time="64.58463501930237">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 5, merged 20; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 184.759 (target: 251)Getting block 1 of 29  Reserving size (252) for bucket 1Getting block 3 of 29Getting block 2 of 29  Calculating Z arrays for bucket 1  Reserving size (252) for bucket 2Getting block 4 of 29  Reserving size (252) for bucket 4  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 4  Reserving size (252) for bucket 3  Calculating Z arrays for bucket 3  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  Entering block accumulator loop for bucket 4:  bucket 2: 10%  bucket 1: 30%  Entering block accumulator loop for bucket 3:  bucket 2: 20%  bucket 4: 10%  bucket 1: 40%  bucket 3: 10%  bucket 2: 30%  bucket 4: 20%  bucket 1: 50%  bucket 2: 40%  bucket 3: 20%  bucket 4: 30%  bucket 2: 50%  bucket 1: 60%  bucket 3: 30%  bucket 4: 40%  bucket 2: 60%  bucket 1: 70%  bucket 4: 50%  bucket 2: 70%  bucket 3: 40%  bucket 1: 80%  bucket 4: 60%  bucket 2: 80%  bucket 1: 90%  bucket 3: 50%  bucket 2: 90%  bucket 1: 100%  Sorting block of length 127 for bucket 1  (Using difference cover)  bucket 3: 60%  bucket 2: 100%  Sorting block of length 239 for bucket 2  (Using difference cover)  bucket 4: 70%  bucket 3: 70%  bucket 4: 80%  bucket 3: 80%  bucket 4: 90%  bucket 3: 90%  bucket 4: 100%  Sorting block of length 242 for bucket 4  (Using difference cover)  bucket 3: 100%  Sorting block of length 166 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 128 for bucket 1  Sorting block time: 00:00:00Returning block of 167 for bucket 3  Sorting block time: 00:00:00Returning block of 240 for bucket 2  Sorting block time: 00:00:00Returning block of 243 for bucket 4Getting block 5 of 29  Reserving size (252) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%Getting block 6 of 29  Reserving size (252) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 20%  bucket 5: 30%  Entering block accumulator loop for bucket 6:  bucket 5: 40%  bucket 6: 10%  bucket 6: 20%Getting block 7 of 29  Reserving size (252) for bucket 7  bucket 5: 50%  Calculating Z arrays for bucket 7  bucket 6: 30%  bucket 5: 60%  bucket 6: 40%  bucket 5: 70%  bucket 6: 50%  Entering block accumulator loop for bucket 7:  bucket 5: 80%  bucket 6: 60%  bucket 5: 90%  bucket 7: 10%  bucket 6: 70%  bucket 5: 100%  Sorting block of length 162 for bucket 5  (Using difference cover)  bucket 6: 80%  bucket 7: 20%  bucket 6: 90%  bucket 7: 30%  bucket 6: 100%  Sorting block of length 164 for bucket 6  (Using difference cover)  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 220 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 5  Sorting block time: 00:00:00Returning block of 165 for bucket 6  Sorting block time: 00:00:00Returning block of 221 for bucket 7Getting block 8 of 29  Reserving size (252) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 242 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 243 for bucket 8Getting block 9 of 29  Reserving size (252) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%Getting block 10 of 29  Reserving size (252) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 60%  bucket 9: 70%  Entering block accumulator loop for bucket 10:  bucket 9: 80%  bucket 10: 10%  bucket 9: 90%  bucket 10: 20%  bucket 9: 100%  Sorting block of length 216 for bucket 9  (Using difference cover)  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  Sorting block time: 00:00:00Returning block of 217 for bucket 9  bucket 10: 100%  Sorting block of length 214 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 215 for bucket 10Getting block 11 of 29  Reserving size (252) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 229 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 230 for bucket 11Getting block 12 of 29  Reserving size (252) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 195 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 196 for bucket 12Getting block 13 of 29  Reserving size (252) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 29  Reserving size (252) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 10%  bucket 13: 20%  Entering block accumulator loop for bucket 14:  bucket 13: 30%  bucket 14: 10%  bucket 13: 40%  bucket 14: 20%  bucket 13: 50%  bucket 14: 30%  bucket 13: 60%  bucket 14: 40%  bucket 13: 70%  bucket 14: 50%  bucket 13: 80%  bucket 14: 60%  bucket 13: 90%  bucket 14: 70%  bucket 13: 100%  Sorting block of length 197 for bucket 13  (Using difference cover)  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 191 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 198 for bucket 13  Sorting block time: 00:00:00Returning block of 192 for bucket 14Getting block 15 of 29  Reserving size (252) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 177 for bucket 15  (Using difference cover)Getting block 16 of 29  Reserving size (252) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  Sorting block time: 00:00:00Returning block of 178 for bucket 15  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 102 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 103 for bucket 16Getting block 17 of 29  Reserving size (252) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%Getting block 18 of 29  Reserving size (252) for bucket 18  bucket 17: 20%  Calculating Z arrays for bucket 18  bucket 17: 30%  Entering block accumulator loop for bucket 18:  bucket 17: 40%  bucket 17: 50%  bucket 18: 10%  bucket 17: 60%  bucket 18: 20%  bucket 17: 70%  bucket 18: 30%  bucket 17: 80%  bucket 18: 40%  bucket 17: 90%  bucket 18: 50%  bucket 17: 100%  Sorting block of length 162 for bucket 17  (Using difference cover)  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 117 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 17  Sorting block time: 00:00:00Returning block of 118 for bucket 18Getting block 19 of 29  Reserving size (252) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:Getting block 20 of 29  Reserving size (252) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 10%  bucket 19: 20%  Entering block accumulator loop for bucket 20:  bucket 19: 30%  bucket 20: 10%  bucket 19: 40%  bucket 20: 20%  bucket 19: 50%  bucket 20: 30%  bucket 19: 60%  bucket 20: 40%  bucket 19: 70%  bucket 20: 50%  bucket 19: 80%  bucket 20: 60%  bucket 19: 90%  bucket 20: 70%  bucket 19: 100%  Sorting block of length 161 for bucket 19  bucket 20: 80%  (Using difference cover)  bucket 20: 90%  bucket 20: 100%  Sorting block of length 232 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 162 for bucket 19  Sorting block time: 00:00:00Returning block of 233 for bucket 20Getting block 21 of 29  Reserving size (252) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:Getting block 22 of 29  Reserving size (252) for bucket 22  Calculating Z arrays for bucket 22  bucket 21: 10%  bucket 21: 20%  Entering block accumulator loop for bucket 22:  bucket 21: 30%  bucket 22: 10%  bucket 21: 40%  bucket 22: 20%  bucket 21: 50%  bucket 22: 30%  bucket 21: 60%  bucket 22: 40%  bucket 21: 70%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 21: 80%  bucket 22: 80%  bucket 21: 90%  bucket 22: 90%  bucket 21: 100%  Sorting block of length 131 for bucket 21  (Using difference cover)  bucket 22: 100%  Sorting block of length 220 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 132 for bucket 21  Sorting block time: 00:00:00Returning block of 221 for bucket 22Getting block 23 of 29  Reserving size (252) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:Getting block 24 of 29  Reserving size (252) for bucket 24  Calculating Z arrays for bucket 24  bucket 23: 10%  bucket 23: 20%  Entering block accumulator loop for bucket 24:  bucket 23: 30%  bucket 24: 10%  bucket 23: 40%  bucket 23: 50%  bucket 24: 20%  bucket 23: 60%  bucket 24: 30%  bucket 23: 70%  bucket 24: 40%  bucket 23: 80%  bucket 24: 50%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 141 for bucket 23  (Using difference cover)  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 196 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 142 for bucket 23  Sorting block time: 00:00:00Returning block of 197 for bucket 24Getting block 25 of 29  Reserving size (252) for bucket 25  Calculating Z arrays for bucket 25Getting block 26 of 29  Reserving size (252) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 25:  bucket 25: 10%  Entering block accumulator loop for bucket 26:  bucket 25: 20%  bucket 25: 30%  bucket 26: 10%  bucket 26: 20%  bucket 25: 40%  bucket 26: 30%  bucket 25: 50%  bucket 26: 40%  bucket 25: 60%  bucket 26: 50%  bucket 25: 70%  bucket 26: 60%  bucket 25: 80%  bucket 26: 70%  bucket 25: 90%  bucket 26: 80%  bucket 26: 90%  bucket 25: 100%  Sorting block of length 227 for bucket 25  (Using difference cover)  bucket 26: 100%  Sorting block of length 195 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 228 for bucket 25  Sorting block time: 00:00:00Returning block of 196 for bucket 26Getting block 27 of 29  Reserving size (252) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%Getting block 28 of 29  Reserving size (252) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 50%  bucket 27: 60%  Entering block accumulator loop for bucket 28:  bucket 27: 70%  bucket 28: 10%  bucket 27: 80%  bucket 28: 20%  bucket 27: 90%  bucket 28: 30%  bucket 27: 100%  Sorting block of length 233 for bucket 27  (Using difference cover)  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 80 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 234 for bucket 27  Sorting block time: 00:00:00Returning block of 81 for bucket 28Getting block 29 of 29  Reserving size (252) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 180 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 181 for bucket 29
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 252 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #14)" name="13" time="66.25589990615845">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 5, merged 20; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 184.759 (target: 251)Getting block 1 of 29Getting block 2 of 29  Reserving size (252) for bucket 1  Reserving size (252) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2Getting block 3 of 29  Reserving size (252) for bucket 3  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 3Getting block 4 of 29  bucket 2: 10%  bucket 1: 10%  Reserving size (252) for bucket 4  Entering block accumulator loop for bucket 3:  bucket 1: 20%  Calculating Z arrays for bucket 4  bucket 2: 20%  bucket 1: 30%  bucket 3: 10%  bucket 2: 30%  bucket 1: 40%  bucket 3: 20%  Entering block accumulator loop for bucket 4:  bucket 1: 50%  bucket 2: 40%  bucket 3: 30%  bucket 1: 60%  bucket 4: 10%  bucket 3: 40%  bucket 2: 50%  bucket 1: 70%  bucket 4: 20%  bucket 3: 50%  bucket 1: 80%  bucket 2: 60%  bucket 4: 30%  bucket 1: 90%  bucket 3: 60%  bucket 2: 70%  bucket 1: 100%  bucket 4: 40%  Sorting block of length 127 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 4: 50%  bucket 3: 70%  bucket 2: 90%  bucket 4: 60%  bucket 3: 80%  bucket 2: 100%  Sorting block of length 239 for bucket 2  (Using difference cover)  bucket 4: 70%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 166 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 242 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 128 for bucket 1  Sorting block time: 00:00:00Returning block of 240 for bucket 2  Sorting block time: 00:00:00Returning block of 167 for bucket 3  Sorting block time: 00:00:00Returning block of 243 for bucket 4Getting block 5 of 29  Reserving size (252) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 162 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 5Getting block 6 of 29  Reserving size (252) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 164 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 165 for bucket 6Getting block 7 of 29  Reserving size (252) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 220 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 221 for bucket 7Getting block 8 of 29  Reserving size (252) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 242 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 243 for bucket 8Getting block 9 of 29  Reserving size (252) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 216 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 217 for bucket 9Getting block 10 of 29  Reserving size (252) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:Getting block 11 of 29  bucket 10: 10%  Reserving size (252) for bucket 11  Calculating Z arrays for bucket 11  bucket 10: 20%  Entering block accumulator loop for bucket 11:  bucket 10: 30%  bucket 10: 40%Getting block 12 of 29  Reserving size (252) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 10%  bucket 10: 50%  Entering block accumulator loop for bucket 12:  bucket 10: 60%  bucket 11: 20%  bucket 10: 70%  bucket 12: 10%  bucket 10: 80%  bucket 11: 30%  bucket 12: 20%  bucket 10: 90%  bucket 11: 40%  bucket 10: 100%  Sorting block of length 214 for bucket 10  (Using difference cover)  bucket 12: 30%  bucket 11: 50%  bucket 12: 40%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 229 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00  bucket 12: 100%Returning block of 215 for bucket 10  Sorting block of length 195 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 230 for bucket 11  Sorting block time: 00:00:00Returning block of 196 for bucket 12Getting block 13 of 29  Reserving size (252) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 197 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 198 for bucket 13Getting block 14 of 29  Reserving size (252) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%Getting block 15 of 29  Reserving size (252) for bucket 15  bucket 14: 20%  Calculating Z arrays for bucket 15  bucket 14: 30%  bucket 14: 40%  Entering block accumulator loop for bucket 15:  bucket 14: 50%  bucket 15: 10%  bucket 14: 60%  bucket 15: 20%  bucket 14: 70%  bucket 15: 30%  bucket 14: 80%  bucket 15: 40%  bucket 14: 90%  bucket 15: 50%  bucket 14: 100%  Sorting block of length 191 for bucket 14  (Using difference cover)  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 177 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 192 for bucket 14  Sorting block time: 00:00:00Returning block of 178 for bucket 15Getting block 16 of 29  Reserving size (252) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%Getting block 17 of 29  Reserving size (252) for bucket 17  Calculating Z arrays for bucket 17  bucket 16: 20%  bucket 16: 30%  Entering block accumulator loop for bucket 17:  bucket 16: 40%  bucket 17: 10%  bucket 16: 50%  bucket 17: 20%  bucket 16: 60%  bucket 17: 30%  bucket 16: 70%  bucket 17: 40%  bucket 16: 80%  bucket 17: 50%  bucket 16: 90%  bucket 17: 60%  bucket 16: 100%  Sorting block of length 102 for bucket 16  (Using difference cover)  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 162 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 103 for bucket 16  Sorting block time: 00:00:00Returning block of 163 for bucket 17Getting block 18 of 29  Reserving size (252) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%Getting block 19 of 29  bucket 18: 60%  Reserving size (252) for bucket 19  Calculating Z arrays for bucket 19  bucket 18: 70%  bucket 18: 80%  Entering block accumulator loop for bucket 19:  bucket 18: 90%  bucket 19: 10%  bucket 18: 100%  Sorting block of length 117 for bucket 18  (Using difference cover)  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  Sorting block time: 00:00:00Returning block of 118 for bucket 18  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 161 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 162 for bucket 19Getting block 20 of 29  Reserving size (252) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%Getting block 21 of 29  bucket 20: 50%  Reserving size (252) for bucket 21  Calculating Z arrays for bucket 21  bucket 20: 60%  bucket 20: 70%  Entering block accumulator loop for bucket 21:  bucket 20: 80%  bucket 20: 90%  bucket 21: 10%  bucket 20: 100%  Sorting block of length 232 for bucket 20  (Using difference cover)  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  Sorting block time: 00:00:00Returning block of 233 for bucket 20  bucket 21: 90%  bucket 21: 100%  Sorting block of length 131 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 132 for bucket 21Getting block 22 of 29  Reserving size (252) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 29  Reserving size (252) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 22:  bucket 22: 10%  Entering block accumulator loop for bucket 23:  bucket 22: 20%  bucket 23: 10%  bucket 22: 30%  bucket 23: 20%  bucket 22: 40%  bucket 23: 30%  bucket 22: 50%  bucket 23: 40%  bucket 22: 60%  bucket 23: 50%  bucket 22: 70%  bucket 23: 60%  bucket 22: 80%  bucket 23: 70%  bucket 22: 90%  bucket 23: 80%  bucket 22: 100%  Sorting block of length 220 for bucket 22  (Using difference cover)  bucket 23: 90%  bucket 23: 100%  Sorting block of length 141 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 142 for bucket 23  Sorting block time: 00:00:00Returning block of 221 for bucket 22Getting block 24 of 29  Reserving size (252) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 29  Reserving size (252) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 24:  bucket 24: 10%  Entering block accumulator loop for bucket 25:  bucket 24: 20%  bucket 25: 10%  bucket 24: 30%  bucket 25: 20%  bucket 24: 40%  bucket 25: 30%  bucket 24: 50%  bucket 25: 40%  bucket 25: 50%  bucket 24: 60%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 227 for bucket 25  (Using difference cover)  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 196 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 228 for bucket 25  Sorting block time: 00:00:00Returning block of 197 for bucket 24Getting block 26 of 29  Reserving size (252) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%Getting block 27 of 29  Reserving size (252) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 60%  bucket 26: 70%  Entering block accumulator loop for bucket 27:  bucket 26: 80%  bucket 26: 90%  bucket 27: 10%  bucket 26: 100%  Sorting block of length 195 for bucket 26  (Using difference cover)  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 233 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 196 for bucket 26  Sorting block time: 00:00:00Returning block of 234 for bucket 27Getting block 28 of 29  Reserving size (252) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 80 for bucket 28  (Using difference cover)Getting block 29 of 29  Reserving size (252) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  Sorting block time: 00:00:00  bucket 29: 10%Returning block of 81 for bucket 28  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 180 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 181 for bucket 29
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 252 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #15)" name="14" time="63.80074095726013">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 5, merged 20; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 184.759 (target: 251)Getting block 1 of 29  Reserving size (252) for bucket 1Getting block 2 of 29  Reserving size (252) for bucket 2  Calculating Z arrays for bucket 1Getting block 4 of 29  Reserving size (252) for bucket 4Getting block 3 of 29  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 1:  Reserving size (252) for bucket 3  Calculating Z arrays for bucket 3  bucket 1: 10%  Entering block accumulator loop for bucket 4:  bucket 1: 20%  Entering block accumulator loop for bucket 2:  bucket 1: 30%  Entering block accumulator loop for bucket 3:  bucket 4: 10%  bucket 2: 10%  bucket 1: 40%  bucket 3: 10%  bucket 4: 20%  bucket 1: 50%  bucket 2: 20%  bucket 3: 20%  bucket 1: 60%  bucket 4: 30%  bucket 2: 30%  bucket 3: 30%  bucket 1: 70%  bucket 2: 40%  bucket 3: 40%  bucket 1: 80%  bucket 2: 50%  bucket 4: 40%  bucket 1: 90%  bucket 3: 50%  bucket 2: 60%  bucket 1: 100%  Sorting block of length 127 for bucket 1  (Using difference cover)  bucket 4: 50%  bucket 2: 70%  bucket 3: 60%  bucket 4: 60%  bucket 2: 80%  bucket 3: 70%  bucket 4: 70%  bucket 2: 90%  bucket 3: 80%  bucket 4: 80%  bucket 2: 100%  Sorting block of length 239 for bucket 2  (Using difference cover)  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 166 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 242 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 128 for bucket 1  Sorting block time: 00:00:00Returning block of 167 for bucket 3  Sorting block time: 00:00:00Returning block of 243 for bucket 4  Sorting block time: 00:00:00Returning block of 240 for bucket 2Getting block 5 of 29  Reserving size (252) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 29  Entering block accumulator loop for bucket 5:  Reserving size (252) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 10%  bucket 5: 20%  Entering block accumulator loop for bucket 6:  bucket 5: 30%  bucket 5: 40%  bucket 6: 10%  bucket 5: 50%  bucket 6: 20%  bucket 5: 60%  bucket 6: 30%  bucket 5: 70%  bucket 6: 40%  bucket 5: 80%  bucket 6: 50%  bucket 5: 90%  bucket 6: 60%  bucket 5: 100%  Sorting block of length 162 for bucket 5  (Using difference cover)  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 164 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 5  Sorting block time: 00:00:00Returning block of 165 for bucket 6Getting block 7 of 29  Reserving size (252) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 29  Reserving size (252) for bucket 8  Entering block accumulator loop for bucket 7:  Calculating Z arrays for bucket 8  bucket 7: 10%  Entering block accumulator loop for bucket 8:  bucket 7: 20%  bucket 8: 10%  bucket 7: 30%  bucket 8: 20%  bucket 7: 40%  bucket 8: 30%  bucket 7: 50%  bucket 8: 40%  bucket 7: 60%  bucket 8: 50%  bucket 7: 70%  bucket 8: 60%  bucket 7: 80%  bucket 8: 70%  bucket 7: 90%  bucket 8: 80%  bucket 7: 100%  bucket 8: 90%  Sorting block of length 220 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 242 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 221 for bucket 7  Sorting block time: 00:00:00Returning block of 243 for bucket 8Getting block 9 of 29  Reserving size (252) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%Getting block 10 of 29  Reserving size (252) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 20%  bucket 9: 30%  Entering block accumulator loop for bucket 10:  bucket 9: 40%  bucket 9: 50%  bucket 10: 10%  bucket 9: 60%  bucket 10: 20%  bucket 9: 70%  bucket 10: 30%  bucket 9: 80%  bucket 10: 40%  bucket 9: 90%  bucket 10: 50%  bucket 9: 100%  Sorting block of length 216 for bucket 9  (Using difference cover)  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 214 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 217 for bucket 9  Sorting block time: 00:00:00Returning block of 215 for bucket 10Getting block 11 of 29  Reserving size (252) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 229 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 230 for bucket 11Getting block 12 of 29  Reserving size (252) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 195 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 196 for bucket 12Getting block 13 of 29  Reserving size (252) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 29  Reserving size (252) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  bucket 13: 10%  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%Getting block 15 of 29  bucket 14: 20%  Reserving size (252) for bucket 15  Calculating Z arrays for bucket 15  bucket 13: 40%  bucket 14: 30%  bucket 13: 50%  Entering block accumulator loop for bucket 15:  bucket 14: 40%  bucket 13: 60%  bucket 15: 10%  bucket 14: 50%  bucket 13: 70%  bucket 15: 20%  bucket 13: 80%  bucket 14: 60%  bucket 15: 30%  bucket 13: 90%  bucket 15: 40%  bucket 14: 70%  bucket 13: 100%  Sorting block of length 197 for bucket 13  (Using difference cover)  bucket 15: 50%  bucket 14: 80%  bucket 15: 60%  bucket 14: 90%  bucket 15: 70%  bucket 14: 100%  bucket 15: 80%  Sorting block of length 191 for bucket 14  (Using difference cover)  bucket 15: 90%  bucket 15: 100%  Sorting block of length 177 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 198 for bucket 13  Sorting block time: 00:00:00Returning block of 178 for bucket 15  Sorting block time: 00:00:00Returning block of 192 for bucket 14Getting block 16 of 29  Reserving size (252) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 102 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 103 for bucket 16Getting block 17 of 29  Reserving size (252) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%Getting block 18 of 29  Reserving size (252) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 20%  bucket 17: 30%  Entering block accumulator loop for bucket 18:  bucket 17: 40%  bucket 17: 50%Getting block 19 of 29  bucket 18: 10%  bucket 17: 60%  Reserving size (252) for bucket 19  Calculating Z arrays for bucket 19  bucket 17: 70%  bucket 18: 20%  Entering block accumulator loop for bucket 19:  bucket 17: 80%  bucket 18: 30%  bucket 17: 90%  bucket 19: 10%  bucket 18: 40%  bucket 17: 100%  Sorting block of length 162 for bucket 17  (Using difference cover)  bucket 19: 20%  bucket 18: 50%  bucket 19: 30%  bucket 18: 60%  bucket 19: 40%  bucket 18: 70%  bucket 19: 50%  bucket 18: 80%  bucket 19: 60%  bucket 19: 70%  Sorting block time: 00:00:00  bucket 18: 90%Returning block of 163 for bucket 17  bucket 19: 80%  bucket 18: 100%  bucket 19: 90%  Sorting block of length 117 for bucket 18  (Using difference cover)  bucket 19: 100%  Sorting block of length 161 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 18  Sorting block time: 00:00:00Returning block of 162 for bucket 19Getting block 20 of 29  Reserving size (252) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 232 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 233 for bucket 20Getting block 21 of 29  Reserving size (252) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%Getting block 22 of 29  Reserving size (252) for bucket 22  Calculating Z arrays for bucket 22  bucket 21: 30%  bucket 21: 40%  Entering block accumulator loop for bucket 22:  bucket 21: 50%  bucket 21: 60%  bucket 22: 10%  bucket 21: 70%  bucket 22: 20%  bucket 21: 80%  bucket 22: 30%  bucket 21: 90%  bucket 22: 40%  bucket 21: 100%  Sorting block of length 131 for bucket 21  (Using difference cover)  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 220 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 132 for bucket 21  Sorting block time: 00:00:00Returning block of 221 for bucket 22Getting block 23 of 29  Reserving size (252) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 141 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 142 for bucket 23Getting block 24 of 29  Reserving size (252) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%Getting block 25 of 29  Reserving size (252) for bucket 25  bucket 24: 20%  Calculating Z arrays for bucket 25  bucket 24: 30%  bucket 24: 40%  Entering block accumulator loop for bucket 25:  bucket 24: 50%  bucket 24: 60%  bucket 25: 10%  bucket 24: 70%  bucket 24: 80%  bucket 25: 20%  bucket 24: 90%  bucket 25: 30%  bucket 24: 100%  Sorting block of length 196 for bucket 24  (Using difference cover)  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 227 for bucket 25  Sorting block time: 00:00:00  (Using difference cover)Returning block of 197 for bucket 24  Sorting block time: 00:00:00Returning block of 228 for bucket 25Getting block 26 of 29  Reserving size (252) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 195 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 196 for bucket 26Getting block 27 of 29  Reserving size (252) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 233 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 234 for bucket 27Getting block 28 of 29  Reserving size (252) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%Getting block 29 of 29  Reserving size (252) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 100%  Sorting block of length 80 for bucket 28  (Using difference cover)  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  Sorting block time: 00:00:00Returning block of 81 for bucket 28  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 180 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 181 for bucket 29
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 252 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    3 (30.00%) aligned concordantly 0 times    7 (70.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    3 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    3 pairs aligned 0 times concordantly or discordantly; of these:      6 mates make up the pairs; of these:        3 (50.00%) aligned 0 times        3 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times85.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #16)" name="15" time="63.00036859512329">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 5, merged 20; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 184.759 (target: 251)Getting block 1 of 29  Reserving size (252) for bucket 1  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 1:Getting block 2 of 29  bucket 1: 10%Getting block 3 of 29  bucket 1: 20%  Reserving size (252) for bucket 2  Reserving size (252) for bucket 3Getting block 4 of 29  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 2  Reserving size (252) for bucket 4  bucket 1: 30%  Calculating Z arrays for bucket 4  bucket 1: 40%  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 2:  bucket 1: 50%  bucket 3: 10%  Entering block accumulator loop for bucket 4:  bucket 2: 10%  bucket 1: 60%  bucket 3: 20%  bucket 2: 20%  bucket 1: 70%  bucket 4: 10%  bucket 3: 30%  bucket 2: 30%  bucket 1: 80%  bucket 3: 40%  bucket 2: 40%  bucket 1: 90%  bucket 4: 20%  bucket 3: 50%  bucket 1: 100%  bucket 2: 50%  bucket 3: 60%  Sorting block of length 127 for bucket 1  bucket 4: 30%  (Using difference cover)  bucket 3: 70%  bucket 2: 60%  bucket 4: 40%  bucket 3: 80%  bucket 2: 70%  bucket 4: 50%  bucket 3: 90%  bucket 2: 80%  bucket 4: 60%  bucket 3: 100%  bucket 2: 90%  Sorting block of length 166 for bucket 3  (Using difference cover)  bucket 2: 100%  Sorting block of length 239 for bucket 2  (Using difference cover)  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 242 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 128 for bucket 1  Sorting block time: 00:00:00Returning block of 240 for bucket 2  Sorting block time: 00:00:00Returning block of 167 for bucket 3  Sorting block time: 00:00:00Returning block of 243 for bucket 4Getting block 5 of 29  Reserving size (252) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%Getting block 6 of 29  bucket 5: 40%  Reserving size (252) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  Entering block accumulator loop for bucket 6:  bucket 5: 80%  bucket 6: 10%  bucket 5: 90%  bucket 6: 20%  bucket 5: 100%  Sorting block of length 162 for bucket 5  (Using difference cover)  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 164 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 5  Sorting block time: 00:00:00Returning block of 165 for bucket 6Getting block 7 of 29  Reserving size (252) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%Getting block 8 of 29  Reserving size (252) for bucket 8  bucket 7: 20%  Calculating Z arrays for bucket 8  bucket 7: 30%  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 7: 40%  bucket 8: 20%  bucket 7: 50%  bucket 8: 30%  bucket 7: 60%  bucket 8: 40%  bucket 7: 70%  bucket 8: 50%  bucket 7: 80%  bucket 8: 60%  bucket 7: 90%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 7: 100%  bucket 8: 100%  Sorting block of length 242 for bucket 8  (Using difference cover)  Sorting block of length 220 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 243 for bucket 8  Sorting block time: 00:00:00Returning block of 221 for bucket 7Getting block 9 of 29  Reserving size (252) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 29  Reserving size (252) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 10: 40%  bucket 9: 50%  bucket 9: 60%  bucket 10: 50%  bucket 9: 70%  bucket 10: 60%  bucket 9: 80%  bucket 10: 70%  bucket 9: 90%  bucket 10: 80%  bucket 9: 100%  Sorting block of length 216 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 214 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 217 for bucket 9  Sorting block time: 00:00:00Returning block of 215 for bucket 10Getting block 11 of 29  Reserving size (252) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:Getting block 12 of 29  Reserving size (252) for bucket 12  bucket 11: 10%  Calculating Z arrays for bucket 12  bucket 11: 20%  Entering block accumulator loop for bucket 12:  bucket 11: 30%  bucket 12: 10%  bucket 11: 40%  bucket 12: 20%  bucket 11: 50%  bucket 12: 30%  bucket 11: 60%  bucket 11: 70%  bucket 12: 40%  bucket 11: 80%  bucket 12: 50%  bucket 11: 90%  bucket 12: 60%  bucket 11: 100%  Sorting block of length 229 for bucket 11  (Using difference cover)  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 195 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 230 for bucket 11  Sorting block time: 00:00:00Returning block of 196 for bucket 12Getting block 13 of 29  Reserving size (252) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 197 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 198 for bucket 13Getting block 14 of 29  Reserving size (252) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 191 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 192 for bucket 14Getting block 15 of 29  Reserving size (252) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:Getting block 16 of 29  Reserving size (252) for bucket 16  Calculating Z arrays for bucket 16  bucket 15: 10%  bucket 15: 20%  Entering block accumulator loop for bucket 16:  bucket 15: 30%  bucket 16: 10%  bucket 15: 40%  bucket 16: 20%  bucket 15: 50%  bucket 16: 30%  bucket 16: 40%  bucket 15: 60%  bucket 16: 50%  bucket 15: 70%  bucket 16: 60%  bucket 15: 80%  bucket 16: 70%  bucket 15: 90%  bucket 16: 80%  bucket 15: 100%  Sorting block of length 177 for bucket 15  (Using difference cover)  bucket 16: 90%  bucket 16: 100%  Sorting block of length 102 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 178 for bucket 15  Sorting block time: 00:00:00Returning block of 103 for bucket 16Getting block 17 of 29  Reserving size (252) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%Getting block 18 of 29  Reserving size (252) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  Entering block accumulator loop for bucket 18:  bucket 17: 60%  bucket 18: 10%  bucket 17: 70%  bucket 18: 20%  bucket 17: 80%  bucket 18: 30%  bucket 17: 90%  bucket 18: 40%  bucket 17: 100%  Sorting block of length 162 for bucket 17  (Using difference cover)  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 117 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 17  Sorting block time: 00:00:00Returning block of 118 for bucket 18Getting block 19 of 29  Reserving size (252) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:Getting block 20 of 29  Reserving size (252) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 10%  bucket 19: 20%  Entering block accumulator loop for bucket 20:  bucket 19: 30%  bucket 19: 40%  bucket 20: 10%  bucket 19: 50%  bucket 19: 60%  bucket 20: 20%  bucket 19: 70%  bucket 20: 30%  bucket 19: 80%  bucket 20: 40%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 161 for bucket 19  (Using difference cover)  bucket 20: 50%  Sorting block time: 00:00:00Returning block of 162 for bucket 19  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 232 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 233 for bucket 20Getting block 21 of 29  Reserving size (252) for bucket 21  Calculating Z arrays for bucket 21Getting block 22 of 29  Reserving size (252) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  bucket 21: 10%  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 21: 20%  bucket 22: 20%  bucket 21: 30%  bucket 22: 30%  bucket 21: 40%  bucket 22: 40%  bucket 21: 50%  bucket 22: 50%  bucket 21: 60%  bucket 21: 70%  bucket 22: 60%  bucket 21: 80%  bucket 22: 70%  bucket 21: 90%  bucket 22: 80%  bucket 21: 100%  Sorting block of length 131 for bucket 21  (Using difference cover)  bucket 22: 90%  bucket 22: 100%  Sorting block of length 220 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 132 for bucket 21  Sorting block time: 00:00:00Returning block of 221 for bucket 22Getting block 23 of 29  Reserving size (252) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:Getting block 24 of 29  Reserving size (252) for bucket 24  bucket 23: 10%  Calculating Z arrays for bucket 24  bucket 23: 20%  bucket 23: 30%  Entering block accumulator loop for bucket 24:  bucket 23: 40%  bucket 24: 10%  bucket 23: 50%  bucket 24: 20%  bucket 23: 60%  bucket 24: 30%  bucket 23: 70%  bucket 24: 40%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 141 for bucket 23  (Using difference cover)  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  Sorting block time: 00:00:00Returning block of 142 for bucket 23  bucket 24: 90%  bucket 24: 100%  Sorting block of length 196 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 197 for bucket 24Getting block 25 of 29  Reserving size (252) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%Getting block 26 of 29  Reserving size (252) for bucket 26  Calculating Z arrays for bucket 26  bucket 25: 60%  bucket 25: 70%  Entering block accumulator loop for bucket 26:  bucket 25: 80%  bucket 26: 10%  bucket 25: 90%  bucket 25: 100%  bucket 26: 20%  Sorting block of length 227 for bucket 25  (Using difference cover)  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 195 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 228 for bucket 25  Sorting block time: 00:00:00Returning block of 196 for bucket 26Getting block 27 of 29  Reserving size (252) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%Getting block 28 of 29  Reserving size (252) for bucket 28  bucket 27: 50%  Calculating Z arrays for bucket 28  bucket 27: 60%  bucket 27: 70%  Entering block accumulator loop for bucket 28:  bucket 27: 80%  bucket 28: 10%  bucket 27: 90%  bucket 28: 20%  bucket 27: 100%  Sorting block of length 233 for bucket 27  (Using difference cover)  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 80 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 234 for bucket 27  Sorting block time: 00:00:00Returning block of 81 for bucket 28Getting block 29 of 29  Reserving size (252) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 180 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 181 for bucket 29
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 252 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were unpaired; of these:    0 (0.00%) aligned 0 times    10 (100.00%) aligned exactly 1 time    0 (0.00%) aligned >1 times100.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #17)" name="16" time="64.38560819625854">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 5, merged 20; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 184.759 (target: 251)Getting block 1 of 29  Reserving size (252) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 29  Reserving size (252) for bucket 2  Entering block accumulator loop for bucket 1:Getting block 3 of 29  Reserving size (252) for bucket 3  Calculating Z arrays for bucket 2  bucket 1: 10%  Calculating Z arrays for bucket 3Getting block 4 of 29  Reserving size (252) for bucket 4  Entering block accumulator loop for bucket 3:  bucket 1: 20%  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 2:  bucket 3: 10%  bucket 1: 30%  bucket 2: 10%  bucket 3: 20%  bucket 1: 40%  bucket 3: 30%  bucket 2: 20%  bucket 1: 50%  bucket 3: 40%  bucket 2: 30%  bucket 1: 60%  bucket 2: 40%  bucket 1: 70%  Entering block accumulator loop for bucket 4:  bucket 2: 50%  bucket 1: 80%  bucket 2: 60%  bucket 4: 10%  bucket 2: 70%  bucket 3: 50%  bucket 4: 20%  bucket 2: 80%  bucket 3: 60%  bucket 4: 30%  bucket 2: 90%  bucket 3: 70%  bucket 1: 90%  bucket 2: 100%  bucket 1: 100%  Sorting block of length 127 for bucket 1  (Using difference cover)  bucket 4: 40%  Sorting block of length 239 for bucket 2  (Using difference cover)  bucket 3: 80%  bucket 4: 50%  bucket 3: 90%  bucket 4: 60%  bucket 3: 100%  Sorting block of length 166 for bucket 3  (Using difference cover)  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 242 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 167 for bucket 3  Sorting block time: 00:00:00Returning block of 240 for bucket 2  Sorting block time: 00:00:00Returning block of 128 for bucket 1  Sorting block time: 00:00:00Returning block of 243 for bucket 4Getting block 5 of 29  Reserving size (252) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%Getting block 6 of 29  Reserving size (252) for bucket 6  bucket 5: 30%Getting block 7 of 29  Reserving size (252) for bucket 7  Calculating Z arrays for bucket 6  bucket 5: 40%  Calculating Z arrays for bucket 7  bucket 5: 50%  bucket 5: 60%  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 7:  bucket 5: 70%  bucket 6: 10%  bucket 5: 80%  bucket 7: 10%  bucket 6: 20%  bucket 5: 90%  bucket 7: 20%  bucket 6: 30%  bucket 5: 100%  Sorting block of length 162 for bucket 5  (Using difference cover)  bucket 7: 30%  bucket 6: 40%  bucket 7: 40%  bucket 6: 50%  bucket 7: 50%  bucket 6: 60%  bucket 7: 60%  bucket 6: 70%  bucket 7: 70%  bucket 6: 80%  bucket 7: 80%  bucket 7: 90%  bucket 6: 90%  bucket 7: 100%  bucket 6: 100%  Sorting block of length 220 for bucket 7  (Using difference cover)  Sorting block of length 164 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 5  Sorting block time: 00:00:00Returning block of 165 for bucket 6  Sorting block time: 00:00:00Returning block of 221 for bucket 7Getting block 8 of 29  Reserving size (252) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 242 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 243 for bucket 8Getting block 9 of 29  Reserving size (252) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 29  Reserving size (252) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 10%  bucket 9: 20%  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 9: 40%  bucket 10: 10%  bucket 9: 50%  bucket 10: 20%  bucket 9: 60%  bucket 10: 30%  bucket 9: 70%  bucket 10: 40%  bucket 9: 80%  bucket 10: 50%  bucket 9: 90%  bucket 10: 60%  bucket 9: 100%  Sorting block of length 216 for bucket 9  (Using difference cover)  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 214 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 217 for bucket 9  Sorting block time: 00:00:00Returning block of 215 for bucket 10Getting block 11 of 29  Reserving size (252) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 29  Reserving size (252) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 12: 20%  bucket 11: 60%  bucket 12: 30%  bucket 11: 70%  bucket 12: 40%  bucket 11: 80%  bucket 12: 50%  bucket 11: 90%  bucket 12: 60%  bucket 11: 100%  Sorting block of length 229 for bucket 11  (Using difference cover)  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 195 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 230 for bucket 11  Sorting block time: 00:00:00Returning block of 196 for bucket 12Getting block 13 of 29  Reserving size (252) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 29  Reserving size (252) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  bucket 14: 100%  Sorting block of length 197 for bucket 13  (Using difference cover)  Sorting block of length 191 for bucket 14  (Using difference cover)Getting block 15 of 29  Reserving size (252) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  Sorting block time: 00:00:00Returning block of 192 for bucket 14  bucket 15: 80%  bucket 15: 90%  Sorting block time: 00:00:00Returning block of 198 for bucket 13  bucket 15: 100%  Sorting block of length 177 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 178 for bucket 15Getting block 16 of 29  Reserving size (252) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 102 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 103 for bucket 16Getting block 17 of 29  Reserving size (252) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%Getting block 18 of 29  Reserving size (252) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 50%  bucket 17: 60%  Entering block accumulator loop for bucket 18:  bucket 17: 70%  bucket 17: 80%  bucket 18: 10%  bucket 17: 90%  bucket 18: 20%  bucket 17: 100%  Sorting block of length 162 for bucket 17  (Using difference cover)  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  Sorting block time: 00:00:00Returning block of 163 for bucket 17  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 117 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 18Getting block 19 of 29Getting block 20 of 29  Reserving size (252) for bucket 19  Calculating Z arrays for bucket 19  Reserving size (252) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 19:  Entering block accumulator loop for bucket 20:  bucket 19: 10%  bucket 20: 10%  bucket 19: 20%  bucket 20: 20%  bucket 19: 30%  bucket 20: 30%  bucket 19: 40%  bucket 20: 40%  bucket 19: 50%  bucket 20: 50%  bucket 19: 60%  bucket 20: 60%  bucket 19: 70%  bucket 20: 70%  bucket 19: 80%  bucket 20: 80%  bucket 19: 90%  bucket 20: 90%  bucket 19: 100%  Sorting block of length 161 for bucket 19  (Using difference cover)  bucket 20: 100%  Sorting block of length 232 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 162 for bucket 19  Sorting block time: 00:00:00Returning block of 233 for bucket 20Getting block 21 of 29  Reserving size (252) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 131 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 132 for bucket 21Getting block 22 of 29  Reserving size (252) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 220 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 221 for bucket 22Getting block 23 of 29  Reserving size (252) for bucket 23  Calculating Z arrays for bucket 23Getting block 24 of 29  Reserving size (252) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 23:  Entering block accumulator loop for bucket 24:  bucket 23: 10%  bucket 24: 10%  bucket 23: 20%  bucket 24: 20%  bucket 23: 30%  bucket 24: 30%  bucket 23: 40%  bucket 24: 40%  bucket 23: 50%  bucket 24: 50%  bucket 23: 60%  bucket 24: 60%  bucket 23: 70%  bucket 24: 70%  bucket 23: 80%  bucket 24: 80%  bucket 23: 90%  bucket 24: 90%  bucket 23: 100%  Sorting block of length 141 for bucket 23  (Using difference cover)  bucket 24: 100%  Sorting block of length 196 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 197 for bucket 24  Sorting block time: 00:00:00Returning block of 142 for bucket 23Getting block 25 of 29  Reserving size (252) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 227 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 228 for bucket 25Getting block 26 of 29  Reserving size (252) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 195 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 196 for bucket 26Getting block 27 of 29  Reserving size (252) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%Getting block 28 of 29  Reserving size (252) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 50%  bucket 27: 60%  Entering block accumulator loop for bucket 28:  bucket 27: 70%  bucket 28: 10%  bucket 27: 80%  bucket 28: 20%  bucket 27: 90%  bucket 28: 30%  bucket 27: 100%  Sorting block of length 233 for bucket 27  (Using difference cover)  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 80 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 234 for bucket 27  Sorting block time: 00:00:00Returning block of 81 for bucket 28Getting block 29 of 29  Reserving size (252) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 180 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 181 for bucket 29
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 252 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #3)" name="2" time="83.48910188674927">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "8f1001d4b12e6690",   "src": "hda"  },  "library|input_2": {   "id": "329aaca978756492",   "src": "hda"  },  "library|type": "paired",  "reference_genome|source": "indexed" }, "job": {  "command_line": "set -o pipefail;         ln -f -s \u0027/galaxy/server/database/objects/4/2/4/dataset_4242280f-48eb-4fbe-8cfd-1e3d3320591f.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/6/8/a/dataset_68a0663d-7041-4275-8eaa-adad9753445c.dat\u0027 input_r.fastq \u0026\u0026     hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027/cvmfs/data.galaxyproject.org/managed/hisat2_index/apiMel4/apiMel4\u0027    -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/c/2/9/dataset_c297f6b0-7994-4c00-bae3-ab0cbefed800.dat\u0027",  "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2024-01-16T13:54:08.718616",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-jznb9",  "galaxy_version": "21.09",  "history_id": "db0eb37310986d10",  "id": "f5850c2bf29ced82",  "inputs": {   "input_1": {    "id": "8f1001d4b12e6690",    "src": "hda",    "uuid": "4242280f-48eb-4fbe-8cfd-1e3d3320591f"   },   "input_2": {    "id": "329aaca978756492",    "src": "hda",    "uuid": "68a0663d-7041-4275-8eaa-adad9753445c"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "20.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "20 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1705413306.0000000",    "title": "Job End Time",    "value": "2024-01-16 13:55:06"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1705413286.0000000",    "title": "Job Start Time",    "value": "2024-01-16 13:54:46"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "12000.0000000",    "title": "Memory Allocated (MB)",    "value": "12000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n0.00% overall alignment rate\n",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "b755b11326d2a3f8",    "src": "hda",    "uuid": "c297f6b0-7994-4c00-bae3-ab0cbefed800"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/phiX.len\"",   "dbkey": "\"phiX\"",   "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 185, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 186, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}",   "reference_genome": "{\"__current_case__\": 0, \"index\": \"apiMel4\", \"source\": \"indexed\"}",   "sum": "{\"new_summary\": \"false\", \"summary_file\": \"false\"}"  },  "state": "ok",  "stderr": "\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n0.00% overall alignment rate\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2024-01-16T13:55:18.724831",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_h6ex1984.sam v. /tmp/history_bam_converted_to_sam_809i79jm.sam )\n--- local_file\n+++ history_data\n@@ -1,23 +1,5343 @@\n @HD\tVN:1.0\tSO:coordinate\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n-@SQ\tSN:phiX174\tLN:5386\n-phiX174_1141_1609_1:0:0_1:0:0_4\t147\tphiX174\t1540\t60\t70M\t=\t1141\t-469\tTTCTAGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tZS:i:-5\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:4C65\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1141_1609_1:0:0_1:0:0_4\t99\tphiX174\t1141\t60\t70M\t=\t1540\t469\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:24G45\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1363_1914_3:0:0_0:0:0_6\t133\tphiX174\t1845\t0\t*\t=\t1845\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_1363_1914_3:0:0_0:0:0_6\t89\tphiX174\t1845\t60\t70M\t=\t1845\t0\tGCACTATGTTTACTCTTGCGCTTGTTCGTTTTCCGCCTACTGCGACTAAAGAGATTCAGTACCTTAACGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYT:Z:UP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t147\tphiX174\t1896\t60\t70M\t=\t1542\t-424\tAGATTCAGTACCTTAACGCTAAAGGTGCTTTGACTTATACCGATATTGCTGGCGACCCTGTTTTGTATGG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t99\tphiX174\t1542\t60\t70M\t=\t1896\t424\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t147\tphiX174\t639\t60\t70M\t=\t185\t-524\tTATTATGTTCATCCCGTCAACATTCAAACGGCCTGTCGCATCATGGAAGGCGCTGAATTTACGGAAAACA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:37T32\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t163\tphiX174\t1980\t60\t70M\t=\t2432\t522\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:12T57\tYS:i:-9\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t83\tphiX174\t2432\t60\t70M\t=\t1980\t-522\tTTTTTTCTGATAAGCTGGTTCTCAATTCTGTTAATCCAGCTTCTTCGGCACCTGTTTTACACACACCTAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-9\tXN:i:0\tXM:i:3\tXO:i:0\tXG:i:0\tNM:i:3\tMD:Z:24C8C27G8\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t147\tphiX174\t2508\t60\t70M\t=\t2128\t-450\tATCGTCAACGTTATATTTTGATAGTTTGAAGGTTAATGCTGGTATTGGTGGTTTTCTTAATTCCATTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-12\tXN:i:0\tXM:i:4\tXO:i:0\tXG:i:0\tNM:i:4\tMD:Z:29C14A13C3G7\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t99\tphiX174\t2128\t60\t70M\t=\t2508\t450\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-12\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t147\tphiX174\t2670\t60\t70M\t=\t2259\t-481\tTCGCTTTGAGTCTTCGTCGGTTCCGACTACCCTCCCGACTGCCTATGATGTTTATCCTTTGAATGGTCGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:15T54\tYS:i:-2\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t99\tphiX174\t2259\t60\t68M2S\t=\t2670\t481\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-2\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:68\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t163\tphiX174\t2950\t60\t70M\t=\t3308\t428\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-6\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t83\tphiX174\t3308\t60\t70M\t=\t2950\t-428\tTGAGATTAATGCTTGGGAGCGTGCTGGTGCTGATGCTTCCTATGCTGGTATGGTTGACGCCGGATTTGAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-6\tZS:i:-8\tXN:i:0\tXM:i:2\tXO:i:0\tXG:i:0\tNM:i:2\tMD:Z:4C36C28\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t147\tphiX174\t3663\t60\t70M\t=\t3199\t-534\tAATGACCAAATCAATGAAATGACTCGCAAGGTTAGTGCTGAGGTTGACTTAGTTCATCAGCAAACGCAGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:14A55\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t99\tphiX174\t3199\t60\t70M\t=\t3663\t534\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n********\n*SNIP *\n********\n+@SQ\tSN:Group6\tLN:18472937\n+@SQ\tSN:Group7\tLN:13219345\n+@SQ\tSN:Group8\tLN:13546544\n+@SQ\tSN:Group9\tLN:11120453\n+@SQ\tSN:chrM\tLN:16343\n+phiX174_1141_1609_1:0:0_1:0:0_4\t141\t*\t0\t0\t*\t*\t0\t0\tCAAATTAGCATAAGCAGCTTGCAGACCCATAATGTCAATAGATGTGGTAGAAGTCGTCATTTGGCTAGAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1141_1609_1:0:0_1:0:0_4\t77\t*\t0\t0\t*\t*\t0\t0\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t141\t*\t0\t0\t*\t*\t0\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t77\t*\t0\t0\t*\t*\t0\t0\tGCGTTAAGGTACTGAATCTCTTTAGTCGCAGTAGGCGGAAAACGAACAAGCGCAAGAGTAAACATAGTGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t141\t*\t0\t0\t*\t*\t0\t0\tCCATACAAAACAGGGTCGCCAGCAATATCGGTATAAGTCAAAGCACCTTTAGCGTTAAGGTACTGAATCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t141\t*\t0\t0\t*\t*\t0\t0\tTGTTTTCCGTAAATTCAGCGCCTTCCATGATGCGACAGGCCGTTTGAATGTTGACGGGATGAACATAATA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t77\t*\t0\t0\t*\t*\t0\t0\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t141\t*\t0\t0\t*\t*\t0\t0\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGGTGTGTGTAAAACAGGTGCCGAAGAAGCTGGATTAACAGAATTGAGAACCAGCTTATCAGAAAAAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t141\t*\t0\t0\t*\t*\t0\t0\tCTGAATGGAATTAAGAAAACCACCAATACCAGCATTAACCTTCAAACTATCAAAATATAACGTTGACGAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t77\t*\t0\t0\t*\t*\t0\t0\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t141\t*\t0\t0\t*\t*\t0\t0\tGCGACCATTCAAAGGATAAACATCATAGGCAGTCGGGAGGGTAGTCGGAACCGACGAAGACTCAAAGCGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t141\t*\t0\t0\t*\t*\t0\t0\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t77\t*\t0\t0\t*\t*\t0\t0\tCTCAAATCCGGCGTCAACCATACCAGCATAGGAAGCATCAGCACCAGCACGCTCCCAAGCATTAATCTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t141\t*\t0\t0\t*\t*\t0\t0\tTCTGCGTTTGCTGATGAACTAAGTCAACCTCAGCACTAACCTTGCGAGTCATTTCATTGATTTGGTCATT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t77\t*\t0\t0\t*\t*\t0\t0\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t141\t*\t0\t0\t*\t*\t0\t0\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t77\t*\t0\t0\t*\t*\t0\t0\tACCATAAACGCAAGCCTCAACGCAGCGACGAGCACGAGAGCGGTCAGTAGCAATCCAAACTTTGTTACTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n" ], "status": "failure", "test_index": 2, "time_seconds": 83.48910188674927, "tool_id": "hisat2", "tool_version": "2.2.1+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            10 reads; of these:  10 (100.00%) were paired; of these:    10 (100.00%) aligned concordantly 0 times    0 (0.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    10 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    10 pairs aligned 0 times concordantly or discordantly; of these:      20 mates make up the pairs; of these:        20 (100.00%) aligned 0 times        0 (0.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times0.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #4)" name="3" time="68.29383850097656">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 5, merged 20; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 184.759 (target: 251)Getting block 1 of 29  Reserving size (252) for bucket 1  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 1:Getting block 2 of 29  bucket 1: 10%  Reserving size (252) for bucket 2Getting block 3 of 29  Reserving size (252) for bucket 3Getting block 4 of 29  bucket 1: 20%  Reserving size (252) for bucket 4  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 3  bucket 1: 30%  Calculating Z arrays for bucket 4  bucket 1: 40%  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 3:  bucket 1: 50%  Entering block accumulator loop for bucket 4:  bucket 2: 10%  bucket 3: 10%  bucket 1: 60%  bucket 2: 20%  bucket 4: 10%  bucket 1: 70%  bucket 2: 30%  bucket 3: 20%  bucket 4: 20%  bucket 2: 40%  bucket 1: 80%  bucket 3: 30%  bucket 2: 50%  bucket 1: 90%  bucket 4: 30%  bucket 3: 40%  bucket 1: 100%  bucket 2: 60%  Sorting block of length 127 for bucket 1  (Using difference cover)  bucket 4: 40%  bucket 3: 50%  bucket 2: 70%  bucket 4: 50%  bucket 3: 60%  bucket 2: 80%  bucket 4: 60%  bucket 3: 70%  bucket 2: 90%  bucket 4: 70%  bucket 3: 80%  bucket 2: 100%  bucket 4: 80%  bucket 3: 90%  Sorting block of length 239 for bucket 2  (Using difference cover)  bucket 4: 90%  bucket 3: 100%  Sorting block of length 166 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 242 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 128 for bucket 1  Sorting block time: 00:00:00Returning block of 240 for bucket 2  Sorting block time: 00:00:00Returning block of 243 for bucket 4  Sorting block time: 00:00:00Returning block of 167 for bucket 3Getting block 5 of 29  Reserving size (252) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 29  Reserving size (252) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 6: 50%  bucket 5: 70%  bucket 6: 60%  bucket 5: 80%  bucket 6: 70%  bucket 5: 90%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 162 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 164 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 5  Sorting block time: 00:00:00Returning block of 165 for bucket 6Getting block 7 of 29  Reserving size (252) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%Getting block 8 of 29  Reserving size (252) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 242 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 243 for bucket 8  bucket 7: 100%  Sorting block of length 220 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 221 for bucket 7Getting block 9 of 29  Reserving size (252) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 216 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 217 for bucket 9Getting block 10 of 29  Reserving size (252) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 214 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 215 for bucket 10Getting block 11 of 29  Reserving size (252) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%Getting block 12 of 29  Reserving size (252) for bucket 12  bucket 11: 40%  Calculating Z arrays for bucket 12  bucket 11: 50%  Entering block accumulator loop for bucket 12:  bucket 11: 60%  bucket 12: 10%  bucket 11: 70%  bucket 12: 20%  bucket 11: 80%  bucket 12: 30%  bucket 11: 90%  bucket 12: 40%  bucket 11: 100%  Sorting block of length 229 for bucket 11  (Using difference cover)  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 195 for bucket 12  Sorting block time: 00:00:00  (Using difference cover)Returning block of 230 for bucket 11  Sorting block time: 00:00:00Returning block of 196 for bucket 12Getting block 13 of 29  Reserving size (252) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%Getting block 14 of 29  Reserving size (252) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  Entering block accumulator loop for bucket 14:  bucket 13: 90%  bucket 13: 100%  Sorting block of length 197 for bucket 13  (Using difference cover)  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  Sorting block time: 00:00:00Returning block of 198 for bucket 13  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 191 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 192 for bucket 14Getting block 15 of 29  Reserving size (252) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 29  Reserving size (252) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 15:  bucket 15: 10%  Entering block accumulator loop for bucket 16:  bucket 15: 20%  bucket 16: 10%  bucket 15: 30%  bucket 16: 20%  bucket 15: 40%  bucket 16: 30%  bucket 15: 50%  bucket 16: 40%  bucket 15: 60%  bucket 16: 50%  bucket 15: 70%  bucket 16: 60%  bucket 15: 80%  bucket 16: 70%  bucket 15: 90%  bucket 16: 80%  bucket 15: 100%  Sorting block of length 177 for bucket 15  (Using difference cover)  bucket 16: 90%  bucket 16: 100%  Sorting block of length 102 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 178 for bucket 15  Sorting block time: 00:00:00Returning block of 103 for bucket 16Getting block 17 of 29  Reserving size (252) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 29  Reserving size (252) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 18:  bucket 17: 10%  bucket 18: 10%  bucket 17: 20%  bucket 18: 20%  bucket 17: 30%  bucket 18: 30%  bucket 17: 40%  bucket 18: 40%  bucket 17: 50%  bucket 18: 50%  bucket 17: 60%  bucket 18: 60%  bucket 17: 70%  bucket 18: 70%  bucket 17: 80%  bucket 18: 80%  bucket 17: 90%  bucket 18: 90%  bucket 17: 100%  Sorting block of length 162 for bucket 17  (Using difference cover)  bucket 18: 100%  Sorting block of length 117 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 17  Sorting block time: 00:00:00Returning block of 118 for bucket 18Getting block 19 of 29  Reserving size (252) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 161 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 162 for bucket 19Getting block 20 of 29  Reserving size (252) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 232 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 233 for bucket 20Getting block 21 of 29  Reserving size (252) for bucket 21  Calculating Z arrays for bucket 21Getting block 22 of 29  Reserving size (252) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  bucket 21: 10%  Entering block accumulator loop for bucket 22:  bucket 21: 20%  bucket 22: 10%  bucket 21: 30%  bucket 22: 20%  bucket 21: 40%  bucket 22: 30%  bucket 21: 50%  bucket 22: 40%  bucket 21: 60%  bucket 22: 50%  bucket 21: 70%  bucket 22: 60%  bucket 21: 80%  bucket 22: 70%  bucket 21: 90%  bucket 22: 80%  bucket 21: 100%  Sorting block of length 131 for bucket 21  (Using difference cover)  bucket 22: 90%  bucket 22: 100%  Sorting block of length 220 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 132 for bucket 21  Sorting block time: 00:00:00Returning block of 221 for bucket 22Getting block 23 of 29  Reserving size (252) for bucket 23  Calculating Z arrays for bucket 23Getting block 24 of 29  Reserving size (252) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  Entering block accumulator loop for bucket 24:  bucket 23: 40%  bucket 23: 50%  bucket 24: 10%  bucket 23: 60%  bucket 24: 20%  bucket 23: 70%  bucket 24: 30%  bucket 23: 80%  bucket 23: 90%  bucket 24: 40%  bucket 23: 100%  Sorting block of length 141 for bucket 23  (Using difference cover)  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  Sorting block time: 00:00:00  bucket 24: 100%Returning block of 142 for bucket 23  Sorting block of length 196 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 197 for bucket 24Getting block 25 of 29  Reserving size (252) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:Getting block 26 of 29  Reserving size (252) for bucket 26  Calculating Z arrays for bucket 26  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  Entering block accumulator loop for bucket 26:  bucket 25: 40%  bucket 26: 10%  bucket 25: 50%  bucket 25: 60%  bucket 26: 20%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 26: 30%  bucket 25: 100%  Sorting block of length 227 for bucket 25  (Using difference cover)  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 195 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 228 for bucket 25  Sorting block time: 00:00:00Returning block of 196 for bucket 26Getting block 27 of 29  Reserving size (252) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 233 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 234 for bucket 27Getting block 28 of 29  Reserving size (252) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:Getting block 29 of 29  Reserving size (252) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 10%  Entering block accumulator loop for bucket 29:  bucket 28: 20%  bucket 29: 10%  bucket 28: 30%  bucket 29: 20%  bucket 28: 40%  bucket 29: 30%  bucket 28: 50%  bucket 29: 40%  bucket 28: 60%  bucket 29: 50%  bucket 28: 70%  bucket 29: 60%  bucket 29: 70%  bucket 28: 80%  bucket 29: 80%  bucket 28: 90%  bucket 29: 90%  bucket 28: 100%  Sorting block of length 80 for bucket 28  (Using difference cover)  bucket 29: 100%  Sorting block of length 180 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 28  Sorting block time: 00:00:00Returning block of 181 for bucket 29
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 252 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    71 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    71 pairs aligned 0 times concordantly or discordantly; of these:      142 mates make up the pairs; of these:        74 (52.11%) aligned 0 times        68 (47.89%) aligned exactly 1 time        0 (0.00%) aligned >1 times92.60% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #5)" name="4" time="69.42838621139526">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 5, merged 20; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 184.759 (target: 251)Getting block 1 of 29Getting block 2 of 29Getting block 3 of 29  Reserving size (252) for bucket 3  Reserving size (252) for bucket 2  Calculating Z arrays for bucket 3  Reserving size (252) for bucket 1  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 1Getting block 4 of 29  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 1:  Reserving size (252) for bucket 4  bucket 3: 10%  bucket 2: 10%  Calculating Z arrays for bucket 4  bucket 1: 10%  bucket 3: 20%  bucket 2: 20%  bucket 1: 20%  bucket 3: 30%  bucket 1: 30%  Entering block accumulator loop for bucket 4:  bucket 3: 40%  bucket 2: 30%  bucket 1: 40%  bucket 3: 50%  bucket 2: 40%  bucket 4: 10%  bucket 3: 60%  bucket 1: 50%  bucket 2: 50%  bucket 3: 70%  bucket 4: 20%  bucket 2: 60%  bucket 3: 80%  bucket 1: 60%  bucket 4: 30%  bucket 2: 70%  bucket 3: 90%  bucket 1: 70%  bucket 4: 40%  bucket 2: 80%  bucket 1: 80%  bucket 3: 100%  bucket 4: 50%  Sorting block of length 166 for bucket 3  (Using difference cover)  bucket 1: 90%  bucket 4: 60%  bucket 2: 90%  bucket 1: 100%  Sorting block of length 127 for bucket 1  (Using difference cover)  bucket 2: 100%  Sorting block of length 239 for bucket 2  (Using difference cover)  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 242 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 243 for bucket 4  Sorting block time: 00:00:00Returning block of 167 for bucket 3  Sorting block time: 00:00:00Returning block of 128 for bucket 1  Sorting block time: 00:00:00Returning block of 240 for bucket 2Getting block 5 of 29  Reserving size (252) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 29  Reserving size (252) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  Entering block accumulator loop for bucket 6:  bucket 5: 50%  bucket 5: 60%  bucket 6: 10%  bucket 5: 70%  bucket 6: 20%  bucket 5: 80%  bucket 6: 30%  bucket 5: 90%  bucket 6: 40%  bucket 5: 100%  Sorting block of length 162 for bucket 5  (Using difference cover)  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 164 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 5  Sorting block time: 00:00:00Returning block of 165 for bucket 6Getting block 7 of 29  Reserving size (252) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 29  Reserving size (252) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 8: 40%  bucket 7: 40%  bucket 8: 50%  bucket 7: 50%  bucket 8: 60%  bucket 7: 60%  bucket 8: 70%  bucket 7: 70%  bucket 8: 80%  bucket 7: 80%  bucket 8: 90%  bucket 7: 90%  bucket 8: 100%  Sorting block of length 242 for bucket 8  (Using difference cover)  bucket 7: 100%  Sorting block of length 220 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 221 for bucket 7  Sorting block time: 00:00:00Returning block of 243 for bucket 8Getting block 9 of 29  Reserving size (252) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 29  Reserving size (252) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 10: 40%  bucket 9: 60%  bucket 10: 50%  bucket 9: 70%  bucket 10: 60%  bucket 9: 80%  bucket 10: 70%  bucket 9: 90%  bucket 10: 80%  bucket 9: 100%  Sorting block of length 216 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 214 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 217 for bucket 9  Sorting block time: 00:00:00Returning block of 215 for bucket 10Getting block 11 of 29  Reserving size (252) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%Getting block 12 of 29  bucket 11: 30%  Reserving size (252) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 40%  Entering block accumulator loop for bucket 12:  bucket 11: 50%  bucket 11: 60%  bucket 12: 10%  bucket 11: 70%  bucket 12: 20%  bucket 11: 80%  bucket 12: 30%  bucket 11: 90%  bucket 12: 40%  bucket 11: 100%  Sorting block of length 229 for bucket 11  (Using difference cover)  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 195 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 230 for bucket 11  Sorting block time: 00:00:00Returning block of 196 for bucket 12Getting block 13 of 29  Reserving size (252) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 197 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 198 for bucket 13Getting block 14 of 29  Reserving size (252) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 191 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 192 for bucket 14Getting block 15 of 29  Reserving size (252) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 29  Reserving size (252) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 15:  bucket 15: 10%  Entering block accumulator loop for bucket 16:  bucket 15: 20%  bucket 16: 10%  bucket 15: 30%  bucket 16: 20%  bucket 15: 40%  bucket 16: 30%  bucket 15: 50%  bucket 16: 40%  bucket 15: 60%  bucket 16: 50%  bucket 15: 70%  bucket 16: 60%  bucket 15: 80%  bucket 16: 70%  bucket 15: 90%  bucket 16: 80%  bucket 15: 100%  Sorting block of length 177 for bucket 15  (Using difference cover)  bucket 16: 90%  bucket 16: 100%  Sorting block of length 102 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 178 for bucket 15  Sorting block time: 00:00:00Returning block of 103 for bucket 16Getting block 17 of 29  Reserving size (252) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 162 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 17Getting block 18 of 29  Reserving size (252) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 117 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 18Getting block 19 of 29  Reserving size (252) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%Getting block 20 of 29  Reserving size (252) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 20%  bucket 19: 30%  Entering block accumulator loop for bucket 20:  bucket 19: 40%  bucket 20: 10%  bucket 19: 50%  bucket 20: 20%  bucket 19: 60%  bucket 20: 30%  bucket 19: 70%  bucket 20: 40%  bucket 19: 80%  bucket 20: 50%  bucket 19: 90%  bucket 20: 60%  bucket 19: 100%  Sorting block of length 161 for bucket 19  (Using difference cover)  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 232 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 162 for bucket 19  Sorting block time: 00:00:00Returning block of 233 for bucket 20Getting block 21 of 29  Reserving size (252) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 131 for bucket 21  (Using difference cover)Getting block 22 of 29  Reserving size (252) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  Sorting block time: 00:00:00Returning block of 132 for bucket 21  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 220 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 221 for bucket 22Getting block 23 of 29  Reserving size (252) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 141 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 142 for bucket 23Getting block 24 of 29  Reserving size (252) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 196 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 197 for bucket 24Getting block 25 of 29  Reserving size (252) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 227 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 228 for bucket 25Getting block 26 of 29  Reserving size (252) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 195 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 196 for bucket 26Getting block 27 of 29  Reserving size (252) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 233 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 234 for bucket 27Getting block 28 of 29  Reserving size (252) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 80 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 28Getting block 29 of 29  Reserving size (252) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 180 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 181 for bucket 29
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 252 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times85.80% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #6)" name="5" time="66.76978778839111">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 5, merged 20; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 184.759 (target: 251)Getting block 1 of 29  Reserving size (252) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 29Getting block 3 of 29  Reserving size (252) for bucket 3  Reserving size (252) for bucket 2Getting block 4 of 29  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  Reserving size (252) for bucket 4  Calculating Z arrays for bucket 4  bucket 1: 10%  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 2:  bucket 1: 20%  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 2: 10%  bucket 1: 30%  bucket 3: 20%  bucket 1: 40%  bucket 2: 20%  bucket 4: 10%  bucket 1: 50%  bucket 3: 30%  bucket 1: 60%  bucket 4: 20%  bucket 2: 30%  bucket 1: 70%  bucket 3: 40%  bucket 2: 40%  bucket 4: 30%  bucket 1: 80%  bucket 2: 50%  bucket 3: 50%  bucket 4: 40%  bucket 2: 60%  bucket 1: 90%  bucket 3: 60%  bucket 4: 50%  bucket 2: 70%  bucket 1: 100%  bucket 4: 60%  bucket 3: 70%  Sorting block of length 127 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 3: 80%  bucket 4: 70%  bucket 2: 90%  bucket 3: 90%  bucket 4: 80%  bucket 2: 100%  Sorting block of length 239 for bucket 2  (Using difference cover)  bucket 4: 90%  bucket 3: 100%  Sorting block of length 166 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 242 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 128 for bucket 1  Sorting block time: 00:00:00Returning block of 167 for bucket 3  Sorting block time: 00:00:00Returning block of 240 for bucket 2  Sorting block time: 00:00:00Returning block of 243 for bucket 4Getting block 5 of 29  Reserving size (252) for bucket 5Getting block 6 of 29  Reserving size (252) for bucket 6  Calculating Z arrays for bucket 6  Calculating Z arrays for bucket 5Getting block 7 of 29  Reserving size (252) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 5:  bucket 6: 10%  bucket 6: 20%  Entering block accumulator loop for bucket 7:  bucket 6: 30%  bucket 5: 10%  bucket 6: 40%  bucket 7: 10%  bucket 6: 50%  bucket 5: 20%  bucket 6: 60%  bucket 7: 20%  bucket 6: 70%  bucket 5: 30%  bucket 7: 30%  bucket 6: 80%  bucket 5: 40%  bucket 6: 90%  bucket 7: 40%  bucket 6: 100%  Sorting block of length 164 for bucket 6  (Using difference cover)  bucket 5: 50%  bucket 5: 60%  bucket 7: 50%  bucket 5: 70%  bucket 7: 60%  bucket 5: 80%  bucket 7: 70%  bucket 5: 90%  bucket 7: 80%  bucket 5: 100%  Sorting block of length 162 for bucket 5  (Using difference cover)  bucket 7: 90%  Sorting block time: 00:00:00Returning block of 165 for bucket 6  bucket 7: 100%  Sorting block of length 220 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 5  Sorting block time: 00:00:00Returning block of 221 for bucket 7Getting block 8 of 29  Reserving size (252) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 242 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 243 for bucket 8Getting block 9 of 29  Reserving size (252) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%Getting block 10 of 29  bucket 9: 40%  Reserving size (252) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 50%  bucket 9: 60%  Entering block accumulator loop for bucket 10:  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 10: 10%  bucket 9: 100%  Sorting block of length 216 for bucket 9  (Using difference cover)  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  Sorting block time: 00:00:00Returning block of 217 for bucket 9  bucket 10: 100%  Sorting block of length 214 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 215 for bucket 10Getting block 11 of 29  Reserving size (252) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%Getting block 12 of 29  bucket 11: 50%  Reserving size (252) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 60%  Entering block accumulator loop for bucket 12:  bucket 11: 70%  bucket 11: 80%  bucket 12: 10%  bucket 11: 90%  bucket 12: 20%  bucket 12: 30%  bucket 11: 100%  Sorting block of length 229 for bucket 11  (Using difference cover)  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 195 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 230 for bucket 11  Sorting block time: 00:00:00Returning block of 196 for bucket 12Getting block 13 of 29  Reserving size (252) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 29  Reserving size (252) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 10%  bucket 13: 20%  Entering block accumulator loop for bucket 14:  bucket 13: 30%  bucket 14: 10%  bucket 13: 40%  bucket 14: 20%  bucket 13: 50%  bucket 14: 30%  bucket 13: 60%  bucket 14: 40%  bucket 13: 70%  bucket 14: 50%  bucket 13: 80%  bucket 14: 60%  bucket 13: 90%  bucket 14: 70%  bucket 13: 100%  Sorting block of length 197 for bucket 13  (Using difference cover)  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 191 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 198 for bucket 13  Sorting block time: 00:00:00Returning block of 192 for bucket 14Getting block 15 of 29  Reserving size (252) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 177 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 178 for bucket 15Getting block 16 of 29  Reserving size (252) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 29  Reserving size (252) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  bucket 16: 10%  Entering block accumulator loop for bucket 17:  bucket 16: 20%  bucket 17: 10%  bucket 16: 30%  bucket 17: 20%  bucket 16: 40%  bucket 17: 30%  bucket 16: 50%  bucket 17: 40%  bucket 16: 60%  bucket 17: 50%  bucket 16: 70%  bucket 17: 60%  bucket 16: 80%  bucket 17: 70%  bucket 16: 90%  bucket 17: 80%  bucket 16: 100%  Sorting block of length 102 for bucket 16  (Using difference cover)  bucket 17: 90%  bucket 17: 100%  Sorting block of length 162 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 103 for bucket 16  Sorting block time: 00:00:00Returning block of 163 for bucket 17Getting block 18 of 29  Reserving size (252) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 117 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 18Getting block 19 of 29  Reserving size (252) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%Getting block 20 of 29  Reserving size (252) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 50%  bucket 19: 60%  Entering block accumulator loop for bucket 20:  bucket 19: 70%  bucket 19: 80%  bucket 20: 10%  bucket 19: 90%  bucket 20: 20%  bucket 19: 100%  Sorting block of length 161 for bucket 19  (Using difference cover)  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  Sorting block time: 00:00:00Returning block of 162 for bucket 19  bucket 20: 90%  bucket 20: 100%  Sorting block of length 232 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 233 for bucket 20Getting block 21 of 29  Reserving size (252) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 131 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 132 for bucket 21Getting block 22 of 29  Reserving size (252) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 29  Reserving size (252) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 22:  bucket 22: 10%  Entering block accumulator loop for bucket 23:  bucket 22: 20%  bucket 23: 10%  bucket 22: 30%  bucket 23: 20%  bucket 22: 40%  bucket 23: 30%  bucket 22: 50%  bucket 23: 40%  bucket 22: 60%  bucket 23: 50%  bucket 22: 70%  bucket 22: 80%  bucket 23: 60%  bucket 22: 90%  bucket 23: 70%  bucket 22: 100%  Sorting block of length 220 for bucket 22  (Using difference cover)  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 141 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 221 for bucket 22  Sorting block time: 00:00:00Returning block of 142 for bucket 23Getting block 24 of 29  Reserving size (252) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 29  Reserving size (252) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 24:  Entering block accumulator loop for bucket 25:  bucket 24: 10%  bucket 25: 10%  bucket 24: 20%  bucket 25: 20%  bucket 24: 30%  bucket 25: 30%  bucket 24: 40%  bucket 25: 40%  bucket 24: 50%  bucket 25: 50%  bucket 24: 60%  bucket 25: 60%  bucket 24: 70%  bucket 25: 70%  bucket 24: 80%  bucket 25: 80%  bucket 24: 90%  bucket 25: 90%  bucket 24: 100%  Sorting block of length 196 for bucket 24  (Using difference cover)  bucket 25: 100%  Sorting block of length 227 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 197 for bucket 24  Sorting block time: 00:00:00Returning block of 228 for bucket 25Getting block 26 of 29  Reserving size (252) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 195 for bucket 26  (Using difference cover)Getting block 27 of 29  Sorting block time: 00:00:00  Reserving size (252) for bucket 27  Calculating Z arrays for bucket 27Returning block of 196 for bucket 26  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 233 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 234 for bucket 27Getting block 28 of 29  Reserving size (252) for bucket 28  Calculating Z arrays for bucket 28Getting block 29 of 29  Reserving size (252) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  Entering block accumulator loop for bucket 28:  bucket 29: 20%  bucket 29: 30%  bucket 28: 10%  bucket 29: 40%  bucket 28: 20%  bucket 29: 50%  bucket 28: 30%  bucket 29: 60%  bucket 29: 70%  bucket 28: 40%  bucket 29: 80%  bucket 28: 50%  bucket 29: 90%  bucket 29: 100%  bucket 28: 60%  Sorting block of length 180 for bucket 29  (Using difference cover)  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 80 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 181 for bucket 29  Sorting block time: 00:00:00Returning block of 81 for bucket 28
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 252 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:003 reads; of these:  3 (100.00%) were unpaired; of these:    3 (100.00%) aligned 0 times    0 (0.00%) aligned exactly 1 time    0 (0.00%) aligned >1 times0.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #7)" name="6" time="64.24893045425415">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 5, merged 20; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 184.759 (target: 251)Getting block 1 of 29  Reserving size (252) for bucket 1Getting block 2 of 29  Reserving size (252) for bucket 2  Calculating Z arrays for bucket 1Getting block 3 of 29  Entering block accumulator loop for bucket 1:  Reserving size (252) for bucket 3  Calculating Z arrays for bucket 2Getting block 4 of 29  Reserving size (252) for bucket 4  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 2: 20%  Entering block accumulator loop for bucket 4:  Entering block accumulator loop for bucket 3:  bucket 1: 30%  bucket 2: 30%  bucket 4: 10%  bucket 1: 40%  bucket 3: 10%  bucket 2: 40%  bucket 1: 50%  bucket 3: 20%  bucket 2: 50%  bucket 4: 20%  bucket 1: 60%  bucket 3: 30%  bucket 2: 60%  bucket 4: 30%  bucket 3: 40%  bucket 1: 70%  bucket 2: 70%  bucket 3: 50%  bucket 1: 80%  bucket 4: 40%  bucket 2: 80%  bucket 1: 90%  bucket 4: 50%  bucket 2: 90%  bucket 1: 100%  bucket 4: 60%  Sorting block of length 127 for bucket 1  (Using difference cover)  bucket 2: 100%  bucket 4: 70%  bucket 3: 60%  Sorting block of length 239 for bucket 2  (Using difference cover)  bucket 4: 80%  bucket 3: 70%  bucket 4: 90%  bucket 3: 80%  bucket 4: 100%  Sorting block of length 242 for bucket 4  (Using difference cover)  bucket 3: 90%  bucket 3: 100%  Sorting block of length 166 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 128 for bucket 1  Sorting block time: 00:00:00Returning block of 243 for bucket 4  Sorting block time: 00:00:00Returning block of 240 for bucket 2  Sorting block time: 00:00:00Returning block of 167 for bucket 3Getting block 5 of 29  Reserving size (252) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 29  Reserving size (252) for bucket 6  Entering block accumulator loop for bucket 5:  Calculating Z arrays for bucket 6  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 6: 50%  bucket 5: 70%  bucket 6: 60%  bucket 5: 80%  bucket 6: 70%  bucket 5: 90%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 162 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 164 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 5  Sorting block time: 00:00:00Returning block of 165 for bucket 6Getting block 7 of 29  Reserving size (252) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%Getting block 8 of 29  Reserving size (252) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 40%  Entering block accumulator loop for bucket 8:  bucket 7: 50%  bucket 8: 10%  bucket 7: 60%  bucket 8: 20%  bucket 7: 70%  bucket 8: 30%  bucket 7: 80%  bucket 8: 40%  bucket 7: 90%  bucket 8: 50%  bucket 7: 100%  Sorting block of length 220 for bucket 7  (Using difference cover)  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 242 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 221 for bucket 7  Sorting block time: 00:00:00Returning block of 243 for bucket 8Getting block 9 of 29  Reserving size (252) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 29  Reserving size (252) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 10: 40%  bucket 9: 60%  bucket 10: 50%  bucket 9: 70%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 9: 80%  bucket 10: 90%  bucket 9: 90%  bucket 10: 100%  Sorting block of length 214 for bucket 10  (Using difference cover)  bucket 9: 100%  Sorting block of length 216 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 215 for bucket 10  Sorting block time: 00:00:00Returning block of 217 for bucket 9Getting block 11 of 29  Reserving size (252) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 229 for bucket 11  (Using difference cover)Getting block 12 of 29  Reserving size (252) for bucket 12  Calculating Z arrays for bucket 12  Sorting block time: 00:00:00Returning block of 230 for bucket 11  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 195 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 196 for bucket 12Getting block 13 of 29  Reserving size (252) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 197 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 198 for bucket 13Getting block 14 of 29  Reserving size (252) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 191 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 192 for bucket 14Getting block 15 of 29  Reserving size (252) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 29  Reserving size (252) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 15:  Entering block accumulator loop for bucket 16:  bucket 15: 10%  bucket 16: 10%  bucket 15: 20%  bucket 16: 20%  bucket 15: 30%  bucket 16: 30%  bucket 15: 40%  bucket 16: 40%  bucket 15: 50%  bucket 16: 50%  bucket 15: 60%  bucket 16: 60%  bucket 15: 70%  bucket 16: 70%  bucket 15: 80%  bucket 16: 80%  bucket 15: 90%  bucket 16: 90%  bucket 15: 100%  Sorting block of length 177 for bucket 15  (Using difference cover)  bucket 16: 100%  Sorting block of length 102 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 103 for bucket 16  Sorting block time: 00:00:00Returning block of 178 for bucket 15Getting block 17 of 29  Reserving size (252) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 29  Reserving size (252) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 18:  bucket 17: 10%  bucket 18: 10%  bucket 17: 20%  bucket 18: 20%  bucket 18: 30%  bucket 17: 30%  bucket 18: 40%  bucket 17: 40%  bucket 18: 50%  bucket 17: 50%  bucket 18: 60%  bucket 17: 60%  bucket 18: 70%  bucket 17: 70%  bucket 18: 80%  bucket 17: 80%  bucket 18: 90%  bucket 17: 90%  bucket 18: 100%  Sorting block of length 117 for bucket 18  (Using difference cover)  bucket 17: 100%  Sorting block of length 162 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 18  Sorting block time: 00:00:00Returning block of 163 for bucket 17Getting block 19 of 29  Reserving size (252) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 29  Reserving size (252) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 19:  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 19: 20%  bucket 20: 10%  bucket 19: 30%  bucket 20: 20%  bucket 19: 40%  bucket 20: 30%  bucket 19: 50%  bucket 20: 40%  bucket 19: 60%  bucket 20: 50%  bucket 19: 70%  bucket 20: 60%  bucket 19: 80%  bucket 20: 70%  bucket 19: 90%  bucket 20: 80%  bucket 19: 100%  Sorting block of length 161 for bucket 19  (Using difference cover)  bucket 20: 90%  bucket 20: 100%  Sorting block of length 232 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 162 for bucket 19  Sorting block time: 00:00:00Returning block of 233 for bucket 20Getting block 21 of 29  Reserving size (252) for bucket 21  Calculating Z arrays for bucket 21Getting block 22 of 29  Reserving size (252) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  bucket 21: 10%  Entering block accumulator loop for bucket 22:  bucket 21: 20%  bucket 21: 30%  bucket 22: 10%  bucket 21: 40%  bucket 22: 20%  bucket 21: 50%  bucket 22: 30%  bucket 21: 60%  bucket 22: 40%  bucket 21: 70%  bucket 22: 50%  bucket 21: 80%  bucket 22: 60%  bucket 21: 90%  bucket 22: 70%  bucket 21: 100%  Sorting block of length 131 for bucket 21  (Using difference cover)  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 220 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 132 for bucket 21  Sorting block time: 00:00:00Returning block of 221 for bucket 22Getting block 23 of 29  Reserving size (252) for bucket 23  Calculating Z arrays for bucket 23Getting block 24 of 29  Reserving size (252) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 23:  Entering block accumulator loop for bucket 24:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 24: 10%  bucket 23: 100%  Sorting block of length 141 for bucket 23  (Using difference cover)  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  Sorting block time: 00:00:00Returning block of 142 for bucket 23  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 196 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 197 for bucket 24Getting block 25 of 29  Reserving size (252) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 227 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 228 for bucket 25Getting block 26 of 29  Reserving size (252) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 195 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 196 for bucket 26Getting block 27 of 29  Reserving size (252) for bucket 27  Calculating Z arrays for bucket 27Getting block 28 of 29  Reserving size (252) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 27:  bucket 27: 10%  Entering block accumulator loop for bucket 28:  bucket 27: 20%  bucket 28: 10%  bucket 27: 30%  bucket 28: 20%  bucket 27: 40%  bucket 28: 30%  bucket 27: 50%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 27: 60%  bucket 28: 70%  bucket 28: 80%  bucket 27: 70%  bucket 28: 90%  bucket 27: 80%  bucket 28: 100%  Sorting block of length 80 for bucket 28  (Using difference cover)  bucket 27: 90%  bucket 27: 100%  Sorting block of length 233 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 28  Sorting block time: 00:00:00Returning block of 234 for bucket 27Getting block 29 of 29  Reserving size (252) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 180 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 181 for bucket 29
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 252 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:013 reads; of these:  3 (100.00%) were paired; of these:    3 (100.00%) aligned concordantly 0 times    0 (0.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    3 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    3 pairs aligned 0 times concordantly or discordantly; of these:      6 mates make up the pairs; of these:        6 (100.00%) aligned 0 times        0 (0.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times0.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #8)" name="7" time="78.97831082344055">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 5, merged 20; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 184.759 (target: 251)Getting block 1 of 29  Reserving size (252) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 29  Reserving size (252) for bucket 2  Entering block accumulator loop for bucket 1:Getting block 3 of 29  Reserving size (252) for bucket 3  bucket 1: 10%  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 3  bucket 1: 20%  bucket 1: 30%  bucket 1: 40%Getting block 4 of 29  Reserving size (252) for bucket 4  Entering block accumulator loop for bucket 3:  bucket 1: 50%  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 2:  bucket 1: 60%  bucket 3: 10%  bucket 1: 70%  bucket 2: 10%  Entering block accumulator loop for bucket 4:  bucket 1: 80%  bucket 3: 20%  bucket 2: 20%  bucket 1: 90%  bucket 4: 10%  bucket 2: 30%  bucket 3: 30%  bucket 1: 100%  bucket 4: 20%  bucket 3: 40%  bucket 2: 40%  Sorting block of length 127 for bucket 1  bucket 3: 50%  bucket 2: 50%  bucket 3: 60%  (Using difference cover)  bucket 4: 30%  bucket 2: 60%  bucket 3: 70%  bucket 4: 40%  bucket 2: 70%  bucket 3: 80%  bucket 4: 50%  bucket 2: 80%  bucket 3: 90%  bucket 4: 60%  bucket 2: 90%  bucket 3: 100%  Sorting block of length 166 for bucket 3  (Using difference cover)  bucket 4: 70%  bucket 2: 100%  Sorting block of length 239 for bucket 2  (Using difference cover)  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 242 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 128 for bucket 1  Sorting block time: 00:00:00Returning block of 243 for bucket 4  Sorting block time: 00:00:00Returning block of 167 for bucket 3  Sorting block time: 00:00:00Returning block of 240 for bucket 2Getting block 5 of 29  Reserving size (252) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%Getting block 6 of 29  Reserving size (252) for bucket 6  bucket 5: 70%  Calculating Z arrays for bucket 6  bucket 5: 80%  bucket 5: 90%  Entering block accumulator loop for bucket 6:  bucket 5: 100%  Sorting block of length 162 for bucket 5  (Using difference cover)  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 164 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 5  Sorting block time: 00:00:00Returning block of 165 for bucket 6Getting block 7 of 29  Reserving size (252) for bucket 7  Calculating Z arrays for bucket 7Getting block 8 of 29  Reserving size (252) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 7: 10%  bucket 8: 10%  bucket 7: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 8: 50%  bucket 7: 60%  bucket 8: 60%  bucket 7: 70%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 220 for bucket 7  (Using difference cover)  bucket 8: 100%  Sorting block of length 242 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 221 for bucket 7  Sorting block time: 00:00:00Returning block of 243 for bucket 8Getting block 9 of 29  Reserving size (252) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 216 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 217 for bucket 9Getting block 10 of 29  Reserving size (252) for bucket 10  Calculating Z arrays for bucket 10Getting block 11 of 29  Reserving size (252) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 10:  Entering block accumulator loop for bucket 11:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 11: 10%  bucket 10: 40%  bucket 11: 20%  bucket 10: 50%  bucket 10: 60%  bucket 11: 30%  bucket 10: 70%  bucket 11: 40%  bucket 10: 80%  bucket 11: 50%  bucket 10: 90%  bucket 11: 60%  bucket 10: 100%  Sorting block of length 214 for bucket 10  (Using difference cover)  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 229 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 230 for bucket 11  Sorting block time: 00:00:00Returning block of 215 for bucket 10Getting block 12 of 29  Reserving size (252) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 195 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 196 for bucket 12Getting block 13 of 29  Reserving size (252) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 197 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 198 for bucket 13Getting block 14 of 29  Reserving size (252) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:Getting block 15 of 29  Reserving size (252) for bucket 15  Calculating Z arrays for bucket 15  bucket 14: 10%  Entering block accumulator loop for bucket 15:  bucket 14: 20%  bucket 15: 10%  bucket 14: 30%  bucket 15: 20%  bucket 14: 40%  bucket 15: 30%  bucket 14: 50%  bucket 15: 40%  bucket 14: 60%  bucket 15: 50%  bucket 14: 70%  bucket 15: 60%  bucket 14: 80%  bucket 15: 70%  bucket 15: 80%  bucket 14: 90%  bucket 15: 90%  bucket 14: 100%  Sorting block of length 191 for bucket 14  (Using difference cover)  bucket 15: 100%  Sorting block of length 177 for bucket 15  (Using difference cover)Getting block 16 of 29  Reserving size (252) for bucket 16  Calculating Z arrays for bucket 16  Sorting block time: 00:00:00Returning block of 192 for bucket 14  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  Sorting block time: 00:00:00  bucket 16: 30%Returning block of 178 for bucket 15  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 102 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 103 for bucket 16Getting block 17 of 29  Reserving size (252) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 162 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 17Getting block 18 of 29  Reserving size (252) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 117 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 18Getting block 19 of 29  Reserving size (252) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 161 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 162 for bucket 19Getting block 20 of 29  Reserving size (252) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%Getting block 21 of 29  Reserving size (252) for bucket 21  Calculating Z arrays for bucket 21  bucket 20: 30%  bucket 20: 40%  Entering block accumulator loop for bucket 21:  bucket 20: 50%  bucket 21: 10%  bucket 21: 20%  bucket 20: 60%  bucket 21: 30%  bucket 20: 70%  bucket 21: 40%  bucket 21: 50%  bucket 20: 80%  bucket 21: 60%  bucket 21: 70%  bucket 20: 90%  bucket 21: 80%  bucket 21: 90%  bucket 20: 100%  Sorting block of length 232 for bucket 20  bucket 21: 100%  Sorting block of length 131 for bucket 21  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 233 for bucket 20  Sorting block time: 00:00:00Returning block of 132 for bucket 21Getting block 22 of 29  Reserving size (252) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:Getting block 23 of 29  Reserving size (252) for bucket 23  Calculating Z arrays for bucket 23  bucket 22: 10%  bucket 22: 20%  Entering block accumulator loop for bucket 23:  bucket 22: 30%  bucket 23: 10%  bucket 22: 40%  bucket 23: 20%  bucket 22: 50%  bucket 23: 30%  bucket 22: 60%  bucket 23: 40%  bucket 22: 70%  bucket 23: 50%  bucket 22: 80%  bucket 23: 60%  bucket 22: 90%  bucket 23: 70%  bucket 22: 100%  Sorting block of length 220 for bucket 22  (Using difference cover)  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 141 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 221 for bucket 22  Sorting block time: 00:00:00Returning block of 142 for bucket 23Getting block 24 of 29  Reserving size (252) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 196 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 197 for bucket 24Getting block 25 of 29  Reserving size (252) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 227 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 228 for bucket 25Getting block 26 of 29  Reserving size (252) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%Getting block 27 of 29  Reserving size (252) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 40%  bucket 26: 50%  Entering block accumulator loop for bucket 27:  bucket 26: 60%  bucket 27: 10%  bucket 26: 70%  bucket 27: 20%  bucket 26: 80%  bucket 27: 30%  bucket 26: 90%  bucket 27: 40%  bucket 26: 100%  Sorting block of length 195 for bucket 26  (Using difference cover)  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 233 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 196 for bucket 26  Sorting block time: 00:00:00Returning block of 234 for bucket 27Getting block 28 of 29Getting block 29 of 29  Reserving size (252) for bucket 28  Calculating Z arrays for bucket 28  Reserving size (252) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 28:  bucket 29: 10%  bucket 28: 10%  bucket 29: 20%  bucket 28: 20%  bucket 29: 30%  bucket 28: 30%  bucket 29: 40%  bucket 29: 50%  bucket 28: 40%  bucket 29: 60%  bucket 28: 50%  bucket 29: 70%  bucket 29: 80%  bucket 28: 60%  bucket 29: 90%  bucket 28: 70%  bucket 29: 100%  Sorting block of length 180 for bucket 29  (Using difference cover)  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 80 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 181 for bucket 29  Sorting block time: 00:00:00Returning block of 81 for bucket 28
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 252 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times85.80% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #9)" name="8" time="74.1874132156372">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 5, merged 20; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 184.759 (target: 251)Getting block 1 of 29  Reserving size (252) for bucket 1Getting block 2 of 29  Reserving size (252) for bucket 2Getting block 3 of 29  Reserving size (252) for bucket 3  Calculating Z arrays for bucket 1Getting block 4 of 29  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  Reserving size (252) for bucket 4  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 2: 10%  bucket 1: 30%  bucket 2: 20%  bucket 3: 10%  bucket 1: 40%  bucket 4: 10%  bucket 2: 30%  bucket 3: 20%  bucket 1: 50%  bucket 4: 20%  bucket 2: 40%  bucket 3: 30%  bucket 1: 60%  bucket 4: 30%  bucket 2: 50%  bucket 3: 40%  bucket 4: 40%  bucket 1: 70%  bucket 3: 50%  bucket 2: 60%  bucket 4: 50%  bucket 3: 60%  bucket 1: 80%  bucket 2: 70%  bucket 4: 60%  bucket 3: 70%  bucket 1: 90%  bucket 2: 80%  bucket 3: 80%  bucket 1: 100%  bucket 4: 70%  Sorting block of length 127 for bucket 1  bucket 3: 90%  (Using difference cover)  bucket 4: 80%  bucket 2: 90%  bucket 3: 100%  Sorting block of length 166 for bucket 3  (Using difference cover)  bucket 4: 90%  bucket 2: 100%  Sorting block of length 239 for bucket 2  (Using difference cover)  bucket 4: 100%  Sorting block of length 242 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 240 for bucket 2  Sorting block time: 00:00:00Returning block of 128 for bucket 1  Sorting block time: 00:00:00Returning block of 243 for bucket 4  Sorting block time: 00:00:00Returning block of 167 for bucket 3Getting block 5 of 29  Reserving size (252) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 162 for bucket 5  (Using difference cover)Getting block 6 of 29  Reserving size (252) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  Sorting block time: 00:00:00  bucket 6: 50%Returning block of 163 for bucket 5  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 164 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 165 for bucket 6Getting block 7 of 29  Reserving size (252) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:Getting block 8 of 29  Reserving size (252) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 10%  Entering block accumulator loop for bucket 8:  bucket 7: 20%  bucket 8: 10%  bucket 7: 30%  bucket 8: 20%  bucket 7: 40%  bucket 8: 30%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 8: 40%  bucket 7: 80%  bucket 8: 50%  bucket 8: 60%  bucket 7: 90%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 7: 100%  bucket 8: 100%  Sorting block of length 242 for bucket 8  (Using difference cover)  Sorting block of length 220 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 243 for bucket 8  Sorting block time: 00:00:00Returning block of 221 for bucket 7Getting block 9 of 29  Reserving size (252) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 29  Reserving size (252) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 10: 40%  bucket 9: 60%  bucket 10: 50%  bucket 9: 70%  bucket 10: 60%  bucket 9: 80%  bucket 10: 70%  bucket 9: 90%  bucket 10: 80%  bucket 9: 100%  Sorting block of length 216 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 214 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 217 for bucket 9  Sorting block time: 00:00:00Returning block of 215 for bucket 10Getting block 11 of 29  Reserving size (252) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%Getting block 12 of 29  bucket 11: 30%  Reserving size (252) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 40%  Entering block accumulator loop for bucket 12:  bucket 11: 50%  bucket 12: 10%  bucket 11: 60%  bucket 12: 20%  bucket 11: 70%  bucket 12: 30%  bucket 11: 80%  bucket 12: 40%  bucket 11: 90%  bucket 12: 50%  bucket 11: 100%  Sorting block of length 229 for bucket 11  (Using difference cover)  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 195 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 230 for bucket 11  Sorting block time: 00:00:00Returning block of 196 for bucket 12Getting block 13 of 29  Reserving size (252) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 29  Reserving size (252) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%  bucket 14: 20%  bucket 13: 40%  bucket 14: 30%  bucket 13: 50%  bucket 14: 40%  bucket 13: 60%  bucket 14: 50%  bucket 13: 70%  bucket 14: 60%  bucket 13: 80%  bucket 14: 70%  bucket 13: 90%  bucket 14: 80%  bucket 13: 100%  Sorting block of length 197 for bucket 13  (Using difference cover)  bucket 14: 90%  bucket 14: 100%  Sorting block of length 191 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 198 for bucket 13  Sorting block time: 00:00:00Returning block of 192 for bucket 14Getting block 15 of 29  Reserving size (252) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 177 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 178 for bucket 15Getting block 16 of 29  Reserving size (252) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 102 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 103 for bucket 16Getting block 17 of 29  Reserving size (252) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:Getting block 18 of 29  Reserving size (252) for bucket 18  bucket 17: 10%  Calculating Z arrays for bucket 18  bucket 17: 20%  Entering block accumulator loop for bucket 18:  bucket 17: 30%  bucket 18: 10%  bucket 17: 40%  bucket 18: 20%  bucket 17: 50%  bucket 18: 30%  bucket 17: 60%  bucket 18: 40%  bucket 17: 70%  bucket 18: 50%  bucket 17: 80%  bucket 18: 60%  bucket 17: 90%  bucket 18: 70%  bucket 17: 100%  bucket 18: 80%  Sorting block of length 162 for bucket 17  (Using difference cover)  bucket 18: 90%  bucket 18: 100%  Sorting block of length 117 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 17  Sorting block time: 00:00:00Returning block of 118 for bucket 18Getting block 19 of 29  Reserving size (252) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 161 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 162 for bucket 19Getting block 20 of 29  Reserving size (252) for bucket 20  Calculating Z arrays for bucket 20Getting block 21 of 29  Reserving size (252) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 20:  bucket 20: 10%  Entering block accumulator loop for bucket 21:  bucket 20: 20%  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 20: 30%  bucket 21: 50%  bucket 20: 40%  bucket 21: 60%  bucket 21: 70%  bucket 20: 50%  bucket 21: 80%  bucket 20: 60%  bucket 21: 90%  bucket 20: 70%  bucket 21: 100%  Sorting block of length 131 for bucket 21  (Using difference cover)  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 232 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 132 for bucket 21  Sorting block time: 00:00:00Returning block of 233 for bucket 20Getting block 22 of 29  Reserving size (252) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 220 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 221 for bucket 22Getting block 23 of 29  Reserving size (252) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%Getting block 24 of 29  Reserving size (252) for bucket 24  Calculating Z arrays for bucket 24  bucket 23: 20%  bucket 23: 30%  Entering block accumulator loop for bucket 24:  bucket 23: 40%Getting block 25 of 29  bucket 23: 50%  bucket 24: 10%  Reserving size (252) for bucket 25  Calculating Z arrays for bucket 25  bucket 23: 60%  bucket 24: 20%  bucket 23: 70%  bucket 24: 30%  bucket 23: 80%  Entering block accumulator loop for bucket 25:  bucket 24: 40%  bucket 23: 90%  bucket 25: 10%  bucket 24: 50%  bucket 23: 100%  Sorting block of length 141 for bucket 23  (Using difference cover)  bucket 25: 20%  bucket 24: 60%  bucket 25: 30%  bucket 24: 70%  bucket 25: 40%  bucket 24: 80%  bucket 25: 50%  bucket 24: 90%  bucket 25: 60%  bucket 24: 100%  Sorting block of length 196 for bucket 24  (Using difference cover)  bucket 25: 70%  Sorting block time: 00:00:00  bucket 25: 80%Returning block of 142 for bucket 23  bucket 25: 90%  Sorting block time: 00:00:00Returning block of 197 for bucket 24  bucket 25: 100%  Sorting block of length 227 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 228 for bucket 25Getting block 26 of 29  Reserving size (252) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 195 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 196 for bucket 26Getting block 27 of 29  Reserving size (252) for bucket 27  Calculating Z arrays for bucket 27Getting block 28 of 29  Reserving size (252) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 27:  bucket 27: 10%  Entering block accumulator loop for bucket 28:  bucket 27: 20%  bucket 28: 10%  bucket 27: 30%  bucket 28: 20%  bucket 27: 40%  bucket 28: 30%  bucket 27: 50%  bucket 28: 40%  bucket 27: 60%  bucket 28: 50%  bucket 27: 70%  bucket 28: 60%  bucket 27: 80%  bucket 28: 70%  bucket 28: 80%  bucket 27: 90%  bucket 28: 90%  bucket 27: 100%  Sorting block of length 233 for bucket 27  (Using difference cover)  bucket 28: 100%  Sorting block of length 80 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 28  Sorting block time: 00:00:00Returning block of 234 for bucket 27Getting block 29 of 29  Reserving size (252) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 180 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 181 for bucket 29
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 252 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times85.80% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #10)" name="9" time="69.70334720611572">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 5, merged 20; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 3, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 184.759 (target: 251)Getting block 1 of 29  Reserving size (252) for bucket 1Getting block 2 of 29  Reserving size (252) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2Getting block 3 of 29  Reserving size (252) for bucket 3  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 3Getting block 4 of 29  bucket 2: 10%  Reserving size (252) for bucket 4  Entering block accumulator loop for bucket 3:  Calculating Z arrays for bucket 4  bucket 1: 10%  bucket 2: 20%  bucket 1: 20%  bucket 2: 30%  bucket 3: 10%  bucket 1: 30%  Entering block accumulator loop for bucket 4:  bucket 2: 40%  bucket 1: 40%  bucket 3: 20%  bucket 2: 50%  bucket 1: 50%  bucket 4: 10%  bucket 2: 60%  bucket 1: 60%  bucket 3: 30%  bucket 4: 20%  bucket 1: 70%  bucket 3: 40%  bucket 4: 30%  bucket 1: 80%  bucket 3: 50%  bucket 1: 90%  bucket 4: 40%  bucket 3: 60%  bucket 1: 100%  Sorting block of length 127 for bucket 1  (Using difference cover)  bucket 4: 50%  bucket 3: 70%  bucket 2: 70%  bucket 4: 60%  bucket 3: 80%  bucket 2: 80%  bucket 4: 70%  bucket 3: 90%  bucket 2: 90%  bucket 3: 100%  Sorting block of length 166 for bucket 3  (Using difference cover)  bucket 4: 80%  bucket 2: 100%  Sorting block of length 239 for bucket 2  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 242 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 128 for bucket 1  Sorting block time: 00:00:00Returning block of 167 for bucket 3  Sorting block time: 00:00:00Returning block of 240 for bucket 2  Sorting block time: 00:00:00Returning block of 243 for bucket 4Getting block 5 of 29  Reserving size (252) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 29  Reserving size (252) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  Entering block accumulator loop for bucket 6:  bucket 5: 40%  bucket 6: 10%  bucket 5: 50%  bucket 6: 20%  bucket 5: 60%  bucket 6: 30%  bucket 5: 70%  bucket 6: 40%  bucket 5: 80%  bucket 6: 50%  bucket 5: 90%  bucket 6: 60%  bucket 5: 100%  Sorting block of length 162 for bucket 5  (Using difference cover)  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 164 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 5  Sorting block time: 00:00:00Returning block of 165 for bucket 6Getting block 7 of 29  Reserving size (252) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%Getting block 8 of 29  bucket 7: 70%  Reserving size (252) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 80%  Entering block accumulator loop for bucket 8:  bucket 7: 90%  bucket 8: 10%  bucket 7: 100%  Sorting block of length 220 for bucket 7  (Using difference cover)  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  Sorting block time: 00:00:00  bucket 8: 90%Returning block of 221 for bucket 7  bucket 8: 100%  Sorting block of length 242 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 243 for bucket 8Getting block 9 of 29  Reserving size (252) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 29  Reserving size (252) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 9: 50%  bucket 10: 20%  bucket 9: 60%  bucket 10: 30%  bucket 9: 70%  bucket 10: 40%  bucket 9: 80%  bucket 10: 50%  bucket 9: 90%  bucket 9: 100%  bucket 10: 60%  Sorting block of length 216 for bucket 9  (Using difference cover)  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 214 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 217 for bucket 9  Sorting block time: 00:00:00Returning block of 215 for bucket 10Getting block 11 of 29  Reserving size (252) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%Getting block 12 of 29  Reserving size (252) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 20%  Entering block accumulator loop for bucket 12:  bucket 11: 30%  bucket 12: 10%  bucket 11: 40%  bucket 12: 20%  bucket 11: 50%  bucket 12: 30%  bucket 11: 60%  bucket 12: 40%  bucket 11: 70%  bucket 12: 50%  bucket 11: 80%  bucket 12: 60%  bucket 11: 90%  bucket 12: 70%  bucket 11: 100%  Sorting block of length 229 for bucket 11  (Using difference cover)  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 195 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 230 for bucket 11  Sorting block time: 00:00:00Returning block of 196 for bucket 12Getting block 13 of 29  Reserving size (252) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 29  Reserving size (252) for bucket 14  Entering block accumulator loop for bucket 13:  Calculating Z arrays for bucket 14  bucket 13: 10%  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%  bucket 14: 20%  bucket 13: 40%  bucket 14: 30%  bucket 13: 50%  bucket 14: 40%  bucket 13: 60%  bucket 14: 50%  bucket 13: 70%  bucket 14: 60%  bucket 13: 80%  bucket 14: 70%  bucket 13: 90%  bucket 14: 80%  bucket 13: 100%  bucket 14: 90%  Sorting block of length 197 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 191 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 198 for bucket 13  Sorting block time: 00:00:00Returning block of 192 for bucket 14Getting block 15 of 29  Reserving size (252) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 177 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 178 for bucket 15Getting block 16 of 29  Reserving size (252) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 102 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 103 for bucket 16Getting block 17 of 29  Reserving size (252) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 162 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 163 for bucket 17Getting block 18 of 29  Reserving size (252) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 117 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 18Getting block 19 of 29  Reserving size (252) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 161 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 162 for bucket 19Getting block 20 of 29  Reserving size (252) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%Getting block 21 of 29  Reserving size (252) for bucket 21  Calculating Z arrays for bucket 21  bucket 20: 30%  bucket 20: 40%  Entering block accumulator loop for bucket 21:  bucket 20: 50%  bucket 21: 10%  bucket 20: 60%  bucket 21: 20%  bucket 20: 70%  bucket 21: 30%  bucket 20: 80%  bucket 21: 40%  bucket 20: 90%  bucket 21: 50%  bucket 20: 100%  bucket 21: 60%  Sorting block of length 232 for bucket 20  (Using difference cover)  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 131 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 233 for bucket 20  Sorting block time: 00:00:00Returning block of 132 for bucket 21Getting block 22 of 29  Reserving size (252) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 29  Reserving size (252) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  Entering block accumulator loop for bucket 23:  bucket 22: 30%  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 22: 40%  bucket 23: 40%  bucket 22: 50%  bucket 23: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 23: 60%  bucket 22: 90%  bucket 22: 100%  bucket 23: 70%  Sorting block of length 220 for bucket 22  (Using difference cover)  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 141 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 221 for bucket 22  Sorting block time: 00:00:00Returning block of 142 for bucket 23Getting block 24 of 29  Reserving size (252) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%Getting block 25 of 29  Reserving size (252) for bucket 25  Calculating Z arrays for bucket 25  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  Entering block accumulator loop for bucket 25:  bucket 24: 60%  bucket 25: 10%  bucket 24: 70%  bucket 24: 80%  bucket 25: 20%  bucket 24: 90%  bucket 25: 30%  bucket 24: 100%  Sorting block of length 196 for bucket 24  (Using difference cover)  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 227 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 197 for bucket 24  Sorting block time: 00:00:00Returning block of 228 for bucket 25Getting block 26 of 29  Reserving size (252) for bucket 26  Calculating Z arrays for bucket 26Getting block 27 of 29  Reserving size (252) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 26:  bucket 26: 10%  Entering block accumulator loop for bucket 27:  bucket 26: 20%  bucket 27: 10%  bucket 26: 30%  bucket 27: 20%  bucket 26: 40%  bucket 27: 30%  bucket 26: 50%  bucket 27: 40%  bucket 26: 60%  bucket 27: 50%  bucket 26: 70%  bucket 27: 60%  bucket 26: 80%  bucket 27: 70%  bucket 26: 90%  bucket 27: 80%  bucket 26: 100%  Sorting block of length 195 for bucket 26  (Using difference cover)  bucket 27: 90%  bucket 27: 100%  Sorting block of length 233 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 196 for bucket 26  Sorting block time: 00:00:00Returning block of 234 for bucket 27Getting block 28 of 29  Reserving size (252) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%Getting block 29 of 29  bucket 28: 60%  Reserving size (252) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 70%  Entering block accumulator loop for bucket 29:  bucket 28: 80%  bucket 29: 10%  bucket 28: 90%  bucket 29: 20%  bucket 28: 100%  Sorting block of length 80 for bucket 28  (Using difference cover)  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 180 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 28  Sorting block time: 00:00:00Returning block of 181 for bucket 29
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 252 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="ivar_removereads (Test #1)" name="0" time="83.42961311340332">
        
            
            <system-out><![CDATA[
            Found 67 primers in BED filePrimer pair for 400_1_out_R not found in BED file.Primer pair for 400_34_out_L* not found in BED file.Primer pair for 400_35_out_L not found in BED file.400_18_out_L**400_23_out_R400_32_out_LRemoving reads primed with any of:400_18_out_L**400_18_out_R**400_23_out_L400_23_out_R400_32_out_L400_32_out_RFound 67 primers in BED fileWriting to removed_reads.bamNumber of references: 1Reference Name: PRVReference Length: 10807Using Region: PRVSorted By CoordinateResults:1629 reads were removed.
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #1)" name="0" time="96.12585139274597">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #2)" name="1" time="63.59705996513367">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #3)" name="2" time="64.10702586174011">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #4)" name="3" time="63.32283139228821">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #5)" name="4" time="64.83587765693665">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_idxstats (Test #1)" name="0" time="64.33460307121277">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_idxstats (Test #2)" name="1" time="61.20821976661682">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #1)" name="0" time="62.80407643318176">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #2)" name="1" time="53.368956565856934">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #11)" name="10" time="54.991647720336914">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #12)" name="11" time="55.31434679031372">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #13)" name="12" time="54.99793004989624">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #14)" name="13" time="54.26144790649414">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #15)" name="14" time="55.873953104019165">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #16)" name="15" time="57.097841024398804">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #17)" name="16" time="55.72665190696716">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #18)" name="17" time="54.90906310081482">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #19)" name="18" time="56.90682005882263">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #3)" name="2" time="55.209656953811646">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #4)" name="3" time="56.09180569648743">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #5)" name="4" time="64.22783279418945">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #6)" name="5" time="58.2545120716095">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #7)" name="6" time="55.512107372283936">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #8)" name="7" time="55.43340730667114">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #9)" name="8" time="55.26721119880676">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #10)" name="9" time="54.15972638130188">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #1)" name="0" time="168.65077471733093">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-01-16 13:42:12)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only short reads, Unicycler will essentially function as a SPAdes-optimiser. It will try many k-mer sizes, choose the best based on contig lengthand graph connectivity, and scaffold the graph using SPAdes repeat resolution.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2Unicycler version: v0.4.8Using 4 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/95/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program         Version             Status     Path                                     spades.py       3.14.1              good       /usr/local/bin/spades.py                 racon                               not used                                            makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb               tblastn         2.12.0+             good       /usr/local/bin/tblastn                   bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build             bowtie2         2.4.4               good       /usr/local/bin/bowtie2                   samtools        1.14                good       /usr/local/bin/samtools                  java            11.0.9.1-internal   good       /usr/local/bin/java                      pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar  bcftools                            not used                                          Choosing k-mer range for assembly (2024-01-16 13:42:13)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2024-01-16 13:42:14)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/95/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/95/working/fq2.fastqSystem information:  SPAdes version: 3.14.1  Python version: 3.9.9  OS: Linux-5.15.133+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Standard mode  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/95/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/95/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/tmp  Threads: 4  Memory limit (in Gb): 78======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/spades.log/galaxy/server/database/jobs_directory/000/95/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/95/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K27/configs/config.infoWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K27/configs/config.info  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 78 Gb  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/dataset.info) with K=27  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion  0:00:00.005     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads  0:00:00.136    89M / 89M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written  0:00:00.137    65M / 65M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads  0:00:00.138    75M / 75M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written  0:00:00.138    75M / 75M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads  0:00:00.140    75M / 75M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written  0:00:00.201    27M / 28M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction  0:00:00.208    27M / 28M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.208    27M / 28M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.208    27M / 28M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting  0:00:00.209    27M / 28M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.209    27M / 28M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.210    27M / 28M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 6.49995 Gb  0:00:00.210    27M / 28M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304  0:00:00.457    44M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads  0:00:00.457    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.516    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.  0:00:00.516    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.554    44M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction  0:00:00.554    44M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.555    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.556    44M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.556    44M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 6.49992 Gb  0:00:00.556    44M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:01.050     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers  0:00:01.050     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.  0:00:01.055    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.265    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.  0:00:01.265    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.385    45M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.422    40M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.449    40M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).  0:00:01.449    40M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.456    40M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.458    40M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping  0:00:01.458    40M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)  0:00:01.459    40M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping  0:00:01.471    41M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404  0:00:01.472    41M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413  0:00:01.472    41M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper  0:00:01.473    41M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph  0:00:01.475    41M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths  0:00:01.480    41M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted  0:00:01.484    41M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops  0:00:01.488    41M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected  0:00:01.490    39M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)  0:00:01.491    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:01.491    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.503    40M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).  0:00:01.504    40M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.  0:00:01.615    40M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM  0:00:01.618    40M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges  0:00:01.622    40M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding  0:00:01.622    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7  0:00:01.623    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695  0:00:01.623    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:01.623    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model  0:00:01.715    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2  0:00:01.947    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4  0:00:02.496    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8  0:00:03.115    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16  0:00:04.183    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32  0:00:04.183    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.185    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1  0:00:04.185    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275  0:00:04.185    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275  0:00:04.185    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132  0:00:04.185    40M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577  0:00:04.185    40M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275  0:00:04.186    40M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0  0:00:04.186    40M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification  0:00:04.186    40M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning  0:00:04.186    40M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled  0:00:04.187    40M / ..O    General                 (launcher.cpp              : 246)   Deduplicating paths  0:00:05.430    32M / 102M  INFO    General                 (launcher.cpp              : 250)   Paths deduplicated  0:00:05.430    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:05.430    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:05.430    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:05.430    32M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:05.430    32M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:05.430    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:05.430    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:05.430    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:05.431    32M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized  0:00:05.431    32M / 102M  INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished  0:00:05.431    32M / 102M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output  0:00:05.431    32M / 102M  INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/before_rr.fasta  0:00:05.437    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa  0:00:05.438    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/assembly_graph.fastg  0:00:05.442    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds  0:00:05.442    32M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/final_contigs.fasta  0:00:05.447    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/final_contigs.paths  0:00:05.451    32M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/scaffolds.fasta  0:00:05.456    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/scaffolds.paths  0:00:05.460    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths  0:00:05.468    32M / 102M  INFO    General                 (pipeline.cpp              : 259)   SPAdes finished  0:00:05.471    32M / 102M  INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 5 seconds===== K127 finished.===== Copy files started.== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/contigs.paths===== Copy files finished.===== Assembling finished.===== Breaking scaffolds started.== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3===== Breaking scaffolds finished.===== Terminate started.===== Terminate finished. * Assembled contigs are in /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished WITH WARNINGS!=== Error correction and assembling warnings: * 0:00:05.425    34M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.======= Warnings saved to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/warnings.logSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/spades.logThank you for using SPAdes!Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k127 graphRepair multi way junctions  (2024-01-16 13:43:14)Filter by read depth        (2024-01-16 13:43:14)Filter homopolymer loops    (2024-01-16 13:43:14)Merge all possible          (2024-01-16 13:43:14)Normalise read depths       (2024-01-16 13:43:14)Remove zero length segments (2024-01-16 13:43:14)Sort link order             (2024-01-16 13:43:14)Graph cleaning finished     (2024-01-16 13:43:14)Saving /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2024-01-16 13:43:14)Filter by read depth        (2024-01-16 13:43:14)Filter homopolymer loops    (2024-01-16 13:43:14)Merge all possible          (2024-01-16 13:43:14)Normalise read depths       (2024-01-16 13:43:14)Remove zero length segments (2024-01-16 13:43:14)Sort link order             (2024-01-16 13:43:14)Graph cleaning finished     (2024-01-16 13:43:14)Saving /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/k127_assembly_graph.gfaSPAdes assembly graph summary (2024-01-16 13:43:14)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27                                                                                    47                                                                                    63                                                                                    77                                                                                    89                                                                                    99                                                                                   107                                                                                   115                                                                                   121                                                                                   127         1       1          5,513   5,513            5,513           0   5.00e-01 <-bestRead depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/Determining graph multiplicity (2024-01-16 13:43:14)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Saving /galaxy/server/database/jobs_directory/000/95/working/001_best_spades_graph.gfaCleaning graph (2024-01-16 13:43:14)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        63        64Graph overlaps removedSaving /galaxy/server/database/jobs_directory/000/95/working/002_overlaps_removed.gfa    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2024-01-16 13:43:14)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2024-01-16 13:43:14)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundApplying bridges (2024-01-16 13:43:14)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultSaving /galaxy/server/database/jobs_directory/000/95/working/003_bridges_applied.gfaCleaning up leftover segments (2024-01-16 13:43:14)Segments eligible for deletion:Bridged assembly graph (2024-01-16 13:43:14)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e a complete assembly). If there are more contigs, thenthe assembly is not complete.Saving /galaxy/server/database/jobs_directory/000/95/working/004_final_clean.gfaComponent   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completePolishing assembly with Pilon (2024-01-16 13:43:14)    Unicycler now conducts multiple rounds of Pilon in an attempt to repair anyremaining small-scale errors with the assembly.Aligning reads to find appropriate insert size range...  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta  bowtie2 -1 /galaxy/server/database/jobs_directory/000/95/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/95/working/fq2.fastq -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.samInsert size 1st percentile:  263Insert size 99th percentile: 450Pilon polish round 1  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/95/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/95/working/fq2.fastq  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam  samtools index 1_paired_alignments.bam  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/95/working/pilon_polish --fix bases --frags 1_paired_alignments.bamNo Pilon changesSaving /galaxy/server/database/jobs_directory/000/95/working/005_polished.gfaRotating completed replicons (2024-01-16 13:43:24)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2024-01-16 13:43:38)Saving /galaxy/server/database/jobs_directory/000/95/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/95/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            tput: No value for $TERM and no -T specifiedtput: No value for $TERM and no -T specifiedtput: No value for $TERM and no -T specified
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #2)" name="1" time="165.72598695755005">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-01-16 13:44:49)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided both short and long reads, Unicycler will perform a hybrid assembly.It will first use SPAdes to make a short-read assembly graph, and then it willuse various methods to scaffold that graph with the long reads.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq.gz -2 fq2.fastq.gz -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2Unicycler version: v0.4.8Using 4 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/99/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program         Version             Status     Path                                     spades.py       3.14.1              good       /usr/local/bin/spades.py                 racon           1.4.20              good       /usr/local/bin/racon                     makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb               tblastn         2.12.0+             good       /usr/local/bin/tblastn                   bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build             bowtie2         2.4.4               good       /usr/local/bin/bowtie2                   samtools        1.14                good       /usr/local/bin/samtools                  java            11.0.9.1-internal   good       /usr/local/bin/java                      pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar  bcftools                            not used                                          Choosing k-mer range for assembly (2024-01-16 13:44:50)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2024-01-16 13:44:51)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/99/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/99/working/fq2.fastq.gzSystem information:  SPAdes version: 3.14.1  Python version: 3.9.9  OS: Linux-5.15.133+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Standard mode  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/99/working/fq1.fastq.gz']      right reads: ['/galaxy/server/database/jobs_directory/000/99/working/fq2.fastq.gz']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/tmp  Threads: 4  Memory limit (in Gb): 78======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/spades.log/galaxy/server/database/jobs_directory/000/99/working/fq1.fastq.gz: max reads length: 251/galaxy/server/database/jobs_directory/000/99/working/fq2.fastq.gz: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K27/configs/config.infoWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K27/configs/config.info  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 78 Gb  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/dataset.info) with K=27  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion  0:00:00.004     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)  0:00:00.004     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads  0:00:00.164    89M / 89M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written  0:00:00.164    65M / 65M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads  0:00:00.166    75M / 75M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written  0:00:00.166    75M / 75M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads  0:00:00.168    75M / 75M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written  0:00:00.221    27M / 28M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction  0:00:00.227    27M / 28M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.227    27M / 28M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.227    27M / 28M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting  0:00:00.228    27M / 28M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.229    27M / 28M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.229    27M / 28M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 6.49994 Gb  0:00:00.229    27M / 28M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304  0:00:00.477    44M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads  0:00:00.477    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.539    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.  0:00:00.539    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.604    44M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction  0:00:00.605    44M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.606    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.606    44M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.607    44M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 6.49992 Gb  0:00:00.607    44M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:01.113     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers  0:00:01.114     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.  0:00:01.119    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.318    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.  0:00:01.319    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.438    45M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.479    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.503    45M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).  0:00:01.503    45M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.510    45M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.511    45M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping  0:00:01.511    45M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)  0:00:01.511    45M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping  0:00:01.520    46M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404  0:00:01.520    46M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413  0:00:01.521    46M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper  0:00:01.521    46M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph  0:00:01.524    46M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths  0:00:01.529    46M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted  0:00:01.532    46M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops  0:00:01.537    46M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected  0:00:01.539    43M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)  0:00:01.540    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:01.540    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.553    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).  0:00:01.553    43M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.  0:00:01.686    43M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM  0:00:01.689    43M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges  0:00:01.693    43M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding  0:00:01.693    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7  0:00:01.694    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695  0:00:01.694    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:01.694    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model  0:00:01.787    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2  0:00:02.023    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4  0:00:02.571    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8  0:00:03.198    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16  0:00:04.260    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32  0:00:04.260    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.262    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1  0:00:04.262    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275  0:00:04.262    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275  0:00:04.262    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132  0:00:04.262    43M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577  0:00:04.263    43M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275  0:00:04.263    43M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0  0:00:04.263    43M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification  0:00:04.263    43M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning  0:00:04.263    43M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled ..ry/000/99/working/spades_assembly/assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished WITH WARNINGS!=== Error correction and assembling warnings: * 0:00:05.508    34M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.======= Warnings saved to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/warnings.logSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/spades.logThank you for using SPAdes!Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k127 graphRepair multi way junctions  (2024-01-16 13:45:51)Filter by read depth        (2024-01-16 13:45:51)Filter homopolymer loops    (2024-01-16 13:45:51)Merge all possible          (2024-01-16 13:45:51)Normalise read depths       (2024-01-16 13:45:51)Remove zero length segments (2024-01-16 13:45:51)Sort link order             (2024-01-16 13:45:51)Graph cleaning finished     (2024-01-16 13:45:51)Saving /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2024-01-16 13:45:51)Filter by read depth        (2024-01-16 13:45:51)Filter homopolymer loops    (2024-01-16 13:45:51)Merge all possible          (2024-01-16 13:45:51)Normalise read depths       (2024-01-16 13:45:51)Remove zero length segments (2024-01-16 13:45:51)Sort link order             (2024-01-16 13:45:51)Graph cleaning finished     (2024-01-16 13:45:51)Saving /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/k127_assembly_graph.gfaSPAdes assembly graph summary (2024-01-16 13:45:51)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27                                                                                    47                                                                                    63                                                                                    77                                                                                    89                                                                                    99                                                                                   107                                                                                   115                                                                                   121                                                                                   127         1       1          5,513   5,513            5,513           0   5.00e-01 <-bestRead depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/Determining graph multiplicity (2024-01-16 13:45:52)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Saving /galaxy/server/database/jobs_directory/000/99/working/001_best_spades_graph.gfaCleaning graph (2024-01-16 13:45:52)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        63        64Graph overlaps removedSaving /galaxy/server/database/jobs_directory/000/99/working/002_overlaps_removed.gfa    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2024-01-16 13:45:52)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2024-01-16 13:45:52)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundLoading reads (2024-01-16 13:45:52)0 / 1 (0.0%)1 / 1 (100.0%) - 5,386 bp1 / 1 (100.0%) - 5,386 bpAssembling contigs and long reads with miniasm (2024-01-16 13:45:52)    Unicycler uses miniasm to construct a string graph assembly using both theshort read contigs and the long reads. It will then use the resulting stringgraph to produce bridges between contigs. This method requires decent coverageof long reads and therefore may not be fruitful if long reads are sparse.However, it does not rely on the short read assembly graph having goodconnectivity and is able to bridge an assembly graph even when it contains manydead ends.    Unicycler uses two types of "reads" as assembly input: anchor contigs fromthe short-read assembly and actual long reads which overlap two or more ofthese contigs. It then assembles them with miniasm.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/99/working/miniasm_assembly/all_segments.fasta1538635081-153864508250785078255cm:i:11341538650905383-1538650885381293293255cm:i:63Number of minimap alignments: 1Saving to /galaxy/server/database/jobs_directory/000/99/working/miniasm_assembly/01_assembly_reads.fastq:  0 short-read contigs  1 long readsFinding overlaps with minimap... failedAssembling reads with miniasm... empty resultCreating simple long read bridges (2024-01-16 13:45:52)    Unicycler uses long read alignments (from minimap) to resolve simple repeatstructures in the graph. This takes care of some "low-hanging fruit" of thegraph simplification.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/99/working/simple_bridging/all_segments.fasta1538635081-153864508250785078255cm:i:11341538650905383-1538650885381293293255cm:i:63Number of minimap alignments: 1    Two-way junctions are defined as cases where two graph contigs (A and B)join together (C) and then split apart again (D and E). This usually representsa simple 2-copy repeat, and there are two possible options for its resolution:(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such ajunction gets to "vote" for option 1, option 2 or neither. Unicycler creates abridge at each junction for the most voted for option.No suitable two-way junctions present    Simple loops are parts of the graph where two contigs (A and B) areconnected via a repeat (C) which loops back to itself (via D). It is possibleto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is thecorrect number of times through. In this step, such reads are found and each isaligned against alternative loop counts. A reads casts its "vote" for the loopcount it agrees best with, and Unicycler creates a bridge using the most votedfor count.No suitable simple loops presentDetermining low score threshold (2024-01-16 13:45:52)    Before conducting semi-global alignment of the long reads to the assemblygraph, Unicycler must determine a minimum alignment score threshold such thatnonsense alignments are excluded. To choose a threshold automatically, itexamines alignments between random sequences and selects a score a few standarddeviations above the mean.Automatically choosing a threshold using random alignment scores.Random alignment mean score: 61.66         standard deviation:  1.31        Low score threshold: 61.66 + (7 x 1.31) = 70.86Aligning reads with minimap (2024-01-16 13:45:52)1538655077-153868508050725072255cm:i:9451538650935384-1538650875378291291255cm:i:52Done! 1 out of 1 reads alignedAligning reads (2024-01-16 13:45:52)1/1: 1 (5386 bp)minimap alignments:    5,5077,-,1,8,5080    5093,5384,-,1,5087,5378Reference ranges:    1-: 0 - 5386Range: 1: 0 - 5386    common 10-mers: 5464    line 1: 5076 points, score=5074.000394 (good)    line 2: 292 points, score=290.006826 (good)All Seqan alignments (time to align = 0.071 s):  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1          0     5085           0      5085       -      15255        100.00   100.00%         1       5085     5386        5085      5386       -        903        100.00   100.00%Final alignments:  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1          0     5085           0      5085       -      15255        100.00   100.00%         1       5085     5386        5085      5386       -        903        100.00   100.00%Read alignment summary (2024-01-16 13:45:52)Total read count:            1Fully aligned reads:         1Partially aligned reads:     0Unaligned reads:             0Total bases aligned:     5,386 bpMean alignment identity:   100.0%Deleting /galaxy/server/database/jobs_directory/000/99/working/read_alignment/Setting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00Building long read bridges (2024-01-16 13:45:52)    Unicycler uses the long read alignments to produce bridges between anchorsegments. These bridges can be formed using as few as one long read, givingUnicycler the ability to bridge the graph even when long-read depth is low.Median depth of 10 longest contigs: 1.00                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path                Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  QualityApplying bridges (2024-01-16 13:45:52)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultSaving /galaxy/server/database/jobs_directory/000/99/working/003_bridges_applied.gfaCleaning up leftover segments (2024-01-16 13:45:52)Segments eligible for deletion:Bridged assembly graph (2024-01-16 13:45:52)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e a complete assembly). If there are more contigs, thenthe assembly is not complete.Saving /galaxy/server/database/jobs_directory/000/99/working/004_final_clean.gfaComponent   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completePolishing assembly with Pilon (2024-01-16 13:45:52)    Unicycler now conducts multiple rounds of Pilon in an attempt to repair anyremaining small-scale errors with the assembly.Aligning reads to find appropriate insert size range...  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta  bowtie2 -1 /galaxy/server/database/jobs_directory/000/99/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/99/working/fq2.fastq.gz -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.samInsert size 1st percentile:  263Insert size 99th percentile: 450Pilon polish round 1  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/99/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/99/working/fq2.fastq.gz  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam  samtools index 1_paired_alignments.bam  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/99/working/pilon_polish --fix bases --frags 1_paired_alignments.bamNo Pilon changesPilon polish round 2  bowtie2-build 2_polish_input.fasta 2_polish_input.fasta  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 2_polish_input.fasta -S 2_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/99/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/99/working/fq2.fastq.gz  samtools sort -@ 4 -o 2_paired_alignments.bam -O bam -T temp 2_paired_alignments.sam  samtools index 2_paired_alignments.bam  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 2_polish_input.fasta --changes --output 2_pilon --outdir /galaxy/server/database/jobs_directory/000/99/working/pilon_polish --fix all --frags 2_paired_alignments.bamNo Pilon changesSaving /galaxy/server/database/jobs_directory/000/99/working/005_polished.gfaRotating completed replicons (2024-01-16 13:46:08)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2024-01-16 13:46:23)Saving /galaxy/server/database/jobs_directory/000/99/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/99/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            tput: No value for $TERM and no -T specifiedtput: No value for $TERM and no -T specifiedtput: No value for $TERM and no -T specified
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #3)" name="2" time="141.15207052230835">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-01-16 13:47:29)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only short reads, Unicycler will essentially function as a SPAdes-optimiser. It will try many k-mer sizes, choose the best based on contig lengthand graph connectivity, and scaffold the graph using SPAdes repeat resolution.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --no_pilon --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2Unicycler version: v0.4.8Using 4 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/102/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program         Version   Status     Path                        spades.py       3.14.1    good       /usr/local/bin/spades.py    racon                     not used                               makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb  tblastn         2.12.0+   good       /usr/local/bin/tblastn      bowtie2-build             not used                               bowtie2                   not used                               samtools                  not used                               java                      not used                               pilon                     not used                               bcftools                  not used                             Choosing k-mer range for assembly (2024-01-16 13:47:30)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2024-01-16 13:47:30)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/102/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/102/working/fq2.fastqSystem information:  SPAdes version: 3.14.1  Python version: 3.9.9  OS: Linux-5.15.133+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Standard mode  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/102/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/102/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/tmp  Threads: 4  Memory limit (in Gb): 78======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/spades.log/galaxy/server/database/jobs_directory/000/102/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/102/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K27/configs/config.infoWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K27/configs/config.info  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 78 Gb  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/dataset.info) with K=27  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion  0:00:00.005     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads  0:00:00.133    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written  0:00:00.134    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads  0:00:00.135    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written  0:00:00.136    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads  0:00:00.137    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written  0:00:00.171    25M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction  0:00:00.177    25M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.177    25M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.177    25M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting  0:00:00.178    25M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.  0:00:00.178    25M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.179    25M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 6.49995 Gb  0:00:00.179    25M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304  0:00:00.404    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads  0:00:00.404    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:00.461    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.  0:00:00.461    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:00.497    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction  0:00:00.498    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:00.498    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.  0:00:00.499    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.499    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 6.49992 Gb  0:00:00.499    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.987     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers  0:00:00.987     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.  0:00:00.992    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.197    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.  0:00:01.198    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.321    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.360    38M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:01.380    38M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).  0:00:01.381    38M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:01.388    38M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:01.389    38M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping  0:00:01.389    38M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)  0:00:01.389    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping  0:00:01.398    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404  0:00:01.398    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413  0:00:01.399    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper  0:00:01.399    39M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph  0:00:01.402    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths  0:00:01.409    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted  0:00:01.413    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops  0:00:01.417    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected  0:00:01.419    39M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)  0:00:01.419    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:01.420    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:01.437    40M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).  0:00:01.437    40M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.  0:00:01.562    40M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM  0:00:01.565    40M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges  0:00:01.569    40M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding  0:00:01.569    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7  0:00:01.569    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695  0:00:01.570    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:01.570    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model  0:00:01.661    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2  0:00:01.891    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4  0:00:02.450    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8  0:00:03.071    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16  0:00:04.133    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32  0:00:04.134    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.135    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1  0:00:04.136    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275  0:00:04.136    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275  0:00:04.136    40M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132  0:00:04.136    40M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577  0:00:04.136    40M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275  0:00:04.136    40M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0  0:00:04.136    40M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification  0:00:04.137    40M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning  0:00:04.137    40M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled  0:00:04.137    40M / 57M   INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover  0:00:04.138    40M / 57M   INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge r.. overlaps  0:00:05.421    32M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:05.421    32M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:05.421    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:05.421    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:05.422    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:05.422    32M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized  0:00:05.422    32M / 102M  INFO    General                 (launcher.cpp              : 439)   Closing gaps in paths  0:00:05.422    32M / 102M  INFO    General                 (launcher.cpp              : 467)   Gap closing completed  0:00:05.422    32M / 102M  INFO    General                 (launcher.cpp              : 296)   Traversing tandem repeats  0:00:05.422    32M / 102M  INFO    General                 (launcher.cpp              : 306)   Traversed 0 loops  0:00:05.422    32M / 102M  INFO    General                 (launcher.cpp              : 244)   Finalizing paths  0:00:05.422    32M / 102M  INFO    General                 (launcher.cpp              : 246)   Deduplicating paths  0:00:05.423    32M / 102M  INFO    General                 (launcher.cpp              : 250)   Paths deduplicated  0:00:05.423    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:05.423    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:05.423    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:05.423    32M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:05.423    32M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:05.423    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:05.424    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:05.424    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:05.424    32M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized  0:00:05.424    32M / 102M  INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished  0:00:05.424    32M / 102M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output  0:00:05.424    32M / 102M  INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/before_rr.fasta  0:00:05.429    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa  0:00:05.430    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/assembly_graph.fastg  0:00:05.434    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds  0:00:05.435    32M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/final_contigs.fasta  0:00:05.438    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/final_contigs.paths  0:00:05.443    32M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/scaffolds.fasta  0:00:05.448    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/scaffolds.paths  0:00:05.451    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths  0:00:05.460    32M / 102M  INFO    General                 (pipeline.cpp              : 259)   SPAdes finished  0:00:05.463    32M / 102M  INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 5 seconds===== K127 finished.===== Copy files started.== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/contigs.paths===== Copy files finished.===== Assembling finished.===== Breaking scaffolds started.== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3===== Breaking scaffolds finished.===== Terminate started.===== Terminate finished. * Assembled contigs are in /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished WITH WARNINGS!=== Error correction and assembling warnings: * 0:00:05.418    34M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.======= Warnings saved to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/warnings.logSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/spades.logThank you for using SPAdes!Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k127 graphRepair multi way junctions  (2024-01-16 13:48:31)Filter by read depth        (2024-01-16 13:48:31)Filter homopolymer loops    (2024-01-16 13:48:31)Merge all possible          (2024-01-16 13:48:31)Normalise read depths       (2024-01-16 13:48:31)Remove zero length segments (2024-01-16 13:48:31)Sort link order             (2024-01-16 13:48:31)Graph cleaning finished     (2024-01-16 13:48:31)Saving /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2024-01-16 13:48:31)Filter by read depth        (2024-01-16 13:48:31)Filter homopolymer loops    (2024-01-16 13:48:31)Merge all possible          (2024-01-16 13:48:31)Normalise read depths       (2024-01-16 13:48:31)Remove zero length segments (2024-01-16 13:48:31)Sort link order             (2024-01-16 13:48:31)Graph cleaning finished     (2024-01-16 13:48:31)Saving /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/k127_assembly_graph.gfaSPAdes assembly graph summary (2024-01-16 13:48:31)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27                                                                                    47                                                                                    63                                                                                    77                                                                                    89                                                                                    99                                                                                   107                                                                                   115                                                                                   121                                                                                   127         1       1          5,513   5,513            5,513           0   5.00e-01 <-bestRead depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/Determining graph multiplicity (2024-01-16 13:48:31)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Saving /galaxy/server/database/jobs_directory/000/102/working/001_best_spades_graph.gfaCleaning graph (2024-01-16 13:48:31)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        63        64Graph overlaps removedSaving /galaxy/server/database/jobs_directory/000/102/working/002_overlaps_removed.gfa    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2024-01-16 13:48:31)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2024-01-16 13:48:31)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundApplying bridges (2024-01-16 13:48:31)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultSaving /galaxy/server/database/jobs_directory/000/102/working/003_bridges_applied.gfaCleaning up leftover segments (2024-01-16 13:48:31)Segments eligible for deletion:Bridged assembly graph (2024-01-16 13:48:31)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e a complete assembly). If there are more contigs, thenthe assembly is not complete.Saving /galaxy/server/database/jobs_directory/000/102/working/004_final_clean.gfaComponent   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2024-01-16 13:48:31)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2024-01-16 13:48:45)Saving /galaxy/server/database/jobs_directory/000/102/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/102/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            tput: No value for $TERM and no -T specifiedtput: No value for $TERM and no -T specifiedtput: No value for $TERM and no -T specified
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #4)" name="3" time="64.28296399116516">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-01-16 13:49:48)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only long reads, Unicycler will assemble the reads with miniasm andthen run repeated polishing rounds using Racon.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2Unicycler version: v0.4.8Using 4 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/104/workingDependencies:  Program         Version   Status     Path                        spades.py                 not used                               racon           1.4.20    good       /usr/local/bin/racon        makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb  tblastn         2.12.0+   good       /usr/local/bin/tblastn      bowtie2-build             not used                               bowtie2                   not used                               samtools                  not used                               java                      not used                               pilon                     not used                               bcftools                  not used                             Loading reads (2024-01-16 13:49:49)0 / 40 (0.0%)1 / 40 (2.5%) - 412 bp2 / 40 (5.0%) - 4,847 bp3 / 40 (7.5%) - 8,974 bp4 / 40 (10.0%) - 13,249 bp5 / 40 (12.5%) - 14,258 bp6 / 40 (15.0%) - 14,806 bp7 / 40 (17.5%) - 19,262 bp8 / 40 (20.0%) - 19,737 bp9 / 40 (22.5%) - 20,395 bp10 / 40 (25.0%) - 32,024 bp11 / 40 (27.5%) - 32,698 bp12 / 40 (30.0%) - 34,509 bp13 / 40 (32.5%) - 39,018 bp14 / 40 (35.0%) - 43,351 bp15 / 40 (37.5%) - 44,224 bp16 / 40 (40.0%) - 45,978 bp17 / 40 (42.5%) - 46,402 bp18 / 40 (45.0%) - 61,596 bp19 / 40 (47.5%) - 62,279 bp20 / 40 (50.0%) - 63,700 bp21 / 40 (52.5%) - 66,412 bp22 / 40 (55.0%) - 66,845 bp23 / 40 (57.5%) - 67,316 bp24 / 40 (60.0%) - 69,428 bp25 / 40 (62.5%) - 73,964 bp26 / 40 (65.0%) - 75,608 bp27 / 40 (67.5%) - 80,223 bp28 / 40 (70.0%) - 84,810 bp29 / 40 (72.5%) - 92,076 bp30 / 40 (75.0%) - 92,832 bp31 / 40 (77.5%) - 92,939 bp32 / 40 (80.0%) - 93,532 bp33 / 40 (82.5%) - 96,370 bp34 / 40 (85.0%) - 100,656 bp35 / 40 (87.5%) - 119,222 bp36 / 40 (90.0%) - 123,827 bp37 / 40 (92.5%) - 155,106 bp38 / 40 (95.0%) - 156,254 bp39 / 40 (97.5%) - 157,993 bp40 / 40 (100.0%) - 162,406 bp40 / 40 (100.0%) - 162,406 bpAssembling contigs and long reads with miniasm (2024-01-16 13:49:49)Saving to /galaxy/server/database/jobs_directory/000/104/working/miniasm_assembly/01_assembly_reads.fastq:  40 long readsFinding overlaps with minimap... success  120 overlapsAssembling reads with miniasm... success  7 segments, 6 links    Unicycler removes any links from the string graph which create branches.I.e. if any segment has two or more links connected to one end, those links areremoved. This will result in a graph with only simple linear paths that issuitable for creating unambiguous bridges.No links needed removalSaving /galaxy/server/database/jobs_directory/000/104/working/miniasm_assembly/11_branching_paths_removed.gfaMerging segments into unitigs:Linear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-  1 linear unitig  total size = 5,836 bpSaving /galaxy/server/database/jobs_directory/000/104/working/miniasm_assembly/12_unitig_graph.gfaSaving /galaxy/server/database/jobs_directory/000/104/working/002_unitig_graph.gfaPolishing miniasm assembly with Racon (2024-01-16 13:49:49)    Unicycler now uses Racon to polish the miniasm assembly. It does multiplerounds of polishing to get the best consensus. Circular unitigs are rotatedbetween rounds such that all parts (including the ends) are polished well.Saving to /galaxy/server/database/jobs_directory/000/104/working/miniasm_assembly/racon_polish/polishing_reads.fastq:  40 long readsPolish       Assembly          Mappinground            size          quality0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42862104010+158361061460311473800255cm:i:2000237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1583652215833179612255cm:i:27054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-158362376583334573457255cm:i:1153054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262525-158363023147872399255cm:i:1443708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46052804284-158364393614814004255cm:i:2463708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194286-15836421558335461618255cm:i:884850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271704027+158361680583310324153255cm:i:1744850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934082+15836416022201598255cm:i:30598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713344566-158362699578612813232255cm:i:243598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-158365026637722680255cm:i:129771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-158362657583314693386255cm:i:268771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template4615972786-158363026369052689255cm:i:1579780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331434271-15836338425418344128255cm:i:4709780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330924330-15836450357984301295255cm:i:779e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45365444408-1583669392712083864255cm:i:2379e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630084472-15836421557483511533255cm:i:53a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1583629093222131313255cm:i:22a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template44563354397+158361321525713514062255cm:i:280a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374349+1583623961238938255cm:i:40a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445686537+1583653345798154464255cm:i:26b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351114359-158361673579820624248255cm:i:487b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351091619-158363015254721510255cm:i:68bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template4275934048+158361733583313034100255cm:i:230bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+15836416903111712255cm:i:43f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894205+1583623393910393916255cm:i:166f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092961782+15836424257983671556255cm:i:63begin           5,836             5.330237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162901009505424314045255cm:i:5290237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1629056706287297617255cm:i:630237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162904404122400255cm:i:19054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162902540628722493747255cm:i:527054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1629051247412762423255cm:i:2453708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162904431623224312255cm:i:4863708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16290435462879431933255cm:i:1944850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271164027+162901774628721454513255cm:i:4264850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16290417414211737255cm:i:61598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162902854622622573372255cm:i:501598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1629051283114592780255cm:i:289771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162902825628722683462255cm:i:513771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template4615972745-1629074280515012731255cm:i:2899780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16290354469920224345255cm:i:3779780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694304-16290498462716141287255cm:i:1179e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1629072453419214462255cm:i:3379e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16290459762065801609255cm:i:103a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1629030833386169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162901126570823684582255cm:i:487a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374392+162902310393621016255cm:i:59a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445686539+1629057856254217469255cm:i:45b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162901806625827774452255cm:i:600b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162907416037611529255cm:i:150bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122795+1629052095912149703255cm:i:24bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421149847+162905851307155722255cm:i:17bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template4275934048+162901886628720704401255cm:i:456bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16290418386561834255cm:i:109c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1629020602358156298255cm:i:35f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1629023443621064413255cm:i:421f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16290448862737441785255cm:i:1311               6,290             7.820237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162421016500924603993255cm:i:5300237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1624256266239283613255cm:i:610237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162424408117404255cm:i:18054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162422535623922343704255cm:i:514054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1624251246913872418255cm:i:2713708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162424427623804272255cm:i:4943708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16242431462399551925255cm:i:1964850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271084027+162421759623921944480255cm:i:4404850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16242417354501731255cm:i:67598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162422848617822843330255cm:i:509598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1624251282515042774255cm:i:295771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162422819623922353420255cm:i:510771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template46151092745-1624274278715172713255cm:i:3049780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16242358465920514301255cm:i:3919780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694304-16242493962236181284255cm:i:1149e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1624272449319414421255cm:i:3459e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16242455661585791602255cm:i:105a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1624230773380169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162421133566424054531255cm:i:507a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374397+162422310513531028255cm:i:59a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456107539+1624257596206204447255cm:i:40b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162421799621027494411255cm:i:591b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162427416017951527255cm:i:165bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122847+1624251665916224750255cm:i:35bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421160847+162426021310144708255cm:i:16bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template42751244048+162421908623920614331255cm:i:454bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16242418316671827255cm:i:111c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1624220532352157299255cm:i:37f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1624223439521304372255cm:i:425f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16242444762257621778255cm:i:1382               6,242             8.020237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162651028502524363997255cm:i:5270237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1626556426262281620255cm:i:590237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162654408105404255cm:i:17054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162652544626222283718255cm:i:507054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1626551247813532427255cm:i:2603708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162654429323774289255cm:i:4923708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16265433162629671931255cm:i:1944850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271084027+162651772626221904490255cm:i:4364850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16265417484481744255cm:i:62598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162652857620122703344255cm:i:503598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1626551283414632783255cm:i:284771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162652828626222513434255cm:i:515771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template46151022745-1626574280415112730255cm:i:3059780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16265358467620634318255cm:i:3929780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694328-16265493062466231316255cm:i:1139e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1626572451019874438255cm:i:3509e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16265457361815691608255cm:i:102a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1626530893392169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162651145568024234535255cm:i:509a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374397+162652310633371040255cm:i:56a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456107539+1626557796229223450255cm:i:45b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162651812623327694421255cm:i:601b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162657416157641541255cm:i:156bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122847+1626551825936236754255cm:i:36bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421149847+162655891322155733255cm:i:17bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template42751244048+162651921626220624341255cm:i:449bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16265418446601840255cm:i:111c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1626520632361157298255cm:i:37f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1626523441221824389255cm:i:436f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16265446462487871784255cm:i:1413               6,265             8.04Best polish: /galaxy/server/database/jobs_directory/000/104/working/miniasm_assembly/racon_polish/016_rotated.fastaSaving /galaxy/server/database/jobs_directory/000/104/working/miniasm_assembly/13_racon_polished.gfaSaving /galaxy/server/database/jobs_directory/000/104/working/003_racon_polished.gfaAssembly complete (2024-01-16 13:49:49)Saving /galaxy/server/database/jobs_directory/000/104/working/assembly.gfa
            ]]></system-out>
            <system-err><![CDATA[
            tput: No value for $TERM and no -T specifiedtput: No value for $TERM and no -T specifiedtput: No value for $TERM and no -T specified
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="vcfgenotypes (Test #1)" name="0" time="70.63810467720032">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
</testsuite>