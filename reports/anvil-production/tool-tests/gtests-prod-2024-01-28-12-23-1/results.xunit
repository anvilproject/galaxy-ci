<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Results (powered by Planemo)"
           tests="127"
           errors="0"
           failures="9"
           skip="0">
    
    <testcase classname="bcftools_csq (Test #1)" name="0" time="73.36813378334045">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Parsing /galaxy/server/database/objects/4/0/0/dataset_400e48aa-2f6a-4ff7-ad0a-c13bdf869a03.dat ...Indexed 4 transcripts, 10 exons, 10 CDSs, 6 UTRsCalling...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_csq (Test #2)" name="1" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 1, "tool_id": "bcftools_csq", "tool_version": "1.10"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="bcftools_plugin_mendelian (Test #1)" name="0" time="66.05371260643005">
        
            
            <system-out><![CDATA[
            # [1]nOK[2]nBad[3]nSkipped[4]Trio (mother,father,child)20130NA00001,NA00002,NA00006
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_plugin_mendelian (Test #2)" name="1" time="59.24718189239502">
        
            
            <system-out><![CDATA[
            # [1]nOK[2]nBad[3]nSkipped[4]Trio (mother,father,child)20130NA00001,NA00002,NA00006
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #1)" name="0" time="76.17912721633911">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "944acd9df39c2ad6",   "src": "hda"  },  "library|input_2": {   "id": "11cd4d1b8d5f42ea",   "src": "hda"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "4525f04900f422e8",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/c/9/0/dataset_c9017d58-22d1-48e8-83c7-f730f9461a1e.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/c/9/0/dataset_c9017d58-22d1-48e8-83c7-f730f9461a1e.dat\u0027 genome.fa \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/8/0/b/dataset_80b86f0f-50b0-4ad1-bb28-6eadb90ad8a2.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/d/0/3/dataset_d0348c1f-6c78-42d3-b4d1-ed0627dd7686.dat\u0027 input_r.fastq \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/9/3/8/dataset_93865672-8c38-4c40-a4f1-bd4489483fd5.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2024-01-28T14:25:35.286866",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-6r4zg",  "galaxy_version": "21.09",  "history_id": "cbf056288c649de3",  "id": "c80bd06190f17dbc",  "inputs": {   "input_1": {    "id": "944acd9df39c2ad6",    "src": "hda",    "uuid": "80b86f0f-50b0-4ad1-bb28-6eadb90ad8a2"   },   "input_2": {    "id": "11cd4d1b8d5f42ea",    "src": "hda",    "uuid": "d0348c1f-6c78-42d3-b4d1-ed0627dd7686"   },   "own_file": {    "id": "4525f04900f422e8",    "src": "hda",    "uuid": "c9017d58-22d1-48e8-83c7-f730f9461a1e"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1706451981.0000000",    "title": "Job End Time",    "value": "2024-01-28 14:26:21"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1706451980.0000000",    "title": "Job Start Time",    "value": "2024-01-28 14:26:20"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "12000.0000000",    "title": "Memory Allocated (MB)",    "value": "12000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/9/0/dataset_c9017d58-22d1-48e8-83c7-f730f9461a1e.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 2 of 30\nGetting block 1 of 30\nGetting block 3 of 30\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 1\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 4: 10%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 3: 40%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 4: 30%\n  bucket 1: 90%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 1: 100%\n  bucket 4: 40%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 4: 60%\n  Sorting block time: 00:00:00\n  bucket 3: 80%\n  bucket 2: 90%\nReturning block of 690 for bucket 1\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 2: 100%\n  bucket 4: 80%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 4: 90%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  bucket 5: 20%\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 40%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 50%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 60%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 7: 80%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  bucket 11: 40%\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 10%\n  bucket 11: 70%\n  bucket 12: 20%\n  bucket 11: 80%\n  bucket 12: 30%\n  bucket 11: 90%\n  bucket 12: 40%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Entering block accumulator loop for bucket 13:\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 15: 40%\n  bucket 16: 40%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 15: 60%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 16: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\nGetting block 24 of 30\n  bucket 23: 70%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 80%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 90%\n  bucket 24: 10%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 4: 30%\n  bucket 3: 20%\n  bucket 1: 60%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 1: 80%\n  bucket 4: 50%\n  bucket 2: 40%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 3: 40%\n  bucket 4: 70%\n  bucket 2: 50%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 4: 90%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 2: 90%\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  bucket 3: 90%\n  bucket 2: 100%\n  bucket 3: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\nGetting block 7 of 30\n  bucket 5: 20%\n  Reserving size (777) for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  bucket 5: 30%\n  bucket 5: 40%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 7: 70%\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  bucket 6: 70%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 7: 90%\n  bucket 6: 90%\nGetting block 8 of 30\n  bucket 7: 100%\n  Reserving size (777) for bucket 8\n  bucket 6: 100%\n  Sorting block of length 707 for bucket 7\n  Calculating Z arrays for bucket 8\n  (Using difference cover)\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  bucket 8: 40%\n  bucket 8: 50%\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 10%\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 11: 10%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 11: 60%\n  bucket 9: 100%\n  bucket 10: 80%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 10: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  bucket 15: 70%\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 16: 10%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\nGetting block 20 of 30\n  Calculating Z arrays for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 30%\n  bucket 20: 50%\n  bucket 19: 40%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 19: 60%\n  bucket 20: 80%\n  bucket 19: 70%\n  bucket 20: 90%\n  bucket 19: 80%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 22: 20%\n  bucket 21: 90%\n  bucket 22: 30%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  bucket 23: 30%\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 40%\n  bucket 24: 10%\n  bucket 23: 50%\n  bucket 24: 20%\n  bucket 23: 60%\n  bucket 24: 30%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 24: 40%\n  bucket 23: 90%\n  bucket 24: 50%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Entering block accumulator loop for bucket 25:\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 30%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 27: 50%\n  bucket 28: 20%\n  bucket 27: 60%\n  bucket 28: 30%\n  bucket 27: 70%\n  bucket 28: 40%\n  bucket 27: 80%\n  bucket 28: 50%\n  bucket 27: 90%\n  bucket 28: 60%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 30\n  Entering block accumulator loop for bucket 29:\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 10%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 30%\n  bucket 30: 50%\n  bucket 29: 40%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 29: 50%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 60%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "75f094339b48d6e5",    "src": "hda",    "uuid": "93865672-8c38-4c40-a4f1-bd4489483fd5"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 320, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 321, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 322, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/9/0/dataset_c9017d58-22d1-48e8-83c7-f730f9461a1e.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 2 of 30\nGetting block 1 of 30\nGetting block 3 of 30\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 1\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 4: 10%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 3: 40%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 4: 30%\n  bucket 1: 90%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 1: 100%\n  bucket 4: 40%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 4: 60%\n  Sorting block time: 00:00:00\n  bucket 3: 80%\n  bucket 2: 90%\nReturning block of 690 for bucket 1\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 2: 100%\n  bucket 4: 80%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 4: 90%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  bucket 5: 20%\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 40%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 50%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 60%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 7: 80%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  bucket 11: 40%\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 10%\n  bucket 11: 70%\n  bucket 12: 20%\n  bucket 11: 80%\n  bucket 12: 30%\n  bucket 11: 90%\n  bucket 12: 40%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Entering block accumulator loop for bucket 13:\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 15: 40%\n  bucket 16: 40%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 15: 60%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 16: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\nGetting block 24 of 30\n  bucket 23: 70%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 80%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 90%\n  bucket 24: 10%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 4: 30%\n  bucket 3: 20%\n  bucket 1: 60%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 1: 80%\n  bucket 4: 50%\n  bucket 2: 40%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 3: 40%\n  bucket 4: 70%\n  bucket 2: 50%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 4: 90%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 2: 90%\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  bucket 3: 90%\n  bucket 2: 100%\n  bucket 3: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\nGetting block 7 of 30\n  bucket 5: 20%\n  Reserving size (777) for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  bucket 5: 30%\n  bucket 5: 40%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 7: 70%\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  bucket 6: 70%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 7: 90%\n  bucket 6: 90%\nGetting block 8 of 30\n  bucket 7: 100%\n  Reserving size (777) for bucket 8\n  bucket 6: 100%\n  Sorting block of length 707 for bucket 7\n  Calculating Z arrays for bucket 8\n  (Using difference cover)\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  bucket 8: 40%\n  bucket 8: 50%\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 10%\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 11: 10%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 11: 60%\n  bucket 9: 100%\n  bucket 10: 80%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 10: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  bucket 15: 70%\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 16: 10%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\nGetting block 20 of 30\n  Calculating Z arrays for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 30%\n  bucket 20: 50%\n  bucket 19: 40%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 19: 60%\n  bucket 20: 80%\n  bucket 19: 70%\n  bucket 20: 90%\n  bucket 19: 80%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 22: 20%\n  bucket 21: 90%\n  bucket 22: 30%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  bucket 23: 30%\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 40%\n  bucket 24: 10%\n  bucket 23: 50%\n  bucket 24: 20%\n  bucket 23: 60%\n  bucket 24: 30%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 24: 40%\n  bucket 23: 90%\n  bucket 24: 50%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Entering block accumulator loop for bucket 25:\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 30%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 27: 50%\n  bucket 28: 20%\n  bucket 27: 60%\n  bucket 28: 30%\n  bucket 27: 70%\n  bucket 28: 40%\n  bucket 27: 80%\n  bucket 28: 50%\n  bucket 27: 90%\n  bucket 28: 60%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 30\n  Entering block accumulator loop for bucket 29:\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 10%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 30%\n  bucket 30: 50%\n  bucket 29: 40%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 29: 50%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 60%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2024-01-28T14:26:33.181387",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_ryv7rdje.sam v. /tmp/history_bam_converted_to_sam_gywyvbls.sam )\n--- local_file\n+++ history_data\n@@ -1,77 +1,78 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/233/tmp -O bam -o /galaxy/server/database/objects/9/3/8/dataset_93865672-8c38-4c40-a4f1-bd4489483fd5.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3\u003eAAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tAAABBBBFFFFFGGGGGGGGGGHHHGGGGGHHFFGHHHHFHHHFFHFHHHFHHHHHFGFHHHHHGHHHHGGGGHHHGHHFHHHHHHHGHHHHHHHGGHGGHHHHHHHHHHHGHHHHHHHHHHGHHHHGHGHHGGCGGGHHHH23FFHHHHGHGCGHHHHGGHFHGHBCCFFFFFFF/ECCDFDFEFFFFBDAFF?DADE??BFFFF=A-.AAAA.BFFFFED..BF/BFFEFFFFBFFFFFFFFFFBFB::\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHGGHHHHHHFHHHHHHHHHHHHHHHHHHHHGHHHHHGGGGCHHHHHHHHGHHHHHHHFHHHHHGHGHGHHGGGGGFGGHHGGGGGGGGGGGGEGGFGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFF-9@DDBFFFFFFFFBBFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC\u003e;\u003e=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2\u003eAFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@\u003eBD/9BFBBBBFDFFFF99D=?\u003eDDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n********\n*SNIP *\n********\n-M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D\u003eCFDDFFFB?AF?B;-@\u003e.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000\u003c00\u003cBFBB0\u003c00000\u003c99.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A\u003cGFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.\u003cADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/\u003e99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG\u003e0\u003c0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGACAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTA\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHCHHGDGGGGHGGHHHHHHHHGHGHHHGGGGGHFHHHHFHHHFFHHHHHFGCGGEHFHHFGGHFHGGGGGGHHFEEEAFEFFDFHGHHHHGGGGGGGHH0DGGGGCGHCC-\u003cCCBGHHHGEFFFFHH.C/\u003cAEGHHEG.EEA0GE0:FB0CFGF:A?FFBF??FG0B;FGGGGFGE?BBF;BFBFFFF/F/B?DDF.;.;:ADD.BA/BBFFB:BFE/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t77\t*\t0\t0\t*\t*\t0\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGCGGTGTCCACGCAATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\t1\u003e\u003e1AAFFFFFBGGFE1EEEEGGHGHHH2FGHHHFGFGHGCFGGGEFHGGEGGHHHHGHEFBFEGHHHGHHBEHHHHGHGFHHHGGGGHHEGGGGHHHGFHGHHHH1FHHG?G/AGF1GBFGEFFHF2FDD0FG\u003cGDHBFDGFFCGH//B//?0GFFGFGGHHHFHFB.=1FDFB?FGH.C/.-:::CH0;CAB@-.;0CGFFFGG--9.A@GB\u003e--99@=---AAABA-BF/B?A@F-9BBFF//BB/9/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATTGCGTGGACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tABBB\u003eFFFFFFFGGGGGGGGGGHHHHHGHHHHGHHGGHHGGHGGHHHGHHHHFHHGHHAFGGGHHHHHGHHHHFHFHHHHHECGGGHGHHHEFHFHGGGGGGGGFGFFGFFEFGEGHHHGHHGGDGGGHGFGGGGGGGGE@GCGGHHHGHHHHHGHHHHFHHGEGFFEGCE.ECCECEHCGGFFE/AABFFG0CFE0BFFF9CFGG.F/BBBFFGFGGGFFFFFFBFEDAEFFFFFBFFFFFFF0;FEBF:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTT\tAAABABBBBBBFGGGGGGGGGGHGHHGHGHHHHHHHHHGHHHGGHDGHHHGGGGHHHHHHHHHHHHHHHFHGHHHHGGHGGHHHFHHHHHCGHFFHHHHHHHHHHHHHGHGEFGAEEEEHHGHHGHGHHHHHHHGHHHHHHGHGHFFBC/BA?BGGGFFFFFFFFFFFFFFFC-@DDFFFFFFFEFAFFFFFFBFBFFFFFFFFFFFFFFFFBFF-\u003e@FFFFFFFFFFBFBFAD--.99;A?////:.9A.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t141\t*\t0\t0\t*\t*\t0\t0\tGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCAAGTGTAGTGCTCGGGGGGG\tBBCCBFFCCCCCGGGGGGGGGGGGGGHHHHHHGGGGGGHHFHGGGGGFGHGGGGGGHHHHHHHHHHFHHHHFHGFFHHGF?ECEFFFFFFHHHHHH?FHHHHHHHHHGFHHHHHHGGGFGHHHHFHHHHHHHHHHGGGFGFGCGGGGHHHHHHHHHHHGGFFHGHHHHHFFHFCGFHCCGHGHCGGHG?DGGGGGFBBFGFBFBBBGGGB0000;CD?DFFAFF9=--;...://;////////.------\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGGGCTGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCTTGAAGTAGGAACC\tAABABFFFFFFFF4GGGGEBGEFGHGGHGHGHHHGGHFBGFGGGGGHHEFHGEHFHFHEHHHHHGCGGGHFHHCFGHE@1EEEFFGB?EEEEHBGGGCHHGHHBEE@\u003eEAHHFAEBDGGGCEFF?CEGFFHHHHHFHHHFHGHCGCAHHF\u003c..C.D=0CD.GFHHHG.CAGHC:CHB0GGGFFB0:CFA.A-;9.;000CBBFFBFGA.9AA;A;EDDE.ABBFFFF9;BEFFF/BF//9/B//9:B//..\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBBFBBBBBFGGGGGGGGGGHFHHHHHHHHHHHHHHGHHHHGHFHHHGEEGGHHHGHHHHHHHHHHHHEHGHHGGGHGGHGHHHHHGHHHHGHHHHHHHHHHHHHHGHHHHHGEGCGHHHHHGHHHHHHHHHHHHHHGHFFGHGHHGGGDACDFFFFABFFFFFFFFFFD-BC?DA9.DFFBEA==B=?F.;ABBFBFEF-DAF/BFF9/FFFBB/9BFFFFFFF/BFBBFFFFFFF/9FEA?--B/;.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t77\t*\t0\t0\t*\t*\t0\t0\tCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGA\tAABBBBFFFFFFGGGFGGGGGGHHHGGHGGHHHHHHHHHHHGHHGGGGGHHHHHHHHHHHHHHHHHHGGCGDHHHHFGGHHHGGGGGFGGHGGGGHHGGGGHHHHHHGGGGGGHHGGGGDGGFGHGGFCDCHHHHGHHHHGHHFAGFGGEHFGEG.C\u003cEGCECEFCFFHBGHE:GHHGFF0FFFB0CFGGGGAGFFF0;;FFGGGFFGFFCDD.DEFBEDD?9FFFFFFFFFFFFFFF/B./FB///;BF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t141\t*\t0\t0\t*\t*\t0\t0\tGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATT\tBBBBAFFFFFFFGGGGGGGGGGFGHHHHHGHHHHHHHHHHHHCGHHHHHHHGHHHHHHDGHHGGAECHHGHHHHHHHGHHHGHGFHHHHGGHGGHHFHHHHHHFHHHHHHHHH2GHHHHGHGHHFHHGGFGGGHHGHHHHHFHHHHEFHHHHEFGFFHGEHCFGDFDFFFFFCFFFFFFFFFFFFFAFBFFDFFFFFFFFADCF?9?EFBFB9EF-A.;BFFFFFFFBFFFFFFFFFFFFBFFFFFFFFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t77\t*\t0\t0\t*\t*\t0\t0\tGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGCTACAGTTCACTTTAGCTACCTCCAAGTGTTATG\tAA?AAFFFFFFFGGGGGFBFGGGGGGH5GHFEDHHGGGGCGFBGH?AEEHFFEEGHGHHHHGGG?0EHGHHGGGGGC?GEE/EE?GHHHGBHFHHHHHHGHHGHHHGGGCG/A@\u003cFGGHHHHHHHFF/GFDGHHHHHHGFFFGHGGHABGHFHHHHHFHEGDGHGDDEEHHBEDDEGFGHGBFFBFFEGGGEFGFGFB000;F0F;FGGEGGEFFF;-.9//B///B9FFFFF/BFFB/:.BB//;FBFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t141\t*\t0\t0\t*\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTGGAT\tCDDDBFFFFFFFGGGGGGGGGGHHHHHGGHHHGHHHGHHGGGGEHHGGHHHHHHHHHHHHHHGHHGHHHHHGGHHHHHFHHHHGCDCGHHHHHHHHEHHHGHGHHHGFHGGHGGHHHHHHHHFHHHFHHHGHHHHHHHHHFGGHHHHGGGEGAFHHGHHGGHHHHGHFBGFHGHGHGHGGHGGF@DAFEFBECAB=A.0BFFFEDF=A9.@D.-AAFFFA-:-..:.9/0:;0..-..0000::BFB09::\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGA\tABBBBFFFFFFFGGGFGGGGGGHHHGHHGGHBGHGAGFFCAFGHGFFGHHGFHHHHHGGGGGHGHHHHHHHHE3BFFHHHGG0EDF@GHFFGGGHGGGGGGGGGGGGGHHGGEEFHGFHHDDG@DGGGHHGDGGGGGHGG?CF?HHGHHHGHGHHHFFHGGGHHHHGGCD.;0\u003cC;CGGGGEFF/.;0;FFFBF/0;0CFGFFB..9B/;0CBFFBBFFFFBAC?DED9;B9AD;.FFFB/B/;FBA/B//\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBCFCCCCCFGGGGGGGGGGHHHHHHHGHHHHHHHHGHHHHGHDGHHHGGGGHHHHHHHHHHHHHHHGHHHHHGGGEGGHHHHFHHHHHHHHHHHHHHHHHHHHHHGHHGHHGGGGGHHHHHHHHHHHGHHHFHHHHHHGHGHGHGGGGCGGFGGFFFFFFFFFFFFFBFFFFFFFFFFFFFFAFFFFEAEFFFFFFFFFFF9BFFBFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFADAB-/BF.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t77\t*\t0\t0\t*\t*\t0\t0\tCGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTCTGATCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAACAAACACACATCCAGA\t\u003eA33\u003eFFFFFF@FFFGGGGFGGD4EGGGGGHHGFFGHFGGHHHFEFHECFHHHEHGAGBCCGCCEGGHGHEGFBFHFHHHHGGGHFHGHEGGGFEGEGG??@DBGHGGC-@FFGHFHFHB-??DA-DD@9:BEBG@B?E?A.ABBFBFA??F.FF/BFFB/B9B/9;BF9FF9FFFFFFFFFFFFFF?BB?;9EE;-;DDB9//;B-B@;ABFFEFFFF/-.9A.;//9/BF./B/..9.9:...//////\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH\u003c1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n" ], "status": "failure", "test_index": 0, "time_seconds": 76.17912721633911, "tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 16  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/c/9/0/dataset_c9017d58-22d1-48e8-83c7-f730f9461a1e.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 4, merged 22; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 2 of 30Getting block 1 of 30Getting block 3 of 30  Reserving size (777) for bucket 2  Reserving size (777) for bucket 1  Reserving size (777) for bucket 3Getting block 4 of 30  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 3  Reserving size (777) for bucket 4  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 3:  Calculating Z arrays for bucket 4  bucket 1: 10%  Entering block accumulator loop for bucket 4:  bucket 2: 10%  bucket 1: 20%  bucket 3: 10%  bucket 1: 30%  bucket 2: 20%  bucket 3: 20%  bucket 1: 40%  bucket 4: 10%  bucket 2: 30%  bucket 1: 50%  bucket 3: 30%  bucket 1: 60%  bucket 4: 20%  bucket 2: 40%  bucket 1: 70%  bucket 3: 40%  bucket 1: 80%  bucket 2: 50%  bucket 4: 30%  bucket 1: 90%  bucket 3: 50%  bucket 2: 60%  bucket 1: 100%  bucket 4: 40%  Sorting block of length 689 for bucket 1  (Using difference cover)  bucket 3: 60%  bucket 2: 70%  bucket 4: 50%  bucket 3: 70%  bucket 2: 80%  bucket 4: 60%  Sorting block time: 00:00:00  bucket 3: 80%  bucket 2: 90%Returning block of 690 for bucket 1  bucket 4: 70%  bucket 3: 90%  bucket 2: 100%  bucket 4: 80%  Sorting block of length 445 for bucket 2  (Using difference cover)  bucket 3: 100%  bucket 4: 90%  Sorting block of length 629 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 499 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 446 for bucket 2  Sorting block time: 00:00:00Returning block of 500 for bucket 4  Sorting block time: 00:00:00Returning block of 630 for bucket 3Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%Getting block 6 of 30  Reserving size (777) for bucket 6Getting block 7 of 30  bucket 5: 20%  Calculating Z arrays for bucket 6  Reserving size (777) for bucket 7  Calculating Z arrays for bucket 7  bucket 5: 30%  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 7:  bucket 5: 40%  bucket 6: 10%  bucket 7: 10%  bucket 5: 50%  bucket 6: 20%  bucket 7: 20%  bucket 5: 60%  bucket 6: 30%  bucket 7: 30%  bucket 5: 70%  bucket 6: 40%  bucket 7: 40%  bucket 5: 80%  bucket 6: 50%  bucket 7: 50%  bucket 5: 90%  bucket 6: 60%  bucket 7: 60%  bucket 5: 100%  Sorting block of length 738 for bucket 5  (Using difference cover)  bucket 6: 70%  bucket 7: 70%  bucket 6: 80%  bucket 6: 90%  bucket 7: 80%  bucket 6: 100%  Sorting block of length 305 for bucket 6  (Using difference cover)  bucket 7: 90%  bucket 7: 100%  Sorting block of length 705 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 739 for bucket 5  Sorting block time: 00:00:00Returning block of 306 for bucket 6  Sorting block time: 00:00:00Returning block of 706 for bucket 7Getting block 8 of 30  Reserving size (777) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 772 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 773 for bucket 8Getting block 9 of 30  Reserving size (777) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%Getting block 10 of 30  Reserving size (777) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 20%  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 10: 20%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 546 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 247 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 9  Sorting block time: 00:00:00Returning block of 248 for bucket 10Getting block 11 of 30  Reserving size (777) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%Getting block 12 of 30  Reserving size (777) for bucket 12  bucket 11: 40%  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 50%  bucket 11: 60%  bucket 12: 10%  bucket 11: 70%  bucket 12: 20%  bucket 11: 80%  bucket 12: 30%  bucket 11: 90%  bucket 12: 40%  bucket 11: 100%  Sorting block of length 611 for bucket 11  (Using difference cover)  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  Sorting block time: 00:00:00Returning block of 612 for bucket 11  bucket 12: 90%  bucket 12: 100%  Sorting block of length 485 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 486 for bucket 12Getting block 13 of 30  Reserving size (777) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 30  Entering block accumulator loop for bucket 13:  Reserving size (777) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 597 for bucket 13  (Using difference cover)  bucket 14: 90%  bucket 14: 100%  Sorting block of length 689 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 598 for bucket 13  Sorting block time: 00:00:00Returning block of 690 for bucket 14Getting block 15 of 30  Reserving size (777) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 30  Reserving size (777) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 15:  Entering block accumulator loop for bucket 16:  bucket 15: 10%  bucket 16: 10%  bucket 15: 20%  bucket 16: 20%  bucket 15: 30%  bucket 16: 30%  bucket 15: 40%  bucket 16: 40%  bucket 15: 50%  bucket 16: 50%  bucket 15: 60%  bucket 16: 60%  bucket 15: 70%  bucket 16: 70%  bucket 15: 80%  bucket 15: 90%  bucket 16: 80%  bucket 15: 100%  Sorting block of length 543 for bucket 15  (Using difference cover)  bucket 16: 90%  bucket 16: 100%  Sorting block of length 723 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 15  Sorting block time: 00:00:00Returning block of 724 for bucket 16Getting block 17 of 30  Reserving size (777) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:Getting block 18 of 30  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 10%  Entering block accumulator loop for bucket 18:  bucket 17: 20%  bucket 18: 10%  bucket 17: 30%  bucket 18: 20%  bucket 17: 40%  bucket 18: 30%  bucket 17: 50%  bucket 18: 40%  bucket 17: 60%  bucket 18: 50%  bucket 17: 70%  bucket 18: 60%  bucket 17: 80%  bucket 18: 70%  bucket 17: 90%  bucket 18: 80%  bucket 17: 100%  Sorting block of length 578 for bucket 17  (Using difference cover)  bucket 18: 90%  bucket 18: 100%  Sorting block of length 356 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 579 for bucket 17  Sorting block time: 00:00:00Returning block of 357 for bucket 18Getting block 19 of 30  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%Getting block 20 of 30  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 19: 20%  bucket 20: 10%  bucket 19: 30%  bucket 20: 20%  bucket 19: 40%  bucket 20: 30%  bucket 19: 50%  bucket 20: 40%  bucket 19: 60%  bucket 20: 50%  bucket 19: 70%  bucket 20: 60%  bucket 20: 70%  bucket 19: 80%  bucket 20: 80%  bucket 19: 90%  bucket 20: 90%  bucket 19: 100%  Sorting block of length 731 for bucket 19  (Using difference cover)  bucket 20: 100%  Sorting block of length 268 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 269 for bucket 20  Sorting block time: 00:00:00Returning block of 732 for bucket 19Getting block 21 of 30  Reserving size (777) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%Getting block 22 of 30  bucket 21: 20%  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 21: 30%  bucket 22: 10%  bucket 21: 40%  bucket 22: 20%  bucket 21: 50%  bucket 22: 30%  bucket 21: 60%  bucket 22: 40%  bucket 21: 70%  bucket 22: 50%  bucket 21: 80%  bucket 22: 60%  bucket 21: 90%  bucket 22: 70%  bucket 21: 100%  Sorting block of length 21 for bucket 21  (Using difference cover)  bucket 22: 80%  bucket 22: 90%  Sorting block time: 00:00:00Returning block of 22 for bucket 21  bucket 22: 100%  Sorting block of length 952 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 953 for bucket 22Getting block 23 of 30  Reserving size (777) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%Getting block 24 of 30  bucket 23: 70%  Reserving size (777) for bucket 24  Calculating Z arrays for bucket 24  bucket 23: 80%  Entering block accumulator loop for bucket 24:  bucket 23: 90%  bucket 24: 10%  bucket 23: 100%  Sorting block of length 763 for bucket 23  (Using difference cover)  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  Sorting block time: 00:00:00Returning block of 764 for bucket 23  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 471 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 472 for bucket 24Getting block 25 of 30  Reserving size (777) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 415 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 416 for bucket 25Getting block 26 of 30  Reserving size (777) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 643 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 644 for bucket 26Getting block 27 of 30  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:Getting block 28 of 30  Reserving size (777) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 10%  Entering block accumulator loop for bucket 28:  bucket 27: 20%  bucket 28: 10%  bucket 27: 30%  bucket 28: 20%  bucket 27: 40%  bucket 28: 30%  bucket 28: 40%  bucket 27: 50%  bucket 28: 50%  bucket 27: 60%  bucket 28: 60%  bucket 27: 70%  bucket 28: 70%  bucket 27: 80%  bucket 28: 80%  bucket 27: 90%  bucket 28: 90%  bucket 27: 100%  Sorting block of length 592 for bucket 27  (Using difference cover)  bucket 28: 100%  Sorting block of length 684 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 593 for bucket 27  Sorting block time: 00:00:00Returning block of 685 for bucket 28Getting block 29 of 30  Reserving size (777) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 240 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 241 for bucket 29Getting block 30 of 30  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 602 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 603 for bucket 30Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:01Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 6, merged 21; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1Getting block 2 of 30Getting block 3 of 30  Calculating Z arrays for bucket 1  Reserving size (777) for bucket 2  Reserving size (777) for bucket 3Getting block 4 of 30  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 3  Reserving size (777) for bucket 4  Calculating Z arrays for bucket 4  bucket 1: 10%  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 1: 20%  bucket 1: 30%  bucket 4: 10%  bucket 2: 10%  bucket 3: 10%  bucket 1: 40%  bucket 4: 20%  bucket 1: 50%  bucket 2: 20%  bucket 4: 30%  bucket 3: 20%  bucket 1: 60%  bucket 4: 40%  bucket 1: 70%  bucket 2: 30%  bucket 3: 30%  bucket 1: 80%  bucket 4: 50%  bucket 2: 40%  bucket 4: 60%  bucket 1: 90%  bucket 3: 40%  bucket 4: 70%  bucket 2: 50%  bucket 1: 100%  Sorting block of length 484 for bucket 1  (Using difference cover)  bucket 4: 80%  bucket 3: 50%  bucket 2: 60%  bucket 4: 90%  bucket 3: 60%  bucket 2: 70%  bucket 4: 100%  Sorting block of length 431 for bucket 4  (Using difference cover)  bucket 3: 70%  bucket 2: 80%  bucket 3: 80%  bucket 2: 90%  Sorting block time: 00:00:00Returning block of 485 for bucket 1  bucket 3: 90%  bucket 2: 100%  bucket 3: 100%  Sorting block of length 774 for bucket 2  (Using difference cover)  Sorting block of length 434 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 435 for bucket 3  Sorting block time: 00:00:00Returning block of 775 for bucket 2  Sorting block time: 00:00:00Returning block of 432 for bucket 4Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%Getting block 6 of 30Getting block 7 of 30  bucket 5: 20%  Reserving size (777) for bucket 6  Reserving size (777) for bucket 7  Calculating Z arrays for bucket 6  Calculating Z arrays for bucket 7  bucket 5: 30%  bucket 5: 40%  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 7:  bucket 5: 50%  bucket 5: 60%  bucket 6: 10%  bucket 7: 10%  bucket 5: 70%  bucket 5: 80%  bucket 6: 20%  bucket 7: 20%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 776 for bucket 5  (Using difference cover)  bucket 6: 30%  bucket 7: 30%  bucket 6: 40%  bucket 7: 40%  bucket 6: 50%  bucket 7: 50%  bucket 6: 60%  bucket 7: 60%  bucket 7: 70%  Sorting block time: 00:00:00Returning block of 777 for bucket 5  bucket 6: 70%  bucket 7: 80%  bucket 6: 80%  bucket 7: 90%  bucket 6: 90%Getting block 8 of 30  bucket 7: 100%  Reserving size (777) for bucket 8  bucket 6: 100%  Sorting block of length 707 for bucket 7  Calculating Z arrays for bucket 8  (Using difference cover)  Sorting block of length 179 for bucket 6  (Using difference cover)  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  Sorting block time: 00:00:00Returning block of 180 for bucket 6  bucket 8: 40%  bucket 8: 50%  Sorting block time: 00:00:00Returning block of 708 for bucket 7  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 313 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 314 for bucket 8Getting block 9 of 30  Reserving size (777) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 30  Reserving size (777) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%Getting block 11 of 30  Reserving size (777) for bucket 11  Calculating Z arrays for bucket 11  bucket 10: 10%  bucket 9: 20%  Entering block accumulator loop for bucket 11:  bucket 9: 30%  bucket 10: 20%  bucket 11: 10%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 11: 20%  bucket 10: 40%  bucket 9: 60%  bucket 11: 30%  bucket 10: 50%  bucket 9: 70%  bucket 11: 40%  bucket 10: 60%  bucket 9: 80%  bucket 11: 50%  bucket 10: 70%  bucket 9: 90%  bucket 11: 60%  bucket 9: 100%  bucket 10: 80%  Sorting block of length 535 for bucket 9  (Using difference cover)  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 10: 90%  bucket 11: 100%  Sorting block of length 423 for bucket 11  (Using difference cover)  bucket 10: 100%  Sorting block of length 680 for bucket 10  Sorting block time: 00:00:00  (Using difference cover)Returning block of 536 for bucket 9  Sorting block time: 00:00:00Returning block of 424 for bucket 11  Sorting block time: 00:00:00Returning block of 681 for bucket 10Getting block 12 of 30  Reserving size (777) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 371 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 372 for bucket 12Getting block 13 of 30  Reserving size (777) for bucket 13Getting block 14 of 30  Calculating Z arrays for bucket 13  Reserving size (777) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  Sorting block of length 595 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 708 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 596 for bucket 13  Sorting block time: 00:00:00Returning block of 709 for bucket 14Getting block 15 of 30  Reserving size (777) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%Getting block 16 of 30  Reserving size (777) for bucket 16  bucket 15: 70%  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 15: 80%  bucket 15: 90%  bucket 16: 10%  bucket 15: 100%  Sorting block of length 629 for bucket 15  (Using difference cover)  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  Sorting block time: 00:00:00Returning block of 630 for bucket 15  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 750 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 751 for bucket 16Getting block 17 of 30  Reserving size (777) for bucket 17Getting block 18 of 30  Calculating Z arrays for bucket 17  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 18:  bucket 17: 10%  bucket 18: 10%  bucket 17: 20%  bucket 18: 20%  bucket 17: 30%  bucket 18: 30%  bucket 17: 40%  bucket 18: 40%  bucket 17: 50%  bucket 18: 50%  bucket 17: 60%  bucket 18: 60%  bucket 17: 70%  bucket 18: 70%  bucket 17: 80%  bucket 18: 80%  bucket 17: 90%  bucket 18: 90%  bucket 17: 100%  Sorting block of length 606 for bucket 17  (Using difference cover)  bucket 18: 100%  Sorting block of length 722 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 607 for bucket 17  Sorting block time: 00:00:00Returning block of 723 for bucket 18Getting block 19 of 30  Reserving size (777) for bucket 19Getting block 20 of 30  Calculating Z arrays for bucket 19  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 19:  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 19: 10%  bucket 20: 20%  bucket 19: 20%  bucket 20: 30%  bucket 20: 40%  bucket 19: 30%  bucket 20: 50%  bucket 19: 40%  bucket 20: 60%  bucket 19: 50%  bucket 20: 70%  bucket 19: 60%  bucket 20: 80%  bucket 19: 70%  bucket 20: 90%  bucket 19: 80%  bucket 20: 100%  Sorting block of length 519 for bucket 20  (Using difference cover)  bucket 19: 90%  bucket 19: 100%  Sorting block of length 418 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 520 for bucket 20  Sorting block time: 00:00:00Returning block of 419 for bucket 19Getting block 21 of 30  Reserving size (777) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:Getting block 22 of 30  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  bucket 21: 10%  Entering block accumulator loop for bucket 22:  bucket 21: 20%  bucket 22: 10%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 22: 20%  bucket 21: 90%  bucket 22: 30%  bucket 21: 100%  Sorting block of length 422 for bucket 21  (Using difference cover)  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  Sorting block time: 00:00:00Returning block of 423 for bucket 21  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 493 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 494 for bucket 22Getting block 23 of 30  Reserving size (777) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%Getting block 24 of 30  Reserving size (777) for bucket 24  bucket 23: 30%  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 23: 40%  bucket 24: 10%  bucket 23: 50%  bucket 24: 20%  bucket 23: 60%  bucket 24: 30%  bucket 23: 70%  bucket 23: 80%  bucket 24: 40%  bucket 23: 90%  bucket 24: 50%  bucket 23: 100%  Sorting block of length 510 for bucket 23  (Using difference cover)  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  Sorting block time: 00:00:00Returning block of 511 for bucket 23  bucket 24: 100%  Sorting block of length 732 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 733 for bucket 24Getting block 25 of 30  Reserving size (777) for bucket 25  Calculating Z arrays for bucket 25Getting block 26 of 30  Entering block accumulator loop for bucket 25:  Reserving size (777) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 25: 10%  bucket 26: 10%  bucket 25: 20%  bucket 26: 20%  bucket 25: 30%  bucket 25: 40%  bucket 26: 30%  bucket 25: 50%  bucket 26: 40%  bucket 25: 60%  bucket 26: 50%  bucket 25: 70%  bucket 26: 60%  bucket 25: 80%  bucket 26: 70%  bucket 25: 90%  bucket 26: 80%  bucket 25: 100%  Sorting block of length 457 for bucket 25  (Using difference cover)  bucket 26: 90%  bucket 26: 100%  Sorting block of length 647 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 458 for bucket 25  Sorting block time: 00:00:00Returning block of 648 for bucket 26Getting block 27 of 30  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%Getting block 28 of 30  Reserving size (777) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 30%  Entering block accumulator loop for bucket 28:  bucket 27: 40%  bucket 28: 10%  bucket 27: 50%  bucket 28: 20%  bucket 27: 60%  bucket 28: 30%  bucket 27: 70%  bucket 28: 40%  bucket 27: 80%  bucket 28: 50%  bucket 27: 90%  bucket 28: 60%  bucket 27: 100%  Sorting block of length 334 for bucket 27  (Using difference cover)  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  Sorting block time: 00:00:00Returning block of 335 for bucket 27  bucket 28: 100%  Sorting block of length 631 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 632 for bucket 28Getting block 29 of 30  Reserving size (777) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 30  Entering block accumulator loop for bucket 29:  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 29: 10%  bucket 30: 10%  bucket 30: 20%  bucket 29: 20%  bucket 30: 30%  bucket 30: 40%  bucket 29: 30%  bucket 30: 50%  bucket 29: 40%  bucket 30: 60%  bucket 30: 70%  bucket 29: 50%  bucket 30: 80%  bucket 30: 90%  bucket 29: 60%  bucket 30: 100%  Sorting block of length 677 for bucket 30  (Using difference cover)  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 582 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 678 for bucket 30  Sorting block time: 00:00:00Returning block of 583 for bucket 29Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #2)" name="1" time="67.5483820438385">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "d0c52a74e5a7937f",   "src": "hdca"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired_collection",  "library|unaligned_file": true,  "reference_genome|own_file": {   "id": "d0ba7b1c4cb015b6",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/3/1/b/dataset_31bb6022-f4ea-4e9e-99d5-b0ce52f4fd9d.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/3/1/b/dataset_31bb6022-f4ea-4e9e-99d5-b0ce52f4fd9d.dat\u0027 genome.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/6/7/f/dataset_67fe35b8-6afa-4987-94f6-7dc55fa9728c.dat\u0027 input_f.fastq \u0026\u0026  ln -s \u0027/galaxy/server/database/objects/1/0/b/dataset_10bb0c69-7e63-4f77-85a9-6262148865bf.dat\u0027 input_r.fastq \u0026\u0026    bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027 --un-conc \u0027/galaxy/server/database/objects/3/f/6/dataset_3f6a7d45-a6d2-4f05-b78a-6fbfcd3a7cc8.dat\u0027                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/8/f/9/dataset_8f9ee5cc-e7a2-498b-be8a-357d0293d03f.dat\u0027  \u0026\u0026 mv \u0027/galaxy/server/database/objects/3/f/6/dataset_3f6a7d45-a6d2-4f05-b78a-6fbfcd3a7cc8.1.dat\u0027 \u0027/galaxy/server/database/objects/3/f/6/dataset_3f6a7d45-a6d2-4f05-b78a-6fbfcd3a7cc8.dat\u0027 \u0026\u0026 mv \u0027/galaxy/server/database/objects/3/f/6/dataset_3f6a7d45-a6d2-4f05-b78a-6fbfcd3a7cc8.2.dat\u0027 \u0027/galaxy/server/database/objects/e/3/5/dataset_e3559d91-65f5-46d7-b985-ac086c163757.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2024-01-28T14:26:51.261645",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-n5smj",  "galaxy_version": "21.09",  "history_id": "cbf056288c649de3",  "id": "04d877519b052b99",  "inputs": {   "input_11": {    "id": "5ce04ee224cdfbf0",    "src": "hda",    "uuid": "67fe35b8-6afa-4987-94f6-7dc55fa9728c"   },   "input_12": {    "id": "888b8143216f47d2",    "src": "hda",    "uuid": "10bb0c69-7e63-4f77-85a9-6262148865bf"   },   "own_file": {    "id": "d0ba7b1c4cb015b6",    "src": "hda",    "uuid": "31bb6022-f4ea-4e9e-99d5-b0ce52f4fd9d"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1706452050.0000000",    "title": "Job End Time",    "value": "2024-01-28 14:27:30"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1706452049.0000000",    "title": "Job Start Time",    "value": "2024-01-28 14:27:29"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "12000.0000000",    "title": "Memory Allocated (MB)",    "value": "12000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/1/b/dataset_31bb6022-f4ea-4e9e-99d5-b0ce52f4fd9d.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 20%\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 7: 10%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 7: 20%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 6: 100%\n  bucket 7: 80%\n  Sorting block time: 00:00:00\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\n  bucket 7: 90%\nReturning block of 306 for bucket 6\nGetting block 8 of 30\n  bucket 7: 100%\n  Reserving size (777) for bucket 8\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  Sorting block time: 00:00:00\n  bucket 8: 30%\nReturning block of 706 for bucket 7\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  bucket 10: 80%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 20%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  bucket 12: 80%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 30%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 40%\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  bucket 14: 90%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 16: 40%\n  bucket 15: 60%\n  bucket 16: 50%\n  bucket 15: 70%\n  bucket 16: 60%\n  bucket 15: 80%\n  bucket 16: 70%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  bucket 19: 20%\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  bucket 23: 10%\n  Calculating Z arrays for bucket 24\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 30%\n  bucket 24: 10%\n  bucket 23: 40%\n  bucket 24: 20%\n  bucket 23: 50%\n  bucket 24: 30%\n  bucket 23: 60%\n  bucket 24: 40%\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\nGetting block 28 of 30\n  bucket 27: 20%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 20%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 30%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 40%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 3: 60%\n  bucket 1: 70%\n  bucket 4: 30%\n  bucket 2: 50%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 4: 40%\n  bucket 2: 60%\n  bucket 3: 80%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  bucket 3: 90%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 4: 50%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  bucket 5: 90%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  bucket 7: 10%\n  (Using difference cover)\n  bucket 6: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 6: 20%\n  bucket 7: 40%\n  bucket 6: 30%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 6: 40%\n  bucket 7: 70%\n  bucket 6: 50%\n  bucket 7: 80%\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  bucket 7: 90%\n  bucket 6: 60%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  bucket 9: 10%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\nGetting block 11 of 30\n  bucket 10: 10%\n  Reserving size (777) for bucket 11\n  bucket 9: 40%\n  Calculating Z arrays for bucket 11\n  bucket 10: 20%\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 60%\n  bucket 10: 30%\n  bucket 11: 10%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 11: 20%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  bucket 11: 30%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 11: 40%\n  bucket 10: 80%\n  bucket 11: 50%\n  bucket 10: 90%\n  bucket 11: 60%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 30\n  bucket 13: 10%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 14: 10%\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 13: 40%\n  bucket 14: 20%\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 15: 30%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 15: 40%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\nGetting block 22 of 30\n  Calculating Z arrays for bucket 21\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\nGetting block 24 of 30\n  Calculating Z arrays for bucket 23\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 23: 10%\n  bucket 24: 20%\n  bucket 23: 20%\n  bucket 24: 30%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 24: 40%\n  bucket 23: 50%\n  bucket 24: 50%\n  bucket 23: 60%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 70%\n  bucket 24: 80%\n  bucket 23: 80%\n  bucket 24: 90%\n  bucket 23: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 26: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  bucket 28: 10%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 29: 80%\n  bucket 28: 100%\n  bucket 29: 90%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "44dcca48ce108fb6",    "src": "hda",    "uuid": "8f9ee5cc-e7a2-498b-be8a-357d0293d03f"   },   "output_unaligned_reads_l": {    "id": "349e672221f2e491",    "src": "hda",    "uuid": "3f6a7d45-a6d2-4f05-b78a-6fbfcd3a7cc8"   },   "output_unaligned_reads_r": {    "id": "88f5f1b9e0b33bd9",    "src": "hda",    "uuid": "e3559d91-65f5-46d7-b985-ac086c163757"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 2, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 15, \"src\": \"hdca\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_collection\", \"unaligned_file\": \"true\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 326, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/1/b/dataset_31bb6022-f4ea-4e9e-99d5-b0ce52f4fd9d.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 20%\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 7: 10%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 7: 20%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 6: 100%\n  bucket 7: 80%\n  Sorting block time: 00:00:00\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\n  bucket 7: 90%\nReturning block of 306 for bucket 6\nGetting block 8 of 30\n  bucket 7: 100%\n  Reserving size (777) for bucket 8\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  Sorting block time: 00:00:00\n  bucket 8: 30%\nReturning block of 706 for bucket 7\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  bucket 10: 80%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 20%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  bucket 12: 80%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 30%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 40%\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  bucket 14: 90%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 16: 40%\n  bucket 15: 60%\n  bucket 16: 50%\n  bucket 15: 70%\n  bucket 16: 60%\n  bucket 15: 80%\n  bucket 16: 70%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  bucket 19: 20%\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  bucket 23: 10%\n  Calculating Z arrays for bucket 24\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 30%\n  bucket 24: 10%\n  bucket 23: 40%\n  bucket 24: 20%\n  bucket 23: 50%\n  bucket 24: 30%\n  bucket 23: 60%\n  bucket 24: 40%\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\nGetting block 28 of 30\n  bucket 27: 20%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 20%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 30%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 40%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 3: 60%\n  bucket 1: 70%\n  bucket 4: 30%\n  bucket 2: 50%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 4: 40%\n  bucket 2: 60%\n  bucket 3: 80%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 1: 100%\n  bucket 3: 90%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 4: 50%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  bucket 5: 90%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  bucket 7: 10%\n  (Using difference cover)\n  bucket 6: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 6: 20%\n  bucket 7: 40%\n  bucket 6: 30%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 6: 40%\n  bucket 7: 70%\n  bucket 6: 50%\n  bucket 7: 80%\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  bucket 7: 90%\n  bucket 6: 60%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  bucket 9: 10%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\nGetting block 11 of 30\n  bucket 10: 10%\n  Reserving size (777) for bucket 11\n  bucket 9: 40%\n  Calculating Z arrays for bucket 11\n  bucket 10: 20%\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 60%\n  bucket 10: 30%\n  bucket 11: 10%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 11: 20%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  bucket 11: 30%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 11: 40%\n  bucket 10: 80%\n  bucket 11: 50%\n  bucket 10: 90%\n  bucket 11: 60%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 30\n  bucket 13: 10%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 14: 10%\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 13: 40%\n  bucket 14: 20%\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 15: 30%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 15: 40%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\nGetting block 22 of 30\n  Calculating Z arrays for bucket 21\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\nGetting block 24 of 30\n  Calculating Z arrays for bucket 23\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 23: 10%\n  bucket 24: 20%\n  bucket 23: 20%\n  bucket 24: 30%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 24: 40%\n  bucket 23: 50%\n  bucket 24: 50%\n  bucket 23: 60%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 70%\n  bucket 24: 80%\n  bucket 23: 80%\n  bucket 24: 90%\n  bucket 23: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 26: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  bucket 28: 10%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 29: 80%\n  bucket 28: 100%\n  bucket 29: 90%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2024-01-28T14:27:40.834287",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_e_usb73l.sam v. /tmp/history_bam_converted_to_sam_yuv6yz82.sam )\n--- local_file\n+++ history_data\n@@ -1,77 +1,78 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome --passthrough -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/237/tmp -O bam -o /galaxy/server/database/objects/8/f/9/dataset_8f9ee5cc-e7a2-498b-be8a-357d0293d03f.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3\u003eAAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tAAABBBBFFFFFGGGGGGGGGGHHHGGGGGHHFFGHHHHFHHHFFHFHHHFHHHHHFGFHHHHHGHHHHGGGGHHHGHHFHHHHHHHGHHHHHHHGGHGGHHHHHHHHHHHGHHHHHHHHHHGHHHHGHGHHGGCGGGHHHH23FFHHHHGHGCGHHHHGGHFHGHBCCFFFFFFF/ECCDFDFEFFFFBDAFF?DADE??BFFFF=A-.AAAA.BFFFFED..BF/BFFEFFFFBFFFFFFFFFFBFB::\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHGGHHHHHHFHHHHHHHHHHHHHHHHHHHHGHHHHHGGGGCHHHHHHHHGHHHHHHHFHHHHHGHGHGHHGGGGGFGGHHGGGGGGGGGGGGEGGFGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFF-9@DDBFFFFFFFFBBFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC\u003e;\u003e=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2\u003eAFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@\u003eBD/9BFBBBBFDFFFF99D=?\u003eDDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n********\n*SNIP *\n********\n-M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D\u003eCFDDFFFB?AF?B;-@\u003e.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000\u003c00\u003cBFBB0\u003c00000\u003c99.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A\u003cGFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.\u003cADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/\u003e99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG\u003e0\u003c0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGACAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTA\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHCHHGDGGGGHGGHHHHHHHHGHGHHHGGGGGHFHHHHFHHHFFHHHHHFGCGGEHFHHFGGHFHGGGGGGHHFEEEAFEFFDFHGHHHHGGGGGGGHH0DGGGGCGHCC-\u003cCCBGHHHGEFFFFHH.C/\u003cAEGHHEG.EEA0GE0:FB0CFGF:A?FFBF??FG0B;FGGGGFGE?BBF;BFBFFFF/F/B?DDF.;.;:ADD.BA/BBFFB:BFE/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t77\t*\t0\t0\t*\t*\t0\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGCGGTGTCCACGCAATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\t1\u003e\u003e1AAFFFFFBGGFE1EEEEGGHGHHH2FGHHHFGFGHGCFGGGEFHGGEGGHHHHGHEFBFEGHHHGHHBEHHHHGHGFHHHGGGGHHEGGGGHHHGFHGHHHH1FHHG?G/AGF1GBFGEFFHF2FDD0FG\u003cGDHBFDGFFCGH//B//?0GFFGFGGHHHFHFB.=1FDFB?FGH.C/.-:::CH0;CAB@-.;0CGFFFGG--9.A@GB\u003e--99@=---AAABA-BF/B?A@F-9BBFF//BB/9/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATTGCGTGGACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tABBB\u003eFFFFFFFGGGGGGGGGGHHHHHGHHHHGHHGGHHGGHGGHHHGHHHHFHHGHHAFGGGHHHHHGHHHHFHFHHHHHECGGGHGHHHEFHFHGGGGGGGGFGFFGFFEFGEGHHHGHHGGDGGGHGFGGGGGGGGE@GCGGHHHGHHHHHGHHHHFHHGEGFFEGCE.ECCECEHCGGFFE/AABFFG0CFE0BFFF9CFGG.F/BBBFFGFGGGFFFFFFBFEDAEFFFFFBFFFFFFF0;FEBF:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTT\tAAABABBBBBBFGGGGGGGGGGHGHHGHGHHHHHHHHHGHHHGGHDGHHHGGGGHHHHHHHHHHHHHHHFHGHHHHGGHGGHHHFHHHHHCGHFFHHHHHHHHHHHHHGHGEFGAEEEEHHGHHGHGHHHHHHHGHHHHHHGHGHFFBC/BA?BGGGFFFFFFFFFFFFFFFC-@DDFFFFFFFEFAFFFFFFBFBFFFFFFFFFFFFFFFFBFF-\u003e@FFFFFFFFFFBFBFAD--.99;A?////:.9A.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t141\t*\t0\t0\t*\t*\t0\t0\tGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCAAGTGTAGTGCTCGGGGGGG\tBBCCBFFCCCCCGGGGGGGGGGGGGGHHHHHHGGGGGGHHFHGGGGGFGHGGGGGGHHHHHHHHHHFHHHHFHGFFHHGF?ECEFFFFFFHHHHHH?FHHHHHHHHHGFHHHHHHGGGFGHHHHFHHHHHHHHHHGGGFGFGCGGGGHHHHHHHHHHHGGFFHGHHHHHFFHFCGFHCCGHGHCGGHG?DGGGGGFBBFGFBFBBBGGGB0000;CD?DFFAFF9=--;...://;////////.------\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGGGCTGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCTTGAAGTAGGAACC\tAABABFFFFFFFF4GGGGEBGEFGHGGHGHGHHHGGHFBGFGGGGGHHEFHGEHFHFHEHHHHHGCGGGHFHHCFGHE@1EEEFFGB?EEEEHBGGGCHHGHHBEE@\u003eEAHHFAEBDGGGCEFF?CEGFFHHHHHFHHHFHGHCGCAHHF\u003c..C.D=0CD.GFHHHG.CAGHC:CHB0GGGFFB0:CFA.A-;9.;000CBBFFBFGA.9AA;A;EDDE.ABBFFFF9;BEFFF/BF//9/B//9:B//..\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBBFBBBBBFGGGGGGGGGGHFHHHHHHHHHHHHHHGHHHHGHFHHHGEEGGHHHGHHHHHHHHHHHHEHGHHGGGHGGHGHHHHHGHHHHGHHHHHHHHHHHHHHGHHHHHGEGCGHHHHHGHHHHHHHHHHHHHHGHFFGHGHHGGGDACDFFFFABFFFFFFFFFFD-BC?DA9.DFFBEA==B=?F.;ABBFBFEF-DAF/BFF9/FFFBB/9BFFFFFFF/BFBBFFFFFFF/9FEA?--B/;.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t77\t*\t0\t0\t*\t*\t0\t0\tCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGA\tAABBBBFFFFFFGGGFGGGGGGHHHGGHGGHHHHHHHHHHHGHHGGGGGHHHHHHHHHHHHHHHHHHGGCGDHHHHFGGHHHGGGGGFGGHGGGGHHGGGGHHHHHHGGGGGGHHGGGGDGGFGHGGFCDCHHHHGHHHHGHHFAGFGGEHFGEG.C\u003cEGCECEFCFFHBGHE:GHHGFF0FFFB0CFGGGGAGFFF0;;FFGGGFFGFFCDD.DEFBEDD?9FFFFFFFFFFFFFFF/B./FB///;BF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t141\t*\t0\t0\t*\t*\t0\t0\tGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATT\tBBBBAFFFFFFFGGGGGGGGGGFGHHHHHGHHHHHHHHHHHHCGHHHHHHHGHHHHHHDGHHGGAECHHGHHHHHHHGHHHGHGFHHHHGGHGGHHFHHHHHHFHHHHHHHHH2GHHHHGHGHHFHHGGFGGGHHGHHHHHFHHHHEFHHHHEFGFFHGEHCFGDFDFFFFFCFFFFFFFFFFFFFAFBFFDFFFFFFFFADCF?9?EFBFB9EF-A.;BFFFFFFFBFFFFFFFFFFFFBFFFFFFFFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t77\t*\t0\t0\t*\t*\t0\t0\tGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGCTACAGTTCACTTTAGCTACCTCCAAGTGTTATG\tAA?AAFFFFFFFGGGGGFBFGGGGGGH5GHFEDHHGGGGCGFBGH?AEEHFFEEGHGHHHHGGG?0EHGHHGGGGGC?GEE/EE?GHHHGBHFHHHHHHGHHGHHHGGGCG/A@\u003cFGGHHHHHHHFF/GFDGHHHHHHGFFFGHGGHABGHFHHHHHFHEGDGHGDDEEHHBEDDEGFGHGBFFBFFEGGGEFGFGFB000;F0F;FGGEGGEFFF;-.9//B///B9FFFFF/BFFB/:.BB//;FBFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t141\t*\t0\t0\t*\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTGGAT\tCDDDBFFFFFFFGGGGGGGGGGHHHHHGGHHHGHHHGHHGGGGEHHGGHHHHHHHHHHHHHHGHHGHHHHHGGHHHHHFHHHHGCDCGHHHHHHHHEHHHGHGHHHGFHGGHGGHHHHHHHHFHHHFHHHGHHHHHHHHHFGGHHHHGGGEGAFHHGHHGGHHHHGHFBGFHGHGHGHGGHGGF@DAFEFBECAB=A.0BFFFEDF=A9.@D.-AAFFFA-:-..:.9/0:;0..-..0000::BFB09::\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGA\tABBBBFFFFFFFGGGFGGGGGGHHHGHHGGHBGHGAGFFCAFGHGFFGHHGFHHHHHGGGGGHGHHHHHHHHE3BFFHHHGG0EDF@GHFFGGGHGGGGGGGGGGGGGHHGGEEFHGFHHDDG@DGGGHHGDGGGGGHGG?CF?HHGHHHGHGHHHFFHGGGHHHHGGCD.;0\u003cC;CGGGGEFF/.;0;FFFBF/0;0CFGFFB..9B/;0CBFFBBFFFFBAC?DED9;B9AD;.FFFB/B/;FBA/B//\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBCFCCCCCFGGGGGGGGGGHHHHHHHGHHHHHHHHGHHHHGHDGHHHGGGGHHHHHHHHHHHHHHHGHHHHHGGGEGGHHHHFHHHHHHHHHHHHHHHHHHHHHHGHHGHHGGGGGHHHHHHHHHHHGHHHFHHHHHHGHGHGHGGGGCGGFGGFFFFFFFFFFFFFBFFFFFFFFFFFFFFAFFFFEAEFFFFFFFFFFF9BFFBFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFADAB-/BF.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t77\t*\t0\t0\t*\t*\t0\t0\tCGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTCTGATCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAACAAACACACATCCAGA\t\u003eA33\u003eFFFFFF@FFFGGGGFGGD4EGGGGGHHGFFGHFGGHHHFEFHECFHHHEHGAGBCCGCCEGGHGHEGFBFHFHHHHGGGHFHGHEGGGFEGEGG??@DBGHGGC-@FFGHFHFHB-??DA-DD@9:BEBG@B?E?A.ABBFBFA??F.FF/BFFB/B9B/9;BF9FF9FFFFFFFFFFFFFF?BB?;9EE;-;DDB9//;B-B@;ABFFEFFFF/-.9A.;//9/BF./B/..9.9:...//////\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH\u003c1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n" ], "status": "failure", "test_index": 1, "time_seconds": 67.5483820438385, "tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 16  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/3/1/b/dataset_31bb6022-f4ea-4e9e-99d5-b0ce52f4fd9d.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 4, merged 22; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 1:Getting block 2 of 30Getting block 3 of 30Getting block 4 of 30  Reserving size (777) for bucket 2  Reserving size (777) for bucket 3  Reserving size (777) for bucket 4  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  bucket 1: 10%  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 1: 20%  bucket 2: 10%  bucket 3: 10%  bucket 1: 30%  bucket 4: 10%  bucket 2: 20%  bucket 1: 40%  bucket 3: 20%  bucket 4: 20%  bucket 2: 30%  bucket 1: 50%  bucket 3: 30%  bucket 4: 30%  bucket 2: 40%  bucket 1: 60%  bucket 3: 40%  bucket 2: 50%  bucket 4: 40%  bucket 1: 70%  bucket 3: 50%  bucket 2: 60%  bucket 1: 80%  bucket 4: 50%  bucket 3: 60%  bucket 2: 70%  bucket 1: 90%  bucket 4: 60%  bucket 2: 80%  bucket 3: 70%  bucket 1: 100%  Sorting block of length 689 for bucket 1  (Using difference cover)  bucket 4: 70%  bucket 2: 90%  bucket 3: 80%  bucket 4: 80%  bucket 2: 100%  Sorting block of length 445 for bucket 2  (Using difference cover)  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 629 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 499 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 690 for bucket 1  Sorting block time: 00:00:00Returning block of 446 for bucket 2  Sorting block time: 00:00:00Returning block of 500 for bucket 4  Sorting block time: 00:00:00Returning block of 630 for bucket 3Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 30  Entering block accumulator loop for bucket 5:  Reserving size (777) for bucket 6  Calculating Z arrays for bucket 6Getting block 7 of 30  bucket 5: 10%  Entering block accumulator loop for bucket 6:  Reserving size (777) for bucket 7  Calculating Z arrays for bucket 7  bucket 5: 20%  bucket 6: 10%  Entering block accumulator loop for bucket 7:  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 7: 10%  bucket 5: 50%  bucket 6: 40%  bucket 7: 20%  bucket 5: 60%  bucket 6: 50%  bucket 7: 30%  bucket 5: 70%  bucket 6: 60%  bucket 7: 40%  bucket 5: 80%  bucket 6: 70%  bucket 7: 50%  bucket 5: 90%  bucket 6: 80%  bucket 7: 60%  bucket 5: 100%  bucket 6: 90%  Sorting block of length 738 for bucket 5  (Using difference cover)  bucket 7: 70%  bucket 6: 100%  bucket 7: 80%  Sorting block time: 00:00:00  Sorting block of length 305 for bucket 6  (Using difference cover)Returning block of 739 for bucket 5  Sorting block time: 00:00:00  bucket 7: 90%Returning block of 306 for bucket 6Getting block 8 of 30  bucket 7: 100%  Reserving size (777) for bucket 8  Sorting block of length 705 for bucket 7  (Using difference cover)  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  Sorting block time: 00:00:00  bucket 8: 30%Returning block of 706 for bucket 7  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 772 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 773 for bucket 8Getting block 9 of 30  Reserving size (777) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 30  Reserving size (777) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 10%  bucket 9: 20%  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 10: 20%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  bucket 10: 80%  Sorting block of length 546 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 247 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 9  Sorting block time: 00:00:00Returning block of 248 for bucket 10Getting block 11 of 30  Reserving size (777) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%Getting block 12 of 30  Reserving size (777) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 20%  Entering block accumulator loop for bucket 12:  bucket 11: 30%  bucket 12: 10%  bucket 11: 40%  bucket 12: 20%  bucket 11: 50%  bucket 12: 30%  bucket 11: 60%  bucket 12: 40%  bucket 11: 70%  bucket 12: 50%  bucket 11: 80%  bucket 12: 60%  bucket 11: 90%  bucket 12: 70%  bucket 11: 100%  bucket 12: 80%  Sorting block of length 611 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 485 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 612 for bucket 11  Sorting block time: 00:00:00Returning block of 486 for bucket 12Getting block 13 of 30  Reserving size (777) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%Getting block 14 of 30  Reserving size (777) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 30%  Entering block accumulator loop for bucket 14:  bucket 13: 40%  bucket 14: 10%  bucket 14: 20%  bucket 13: 50%  bucket 14: 30%  bucket 13: 60%  bucket 14: 40%  bucket 13: 70%  bucket 14: 50%  bucket 14: 60%  bucket 13: 80%  bucket 14: 70%  bucket 13: 90%  bucket 14: 80%  bucket 13: 100%  bucket 14: 90%  Sorting block of length 597 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 689 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 598 for bucket 13  Sorting block time: 00:00:00Returning block of 690 for bucket 14Getting block 15 of 30  Reserving size (777) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 30  Reserving size (777) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 15:  Entering block accumulator loop for bucket 16:  bucket 15: 10%  bucket 16: 10%  bucket 15: 20%  bucket 16: 20%  bucket 15: 30%  bucket 16: 30%  bucket 15: 40%  bucket 15: 50%  bucket 16: 40%  bucket 15: 60%  bucket 16: 50%  bucket 15: 70%  bucket 16: 60%  bucket 15: 80%  bucket 16: 70%  bucket 15: 90%  bucket 16: 80%  bucket 15: 100%  Sorting block of length 543 for bucket 15  (Using difference cover)  bucket 16: 90%  bucket 16: 100%  Sorting block of length 723 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 15  Sorting block time: 00:00:00Returning block of 724 for bucket 16Getting block 17 of 30  Reserving size (777) for bucket 17Getting block 18 of 30  Calculating Z arrays for bucket 17  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 18:  bucket 17: 10%  bucket 18: 10%  bucket 17: 20%  bucket 18: 20%  bucket 17: 30%  bucket 18: 30%  bucket 17: 40%  bucket 18: 40%  bucket 17: 50%  bucket 18: 50%  bucket 17: 60%  bucket 18: 60%  bucket 17: 70%  bucket 18: 70%  bucket 17: 80%  bucket 18: 80%  bucket 17: 90%  bucket 18: 90%  bucket 17: 100%  Sorting block of length 578 for bucket 17  (Using difference cover)  bucket 18: 100%  Sorting block of length 356 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 357 for bucket 18  Sorting block time: 00:00:00Returning block of 579 for bucket 17Getting block 19 of 30  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%Getting block 20 of 30  bucket 19: 20%  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 19: 30%  bucket 20: 10%  bucket 19: 40%  bucket 20: 20%  bucket 19: 50%  bucket 20: 30%  bucket 19: 60%  bucket 20: 40%  bucket 19: 70%  bucket 20: 50%  bucket 19: 80%  bucket 20: 60%  bucket 20: 70%  bucket 19: 90%  bucket 20: 80%  bucket 19: 100%  Sorting block of length 731 for bucket 19  (Using difference cover)  bucket 20: 90%  bucket 20: 100%  Sorting block of length 268 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 269 for bucket 20  Sorting block time: 00:00:00Returning block of 732 for bucket 19Getting block 21 of 30  Reserving size (777) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%Getting block 22 of 30  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 21: 20%  bucket 22: 10%  bucket 21: 30%  bucket 22: 20%  bucket 21: 40%  bucket 22: 30%  bucket 21: 50%  bucket 22: 40%  bucket 21: 60%  bucket 22: 50%  bucket 21: 70%  bucket 22: 60%  bucket 21: 80%  bucket 22: 70%  bucket 21: 90%  bucket 22: 80%  bucket 21: 100%  Sorting block of length 21 for bucket 21  (Using difference cover)  bucket 22: 90%  bucket 22: 100%  Sorting block of length 952 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 22 for bucket 21  Sorting block time: 00:00:00Returning block of 953 for bucket 22Getting block 23 of 30  Reserving size (777) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:Getting block 24 of 30  Reserving size (777) for bucket 24  bucket 23: 10%  Calculating Z arrays for bucket 24  bucket 23: 20%  Entering block accumulator loop for bucket 24:  bucket 23: 30%  bucket 24: 10%  bucket 23: 40%  bucket 24: 20%  bucket 23: 50%  bucket 24: 30%  bucket 23: 60%  bucket 24: 40%  bucket 23: 70%  bucket 24: 50%  bucket 23: 80%  bucket 24: 60%  bucket 24: 70%  bucket 23: 90%  bucket 24: 80%  bucket 23: 100%  Sorting block of length 763 for bucket 23  (Using difference cover)  bucket 24: 90%  bucket 24: 100%  Sorting block of length 471 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 764 for bucket 23  Sorting block time: 00:00:00Returning block of 472 for bucket 24Getting block 25 of 30  Reserving size (777) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 415 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 416 for bucket 25Getting block 26 of 30  Reserving size (777) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 643 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 644 for bucket 26Getting block 27 of 30  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%Getting block 28 of 30  bucket 27: 20%  Reserving size (777) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 27: 30%  bucket 28: 10%  bucket 27: 40%  bucket 28: 20%  bucket 27: 50%  bucket 28: 30%  bucket 27: 60%  bucket 28: 40%  bucket 27: 70%  bucket 28: 50%  bucket 27: 80%  bucket 28: 60%  bucket 28: 70%  bucket 27: 90%  bucket 28: 80%  bucket 27: 100%  Sorting block of length 592 for bucket 27  (Using difference cover)  bucket 28: 90%  bucket 28: 100%  Sorting block of length 684 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 593 for bucket 27  Sorting block time: 00:00:00Returning block of 685 for bucket 28Getting block 29 of 30  Reserving size (777) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 30  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 29: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 29: 20%  bucket 30: 50%  bucket 30: 60%  bucket 29: 30%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 29: 40%  bucket 30: 100%  Sorting block of length 602 for bucket 30  (Using difference cover)  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  Sorting block time: 00:00:00Returning block of 603 for bucket 30  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 240 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 241 for bucket 29Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 6, merged 21; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1Getting block 2 of 30Getting block 3 of 30  Calculating Z arrays for bucket 1  Reserving size (777) for bucket 2  Reserving size (777) for bucket 3Getting block 4 of 30  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  Reserving size (777) for bucket 4  Entering block accumulator loop for bucket 3:  Calculating Z arrays for bucket 4  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 3: 10%  Entering block accumulator loop for bucket 4:  bucket 1: 20%  bucket 3: 20%  bucket 2: 10%  bucket 1: 30%  bucket 4: 10%  bucket 3: 30%  bucket 1: 40%  bucket 2: 20%  bucket 3: 40%  bucket 1: 50%  bucket 4: 20%  bucket 2: 30%  bucket 3: 50%  bucket 1: 60%  bucket 2: 40%  bucket 3: 60%  bucket 1: 70%  bucket 4: 30%  bucket 2: 50%  bucket 3: 70%  bucket 1: 80%  bucket 4: 40%  bucket 2: 60%  bucket 3: 80%  bucket 1: 90%  bucket 2: 70%  bucket 1: 100%  bucket 3: 90%  Sorting block of length 484 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 4: 50%  bucket 3: 100%  Sorting block of length 434 for bucket 3  (Using difference cover)  bucket 2: 90%  bucket 4: 60%  bucket 2: 100%  Sorting block of length 774 for bucket 2  (Using difference cover)  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 431 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 485 for bucket 1  Sorting block time: 00:00:00Returning block of 435 for bucket 3  Sorting block time: 00:00:00Returning block of 432 for bucket 4  Sorting block time: 00:00:00Returning block of 775 for bucket 2Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%Getting block 6 of 30  Reserving size (777) for bucket 6Getting block 7 of 30  Calculating Z arrays for bucket 6  bucket 5: 90%  Reserving size (777) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 6:  bucket 5: 100%  Sorting block of length 776 for bucket 5  bucket 7: 10%  (Using difference cover)  bucket 6: 10%  bucket 7: 20%  bucket 7: 30%  bucket 6: 20%  bucket 7: 40%  bucket 6: 30%  bucket 7: 50%  bucket 7: 60%  bucket 6: 40%  bucket 7: 70%  bucket 6: 50%  bucket 7: 80%  Sorting block time: 00:00:00Returning block of 777 for bucket 5  bucket 7: 90%  bucket 6: 60%  bucket 7: 100%  Sorting block of length 707 for bucket 7  (Using difference cover)  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 179 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 708 for bucket 7  Sorting block time: 00:00:00Returning block of 180 for bucket 6Getting block 8 of 30  Reserving size (777) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 313 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 314 for bucket 8Getting block 9 of 30  Reserving size (777) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 30  bucket 9: 10%  Reserving size (777) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 20%  Entering block accumulator loop for bucket 10:  bucket 9: 30%Getting block 11 of 30  bucket 10: 10%  Reserving size (777) for bucket 11  bucket 9: 40%  Calculating Z arrays for bucket 11  bucket 10: 20%  bucket 9: 50%  Entering block accumulator loop for bucket 11:  bucket 9: 60%  bucket 10: 30%  bucket 11: 10%  bucket 9: 70%  bucket 10: 40%  bucket 9: 80%  bucket 11: 20%  bucket 10: 50%  bucket 9: 90%  bucket 10: 60%  bucket 9: 100%  bucket 11: 30%  Sorting block of length 535 for bucket 9  (Using difference cover)  bucket 10: 70%  bucket 11: 40%  bucket 10: 80%  bucket 11: 50%  bucket 10: 90%  bucket 11: 60%  bucket 10: 100%  Sorting block of length 680 for bucket 10  (Using difference cover)  bucket 11: 70%  bucket 11: 80%  Sorting block time: 00:00:00Returning block of 536 for bucket 9  bucket 11: 90%  bucket 11: 100%  Sorting block of length 423 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 681 for bucket 10  Sorting block time: 00:00:00Returning block of 424 for bucket 11Getting block 12 of 30  Reserving size (777) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 371 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 372 for bucket 12Getting block 13 of 30  Reserving size (777) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 30  bucket 13: 10%  Reserving size (777) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 13: 30%  bucket 14: 10%Getting block 15 of 30  Reserving size (777) for bucket 15  Calculating Z arrays for bucket 15  bucket 13: 40%  bucket 14: 20%  Entering block accumulator loop for bucket 15:  bucket 13: 50%  bucket 14: 30%  bucket 15: 10%  bucket 13: 60%  bucket 14: 40%  bucket 13: 70%  bucket 15: 20%  bucket 14: 50%  bucket 13: 80%  bucket 14: 60%  bucket 15: 30%  bucket 13: 90%  bucket 14: 70%  bucket 15: 40%  bucket 13: 100%  Sorting block of length 595 for bucket 13  (Using difference cover)  bucket 14: 80%  bucket 15: 50%  bucket 15: 60%  bucket 14: 90%  bucket 15: 70%  bucket 14: 100%  Sorting block of length 708 for bucket 14  (Using difference cover)  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 629 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 596 for bucket 13  Sorting block time: 00:00:00Returning block of 709 for bucket 14  Sorting block time: 00:00:00Returning block of 630 for bucket 15Getting block 16 of 30  Reserving size (777) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 750 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 751 for bucket 16Getting block 17 of 30  Reserving size (777) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%Getting block 18 of 30  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 20%  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 17: 30%  bucket 18: 20%  bucket 17: 40%  bucket 18: 30%  bucket 17: 50%  bucket 18: 40%  bucket 18: 50%  bucket 17: 60%  bucket 18: 60%  bucket 17: 70%  bucket 18: 70%  bucket 17: 80%  bucket 18: 80%  bucket 17: 90%  bucket 18: 90%  bucket 17: 100%  Sorting block of length 606 for bucket 17  (Using difference cover)  bucket 18: 100%  Sorting block of length 722 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 607 for bucket 17  Sorting block time: 00:00:00Returning block of 723 for bucket 18Getting block 19 of 30  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 418 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 419 for bucket 19Getting block 20 of 30  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 519 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 520 for bucket 20Getting block 21 of 30  Reserving size (777) for bucket 21Getting block 22 of 30  Calculating Z arrays for bucket 21  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  Entering block accumulator loop for bucket 22:  bucket 21: 10%  bucket 22: 10%  bucket 21: 20%  bucket 22: 20%  bucket 21: 30%  bucket 21: 40%  bucket 22: 30%  bucket 21: 50%  bucket 22: 40%  bucket 21: 60%  bucket 22: 50%  bucket 21: 70%  bucket 22: 60%  bucket 21: 80%  bucket 22: 70%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 422 for bucket 21  (Using difference cover)  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 493 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 423 for bucket 21  Sorting block time: 00:00:00Returning block of 494 for bucket 22Getting block 23 of 30  Reserving size (777) for bucket 23Getting block 24 of 30  Calculating Z arrays for bucket 23  Reserving size (777) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 23:  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 23: 10%  bucket 24: 20%  bucket 23: 20%  bucket 24: 30%  bucket 23: 30%  bucket 23: 40%  bucket 24: 40%  bucket 23: 50%  bucket 24: 50%  bucket 23: 60%  bucket 24: 60%  bucket 24: 70%  bucket 23: 70%  bucket 24: 80%  bucket 23: 80%  bucket 24: 90%  bucket 23: 90%  bucket 24: 100%  Sorting block of length 732 for bucket 24  (Using difference cover)  bucket 23: 100%  Sorting block of length 510 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 511 for bucket 23  Sorting block time: 00:00:00Returning block of 733 for bucket 24Getting block 25 of 30  Reserving size (777) for bucket 25  Calculating Z arrays for bucket 25Getting block 26 of 30  Reserving size (777) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 25:  Entering block accumulator loop for bucket 26:  bucket 25: 10%  bucket 26: 10%  bucket 25: 20%  bucket 26: 20%  bucket 25: 30%  bucket 26: 30%  bucket 25: 40%  bucket 25: 50%  bucket 26: 40%  bucket 25: 60%  bucket 26: 50%  bucket 26: 60%  bucket 25: 70%  bucket 26: 70%  bucket 25: 80%  bucket 26: 80%  bucket 25: 90%  bucket 26: 90%  bucket 25: 100%  Sorting block of length 457 for bucket 25  (Using difference cover)  bucket 26: 100%  Sorting block of length 647 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 458 for bucket 25  Sorting block time: 00:00:00Returning block of 648 for bucket 26Getting block 27 of 30  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 334 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 335 for bucket 27Getting block 28 of 30  Reserving size (777) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:Getting block 29 of 30  bucket 28: 10%  Reserving size (777) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 28: 20%  bucket 29: 10%  bucket 28: 30%  bucket 29: 20%  bucket 28: 40%  bucket 29: 30%  bucket 28: 50%  bucket 29: 40%  bucket 28: 60%  bucket 29: 50%  bucket 28: 70%  bucket 29: 60%  bucket 28: 80%  bucket 29: 70%  bucket 28: 90%  bucket 29: 80%  bucket 28: 100%  bucket 29: 90%  Sorting block of length 631 for bucket 28  (Using difference cover)  bucket 29: 100%  Sorting block of length 582 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 632 for bucket 28  Sorting block time: 00:00:00Returning block of 583 for bucket 29Getting block 30 of 30  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 677 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 678 for bucket 30Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #3)" name="2" time="68.12825036048889">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "fd8e6e3100abbd1a",   "src": "hda"  },  "library|input_2": {   "id": "9703f84c8b6f39a4",   "src": "hda"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "cfbb97480412f430",   "src": "hda"  },  "reference_genome|source": "history",  "rg|PL": "CAPILLARY",  "rg|read_group_id_conditional|ID": "rg1",  "rg|rg_selector": "set" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/a/9/e/dataset_a9efbbc4-0d79-4cb2-ae87-abaeb60eac2f.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/a/9/e/dataset_a9efbbc4-0d79-4cb2-ae87-abaeb60eac2f.dat\u0027 genome.fa \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/8/a/8/dataset_8a8cba54-8553-45c8-b8c9-2cbe98409b08.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/1/8/1/dataset_181f8da9-56dd-46bb-add1-563457feb132.dat\u0027 input_r.fastq \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/9/a/4/dataset_9a4b6bcf-8682-496b-a117-ff4c34b647b6.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2024-01-28T14:27:58.969876",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-qs2q5",  "galaxy_version": "21.09",  "history_id": "cbf056288c649de3",  "id": "79ce38c20c85e7d6",  "inputs": {   "input_1": {    "id": "fd8e6e3100abbd1a",    "src": "hda",    "uuid": "8a8cba54-8553-45c8-b8c9-2cbe98409b08"   },   "input_2": {    "id": "9703f84c8b6f39a4",    "src": "hda",    "uuid": "181f8da9-56dd-46bb-add1-563457feb132"   },   "own_file": {    "id": "cfbb97480412f430",    "src": "hda",    "uuid": "a9efbbc4-0d79-4cb2-ae87-abaeb60eac2f"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1706452118.0000000",    "title": "Job End Time",    "value": "2024-01-28 14:28:38"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1706452117.0000000",    "title": "Job Start Time",    "value": "2024-01-28 14:28:37"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "12000.0000000",    "title": "Memory Allocated (MB)",    "value": "12000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/9/e/dataset_a9efbbc4-0d79-4cb2-ae87-abaeb60eac2f.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Reserving size (777) for bucket 2\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  bucket 2: 10%\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 2: 40%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 2: 50%\n  bucket 1: 40%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 1: 50%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 4: 30%\n  bucket 1: 60%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 3: 80%\n  bucket 2: 100%\n  bucket 4: 40%\n  bucket 1: 70%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 1: 80%\n  bucket 3: 100%\n  bucket 4: 50%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 6: 10%\n  bucket 5: 50%\n  bucket 6: 20%\nGetting block 7 of 30\n  bucket 5: 60%\n  bucket 6: 30%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 70%\n  bucket 6: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 7: 10%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 7: 20%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 7: 30%\n  bucket 6: 80%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 6: 90%\n  bucket 7: 70%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 80%\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  bucket 10: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 11: 10%\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  bucket 13: 20%\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 13: 100%\n  bucket 14: 60%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Entering block accumulator loop for bucket 15:\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 16: 10%\n  bucket 15: 30%\n  bucket 16: 20%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 16: 30%\n  bucket 15: 60%\n  bucket 16: 40%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 16: 50%\n  bucket 15: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  bucket 18: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\nGetting block 22 of 30\n  bucket 21: 50%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 22: 10%\n  bucket 21: 80%\n  bucket 22: 20%\n  bucket 21: 90%\n  bucket 22: 30%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  bucket 23: 10%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  bucket 28: 90%\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Reserving size (777) for bucket 2\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 1: 40%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 1: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 1: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 1: 70%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 1: 80%\n  bucket 4: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 1: 90%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 20%\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 7: 50%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 7: 60%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 7: 70%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 30\n  bucket 9: 30%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 50%\n  bucket 10: 10%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 10: 30%\n  bucket 9: 90%\n  bucket 10: 40%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 13:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 16: 30%\n  bucket 15: 50%\n  bucket 16: 40%\n  bucket 15: 60%\n  bucket 16: 50%\n  bucket 15: 70%\n  bucket 16: 60%\n  bucket 15: 80%\n  bucket 16: 70%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 19: 60%\n  bucket 20: 60%\n  bucket 19: 70%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 20: 100%\n  bucket 19: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\nGetting block 22 of 30\n  Calculating Z arrays for bucket 21\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  bucket 23: 10%\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 24: 10%\n  bucket 23: 40%\n  bucket 24: 20%\n  bucket 23: 50%\n  bucket 24: 30%\n  bucket 23: 60%\n  bucket 24: 40%\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 30%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 25: 50%\n  bucket 26: 20%\n  bucket 25: 60%\n  bucket 26: 30%\n  bucket 25: 70%\n  bucket 26: 40%\n  bucket 25: 80%\n  bucket 26: 50%\n  bucket 25: 90%\n  bucket 25: 100%\n  bucket 26: 60%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  Sorting block time: 00:00:00\n  bucket 26: 100%\nReturning block of 458 for bucket 25\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 30%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 27: 50%\n  bucket 28: 20%\n  bucket 27: 60%\n  bucket 28: 30%\n  bucket 27: 70%\n  bucket 28: 40%\n  bucket 27: 80%\n  bucket 28: 50%\n  bucket 27: 90%\n  bucket 28: 60%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 40%\n  bucket 30: 50%\n  bucket 29: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 29: 60%\n  bucket 30: 80%\n  bucket 29: 70%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "0a265929f7ccccbd",    "src": "hda",    "uuid": "9a4b6bcf-8682-496b-a117-ff4c34b647b6"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 330, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 331, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 332, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/a/9/e/dataset_a9efbbc4-0d79-4cb2-ae87-abaeb60eac2f.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Reserving size (777) for bucket 2\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  bucket 2: 10%\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 2: 40%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 2: 50%\n  bucket 1: 40%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 1: 50%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 4: 30%\n  bucket 1: 60%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 3: 80%\n  bucket 2: 100%\n  bucket 4: 40%\n  bucket 1: 70%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 1: 80%\n  bucket 3: 100%\n  bucket 4: 50%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 6: 10%\n  bucket 5: 50%\n  bucket 6: 20%\nGetting block 7 of 30\n  bucket 5: 60%\n  bucket 6: 30%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 70%\n  bucket 6: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 7: 10%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 7: 20%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 7: 30%\n  bucket 6: 80%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 6: 90%\n  bucket 7: 70%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 80%\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  bucket 10: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 11: 10%\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  bucket 13: 20%\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 13: 100%\n  bucket 14: 60%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Entering block accumulator loop for bucket 15:\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 16: 10%\n  bucket 15: 30%\n  bucket 16: 20%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 16: 30%\n  bucket 15: 60%\n  bucket 16: 40%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 16: 50%\n  bucket 15: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  bucket 18: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\nGetting block 22 of 30\n  bucket 21: 50%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 22: 10%\n  bucket 21: 80%\n  bucket 22: 20%\n  bucket 21: 90%\n  bucket 22: 30%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  bucket 23: 10%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  bucket 28: 90%\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Reserving size (777) for bucket 2\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 1: 40%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 1: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 1: 60%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 1: 70%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 1: 80%\n  bucket 4: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 1: 90%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 20%\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 7: 50%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 7: 60%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 7: 70%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 30\n  bucket 9: 30%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 50%\n  bucket 10: 10%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 10: 30%\n  bucket 9: 90%\n  bucket 10: 40%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 13:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 16: 30%\n  bucket 15: 50%\n  bucket 16: 40%\n  bucket 15: 60%\n  bucket 16: 50%\n  bucket 15: 70%\n  bucket 16: 60%\n  bucket 15: 80%\n  bucket 16: 70%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 19: 60%\n  bucket 20: 60%\n  bucket 19: 70%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 20: 100%\n  bucket 19: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\nGetting block 22 of 30\n  Calculating Z arrays for bucket 21\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  bucket 23: 10%\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 24: 10%\n  bucket 23: 40%\n  bucket 24: 20%\n  bucket 23: 50%\n  bucket 24: 30%\n  bucket 23: 60%\n  bucket 24: 40%\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 30%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 25: 50%\n  bucket 26: 20%\n  bucket 25: 60%\n  bucket 26: 30%\n  bucket 25: 70%\n  bucket 26: 40%\n  bucket 25: 80%\n  bucket 26: 50%\n  bucket 25: 90%\n  bucket 25: 100%\n  bucket 26: 60%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  Sorting block time: 00:00:00\n  bucket 26: 100%\nReturning block of 458 for bucket 25\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 30%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 27: 50%\n  bucket 28: 20%\n  bucket 27: 60%\n  bucket 28: 30%\n  bucket 27: 70%\n  bucket 28: 40%\n  bucket 27: 80%\n  bucket 28: 50%\n  bucket 27: 90%\n  bucket 28: 60%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 40%\n  bucket 30: 50%\n  bucket 29: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 29: 60%\n  bucket 30: 80%\n  bucket 29: 70%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2024-01-28T14:28:48.940606",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_p_g8rv_4.sam v. /tmp/history_bam_converted_to_sam_zxl86ig6.sam )\n--- local_file\n+++ history_data\n@@ -1,78 +1,79 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n @RG\tID:rg1\tPL:CAPILLARY\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome --rg-id rg1 --rg PL:CAPILLARY -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome --rg-id rg1 --rg PL:CAPILLARY -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/241/tmp -O bam -o /galaxy/server/database/objects/9/a/4/dataset_9a4b6bcf-8682-496b-a117-ff4c34b647b6.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3\u003eAAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tAAABBBBFFFFFGGGGGGGGGGHHHGGGGGHHFFGHHHHFHHHFFHFHHHFHHHHHFGFHHHHHGHHHHGGGGHHHGHHFHHHHHHHGHHHHHHHGGHGGHHHHHHHHHHHGHHHHHHHHHHGHHHHGHGHHGGCGGGHHHH23FFHHHHGHGCGHHHHGGHFHGHBCCFFFFFFF/ECCDFDFEFFFFBDAFF?DADE??BFFFF=A-.AAAA.BFFFFED..BF/BFFEFFFFBFFFFFFFFFFBFB::\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHGGHHHHHHFHHHHHHHHHHHHHHHHHHHHGHHHHHGGGGCHHHHHHHHGHHHHHHHFHHHHHGHGHGHHGGGGGFGGHHGGGGGGGGGGGGEGGFGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFF-9@DDBFFFFFFFFBBFFF0\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC\u003e;\u003e=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2\u003eAFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@\u003eBD/9BFBBBBFDFFFF99D=?\u003eDDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\tRG:Z:rg1\n********\n*SNIP *\n********\n-M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D\u003eCFDDFFFB?AF?B;-@\u003e.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000\u003c00\u003cBFBB0\u003c00000\u003c99.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A\u003cGFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.\u003cADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/\u003e99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG\u003e0\u003c0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGACAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTA\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHCHHGDGGGGHGGHHHHHHHHGHGHHHGGGGGHFHHHHFHHHFFHHHHHFGCGGEHFHHFGGHFHGGGGGGHHFEEEAFEFFDFHGHHHHGGGGGGGHH0DGGGGCGHCC-\u003cCCBGHHHGEFFFFHH.C/\u003cAEGHHEG.EEA0GE0:FB0CFGF:A?FFBF??FG0B;FGGGGFGE?BBF;BFBFFFF/F/B?DDF.;.;:ADD.BA/BBFFB:BFE/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t77\t*\t0\t0\t*\t*\t0\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGCGGTGTCCACGCAATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\t1\u003e\u003e1AAFFFFFBGGFE1EEEEGGHGHHH2FGHHHFGFGHGCFGGGEFHGGEGGHHHHGHEFBFEGHHHGHHBEHHHHGHGFHHHGGGGHHEGGGGHHHGFHGHHHH1FHHG?G/AGF1GBFGEFFHF2FDD0FG\u003cGDHBFDGFFCGH//B//?0GFFGFGGHHHFHFB.=1FDFB?FGH.C/.-:::CH0;CAB@-.;0CGFFFGG--9.A@GB\u003e--99@=---AAABA-BF/B?A@F-9BBFF//BB/9/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATTGCGTGGACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tABBB\u003eFFFFFFFGGGGGGGGGGHHHHHGHHHHGHHGGHHGGHGGHHHGHHHHFHHGHHAFGGGHHHHHGHHHHFHFHHHHHECGGGHGHHHEFHFHGGGGGGGGFGFFGFFEFGEGHHHGHHGGDGGGHGFGGGGGGGGE@GCGGHHHGHHHHHGHHHHFHHGEGFFEGCE.ECCECEHCGGFFE/AABFFG0CFE0BFFF9CFGG.F/BBBFFGFGGGFFFFFFBFEDAEFFFFFBFFFFFFF0;FEBF:\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTT\tAAABABBBBBBFGGGGGGGGGGHGHHGHGHHHHHHHHHGHHHGGHDGHHHGGGGHHHHHHHHHHHHHHHFHGHHHHGGHGGHHHFHHHHHCGHFFHHHHHHHHHHHHHGHGEFGAEEEEHHGHHGHGHHHHHHHGHHHHHHGHGHFFBC/BA?BGGGFFFFFFFFFFFFFFFC-@DDFFFFFFFEFAFFFFFFBFBFFFFFFFFFFFFFFFFBFF-\u003e@FFFFFFFFFFBFBFAD--.99;A?////:.9A.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t141\t*\t0\t0\t*\t*\t0\t0\tGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCAAGTGTAGTGCTCGGGGGGG\tBBCCBFFCCCCCGGGGGGGGGGGGGGHHHHHHGGGGGGHHFHGGGGGFGHGGGGGGHHHHHHHHHHFHHHHFHGFFHHGF?ECEFFFFFFHHHHHH?FHHHHHHHHHGFHHHHHHGGGFGHHHHFHHHHHHHHHHGGGFGFGCGGGGHHHHHHHHHHHGGFFHGHHHHHFFHFCGFHCCGHGHCGGHG?DGGGGGFBBFGFBFBBBGGGB0000;CD?DFFAFF9=--;...://;////////.------\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGGGCTGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCTTGAAGTAGGAACC\tAABABFFFFFFFF4GGGGEBGEFGHGGHGHGHHHGGHFBGFGGGGGHHEFHGEHFHFHEHHHHHGCGGGHFHHCFGHE@1EEEFFGB?EEEEHBGGGCHHGHHBEE@\u003eEAHHFAEBDGGGCEFF?CEGFFHHHHHFHHHFHGHCGCAHHF\u003c..C.D=0CD.GFHHHG.CAGHC:CHB0GGGFFB0:CFA.A-;9.;000CBBFFBFGA.9AA;A;EDDE.ABBFFFF9;BEFFF/BF//9/B//9:B//..\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBBFBBBBBFGGGGGGGGGGHFHHHHHHHHHHHHHHGHHHHGHFHHHGEEGGHHHGHHHHHHHHHHHHEHGHHGGGHGGHGHHHHHGHHHHGHHHHHHHHHHHHHHGHHHHHGEGCGHHHHHGHHHHHHHHHHHHHHGHFFGHGHHGGGDACDFFFFABFFFFFFFFFFD-BC?DA9.DFFBEA==B=?F.;ABBFBFEF-DAF/BFF9/FFFBB/9BFFFFFFF/BFBBFFFFFFF/9FEA?--B/;.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t77\t*\t0\t0\t*\t*\t0\t0\tCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGA\tAABBBBFFFFFFGGGFGGGGGGHHHGGHGGHHHHHHHHHHHGHHGGGGGHHHHHHHHHHHHHHHHHHGGCGDHHHHFGGHHHGGGGGFGGHGGGGHHGGGGHHHHHHGGGGGGHHGGGGDGGFGHGGFCDCHHHHGHHHHGHHFAGFGGEHFGEG.C\u003cEGCECEFCFFHBGHE:GHHGFF0FFFB0CFGGGGAGFFF0;;FFGGGFFGFFCDD.DEFBEDD?9FFFFFFFFFFFFFFF/B./FB///;BF/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t141\t*\t0\t0\t*\t*\t0\t0\tGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATT\tBBBBAFFFFFFFGGGGGGGGGGFGHHHHHGHHHHHHHHHHHHCGHHHHHHHGHHHHHHDGHHGGAECHHGHHHHHHHGHHHGHGFHHHHGGHGGHHFHHHHHHFHHHHHHHHH2GHHHHGHGHHFHHGGFGGGHHGHHHHHFHHHHEFHHHHEFGFFHGEHCFGDFDFFFFFCFFFFFFFFFFFFFAFBFFDFFFFFFFFADCF?9?EFBFB9EF-A.;BFFFFFFFBFFFFFFFFFFFFBFFFFFFFFFF\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t77\t*\t0\t0\t*\t*\t0\t0\tGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGCTACAGTTCACTTTAGCTACCTCCAAGTGTTATG\tAA?AAFFFFFFFGGGGGFBFGGGGGGH5GHFEDHHGGGGCGFBGH?AEEHFFEEGHGHHHHGGG?0EHGHHGGGGGC?GEE/EE?GHHHGBHFHHHHHHGHHGHHHGGGCG/A@\u003cFGGHHHHHHHFF/GFDGHHHHHHGFFFGHGGHABGHFHHHHHFHEGDGHGDDEEHHBEDDEGFGHGBFFBFFEGGGEFGFGFB000;F0F;FGGEGGEFFF;-.9//B///B9FFFFF/BFFB/:.BB//;FBFFF\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t141\t*\t0\t0\t*\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTGGAT\tCDDDBFFFFFFFGGGGGGGGGGHHHHHGGHHHGHHHGHHGGGGEHHGGHHHHHHHHHHHHHHGHHGHHHHHGGHHHHHFHHHHGCDCGHHHHHHHHEHHHGHGHHHGFHGGHGGHHHHHHHHFHHHFHHHGHHHHHHHHHFGGHHHHGGGEGAFHHGHHGGHHHHGHFBGFHGHGHGHGGHGGF@DAFEFBECAB=A.0BFFFEDF=A9.@D.-AAFFFA-:-..:.9/0:;0..-..0000::BFB09::\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGA\tABBBBFFFFFFFGGGFGGGGGGHHHGHHGGHBGHGAGFFCAFGHGFFGHHGFHHHHHGGGGGHGHHHHHHHHE3BFFHHHGG0EDF@GHFFGGGHGGGGGGGGGGGGGHHGGEEFHGFHHDDG@DGGGHHGDGGGGGHGG?CF?HHGHHHGHGHHHFFHGGGHHHHGGCD.;0\u003cC;CGGGGEFF/.;0;FFFBF/0;0CFGFFB..9B/;0CBFFBBFFFFBAC?DED9;B9AD;.FFFB/B/;FBA/B//\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBCFCCCCCFGGGGGGGGGGHHHHHHHGHHHHHHHHGHHHHGHDGHHHGGGGHHHHHHHHHHHHHHHGHHHHHGGGEGGHHHHFHHHHHHHHHHHHHHHHHHHHHHGHHGHHGGGGGHHHHHHHHHHHGHHHFHHHHHHGHGHGHGGGGCGGFGGFFFFFFFFFFFFFBFFFFFFFFFFFFFFAFFFFEAEFFFFFFFFFFF9BFFBFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFADAB-/BF.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t77\t*\t0\t0\t*\t*\t0\t0\tCGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTCTGATCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAACAAACACACATCCAGA\t\u003eA33\u003eFFFFFF@FFFGGGGFGGD4EGGGGGHHGFFGHFGGHHHFEFHECFHHHEHGAGBCCGCCEGGHGHEGFBFHFHHHHGGGHFHGHEGGGFEGEGG??@DBGHGGC-@FFGHFHFHB-??DA-DD@9:BEBG@B?E?A.ABBFBFA??F.FF/BFFB/B9B/9;BF9FF9FFFFFFFFFFFFFF?BB?;9EE;-;DDB9//;B-B@;ABFFEFFFF/-.9A.;//9/BF./B/..9.9:...//////\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH\u003c1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\tRG:Z:rg1\n" ], "status": "failure", "test_index": 2, "time_seconds": 68.12825036048889, "tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 16  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/a/9/e/dataset_a9efbbc4-0d79-4cb2-ae87-abaeb60eac2f.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 4, merged 22; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1Getting block 2 of 30Getting block 3 of 30  Reserving size (777) for bucket 2  Calculating Z arrays for bucket 1  Reserving size (777) for bucket 3Getting block 4 of 30  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 1:  Reserving size (777) for bucket 4  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 3:  Calculating Z arrays for bucket 4  bucket 2: 10%  bucket 1: 10%  bucket 3: 10%  bucket 2: 20%  Entering block accumulator loop for bucket 4:  bucket 1: 20%  bucket 2: 30%  bucket 3: 20%  bucket 2: 40%  bucket 1: 30%  bucket 4: 10%  bucket 3: 30%  bucket 2: 50%  bucket 1: 40%  bucket 3: 40%  bucket 2: 60%  bucket 4: 20%  bucket 3: 50%  bucket 2: 70%  bucket 1: 50%  bucket 3: 60%  bucket 2: 80%  bucket 4: 30%  bucket 1: 60%  bucket 3: 70%  bucket 2: 90%  bucket 3: 80%  bucket 2: 100%  bucket 4: 40%  bucket 1: 70%  Sorting block of length 445 for bucket 2  (Using difference cover)  bucket 3: 90%  bucket 1: 80%  bucket 3: 100%  bucket 4: 50%  Sorting block of length 629 for bucket 3  (Using difference cover)  bucket 1: 90%  bucket 4: 60%  bucket 1: 100%  Sorting block of length 689 for bucket 1  (Using difference cover)  bucket 4: 70%  bucket 4: 80%  bucket 4: 90%  Sorting block time: 00:00:00Returning block of 630 for bucket 3  bucket 4: 100%  Sorting block of length 499 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 446 for bucket 2  Sorting block time: 00:00:00Returning block of 500 for bucket 4  Sorting block time: 00:00:00Returning block of 690 for bucket 1Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%Getting block 6 of 30  Reserving size (777) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 20%  Entering block accumulator loop for bucket 6:  bucket 5: 30%  bucket 5: 40%  bucket 6: 10%  bucket 5: 50%  bucket 6: 20%Getting block 7 of 30  bucket 5: 60%  bucket 6: 30%  Reserving size (777) for bucket 7  Calculating Z arrays for bucket 7  bucket 5: 70%  bucket 6: 40%  Entering block accumulator loop for bucket 7:  bucket 5: 80%  bucket 6: 50%  bucket 7: 10%  bucket 5: 90%  bucket 6: 60%  bucket 7: 20%  bucket 5: 100%  Sorting block of length 738 for bucket 5  (Using difference cover)  bucket 6: 70%  bucket 7: 30%  bucket 6: 80%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 6: 90%  bucket 7: 70%  bucket 6: 100%  Sorting block of length 305 for bucket 6  (Using difference cover)  bucket 7: 80%  Sorting block time: 00:00:00Returning block of 739 for bucket 5  bucket 7: 90%  bucket 7: 100%  Sorting block of length 705 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 306 for bucket 6  Sorting block time: 00:00:00Returning block of 706 for bucket 7Getting block 8 of 30  Reserving size (777) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 772 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 773 for bucket 8Getting block 9 of 30  Reserving size (777) for bucket 9Getting block 10 of 30  Calculating Z arrays for bucket 9  Reserving size (777) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  bucket 10: 100%  Sorting block of length 546 for bucket 9  (Using difference cover)  Sorting block of length 247 for bucket 10  (Using difference cover)Getting block 11 of 30  Reserving size (777) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  Sorting block time: 00:00:00Returning block of 248 for bucket 10  bucket 11: 10%  Sorting block time: 00:00:00Returning block of 547 for bucket 9  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 611 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 612 for bucket 11Getting block 12 of 30  Reserving size (777) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 485 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 486 for bucket 12Getting block 13 of 30  Reserving size (777) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%Getting block 14 of 30  Reserving size (777) for bucket 14  bucket 13: 20%  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 30%  bucket 14: 10%  bucket 13: 40%  bucket 14: 20%  bucket 13: 50%  bucket 14: 30%  bucket 13: 60%  bucket 13: 70%  bucket 14: 40%  bucket 13: 80%  bucket 14: 50%  bucket 13: 90%  bucket 13: 100%  bucket 14: 60%  Sorting block of length 597 for bucket 13  (Using difference cover)  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 689 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 598 for bucket 13  Sorting block time: 00:00:00Returning block of 690 for bucket 14Getting block 15 of 30  Reserving size (777) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 30  Entering block accumulator loop for bucket 15:  Reserving size (777) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 15: 10%  bucket 15: 20%  bucket 16: 10%  bucket 15: 30%  bucket 16: 20%  bucket 15: 40%  bucket 15: 50%  bucket 16: 30%  bucket 15: 60%  bucket 16: 40%  bucket 15: 70%  bucket 15: 80%  bucket 16: 50%  bucket 15: 90%  bucket 16: 60%  bucket 15: 100%  Sorting block of length 543 for bucket 15  (Using difference cover)  bucket 16: 70%  bucket 16: 80%  Sorting block time: 00:00:00Returning block of 544 for bucket 15  bucket 16: 90%  bucket 16: 100%  Sorting block of length 723 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 724 for bucket 16Getting block 17 of 30  Reserving size (777) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:Getting block 18 of 30  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 10%  Entering block accumulator loop for bucket 18:  bucket 17: 20%  bucket 18: 10%  bucket 17: 30%  bucket 18: 20%  bucket 17: 40%  bucket 18: 30%  bucket 17: 50%  bucket 18: 40%  bucket 17: 60%  bucket 18: 50%  bucket 17: 70%  bucket 18: 60%  bucket 18: 70%  bucket 17: 80%  bucket 18: 80%  bucket 17: 90%  bucket 18: 90%  bucket 17: 100%  bucket 18: 100%  Sorting block of length 578 for bucket 17  (Using difference cover)  Sorting block of length 356 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 357 for bucket 18  Sorting block time: 00:00:00Returning block of 579 for bucket 17Getting block 19 of 30  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%Getting block 20 of 30  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 20%  Entering block accumulator loop for bucket 20:  bucket 19: 30%  bucket 20: 10%  bucket 19: 40%  bucket 20: 20%  bucket 19: 50%  bucket 20: 30%  bucket 19: 60%  bucket 20: 40%  bucket 19: 70%  bucket 20: 50%  bucket 20: 60%  bucket 19: 80%  bucket 20: 70%  bucket 19: 90%  bucket 20: 80%  bucket 19: 100%  Sorting block of length 731 for bucket 19  (Using difference cover)  bucket 20: 90%  bucket 20: 100%  Sorting block of length 268 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 732 for bucket 19  Sorting block time: 00:00:00Returning block of 269 for bucket 20Getting block 21 of 30  Reserving size (777) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%Getting block 22 of 30  bucket 21: 50%  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 21: 60%  bucket 21: 70%  bucket 22: 10%  bucket 21: 80%  bucket 22: 20%  bucket 21: 90%  bucket 22: 30%  bucket 21: 100%  Sorting block of length 21 for bucket 21  (Using difference cover)  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  Sorting block time: 00:00:00Returning block of 22 for bucket 21  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 952 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 953 for bucket 22Getting block 23 of 30  Reserving size (777) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:Getting block 24 of 30  bucket 23: 10%  Reserving size (777) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 23: 20%  bucket 24: 10%  bucket 23: 30%  bucket 24: 20%  bucket 23: 40%  bucket 24: 30%  bucket 23: 50%  bucket 24: 40%  bucket 23: 60%  bucket 24: 50%  bucket 23: 70%  bucket 24: 60%  bucket 23: 80%  bucket 24: 70%  bucket 23: 90%  bucket 24: 80%  bucket 23: 100%  Sorting block of length 763 for bucket 23  (Using difference cover)  bucket 24: 90%  bucket 24: 100%  Sorting block of length 471 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 764 for bucket 23  Sorting block time: 00:00:00Returning block of 472 for bucket 24Getting block 25 of 30  Reserving size (777) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 415 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 416 for bucket 25Getting block 26 of 30  Reserving size (777) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 643 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 644 for bucket 26Getting block 27 of 30  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:Getting block 28 of 30  Reserving size (777) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 10%  Entering block accumulator loop for bucket 28:  bucket 27: 20%  bucket 28: 10%  bucket 27: 30%  bucket 28: 20%  bucket 27: 40%  bucket 28: 30%  bucket 27: 50%  bucket 28: 40%  bucket 27: 60%  bucket 28: 50%  bucket 27: 70%  bucket 28: 60%  bucket 27: 80%  bucket 28: 70%  bucket 27: 90%  bucket 28: 80%  bucket 27: 100%  Sorting block of length 592 for bucket 27  bucket 28: 90%  (Using difference cover)  bucket 28: 100%  Sorting block of length 684 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 593 for bucket 27  Sorting block time: 00:00:00Returning block of 685 for bucket 28Getting block 29 of 30  Reserving size (777) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 240 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 241 for bucket 29Getting block 30 of 30  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 602 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 603 for bucket 30Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 6, merged 21; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1Getting block 2 of 30Getting block 3 of 30Getting block 4 of 30  Reserving size (777) for bucket 2  Calculating Z arrays for bucket 1  Reserving size (777) for bucket 3  Reserving size (777) for bucket 4  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 1: 10%  bucket 2: 10%  bucket 3: 10%  bucket 4: 10%  bucket 2: 20%  bucket 1: 20%  bucket 3: 20%  bucket 4: 20%  bucket 2: 30%  bucket 1: 30%  bucket 3: 30%  bucket 4: 30%  bucket 2: 40%  bucket 3: 40%  bucket 1: 40%  bucket 4: 40%  bucket 2: 50%  bucket 3: 50%  bucket 4: 50%  bucket 2: 60%  bucket 1: 50%  bucket 3: 60%  bucket 4: 60%  bucket 2: 70%  bucket 1: 60%  bucket 3: 70%  bucket 4: 70%  bucket 2: 80%  bucket 3: 80%  bucket 1: 70%  bucket 4: 80%  bucket 2: 90%  bucket 3: 90%  bucket 1: 80%  bucket 4: 90%  bucket 2: 100%  Sorting block of length 774 for bucket 2  (Using difference cover)  bucket 3: 100%  Sorting block of length 434 for bucket 3  (Using difference cover)  bucket 4: 100%  bucket 1: 90%  Sorting block of length 431 for bucket 4  (Using difference cover)  bucket 1: 100%  Sorting block of length 484 for bucket 1  (Using difference cover)  Sorting block time: 00:00:00Returning block of 432 for bucket 4  Sorting block time: 00:00:00Returning block of 485 for bucket 1  Sorting block time: 00:00:00Returning block of 435 for bucket 3  Sorting block time: 00:00:00Returning block of 775 for bucket 2Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 30  Entering block accumulator loop for bucket 5:  Reserving size (777) for bucket 6  Calculating Z arrays for bucket 6Getting block 7 of 30  bucket 5: 10%  Entering block accumulator loop for bucket 6:  Reserving size (777) for bucket 7  Calculating Z arrays for bucket 7  bucket 5: 20%  bucket 6: 10%  Entering block accumulator loop for bucket 7:  bucket 5: 30%  bucket 6: 20%  bucket 7: 10%  bucket 5: 40%  bucket 6: 30%  bucket 7: 20%  bucket 5: 50%  bucket 6: 40%  bucket 7: 30%  bucket 5: 60%  bucket 6: 50%  bucket 7: 40%  bucket 5: 70%  bucket 6: 60%  bucket 7: 50%  bucket 5: 80%  bucket 6: 70%  bucket 7: 60%  bucket 5: 90%  bucket 6: 80%  bucket 7: 70%  bucket 5: 100%  bucket 6: 90%  Sorting block of length 776 for bucket 5  (Using difference cover)  bucket 7: 80%  bucket 6: 100%  Sorting block of length 179 for bucket 6  (Using difference cover)  bucket 7: 90%  bucket 7: 100%  Sorting block of length 707 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 180 for bucket 6Getting block 8 of 30  Reserving size (777) for bucket 8  Calculating Z arrays for bucket 8  Sorting block time: 00:00:00Returning block of 777 for bucket 5  Entering block accumulator loop for bucket 8:  bucket 8: 10%  Sorting block time: 00:00:00Returning block of 708 for bucket 7  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 313 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 314 for bucket 8Getting block 9 of 30  Reserving size (777) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%Getting block 10 of 30  bucket 9: 30%  Reserving size (777) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 40%  Entering block accumulator loop for bucket 10:  bucket 9: 50%  bucket 10: 10%  bucket 9: 60%  bucket 9: 70%  bucket 10: 20%  bucket 9: 80%  bucket 10: 30%  bucket 9: 90%  bucket 10: 40%  bucket 9: 100%  Sorting block of length 535 for bucket 9  (Using difference cover)  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  Sorting block time: 00:00:00Returning block of 536 for bucket 9  bucket 10: 90%  bucket 10: 100%  Sorting block of length 680 for bucket 10  (Using difference cover)Getting block 11 of 30  Reserving size (777) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  Sorting block time: 00:00:00Returning block of 681 for bucket 10  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 423 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 424 for bucket 11Getting block 12 of 30  Reserving size (777) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 371 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 372 for bucket 12Getting block 13 of 30  Reserving size (777) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 30  Reserving size (777) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  Entering block accumulator loop for bucket 13:  bucket 14: 10%  bucket 13: 10%  bucket 14: 20%  bucket 13: 20%  bucket 14: 30%  bucket 13: 30%  bucket 14: 40%  bucket 13: 40%  bucket 14: 50%  bucket 13: 50%  bucket 14: 60%  bucket 13: 60%  bucket 14: 70%  bucket 13: 70%  bucket 14: 80%  bucket 13: 80%  bucket 14: 90%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 595 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 708 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 596 for bucket 13  Sorting block time: 00:00:00Returning block of 709 for bucket 14Getting block 15 of 30  Reserving size (777) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 30  Reserving size (777) for bucket 16  Entering block accumulator loop for bucket 15:  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 15: 10%  bucket 16: 10%  bucket 15: 20%  bucket 16: 20%  bucket 15: 30%  bucket 15: 40%  bucket 16: 30%  bucket 15: 50%  bucket 16: 40%  bucket 15: 60%  bucket 16: 50%  bucket 15: 70%  bucket 16: 60%  bucket 15: 80%  bucket 16: 70%  bucket 15: 90%  bucket 16: 80%  bucket 15: 100%  Sorting block of length 629 for bucket 15  (Using difference cover)  bucket 16: 90%  bucket 16: 100%  Sorting block of length 750 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 630 for bucket 15  Sorting block time: 00:00:00Returning block of 751 for bucket 16Getting block 17 of 30  Reserving size (777) for bucket 17Getting block 18 of 30  Calculating Z arrays for bucket 17  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 18:  bucket 17: 10%  bucket 18: 10%  bucket 17: 20%  bucket 18: 20%  bucket 17: 30%  bucket 18: 30%  bucket 17: 40%  bucket 18: 40%  bucket 17: 50%  bucket 18: 50%  bucket 17: 60%  bucket 18: 60%  bucket 17: 70%  bucket 18: 70%  bucket 17: 80%  bucket 18: 80%  bucket 17: 90%  bucket 18: 90%  bucket 17: 100%  Sorting block of length 606 for bucket 17  (Using difference cover)  bucket 18: 100%  Sorting block of length 722 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 607 for bucket 17  Sorting block time: 00:00:00Returning block of 723 for bucket 18Getting block 19 of 30  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:Getting block 20 of 30  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 19: 20%  bucket 20: 10%  bucket 20: 20%  bucket 19: 30%  bucket 20: 30%  bucket 19: 40%  bucket 20: 40%  bucket 19: 50%  bucket 20: 50%  bucket 19: 60%  bucket 20: 60%  bucket 19: 70%  bucket 20: 70%  bucket 19: 80%  bucket 20: 80%  bucket 19: 90%  bucket 20: 90%  bucket 20: 100%  bucket 19: 100%  Sorting block of length 519 for bucket 20  (Using difference cover)  Sorting block of length 418 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 419 for bucket 19  Sorting block time: 00:00:00Returning block of 520 for bucket 20Getting block 21 of 30  Reserving size (777) for bucket 21Getting block 22 of 30  Calculating Z arrays for bucket 21  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  Entering block accumulator loop for bucket 22:  bucket 21: 10%  bucket 22: 10%  bucket 21: 20%  bucket 22: 20%  bucket 21: 30%  bucket 22: 30%  bucket 21: 40%  bucket 22: 40%  bucket 21: 50%  bucket 22: 50%  bucket 21: 60%  bucket 22: 60%  bucket 22: 70%  bucket 21: 70%  bucket 22: 80%  bucket 21: 80%  bucket 21: 90%  bucket 22: 90%  bucket 21: 100%  Sorting block of length 422 for bucket 21  (Using difference cover)  bucket 22: 100%  Sorting block of length 493 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 423 for bucket 21  Sorting block time: 00:00:00Returning block of 494 for bucket 22Getting block 23 of 30  Reserving size (777) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:Getting block 24 of 30  Reserving size (777) for bucket 24  bucket 23: 10%  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 23: 20%  bucket 23: 30%  bucket 24: 10%  bucket 23: 40%  bucket 24: 20%  bucket 23: 50%  bucket 24: 30%  bucket 23: 60%  bucket 24: 40%  bucket 23: 70%  bucket 24: 50%  bucket 23: 80%  bucket 24: 60%  bucket 24: 70%  bucket 23: 90%  bucket 24: 80%  bucket 23: 100%  Sorting block of length 510 for bucket 23  (Using difference cover)  bucket 24: 90%  bucket 24: 100%  Sorting block of length 732 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 511 for bucket 23  Sorting block time: 00:00:00Returning block of 733 for bucket 24Getting block 25 of 30  Reserving size (777) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%Getting block 26 of 30  Reserving size (777) for bucket 26  Calculating Z arrays for bucket 26  bucket 25: 30%  Entering block accumulator loop for bucket 26:  bucket 25: 40%  bucket 26: 10%  bucket 25: 50%  bucket 26: 20%  bucket 25: 60%  bucket 26: 30%  bucket 25: 70%  bucket 26: 40%  bucket 25: 80%  bucket 26: 50%  bucket 25: 90%  bucket 25: 100%  bucket 26: 60%  Sorting block of length 457 for bucket 25  (Using difference cover)  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  Sorting block time: 00:00:00  bucket 26: 100%Returning block of 458 for bucket 25  Sorting block of length 647 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 648 for bucket 26Getting block 27 of 30  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%Getting block 28 of 30  Reserving size (777) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 30%  Entering block accumulator loop for bucket 28:  bucket 27: 40%  bucket 28: 10%  bucket 27: 50%  bucket 28: 20%  bucket 27: 60%  bucket 28: 30%  bucket 27: 70%  bucket 28: 40%  bucket 27: 80%  bucket 28: 50%  bucket 27: 90%  bucket 28: 60%  bucket 27: 100%  Sorting block of length 334 for bucket 27  (Using difference cover)  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  Sorting block time: 00:00:00Returning block of 335 for bucket 27  bucket 28: 100%  Sorting block of length 631 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 632 for bucket 28Getting block 29 of 30  Reserving size (777) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:Getting block 30 of 30  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  bucket 29: 10%  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 29: 20%  bucket 30: 20%  bucket 29: 30%  bucket 30: 30%  bucket 30: 40%  bucket 29: 40%  bucket 30: 50%  bucket 29: 50%  bucket 30: 60%  bucket 30: 70%  bucket 29: 60%  bucket 30: 80%  bucket 29: 70%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 677 for bucket 30  (Using difference cover)  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 582 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 678 for bucket 30  Sorting block time: 00:00:00Returning block of 583 for bucket 29Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:01
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #4)" name="3" time="71.70913863182068">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "84689298f82505cb",   "src": "hda"  },  "library|input_2": {   "id": "1e20c9e530ffb702",   "src": "hda"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "f74e8bc142c01af2",   "src": "hda"  },  "reference_genome|source": "history",  "save_mapping_stats": true }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/7/8/e/dataset_78e37cac-8ad4-47bd-90d1-8363fbe7604b.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/7/8/e/dataset_78e37cac-8ad4-47bd-90d1-8363fbe7604b.dat\u0027 genome.fa \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/c/1/f/dataset_c1f86aa2-b76b-4dec-a434-a6d1935881e3.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/8/9/2/dataset_892a7c43-5bae-4f69-a612-78087ae83ffd.dat\u0027 input_r.fastq \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027                2\u003e \u0027/galaxy/server/database/objects/2/2/2/dataset_222e66d7-b3a4-4c22-a554-606e269de916.dat\u0027  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/a/0/9/dataset_a0959c4a-3a59-4829-b20d-8997f5fad7e0.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2024-01-28T14:29:07.243086",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-qr52l",  "galaxy_version": "21.09",  "history_id": "cbf056288c649de3",  "id": "4214e0c5cd092aa3",  "inputs": {   "input_1": {    "id": "84689298f82505cb",    "src": "hda",    "uuid": "c1f86aa2-b76b-4dec-a434-a6d1935881e3"   },   "input_2": {    "id": "1e20c9e530ffb702",    "src": "hda",    "uuid": "892a7c43-5bae-4f69-a612-78087ae83ffd"   },   "own_file": {    "id": "f74e8bc142c01af2",    "src": "hda",    "uuid": "78e37cac-8ad4-47bd-90d1-8363fbe7604b"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1706452190.0000000",    "title": "Job End Time",    "value": "2024-01-28 14:29:50"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1706452189.0000000",    "title": "Job Start Time",    "value": "2024-01-28 14:29:49"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "12000.0000000",    "title": "Memory Allocated (MB)",    "value": "12000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_stderr": "Building a SMALL index\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/7/8/e/dataset_78e37cac-8ad4-47bd-90d1-8363fbe7604b.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Entering block accumulator loop for bucket 1:\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 1: 70%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 1: 80%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 1: 90%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 4: 60%\n  bucket 1: 100%\n  bucket 3: 70%\n  bucket 2: 80%\n  Sorting block of length 689 for bucket 1\n  bucket 4: 70%\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 4: 80%\nReturning block of 690 for bucket 1\n  bucket 3: 90%\n  bucket 2: 100%\n  bucket 4: 90%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 7\nGetting block 8 of 30\n  bucket 5: 10%\n  Calculating Z arrays for bucket 7\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 5: 30%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 5: 50%\n  bucket 8: 50%\n  bucket 6: 40%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 5: 60%\n  bucket 7: 70%\n  bucket 6: 50%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  bucket 5: 80%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\nGetting block 11 of 30\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 11: 10%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 11: 20%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 11: 30%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 11: 40%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 11: 50%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 11: 60%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 11: 70%\n  bucket 10: 80%\n  bucket 11: 80%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Entering block accumulator loop for bucket 13:\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 30\n  Entering block accumulator loop for bucket 14:\n  Reserving size (777) for bucket 15\n  bucket 13: 10%\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 15: 30%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 15: 40%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 15: 50%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 15: 60%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 15: 70%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 14: 90%\n  bucket 15: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  bucket 18: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 50%\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 60%\n  bucket 20: 20%\n  bucket 19: 70%\n  bucket 20: 30%\n  bucket 19: 80%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 19: 90%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 30\n  bucket 24: 10%\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 20%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 25: 10%\n  bucket 24: 50%\n  bucket 25: 20%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 25: 30%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 25: 40%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\nGetting block 26 of 30\n  bucket 25: 100%\n  Sorting block time: 00:00:00\n  Reserving size (777) for bucket 26\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\nReturning block of 472 for bucket 24\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\nGetting block 29 of 30\n  bucket 28: 20%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\nGetting block 30 of 30\n  bucket 28: 40%\n  bucket 29: 10%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 20%\n  Entering block accumulator loop for bucket 30:\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 28: 60%\n  bucket 30: 20%\n  bucket 29: 40%\n  bucket 30: 30%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 30: 40%\n  bucket 28: 80%\n  bucket 30: 50%\n  bucket 29: 60%\n  bucket 30: 60%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 30: 70%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 30: 80%\n  bucket 29: 80%\n  bucket 30: 90%\n  bucket 29: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 100%\n  bucket 2: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block of length 774 for bucket 2\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 60%\n  bucket 8: 10%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 20%\n  bucket 7: 90%\n  bucket 8: 30%\n  bucket 7: 100%\n  bucket 8: 40%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  bucket 9: 50%\n  Calculating Z arrays for bucket 10\n  bucket 9: 60%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 70%\n  bucket 10: 10%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 20%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  Sorting block time: 00:00:00\nGetting block 14 of 30\nReturning block of 372 for bucket 12\n  Reserving size (777) for bucket 14\n  bucket 13: 20%\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 10%\n  bucket 13: 50%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 14: 60%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  bucket 16: 20%\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 30%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 16: 40%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 16: 70%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 16: 80%\n  bucket 17: 50%\n  bucket 16: 90%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 18: 70%\nReturning block of 751 for bucket 16\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 30\n  bucket 29: 10%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 20%\n  bucket 30: 10%\n  bucket 29: 30%\n  bucket 30: 20%\n  bucket 29: 40%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 50%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 29: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 80%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "output_collections": {},  "outputs": {   "mapping_stats": {    "id": "c947e80a291f66b9",    "src": "hda",    "uuid": "222e66d7-b3a4-4c22-a554-606e269de916"   },   "output": {    "id": "a1744b5aaa69b223",    "src": "hda",    "uuid": "a0959c4a-3a59-4829-b20d-8997f5fad7e0"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 334, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 335, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 336, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"true\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/7/8/e/dataset_78e37cac-8ad4-47bd-90d1-8363fbe7604b.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Entering block accumulator loop for bucket 1:\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 1: 70%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 1: 80%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 1: 90%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 4: 60%\n  bucket 1: 100%\n  bucket 3: 70%\n  bucket 2: 80%\n  Sorting block of length 689 for bucket 1\n  bucket 4: 70%\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 4: 80%\nReturning block of 690 for bucket 1\n  bucket 3: 90%\n  bucket 2: 100%\n  bucket 4: 90%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 7\nGetting block 8 of 30\n  bucket 5: 10%\n  Calculating Z arrays for bucket 7\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 5: 30%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 5: 50%\n  bucket 8: 50%\n  bucket 6: 40%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 5: 60%\n  bucket 7: 70%\n  bucket 6: 50%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  bucket 5: 80%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\nGetting block 11 of 30\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 11: 10%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 11: 20%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 11: 30%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 11: 40%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 11: 50%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 11: 60%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 11: 70%\n  bucket 10: 80%\n  bucket 11: 80%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Entering block accumulator loop for bucket 13:\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 30\n  Entering block accumulator loop for bucket 14:\n  Reserving size (777) for bucket 15\n  bucket 13: 10%\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 15: 30%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 15: 40%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 15: 50%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 15: 60%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 15: 70%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 14: 90%\n  bucket 15: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  bucket 18: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 50%\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 60%\n  bucket 20: 20%\n  bucket 19: 70%\n  bucket 20: 30%\n  bucket 19: 80%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 19: 90%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 30\n  bucket 24: 10%\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 20%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 25: 10%\n  bucket 24: 50%\n  bucket 25: 20%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 25: 30%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 25: 40%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\nGetting block 26 of 30\n  bucket 25: 100%\n  Sorting block time: 00:00:00\n  Reserving size (777) for bucket 26\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\nReturning block of 472 for bucket 24\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\nGetting block 29 of 30\n  bucket 28: 20%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\nGetting block 30 of 30\n  bucket 28: 40%\n  bucket 29: 10%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 20%\n  Entering block accumulator loop for bucket 30:\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 28: 60%\n  bucket 30: 20%\n  bucket 29: 40%\n  bucket 30: 30%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 30: 40%\n  bucket 28: 80%\n  bucket 30: 50%\n  bucket 29: 60%\n  bucket 30: 60%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 30: 70%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 30: 80%\n  bucket 29: 80%\n  bucket 30: 90%\n  bucket 29: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 100%\n  bucket 2: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block of length 774 for bucket 2\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 60%\n  bucket 8: 10%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 20%\n  bucket 7: 90%\n  bucket 8: 30%\n  bucket 7: 100%\n  bucket 8: 40%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  bucket 9: 50%\n  Calculating Z arrays for bucket 10\n  bucket 9: 60%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 70%\n  bucket 10: 10%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 20%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  Sorting block time: 00:00:00\nGetting block 14 of 30\nReturning block of 372 for bucket 12\n  Reserving size (777) for bucket 14\n  bucket 13: 20%\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 10%\n  bucket 13: 50%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 14: 60%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  bucket 16: 20%\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 30%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 16: 40%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 16: 70%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 16: 80%\n  bucket 17: 50%\n  bucket 16: 90%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 18: 70%\nReturning block of 751 for bucket 16\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 30\n  bucket 29: 10%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 20%\n  bucket 30: 10%\n  bucket 29: 30%\n  bucket 30: 20%\n  bucket 29: 40%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 50%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 29: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 80%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2024-01-28T14:30:00.441243",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_clno7rn4.sam v. /tmp/history_bam_converted_to_sam_i_9843al.sam )\n--- local_file\n+++ history_data\n@@ -1,77 +1,78 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/245/tmp -O bam -o /galaxy/server/database/objects/a/0/9/dataset_a0959c4a-3a59-4829-b20d-8997f5fad7e0.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3\u003eAAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tAAABBBBFFFFFGGGGGGGGGGHHHGGGGGHHFFGHHHHFHHHFFHFHHHFHHHHHFGFHHHHHGHHHHGGGGHHHGHHFHHHHHHHGHHHHHHHGGHGGHHHHHHHHHHHGHHHHHHHHHHGHHHHGHGHHGGCGGGHHHH23FFHHHHGHGCGHHHHGGHFHGHBCCFFFFFFF/ECCDFDFEFFFFBDAFF?DADE??BFFFF=A-.AAAA.BFFFFED..BF/BFFEFFFFBFFFFFFFFFFBFB::\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHGGHHHHHHFHHHHHHHHHHHHHHHHHHHHGHHHHHGGGGCHHHHHHHHGHHHHHHHFHHHHHGHGHGHHGGGGGFGGHHGGGGGGGGGGGGEGGFGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFF-9@DDBFFFFFFFFBBFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC\u003e;\u003e=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2\u003eAFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@\u003eBD/9BFBBBBFDFFFF99D=?\u003eDDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n********\n*SNIP *\n********\n-M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D\u003eCFDDFFFB?AF?B;-@\u003e.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000\u003c00\u003cBFBB0\u003c00000\u003c99.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A\u003cGFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.\u003cADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/\u003e99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG\u003e0\u003c0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGACAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTA\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHCHHGDGGGGHGGHHHHHHHHGHGHHHGGGGGHFHHHHFHHHFFHHHHHFGCGGEHFHHFGGHFHGGGGGGHHFEEEAFEFFDFHGHHHHGGGGGGGHH0DGGGGCGHCC-\u003cCCBGHHHGEFFFFHH.C/\u003cAEGHHEG.EEA0GE0:FB0CFGF:A?FFBF??FG0B;FGGGGFGE?BBF;BFBFFFF/F/B?DDF.;.;:ADD.BA/BBFFB:BFE/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t77\t*\t0\t0\t*\t*\t0\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGCGGTGTCCACGCAATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\t1\u003e\u003e1AAFFFFFBGGFE1EEEEGGHGHHH2FGHHHFGFGHGCFGGGEFHGGEGGHHHHGHEFBFEGHHHGHHBEHHHHGHGFHHHGGGGHHEGGGGHHHGFHGHHHH1FHHG?G/AGF1GBFGEFFHF2FDD0FG\u003cGDHBFDGFFCGH//B//?0GFFGFGGHHHFHFB.=1FDFB?FGH.C/.-:::CH0;CAB@-.;0CGFFFGG--9.A@GB\u003e--99@=---AAABA-BF/B?A@F-9BBFF//BB/9/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATTGCGTGGACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tABBB\u003eFFFFFFFGGGGGGGGGGHHHHHGHHHHGHHGGHHGGHGGHHHGHHHHFHHGHHAFGGGHHHHHGHHHHFHFHHHHHECGGGHGHHHEFHFHGGGGGGGGFGFFGFFEFGEGHHHGHHGGDGGGHGFGGGGGGGGE@GCGGHHHGHHHHHGHHHHFHHGEGFFEGCE.ECCECEHCGGFFE/AABFFG0CFE0BFFF9CFGG.F/BBBFFGFGGGFFFFFFBFEDAEFFFFFBFFFFFFF0;FEBF:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTT\tAAABABBBBBBFGGGGGGGGGGHGHHGHGHHHHHHHHHGHHHGGHDGHHHGGGGHHHHHHHHHHHHHHHFHGHHHHGGHGGHHHFHHHHHCGHFFHHHHHHHHHHHHHGHGEFGAEEEEHHGHHGHGHHHHHHHGHHHHHHGHGHFFBC/BA?BGGGFFFFFFFFFFFFFFFC-@DDFFFFFFFEFAFFFFFFBFBFFFFFFFFFFFFFFFFBFF-\u003e@FFFFFFFFFFBFBFAD--.99;A?////:.9A.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t141\t*\t0\t0\t*\t*\t0\t0\tGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCAAGTGTAGTGCTCGGGGGGG\tBBCCBFFCCCCCGGGGGGGGGGGGGGHHHHHHGGGGGGHHFHGGGGGFGHGGGGGGHHHHHHHHHHFHHHHFHGFFHHGF?ECEFFFFFFHHHHHH?FHHHHHHHHHGFHHHHHHGGGFGHHHHFHHHHHHHHHHGGGFGFGCGGGGHHHHHHHHHHHGGFFHGHHHHHFFHFCGFHCCGHGHCGGHG?DGGGGGFBBFGFBFBBBGGGB0000;CD?DFFAFF9=--;...://;////////.------\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGGGCTGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCTTGAAGTAGGAACC\tAABABFFFFFFFF4GGGGEBGEFGHGGHGHGHHHGGHFBGFGGGGGHHEFHGEHFHFHEHHHHHGCGGGHFHHCFGHE@1EEEFFGB?EEEEHBGGGCHHGHHBEE@\u003eEAHHFAEBDGGGCEFF?CEGFFHHHHHFHHHFHGHCGCAHHF\u003c..C.D=0CD.GFHHHG.CAGHC:CHB0GGGFFB0:CFA.A-;9.;000CBBFFBFGA.9AA;A;EDDE.ABBFFFF9;BEFFF/BF//9/B//9:B//..\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBBFBBBBBFGGGGGGGGGGHFHHHHHHHHHHHHHHGHHHHGHFHHHGEEGGHHHGHHHHHHHHHHHHEHGHHGGGHGGHGHHHHHGHHHHGHHHHHHHHHHHHHHGHHHHHGEGCGHHHHHGHHHHHHHHHHHHHHGHFFGHGHHGGGDACDFFFFABFFFFFFFFFFD-BC?DA9.DFFBEA==B=?F.;ABBFBFEF-DAF/BFF9/FFFBB/9BFFFFFFF/BFBBFFFFFFF/9FEA?--B/;.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t77\t*\t0\t0\t*\t*\t0\t0\tCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGA\tAABBBBFFFFFFGGGFGGGGGGHHHGGHGGHHHHHHHHHHHGHHGGGGGHHHHHHHHHHHHHHHHHHGGCGDHHHHFGGHHHGGGGGFGGHGGGGHHGGGGHHHHHHGGGGGGHHGGGGDGGFGHGGFCDCHHHHGHHHHGHHFAGFGGEHFGEG.C\u003cEGCECEFCFFHBGHE:GHHGFF0FFFB0CFGGGGAGFFF0;;FFGGGFFGFFCDD.DEFBEDD?9FFFFFFFFFFFFFFF/B./FB///;BF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t141\t*\t0\t0\t*\t*\t0\t0\tGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATT\tBBBBAFFFFFFFGGGGGGGGGGFGHHHHHGHHHHHHHHHHHHCGHHHHHHHGHHHHHHDGHHGGAECHHGHHHHHHHGHHHGHGFHHHHGGHGGHHFHHHHHHFHHHHHHHHH2GHHHHGHGHHFHHGGFGGGHHGHHHHHFHHHHEFHHHHEFGFFHGEHCFGDFDFFFFFCFFFFFFFFFFFFFAFBFFDFFFFFFFFADCF?9?EFBFB9EF-A.;BFFFFFFFBFFFFFFFFFFFFBFFFFFFFFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t77\t*\t0\t0\t*\t*\t0\t0\tGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGCTACAGTTCACTTTAGCTACCTCCAAGTGTTATG\tAA?AAFFFFFFFGGGGGFBFGGGGGGH5GHFEDHHGGGGCGFBGH?AEEHFFEEGHGHHHHGGG?0EHGHHGGGGGC?GEE/EE?GHHHGBHFHHHHHHGHHGHHHGGGCG/A@\u003cFGGHHHHHHHFF/GFDGHHHHHHGFFFGHGGHABGHFHHHHHFHEGDGHGDDEEHHBEDDEGFGHGBFFBFFEGGGEFGFGFB000;F0F;FGGEGGEFFF;-.9//B///B9FFFFF/BFFB/:.BB//;FBFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t141\t*\t0\t0\t*\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTGGAT\tCDDDBFFFFFFFGGGGGGGGGGHHHHHGGHHHGHHHGHHGGGGEHHGGHHHHHHHHHHHHHHGHHGHHHHHGGHHHHHFHHHHGCDCGHHHHHHHHEHHHGHGHHHGFHGGHGGHHHHHHHHFHHHFHHHGHHHHHHHHHFGGHHHHGGGEGAFHHGHHGGHHHHGHFBGFHGHGHGHGGHGGF@DAFEFBECAB=A.0BFFFEDF=A9.@D.-AAFFFA-:-..:.9/0:;0..-..0000::BFB09::\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGA\tABBBBFFFFFFFGGGFGGGGGGHHHGHHGGHBGHGAGFFCAFGHGFFGHHGFHHHHHGGGGGHGHHHHHHHHE3BFFHHHGG0EDF@GHFFGGGHGGGGGGGGGGGGGHHGGEEFHGFHHDDG@DGGGHHGDGGGGGHGG?CF?HHGHHHGHGHHHFFHGGGHHHHGGCD.;0\u003cC;CGGGGEFF/.;0;FFFBF/0;0CFGFFB..9B/;0CBFFBBFFFFBAC?DED9;B9AD;.FFFB/B/;FBA/B//\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBCFCCCCCFGGGGGGGGGGHHHHHHHGHHHHHHHHGHHHHGHDGHHHGGGGHHHHHHHHHHHHHHHGHHHHHGGGEGGHHHHFHHHHHHHHHHHHHHHHHHHHHHGHHGHHGGGGGHHHHHHHHHHHGHHHFHHHHHHGHGHGHGGGGCGGFGGFFFFFFFFFFFFFBFFFFFFFFFFFFFFAFFFFEAEFFFFFFFFFFF9BFFBFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFADAB-/BF.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t77\t*\t0\t0\t*\t*\t0\t0\tCGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTCTGATCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAACAAACACACATCCAGA\t\u003eA33\u003eFFFFFF@FFFGGGGFGGD4EGGGGGHHGFFGHFGGHHHFEFHECFHHHEHGAGBCCGCCEGGHGHEGFBFHFHHHHGGGHFHGHEGGGFEGEGG??@DBGHGGC-@FFGHFHFHB-??DA-DD@9:BEBG@B?E?A.ABBFBFA??F.FF/BFFB/B9B/9;BF9FF9FFFFFFFFFFFFFF?BB?;9EE;-;DDB9//;B-B@;ABFFEFFFF/-.9A.;//9/BF./B/..9.9:...//////\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH\u003c1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n" ], "status": "failure", "test_index": 3, "time_seconds": 71.70913863182068, "tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 16  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/7/8/e/dataset_78e37cac-8ad4-47bd-90d1-8363fbe7604b.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 4, merged 22; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1Getting block 2 of 30  Calculating Z arrays for bucket 1  Reserving size (777) for bucket 2  Entering block accumulator loop for bucket 1:Getting block 3 of 30Getting block 4 of 30  Calculating Z arrays for bucket 2  Reserving size (777) for bucket 3  Reserving size (777) for bucket 4  bucket 1: 10%  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 4  bucket 1: 20%  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 1: 30%  bucket 2: 10%  bucket 1: 40%  bucket 3: 10%  bucket 4: 10%  bucket 2: 20%  bucket 1: 50%  bucket 3: 20%  bucket 2: 30%  bucket 4: 20%  bucket 1: 60%  bucket 3: 30%  bucket 2: 40%  bucket 4: 30%  bucket 1: 70%  bucket 3: 40%  bucket 2: 50%  bucket 4: 40%  bucket 1: 80%  bucket 3: 50%  bucket 2: 60%  bucket 4: 50%  bucket 1: 90%  bucket 3: 60%  bucket 2: 70%  bucket 4: 60%  bucket 1: 100%  bucket 3: 70%  bucket 2: 80%  Sorting block of length 689 for bucket 1  bucket 4: 70%  (Using difference cover)  Sorting block time: 00:00:00  bucket 3: 80%  bucket 2: 90%  bucket 4: 80%Returning block of 690 for bucket 1  bucket 3: 90%  bucket 2: 100%  bucket 4: 90%  Sorting block of length 445 for bucket 2  (Using difference cover)  bucket 3: 100%  Sorting block of length 629 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 499 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 630 for bucket 3  Sorting block time: 00:00:00Returning block of 500 for bucket 4  Sorting block time: 00:00:00Returning block of 446 for bucket 2Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 30  Reserving size (777) for bucket 6  Entering block accumulator loop for bucket 5:  Calculating Z arrays for bucket 6Getting block 7 of 30  Entering block accumulator loop for bucket 6:  Reserving size (777) for bucket 7Getting block 8 of 30  bucket 5: 10%  Calculating Z arrays for bucket 7  Reserving size (777) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 5: 20%  bucket 6: 10%  bucket 7: 10%  bucket 8: 10%  bucket 5: 30%  bucket 7: 20%  bucket 6: 20%  bucket 8: 20%  bucket 7: 30%  bucket 8: 30%  bucket 5: 40%  bucket 6: 30%  bucket 7: 40%  bucket 8: 40%  bucket 7: 50%  bucket 5: 50%  bucket 8: 50%  bucket 6: 40%  bucket 7: 60%  bucket 8: 60%  bucket 5: 60%  bucket 7: 70%  bucket 6: 50%  bucket 8: 70%  bucket 7: 80%  bucket 8: 80%  bucket 5: 70%  bucket 6: 60%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  bucket 5: 80%  Sorting block of length 705 for bucket 7  (Using difference cover)  bucket 6: 70%  bucket 8: 100%  Sorting block of length 772 for bucket 8  (Using difference cover)  bucket 5: 90%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 738 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 305 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 706 for bucket 7  Sorting block time: 00:00:00Returning block of 773 for bucket 8  Sorting block time: 00:00:00Returning block of 306 for bucket 6  Sorting block time: 00:00:00Returning block of 739 for bucket 5Getting block 9 of 30  Reserving size (777) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 30  Reserving size (777) for bucket 10Getting block 11 of 30  Calculating Z arrays for bucket 10  bucket 9: 10%  Reserving size (777) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 10:  Entering block accumulator loop for bucket 11:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 11: 10%  bucket 10: 20%  bucket 9: 40%  bucket 11: 20%  bucket 10: 30%  bucket 9: 50%  bucket 11: 30%  bucket 10: 40%  bucket 9: 60%  bucket 11: 40%  bucket 10: 50%  bucket 9: 70%  bucket 11: 50%  bucket 10: 60%  bucket 9: 80%  bucket 11: 60%  bucket 10: 70%  bucket 9: 90%  bucket 11: 70%  bucket 10: 80%  bucket 11: 80%  bucket 9: 100%  Sorting block of length 546 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 247 for bucket 10  (Using difference cover)  bucket 11: 90%  bucket 11: 100%  Sorting block of length 611 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 248 for bucket 10  Sorting block time: 00:00:00Returning block of 547 for bucket 9  Sorting block time: 00:00:00Returning block of 612 for bucket 11Getting block 12 of 30  Reserving size (777) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 485 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 486 for bucket 12Getting block 13 of 30  Reserving size (777) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 30  Entering block accumulator loop for bucket 13:  Reserving size (777) for bucket 14  Calculating Z arrays for bucket 14Getting block 15 of 30  Entering block accumulator loop for bucket 14:  Reserving size (777) for bucket 15  bucket 13: 10%  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%  bucket 15: 10%  bucket 14: 20%  bucket 13: 40%  bucket 15: 20%  bucket 14: 30%  bucket 13: 50%  bucket 15: 30%  bucket 14: 40%  bucket 13: 60%  bucket 15: 40%  bucket 14: 50%  bucket 13: 70%  bucket 15: 50%  bucket 14: 60%  bucket 13: 80%  bucket 15: 60%  bucket 14: 70%  bucket 13: 90%  bucket 15: 70%  bucket 14: 80%  bucket 13: 100%  Sorting block of length 597 for bucket 13  (Using difference cover)  bucket 15: 80%  bucket 14: 90%  bucket 15: 90%  bucket 14: 100%  Sorting block of length 689 for bucket 14  (Using difference cover)  bucket 15: 100%  Sorting block of length 543 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 598 for bucket 13  Sorting block time: 00:00:00Returning block of 690 for bucket 14  Sorting block time: 00:00:00Returning block of 544 for bucket 15Getting block 16 of 30  Reserving size (777) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 723 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 724 for bucket 16Getting block 17 of 30  Reserving size (777) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 30  Entering block accumulator loop for bucket 17:  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 17: 10%  bucket 18: 10%  bucket 17: 20%  bucket 18: 20%  bucket 17: 30%  bucket 18: 30%  bucket 17: 40%  bucket 17: 50%  bucket 18: 40%  bucket 18: 50%  bucket 17: 60%  bucket 18: 60%  bucket 17: 70%  bucket 18: 70%  bucket 17: 80%  bucket 18: 80%  bucket 17: 90%  bucket 18: 90%  bucket 17: 100%  bucket 18: 100%  Sorting block of length 578 for bucket 17  (Using difference cover)  Sorting block of length 356 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 357 for bucket 18  Sorting block time: 00:00:00Returning block of 579 for bucket 17Getting block 19 of 30  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%Getting block 20 of 30  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 50%  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 19: 60%  bucket 20: 20%  bucket 19: 70%  bucket 20: 30%  bucket 19: 80%  bucket 20: 40%  bucket 20: 50%  bucket 19: 90%  bucket 20: 60%  bucket 20: 70%  bucket 19: 100%  Sorting block of length 731 for bucket 19  (Using difference cover)  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 268 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 732 for bucket 19  Sorting block time: 00:00:00Returning block of 269 for bucket 20Getting block 21 of 30  Reserving size (777) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 21 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 22 for bucket 21Getting block 22 of 30  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 952 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 953 for bucket 22Getting block 23 of 30  Reserving size (777) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 763 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 764 for bucket 23Getting block 24 of 30  Reserving size (777) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:Getting block 25 of 30  bucket 24: 10%  Reserving size (777) for bucket 25  Calculating Z arrays for bucket 25  bucket 24: 20%  Entering block accumulator loop for bucket 25:  bucket 24: 30%  bucket 24: 40%  bucket 25: 10%  bucket 24: 50%  bucket 25: 20%  bucket 24: 60%  bucket 24: 70%  bucket 25: 30%  bucket 24: 80%  bucket 24: 90%  bucket 25: 40%  bucket 24: 100%  Sorting block of length 471 for bucket 24  (Using difference cover)  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%Getting block 26 of 30  bucket 25: 100%  Sorting block time: 00:00:00  Reserving size (777) for bucket 26  Sorting block of length 415 for bucket 25  (Using difference cover)Returning block of 472 for bucket 24  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  Sorting block time: 00:00:00Returning block of 416 for bucket 25  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 643 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 644 for bucket 26Getting block 27 of 30  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 592 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 593 for bucket 27Getting block 28 of 30  Reserving size (777) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%Getting block 29 of 30  bucket 28: 20%  Reserving size (777) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 28: 30%Getting block 30 of 30  bucket 28: 40%  bucket 29: 10%  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  bucket 29: 20%  Entering block accumulator loop for bucket 30:  bucket 28: 50%  bucket 29: 30%  bucket 30: 10%  bucket 28: 60%  bucket 30: 20%  bucket 29: 40%  bucket 30: 30%  bucket 28: 70%  bucket 29: 50%  bucket 30: 40%  bucket 28: 80%  bucket 30: 50%  bucket 29: 60%  bucket 30: 60%  bucket 28: 90%  bucket 29: 70%  bucket 30: 70%  bucket 28: 100%  Sorting block of length 684 for bucket 28  (Using difference cover)  bucket 30: 80%  bucket 29: 80%  bucket 30: 90%  bucket 29: 90%  bucket 30: 100%  Sorting block of length 602 for bucket 30  (Using difference cover)  bucket 29: 100%  Sorting block of length 240 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 685 for bucket 28  Sorting block time: 00:00:00Returning block of 241 for bucket 29  Sorting block time: 00:00:00Returning block of 603 for bucket 30Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 6, merged 21; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1Getting block 2 of 30Getting block 3 of 30  Calculating Z arrays for bucket 1  Reserving size (777) for bucket 2  Reserving size (777) for bucket 3Getting block 4 of 30  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  Reserving size (777) for bucket 4  Entering block accumulator loop for bucket 3:  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 2:  bucket 1: 10%  Entering block accumulator loop for bucket 4:  bucket 3: 10%  bucket 2: 10%  bucket 1: 20%  bucket 3: 20%  bucket 4: 10%  bucket 2: 20%  bucket 1: 30%  bucket 3: 30%  bucket 2: 30%  bucket 1: 40%  bucket 4: 20%  bucket 3: 40%  bucket 2: 40%  bucket 1: 50%  bucket 4: 30%  bucket 3: 50%  bucket 2: 50%  bucket 1: 60%  bucket 4: 40%  bucket 3: 60%  bucket 2: 60%  bucket 1: 70%  bucket 4: 50%  bucket 3: 70%  bucket 2: 70%  bucket 1: 80%  bucket 4: 60%  bucket 3: 80%  bucket 2: 80%  bucket 1: 90%  bucket 4: 70%  bucket 3: 90%  bucket 2: 90%  bucket 1: 100%  Sorting block of length 484 for bucket 1  (Using difference cover)  bucket 4: 80%  bucket 3: 100%  bucket 2: 100%  Sorting block of length 434 for bucket 3  (Using difference cover)  Sorting block of length 774 for bucket 2  bucket 4: 90%  (Using difference cover)  bucket 4: 100%  Sorting block of length 431 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 435 for bucket 3  Sorting block time: 00:00:00Returning block of 485 for bucket 1  Sorting block time: 00:00:00Returning block of 432 for bucket 4  Sorting block time: 00:00:00Returning block of 775 for bucket 2Getting block 5 of 30  Reserving size (777) for bucket 5Getting block 6 of 30  Calculating Z arrays for bucket 5  Reserving size (777) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 5: 10%  bucket 6: 10%  bucket 5: 20%  bucket 6: 20%  bucket 5: 30%  bucket 6: 30%  bucket 5: 40%  bucket 6: 40%  bucket 5: 50%  bucket 6: 50%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 5: 80%  bucket 6: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 776 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 179 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 777 for bucket 5  Sorting block time: 00:00:00Returning block of 180 for bucket 6Getting block 7 of 30  Reserving size (777) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%Getting block 8 of 30  Reserving size (777) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 50%  Entering block accumulator loop for bucket 8:  bucket 7: 60%  bucket 8: 10%  bucket 7: 70%  bucket 7: 80%  bucket 8: 20%  bucket 7: 90%  bucket 8: 30%  bucket 7: 100%  bucket 8: 40%  Sorting block of length 707 for bucket 7  (Using difference cover)  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 313 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 708 for bucket 7  Sorting block time: 00:00:00Returning block of 314 for bucket 8Getting block 9 of 30  Reserving size (777) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%Getting block 10 of 30  Reserving size (777) for bucket 10  bucket 9: 50%  Calculating Z arrays for bucket 10  bucket 9: 60%  Entering block accumulator loop for bucket 10:  bucket 9: 70%  bucket 10: 10%  bucket 9: 80%  bucket 9: 90%  bucket 10: 20%  bucket 9: 100%  Sorting block of length 535 for bucket 9  (Using difference cover)  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  Sorting block time: 00:00:00Returning block of 536 for bucket 9  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 680 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 681 for bucket 10Getting block 11 of 30  Reserving size (777) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 423 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 424 for bucket 11Getting block 12 of 30  Reserving size (777) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 371 for bucket 12  (Using difference cover)Getting block 13 of 30  Reserving size (777) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  Sorting block time: 00:00:00Getting block 14 of 30Returning block of 372 for bucket 12  Reserving size (777) for bucket 14  bucket 13: 20%  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 30%  bucket 13: 40%  bucket 14: 10%  bucket 13: 50%  bucket 14: 20%  bucket 13: 60%  bucket 14: 30%  bucket 13: 70%  bucket 14: 40%  bucket 13: 80%  bucket 14: 50%  bucket 13: 90%  bucket 14: 60%  bucket 13: 100%  Sorting block of length 595 for bucket 13  (Using difference cover)  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 708 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 596 for bucket 13  Sorting block time: 00:00:00Returning block of 709 for bucket 14Getting block 15 of 30  Reserving size (777) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 629 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 630 for bucket 15Getting block 16 of 30  Reserving size (777) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%Getting block 17 of 30  Reserving size (777) for bucket 17Getting block 18 of 30  Calculating Z arrays for bucket 17  bucket 16: 20%  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  bucket 16: 30%  Entering block accumulator loop for bucket 18:  bucket 17: 10%  bucket 16: 40%  bucket 18: 10%  bucket 17: 20%  bucket 16: 50%  bucket 16: 60%  bucket 17: 30%  bucket 18: 20%  bucket 16: 70%  bucket 17: 40%  bucket 18: 30%  bucket 16: 80%  bucket 17: 50%  bucket 16: 90%  bucket 17: 60%  bucket 18: 40%  bucket 16: 100%  Sorting block of length 750 for bucket 16  (Using difference cover)  bucket 17: 70%  bucket 18: 50%  bucket 17: 80%  bucket 17: 90%  bucket 18: 60%  bucket 17: 100%  Sorting block of length 606 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00  bucket 18: 70%Returning block of 751 for bucket 16  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block time: 00:00:00  Sorting block of length 722 for bucket 18  (Using difference cover)Returning block of 607 for bucket 17  Sorting block time: 00:00:00Returning block of 723 for bucket 18Getting block 19 of 30  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 418 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 419 for bucket 19Getting block 20 of 30  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 519 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 520 for bucket 20Getting block 21 of 30  Reserving size (777) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:Getting block 22 of 30  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  bucket 21: 10%  Entering block accumulator loop for bucket 22:  bucket 21: 20%  bucket 22: 10%  bucket 21: 30%  bucket 22: 20%  bucket 21: 40%  bucket 22: 30%  bucket 21: 50%  bucket 22: 40%  bucket 21: 60%  bucket 22: 50%  bucket 21: 70%  bucket 22: 60%  bucket 21: 80%  bucket 22: 70%  bucket 21: 90%  bucket 22: 80%  bucket 21: 100%  Sorting block of length 422 for bucket 21  (Using difference cover)  bucket 22: 90%  bucket 22: 100%  Sorting block of length 493 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 423 for bucket 21  Sorting block time: 00:00:00Returning block of 494 for bucket 22Getting block 23 of 30  Reserving size (777) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 510 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 511 for bucket 23Getting block 24 of 30  Reserving size (777) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 732 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 733 for bucket 24Getting block 25 of 30  Reserving size (777) for bucket 25  Calculating Z arrays for bucket 25Getting block 26 of 30  Reserving size (777) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 25:  Entering block accumulator loop for bucket 26:  bucket 25: 10%  bucket 26: 10%  bucket 25: 20%  bucket 26: 20%  bucket 25: 30%  bucket 26: 30%  bucket 25: 40%  bucket 26: 40%  bucket 25: 50%  bucket 25: 60%  bucket 26: 50%  bucket 25: 70%  bucket 26: 60%  bucket 25: 80%  bucket 25: 90%  bucket 26: 70%  bucket 25: 100%  Sorting block of length 457 for bucket 25  (Using difference cover)  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 647 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 458 for bucket 25  Sorting block time: 00:00:00Returning block of 648 for bucket 26Getting block 27 of 30  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 334 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 335 for bucket 27Getting block 28 of 30  Reserving size (777) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 631 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 632 for bucket 28Getting block 29 of 30  Reserving size (777) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:Getting block 30 of 30  bucket 29: 10%  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 29: 20%  bucket 30: 10%  bucket 29: 30%  bucket 30: 20%  bucket 29: 40%  bucket 30: 30%  bucket 30: 40%  bucket 29: 50%  bucket 30: 50%  bucket 30: 60%  bucket 29: 60%  bucket 30: 70%  bucket 29: 70%  bucket 30: 80%  bucket 30: 90%  bucket 29: 80%  bucket 30: 100%  Sorting block of length 677 for bucket 30  (Using difference cover)  bucket 29: 90%  bucket 29: 100%  Sorting block of length 582 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 678 for bucket 30  Sorting block time: 00:00:00Returning block of 583 for bucket 29Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #5)" name="4" time="62.30759930610657">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "377e725458a7e442",   "src": "hda"  },  "library|type": "paired_interleaved",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "e2deecbddec6305a",   "src": "hda"  },  "reference_genome|source": "history",  "rg|PL": "CAPILLARY",  "rg|read_group_id_conditional|ID": "rg1",  "rg|rg_selector": "set" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/6/5/f/dataset_65fc2403-6f88-40e8-9683-67dcb17df1f4.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/6/5/f/dataset_65fc2403-6f88-40e8-9683-67dcb17df1f4.dat\u0027 genome.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/f/9/3/dataset_f93915b5-ff70-459b-85cc-0d9e0332af25.dat\u0027 input_il.fastq \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   --interleaved \u0027input_il.fastq\u0027                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/e/2/2/dataset_e229a248-7400-49f4-9d44-373743582077.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2024-01-28T14:30:13.757786",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-jzzwg",  "galaxy_version": "21.09",  "history_id": "cbf056288c649de3",  "id": "e28167d309602a9a",  "inputs": {   "input_1": {    "id": "377e725458a7e442",    "src": "hda",    "uuid": "f93915b5-ff70-459b-85cc-0d9e0332af25"   },   "own_file": {    "id": "e2deecbddec6305a",    "src": "hda",    "uuid": "65fc2403-6f88-40e8-9683-67dcb17df1f4"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1706452252.0000000",    "title": "Job End Time",    "value": "2024-01-28 14:30:52"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1706452252.0000000",    "title": "Job Start Time",    "value": "2024-01-28 14:30:52"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "12000.0000000",    "title": "Memory Allocated (MB)",    "value": "12000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_stderr": "Building a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n50.00% overall alignment rate\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/6/5/f/dataset_65fc2403-6f88-40e8-9683-67dcb17df1f4.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\nGetting block 2 of 30\n  bucket 1: 20%\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  bucket 1: 30%\n  Reserving size (777) for bucket 3\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  bucket 1: 40%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 70%\n  bucket 3: 10%\n  bucket 1: 80%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 90%\n  bucket 3: 20%\n  bucket 1: 100%\n  bucket 4: 20%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 2: 70%\n  bucket 3: 70%\n  bucket 4: 90%\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  bucket 2: 80%\n  bucket 4: 100%\n  bucket 3: 80%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 7: 60%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  bucket 6: 80%\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 6: 90%\n  bucket 7: 80%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  bucket 9: 10%\n  Reserving size (777) for bucket 10\n  bucket 9: 20%\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 10%\n  bucket 9: 60%\n  bucket 10: 20%\n  bucket 9: 70%\n  bucket 10: 30%\n  bucket 9: 80%\n  bucket 10: 40%\n  bucket 9: 90%\n  bucket 10: 50%\n  bucket 9: 100%\n  bucket 10: 60%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\nGetting block 12 of 30\n  Calculating Z arrays for bucket 11\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 30\n  bucket 14: 10%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 15: 30%\n  bucket 14: 60%\n  bucket 15: 40%\n  bucket 14: 70%\n  bucket 15: 50%\n  bucket 14: 80%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 10%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\n  bucket 19: 10%\n  bucket 18: 30%\n  bucket 19: 20%\n  bucket 18: 40%\n  bucket 19: 30%\n  bucket 18: 50%\n  bucket 19: 40%\n  bucket 18: 60%\n  bucket 19: 50%\n  bucket 18: 70%\n  bucket 19: 60%\n  bucket 18: 80%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 22: 40%\n  bucket 23: 30%\n  bucket 22: 50%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 30\n  Entering block accumulator loop for bucket 24:\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 24: 50%\n  bucket 25: 60%\n  bucket 24: 60%\n  bucket 25: 70%\n  bucket 24: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 30\n  bucket 26: 20%\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 30%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 27: 30%\n  bucket 26: 70%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 28: 70%\n  bucket 29: 90%\n  bucket 28: 80%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 4: 40%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 1: 50%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 3: 70%\n  bucket 1: 70%\n  bucket 4: 70%\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 1: 80%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 1: 90%\n  bucket 4: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 1: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\n  bucket 5: 20%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 40%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 50%\n  bucket 6: 20%\n  bucket 5: 60%\n  bucket 7: 20%\n  bucket 5: 70%\n  bucket 6: 30%\n  bucket 5: 80%\n  bucket 7: 30%\n  bucket 5: 90%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  Sorting block time: 00:00:00\n  bucket 6: 90%\nReturning block of 777 for bucket 5\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  bucket 9: 10%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  bucket 9: 30%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  bucket 10: 10%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 30\n  bucket 16: 10%\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 17: 40%\n  bucket 16: 60%\n  bucket 17: 50%\n  bucket 16: 70%\n  bucket 17: 60%\n  bucket 16: 80%\n  bucket 17: 70%\n  bucket 16: 90%\n  bucket 17: 80%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nGetting block 18 of 30\nReturning block of 751 for bucket 16\nReturning block of 607 for bucket 17\n  Reserving size (777) for bucket 18\nGetting block 19 of 30\n  Calculating Z arrays for bucket 18\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 18:\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 10%\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 18: 20%\n  bucket 19: 30%\n  bucket 18: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 18: 40%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 18: 50%\n  bucket 19: 80%\n  bucket 18: 60%\n  bucket 19: 90%\n  bucket 18: 70%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 30%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 40%\n  bucket 22: 10%\n  bucket 21: 50%\n  bucket 22: 20%\n  bucket 21: 60%\n  bucket 22: 30%\n  bucket 21: 70%\n  bucket 22: 40%\n  bucket 21: 80%\n  bucket 22: 50%\n  bucket 21: 90%\n  bucket 22: 60%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 29: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "494f8b1988d58da9",    "src": "hda",    "uuid": "e229a248-7400-49f4-9d44-373743582077"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 3, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 339, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_interleaved\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 340, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n50.00% overall alignment rate\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/6/5/f/dataset_65fc2403-6f88-40e8-9683-67dcb17df1f4.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\nGetting block 2 of 30\n  bucket 1: 20%\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  bucket 1: 30%\n  Reserving size (777) for bucket 3\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  bucket 1: 40%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 70%\n  bucket 3: 10%\n  bucket 1: 80%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 90%\n  bucket 3: 20%\n  bucket 1: 100%\n  bucket 4: 20%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 2: 70%\n  bucket 3: 70%\n  bucket 4: 90%\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  bucket 2: 80%\n  bucket 4: 100%\n  bucket 3: 80%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 7: 60%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  bucket 6: 80%\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 6: 90%\n  bucket 7: 80%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  bucket 9: 10%\n  Reserving size (777) for bucket 10\n  bucket 9: 20%\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 10%\n  bucket 9: 60%\n  bucket 10: 20%\n  bucket 9: 70%\n  bucket 10: 30%\n  bucket 9: 80%\n  bucket 10: 40%\n  bucket 9: 90%\n  bucket 10: 50%\n  bucket 9: 100%\n  bucket 10: 60%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\nGetting block 12 of 30\n  Calculating Z arrays for bucket 11\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 30\n  bucket 14: 10%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 15: 30%\n  bucket 14: 60%\n  bucket 15: 40%\n  bucket 14: 70%\n  bucket 15: 50%\n  bucket 14: 80%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 10%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\n  bucket 19: 10%\n  bucket 18: 30%\n  bucket 19: 20%\n  bucket 18: 40%\n  bucket 19: 30%\n  bucket 18: 50%\n  bucket 19: 40%\n  bucket 18: 60%\n  bucket 19: 50%\n  bucket 18: 70%\n  bucket 19: 60%\n  bucket 18: 80%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 22: 40%\n  bucket 23: 30%\n  bucket 22: 50%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 30\n  Entering block accumulator loop for bucket 24:\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 24: 50%\n  bucket 25: 60%\n  bucket 24: 60%\n  bucket 25: 70%\n  bucket 24: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 30\n  bucket 26: 20%\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 30%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 27: 30%\n  bucket 26: 70%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 28: 70%\n  bucket 29: 90%\n  bucket 28: 80%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 4: 40%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 1: 50%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 3: 70%\n  bucket 1: 70%\n  bucket 4: 70%\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 1: 80%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 1: 90%\n  bucket 4: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 1: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\n  bucket 5: 20%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 40%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 50%\n  bucket 6: 20%\n  bucket 5: 60%\n  bucket 7: 20%\n  bucket 5: 70%\n  bucket 6: 30%\n  bucket 5: 80%\n  bucket 7: 30%\n  bucket 5: 90%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  Sorting block time: 00:00:00\n  bucket 6: 90%\nReturning block of 777 for bucket 5\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  bucket 9: 10%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  bucket 9: 30%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  bucket 10: 10%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 30\n  bucket 16: 10%\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 17: 40%\n  bucket 16: 60%\n  bucket 17: 50%\n  bucket 16: 70%\n  bucket 17: 60%\n  bucket 16: 80%\n  bucket 17: 70%\n  bucket 16: 90%\n  bucket 17: 80%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nGetting block 18 of 30\nReturning block of 751 for bucket 16\nReturning block of 607 for bucket 17\n  Reserving size (777) for bucket 18\nGetting block 19 of 30\n  Calculating Z arrays for bucket 18\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 18:\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 10%\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 18: 20%\n  bucket 19: 30%\n  bucket 18: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 18: 40%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 18: 50%\n  bucket 19: 80%\n  bucket 18: 60%\n  bucket 19: 90%\n  bucket 18: 70%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 30%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 40%\n  bucket 22: 10%\n  bucket 21: 50%\n  bucket 22: 20%\n  bucket 21: 60%\n  bucket 22: 30%\n  bucket 21: 70%\n  bucket 22: 40%\n  bucket 21: 80%\n  bucket 22: 50%\n  bucket 21: 90%\n  bucket 22: 60%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 29: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2024-01-28T14:31:03.393248",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_tp9eky1l.sam v. /tmp/history_bam_converted_to_sam_yjvhhxjc.sam )\n--- local_file\n+++ history_data\n@@ -1,7 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n @RG\tID:rg1\tPL:CAPILLARY\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome --interleaved input_il.fastq --rg-id rg1 --rg PL:CAPILLARY\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome --rg-id rg1 --rg PL:CAPILLARY --interleaved input_il.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/248/tmp -O bam -o /galaxy/server/database/objects/e/2/2/dataset_e229a248-7400-49f4-9d44-373743582077.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t153\tchrM\t1\t3\t4M23I224M\t=\t1\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tFB099BFFFBFBBFEF?EFFFB090FFFFFFFFFFD;;.GFFGFGFA0FGFFEFEGGGFBCE;BGHHFFGHGEHFHHHHGFE@ECCDCGGGGGEHFFFGGGGGBHHGFGGGCGHHGGGGGGHGGGGGGHHHDGCFFBHGGGGGHHHHHFHFHGGGHHHHGHGGGGGHHHGGHGHHHHHHHGGHGGHHGGHHHHHHHEHHHHHHHHGGGGHHHHHHHHHHHHHHHHGHHHGGGGGGGGGGFFFFCFFCCCCB\tAS:i:-99\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:23\tNM:i:29\tMD:Z:0G0A0T0C11A56A155\tYT:Z:UP\tRG:Z:rg1\n" ], "status": "failure", "test_index": 4, "time_seconds": 62.30759930610657, "tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 16  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/6/5/f/dataset_65fc2403-6f88-40e8-9683-67dcb17df1f4.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 4, merged 22; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 1:  bucket 1: 10%Getting block 2 of 30  bucket 1: 20%  Reserving size (777) for bucket 2Getting block 3 of 30Getting block 4 of 30  bucket 1: 30%  Reserving size (777) for bucket 3  Calculating Z arrays for bucket 2  Reserving size (777) for bucket 4  Calculating Z arrays for bucket 3  bucket 1: 40%  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 2:  bucket 1: 50%  Entering block accumulator loop for bucket 3:  bucket 1: 60%  Entering block accumulator loop for bucket 4:  bucket 2: 10%  bucket 1: 70%  bucket 3: 10%  bucket 1: 80%  bucket 4: 10%  bucket 2: 20%  bucket 1: 90%  bucket 3: 20%  bucket 1: 100%  bucket 4: 20%  Sorting block of length 689 for bucket 1  (Using difference cover)  bucket 2: 30%  bucket 3: 30%  bucket 4: 30%  bucket 2: 40%  bucket 4: 40%  bucket 3: 40%  bucket 4: 50%  bucket 2: 50%  bucket 3: 50%  bucket 4: 60%  bucket 4: 70%  bucket 2: 60%  bucket 3: 60%  bucket 4: 80%  bucket 2: 70%  bucket 3: 70%  bucket 4: 90%  Sorting block time: 00:00:00Returning block of 690 for bucket 1  bucket 2: 80%  bucket 4: 100%  bucket 3: 80%  Sorting block of length 499 for bucket 4  (Using difference cover)  bucket 2: 90%  bucket 3: 90%  bucket 2: 100%  Sorting block of length 445 for bucket 2  (Using difference cover)  bucket 3: 100%  Sorting block of length 629 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 500 for bucket 4  Sorting block time: 00:00:00Returning block of 446 for bucket 2  Sorting block time: 00:00:00Returning block of 630 for bucket 3Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 30  Reserving size (777) for bucket 6Getting block 7 of 30  Calculating Z arrays for bucket 6  bucket 5: 10%  Reserving size (777) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 6:  bucket 5: 20%  Entering block accumulator loop for bucket 7:  bucket 5: 30%  bucket 6: 10%  bucket 7: 10%  bucket 5: 40%  bucket 6: 20%  bucket 7: 20%  bucket 5: 50%  bucket 6: 30%  bucket 7: 30%  bucket 5: 60%  bucket 6: 40%  bucket 5: 70%  bucket 6: 50%  bucket 7: 40%  bucket 5: 80%  bucket 6: 60%  bucket 7: 50%  bucket 5: 90%  bucket 6: 70%  bucket 7: 60%  bucket 5: 100%  Sorting block of length 738 for bucket 5  bucket 6: 80%  (Using difference cover)  bucket 7: 70%  bucket 6: 90%  bucket 7: 80%  bucket 6: 100%  Sorting block of length 305 for bucket 6  (Using difference cover)  bucket 7: 90%  bucket 7: 100%  Sorting block of length 705 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 739 for bucket 5  Sorting block time: 00:00:00Returning block of 306 for bucket 6  Sorting block time: 00:00:00Returning block of 706 for bucket 7Getting block 8 of 30  Reserving size (777) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 772 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 773 for bucket 8Getting block 9 of 30  Reserving size (777) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 30  bucket 9: 10%  Reserving size (777) for bucket 10  bucket 9: 20%  Calculating Z arrays for bucket 10  bucket 9: 30%  Entering block accumulator loop for bucket 10:  bucket 9: 40%  bucket 9: 50%  bucket 10: 10%  bucket 9: 60%  bucket 10: 20%  bucket 9: 70%  bucket 10: 30%  bucket 9: 80%  bucket 10: 40%  bucket 9: 90%  bucket 10: 50%  bucket 9: 100%  bucket 10: 60%  Sorting block of length 546 for bucket 9  (Using difference cover)  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 247 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 248 for bucket 10  Sorting block time: 00:00:00Returning block of 547 for bucket 9Getting block 11 of 30  Reserving size (777) for bucket 11Getting block 12 of 30  Calculating Z arrays for bucket 11  Reserving size (777) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 611 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 485 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 486 for bucket 12  Sorting block time: 00:00:00Returning block of 612 for bucket 11Getting block 13 of 30  Reserving size (777) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 597 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 598 for bucket 13Getting block 14 of 30  Reserving size (777) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:Getting block 15 of 30  bucket 14: 10%  Reserving size (777) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 14: 20%  bucket 14: 30%  bucket 15: 10%  bucket 14: 40%  bucket 15: 20%  bucket 14: 50%  bucket 15: 30%  bucket 14: 60%  bucket 15: 40%  bucket 14: 70%  bucket 15: 50%  bucket 14: 80%  bucket 15: 60%  bucket 14: 90%  bucket 15: 70%  bucket 14: 100%  Sorting block of length 689 for bucket 14  (Using difference cover)  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 543 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 690 for bucket 14  Sorting block time: 00:00:00Returning block of 544 for bucket 15Getting block 16 of 30  Reserving size (777) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 723 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 724 for bucket 16Getting block 17 of 30  Reserving size (777) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 578 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 579 for bucket 17Getting block 18 of 30  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:Getting block 19 of 30  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19  bucket 18: 10%  Entering block accumulator loop for bucket 19:  bucket 18: 20%  bucket 19: 10%  bucket 18: 30%  bucket 19: 20%  bucket 18: 40%  bucket 19: 30%  bucket 18: 50%  bucket 19: 40%  bucket 18: 60%  bucket 19: 50%  bucket 18: 70%  bucket 19: 60%  bucket 18: 80%  bucket 19: 70%  bucket 19: 80%  bucket 18: 90%  bucket 19: 90%  bucket 18: 100%  Sorting block of length 356 for bucket 18  (Using difference cover)  bucket 19: 100%  Sorting block of length 731 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 357 for bucket 18  Sorting block time: 00:00:00Returning block of 732 for bucket 19Getting block 20 of 30  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 268 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 269 for bucket 20Getting block 21 of 30  Reserving size (777) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 21 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 22 for bucket 21Getting block 22 of 30  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:Getting block 23 of 30  Reserving size (777) for bucket 23  Calculating Z arrays for bucket 23  bucket 22: 10%  Entering block accumulator loop for bucket 23:  bucket 22: 20%  bucket 23: 10%  bucket 22: 30%  bucket 23: 20%  bucket 22: 40%  bucket 23: 30%  bucket 22: 50%  bucket 23: 40%  bucket 22: 60%  bucket 23: 50%  bucket 22: 70%  bucket 23: 60%  bucket 22: 80%  bucket 23: 70%  bucket 22: 90%  bucket 23: 80%  bucket 22: 100%  Sorting block of length 952 for bucket 22  (Using difference cover)  bucket 23: 90%  bucket 23: 100%  Sorting block of length 763 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 953 for bucket 22  Sorting block time: 00:00:00Returning block of 764 for bucket 23Getting block 24 of 30  Reserving size (777) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 30  Entering block accumulator loop for bucket 24:  Reserving size (777) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 24: 10%  bucket 25: 10%  bucket 25: 20%  bucket 24: 20%  bucket 25: 30%  bucket 24: 30%  bucket 25: 40%  bucket 24: 40%  bucket 25: 50%  bucket 24: 50%  bucket 25: 60%  bucket 24: 60%  bucket 25: 70%  bucket 24: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 415 for bucket 25  (Using difference cover)  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 471 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 416 for bucket 25  Sorting block time: 00:00:00Returning block of 472 for bucket 24Getting block 26 of 30  Reserving size (777) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%Getting block 27 of 30  bucket 26: 20%  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 30%  Entering block accumulator loop for bucket 27:  bucket 26: 40%  bucket 27: 10%  bucket 26: 50%  bucket 27: 20%  bucket 26: 60%  bucket 27: 30%  bucket 26: 70%  bucket 27: 40%  bucket 27: 50%  bucket 26: 80%  bucket 27: 60%  bucket 26: 90%  bucket 27: 70%  bucket 26: 100%  Sorting block of length 643 for bucket 26  (Using difference cover)  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 592 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 644 for bucket 26  Sorting block time: 00:00:00Returning block of 593 for bucket 27Getting block 28 of 30  Reserving size (777) for bucket 28  Calculating Z arrays for bucket 28Getting block 29 of 30  Reserving size (777) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 28:  Entering block accumulator loop for bucket 29:  bucket 28: 10%  bucket 29: 10%  bucket 28: 20%  bucket 29: 20%  bucket 28: 30%  bucket 29: 30%  bucket 28: 40%  bucket 29: 40%  bucket 28: 50%  bucket 29: 50%  bucket 28: 60%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 28: 70%  bucket 29: 90%  bucket 28: 80%  bucket 29: 100%  Sorting block of length 240 for bucket 29  (Using difference cover)  bucket 28: 90%  bucket 28: 100%  Sorting block of length 684 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 241 for bucket 29  Sorting block time: 00:00:00Returning block of 685 for bucket 28Getting block 30 of 30  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 602 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 603 for bucket 30Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 6, merged 21; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1Getting block 2 of 30Getting block 3 of 30Getting block 4 of 30  Calculating Z arrays for bucket 1  Reserving size (777) for bucket 2  Reserving size (777) for bucket 3  Reserving size (777) for bucket 4  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 4:  bucket 1: 10%  bucket 3: 10%  bucket 2: 10%  bucket 4: 10%  bucket 1: 20%  bucket 3: 20%  bucket 2: 20%  bucket 4: 20%  bucket 3: 30%  bucket 2: 30%  bucket 1: 30%  bucket 4: 30%  bucket 3: 40%  bucket 2: 40%  bucket 4: 40%  bucket 1: 40%  bucket 2: 50%  bucket 3: 50%  bucket 4: 50%  bucket 1: 50%  bucket 2: 60%  bucket 3: 60%  bucket 4: 60%  bucket 1: 60%  bucket 2: 70%  bucket 3: 70%  bucket 1: 70%  bucket 4: 70%  bucket 2: 80%  bucket 3: 80%  bucket 1: 80%  bucket 4: 80%  bucket 2: 90%  bucket 3: 90%  bucket 1: 90%  bucket 4: 90%  bucket 2: 100%  Sorting block of length 774 for bucket 2  (Using difference cover)  bucket 3: 100%  bucket 1: 100%  Sorting block of length 434 for bucket 3  (Using difference cover)  Sorting block of length 484 for bucket 1  (Using difference cover)  bucket 4: 100%  Sorting block of length 431 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 775 for bucket 2  Sorting block time: 00:00:00Returning block of 435 for bucket 3  Sorting block time: 00:00:00Returning block of 432 for bucket 4  Sorting block time: 00:00:00Returning block of 485 for bucket 1Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%Getting block 6 of 30  bucket 5: 20%  Reserving size (777) for bucket 6  Calculating Z arrays for bucket 6Getting block 7 of 30  Reserving size (777) for bucket 7  Calculating Z arrays for bucket 7  bucket 5: 30%  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 7:  bucket 5: 40%  bucket 6: 10%  bucket 7: 10%  bucket 5: 50%  bucket 6: 20%  bucket 5: 60%  bucket 7: 20%  bucket 5: 70%  bucket 6: 30%  bucket 5: 80%  bucket 7: 30%  bucket 5: 90%  bucket 6: 40%  bucket 7: 40%  bucket 5: 100%  Sorting block of length 776 for bucket 5  (Using difference cover)  bucket 6: 50%  bucket 7: 50%  bucket 6: 60%  bucket 7: 60%  bucket 6: 70%  bucket 7: 70%  bucket 6: 80%  bucket 7: 80%  Sorting block time: 00:00:00  bucket 6: 90%Returning block of 777 for bucket 5  bucket 7: 90%  bucket 6: 100%  Sorting block of length 179 for bucket 6  (Using difference cover)  bucket 7: 100%  Sorting block of length 707 for bucket 7  (Using difference cover)Getting block 8 of 30  Reserving size (777) for bucket 8  Calculating Z arrays for bucket 8  Sorting block time: 00:00:00Returning block of 180 for bucket 6  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  Sorting block time: 00:00:00Returning block of 708 for bucket 7  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 313 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 314 for bucket 8Getting block 9 of 30  Reserving size (777) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 30  bucket 9: 10%  Reserving size (777) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 20%  bucket 9: 30%  Entering block accumulator loop for bucket 10:  bucket 9: 40%  bucket 10: 10%  bucket 9: 50%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 9: 60%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 535 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 680 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 536 for bucket 9  Sorting block time: 00:00:00Returning block of 681 for bucket 10Getting block 11 of 30  Reserving size (777) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 423 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 424 for bucket 11Getting block 12 of 30  Reserving size (777) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 371 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 372 for bucket 12Getting block 13 of 30  Reserving size (777) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 595 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 596 for bucket 13Getting block 14 of 30  Reserving size (777) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 708 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 709 for bucket 14Getting block 15 of 30  Reserving size (777) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 629 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 630 for bucket 15Getting block 16 of 30  Reserving size (777) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:Getting block 17 of 30  bucket 16: 10%  Reserving size (777) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 16: 20%  bucket 17: 10%  bucket 16: 30%  bucket 17: 20%  bucket 16: 40%  bucket 17: 30%  bucket 16: 50%  bucket 17: 40%  bucket 16: 60%  bucket 17: 50%  bucket 16: 70%  bucket 17: 60%  bucket 16: 80%  bucket 17: 70%  bucket 16: 90%  bucket 17: 80%  bucket 16: 100%  Sorting block of length 750 for bucket 16  (Using difference cover)  bucket 17: 90%  bucket 17: 100%  Sorting block of length 606 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Getting block 18 of 30Returning block of 751 for bucket 16Returning block of 607 for bucket 17  Reserving size (777) for bucket 18Getting block 19 of 30  Calculating Z arrays for bucket 18  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 18:  Entering block accumulator loop for bucket 19:  bucket 18: 10%  bucket 19: 10%  bucket 19: 20%  bucket 18: 20%  bucket 19: 30%  bucket 18: 30%  bucket 19: 40%  bucket 19: 50%  bucket 18: 40%  bucket 19: 60%  bucket 19: 70%  bucket 18: 50%  bucket 19: 80%  bucket 18: 60%  bucket 19: 90%  bucket 18: 70%  bucket 19: 100%  Sorting block of length 418 for bucket 19  (Using difference cover)  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 722 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 419 for bucket 19  Sorting block time: 00:00:00Returning block of 723 for bucket 18Getting block 20 of 30  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 519 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 520 for bucket 20Getting block 21 of 30  Reserving size (777) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%Getting block 22 of 30  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  bucket 21: 30%  Entering block accumulator loop for bucket 22:  bucket 21: 40%  bucket 22: 10%  bucket 21: 50%  bucket 22: 20%  bucket 21: 60%  bucket 22: 30%  bucket 21: 70%  bucket 22: 40%  bucket 21: 80%  bucket 22: 50%  bucket 21: 90%  bucket 22: 60%  bucket 21: 100%  Sorting block of length 422 for bucket 21  (Using difference cover)  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 493 for bucket 22  Sorting block time: 00:00:00  (Using difference cover)Returning block of 423 for bucket 21  Sorting block time: 00:00:00Returning block of 494 for bucket 22Getting block 23 of 30  Reserving size (777) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 510 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 511 for bucket 23Getting block 24 of 30  Reserving size (777) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 30  Reserving size (777) for bucket 25  Entering block accumulator loop for bucket 24:  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 24: 10%  bucket 25: 10%  bucket 24: 20%  bucket 25: 20%  bucket 24: 30%  bucket 25: 30%  bucket 24: 40%  bucket 25: 40%  bucket 24: 50%  bucket 25: 50%  bucket 24: 60%  bucket 25: 60%  bucket 24: 70%  bucket 25: 70%  bucket 24: 80%  bucket 25: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 732 for bucket 24  (Using difference cover)  bucket 25: 90%  bucket 25: 100%  Sorting block of length 457 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 733 for bucket 24  Sorting block time: 00:00:00Returning block of 458 for bucket 25Getting block 26 of 30  Reserving size (777) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 647 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 648 for bucket 26Getting block 27 of 30  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 334 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 335 for bucket 27Getting block 28 of 30  Reserving size (777) for bucket 28  Calculating Z arrays for bucket 28Getting block 29 of 30  Reserving size (777) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 28:  Entering block accumulator loop for bucket 29:  bucket 28: 10%  bucket 29: 10%  bucket 28: 20%  bucket 29: 20%  bucket 28: 30%  bucket 29: 30%  bucket 28: 40%  bucket 29: 40%  bucket 28: 50%  bucket 29: 50%  bucket 28: 60%  bucket 29: 60%  bucket 28: 70%  bucket 29: 70%  bucket 28: 80%  bucket 29: 80%  bucket 28: 90%  bucket 29: 90%  bucket 28: 100%  Sorting block of length 631 for bucket 28  (Using difference cover)  bucket 29: 100%  Sorting block of length 582 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 583 for bucket 29  Sorting block time: 00:00:00Returning block of 632 for bucket 28Getting block 30 of 30  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 677 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 678 for bucket 30Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index3 reads; of these:  3 (100.00%) were paired; of these:    2 (66.67%) aligned concordantly 0 times    1 (33.33%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    2 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    2 pairs aligned 0 times concordantly or discordantly; of these:      4 mates make up the pairs; of these:        3 (75.00%) aligned 0 times        1 (25.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times50.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #6)" name="5" time="68.61701369285583">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "434a5c79f8ba8603",   "src": "hda"  },  "library|input_2": {   "id": "ea3d40150b11c73f",   "src": "hda"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "c87c74b0d58f26d9",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/d/2/c/dataset_d2c720b9-7eeb-4ca9-88f2-f25abafea255.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/d/2/c/dataset_d2c720b9-7eeb-4ca9-88f2-f25abafea255.dat\u0027 genome.fa \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/8/a/1/dataset_8a1ae34e-408b-4e76-873e-b9ca2aadcfe5.dat\u0027 input_f.fastq.gz \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/f/5/0/dataset_f50613a6-fb34-40c9-9612-22234aad845c.dat\u0027 input_r.fastq.gz \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   -1 \u0027input_f.fastq.gz\u0027 -2 \u0027input_r.fastq.gz\u0027                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/c/c/f/dataset_ccf3ded1-adff-479d-8333-793397d03ed6.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2024-01-28T14:31:21.343752",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-bhtfr",  "galaxy_version": "21.09",  "history_id": "cbf056288c649de3",  "id": "b6e79117b944b613",  "inputs": {   "input_1": {    "id": "434a5c79f8ba8603",    "src": "hda",    "uuid": "8a1ae34e-408b-4e76-873e-b9ca2aadcfe5"   },   "input_2": {    "id": "ea3d40150b11c73f",    "src": "hda",    "uuid": "f50613a6-fb34-40c9-9612-22234aad845c"   },   "own_file": {    "id": "c87c74b0d58f26d9",    "src": "hda",    "uuid": "d2c720b9-7eeb-4ca9-88f2-f25abafea255"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1706452321.0000000",    "title": "Job End Time",    "value": "2024-01-28 14:32:01"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1706452320.0000000",    "title": "Job Start Time",    "value": "2024-01-28 14:32:00"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "12000.0000000",    "title": "Memory Allocated (MB)",    "value": "12000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/d/2/c/dataset_d2c720b9-7eeb-4ca9-88f2-f25abafea255.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 30\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  bucket 1: 10%\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 4: 10%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 1: 100%\n  bucket 2: 80%\n  bucket 4: 50%\n  bucket 3: 80%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 7: 30%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 7: 50%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 7: 60%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 7: 80%\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Entering block accumulator loop for bucket 9:\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  Sorting block time: 00:00:00\n  bucket 14: 10%\nReturning block of 598 for bucket 13\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 15: 40%\n  bucket 16: 40%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 15: 60%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 16: 70%\n  bucket 15: 80%\n  bucket 16: 80%\n  bucket 15: 90%\n  bucket 16: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\nGetting block 30 of 30\n  Calculating Z arrays for bucket 29\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 29:\n  bucket 30: 10%\n  bucket 29: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 20%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 30%\n  bucket 30: 60%\n  bucket 29: 40%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 29: 50%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\n  bucket 1: 10%\n  Reserving size (777) for bucket 2\n  bucket 1: 20%\nGetting block 3 of 30\n  Calculating Z arrays for bucket 2\nGetting block 4 of 30\n  bucket 1: 30%\n  Reserving size (777) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Reserving size (777) for bucket 4\n  bucket 1: 40%\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 50%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 60%\n  bucket 2: 20%\n  bucket 1: 70%\n  bucket 2: 30%\n  bucket 3: 10%\n  bucket 1: 80%\n  bucket 4: 10%\n  bucket 2: 40%\n  bucket 3: 20%\n  bucket 1: 90%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 2: 50%\n  bucket 1: 100%\n  bucket 4: 30%\n  bucket 3: 40%\n  Sorting block of length 484 for bucket 1\n  bucket 2: 60%\n  (Using difference cover)\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 2: 100%\n  Sorting block time: 00:00:00\n  bucket 4: 80%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\nReturning block of 485 for bucket 1\n  bucket 3: 90%\n  Sorting block time: 00:00:00\n  bucket 4: 90%\n  bucket 3: 100%\nReturning block of 775 for bucket 2\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\nGetting block 6 of 30\n  bucket 5: 30%\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  bucket 5: 40%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 50%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 5: 60%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 5: 70%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 5: 80%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 5: 90%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 30\nGetting block 11 of 30\n  Reserving size (777) for bucket 10\n  bucket 9: 40%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 11\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 60%\n  bucket 11: 10%\n  bucket 10: 10%\n  bucket 9: 70%\n  bucket 11: 20%\n  bucket 9: 80%\n  bucket 10: 20%\n  bucket 11: 30%\n  bucket 9: 90%\n  bucket 10: 30%\n  bucket 11: 40%\n  bucket 9: 100%\n  bucket 10: 40%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 11: 50%\n  bucket 10: 50%\n  bucket 11: 60%\n  bucket 10: 60%\n  bucket 11: 70%\n  bucket 10: 70%\n  bucket 11: 80%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 80%\n  bucket 11: 90%\n  bucket 10: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 20%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 15: 30%\n  bucket 14: 60%\n  bucket 15: 40%\n  bucket 14: 70%\n  bucket 15: 50%\n  bucket 14: 80%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\nGetting block 22 of 30\n  bucket 21: 30%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 40%\n  bucket 22: 10%\n  bucket 21: 50%\n  bucket 22: 20%\n  bucket 21: 60%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 30\n  Entering block accumulator loop for bucket 23:\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 24: 40%\n  bucket 23: 50%\n  bucket 24: 50%\n  bucket 23: 60%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 70%\n  bucket 24: 80%\n  bucket 23: 80%\n  bucket 24: 90%\n  bucket 23: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\nGetting block 26 of 30\n  Calculating Z arrays for bucket 25\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 25:\n  bucket 26: 10%\n  bucket 25: 10%\n  bucket 26: 20%\n  bucket 25: 20%\n  bucket 26: 30%\n  bucket 25: 30%\n  bucket 26: 40%\n  bucket 25: 40%\n  bucket 26: 50%\n  bucket 25: 50%\n  bucket 26: 60%\n  bucket 25: 60%\n  bucket 26: 70%\n  bucket 25: 70%\n  bucket 26: 80%\n  bucket 25: 80%\n  bucket 26: 90%\n  bucket 25: 90%\n  bucket 26: 100%\n  bucket 25: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 20%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 29: 10%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 29: 80%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "1183b3c18cde60a8",    "src": "hda",    "uuid": "ccf3ded1-adff-479d-8333-793397d03ed6"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 342, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 343, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 344, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/d/2/c/dataset_d2c720b9-7eeb-4ca9-88f2-f25abafea255.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 30\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  bucket 1: 10%\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 4: 10%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 1: 100%\n  bucket 2: 80%\n  bucket 4: 50%\n  bucket 3: 80%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 7: 30%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 7: 50%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 7: 60%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 7: 80%\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Entering block accumulator loop for bucket 9:\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  Sorting block time: 00:00:00\n  bucket 14: 10%\nReturning block of 598 for bucket 13\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 15: 40%\n  bucket 16: 40%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 15: 60%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 16: 70%\n  bucket 15: 80%\n  bucket 16: 80%\n  bucket 15: 90%\n  bucket 16: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\nGetting block 30 of 30\n  Calculating Z arrays for bucket 29\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 29:\n  bucket 30: 10%\n  bucket 29: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 20%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 30%\n  bucket 30: 60%\n  bucket 29: 40%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 29: 50%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\n  bucket 1: 10%\n  Reserving size (777) for bucket 2\n  bucket 1: 20%\nGetting block 3 of 30\n  Calculating Z arrays for bucket 2\nGetting block 4 of 30\n  bucket 1: 30%\n  Reserving size (777) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Reserving size (777) for bucket 4\n  bucket 1: 40%\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 50%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 60%\n  bucket 2: 20%\n  bucket 1: 70%\n  bucket 2: 30%\n  bucket 3: 10%\n  bucket 1: 80%\n  bucket 4: 10%\n  bucket 2: 40%\n  bucket 3: 20%\n  bucket 1: 90%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 2: 50%\n  bucket 1: 100%\n  bucket 4: 30%\n  bucket 3: 40%\n  Sorting block of length 484 for bucket 1\n  bucket 2: 60%\n  (Using difference cover)\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 2: 100%\n  Sorting block time: 00:00:00\n  bucket 4: 80%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\nReturning block of 485 for bucket 1\n  bucket 3: 90%\n  Sorting block time: 00:00:00\n  bucket 4: 90%\n  bucket 3: 100%\nReturning block of 775 for bucket 2\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\nGetting block 6 of 30\n  bucket 5: 30%\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  bucket 5: 40%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 50%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 5: 60%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 5: 70%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 5: 80%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 5: 90%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 30\nGetting block 11 of 30\n  Reserving size (777) for bucket 10\n  bucket 9: 40%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 11\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 60%\n  bucket 11: 10%\n  bucket 10: 10%\n  bucket 9: 70%\n  bucket 11: 20%\n  bucket 9: 80%\n  bucket 10: 20%\n  bucket 11: 30%\n  bucket 9: 90%\n  bucket 10: 30%\n  bucket 11: 40%\n  bucket 9: 100%\n  bucket 10: 40%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 11: 50%\n  bucket 10: 50%\n  bucket 11: 60%\n  bucket 10: 60%\n  bucket 11: 70%\n  bucket 10: 70%\n  bucket 11: 80%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 80%\n  bucket 11: 90%\n  bucket 10: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 20%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 15: 30%\n  bucket 14: 60%\n  bucket 15: 40%\n  bucket 14: 70%\n  bucket 15: 50%\n  bucket 14: 80%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\nGetting block 22 of 30\n  bucket 21: 30%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 40%\n  bucket 22: 10%\n  bucket 21: 50%\n  bucket 22: 20%\n  bucket 21: 60%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 30\n  Entering block accumulator loop for bucket 23:\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 24: 40%\n  bucket 23: 50%\n  bucket 24: 50%\n  bucket 23: 60%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 70%\n  bucket 24: 80%\n  bucket 23: 80%\n  bucket 24: 90%\n  bucket 23: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\nGetting block 26 of 30\n  Calculating Z arrays for bucket 25\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 25:\n  bucket 26: 10%\n  bucket 25: 10%\n  bucket 26: 20%\n  bucket 25: 20%\n  bucket 26: 30%\n  bucket 25: 30%\n  bucket 26: 40%\n  bucket 25: 40%\n  bucket 26: 50%\n  bucket 25: 50%\n  bucket 26: 60%\n  bucket 25: 60%\n  bucket 26: 70%\n  bucket 25: 70%\n  bucket 26: 80%\n  bucket 25: 80%\n  bucket 26: 90%\n  bucket 25: 90%\n  bucket 26: 100%\n  bucket 25: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 20%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 29: 10%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 29: 80%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2024-01-28T14:32:11.824244",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_5bu0u9ll.sam v. /tmp/history_bam_converted_to_sam_733yjz4u.sam )\n--- local_file\n+++ history_data\n@@ -1,77 +1,78 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 input_f.fastq.gz -2 input_r.fastq.gz\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/252/tmp -O bam -o /galaxy/server/database/objects/c/c/f/dataset_ccf3ded1-adff-479d-8333-793397d03ed6.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3\u003eAAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tAAABBBBFFFFFGGGGGGGGGGHHHGGGGGHHFFGHHHHFHHHFFHFHHHFHHHHHFGFHHHHHGHHHHGGGGHHHGHHFHHHHHHHGHHHHHHHGGHGGHHHHHHHHHHHGHHHHHHHHHHGHHHHGHGHHGGCGGGHHHH23FFHHHHGHGCGHHHHGGHFHGHBCCFFFFFFF/ECCDFDFEFFFFBDAFF?DADE??BFFFF=A-.AAAA.BFFFFED..BF/BFFEFFFFBFFFFFFFFFFBFB::\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHGGHHHHHHFHHHHHHHHHHHHHHHHHHHHGHHHHHGGGGCHHHHHHHHGHHHHHHHFHHHHHGHGHGHHGGGGGFGGHHGGGGGGGGGGGGEGGFGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFF-9@DDBFFFFFFFFBBFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC\u003e;\u003e=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2\u003eAFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@\u003eBD/9BFBBBBFDFFFF99D=?\u003eDDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n********\n*SNIP *\n********\n-M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D\u003eCFDDFFFB?AF?B;-@\u003e.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000\u003c00\u003cBFBB0\u003c00000\u003c99.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A\u003cGFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.\u003cADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/\u003e99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG\u003e0\u003c0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGACAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTA\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHCHHGDGGGGHGGHHHHHHHHGHGHHHGGGGGHFHHHHFHHHFFHHHHHFGCGGEHFHHFGGHFHGGGGGGHHFEEEAFEFFDFHGHHHHGGGGGGGHH0DGGGGCGHCC-\u003cCCBGHHHGEFFFFHH.C/\u003cAEGHHEG.EEA0GE0:FB0CFGF:A?FFBF??FG0B;FGGGGFGE?BBF;BFBFFFF/F/B?DDF.;.;:ADD.BA/BBFFB:BFE/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t77\t*\t0\t0\t*\t*\t0\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGCGGTGTCCACGCAATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\t1\u003e\u003e1AAFFFFFBGGFE1EEEEGGHGHHH2FGHHHFGFGHGCFGGGEFHGGEGGHHHHGHEFBFEGHHHGHHBEHHHHGHGFHHHGGGGHHEGGGGHHHGFHGHHHH1FHHG?G/AGF1GBFGEFFHF2FDD0FG\u003cGDHBFDGFFCGH//B//?0GFFGFGGHHHFHFB.=1FDFB?FGH.C/.-:::CH0;CAB@-.;0CGFFFGG--9.A@GB\u003e--99@=---AAABA-BF/B?A@F-9BBFF//BB/9/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATTGCGTGGACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tABBB\u003eFFFFFFFGGGGGGGGGGHHHHHGHHHHGHHGGHHGGHGGHHHGHHHHFHHGHHAFGGGHHHHHGHHHHFHFHHHHHECGGGHGHHHEFHFHGGGGGGGGFGFFGFFEFGEGHHHGHHGGDGGGHGFGGGGGGGGE@GCGGHHHGHHHHHGHHHHFHHGEGFFEGCE.ECCECEHCGGFFE/AABFFG0CFE0BFFF9CFGG.F/BBBFFGFGGGFFFFFFBFEDAEFFFFFBFFFFFFF0;FEBF:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTT\tAAABABBBBBBFGGGGGGGGGGHGHHGHGHHHHHHHHHGHHHGGHDGHHHGGGGHHHHHHHHHHHHHHHFHGHHHHGGHGGHHHFHHHHHCGHFFHHHHHHHHHHHHHGHGEFGAEEEEHHGHHGHGHHHHHHHGHHHHHHGHGHFFBC/BA?BGGGFFFFFFFFFFFFFFFC-@DDFFFFFFFEFAFFFFFFBFBFFFFFFFFFFFFFFFFBFF-\u003e@FFFFFFFFFFBFBFAD--.99;A?////:.9A.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t141\t*\t0\t0\t*\t*\t0\t0\tGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCAAGTGTAGTGCTCGGGGGGG\tBBCCBFFCCCCCGGGGGGGGGGGGGGHHHHHHGGGGGGHHFHGGGGGFGHGGGGGGHHHHHHHHHHFHHHHFHGFFHHGF?ECEFFFFFFHHHHHH?FHHHHHHHHHGFHHHHHHGGGFGHHHHFHHHHHHHHHHGGGFGFGCGGGGHHHHHHHHHHHGGFFHGHHHHHFFHFCGFHCCGHGHCGGHG?DGGGGGFBBFGFBFBBBGGGB0000;CD?DFFAFF9=--;...://;////////.------\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGGGCTGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCTTGAAGTAGGAACC\tAABABFFFFFFFF4GGGGEBGEFGHGGHGHGHHHGGHFBGFGGGGGHHEFHGEHFHFHEHHHHHGCGGGHFHHCFGHE@1EEEFFGB?EEEEHBGGGCHHGHHBEE@\u003eEAHHFAEBDGGGCEFF?CEGFFHHHHHFHHHFHGHCGCAHHF\u003c..C.D=0CD.GFHHHG.CAGHC:CHB0GGGFFB0:CFA.A-;9.;000CBBFFBFGA.9AA;A;EDDE.ABBFFFF9;BEFFF/BF//9/B//9:B//..\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBBFBBBBBFGGGGGGGGGGHFHHHHHHHHHHHHHHGHHHHGHFHHHGEEGGHHHGHHHHHHHHHHHHEHGHHGGGHGGHGHHHHHGHHHHGHHHHHHHHHHHHHHGHHHHHGEGCGHHHHHGHHHHHHHHHHHHHHGHFFGHGHHGGGDACDFFFFABFFFFFFFFFFD-BC?DA9.DFFBEA==B=?F.;ABBFBFEF-DAF/BFF9/FFFBB/9BFFFFFFF/BFBBFFFFFFF/9FEA?--B/;.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t77\t*\t0\t0\t*\t*\t0\t0\tCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGA\tAABBBBFFFFFFGGGFGGGGGGHHHGGHGGHHHHHHHHHHHGHHGGGGGHHHHHHHHHHHHHHHHHHGGCGDHHHHFGGHHHGGGGGFGGHGGGGHHGGGGHHHHHHGGGGGGHHGGGGDGGFGHGGFCDCHHHHGHHHHGHHFAGFGGEHFGEG.C\u003cEGCECEFCFFHBGHE:GHHGFF0FFFB0CFGGGGAGFFF0;;FFGGGFFGFFCDD.DEFBEDD?9FFFFFFFFFFFFFFF/B./FB///;BF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t141\t*\t0\t0\t*\t*\t0\t0\tGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATT\tBBBBAFFFFFFFGGGGGGGGGGFGHHHHHGHHHHHHHHHHHHCGHHHHHHHGHHHHHHDGHHGGAECHHGHHHHHHHGHHHGHGFHHHHGGHGGHHFHHHHHHFHHHHHHHHH2GHHHHGHGHHFHHGGFGGGHHGHHHHHFHHHHEFHHHHEFGFFHGEHCFGDFDFFFFFCFFFFFFFFFFFFFAFBFFDFFFFFFFFADCF?9?EFBFB9EF-A.;BFFFFFFFBFFFFFFFFFFFFBFFFFFFFFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t77\t*\t0\t0\t*\t*\t0\t0\tGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGCTACAGTTCACTTTAGCTACCTCCAAGTGTTATG\tAA?AAFFFFFFFGGGGGFBFGGGGGGH5GHFEDHHGGGGCGFBGH?AEEHFFEEGHGHHHHGGG?0EHGHHGGGGGC?GEE/EE?GHHHGBHFHHHHHHGHHGHHHGGGCG/A@\u003cFGGHHHHHHHFF/GFDGHHHHHHGFFFGHGGHABGHFHHHHHFHEGDGHGDDEEHHBEDDEGFGHGBFFBFFEGGGEFGFGFB000;F0F;FGGEGGEFFF;-.9//B///B9FFFFF/BFFB/:.BB//;FBFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t141\t*\t0\t0\t*\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTGGAT\tCDDDBFFFFFFFGGGGGGGGGGHHHHHGGHHHGHHHGHHGGGGEHHGGHHHHHHHHHHHHHHGHHGHHHHHGGHHHHHFHHHHGCDCGHHHHHHHHEHHHGHGHHHGFHGGHGGHHHHHHHHFHHHFHHHGHHHHHHHHHFGGHHHHGGGEGAFHHGHHGGHHHHGHFBGFHGHGHGHGGHGGF@DAFEFBECAB=A.0BFFFEDF=A9.@D.-AAFFFA-:-..:.9/0:;0..-..0000::BFB09::\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGA\tABBBBFFFFFFFGGGFGGGGGGHHHGHHGGHBGHGAGFFCAFGHGFFGHHGFHHHHHGGGGGHGHHHHHHHHE3BFFHHHGG0EDF@GHFFGGGHGGGGGGGGGGGGGHHGGEEFHGFHHDDG@DGGGHHGDGGGGGHGG?CF?HHGHHHGHGHHHFFHGGGHHHHGGCD.;0\u003cC;CGGGGEFF/.;0;FFFBF/0;0CFGFFB..9B/;0CBFFBBFFFFBAC?DED9;B9AD;.FFFB/B/;FBA/B//\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBCFCCCCCFGGGGGGGGGGHHHHHHHGHHHHHHHHGHHHHGHDGHHHGGGGHHHHHHHHHHHHHHHGHHHHHGGGEGGHHHHFHHHHHHHHHHHHHHHHHHHHHHGHHGHHGGGGGHHHHHHHHHHHGHHHFHHHHHHGHGHGHGGGGCGGFGGFFFFFFFFFFFFFBFFFFFFFFFFFFFFAFFFFEAEFFFFFFFFFFF9BFFBFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFADAB-/BF.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t77\t*\t0\t0\t*\t*\t0\t0\tCGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTCTGATCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAACAAACACACATCCAGA\t\u003eA33\u003eFFFFFF@FFFGGGGFGGD4EGGGGGHHGFFGHFGGHHHFEFHECFHHHEHGAGBCCGCCEGGHGHEGFBFHFHHHHGGGHFHGHEGGGFEGEGG??@DBGHGGC-@FFGHFHFHB-??DA-DD@9:BEBG@B?E?A.ABBFBFA??F.FF/BFFB/B9B/9;BF9FF9FFFFFFFFFFFFFF?BB?;9EE;-;DDB9//;B-B@;ABFFEFFFF/-.9A.;//9/BF./B/..9.9:...//////\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH\u003c1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n" ], "status": "failure", "test_index": 5, "time_seconds": 68.61701369285583, "tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 16  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/d/2/c/dataset_d2c720b9-7eeb-4ca9-88f2-f25abafea255.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 4, merged 22; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 30  Entering block accumulator loop for bucket 1:  Reserving size (777) for bucket 2Getting block 3 of 30Getting block 4 of 30  Calculating Z arrays for bucket 2  Reserving size (777) for bucket 3  bucket 1: 10%  Reserving size (777) for bucket 4  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 4  bucket 1: 20%  Entering block accumulator loop for bucket 3:  bucket 1: 30%  bucket 2: 10%  bucket 3: 10%  Entering block accumulator loop for bucket 4:  bucket 1: 40%  bucket 2: 20%  bucket 3: 20%  bucket 1: 50%  bucket 2: 30%  bucket 3: 30%  bucket 1: 60%  bucket 4: 10%  bucket 2: 40%  bucket 3: 40%  bucket 1: 70%  bucket 2: 50%  bucket 4: 20%  bucket 3: 50%  bucket 1: 80%  bucket 2: 60%  bucket 4: 30%  bucket 3: 60%  bucket 1: 90%  bucket 2: 70%  bucket 4: 40%  bucket 3: 70%  bucket 1: 100%  bucket 2: 80%  bucket 4: 50%  bucket 3: 80%  Sorting block of length 689 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 4: 60%  bucket 2: 100%  Sorting block of length 445 for bucket 2  (Using difference cover)  bucket 3: 90%  bucket 4: 70%  bucket 3: 100%  Sorting block of length 629 for bucket 3  (Using difference cover)  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 499 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 690 for bucket 1  Sorting block time: 00:00:00Returning block of 446 for bucket 2  Sorting block time: 00:00:00Returning block of 630 for bucket 3  Sorting block time: 00:00:00Returning block of 500 for bucket 4Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 30  Entering block accumulator loop for bucket 5:  Reserving size (777) for bucket 6Getting block 7 of 30  Calculating Z arrays for bucket 6  Reserving size (777) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 6:  bucket 5: 10%  Entering block accumulator loop for bucket 7:  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 7: 10%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 7: 20%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 7: 30%  bucket 6: 50%  bucket 5: 70%  bucket 6: 60%  bucket 7: 40%  bucket 5: 80%  bucket 6: 70%  bucket 5: 90%  bucket 7: 50%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 738 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 7: 60%  bucket 6: 100%  Sorting block of length 305 for bucket 6  (Using difference cover)  bucket 7: 70%  bucket 7: 80%  Sorting block time: 00:00:00Returning block of 739 for bucket 5  bucket 7: 90%  bucket 7: 100%  Sorting block time: 00:00:00  Sorting block of length 705 for bucket 7  (Using difference cover)Returning block of 306 for bucket 6  Sorting block time: 00:00:00Returning block of 706 for bucket 7Getting block 8 of 30  Reserving size (777) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 772 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 773 for bucket 8Getting block 9 of 30  Reserving size (777) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 30  Entering block accumulator loop for bucket 9:  Reserving size (777) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 9: 90%  bucket 10: 60%  bucket 9: 100%  Sorting block of length 546 for bucket 9  (Using difference cover)  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 247 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 9  Sorting block time: 00:00:00Returning block of 248 for bucket 10Getting block 11 of 30  Reserving size (777) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 611 for bucket 11  (Using difference cover)Getting block 12 of 30  Reserving size (777) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  Sorting block time: 00:00:00Returning block of 612 for bucket 11  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 485 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 486 for bucket 12Getting block 13 of 30  Reserving size (777) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 597 for bucket 13  (Using difference cover)Getting block 14 of 30  Reserving size (777) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  Sorting block time: 00:00:00  bucket 14: 10%Returning block of 598 for bucket 13  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 689 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 690 for bucket 14Getting block 15 of 30  Reserving size (777) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 30  Reserving size (777) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 15:  Entering block accumulator loop for bucket 16:  bucket 15: 10%  bucket 16: 10%  bucket 15: 20%  bucket 16: 20%  bucket 15: 30%  bucket 16: 30%  bucket 15: 40%  bucket 16: 40%  bucket 15: 50%  bucket 16: 50%  bucket 15: 60%  bucket 16: 60%  bucket 15: 70%  bucket 16: 70%  bucket 15: 80%  bucket 16: 80%  bucket 15: 90%  bucket 16: 90%  bucket 15: 100%  Sorting block of length 543 for bucket 15  (Using difference cover)  bucket 16: 100%  Sorting block of length 723 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 724 for bucket 16  Sorting block time: 00:00:00Returning block of 544 for bucket 15Getting block 17 of 30  Reserving size (777) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 578 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 579 for bucket 17Getting block 18 of 30  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 356 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 357 for bucket 18Getting block 19 of 30  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 30  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 19:  Entering block accumulator loop for bucket 20:  bucket 19: 10%  bucket 20: 10%  bucket 19: 20%  bucket 20: 20%  bucket 19: 30%  bucket 20: 30%  bucket 20: 40%  bucket 19: 40%  bucket 20: 50%  bucket 19: 50%  bucket 20: 60%  bucket 19: 60%  bucket 20: 70%  bucket 19: 70%  bucket 20: 80%  bucket 19: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 268 for bucket 20  (Using difference cover)  bucket 19: 90%  bucket 19: 100%  Sorting block of length 731 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 269 for bucket 20  Sorting block time: 00:00:00Returning block of 732 for bucket 19Getting block 21 of 30  Reserving size (777) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 21 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 22 for bucket 21Getting block 22 of 30  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 952 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 953 for bucket 22Getting block 23 of 30  Reserving size (777) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:Getting block 24 of 30  Reserving size (777) for bucket 24  Calculating Z arrays for bucket 24  bucket 23: 10%  Entering block accumulator loop for bucket 24:  bucket 23: 20%  bucket 24: 10%  bucket 23: 30%  bucket 24: 20%  bucket 23: 40%  bucket 24: 30%  bucket 23: 50%  bucket 24: 40%  bucket 23: 60%  bucket 24: 50%  bucket 23: 70%  bucket 24: 60%  bucket 23: 80%  bucket 24: 70%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 763 for bucket 23  (Using difference cover)  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 471 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 764 for bucket 23Getting block 25 of 30  Reserving size (777) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  Sorting block time: 00:00:00Returning block of 472 for bucket 24  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 415 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 416 for bucket 25Getting block 26 of 30  Reserving size (777) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 643 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 644 for bucket 26Getting block 27 of 30  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27Getting block 28 of 30  Reserving size (777) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 27:  Entering block accumulator loop for bucket 28:  bucket 27: 10%  bucket 28: 10%  bucket 27: 20%  bucket 28: 20%  bucket 27: 30%  bucket 28: 30%  bucket 27: 40%  bucket 27: 50%  bucket 28: 40%  bucket 27: 60%  bucket 28: 50%  bucket 27: 70%  bucket 28: 60%  bucket 27: 80%  bucket 28: 70%  bucket 27: 90%  bucket 28: 80%  bucket 28: 90%  bucket 27: 100%  Sorting block of length 592 for bucket 27  (Using difference cover)  bucket 28: 100%  Sorting block of length 684 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 593 for bucket 27  Sorting block time: 00:00:00Returning block of 685 for bucket 28Getting block 29 of 30  Reserving size (777) for bucket 29Getting block 30 of 30  Calculating Z arrays for bucket 29  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  Entering block accumulator loop for bucket 29:  bucket 30: 10%  bucket 29: 10%  bucket 30: 20%  bucket 30: 30%  bucket 29: 20%  bucket 30: 40%  bucket 30: 50%  bucket 29: 30%  bucket 30: 60%  bucket 29: 40%  bucket 30: 70%  bucket 30: 80%  bucket 29: 50%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 602 for bucket 30  (Using difference cover)  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  Sorting block time: 00:00:00Returning block of 603 for bucket 30  bucket 29: 100%  Sorting block of length 240 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 241 for bucket 29Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 6, merged 21; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 1:Getting block 2 of 30  bucket 1: 10%  Reserving size (777) for bucket 2  bucket 1: 20%Getting block 3 of 30  Calculating Z arrays for bucket 2Getting block 4 of 30  bucket 1: 30%  Reserving size (777) for bucket 3  Entering block accumulator loop for bucket 2:  Reserving size (777) for bucket 4  bucket 1: 40%  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  bucket 1: 50%  bucket 2: 10%  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 1: 60%  bucket 2: 20%  bucket 1: 70%  bucket 2: 30%  bucket 3: 10%  bucket 1: 80%  bucket 4: 10%  bucket 2: 40%  bucket 3: 20%  bucket 1: 90%  bucket 4: 20%  bucket 3: 30%  bucket 2: 50%  bucket 1: 100%  bucket 4: 30%  bucket 3: 40%  Sorting block of length 484 for bucket 1  bucket 2: 60%  (Using difference cover)  bucket 4: 40%  bucket 3: 50%  bucket 2: 70%  bucket 4: 50%  bucket 3: 60%  bucket 2: 80%  bucket 4: 60%  bucket 3: 70%  bucket 2: 90%  bucket 4: 70%  bucket 3: 80%  bucket 2: 100%  Sorting block time: 00:00:00  bucket 4: 80%  Sorting block of length 774 for bucket 2  (Using difference cover)Returning block of 485 for bucket 1  bucket 3: 90%  Sorting block time: 00:00:00  bucket 4: 90%  bucket 3: 100%Returning block of 775 for bucket 2  Sorting block of length 434 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 431 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 432 for bucket 4  Sorting block time: 00:00:00Returning block of 435 for bucket 3Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%Getting block 6 of 30  bucket 5: 30%  Reserving size (777) for bucket 6Getting block 7 of 30  Calculating Z arrays for bucket 6  Reserving size (777) for bucket 7  bucket 5: 40%  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 6:  bucket 5: 50%  Entering block accumulator loop for bucket 7:  bucket 6: 10%  bucket 5: 60%  bucket 7: 10%  bucket 6: 20%  bucket 5: 70%  bucket 7: 20%  bucket 6: 30%  bucket 5: 80%  bucket 7: 30%  bucket 6: 40%  bucket 5: 90%  bucket 7: 40%  bucket 6: 50%  bucket 5: 100%  Sorting block of length 776 for bucket 5  (Using difference cover)  bucket 7: 50%  bucket 6: 60%  bucket 7: 60%  bucket 6: 70%  bucket 7: 70%  bucket 6: 80%  bucket 7: 80%  bucket 6: 90%  bucket 7: 90%  bucket 6: 100%  bucket 7: 100%  Sorting block of length 707 for bucket 7  (Using difference cover)  Sorting block of length 179 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 777 for bucket 5  Sorting block time: 00:00:00Returning block of 180 for bucket 6  Sorting block time: 00:00:00Returning block of 708 for bucket 7Getting block 8 of 30  Reserving size (777) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 313 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 314 for bucket 8Getting block 9 of 30  Reserving size (777) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%Getting block 10 of 30Getting block 11 of 30  Reserving size (777) for bucket 10  bucket 9: 40%  Reserving size (777) for bucket 11  Calculating Z arrays for bucket 10  Calculating Z arrays for bucket 11  bucket 9: 50%  Entering block accumulator loop for bucket 10:  Entering block accumulator loop for bucket 11:  bucket 9: 60%  bucket 11: 10%  bucket 10: 10%  bucket 9: 70%  bucket 11: 20%  bucket 9: 80%  bucket 10: 20%  bucket 11: 30%  bucket 9: 90%  bucket 10: 30%  bucket 11: 40%  bucket 9: 100%  bucket 10: 40%  Sorting block of length 535 for bucket 9  (Using difference cover)  bucket 11: 50%  bucket 10: 50%  bucket 11: 60%  bucket 10: 60%  bucket 11: 70%  bucket 10: 70%  bucket 11: 80%  Sorting block time: 00:00:00Returning block of 536 for bucket 9  bucket 10: 80%  bucket 11: 90%  bucket 10: 90%  bucket 11: 100%  Sorting block of length 423 for bucket 11  (Using difference cover)  bucket 10: 100%  Sorting block of length 680 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 681 for bucket 10  Sorting block time: 00:00:00Returning block of 424 for bucket 11Getting block 12 of 30  Reserving size (777) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 371 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 372 for bucket 12Getting block 13 of 30  Reserving size (777) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 595 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 596 for bucket 13Getting block 14 of 30  Reserving size (777) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%Getting block 15 of 30  Reserving size (777) for bucket 15  Calculating Z arrays for bucket 15  bucket 14: 20%  Entering block accumulator loop for bucket 15:  bucket 14: 30%  bucket 15: 10%  bucket 14: 40%  bucket 15: 20%  bucket 14: 50%  bucket 15: 30%  bucket 14: 60%  bucket 15: 40%  bucket 14: 70%  bucket 15: 50%  bucket 14: 80%  bucket 15: 60%  bucket 14: 90%  bucket 15: 70%  bucket 14: 100%  Sorting block of length 708 for bucket 14  (Using difference cover)  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 629 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 709 for bucket 14  Sorting block time: 00:00:00Returning block of 630 for bucket 15Getting block 16 of 30  Reserving size (777) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 750 for bucket 16  (Using difference cover)Getting block 17 of 30  Reserving size (777) for bucket 17  Calculating Z arrays for bucket 17  Sorting block time: 00:00:00Returning block of 751 for bucket 16  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 606 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 607 for bucket 17Getting block 18 of 30  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 722 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 723 for bucket 18Getting block 19 of 30  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%Getting block 20 of 30  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 20%  Entering block accumulator loop for bucket 20:  bucket 19: 30%  bucket 20: 10%  bucket 20: 20%  bucket 19: 40%  bucket 20: 30%  bucket 19: 50%  bucket 20: 40%  bucket 19: 60%  bucket 20: 50%  bucket 19: 70%  bucket 20: 60%  bucket 19: 80%  bucket 20: 70%  bucket 19: 90%  bucket 20: 80%  bucket 20: 90%  bucket 19: 100%  Sorting block of length 418 for bucket 19  (Using difference cover)  bucket 20: 100%  Sorting block of length 519 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 419 for bucket 19  Sorting block time: 00:00:00Returning block of 520 for bucket 20Getting block 21 of 30  Reserving size (777) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%Getting block 22 of 30  bucket 21: 30%  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 21: 40%  bucket 22: 10%  bucket 21: 50%  bucket 22: 20%  bucket 21: 60%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 21: 70%  bucket 22: 60%  bucket 21: 80%  bucket 22: 70%  bucket 21: 90%  bucket 22: 80%  bucket 21: 100%  Sorting block of length 422 for bucket 21  (Using difference cover)  bucket 22: 90%  bucket 22: 100%  Sorting block of length 493 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 423 for bucket 21  Sorting block time: 00:00:00Returning block of 494 for bucket 22Getting block 23 of 30  Reserving size (777) for bucket 23  Calculating Z arrays for bucket 23Getting block 24 of 30  Entering block accumulator loop for bucket 23:  Reserving size (777) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 23: 10%  bucket 24: 10%  bucket 23: 20%  bucket 24: 20%  bucket 23: 30%  bucket 24: 30%  bucket 23: 40%  bucket 24: 40%  bucket 23: 50%  bucket 24: 50%  bucket 23: 60%  bucket 24: 60%  bucket 24: 70%  bucket 23: 70%  bucket 24: 80%  bucket 23: 80%  bucket 24: 90%  bucket 23: 90%  bucket 24: 100%  Sorting block of length 732 for bucket 24  (Using difference cover)  bucket 23: 100%  Sorting block of length 510 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 511 for bucket 23  Sorting block time: 00:00:00Returning block of 733 for bucket 24Getting block 25 of 30  Reserving size (777) for bucket 25Getting block 26 of 30  Calculating Z arrays for bucket 25  Reserving size (777) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  Entering block accumulator loop for bucket 25:  bucket 26: 10%  bucket 25: 10%  bucket 26: 20%  bucket 25: 20%  bucket 26: 30%  bucket 25: 30%  bucket 26: 40%  bucket 25: 40%  bucket 26: 50%  bucket 25: 50%  bucket 26: 60%  bucket 25: 60%  bucket 26: 70%  bucket 25: 70%  bucket 26: 80%  bucket 25: 80%  bucket 26: 90%  bucket 25: 90%  bucket 26: 100%  bucket 25: 100%  Sorting block of length 647 for bucket 26  (Using difference cover)  Sorting block of length 457 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 648 for bucket 26  Sorting block time: 00:00:00Returning block of 458 for bucket 25Getting block 27 of 30  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 334 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 335 for bucket 27Getting block 28 of 30  Reserving size (777) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%Getting block 29 of 30  Reserving size (777) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 20%  Entering block accumulator loop for bucket 29:  bucket 28: 30%  bucket 29: 10%  bucket 28: 40%  bucket 29: 20%  bucket 28: 50%  bucket 29: 30%  bucket 28: 60%  bucket 29: 40%  bucket 29: 50%  bucket 28: 70%  bucket 29: 60%  bucket 28: 80%  bucket 29: 70%  bucket 28: 90%  bucket 29: 80%  bucket 28: 100%  Sorting block of length 631 for bucket 28  (Using difference cover)  bucket 29: 90%  bucket 29: 100%  Sorting block of length 582 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 632 for bucket 28  Sorting block time: 00:00:00Returning block of 583 for bucket 29Getting block 30 of 30  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 677 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 678 for bucket 30Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #7)" name="6" time="68.11705374717712">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "42956b62dd1ba5ba",   "src": "hda"  },  "library|input_2": {   "id": "3eac97a59650d3d2",   "src": "hda"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "e8311984461ed69e",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/c/c/1/dataset_cc1a00dd-8f0c-49ec-a34e-a7215c58e45d.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/c/c/1/dataset_cc1a00dd-8f0c-49ec-a34e-a7215c58e45d.dat\u0027 genome.fa \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/7/1/5/dataset_7156d3c0-66e6-4972-a9a3-f20e84e46e6b.dat\u0027 input_f.fastq.bz2 \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/c/5/6/dataset_c5634f68-166c-478c-bafc-dec612e77cae.dat\u0027 input_r.fastq.bz2 \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027   -1 \u0027input_f.fastq.bz2\u0027 -2 \u0027input_r.fastq.bz2\u0027                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/3/4/c/dataset_34ce3218-b4f8-4f81-9a16-c4141b48aa51.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2024-01-28T14:32:30.311958",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-f57c9",  "galaxy_version": "21.09",  "history_id": "cbf056288c649de3",  "id": "9d11cef4e5dfaf7e",  "inputs": {   "input_1": {    "id": "42956b62dd1ba5ba",    "src": "hda",    "uuid": "7156d3c0-66e6-4972-a9a3-f20e84e46e6b"   },   "input_2": {    "id": "3eac97a59650d3d2",    "src": "hda",    "uuid": "c5634f68-166c-478c-bafc-dec612e77cae"   },   "own_file": {    "id": "e8311984461ed69e",    "src": "hda",    "uuid": "cc1a00dd-8f0c-49ec-a34e-a7215c58e45d"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1706452389.0000000",    "title": "Job End Time",    "value": "2024-01-28 14:33:09"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1706452388.0000000",    "title": "Job Start Time",    "value": "2024-01-28 14:33:08"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "12000.0000000",    "title": "Memory Allocated (MB)",    "value": "12000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/c/1/dataset_cc1a00dd-8f0c-49ec-a34e-a7215c58e45d.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 1: 100%\n  bucket 4: 70%\n  bucket 3: 80%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  bucket 5: 10%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  bucket 6: 80%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nGetting block 7 of 30\nReturning block of 306 for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 70%\n  bucket 10: 90%\n  bucket 9: 80%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 10%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 14: 20%\n  bucket 13: 70%\n  bucket 14: 30%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 13: 90%\n  bucket 13: 100%\n  bucket 14: 50%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 18: 10%\n  bucket 17: 60%\n  bucket 18: 20%\n  bucket 17: 70%\n  bucket 18: 30%\n  bucket 17: 80%\n  bucket 18: 40%\n  bucket 17: 90%\n  bucket 18: 50%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 19: 60%\n  bucket 20: 90%\n  bucket 19: 70%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  bucket 23: 50%\n  Calculating Z arrays for bucket 24\n  bucket 23: 60%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 70%\n  bucket 24: 10%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 24: 20%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 20%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 26: 10%\n  bucket 25: 40%\n  bucket 26: 20%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\nGetting block 3 of 30\n  bucket 1: 10%\n  Reserving size (777) for bucket 2\nGetting block 4 of 30\n  Reserving size (777) for bucket 3\n  Calculating Z arrays for bucket 2\n  bucket 1: 20%\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 50%\n  bucket 4: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 2: 20%\n  bucket 1: 70%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 2: 30%\n  bucket 1: 80%\n  bucket 4: 40%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 3: 30%\n  bucket 4: 50%\n  bucket 1: 100%\n  bucket 2: 50%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 40%\n  bucket 4: 60%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 4: 70%\n  bucket 3: 50%\n  bucket 2: 80%\n  bucket 4: 80%\n  bucket 3: 60%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 3: 70%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 6: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\nGetting block 11 of 30\n  Calculating Z arrays for bucket 10\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 10:\n  bucket 11: 10%\n  bucket 10: 10%\n  bucket 11: 20%\n  bucket 10: 20%\n  bucket 11: 30%\n  bucket 10: 30%\n  bucket 11: 40%\n  bucket 10: 40%\n  bucket 11: 50%\n  bucket 10: 50%\n  bucket 11: 60%\n  bucket 10: 60%\n  bucket 11: 70%\n  bucket 10: 70%\n  bucket 11: 80%\n  bucket 10: 80%\n  bucket 11: 90%\n  bucket 10: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 17: 20%\n  bucket 18: 30%\n  bucket 17: 30%\n  bucket 18: 40%\n  bucket 17: 40%\n  bucket 18: 50%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 17: 60%\n  bucket 18: 70%\n  bucket 17: 70%\n  bucket 18: 80%\n  bucket 17: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\nGetting block 21 of 30\n  Calculating Z arrays for bucket 20\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 21: 10%\n  bucket 20: 20%\n  bucket 21: 20%\n  bucket 20: 30%\n  bucket 21: 30%\n  bucket 20: 40%\n  bucket 21: 40%\n  bucket 20: 50%\n  bucket 21: 50%\n  bucket 20: 60%\n  bucket 21: 60%\n  bucket 20: 70%\n  bucket 21: 70%\n  bucket 20: 80%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 21: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 30\n  Entering block accumulator loop for bucket 22:\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 22: 70%\n  bucket 23: 80%\n  bucket 22: 80%\n  bucket 23: 90%\n  bucket 22: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 10%\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 24: 50%\n  bucket 25: 70%\n  bucket 24: 60%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 24: 70%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\nGetting block 29 of 30\n  Calculating Z arrays for bucket 28\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 28: 20%\n  bucket 29: 30%\n  bucket 28: 30%\n  bucket 29: 40%\n  bucket 28: 40%\n  bucket 29: 50%\n  bucket 28: 50%\n  bucket 29: 60%\n  bucket 28: 60%\n  bucket 29: 70%\n  bucket 28: 70%\n  bucket 29: 80%\n  bucket 28: 80%\n  bucket 29: 90%\n  bucket 28: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "8c229db1ffa916bf",    "src": "hda",    "uuid": "34ce3218-b4f8-4f81-9a16-c4141b48aa51"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 346, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 347, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 348, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n23.50% overall alignment rate\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/c/1/dataset_cc1a00dd-8f0c-49ec-a34e-a7215c58e45d.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 1: 100%\n  bucket 4: 70%\n  bucket 3: 80%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  bucket 5: 10%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  bucket 6: 80%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nGetting block 7 of 30\nReturning block of 306 for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 70%\n  bucket 10: 90%\n  bucket 9: 80%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 10%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 14: 20%\n  bucket 13: 70%\n  bucket 14: 30%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 13: 90%\n  bucket 13: 100%\n  bucket 14: 50%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 18: 10%\n  bucket 17: 60%\n  bucket 18: 20%\n  bucket 17: 70%\n  bucket 18: 30%\n  bucket 17: 80%\n  bucket 18: 40%\n  bucket 17: 90%\n  bucket 18: 50%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 19: 60%\n  bucket 20: 90%\n  bucket 19: 70%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  bucket 23: 50%\n  Calculating Z arrays for bucket 24\n  bucket 23: 60%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 70%\n  bucket 24: 10%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 24: 20%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 20%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 26: 10%\n  bucket 25: 40%\n  bucket 26: 20%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\nGetting block 3 of 30\n  bucket 1: 10%\n  Reserving size (777) for bucket 2\nGetting block 4 of 30\n  Reserving size (777) for bucket 3\n  Calculating Z arrays for bucket 2\n  bucket 1: 20%\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 50%\n  bucket 4: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 2: 20%\n  bucket 1: 70%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 2: 30%\n  bucket 1: 80%\n  bucket 4: 40%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 3: 30%\n  bucket 4: 50%\n  bucket 1: 100%\n  bucket 2: 50%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 40%\n  bucket 4: 60%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 4: 70%\n  bucket 3: 50%\n  bucket 2: 80%\n  bucket 4: 80%\n  bucket 3: 60%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 3: 70%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 6: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\nGetting block 11 of 30\n  Calculating Z arrays for bucket 10\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 10:\n  bucket 11: 10%\n  bucket 10: 10%\n  bucket 11: 20%\n  bucket 10: 20%\n  bucket 11: 30%\n  bucket 10: 30%\n  bucket 11: 40%\n  bucket 10: 40%\n  bucket 11: 50%\n  bucket 10: 50%\n  bucket 11: 60%\n  bucket 10: 60%\n  bucket 11: 70%\n  bucket 10: 70%\n  bucket 11: 80%\n  bucket 10: 80%\n  bucket 11: 90%\n  bucket 10: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 17: 20%\n  bucket 18: 30%\n  bucket 17: 30%\n  bucket 18: 40%\n  bucket 17: 40%\n  bucket 18: 50%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 17: 60%\n  bucket 18: 70%\n  bucket 17: 70%\n  bucket 18: 80%\n  bucket 17: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\nGetting block 21 of 30\n  Calculating Z arrays for bucket 20\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 21: 10%\n  bucket 20: 20%\n  bucket 21: 20%\n  bucket 20: 30%\n  bucket 21: 30%\n  bucket 20: 40%\n  bucket 21: 40%\n  bucket 20: 50%\n  bucket 21: 50%\n  bucket 20: 60%\n  bucket 21: 60%\n  bucket 20: 70%\n  bucket 21: 70%\n  bucket 20: 80%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 21: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 30\n  Entering block accumulator loop for bucket 22:\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 22: 70%\n  bucket 23: 80%\n  bucket 22: 80%\n  bucket 23: 90%\n  bucket 22: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 10%\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 24: 50%\n  bucket 25: 70%\n  bucket 24: 60%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 24: 70%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\nGetting block 29 of 30\n  Calculating Z arrays for bucket 28\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 28: 20%\n  bucket 29: 30%\n  bucket 28: 30%\n  bucket 29: 40%\n  bucket 28: 40%\n  bucket 29: 50%\n  bucket 28: 50%\n  bucket 29: 60%\n  bucket 28: 60%\n  bucket 29: 70%\n  bucket 28: 70%\n  bucket 29: 80%\n  bucket 28: 80%\n  bucket 29: 90%\n  bucket 28: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2024-01-28T14:33:20.229694",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_hrvi6v65.sam v. /tmp/history_bam_converted_to_sam_1lbz56s3.sam )\n--- local_file\n+++ history_data\n@@ -1,73 +1,74 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 /tmp/gxy-f57c9-x8bb4_53mate1 -2 /tmp/gxy-f57c9-x8bb4_53mate2\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/256/tmp -O bam -o /galaxy/server/database/objects/3/4/c/dataset_34ce3218-b4f8-4f81-9a16-c4141b48aa51.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/\u003c@EFHEHH1GGHFFFHG1\u003e=FGHFHGF.GE//-\u003cBB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3\u003eAAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tAAABBBBFFFFFGGGGGGGGGGHHHGGGGGHHFFGHHHHFHHHFFHFHHHFHHHHHFGFHHHHHGHHHHGGGGHHHGHHFHHHHHHHGHHHHHHHGGHGGHHHHHHHHHHHGHHHHHHHHHHGHHHHGHGHHGGCGGGHHHH23FFHHHHGHGCGHHHHGGHFHGHBCCFFFFFFF/ECCDFDFEFFFFBDAFF?DADE??BFFFF=A-.AAAA.BFFFFED..BF/BFFEFFFFBFFFFFFFFFFBFB::\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHGGHHHHHHFHHHHHHHHHHHHHHHHHHHHGHHHHHGGGGCHHHHHHHHGHHHHHHHFHHHHHGHGHGHHGGGGGFGGHHGGGGGGGGGGGGEGGFGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFF-9@DDBFFFFFFFFBBFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC\u003e;\u003e=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2\u003eAFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@\u003eBD/9BFBBBBFDFFFF99D=?\u003eDDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n********\n*SNIP *\n********\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D\u003eCFDDFFFB?AF?B;-@\u003e.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000\u003c00\u003cBFBB0\u003c00000\u003c99.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A\u003cGFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.\u003cADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/\u003e99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG\u003e0\u003c0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGACAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTA\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHCHHGDGGGGHGGHHHHHHHHGHGHHHGGGGGHFHHHHFHHHFFHHHHHFGCGGEHFHHFGGHFHGGGGGGHHFEEEAFEFFDFHGHHHHGGGGGGGHH0DGGGGCGHCC-\u003cCCBGHHHGEFFFFHH.C/\u003cAEGHHEG.EEA0GE0:FB0CFGF:A?FFBF??FG0B;FGGGGFGE?BBF;BFBFFFF/F/B?DDF.;.;:ADD.BA/BBFFB:BFE/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t77\t*\t0\t0\t*\t*\t0\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGCGGTGTCCACGCAATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\t1\u003e\u003e1AAFFFFFBGGFE1EEEEGGHGHHH2FGHHHFGFGHGCFGGGEFHGGEGGHHHHGHEFBFEGHHHGHHBEHHHHGHGFHHHGGGGHHEGGGGHHHGFHGHHHH1FHHG?G/AGF1GBFGEFFHF2FDD0FG\u003cGDHBFDGFFCGH//B//?0GFFGFGGHHHFHFB.=1FDFB?FGH.C/.-:::CH0;CAB@-.;0CGFFFGG--9.A@GB\u003e--99@=---AAABA-BF/B?A@F-9BBFF//BB/9/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATTGCGTGGACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tABBB\u003eFFFFFFFGGGGGGGGGGHHHHHGHHHHGHHGGHHGGHGGHHHGHHHHFHHGHHAFGGGHHHHHGHHHHFHFHHHHHECGGGHGHHHEFHFHGGGGGGGGFGFFGFFEFGEGHHHGHHGGDGGGHGFGGGGGGGGE@GCGGHHHGHHHHHGHHHHFHHGEGFFEGCE.ECCECEHCGGFFE/AABFFG0CFE0BFFF9CFGG.F/BBBFFGFGGGFFFFFFBFEDAEFFFFFBFFFFFFF0;FEBF:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTT\tAAABABBBBBBFGGGGGGGGGGHGHHGHGHHHHHHHHHGHHHGGHDGHHHGGGGHHHHHHHHHHHHHHHFHGHHHHGGHGGHHHFHHHHHCGHFFHHHHHHHHHHHHHGHGEFGAEEEEHHGHHGHGHHHHHHHGHHHHHHGHGHFFBC/BA?BGGGFFFFFFFFFFFFFFFC-@DDFFFFFFFEFAFFFFFFBFBFFFFFFFFFFFFFFFFBFF-\u003e@FFFFFFFFFFBFBFAD--.99;A?////:.9A.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t141\t*\t0\t0\t*\t*\t0\t0\tGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCAAGTGTAGTGCTCGGGGGGG\tBBCCBFFCCCCCGGGGGGGGGGGGGGHHHHHHGGGGGGHHFHGGGGGFGHGGGGGGHHHHHHHHHHFHHHHFHGFFHHGF?ECEFFFFFFHHHHHH?FHHHHHHHHHGFHHHHHHGGGFGHHHHFHHHHHHHHHHGGGFGFGCGGGGHHHHHHHHHHHGGFFHGHHHHHFFHFCGFHCCGHGHCGGHG?DGGGGGFBBFGFBFBBBGGGB0000;CD?DFFAFF9=--;...://;////////.------\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGGGCTGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCTTGAAGTAGGAACC\tAABABFFFFFFFF4GGGGEBGEFGHGGHGHGHHHGGHFBGFGGGGGHHEFHGEHFHFHEHHHHHGCGGGHFHHCFGHE@1EEEFFGB?EEEEHBGGGCHHGHHBEE@\u003eEAHHFAEBDGGGCEFF?CEGFFHHHHHFHHHFHGHCGCAHHF\u003c..C.D=0CD.GFHHHG.CAGHC:CHB0GGGFFB0:CFA.A-;9.;000CBBFFBFGA.9AA;A;EDDE.ABBFFFF9;BEFFF/BF//9/B//9:B//..\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBBFBBBBBFGGGGGGGGGGHFHHHHHHHHHHHHHHGHHHHGHFHHHGEEGGHHHGHHHHHHHHHHHHEHGHHGGGHGGHGHHHHHGHHHHGHHHHHHHHHHHHHHGHHHHHGEGCGHHHHHGHHHHHHHHHHHHHHGHFFGHGHHGGGDACDFFFFABFFFFFFFFFFD-BC?DA9.DFFBEA==B=?F.;ABBFBFEF-DAF/BFF9/FFFBB/9BFFFFFFF/BFBBFFFFFFF/9FEA?--B/;.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t77\t*\t0\t0\t*\t*\t0\t0\tCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGA\tAABBBBFFFFFFGGGFGGGGGGHHHGGHGGHHHHHHHHHHHGHHGGGGGHHHHHHHHHHHHHHHHHHGGCGDHHHHFGGHHHGGGGGFGGHGGGGHHGGGGHHHHHHGGGGGGHHGGGGDGGFGHGGFCDCHHHHGHHHHGHHFAGFGGEHFGEG.C\u003cEGCECEFCFFHBGHE:GHHGFF0FFFB0CFGGGGAGFFF0;;FFGGGFFGFFCDD.DEFBEDD?9FFFFFFFFFFFFFFF/B./FB///;BF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t141\t*\t0\t0\t*\t*\t0\t0\tGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATT\tBBBBAFFFFFFFGGGGGGGGGGFGHHHHHGHHHHHHHHHHHHCGHHHHHHHGHHHHHHDGHHGGAECHHGHHHHHHHGHHHGHGFHHHHGGHGGHHFHHHHHHFHHHHHHHHH2GHHHHGHGHHFHHGGFGGGHHGHHHHHFHHHHEFHHHHEFGFFHGEHCFGDFDFFFFFCFFFFFFFFFFFFFAFBFFDFFFFFFFFADCF?9?EFBFB9EF-A.;BFFFFFFFBFFFFFFFFFFFFBFFFFFFFFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t77\t*\t0\t0\t*\t*\t0\t0\tGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGCTACAGTTCACTTTAGCTACCTCCAAGTGTTATG\tAA?AAFFFFFFFGGGGGFBFGGGGGGH5GHFEDHHGGGGCGFBGH?AEEHFFEEGHGHHHHGGG?0EHGHHGGGGGC?GEE/EE?GHHHGBHFHHHHHHGHHGHHHGGGCG/A@\u003cFGGHHHHHHHFF/GFDGHHHHHHGFFFGHGGHABGHFHHHHHFHEGDGHGDDEEHHBEDDEGFGHGBFFBFFEGGGEFGFGFB000;F0F;FGGEGGEFFF;-.9//B///B9FFFFF/BFFB/:.BB//;FBFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t141\t*\t0\t0\t*\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTGGAT\tCDDDBFFFFFFFGGGGGGGGGGHHHHHGGHHHGHHHGHHGGGGEHHGGHHHHHHHHHHHHHHGHHGHHHHHGGHHHHHFHHHHGCDCGHHHHHHHHEHHHGHGHHHGFHGGHGGHHHHHHHHFHHHFHHHGHHHHHHHHHFGGHHHHGGGEGAFHHGHHGGHHHHGHFBGFHGHGHGHGGHGGF@DAFEFBECAB=A.0BFFFEDF=A9.@D.-AAFFFA-:-..:.9/0:;0..-..0000::BFB09::\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGA\tABBBBFFFFFFFGGGFGGGGGGHHHGHHGGHBGHGAGFFCAFGHGFFGHHGFHHHHHGGGGGHGHHHHHHHHE3BFFHHHGG0EDF@GHFFGGGHGGGGGGGGGGGGGHHGGEEFHGFHHDDG@DGGGHHGDGGGGGHGG?CF?HHGHHHGHGHHHFFHGGGHHHHGGCD.;0\u003cC;CGGGGEFF/.;0;FFFBF/0;0CFGFFB..9B/;0CBFFBBFFFFBAC?DED9;B9AD;.FFFB/B/;FBA/B//\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBCFCCCCCFGGGGGGGGGGHHHHHHHGHHHHHHHHGHHHHGHDGHHHGGGGHHHHHHHHHHHHHHHGHHHHHGGGEGGHHHHFHHHHHHHHHHHHHHHHHHHHHHGHHGHHGGGGGHHHHHHHHHHHGHHHFHHHHHHGHGHGHGGGGCGGFGGFFFFFFFFFFFFFBFFFFFFFFFFFFFFAFFFFEAEFFFFFFFFFFF9BFFBFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFADAB-/BF.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t77\t*\t0\t0\t*\t*\t0\t0\tCGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTCTGATCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAACAAACACACATCCAGA\t\u003eA33\u003eFFFFFF@FFFGGGGFGGD4EGGGGGHHGFFGHFGGHHHFEFHECFHHHEHGAGBCCGCCEGGHGHEGFBFHFHHHHGGGHFHGHEGGGFEGEGG??@DBGHGGC-@FFGHFHFHB-??DA-DD@9:BEBG@B?E?A.ABBFBFA??F.FF/BFFB/B9B/9;BF9FF9FFFFFFFFFFFFFF?BB?;9EE;-;DDB9//;B-B@;ABFFEFFFF/-.9A.;//9/BF./B/..9.9:...//////\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH\u003c1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n" ], "status": "failure", "test_index": 6, "time_seconds": 68.11705374717712, "tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 16  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/c/c/1/dataset_cc1a00dd-8f0c-49ec-a34e-a7215c58e45d.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 4, merged 22; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1Getting block 2 of 30Getting block 3 of 30Getting block 4 of 30  Calculating Z arrays for bucket 1  Reserving size (777) for bucket 2  Reserving size (777) for bucket 3  Reserving size (777) for bucket 4  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 3:  bucket 1: 10%  Entering block accumulator loop for bucket 4:  bucket 1: 20%  bucket 2: 10%  bucket 3: 10%  bucket 1: 30%  bucket 4: 10%  bucket 2: 20%  bucket 1: 40%  bucket 3: 20%  bucket 4: 20%  bucket 2: 30%  bucket 1: 50%  bucket 3: 30%  bucket 4: 30%  bucket 2: 40%  bucket 1: 60%  bucket 3: 40%  bucket 4: 40%  bucket 1: 70%  bucket 3: 50%  bucket 2: 50%  bucket 1: 80%  bucket 4: 50%  bucket 3: 60%  bucket 2: 60%  bucket 1: 90%  bucket 4: 60%  bucket 3: 70%  bucket 2: 70%  bucket 1: 100%  bucket 4: 70%  bucket 3: 80%  Sorting block of length 689 for bucket 1  (Using difference cover)  bucket 2: 80%  bucket 3: 90%  bucket 4: 80%  bucket 3: 100%  Sorting block of length 629 for bucket 3  (Using difference cover)  bucket 2: 90%  bucket 4: 90%  bucket 2: 100%  Sorting block of length 445 for bucket 2  (Using difference cover)  bucket 4: 100%  Sorting block of length 499 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 630 for bucket 3  Sorting block time: 00:00:00Returning block of 690 for bucket 1  Sorting block time: 00:00:00Returning block of 446 for bucket 2  Sorting block time: 00:00:00Returning block of 500 for bucket 4Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 30  bucket 5: 10%  Reserving size (777) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 20%  Entering block accumulator loop for bucket 6:  bucket 5: 30%  bucket 6: 10%  bucket 5: 40%  bucket 6: 20%  bucket 5: 50%  bucket 6: 30%  bucket 5: 60%  bucket 6: 40%  bucket 5: 70%  bucket 6: 50%  bucket 5: 80%  bucket 6: 60%  bucket 5: 90%  bucket 6: 70%  bucket 5: 100%  bucket 6: 80%  Sorting block of length 738 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 305 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 739 for bucket 5  Sorting block time: 00:00:00Getting block 7 of 30Returning block of 306 for bucket 6  Reserving size (777) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 705 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 706 for bucket 7Getting block 8 of 30  Reserving size (777) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 772 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 773 for bucket 8Getting block 9 of 30  Reserving size (777) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 30  Reserving size (777) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 10: 60%  bucket 9: 60%  bucket 10: 70%  bucket 10: 80%  bucket 9: 70%  bucket 10: 90%  bucket 9: 80%  bucket 10: 100%  Sorting block of length 247 for bucket 10  (Using difference cover)  bucket 9: 90%  bucket 9: 100%  Sorting block of length 546 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 248 for bucket 10  Sorting block time: 00:00:00Returning block of 547 for bucket 9Getting block 11 of 30  Reserving size (777) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 611 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 612 for bucket 11Getting block 12 of 30  Reserving size (777) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 485 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 486 for bucket 12Getting block 13 of 30  Reserving size (777) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%Getting block 14 of 30  Reserving size (777) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 20%  Entering block accumulator loop for bucket 14:  bucket 13: 30%  bucket 13: 40%  bucket 14: 10%  bucket 13: 50%  bucket 13: 60%  bucket 14: 20%  bucket 13: 70%  bucket 14: 30%  bucket 13: 80%  bucket 14: 40%  bucket 13: 90%  bucket 13: 100%  bucket 14: 50%  Sorting block of length 597 for bucket 13  (Using difference cover)  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block time: 00:00:00  Sorting block of length 689 for bucket 14  (Using difference cover)Returning block of 598 for bucket 13  Sorting block time: 00:00:00Returning block of 690 for bucket 14Getting block 15 of 30  Reserving size (777) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 543 for bucket 15  (Using difference cover)Getting block 16 of 30  Reserving size (777) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  Sorting block time: 00:00:00Returning block of 544 for bucket 15  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 723 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 724 for bucket 16Getting block 17 of 30  Reserving size (777) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%Getting block 18 of 30  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 20%  Entering block accumulator loop for bucket 18:  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 18: 10%  bucket 17: 60%  bucket 18: 20%  bucket 17: 70%  bucket 18: 30%  bucket 17: 80%  bucket 18: 40%  bucket 17: 90%  bucket 18: 50%  bucket 17: 100%  Sorting block of length 578 for bucket 17  (Using difference cover)  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  Sorting block time: 00:00:00Returning block of 579 for bucket 17  bucket 18: 100%  Sorting block of length 356 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 357 for bucket 18Getting block 19 of 30  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:Getting block 20 of 30  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 19: 20%  bucket 20: 20%  bucket 20: 30%  bucket 19: 30%  bucket 20: 40%  bucket 19: 40%  bucket 20: 50%  bucket 20: 60%  bucket 19: 50%  bucket 20: 70%  bucket 20: 80%  bucket 19: 60%  bucket 20: 90%  bucket 19: 70%  bucket 20: 100%  Sorting block of length 268 for bucket 20  (Using difference cover)  bucket 19: 80%  bucket 19: 90%  Sorting block time: 00:00:00Returning block of 269 for bucket 20  bucket 19: 100%  Sorting block of length 731 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 732 for bucket 19Getting block 21 of 30  Reserving size (777) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 21 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 22 for bucket 21Getting block 22 of 30  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 952 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 953 for bucket 22Getting block 23 of 30  Reserving size (777) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%Getting block 24 of 30  Reserving size (777) for bucket 24  bucket 23: 50%  Calculating Z arrays for bucket 24  bucket 23: 60%  Entering block accumulator loop for bucket 24:  bucket 23: 70%  bucket 24: 10%  bucket 23: 80%  bucket 23: 90%  bucket 24: 20%  bucket 23: 100%  Sorting block of length 763 for bucket 23  (Using difference cover)  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  Sorting block time: 00:00:00Returning block of 764 for bucket 23  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 471 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 472 for bucket 24Getting block 25 of 30  Reserving size (777) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%Getting block 26 of 30  Reserving size (777) for bucket 26  Calculating Z arrays for bucket 26  bucket 25: 20%  Entering block accumulator loop for bucket 26:  bucket 25: 30%  bucket 26: 10%  bucket 25: 40%  bucket 26: 20%  bucket 25: 50%  bucket 26: 30%  bucket 25: 60%  bucket 26: 40%  bucket 25: 70%  bucket 26: 50%  bucket 25: 80%  bucket 26: 60%  bucket 25: 90%  bucket 26: 70%  bucket 25: 100%  Sorting block of length 415 for bucket 25  (Using difference cover)  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block time: 00:00:00  Sorting block of length 643 for bucket 26  (Using difference cover)Returning block of 416 for bucket 25  Sorting block time: 00:00:00Returning block of 644 for bucket 26Getting block 27 of 30  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 592 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 593 for bucket 27Getting block 28 of 30  Reserving size (777) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 684 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 685 for bucket 28Getting block 29 of 30  Reserving size (777) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 240 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 241 for bucket 29Getting block 30 of 30  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 602 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 603 for bucket 30Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 6, merged 21; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 1:Getting block 2 of 30Getting block 3 of 30  bucket 1: 10%  Reserving size (777) for bucket 2Getting block 4 of 30  Reserving size (777) for bucket 3  Calculating Z arrays for bucket 2  bucket 1: 20%  Reserving size (777) for bucket 4  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  bucket 1: 30%  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 4:  bucket 1: 40%  Entering block accumulator loop for bucket 3:  bucket 1: 50%  bucket 4: 10%  bucket 2: 10%  bucket 3: 10%  bucket 1: 60%  bucket 4: 20%  bucket 2: 20%  bucket 1: 70%  bucket 3: 20%  bucket 4: 30%  bucket 2: 30%  bucket 1: 80%  bucket 4: 40%  bucket 2: 40%  bucket 1: 90%  bucket 3: 30%  bucket 4: 50%  bucket 1: 100%  bucket 2: 50%  Sorting block of length 484 for bucket 1  (Using difference cover)  bucket 3: 40%  bucket 4: 60%  bucket 2: 60%  bucket 2: 70%  bucket 4: 70%  bucket 3: 50%  bucket 2: 80%  bucket 4: 80%  bucket 3: 60%  bucket 2: 90%  bucket 4: 90%  bucket 2: 100%  Sorting block of length 774 for bucket 2  (Using difference cover)  bucket 4: 100%  bucket 3: 70%  Sorting block of length 431 for bucket 4  (Using difference cover)  bucket 3: 80%  bucket 3: 90%  bucket 3: 100%  Sorting block of length 434 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 485 for bucket 1  Sorting block time: 00:00:00Returning block of 432 for bucket 4  Sorting block time: 00:00:00Returning block of 775 for bucket 2  Sorting block time: 00:00:00Returning block of 435 for bucket 3Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 776 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 777 for bucket 5Getting block 6 of 30  Reserving size (777) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 6: 10%Getting block 7 of 30  Reserving size (777) for bucket 7  Calculating Z arrays for bucket 7  bucket 6: 20%  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 6: 30%  bucket 7: 20%  bucket 6: 40%  bucket 7: 30%  bucket 7: 40%  bucket 6: 50%  bucket 7: 50%  bucket 6: 60%  bucket 7: 60%  bucket 6: 70%  bucket 7: 70%  bucket 7: 80%  bucket 6: 80%  bucket 7: 90%  bucket 6: 90%  bucket 7: 100%  Sorting block of length 707 for bucket 7  (Using difference cover)  bucket 6: 100%  Sorting block of length 179 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 180 for bucket 6  Sorting block time: 00:00:00Returning block of 708 for bucket 7Getting block 8 of 30  Reserving size (777) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 313 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 314 for bucket 8Getting block 9 of 30  Reserving size (777) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 535 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 536 for bucket 9Getting block 10 of 30  Reserving size (777) for bucket 10Getting block 11 of 30  Calculating Z arrays for bucket 10  Reserving size (777) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 10:  bucket 11: 10%  bucket 10: 10%  bucket 11: 20%  bucket 10: 20%  bucket 11: 30%  bucket 10: 30%  bucket 11: 40%  bucket 10: 40%  bucket 11: 50%  bucket 10: 50%  bucket 11: 60%  bucket 10: 60%  bucket 11: 70%  bucket 10: 70%  bucket 11: 80%  bucket 10: 80%  bucket 11: 90%  bucket 10: 90%  bucket 11: 100%  Sorting block of length 423 for bucket 11  (Using difference cover)  bucket 10: 100%  Sorting block of length 680 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 424 for bucket 11  Sorting block time: 00:00:00Returning block of 681 for bucket 10Getting block 12 of 30  Reserving size (777) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 371 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 372 for bucket 12Getting block 13 of 30  Reserving size (777) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 595 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 596 for bucket 13Getting block 14 of 30  Reserving size (777) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 708 for bucket 14  (Using difference cover)Getting block 15 of 30  Reserving size (777) for bucket 15  Calculating Z arrays for bucket 15  Sorting block time: 00:00:00Returning block of 709 for bucket 14  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 629 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 630 for bucket 15Getting block 16 of 30  Reserving size (777) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 750 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 751 for bucket 16Getting block 17 of 30  Reserving size (777) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 30  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 18:  bucket 17: 10%  bucket 18: 10%  bucket 18: 20%  bucket 17: 20%  bucket 18: 30%  bucket 17: 30%  bucket 18: 40%  bucket 17: 40%  bucket 18: 50%  bucket 17: 50%  bucket 18: 60%  bucket 17: 60%  bucket 18: 70%  bucket 17: 70%  bucket 18: 80%  bucket 17: 80%  bucket 18: 90%  bucket 17: 90%  bucket 18: 100%  Sorting block of length 722 for bucket 18  (Using difference cover)  bucket 17: 100%  Sorting block of length 606 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 723 for bucket 18  Sorting block time: 00:00:00Returning block of 607 for bucket 17Getting block 19 of 30  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 418 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 419 for bucket 19Getting block 20 of 30  Reserving size (777) for bucket 20Getting block 21 of 30  Calculating Z arrays for bucket 20  Reserving size (777) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 20:  Entering block accumulator loop for bucket 21:  bucket 20: 10%  bucket 21: 10%  bucket 20: 20%  bucket 21: 20%  bucket 20: 30%  bucket 21: 30%  bucket 20: 40%  bucket 21: 40%  bucket 20: 50%  bucket 21: 50%  bucket 20: 60%  bucket 21: 60%  bucket 20: 70%  bucket 21: 70%  bucket 20: 80%  bucket 21: 80%  bucket 20: 90%  bucket 21: 90%  bucket 20: 100%  Sorting block of length 519 for bucket 20  (Using difference cover)  bucket 21: 100%  Sorting block of length 422 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 520 for bucket 20  Sorting block time: 00:00:00Returning block of 423 for bucket 21Getting block 22 of 30  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 30  Entering block accumulator loop for bucket 22:  Reserving size (777) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 22: 10%  bucket 23: 10%  bucket 23: 20%  bucket 22: 20%  bucket 22: 30%  bucket 23: 30%  bucket 22: 40%  bucket 23: 40%  bucket 22: 50%  bucket 23: 50%  bucket 23: 60%  bucket 22: 60%  bucket 23: 70%  bucket 22: 70%  bucket 23: 80%  bucket 22: 80%  bucket 23: 90%  bucket 22: 90%  bucket 23: 100%  Sorting block of length 510 for bucket 23  (Using difference cover)  bucket 22: 100%  Sorting block of length 493 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 511 for bucket 23  Sorting block time: 00:00:00Returning block of 494 for bucket 22Getting block 24 of 30  Reserving size (777) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:Getting block 25 of 30  Reserving size (777) for bucket 25  Calculating Z arrays for bucket 25  bucket 24: 10%  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 24: 20%  bucket 25: 20%  bucket 24: 30%  bucket 25: 30%  bucket 25: 40%  bucket 24: 40%  bucket 25: 50%  bucket 25: 60%  bucket 24: 50%  bucket 25: 70%  bucket 24: 60%  bucket 25: 80%  bucket 25: 90%  bucket 24: 70%  bucket 25: 100%  Sorting block of length 457 for bucket 25  (Using difference cover)  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 732 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 458 for bucket 25  Sorting block time: 00:00:00Returning block of 733 for bucket 24Getting block 26 of 30  Reserving size (777) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%Getting block 27 of 30  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 20%  Entering block accumulator loop for bucket 27:  bucket 26: 30%  bucket 27: 10%  bucket 26: 40%  bucket 27: 20%  bucket 26: 50%  bucket 27: 30%  bucket 26: 60%  bucket 27: 40%  bucket 26: 70%  bucket 27: 50%  bucket 26: 80%  bucket 27: 60%  bucket 26: 90%  bucket 27: 70%  bucket 26: 100%  Sorting block of length 647 for bucket 26  (Using difference cover)  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 334 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 648 for bucket 26  Sorting block time: 00:00:00Returning block of 335 for bucket 27Getting block 28 of 30  Reserving size (777) for bucket 28Getting block 29 of 30  Calculating Z arrays for bucket 28  Reserving size (777) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 28:  Entering block accumulator loop for bucket 29:  bucket 28: 10%  bucket 29: 10%  bucket 29: 20%  bucket 28: 20%  bucket 29: 30%  bucket 28: 30%  bucket 29: 40%  bucket 28: 40%  bucket 29: 50%  bucket 28: 50%  bucket 29: 60%  bucket 28: 60%  bucket 29: 70%  bucket 28: 70%  bucket 29: 80%  bucket 28: 80%  bucket 29: 90%  bucket 28: 90%  bucket 29: 100%  Sorting block of length 582 for bucket 29  (Using difference cover)  bucket 28: 100%  Sorting block of length 631 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 632 for bucket 28  Sorting block time: 00:00:00Returning block of 583 for bucket 29Getting block 30 of 30  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 677 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 678 for bucket 30Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:01
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      8 (8.25%) aligned discordantly 1 time    ----    89 pairs aligned 0 times concordantly or discordantly; of these:      178 mates make up the pairs; of these:        153 (85.96%) aligned 0 times        25 (14.04%) aligned exactly 1 time        0 (0.00%) aligned >1 times23.50% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #8)" name="7" time="67.19424080848694">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "analysis_type|analysis_type_selector": "simple",  "library|input_1": {   "id": "6cfded9dd57b9420",   "src": "hda"  },  "library|input_2": {   "id": "e5f2e651fb757120",   "src": "hda"  },  "library|paired_options|paired_options_selector": "no",  "library|type": "paired",  "library|unaligned_file": false,  "reference_genome|own_file": {   "id": "c7bcc54392cbb6a4",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o | grep -q pipefail \u0026\u0026 set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} \u0027/galaxy/server/database/objects/1/8/9/dataset_189203a7-5ac5-46de-a292-188c12e764ea.dat\u0027 genome \u0026\u0026 ln -s -f \u0027/galaxy/server/database/objects/1/8/9/dataset_189203a7-5ac5-46de-a292-188c12e764ea.dat\u0027 genome.fa \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/6/4/8/dataset_6482f421-a9ae-46e8-a9fe-119ca68b0d63.dat\u0027 input_f.fasta \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/9/f/d/dataset_9fdd6fa8-ca5f-4eb0-82a2-ef546c9b7d61.dat\u0027 input_r.fasta \u0026\u0026   bowtie2  -p ${GALAXY_SLOTS:-4}  -x \u0027genome\u0027  -f  -1 \u0027input_f.fasta\u0027 -2 \u0027input_r.fasta\u0027                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/4/4/4/dataset_444f2469-f775-4e92-89c2-be9879ef2e83.dat\u0027",  "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2024-01-28T14:33:38.261154",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-7j6hp",  "galaxy_version": "21.09",  "history_id": "cbf056288c649de3",  "id": "5a0f3b11dc9487e8",  "inputs": {   "input_1": {    "id": "6cfded9dd57b9420",    "src": "hda",    "uuid": "6482f421-a9ae-46e8-a9fe-119ca68b0d63"   },   "input_2": {    "id": "e5f2e651fb757120",    "src": "hda",    "uuid": "9fdd6fa8-ca5f-4eb0-82a2-ef546c9b7d61"   },   "own_file": {    "id": "c7bcc54392cbb6a4",    "src": "hda",    "uuid": "189203a7-5ac5-46de-a292-188c12e764ea"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1706452457.0000000",    "title": "Job End Time",    "value": "2024-01-28 14:34:17"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1706452456.0000000",    "title": "Job Start Time",    "value": "2024-01-28 14:34:16"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "12000.0000000",    "title": "Memory Allocated (MB)",    "value": "12000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n22.00% overall alignment rate\n",  "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/8/9/dataset_189203a7-5ac5-46de-a292-188c12e764ea.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 4: 30%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 3: 40%\n  bucket 1: 80%\n  bucket 4: 50%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 4: 70%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 30\n  bucket 9: 20%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 20%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 30%\n  bucket 13: 10%\n  bucket 12: 40%\n  bucket 13: 20%\n  bucket 12: 50%\n  bucket 13: 30%\n  bucket 12: 60%\n  bucket 13: 40%\n  bucket 12: 70%\n  bucket 13: 50%\n  bucket 12: 80%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  bucket 13: 80%\n  bucket 13: 90%\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 30\n  Entering block accumulator loop for bucket 14:\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 15: 30%\n  bucket 14: 40%\n  bucket 15: 40%\n  bucket 14: 50%\n  bucket 15: 50%\n  bucket 14: 60%\n  bucket 15: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 15: 70%\n  bucket 14: 90%\n  bucket 15: 80%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\nGetting block 17 of 30\n  Calculating Z arrays for bucket 16\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 17: 30%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 17: 40%\n  bucket 16: 80%\n  bucket 17: 50%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\nGetting block 21 of 30\n  bucket 20: 100%\n  Reserving size (777) for bucket 21\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 30\n  Entering block accumulator loop for bucket 26:\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\nGetting block 28 of 30\n  bucket 26: 20%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 20%\n  Entering block accumulator loop for bucket 28:\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Reserving size (777) for bucket 4\n  bucket 1: 10%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 1: 80%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 1: 90%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 2: 50%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 2: 60%\n  bucket 3: 70%\n  bucket 4: 90%\n  bucket 2: 70%\n  bucket 4: 100%\n  bucket 3: 80%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 90%\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  bucket 2: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\nGetting block 8 of 30\n  bucket 7: 50%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 60%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 70%\n  bucket 8: 10%\n  bucket 7: 80%\n  bucket 8: 20%\n  bucket 7: 90%\n  bucket 8: 30%\n  bucket 7: 100%\n  bucket 8: 40%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Entering block accumulator loop for bucket 13:\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 30\n  bucket 16: 10%\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 20%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 30%\n  bucket 17: 10%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 17: 20%\n  bucket 16: 60%\n  bucket 17: 30%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 17: 40%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\nGetting block 22 of 30\n  Calculating Z arrays for bucket 21\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 21: 20%\n  bucket 22: 30%\n  bucket 21: 30%\n  bucket 22: 40%\n  bucket 21: 40%\n  bucket 22: 50%\n  bucket 21: 50%\n  bucket 22: 60%\n  bucket 21: 60%\n  bucket 22: 70%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 21: 80%\n  bucket 22: 90%\n  bucket 21: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 30\n  Entering block accumulator loop for bucket 27:\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 27: 50%\n  bucket 28: 60%\n  bucket 27: 60%\n  bucket 28: 70%\n  bucket 27: 70%\n  bucket 28: 80%\n  bucket 27: 80%\n  bucket 28: 90%\n  bucket 27: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 20%\n  bucket 30: 40%\n  bucket 29: 30%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 40%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 29: 50%\n  bucket 30: 90%\n  bucket 29: 60%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "86e3cc02eebe65cc",    "src": "hda",    "uuid": "444f2469-f775-4e92-89c2-be9879ef2e83"   }  },  "params": {   "__input_ext": "\"input\"",   "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 350, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 351, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}",   "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 352, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}",   "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}",   "save_mapping_stats": "\"false\""  },  "state": "ok",  "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n22.00% overall alignment rate\n",  "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/8/9/dataset_189203a7-5ac5-46de-a292-188c12e764ea.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 4: 30%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 3: 40%\n  bucket 1: 80%\n  bucket 4: 50%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 4: 70%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 30\n  bucket 9: 20%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 20%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 30%\n  bucket 13: 10%\n  bucket 12: 40%\n  bucket 13: 20%\n  bucket 12: 50%\n  bucket 13: 30%\n  bucket 12: 60%\n  bucket 13: 40%\n  bucket 12: 70%\n  bucket 13: 50%\n  bucket 12: 80%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  bucket 13: 80%\n  bucket 13: 90%\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 30\n  Entering block accumulator loop for bucket 14:\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 15: 30%\n  bucket 14: 40%\n  bucket 15: 40%\n  bucket 14: 50%\n  bucket 15: 50%\n  bucket 14: 60%\n  bucket 15: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 15: 70%\n  bucket 14: 90%\n  bucket 15: 80%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\nGetting block 17 of 30\n  Calculating Z arrays for bucket 16\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 17: 30%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 17: 40%\n  bucket 16: 80%\n  bucket 17: 50%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\nGetting block 21 of 30\n  bucket 20: 100%\n  Reserving size (777) for bucket 21\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 30\n  Entering block accumulator loop for bucket 26:\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\nGetting block 28 of 30\n  bucket 26: 20%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 20%\n  Entering block accumulator loop for bucket 28:\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Reserving size (777) for bucket 4\n  bucket 1: 10%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 1: 80%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 1: 90%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 2: 50%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 2: 60%\n  bucket 3: 70%\n  bucket 4: 90%\n  bucket 2: 70%\n  bucket 4: 100%\n  bucket 3: 80%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 90%\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  bucket 2: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\nGetting block 8 of 30\n  bucket 7: 50%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 60%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 70%\n  bucket 8: 10%\n  bucket 7: 80%\n  bucket 8: 20%\n  bucket 7: 90%\n  bucket 8: 30%\n  bucket 7: 100%\n  bucket 8: 40%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Entering block accumulator loop for bucket 13:\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 30\n  bucket 16: 10%\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 20%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 30%\n  bucket 17: 10%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 17: 20%\n  bucket 16: 60%\n  bucket 17: 30%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 17: 40%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\nGetting block 22 of 30\n  Calculating Z arrays for bucket 21\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 21: 20%\n  bucket 22: 30%\n  bucket 21: 30%\n  bucket 22: 40%\n  bucket 21: 40%\n  bucket 22: 50%\n  bucket 21: 50%\n  bucket 22: 60%\n  bucket 21: 60%\n  bucket 22: 70%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 21: 80%\n  bucket 22: 90%\n  bucket 21: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 30\n  Entering block accumulator loop for bucket 27:\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 27: 50%\n  bucket 28: 60%\n  bucket 27: 60%\n  bucket 28: 70%\n  bucket 27: 70%\n  bucket 28: 80%\n  bucket 27: 80%\n  bucket 28: 90%\n  bucket 27: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 20%\n  bucket 30: 40%\n  bucket 29: 30%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 40%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 29: 50%\n  bucket 30: 90%\n  bucket 29: 60%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2024-01-28T14:34:27.509595",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_wq6kt2op.sam v. /tmp/history_bam_converted_to_sam_m_cz5r70.sam )\n--- local_file\n+++ history_data\n@@ -1,71 +1,72 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/mvandenb/miniconda3/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -f -1 input_f.fasta -2 input_r.fasta\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -f -1 input_f.fasta -2 input_r.fasta\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/260/tmp -O bam -o /galaxy/server/database/objects/4/4/4/dataset_444f2469-f775-4e92-89c2-be9879ef2e83.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t24\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-47\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-47\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I208M11I6M\t=\t1\t-218\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-151\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:33\tNM:i:40\tMD:Z:0G0A1C68A141A0T0T1\tYS:i:-143\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I208M11I6M\t=\t1\t218\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-151\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:33\tNM:i:40\tMD:Z:0G0A1C68A141A0T0T1\tYS:i:-143\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t6\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-146\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-140\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t233M3I7M1I7M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-64\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:4\tNM:i:11\tMD:Z:72A158A1A0A1A6A0T2\tYS:i:-83\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t233M3I7M1I7M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-64\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:4\tNM:i:11\tMD:Z:72A158A1A0A1A6A0T2\tYS:i:-83\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:6455:17124\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n********\n*SNIP *\n********\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:7437:24508\t77\t*\t0\t0\t*\t*\t0\t0\tACACACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTGTCTCTTATACACATCTCCGAGCCCACGAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:7437:24508\t141\t*\t0\t0\t*\t*\t0\t0\tACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTCTGTCTCTTATACACATCTGACGCTGCCGAGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGACAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t77\t*\t0\t0\t*\t*\t0\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGCGGTGTCCACGCAATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATTGCGTGGACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t141\t*\t0\t0\t*\t*\t0\t0\tGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCAAGTGTAGTGCTCGGGGGGG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGGGCTGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCTTGAAGTAGGAACC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t77\t*\t0\t0\t*\t*\t0\t0\tCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t141\t*\t0\t0\t*\t*\t0\t0\tGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t77\t*\t0\t0\t*\t*\t0\t0\tGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGCTACAGTTCACTTTAGCTACCTCCAAGTGTTATG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t141\t*\t0\t0\t*\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTGGAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:21679:18011\t77\t*\t0\t0\t*\t*\t0\t0\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGAGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATATGTCTTTGATTCCTGCCTCTTCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAACTGTCTCTTATACACATATCCACGCCCACGAGACTAAGGCGAAGTTCATT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:21679:18011\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCTGTCTCTTATACACATCTGACGCTGCCGACGACCGAGCTAGTTGAGATC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t77\t*\t0\t0\t*\t*\t0\t0\tCGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTCTGATCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAACAAACACACATCCAGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n" ], "status": "failure", "test_index": 7, "time_seconds": 67.19424080848694, "tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 16  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/1/8/9/dataset_189203a7-5ac5-46de-a292-188c12e764ea.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 4, merged 22; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1Getting block 2 of 30Getting block 3 of 30Getting block 4 of 30  Calculating Z arrays for bucket 1  Reserving size (777) for bucket 2  Reserving size (777) for bucket 3  Reserving size (777) for bucket 4  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 2:  bucket 1: 10%  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  bucket 4: 10%  bucket 3: 10%  bucket 2: 20%  bucket 1: 40%  bucket 4: 20%  bucket 3: 20%  bucket 1: 50%  bucket 2: 30%  bucket 4: 30%  bucket 1: 60%  bucket 3: 30%  bucket 2: 40%  bucket 4: 40%  bucket 1: 70%  bucket 3: 40%  bucket 1: 80%  bucket 4: 50%  bucket 2: 50%  bucket 3: 50%  bucket 1: 90%  bucket 4: 60%  bucket 3: 60%  bucket 2: 60%  bucket 4: 70%  bucket 1: 100%  Sorting block of length 689 for bucket 1  (Using difference cover)  bucket 3: 70%  bucket 2: 70%  bucket 4: 80%  bucket 3: 80%  bucket 2: 80%  bucket 3: 90%  bucket 4: 90%  bucket 3: 100%  Sorting block of length 629 for bucket 3  (Using difference cover)  bucket 2: 90%  bucket 4: 100%  Sorting block of length 499 for bucket 4  (Using difference cover)  bucket 2: 100%  Sorting block of length 445 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 690 for bucket 1  Sorting block time: 00:00:00Returning block of 630 for bucket 3  Sorting block time: 00:00:00Returning block of 500 for bucket 4  Sorting block time: 00:00:00Returning block of 446 for bucket 2Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 30  Reserving size (777) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 6: 50%  bucket 6: 60%  bucket 5: 70%  bucket 6: 70%  bucket 6: 80%  bucket 5: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 305 for bucket 6  (Using difference cover)  bucket 5: 90%  bucket 5: 100%  Sorting block of length 738 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 306 for bucket 6  Sorting block time: 00:00:00Returning block of 739 for bucket 5Getting block 7 of 30  Reserving size (777) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 705 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 706 for bucket 7Getting block 8 of 30  Reserving size (777) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 772 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 773 for bucket 8Getting block 9 of 30  Reserving size (777) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%Getting block 10 of 30  bucket 9: 20%  Reserving size (777) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 10: 20%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 546 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 247 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 9  Sorting block time: 00:00:00Returning block of 248 for bucket 10Getting block 11 of 30  Reserving size (777) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 611 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 612 for bucket 11Getting block 12 of 30  Reserving size (777) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%Getting block 13 of 30  Reserving size (777) for bucket 13  Calculating Z arrays for bucket 13  bucket 12: 20%  Entering block accumulator loop for bucket 13:  bucket 12: 30%  bucket 13: 10%  bucket 12: 40%  bucket 13: 20%  bucket 12: 50%  bucket 13: 30%  bucket 12: 60%  bucket 13: 40%  bucket 12: 70%  bucket 13: 50%  bucket 12: 80%  bucket 13: 60%  bucket 13: 70%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 485 for bucket 12  (Using difference cover)  bucket 13: 80%  bucket 13: 90%  Sorting block time: 00:00:00Returning block of 486 for bucket 12  bucket 13: 100%  Sorting block of length 597 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 598 for bucket 13Getting block 14 of 30  Reserving size (777) for bucket 14  Calculating Z arrays for bucket 14Getting block 15 of 30  Entering block accumulator loop for bucket 14:  Reserving size (777) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 14: 10%  bucket 15: 10%  bucket 14: 20%  bucket 15: 20%  bucket 14: 30%  bucket 15: 30%  bucket 14: 40%  bucket 15: 40%  bucket 14: 50%  bucket 15: 50%  bucket 14: 60%  bucket 15: 60%  bucket 14: 70%  bucket 14: 80%  bucket 15: 70%  bucket 14: 90%  bucket 15: 80%  bucket 14: 100%  Sorting block of length 689 for bucket 14  (Using difference cover)  bucket 15: 90%  bucket 15: 100%  Sorting block of length 543 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 690 for bucket 14  Sorting block time: 00:00:00Returning block of 544 for bucket 15Getting block 16 of 30  Reserving size (777) for bucket 16Getting block 17 of 30  Calculating Z arrays for bucket 16  Reserving size (777) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  Entering block accumulator loop for bucket 17:  bucket 16: 10%  bucket 16: 20%  bucket 17: 10%  bucket 16: 30%  bucket 17: 20%  bucket 16: 40%  bucket 16: 50%  bucket 17: 30%  bucket 16: 60%  bucket 16: 70%  bucket 17: 40%  bucket 16: 80%  bucket 17: 50%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 723 for bucket 16  (Using difference cover)  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  Sorting block time: 00:00:00Returning block of 724 for bucket 16  bucket 17: 90%  bucket 17: 100%  Sorting block of length 578 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 579 for bucket 17Getting block 18 of 30  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 356 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 357 for bucket 18Getting block 19 of 30  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 731 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 732 for bucket 19Getting block 20 of 30  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%Getting block 21 of 30  bucket 20: 100%  Reserving size (777) for bucket 21  Sorting block of length 268 for bucket 20  (Using difference cover)  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  Sorting block time: 00:00:00Returning block of 269 for bucket 20  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 21 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 22 for bucket 21Getting block 22 of 30  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 952 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 953 for bucket 22Getting block 23 of 30  Reserving size (777) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 763 for bucket 23  (Using difference cover)Getting block 24 of 30  Reserving size (777) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  Sorting block time: 00:00:00Returning block of 764 for bucket 23  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 471 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 472 for bucket 24Getting block 25 of 30  Reserving size (777) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 415 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 416 for bucket 25Getting block 26 of 30  Reserving size (777) for bucket 26  Calculating Z arrays for bucket 26Getting block 27 of 30  Entering block accumulator loop for bucket 26:  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 26: 10%  bucket 27: 10%Getting block 28 of 30  bucket 26: 20%  Reserving size (777) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 20%  Entering block accumulator loop for bucket 28:  bucket 26: 30%  bucket 27: 30%  bucket 26: 40%  bucket 28: 10%  bucket 27: 40%  bucket 26: 50%  bucket 28: 20%  bucket 27: 50%  bucket 26: 60%  bucket 28: 30%  bucket 27: 60%  bucket 26: 70%  bucket 28: 40%  bucket 27: 70%  bucket 26: 80%  bucket 28: 50%  bucket 27: 80%  bucket 26: 90%  bucket 28: 60%  bucket 27: 90%  bucket 26: 100%  Sorting block of length 643 for bucket 26  (Using difference cover)  bucket 28: 70%  bucket 27: 100%  Sorting block of length 592 for bucket 27  (Using difference cover)  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 684 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 593 for bucket 27  Sorting block time: 00:00:00Returning block of 644 for bucket 26  Sorting block time: 00:00:00Returning block of 685 for bucket 28Getting block 29 of 30  Reserving size (777) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 240 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 241 for bucket 29Getting block 30 of 30  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 602 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 603 for bucket 30Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:01Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 6, merged 21; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1Getting block 2 of 30Getting block 3 of 30  Calculating Z arrays for bucket 1  Reserving size (777) for bucket 2  Reserving size (777) for bucket 3  Entering block accumulator loop for bucket 1:Getting block 4 of 30  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 3  Reserving size (777) for bucket 4  bucket 1: 10%  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 2:  bucket 1: 20%  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 1: 30%  bucket 2: 10%  bucket 1: 40%  bucket 3: 10%  bucket 4: 10%  bucket 1: 50%  bucket 2: 20%  bucket 3: 20%  bucket 1: 60%  bucket 4: 20%  bucket 2: 30%  bucket 1: 70%  bucket 3: 30%  bucket 4: 30%  bucket 1: 80%  bucket 4: 40%  bucket 3: 40%  bucket 1: 90%  bucket 2: 40%  bucket 4: 50%  bucket 1: 100%  Sorting block of length 484 for bucket 1  (Using difference cover)  bucket 3: 50%  bucket 4: 60%  bucket 2: 50%  bucket 4: 70%  bucket 3: 60%  bucket 4: 80%  bucket 2: 60%  bucket 3: 70%  bucket 4: 90%  bucket 2: 70%  bucket 4: 100%  bucket 3: 80%  Sorting block of length 431 for bucket 4  (Using difference cover)  bucket 2: 80%  bucket 3: 90%  Sorting block time: 00:00:00Returning block of 485 for bucket 1  bucket 2: 90%  bucket 3: 100%  Sorting block of length 434 for bucket 3  (Using difference cover)  bucket 2: 100%  Sorting block of length 774 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 775 for bucket 2  Sorting block time: 00:00:00Returning block of 435 for bucket 3  Sorting block time: 00:00:00Returning block of 432 for bucket 4Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5Getting block 6 of 30  Entering block accumulator loop for bucket 5:  Reserving size (777) for bucket 6  Calculating Z arrays for bucket 6  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 6: 10%  bucket 5: 30%  bucket 6: 20%  bucket 5: 40%  bucket 6: 30%  bucket 5: 50%  bucket 6: 40%  bucket 5: 60%  bucket 6: 50%  bucket 5: 70%  bucket 6: 60%  bucket 5: 80%  bucket 6: 70%  bucket 5: 90%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 776 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 179 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 777 for bucket 5  Sorting block time: 00:00:00Returning block of 180 for bucket 6Getting block 7 of 30  Reserving size (777) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%Getting block 8 of 30  bucket 7: 50%  Reserving size (777) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 60%  Entering block accumulator loop for bucket 8:  bucket 7: 70%  bucket 8: 10%  bucket 7: 80%  bucket 8: 20%  bucket 7: 90%  bucket 8: 30%  bucket 7: 100%  bucket 8: 40%  Sorting block of length 707 for bucket 7  (Using difference cover)  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 313 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 708 for bucket 7  Sorting block time: 00:00:00Returning block of 314 for bucket 8Getting block 9 of 30  Reserving size (777) for bucket 9Getting block 10 of 30  Calculating Z arrays for bucket 9  Reserving size (777) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 535 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 680 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 536 for bucket 9  Sorting block time: 00:00:00Returning block of 681 for bucket 10Getting block 11 of 30  Reserving size (777) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 423 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 424 for bucket 11Getting block 12 of 30  Reserving size (777) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 371 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 372 for bucket 12Getting block 13 of 30  Reserving size (777) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 30  Entering block accumulator loop for bucket 13:  Reserving size (777) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 13: 70%  bucket 14: 60%  bucket 13: 80%  bucket 14: 70%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  Sorting block of length 595 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 708 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 596 for bucket 13  Sorting block time: 00:00:00Returning block of 709 for bucket 14Getting block 15 of 30  Reserving size (777) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 629 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 630 for bucket 15Getting block 16 of 30  Reserving size (777) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:Getting block 17 of 30  bucket 16: 10%  Reserving size (777) for bucket 17  Calculating Z arrays for bucket 17  bucket 16: 20%  Entering block accumulator loop for bucket 17:  bucket 16: 30%  bucket 17: 10%  bucket 16: 40%  bucket 16: 50%  bucket 17: 20%  bucket 16: 60%  bucket 17: 30%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 17: 40%  bucket 16: 100%  Sorting block of length 750 for bucket 16  (Using difference cover)  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  Sorting block time: 00:00:00Returning block of 751 for bucket 16  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 606 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 607 for bucket 17Getting block 18 of 30  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 722 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 723 for bucket 18Getting block 19 of 30  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 418 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 419 for bucket 19Getting block 20 of 30  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 519 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 520 for bucket 20Getting block 21 of 30  Reserving size (777) for bucket 21Getting block 22 of 30  Calculating Z arrays for bucket 21  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  Entering block accumulator loop for bucket 22:  bucket 21: 10%  bucket 22: 10%  bucket 22: 20%  bucket 21: 20%  bucket 22: 30%  bucket 21: 30%  bucket 22: 40%  bucket 21: 40%  bucket 22: 50%  bucket 21: 50%  bucket 22: 60%  bucket 21: 60%  bucket 22: 70%  bucket 21: 70%  bucket 22: 80%  bucket 21: 80%  bucket 22: 90%  bucket 21: 90%  bucket 22: 100%  Sorting block of length 493 for bucket 22  (Using difference cover)  bucket 21: 100%  Sorting block of length 422 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 494 for bucket 22  Sorting block time: 00:00:00Returning block of 423 for bucket 21Getting block 23 of 30  Reserving size (777) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 510 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 511 for bucket 23Getting block 24 of 30  Reserving size (777) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 732 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 733 for bucket 24Getting block 25 of 30  Reserving size (777) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%Getting block 26 of 30  Reserving size (777) for bucket 26  Calculating Z arrays for bucket 26  bucket 25: 100%  Sorting block of length 457 for bucket 25  (Using difference cover)  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  Sorting block time: 00:00:00Returning block of 458 for bucket 25  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 647 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 648 for bucket 26Getting block 27 of 30  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27Getting block 28 of 30  Entering block accumulator loop for bucket 27:  Reserving size (777) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 27: 10%  bucket 28: 10%  bucket 27: 20%  bucket 28: 20%  bucket 27: 30%  bucket 28: 30%  bucket 27: 40%  bucket 28: 40%  bucket 28: 50%  bucket 27: 50%  bucket 28: 60%  bucket 27: 60%  bucket 28: 70%  bucket 27: 70%  bucket 28: 80%  bucket 27: 80%  bucket 28: 90%  bucket 27: 90%  bucket 28: 100%  Sorting block of length 631 for bucket 28  (Using difference cover)  bucket 27: 100%  Sorting block of length 334 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 335 for bucket 27  Sorting block time: 00:00:00Returning block of 632 for bucket 28Getting block 29 of 30  Reserving size (777) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 30  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 29: 10%  bucket 30: 20%  bucket 30: 30%  bucket 29: 20%  bucket 30: 40%  bucket 29: 30%  bucket 30: 50%  bucket 30: 60%  bucket 29: 40%  bucket 30: 70%  bucket 30: 80%  bucket 29: 50%  bucket 30: 90%  bucket 29: 60%  bucket 30: 100%  Sorting block of length 677 for bucket 30  (Using difference cover)  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 582 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 678 for bucket 30  Sorting block time: 00:00:00Returning block of 583 for bucket 29Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #9)" name="8" time="68.68311023712158">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 16  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/3/e/8/dataset_3e8cdea0-1470-4ede-a113-267508443495.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 4, merged 22; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 30  Entering block accumulator loop for bucket 1:  Reserving size (777) for bucket 2  Calculating Z arrays for bucket 2  bucket 1: 10%Getting block 3 of 30  Entering block accumulator loop for bucket 2:Getting block 4 of 30  bucket 1: 20%  Reserving size (777) for bucket 3  Reserving size (777) for bucket 4  Calculating Z arrays for bucket 3  bucket 1: 30%  Calculating Z arrays for bucket 4  bucket 2: 10%  bucket 1: 40%  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 1: 50%  bucket 2: 20%  bucket 3: 10%  bucket 1: 60%  bucket 2: 30%  bucket 1: 70%  bucket 3: 20%  bucket 1: 80%  bucket 4: 10%  bucket 2: 40%  bucket 3: 30%  bucket 1: 90%  bucket 3: 40%  bucket 1: 100%  bucket 2: 50%  bucket 4: 20%  Sorting block of length 689 for bucket 1  (Using difference cover)  bucket 3: 50%  bucket 2: 60%  bucket 3: 60%  bucket 4: 30%  bucket 3: 70%  bucket 2: 70%  bucket 3: 80%  bucket 4: 40%  bucket 2: 80%  bucket 3: 90%  bucket 4: 50%  bucket 3: 100%  bucket 2: 90%  Sorting block of length 629 for bucket 3  (Using difference cover)  bucket 4: 60%  bucket 2: 100%  Sorting block of length 445 for bucket 2  (Using difference cover)  bucket 4: 70%  Sorting block time: 00:00:00Returning block of 690 for bucket 1  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 499 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 630 for bucket 3  Sorting block time: 00:00:00Returning block of 446 for bucket 2  Sorting block time: 00:00:00Returning block of 500 for bucket 4Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:Getting block 6 of 30  bucket 5: 10%  Reserving size (777) for bucket 6  Calculating Z arrays for bucket 6Getting block 7 of 30  bucket 5: 20%  Entering block accumulator loop for bucket 6:  Reserving size (777) for bucket 7  Calculating Z arrays for bucket 7  bucket 5: 30%  Entering block accumulator loop for bucket 7:  bucket 6: 10%  bucket 5: 40%  bucket 6: 20%  bucket 7: 10%  bucket 6: 30%  bucket 5: 50%  bucket 7: 20%  bucket 6: 40%  bucket 5: 60%  bucket 7: 30%  bucket 6: 50%  bucket 5: 70%  bucket 7: 40%  bucket 6: 60%  bucket 5: 80%  bucket 7: 50%  bucket 6: 70%  bucket 5: 90%  bucket 7: 60%  bucket 6: 80%  bucket 7: 70%  bucket 6: 90%  bucket 7: 80%  bucket 6: 100%  bucket 7: 90%  Sorting block of length 305 for bucket 6  (Using difference cover)  bucket 7: 100%  Sorting block of length 705 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 306 for bucket 6  Sorting block time: 00:00:00  bucket 5: 100%Returning block of 706 for bucket 7  Sorting block of length 738 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 739 for bucket 5Getting block 8 of 30  Reserving size (777) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 772 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 773 for bucket 8Getting block 9 of 30  Reserving size (777) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 546 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 547 for bucket 9Getting block 10 of 30  Reserving size (777) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 247 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 248 for bucket 10Getting block 11 of 30  Reserving size (777) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 30  Reserving size (777) for bucket 12  Entering block accumulator loop for bucket 11:  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 11: 20%  bucket 12: 10%  bucket 11: 30%  bucket 12: 20%  bucket 11: 40%  bucket 12: 30%  bucket 11: 50%  bucket 12: 40%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  Sorting block of length 611 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 485 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 612 for bucket 11  Sorting block time: 00:00:00Returning block of 486 for bucket 12Getting block 13 of 30  Reserving size (777) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 597 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 598 for bucket 13Getting block 14 of 30  Reserving size (777) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%Getting block 15 of 30  Reserving size (777) for bucket 15  Calculating Z arrays for bucket 15  bucket 14: 100%  Entering block accumulator loop for bucket 15:  Sorting block of length 689 for bucket 14  (Using difference cover)  bucket 15: 10%  bucket 15: 20%  Sorting block time: 00:00:00Returning block of 690 for bucket 14  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 543 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 15Getting block 16 of 30  Reserving size (777) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 723 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 724 for bucket 16Getting block 17 of 30  Reserving size (777) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:Getting block 18 of 30  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 10%  Entering block accumulator loop for bucket 18:  bucket 17: 20%  bucket 18: 10%  bucket 17: 30%  bucket 18: 20%  bucket 17: 40%  bucket 18: 30%  bucket 18: 40%  bucket 17: 50%  bucket 18: 50%  bucket 17: 60%  bucket 18: 60%  bucket 17: 70%  bucket 18: 70%  bucket 17: 80%  bucket 18: 80%  bucket 17: 90%  bucket 18: 90%  bucket 17: 100%  Sorting block of length 578 for bucket 17  (Using difference cover)  bucket 18: 100%  Sorting block of length 356 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 357 for bucket 18  Sorting block time: 00:00:00Returning block of 579 for bucket 17Getting block 19 of 30  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%Getting block 20 of 30  bucket 19: 20%  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 19: 30%  bucket 19: 40%  bucket 20: 10%  bucket 19: 50%  bucket 20: 20%  bucket 19: 60%  bucket 20: 30%  bucket 19: 70%  bucket 20: 40%  bucket 19: 80%  bucket 20: 50%  bucket 19: 90%  bucket 20: 60%  bucket 19: 100%  Sorting block of length 731 for bucket 19  (Using difference cover)  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 268 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 732 for bucket 19  Sorting block time: 00:00:00Returning block of 269 for bucket 20Getting block 21 of 30  Reserving size (777) for bucket 21  Calculating Z arrays for bucket 21Getting block 22 of 30  Entering block accumulator loop for bucket 21:  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 21: 10%  bucket 22: 10%  bucket 22: 20%  bucket 21: 20%  bucket 22: 30%  bucket 22: 40%  bucket 21: 30%  bucket 22: 50%  bucket 21: 40%  bucket 22: 60%  bucket 22: 70%  bucket 21: 50%  bucket 22: 80%  bucket 21: 60%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 952 for bucket 22  (Using difference cover)  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 21 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 953 for bucket 22  Sorting block time: 00:00:00Returning block of 22 for bucket 21Getting block 23 of 30  Reserving size (777) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 763 for bucket 23  (Using difference cover)Getting block 24 of 30  Reserving size (777) for bucket 24  Sorting block time: 00:00:00  Calculating Z arrays for bucket 24Returning block of 764 for bucket 23  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 471 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 472 for bucket 24Getting block 25 of 30  Reserving size (777) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 415 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 416 for bucket 25Getting block 26 of 30  Reserving size (777) for bucket 26Getting block 27 of 30  Calculating Z arrays for bucket 26  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 26:  Entering block accumulator loop for bucket 27:  bucket 26: 10%  bucket 27: 10%  bucket 26: 20%  bucket 27: 20%  bucket 26: 30%  bucket 27: 30%  bucket 26: 40%  bucket 27: 40%  bucket 26: 50%  bucket 26: 60%  bucket 27: 50%  bucket 26: 70%  bucket 27: 60%  bucket 26: 80%  bucket 26: 90%  bucket 27: 70%  bucket 26: 100%  Sorting block of length 643 for bucket 26  (Using difference cover)  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 592 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 644 for bucket 26  Sorting block time: 00:00:00Returning block of 593 for bucket 27Getting block 28 of 30  Reserving size (777) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 684 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 685 for bucket 28Getting block 29 of 30  Reserving size (777) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 240 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 241 for bucket 29Getting block 30 of 30  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 602 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 603 for bucket 30Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 6, merged 21; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1Getting block 2 of 30Getting block 3 of 30Getting block 4 of 30  Calculating Z arrays for bucket 1  Reserving size (777) for bucket 2  Reserving size (777) for bucket 3  Reserving size (777) for bucket 4  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 3: 10%  bucket 1: 30%  bucket 4: 10%  bucket 1: 40%  bucket 2: 20%  bucket 3: 20%  bucket 1: 50%  bucket 4: 20%  bucket 1: 60%  bucket 2: 30%  bucket 3: 30%  bucket 1: 70%  bucket 4: 30%  bucket 1: 80%  bucket 2: 40%  bucket 3: 40%  bucket 1: 90%  bucket 4: 40%  bucket 1: 100%  bucket 2: 50%  bucket 3: 50%  Sorting block of length 484 for bucket 1  (Using difference cover)  bucket 4: 50%  bucket 2: 60%  bucket 3: 60%  bucket 4: 60%  bucket 2: 70%  Sorting block time: 00:00:00  bucket 3: 70%  bucket 4: 70%Returning block of 485 for bucket 1  bucket 2: 80%  bucket 3: 80%  bucket 4: 80%  bucket 2: 90%  bucket 3: 90%  bucket 4: 90%  bucket 2: 100%  bucket 3: 100%  bucket 4: 100%  Sorting block of length 774 for bucket 2  (Using difference cover)  Sorting block of length 434 for bucket 3  (Using difference cover)  Sorting block of length 431 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 432 for bucket 4  Sorting block time: 00:00:00Returning block of 775 for bucket 2  Sorting block time: 00:00:00Returning block of 435 for bucket 3Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%Getting block 6 of 30  Reserving size (777) for bucket 6  bucket 5: 40%  Calculating Z arrays for bucket 6  bucket 5: 50%  Entering block accumulator loop for bucket 6:  bucket 5: 60%  bucket 6: 10%  bucket 5: 70%  bucket 6: 20%  bucket 5: 80%  bucket 6: 30%  bucket 5: 90%  bucket 6: 40%  bucket 5: 100%  Sorting block of length 776 for bucket 5  (Using difference cover)  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 179 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 777 for bucket 5  Sorting block time: 00:00:00Returning block of 180 for bucket 6Getting block 7 of 30  Reserving size (777) for bucket 7  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%Getting block 8 of 30  Reserving size (777) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 30%  Entering block accumulator loop for bucket 8:  bucket 7: 40%  bucket 8: 10%  bucket 8: 20%  bucket 7: 50%  bucket 8: 30%  bucket 7: 60%  bucket 8: 40%  bucket 7: 70%  bucket 8: 50%  bucket 7: 80%  bucket 8: 60%  bucket 7: 90%  bucket 8: 70%  bucket 7: 100%  Sorting block of length 707 for bucket 7  (Using difference cover)  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 313 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 708 for bucket 7  Sorting block time: 00:00:00Returning block of 314 for bucket 8Getting block 9 of 30  Reserving size (777) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 535 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 536 for bucket 9Getting block 10 of 30  Reserving size (777) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 680 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 681 for bucket 10Getting block 11 of 30  Reserving size (777) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:Getting block 12 of 30  bucket 11: 10%  Reserving size (777) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 20%  bucket 12: 10%  bucket 11: 30%  bucket 12: 20%  bucket 11: 40%  bucket 12: 30%  bucket 11: 50%  bucket 12: 40%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  Sorting block of length 423 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 371 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 424 for bucket 11  Sorting block time: 00:00:00Returning block of 372 for bucket 12Getting block 13 of 30  Reserving size (777) for bucket 13Getting block 14 of 30  Calculating Z arrays for bucket 13  Reserving size (777) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 14: 10%  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 13: 80%  bucket 14: 80%  bucket 13: 90%  bucket 14: 90%  bucket 13: 100%  Sorting block of length 595 for bucket 13  (Using difference cover)  bucket 14: 100%  Sorting block of length 708 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 596 for bucket 13  Sorting block time: 00:00:00Returning block of 709 for bucket 14Getting block 15 of 30  Reserving size (777) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%Getting block 16 of 30  Reserving size (777) for bucket 16  Calculating Z arrays for bucket 16  bucket 15: 40%  Entering block accumulator loop for bucket 16:  bucket 15: 50%  bucket 16: 10%  bucket 15: 60%  bucket 16: 20%  bucket 15: 70%  bucket 16: 30%  bucket 15: 80%  bucket 16: 40%  bucket 15: 90%  bucket 16: 50%  bucket 15: 100%  Sorting block of length 629 for bucket 15  (Using difference cover)  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  Sorting block time: 00:00:00Returning block of 630 for bucket 15  bucket 16: 90%  bucket 16: 100%  Sorting block of length 750 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 751 for bucket 16Getting block 17 of 30  Reserving size (777) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 606 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 607 for bucket 17Getting block 18 of 30  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 722 for bucket 18  (Using difference cover)Getting block 19 of 30  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  Sorting block time: 00:00:00Returning block of 723 for bucket 18  bucket 19: 10%Getting block 20 of 30  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 20%  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 19: 30%  bucket 20: 20%  bucket 19: 40%  bucket 20: 30%  bucket 19: 50%  bucket 20: 40%  bucket 19: 60%  bucket 20: 50%  bucket 19: 70%  bucket 20: 60%  bucket 19: 80%  bucket 20: 70%  bucket 20: 80%  bucket 19: 90%  bucket 20: 90%  bucket 19: 100%  Sorting block of length 418 for bucket 19  (Using difference cover)  bucket 20: 100%  Sorting block of length 519 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 419 for bucket 19  Sorting block time: 00:00:00Returning block of 520 for bucket 20Getting block 21 of 30  Reserving size (777) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 422 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 423 for bucket 21Getting block 22 of 30  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:Getting block 23 of 30  Reserving size (777) for bucket 23  bucket 22: 10%  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 22: 20%  bucket 23: 10%  bucket 22: 30%  bucket 23: 20%  bucket 22: 40%  bucket 23: 30%  bucket 22: 50%  bucket 23: 40%  bucket 22: 60%  bucket 23: 50%  bucket 22: 70%  bucket 23: 60%  bucket 22: 80%  bucket 23: 70%  bucket 22: 90%  bucket 23: 80%  bucket 22: 100%  Sorting block of length 493 for bucket 22  (Using difference cover)  bucket 23: 90%  bucket 23: 100%  Sorting block of length 510 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 494 for bucket 22  Sorting block time: 00:00:00Returning block of 511 for bucket 23Getting block 24 of 30  Reserving size (777) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 732 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 733 for bucket 24Getting block 25 of 30  Reserving size (777) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 457 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 458 for bucket 25Getting block 26 of 30  Reserving size (777) for bucket 26  Calculating Z arrays for bucket 26Getting block 27 of 30  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 26:  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 26: 10%  bucket 27: 30%  bucket 26: 20%  bucket 27: 40%  bucket 26: 30%  bucket 27: 50%  bucket 26: 40%  bucket 27: 60%  bucket 26: 50%  bucket 27: 70%  bucket 26: 60%  bucket 27: 80%  bucket 26: 70%  bucket 27: 90%  bucket 26: 80%  bucket 27: 100%  Sorting block of length 334 for bucket 27  (Using difference cover)  bucket 26: 90%  bucket 26: 100%  Sorting block of length 647 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 335 for bucket 27  Sorting block time: 00:00:00Returning block of 648 for bucket 26Getting block 28 of 30  Reserving size (777) for bucket 28Getting block 29 of 30  Calculating Z arrays for bucket 28  Reserving size (777) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 28:  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 28: 10%  bucket 29: 20%  bucket 28: 20%  bucket 29: 30%  bucket 28: 30%  bucket 29: 40%  bucket 28: 40%  bucket 29: 50%  bucket 28: 50%  bucket 29: 60%  bucket 28: 60%  bucket 29: 70%  bucket 28: 70%  bucket 29: 80%  bucket 28: 80%  bucket 29: 90%  bucket 28: 90%  bucket 29: 100%  Sorting block of length 582 for bucket 29  (Using difference cover)  bucket 28: 100%  Sorting block of length 631 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 583 for bucket 29  Sorting block time: 00:00:00Returning block of 632 for bucket 28Getting block 30 of 30  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 677 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 678 for bucket 30Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:01
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bowtie2 (Test #10)" name="9" time="67.88950443267822">
        
            
            <system-out><![CDATA[
            Settings:  Output files: "genome.*.bt2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Max bucket size: default  Max bucket size, sqrt multiplier: default  Max bucket size, len divisor: 16  Difference-cover sample period: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  /galaxy/server/database/objects/5/7/c/dataset_57c58093-7e41-4139-ac5e-f8c56323352a.datReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 4, merged 22; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 2; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 0; iterating...Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 1:Getting block 2 of 30  bucket 1: 10%  Reserving size (777) for bucket 2  Calculating Z arrays for bucket 2  bucket 1: 20%Getting block 3 of 30Getting block 4 of 30  bucket 1: 30%  Reserving size (777) for bucket 3  Entering block accumulator loop for bucket 2:  Reserving size (777) for bucket 4  bucket 1: 40%  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  bucket 1: 50%  Entering block accumulator loop for bucket 3:  bucket 2: 10%  bucket 1: 60%  Entering block accumulator loop for bucket 4:  bucket 2: 20%  bucket 1: 70%  bucket 2: 30%  bucket 3: 10%  bucket 1: 80%  bucket 4: 10%  bucket 2: 40%  bucket 3: 20%  bucket 1: 90%  bucket 4: 20%  bucket 2: 50%  bucket 3: 30%  bucket 1: 100%  bucket 4: 30%  bucket 2: 60%  bucket 3: 40%  Sorting block of length 689 for bucket 1  (Using difference cover)  bucket 4: 40%  bucket 2: 70%  Sorting block time: 00:00:00  bucket 3: 50%  bucket 4: 50%  bucket 2: 80%Returning block of 690 for bucket 1  bucket 3: 60%  bucket 4: 60%  bucket 2: 90%  bucket 3: 70%  bucket 4: 70%  bucket 2: 100%  bucket 3: 80%  bucket 4: 80%  Sorting block of length 445 for bucket 2  (Using difference cover)  bucket 3: 90%  Sorting block time: 00:00:00  bucket 4: 90%  bucket 3: 100%Returning block of 446 for bucket 2  Sorting block of length 629 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 499 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 500 for bucket 4  Sorting block time: 00:00:00Returning block of 630 for bucket 3Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%Getting block 6 of 30  Reserving size (777) for bucket 6  bucket 5: 40%Getting block 7 of 30  Calculating Z arrays for bucket 6  Reserving size (777) for bucket 7  Calculating Z arrays for bucket 7  bucket 5: 50%  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 7:  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 7: 10%  bucket 6: 10%  bucket 5: 90%  bucket 7: 20%  bucket 5: 100%  bucket 6: 20%  Sorting block of length 738 for bucket 5  (Using difference cover)  bucket 7: 30%  bucket 6: 30%  bucket 7: 40%  bucket 6: 40%  bucket 7: 50%  bucket 6: 50%  bucket 7: 60%  bucket 6: 60%  bucket 7: 70%  bucket 6: 70%  Sorting block time: 00:00:00  bucket 7: 80%Returning block of 739 for bucket 5  bucket 6: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 705 for bucket 7  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 305 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 706 for bucket 7  Sorting block time: 00:00:00Returning block of 306 for bucket 6Getting block 8 of 30  Reserving size (777) for bucket 8  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 772 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 773 for bucket 8Getting block 9 of 30  Reserving size (777) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 30  Entering block accumulator loop for bucket 9:  Reserving size (777) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 10: 70%  bucket 9: 80%  bucket 10: 80%  bucket 9: 90%  bucket 10: 90%  bucket 9: 100%  Sorting block of length 546 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 247 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 248 for bucket 10  Sorting block time: 00:00:00Returning block of 547 for bucket 9Getting block 11 of 30  Reserving size (777) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%Getting block 12 of 30  bucket 11: 70%  Reserving size (777) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 11: 80%  bucket 11: 90%  bucket 12: 10%  bucket 11: 100%  Sorting block of length 611 for bucket 11  (Using difference cover)  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  Sorting block time: 00:00:00Returning block of 612 for bucket 11  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 485 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 486 for bucket 12Getting block 13 of 30  Reserving size (777) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:Getting block 14 of 30  Reserving size (777) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 10%  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 13: 30%  bucket 14: 10%  bucket 13: 40%  bucket 14: 20%  bucket 13: 50%  bucket 13: 60%  bucket 14: 30%  bucket 13: 70%  bucket 14: 40%  bucket 13: 80%  bucket 14: 50%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 597 for bucket 13  (Using difference cover)  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  Sorting block time: 00:00:00Returning block of 598 for bucket 13  bucket 14: 90%  bucket 14: 100%  Sorting block of length 689 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 690 for bucket 14Getting block 15 of 30  Reserving size (777) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 30  Reserving size (777) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 15:  Entering block accumulator loop for bucket 16:  bucket 15: 10%  bucket 16: 10%  bucket 15: 20%  bucket 16: 20%  bucket 15: 30%  bucket 16: 30%  bucket 15: 40%  bucket 16: 40%  bucket 15: 50%  bucket 16: 50%  bucket 15: 60%  bucket 16: 60%  bucket 15: 70%  bucket 16: 70%  bucket 15: 80%  bucket 16: 80%  bucket 15: 90%  bucket 16: 90%  bucket 15: 100%  Sorting block of length 543 for bucket 15  (Using difference cover)  bucket 16: 100%  Sorting block of length 723 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 544 for bucket 15  Sorting block time: 00:00:00Returning block of 724 for bucket 16Getting block 17 of 30  Reserving size (777) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 578 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 579 for bucket 17Getting block 18 of 30  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:Getting block 19 of 30  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19  bucket 18: 10%  Entering block accumulator loop for bucket 19:  bucket 18: 20%  bucket 19: 10%  bucket 18: 30%  bucket 19: 20%  bucket 18: 40%  bucket 19: 30%  bucket 18: 50%  bucket 19: 40%  bucket 18: 60%  bucket 19: 50%  bucket 18: 70%  bucket 19: 60%  bucket 18: 80%  bucket 19: 70%  bucket 18: 90%  bucket 19: 80%  bucket 18: 100%  Sorting block of length 356 for bucket 18  (Using difference cover)  bucket 19: 90%  bucket 19: 100%  Sorting block of length 731 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 357 for bucket 18  Sorting block time: 00:00:00Returning block of 732 for bucket 19Getting block 20 of 30  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 268 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 269 for bucket 20Getting block 21 of 30  Reserving size (777) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 21 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 22 for bucket 21Getting block 22 of 30  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%Getting block 23 of 30  bucket 22: 40%  Reserving size (777) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 22: 50%  bucket 22: 60%  bucket 23: 10%  bucket 22: 70%  bucket 23: 20%  bucket 22: 80%  bucket 23: 30%  bucket 23: 40%  bucket 22: 90%  bucket 23: 50%  bucket 22: 100%  Sorting block of length 952 for bucket 22  (Using difference cover)  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 763 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 953 for bucket 22  Sorting block time: 00:00:00Returning block of 764 for bucket 23Getting block 24 of 30  Reserving size (777) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 30  Reserving size (777) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 24:  Entering block accumulator loop for bucket 25:  bucket 24: 10%  bucket 25: 10%  bucket 24: 20%  bucket 25: 20%  bucket 24: 30%  bucket 25: 30%  bucket 24: 40%  bucket 25: 40%  bucket 24: 50%  bucket 25: 50%  bucket 24: 60%  bucket 25: 60%  bucket 24: 70%  bucket 25: 70%  bucket 24: 80%  bucket 25: 80%  bucket 24: 90%  bucket 25: 90%  bucket 24: 100%  Sorting block of length 471 for bucket 24  (Using difference cover)  bucket 25: 100%  Sorting block of length 415 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 416 for bucket 25  Sorting block time: 00:00:00Returning block of 472 for bucket 24Getting block 26 of 30  Reserving size (777) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%Getting block 27 of 30  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 30%  Entering block accumulator loop for bucket 27:  bucket 26: 40%  bucket 27: 10%Getting block 28 of 30  bucket 26: 50%  Reserving size (777) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 20%  Entering block accumulator loop for bucket 28:  bucket 26: 60%  bucket 27: 30%  bucket 26: 70%  bucket 28: 10%  bucket 27: 40%  bucket 26: 80%  bucket 28: 20%  bucket 27: 50%  bucket 26: 90%  bucket 28: 30%  bucket 27: 60%  bucket 26: 100%  Sorting block of length 643 for bucket 26  (Using difference cover)  bucket 28: 40%  bucket 27: 70%  bucket 28: 50%  bucket 27: 80%  bucket 28: 60%  bucket 27: 90%  bucket 28: 70%  Sorting block time: 00:00:00  bucket 27: 100%Returning block of 644 for bucket 26  Sorting block of length 592 for bucket 27  (Using difference cover)  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 684 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 593 for bucket 27  Sorting block time: 00:00:00Returning block of 685 for bucket 28Getting block 29 of 30  Reserving size (777) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 240 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 241 for bucket 29Getting block 30 of 30  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 602 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 603 for bucket 30Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 0Total time for call to driver() for forward index: 00:00:00Reading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to reverse reference sequence: 00:00:00bmax according to bmaxDivN setting: 1035Using parameters --bmax 777 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024Constructing suffix-array element generatorBuilding DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 44 sample suffixesGenerating random suffixesQSorting 44 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 44 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 6, merged 21; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 551.3 (target: 776)Converting suffix-array elements to index imageAllocating ftab, absorbFtabEntering Ebwt loopGetting block 1 of 30  Reserving size (777) for bucket 1Getting block 2 of 30Getting block 3 of 30Getting block 4 of 30  Reserving size (777) for bucket 2  Calculating Z arrays for bucket 1  Reserving size (777) for bucket 3  Reserving size (777) for bucket 4  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%  bucket 3: 10%  bucket 4: 10%  bucket 2: 20%  bucket 1: 30%  bucket 3: 20%  bucket 2: 30%  bucket 4: 20%  bucket 1: 40%  bucket 3: 30%  bucket 2: 40%  bucket 4: 30%  bucket 1: 50%  bucket 3: 40%  bucket 2: 50%  bucket 1: 60%  bucket 4: 40%  bucket 3: 50%  bucket 2: 60%  bucket 1: 70%  bucket 4: 50%  bucket 3: 60%  bucket 2: 70%  bucket 1: 80%  bucket 4: 60%  bucket 3: 70%  bucket 2: 80%  bucket 1: 90%  bucket 4: 70%  bucket 3: 80%  bucket 2: 90%  bucket 1: 100%  Sorting block of length 484 for bucket 1  bucket 4: 80%  bucket 3: 90%  bucket 2: 100%  (Using difference cover)  Sorting block of length 774 for bucket 2  (Using difference cover)  bucket 4: 90%  bucket 3: 100%  Sorting block of length 434 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 431 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 775 for bucket 2  Sorting block time: 00:00:00Returning block of 432 for bucket 4  Sorting block time: 00:00:00Returning block of 485 for bucket 1  Sorting block time: 00:00:00Returning block of 435 for bucket 3Getting block 5 of 30  Reserving size (777) for bucket 5  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 776 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 777 for bucket 5Getting block 6 of 30  Reserving size (777) for bucket 6  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%Getting block 7 of 30  Reserving size (777) for bucket 7  Calculating Z arrays for bucket 7  bucket 6: 30%  Entering block accumulator loop for bucket 7:Getting block 8 of 30  bucket 6: 40%  Reserving size (777) for bucket 8  Calculating Z arrays for bucket 8  bucket 7: 10%  bucket 6: 50%  Entering block accumulator loop for bucket 8:  bucket 7: 20%  bucket 6: 60%  bucket 8: 10%  bucket 7: 30%  bucket 6: 70%  bucket 8: 20%  bucket 7: 40%  bucket 6: 80%  bucket 8: 30%  bucket 7: 50%  bucket 6: 90%  bucket 8: 40%  bucket 7: 60%  bucket 6: 100%  Sorting block of length 179 for bucket 6  (Using difference cover)  bucket 8: 50%  bucket 7: 70%  bucket 8: 60%  bucket 7: 80%  bucket 8: 70%  bucket 7: 90%  Sorting block time: 00:00:00Returning block of 180 for bucket 6  bucket 8: 80%  bucket 7: 100%  Sorting block of length 707 for bucket 7  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block of length 313 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 314 for bucket 8  Sorting block time: 00:00:00Returning block of 708 for bucket 7Getting block 9 of 30  Reserving size (777) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 535 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 536 for bucket 9Getting block 10 of 30  Reserving size (777) for bucket 10Getting block 11 of 30  Calculating Z arrays for bucket 10  Reserving size (777) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 10:  Entering block accumulator loop for bucket 11:  bucket 10: 10%  bucket 11: 10%  bucket 10: 20%  bucket 11: 20%  bucket 10: 30%  bucket 11: 30%  bucket 10: 40%  bucket 11: 40%  bucket 10: 50%  bucket 11: 50%  bucket 10: 60%  bucket 10: 70%  bucket 11: 60%  bucket 10: 80%  bucket 11: 70%  bucket 10: 90%  bucket 11: 80%  bucket 11: 90%  bucket 10: 100%  Sorting block of length 680 for bucket 10  (Using difference cover)  bucket 11: 100%  Sorting block of length 423 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 424 for bucket 11  Sorting block time: 00:00:00Returning block of 681 for bucket 10Getting block 12 of 30  Reserving size (777) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 371 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 372 for bucket 12Getting block 13 of 30  Reserving size (777) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%Getting block 14 of 30  Reserving size (777) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 30%  Entering block accumulator loop for bucket 14:  bucket 13: 40%Getting block 15 of 30  Reserving size (777) for bucket 15  bucket 14: 10%  Calculating Z arrays for bucket 15  bucket 13: 50%  Entering block accumulator loop for bucket 15:  bucket 14: 20%  bucket 13: 60%  bucket 14: 30%  bucket 13: 70%  bucket 15: 10%  bucket 14: 40%  bucket 13: 80%  bucket 14: 50%  bucket 15: 20%  bucket 13: 90%  bucket 14: 60%  bucket 13: 100%  Sorting block of length 595 for bucket 13  (Using difference cover)  bucket 15: 30%  bucket 14: 70%  bucket 15: 40%  bucket 14: 80%  bucket 14: 90%  bucket 15: 50%  bucket 14: 100%  Sorting block of length 708 for bucket 14  (Using difference cover)  bucket 15: 60%  Sorting block time: 00:00:00Returning block of 596 for bucket 13  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block time: 00:00:00  Sorting block of length 629 for bucket 15  (Using difference cover)Returning block of 709 for bucket 14  Sorting block time: 00:00:00Returning block of 630 for bucket 15Getting block 16 of 30  Reserving size (777) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 750 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 751 for bucket 16Getting block 17 of 30  Reserving size (777) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%Getting block 18 of 30  Reserving size (777) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 20%  Entering block accumulator loop for bucket 18:  bucket 17: 30%  bucket 18: 10%  bucket 17: 40%  bucket 18: 20%  bucket 17: 50%  bucket 18: 30%  bucket 17: 60%  bucket 18: 40%  bucket 17: 70%  bucket 18: 50%  bucket 17: 80%  bucket 18: 60%  bucket 17: 90%  bucket 18: 70%  bucket 17: 100%  Sorting block of length 606 for bucket 17  (Using difference cover)  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 722 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 607 for bucket 17  Sorting block time: 00:00:00Returning block of 723 for bucket 18Getting block 19 of 30  Reserving size (777) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 418 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 419 for bucket 19Getting block 20 of 30  Reserving size (777) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:Getting block 21 of 30  bucket 20: 10%  Reserving size (777) for bucket 21  Calculating Z arrays for bucket 21  bucket 20: 20%  Entering block accumulator loop for bucket 21:  bucket 20: 30%  bucket 21: 10%  bucket 20: 40%  bucket 20: 50%  bucket 21: 20%  bucket 20: 60%  bucket 21: 30%  bucket 20: 70%  bucket 21: 40%  bucket 20: 80%  bucket 20: 90%  bucket 21: 50%  bucket 20: 100%  Sorting block of length 519 for bucket 20  (Using difference cover)  bucket 21: 60%  bucket 21: 70%  Sorting block time: 00:00:00Returning block of 520 for bucket 20  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 422 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 423 for bucket 21Getting block 22 of 30  Reserving size (777) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 493 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 494 for bucket 22Getting block 23 of 30  Reserving size (777) for bucket 23  Calculating Z arrays for bucket 23Getting block 24 of 30  Entering block accumulator loop for bucket 23:  Reserving size (777) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 30  Entering block accumulator loop for bucket 24:  bucket 23: 10%  Reserving size (777) for bucket 25  bucket 23: 20%  Calculating Z arrays for bucket 25  bucket 24: 10%  bucket 23: 30%  Entering block accumulator loop for bucket 25:  bucket 24: 20%  bucket 23: 40%  bucket 24: 30%  bucket 23: 50%  bucket 25: 10%  bucket 24: 40%  bucket 23: 60%  bucket 25: 20%  bucket 24: 50%  bucket 23: 70%  bucket 25: 30%  bucket 24: 60%  bucket 23: 80%  bucket 25: 40%  bucket 24: 70%  bucket 23: 90%  bucket 25: 50%  bucket 24: 80%  bucket 23: 100%  bucket 25: 60%  bucket 24: 90%  Sorting block of length 510 for bucket 23  (Using difference cover)  bucket 24: 100%  Sorting block time: 00:00:00  bucket 25: 70%  Sorting block of length 732 for bucket 24  (Using difference cover)Returning block of 511 for bucket 23  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 457 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 733 for bucket 24  Sorting block time: 00:00:00Returning block of 458 for bucket 25Getting block 26 of 30  Reserving size (777) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 647 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 648 for bucket 26Getting block 27 of 30  Reserving size (777) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 334 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 335 for bucket 27Getting block 28 of 30  Reserving size (777) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%Getting block 29 of 30  Reserving size (777) for bucket 29Getting block 30 of 30  Calculating Z arrays for bucket 29  bucket 28: 40%  Reserving size (777) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 30:  bucket 28: 50%  bucket 30: 10%  bucket 29: 10%  bucket 28: 60%  bucket 30: 20%  bucket 29: 20%  bucket 30: 30%  bucket 28: 70%  bucket 30: 40%  bucket 29: 30%  bucket 28: 80%  bucket 30: 50%  bucket 29: 40%  bucket 30: 60%  bucket 28: 90%  bucket 29: 50%  bucket 30: 70%  bucket 28: 100%  Sorting block of length 631 for bucket 28  (Using difference cover)  bucket 30: 80%  bucket 29: 60%  bucket 30: 90%  bucket 29: 70%  bucket 30: 100%  Sorting block of length 677 for bucket 30  (Using difference cover)  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 582 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 632 for bucket 28  Sorting block time: 00:00:00Returning block of 583 for bucket 29  Sorting block time: 00:00:00Returning block of 678 for bucket 30Exited Ebwt loopfchr[A]: 0fchr[C]: 5124fchr[G]: 10305fchr[T]: 12474fchr[$]: 16568Exiting Ebwt::buildToDisk()Returning from initFromVectorWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2Wrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2Re-opening _in1 and _in2 as input streamsReturning from Ebwt constructorHeaders:    len: 16568    bwtLen: 16569    sz: 4142    bwtSz: 4143    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 20    eftabSz: 80    ftabLen: 1048577    ftabSz: 4194308    offsLen: 1036    offsSz: 4144    lineSz: 64    sideSz: 64    sideBwtSz: 48    sideBwtLen: 192    numSides: 87    numLines: 87    ebwtTotLen: 5568    ebwtTotSz: 5568    color: 0    reverse: 1Total time for backward call to driver() for mirror index: 00:00:00
            ]]></system-out>
            <system-err><![CDATA[
            Building a SMALL index100 reads; of these:  100 (100.00%) were paired; of these:    97 (97.00%) aligned concordantly 0 times    3 (3.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    97 pairs aligned concordantly 0 times; of these:      7 (7.22%) aligned discordantly 1 time    ----    90 pairs aligned 0 times concordantly or discordantly; of these:      180 mates make up the pairs; of these:        156 (86.67%) aligned 0 times        24 (13.33%) aligned exactly 1 time        0 (0.00%) aligned >1 times22.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #1)" name="0" time="67.66872835159302">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AGATCGGAAGAGC --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_small_fastq.fqProcessing single-end reads on 1 core ...Finished in 0.01 s (3558 µs/read; 0.02 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #2)" name="1" time="61.80517339706421">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AGATCGGAAGAGC --output=out1.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 1 core ...Finished in 0.02 s (162 µs/read; 0.37 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         2 (2.0%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpTotal written (filtered):         24,843 bp (100.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #11)" name="10" time="57.181384563446045">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -g file:/galaxy/server/database/objects/d/4/c/dataset_d4c9505b-c129-40e6-aab1-16e8065f002d.dat --output=split/{name}.fastq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_in_split_fastq_gz.fq.gzProcessing single-end reads on 1 core ...Finished in 0.02 s (2134 µs/read; 0.03 M reads/minute).=== Summary ===Total reads processed:                      11Reads with adapters:                        10 (90.9%)Reads written (passing filters):            11 (100.0%)Total basepairs processed:         1,210 bpTotal written (filtered):          1,130 bp (93.4%)=== Adapter A2 ===Sequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005=== Adapter A1 ===Sequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #12)" name="11" time="62.269335985183716">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AAAT --untrimmed-output=untrimmed_output.fq --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_small_fastq.fqProcessing single-end reads on 1 core ...Finished in 0.01 s (4676 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads discarded as untrimmed:                2 (66.7%)Reads written (passing filters):             1 (33.3%)Total basepairs processed:           102 bpTotal written (filtered):             30 bp (29.4%)=== Adapter 1 ===Sequence: AAAT; Type: regular 3'; Length: 4; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-4 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 100.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts410.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #13)" name="12" time="62.28373908996582">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AGATCGGAAGAGC --untrimmed-output=untrimmed_output.fq.gz --output=out1.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 1 core ...Finished in 0.02 s (198 µs/read; 0.30 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         2 (2.0%)== Read fate breakdown ==Reads discarded as untrimmed:               97 (98.0%)Reads written (passing filters):             2 (2.0%)Total basepairs processed:        24,849 bpTotal written (filtered):            496 bp (2.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #14)" name="13" time="61.07809853553772">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-untrimmed --maximum-length=1000 --max-n=0.0 --pair-filter=both bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 1 core ...Finished in 0.02 s (185 µs/read; 0.32 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too long:                    0 (0.0%)Pairs with too many N:                       0 (0.0%)Pairs discarded as untrimmed:               97 (98.0%)Pairs written (passing filters):             2 (2.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):            998 bp (2.0%)  Read 1:           496 bp  Read 2:           502 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #15)" name="14" time="61.81736946105957">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AGATCGGAAGAGC -u 5 --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_small_fastq.fqProcessing single-end reads on 1 core ...Finished in 0.01 s (3186 µs/read; 0.02 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             87 bp (85.3%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #16)" name="15" time="60.08997917175293">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AGATCGGAAGAGC -u 5 --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim --rename={id} barcode={cut_prefix} cutadapt_small_fastq.fqProcessing single-end reads on 1 core ...Finished in 0.01 s (3184 µs/read; 0.02 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             87 bp (85.3%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #17)" name="16" time="60.306156158447266">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a CGTCCGAANTAG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=retain cutadapt_small_fastq.fqProcessing single-end reads on 1 core ...Finished in 0.01 s (3491 µs/read; 0.02 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             80 bp (78.4%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #18)" name="17" time="60.93175649642944">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a CGTCCGAANTAG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=mask cutadapt_small_fastq.fqProcessing single-end reads on 1 core ...Finished in 0.01 s (3367 µs/read; 0.02 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #19)" name="18" time="61.12196731567383">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a CGTCCGAANTAG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=lowercase cutadapt_small_fastq.fqProcessing single-end reads on 1 core ...Finished in 0.01 s (3181 µs/read; 0.02 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #20)" name="19" time="60.36346507072449">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a CGTCCGAANTAG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=none cutadapt_small_fastq.fqProcessing single-end reads on 1 core ...Finished in 0.01 s (3900 µs/read; 0.02 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #3)" name="2" time="63.9862596988678">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --pair-filter=any bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 1 core ...Finished in 0.03 s (272 µs/read; 0.22 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,677 bp (100.0%)  Read 1:        24,843 bp  Read 2:        24,834 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #21)" name="20" time="61.01818084716797">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a TAAACAGATTAGT --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim --revcomp cutadapt_small_fastq.fqProcessing single-end reads on 1 core ...Finished in 0.01 s (3396 µs/read; 0.02 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reverse-complemented:                        0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             97 bp (95.1%)=== Adapter 1 ===Sequence: TAAACAGATTAGT; Type: regular 3'; Length: 13; Trimmed: 1 times; Reverse-complemented: 0 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 100.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts510.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #22)" name="21" time="61.70207452774048">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a ATCTGGTTCC -A CTACAAG --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=30:10 --pair-filter=both bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 1 core ...Finished in 0.03 s (255 µs/read; 0.24 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                      32 (32.3%)  Read 2 with adapter:                      15 (15.2%)== Read fate breakdown ==Pairs that were too short:                   3 (3.0%)Pairs written (passing filters):            96 (97.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):         38,492 bp (79.7%)  Read 1:        17,741 bp  Read 2:        20,751 bp=== First read: Adapter 1 ===Sequence: ATCTGGTTCC; Type: regular 3'; Length: 10; Trimmed: 32 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 90.6%  G: 3.1%  T: 0.0%  none/other: 6.2%WARNING:    The adapter is preceded by 'C' extremely often.    The provided adapter sequence could be incomplete at its 5' end.    Ignore this warning when trimming primers.Overview of removed sequenceslengthcountexpectmax.errerror counts321.5021310.0111410.01120110.01120310.01120820.01220910.01121110.01121420.01221720.01221810.01122210.01122610.01122720.01222810.01122910.01123220.01223810.01124270.01725110.010 1=== Second read: Adapter 2 ===Sequence: CTACAAG; Type: regular 3'; Length: 7; Trimmed: 15 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 73.3%  G: 0.0%  T: 0.0%  none/other: 26.7%Overview of removed sequenceslengthcountexpectmax.errerror counts810.00122820.00222910.00123830.00324110.00124310.00124610.00124810.00125010.00125130.003WARNING:    One or more of your adapter sequences may be incomplete.    Please see the detailed output above.
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #23)" name="22" time="62.22649669647217">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --maximum-length=50:30 --pair-filter=both bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 1 core ...Finished in 0.02 s (181 µs/read; 0.33 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #24)" name="23" time="63.30551481246948">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10: --maximum-length=50:30 --pair-filter=both bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 1 core ...Finished in 0.02 s (185 µs/read; 0.33 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #25)" name="24" time="61.914493560791016">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10:10 --maximum-length=50: --pair-filter=both bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 1 core ...Finished in 0.02 s (172 µs/read; 0.35 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #26)" name="25" time="58.96139717102051">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AGCCGCTANGACG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 cutadapt_small_fastq.fqProcessing single-end reads on 1 core ...Finished in 0.01 s (3520 µs/read; 0.02 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             20 bp (19.6%)=== Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #27)" name="26" time="59.0330069065094">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AGCCGCTANGACG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=-10 cutadapt_small_fastq.fqProcessing single-end reads on 1 core ...Finished in 0.01 s (3246 µs/read; 0.02 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             20 bp (19.6%)=== Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #28)" name="27" time="60.248127460479736">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AGCGGCTTAGACG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim --max-expected-errors=10 cutadapt_small_fastq.fqProcessing single-end reads on 1 core ...Finished in 0.01 s (4187 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads with too many exp. errors:             0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: AGCGGCTTAGACG; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #29)" name="28" time="59.2194344997406">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a GAANTAGCTACCACX --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_small_fastq.fqProcessing single-end reads on 1 core ...Finished in 0.06 s (18650 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: GAANTAGCTACCAC; Type: non-internal 3'; Length: 14; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #30)" name="29" time="62.58086681365967">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AGATCGGAAGAGCX -A AGATCGGAAGAGCX --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --pair-filter=any bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 1 core ...Finished in 0.02 s (208 µs/read; 0.29 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):         48,270 bp (100.0%)  Read 1:        24,141 bp  Read 2:        24,129 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #4)" name="3" time="63.106072425842285">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "cbf056288c649de3",   "src": "hdca"  },  "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC",  "library|r1|adapters_0|adapter_source|adapter_source_list": "user",  "library|r2|adapters2_0|adapter_source2|adapter2": "AGATCGGAAGAGC",  "library|r2|adapters2_0|adapter_source2|adapter_source_list2": "user",  "library|type": "paired_collection" }, "job": {  "command_line": "ln -f -s \u0027/galaxy/server/database/objects/1/a/d/dataset_1ad3bf48-c1ec-489c-90ea-268e4b3acb35.dat\u0027 \u0027Unnamed Collection_1.fq.gz\u0027 \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/f/5/d/dataset_f5d0c75f-d408-413f-bd41-19644bf241f1.dat\u0027 \u0027Unnamed Collection_2.fq.gz\u0027 \u0026\u0026    cutadapt  -j=${GALAXY_SLOTS:-4}      -a \u0027AGATCGGAAGAGC\u0027         -A \u0027AGATCGGAAGAGC\u0027      --output=\u0027out1.fq.gz\u0027 --paired-output=\u0027out2.fq.gz\u0027  --error-rate=0.1 --times=1 --overlap=3   --action=trim      --pair-filter=any       \u0027Unnamed Collection_1.fq.gz\u0027 \u0027Unnamed Collection_2.fq.gz\u0027",  "command_version": "4.0",  "create_time": "2024-01-28T13:26:33.125080",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-wzf9l",  "galaxy_version": "21.09",  "history_id": "cbf056288c649de3",  "id": "c62d8bc47d517553",  "inputs": {   "input_11": {    "id": "3b4d4a1d44d313ed",    "src": "hda",    "uuid": "1ad3bf48-c1ec-489c-90ea-268e4b3acb35"   },   "input_12": {    "id": "c62d8bc47d517553",    "src": "hda",    "uuid": "f5d0c75f-d408-413f-bd41-19644bf241f1"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1706448432.0000000",    "title": "Job End Time",    "value": "2024-01-28 13:27:12"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1706448431.0000000",    "title": "Job Start Time",    "value": "2024-01-28 13:27:11"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "2000.0000000",    "title": "Memory Allocated (MB)",    "value": "2000"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {   "out_pairs": {    "id": "1cc735c45ef3e957",    "src": "hdca"   }  },  "outputs": {   "out_pairs|__part__|forward": {    "id": "f153e7684c674750",    "src": "hda",    "uuid": "d10fd87a-7b6e-40f8-92e0-a0706b473bd1"   },   "out_pairs|__part__|reverse": {    "id": "eb389a78cc71f31c",    "src": "hda",    "uuid": "dfd9d0e0-be7a-403b-af4a-9d3ffb52cc6e"   }  },  "params": {   "__input_ext": "\"input\"",   "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}",   "library": "{\"__current_case__\": 2, \"input_1\": {\"values\": [{\"id\": 1, \"src\": \"hdca\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source2\": {\"__current_case__\": 0, \"adapter2\": \"AGATCGGAAGAGC\", \"adapter_name2\": \"\", \"adapter_source_list2\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters2\": [], \"cut2\": \"0\", \"front_adapters2\": [], \"quality_cutoff2\": null}, \"type\": \"paired_collection\"}",   "output_selector": null,   "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}"  },  "state": "ok",  "stderr": "",  "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --pair-filter=any Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.02 s (242 \u00b5s/read; 0.25 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):         49,677 bp (100.0%)\n  Read 1:        24,843 bp\n  Read 2:        24,834 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3\u0027; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3\u0027; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1",  "tool_stderr": "",  "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --pair-filter=any Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.02 s (242 \u00b5s/read; 0.25 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):         49,677 bp (100.0%)\n  Read 1:        24,843 bp\n  Read 2:        24,834 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3\u0027; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3\u0027; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n",  "traceback": null,  "update_time": "2024-01-28T13:27:22.595329",  "user_email": "tests@fake.org" }, "output_problems": [  "Collection element forward of collection out_pairs:  different than expected\nExpected file size of 12000+-2000 found 54684" ], "status": "failure", "test_index": 3, "time_seconds": 63.106072425842285, "tool_id": "cutadapt", "tool_version": "4.0+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --pair-filter=any Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gzProcessing paired-end reads on 1 core ...Finished in 0.02 s (242 µs/read; 0.25 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,677 bp (100.0%)  Read 1:        24,843 bp  Read 2:        24,834 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #31)" name="30" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 30, "tool_id": "cutadapt", "tool_version": "4.0+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #32)" name="31" time="60.73068070411682">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AGATCGGAAGAGC;noindels -A AGATCGGAAGAGC;noindels --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --pair-filter=any Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gzProcessing paired-end reads on 1 core ...Finished in 0.02 s (223 µs/read; 0.27 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,677 bp (100.0%)  Read 1:        24,843 bp  Read 2:        24,834 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #33)" name="32" time="61.212637424468994">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --pair-filter=any --quality-cutoff=5 Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gz -Q=15,20Processing paired-end reads on 1 core ...Finished in 0.03 s (264 µs/read; 0.23 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       2 (2.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpQuality-trimmed:                     747 bp (1.5%)  Read 1:             0 bp  Read 2:           747 bpTotal written (filtered):         48,938 bp (98.5%)  Read 1:        24,843 bp  Read 2:        24,095 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 100.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501410.401
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #5)" name="4" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 4, "tool_id": "cutadapt", "tool_version": "4.0+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #6)" name="5" time="61.30603361129761">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a TTAGACATATCTCCGTCG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-trimmed cutadapt_small_fastq.fqProcessing single-end reads on 1 core ...Finished in 0.01 s (3634 µs/read; 0.02 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         2 (66.7%)== Read fate breakdown ==Reads discarded as trimmed:                  2 (66.7%)Reads written (passing filters):             1 (33.3%)Total basepairs processed:           102 bpTotal written (filtered):             34 bp (33.3%)=== Adapter 1 ===Sequence: TTAGACATATCTCCGTCG; Type: regular 3'; Length: 18; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-18 bp: 1Bases preceding removed adapters:  A: 50.0%  C: 50.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts1010.010 11210.010 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #7)" name="6" time="62.21028995513916">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 --json stats.json -a AAAGATG --rest-file=rest_output.fa --output=out1.fa --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_rest_fa.faProcessing single-end reads on 1 core ...Finished in 0.08 s (15387 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       5Reads with adapters:                         5 (100.0%)Reads written (passing filters):             5 (100.0%)Total basepairs processed:            97 bpTotal written (filtered):             35 bp (36.1%)=== Adapter 1 ===Sequence: AAAGATG; Type: regular 3'; Length: 7; Trimmed: 5 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 100.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts710.0011210.0011420.0021510.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #8)" name="7" time="60.07203912734985">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -a AGATCGGAAGAGC --output=out1.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --nextseq-trim=20 bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 1 core ...Finished in 0.01 s (142 µs/read; 0.42 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         4 (4.0%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpQuality-trimmed:                     286 bp (1.2%)Total written (filtered):         24,550 bp (98.8%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 75.0%  G: 25.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts331.503410.401
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #9)" name="8" time="61.82489371299744">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #10)" name="9" time="55.7828471660614">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.0 with Python 3.9.12Command line parameters: -j=1 -g A1=^GTCGGTAA -g A2=^AGGTCACT --output=split/{name}.fastq --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_in_split_fastq.fqProcessing single-end reads on 1 core ...Finished in 0.02 s (1503 µs/read; 0.04 M reads/minute).=== Summary ===Total reads processed:                      11Reads with adapters:                        10 (90.9%)Reads written (passing filters):            11 (100.0%)Total basepairs processed:         1,210 bpTotal written (filtered):          1,130 bp (93.4%)=== Adapter A1 ===Sequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005=== Adapter A2 ===Sequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deeptools_bigwig_compare (Test #1)" name="0" time="91.7206621170044">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deeptools_bigwig_compare (Test #2)" name="1" time="60.343745946884155">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deseq2 (Test #1)" name="0" time="147.1719572544098">
        
            
            <system-out><![CDATA[
            primary factor: Treatment ---------------------DESeq2 run informationsample table:                                TreatmentGSM461176_untreat_single.counts UntreatedGSM461177_untreat_paired.counts UntreatedGSM461178_untreat_paired.counts UntreatedGSM461182_untreat_single.counts UntreatedGSM461179_treat_single.counts     TreatedGSM461180_treat_paired.counts     TreatedGSM461181_treat_paired.counts     Treateddesign formula:~Treatment7 samples with counts over 3999 genesusing disperion fit type: parametric summary of resultsTreatment: Treated vs Untreatedout of 3429 with nonzero total read countadjusted p-value < 0.1LFC > 0 (up)       : 148, 4.3%LFC < 0 (down)     : 152, 4.4%outliers [1]       : 2, 0.058%low counts [2]     : 659, 19%(mean count < 3)[1] see 'cooksCutoff' argument of ?results[2] see 'independentFiltering' argument of ?resultsNULLSession information:R version 4.1.1 (2021-08-10)Platform: x86_64-conda-linux-gnu (64-bit)Running under: Debian GNU/Linux 10 (buster)Matrix products: defaultBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.solocale: [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   attached base packages:[1] stats4    tools     stats     graphics  grDevices utils     datasets [8] methods   base     other attached packages: [1] rjson_0.2.20                gplots_3.1.1                [3] RColorBrewer_1.1-2          DESeq2_1.34.0               [5] SummarizedExperiment_1.24.0 Biobase_2.54.0              [7] MatrixGenerics_1.6.0        matrixStats_0.61.0          [9] GenomicRanges_1.46.0        GenomeInfoDb_1.30.0        [11] IRanges_2.28.0              S4Vectors_0.32.0           [13] BiocGenerics_0.40.0         getopt_1.20.3              loaded via a namespace (and not attached): [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45        [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0      [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              [10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         [13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          [16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          [19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    [22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         [25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       [28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          [31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           [34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          [37] grid_4.1.1             xtable_1.8-4           gtable_0.3.0          [40] lifecycle_1.0.1        DBI_1.1.1              magrittr_2.0.1        [43] scales_1.1.1           KernSmooth_2.23-20     cachem_1.0.6          [46] XVector_0.34.0         genefilter_1.76.0      ellipsis_0.3.2        [49] vctrs_0.3.8            generics_0.1.1         bit64_4.0.5           [52] glue_1.5.1             purrr_0.3.4            parallel_4.1.1        [55] fastmap_1.1.0          survival_3.2-13        AnnotationDbi_1.56.1  [58] colorspace_2.0-2       caTools_1.18.2         memoise_2.0.1         
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honoredestimating size factorsestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationshipfinal dispersion estimatesfitting model and testing
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deseq2 (Test #2)" name="1" time="127.43485689163208">
        
            
            <system-out><![CDATA[
            primary factor: Treatment ---------------------DESeq2 run informationsample table:                                TreatmentGSM461176_untreat_single.counts UntreatedGSM461177_untreat_paired.counts UntreatedGSM461178_untreat_paired.counts UntreatedGSM461182_untreat_single.counts UntreatedGSM461179_treat_single.counts     TreatedGSM461180_treat_paired.counts     TreatedGSM461181_treat_paired.counts     Treateddesign formula:~W_1 + Treatment7 samples with counts over 3999 genesusing disperion fit type: parametric summary of resultsTreatment: Treated vs Untreatedout of 3429 with nonzero total read countadjusted p-value < 0.1LFC > 0 (up)       : 179, 5.2%LFC < 0 (down)     : 208, 6.1%outliers [1]       : 0, 0%low counts [2]     : 725, 21%(mean count < 4)[1] see 'cooksCutoff' argument of ?results[2] see 'independentFiltering' argument of ?resultsNULLSession information:R version 4.1.1 (2021-08-10)Platform: x86_64-conda-linux-gnu (64-bit)Running under: Debian GNU/Linux 10 (buster)Matrix products: defaultBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.solocale: [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   attached base packages:[1] stats4    tools     stats     graphics  grDevices utils     datasets [8] methods   base     other attached packages: [1] rjson_0.2.20                gplots_3.1.1                [3] RColorBrewer_1.1-2          DESeq2_1.34.0               [5] SummarizedExperiment_1.24.0 Biobase_2.54.0              [7] MatrixGenerics_1.6.0        matrixStats_0.61.0          [9] GenomicRanges_1.46.0        GenomeInfoDb_1.30.0        [11] IRanges_2.28.0              S4Vectors_0.32.0           [13] BiocGenerics_0.40.0         getopt_1.20.3              loaded via a namespace (and not attached): [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45        [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0      [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              [10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         [13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          [16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          [19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    [22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         [25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       [28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          [31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           [34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          [37] grid_4.1.1             xtable_1.8-4           gtable_0.3.0          [40] lifecycle_1.0.1        DBI_1.1.1              magrittr_2.0.1        [43] scales_1.1.1           KernSmooth_2.23-20     cachem_1.0.6          [46] XVector_0.34.0         genefilter_1.76.0      ellipsis_0.3.2        [49] vctrs_0.3.8            generics_0.1.1         bit64_4.0.5           [52] glue_1.5.1             purrr_0.3.4            parallel_4.1.1        [55] fastmap_1.1.0          survival_3.2-13        AnnotationDbi_1.56.1  [58] colorspace_2.0-2       caTools_1.18.2         memoise_2.0.1         
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honoredestimating size factorsestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationshipfinal dispersion estimatesfitting model and testing
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deseq2 (Test #11)" name="10" time="119.50760340690613">
        
            
            <system-out><![CDATA[
            primary factor: Treatment ---------------------size factors for samples: taking tximport data into accountDESeq2 run informationsample table:                       Treatmentsailfish_quant.sf4.tab Untreatedsailfish_quant.sf5.tab Untreatedsailfish_quant.sf6.tab Untreatedsailfish_quant.sf1.tab   Treatedsailfish_quant.sf2.tab   Treatedsailfish_quant.sf3.tab   Treateddesign formula:~Treatment6 samples with counts over 11 genesusing disperion fit type: parametric summary of resultsTreatment: Treated vs Untreatedout of 9 with nonzero total read countadjusted p-value < 0.1LFC > 0 (up)       : 0, 0%LFC < 0 (down)     : 0, 0%outliers [1]       : 0, 0%low counts [2]     : 0, 0%(mean count < 0)[1] see 'cooksCutoff' argument of ?results[2] see 'independentFiltering' argument of ?resultsNULLSession information:R version 4.1.1 (2021-08-10)Platform: x86_64-conda-linux-gnu (64-bit)Running under: Debian GNU/Linux 10 (buster)Matrix products: defaultBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.solocale: [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   attached base packages:[1] stats4    tools     stats     graphics  grDevices utils     datasets [8] methods   base     other attached packages: [1] GenomicFeatures_1.46.1      AnnotationDbi_1.56.1        [3] tximport_1.22.0             rjson_0.2.20                [5] gplots_3.1.1                RColorBrewer_1.1-2          [7] DESeq2_1.34.0               SummarizedExperiment_1.24.0 [9] Biobase_2.54.0              MatrixGenerics_1.6.0       [11] matrixStats_0.61.0          GenomicRanges_1.46.0       [13] GenomeInfoDb_1.30.0         IRanges_2.28.0             [15] S4Vectors_0.32.0            BiocGenerics_0.40.0        [17] getopt_1.20.3              loaded via a namespace (and not attached): [1] bitops_1.0-7             bit64_4.0.5              filelock_1.0.2           [4] progress_1.2.2           httr_1.4.2               utf8_1.2.2               [7] R6_2.5.1                 KernSmooth_2.23-20       DBI_1.1.1               [10] colorspace_2.0-2         tidyselect_1.1.1         prettyunits_1.1.1       [13] bit_4.0.4                curl_4.3.2               compiler_4.1.1          [16] xml2_1.3.3               DelayedArray_0.20.0      rtracklayer_1.54.0      [19] caTools_1.18.2           scales_1.1.1             genefilter_1.76.0       [22] rappdirs_0.3.3           stringr_1.4.0            digest_0.6.29           [25] Rsamtools_2.10.0         XVector_0.34.0           pkgconfig_2.0.3         [28] dbplyr_2.1.1             fastmap_1.1.0            rlang_0.4.12            [31] RSQLite_2.2.8            BiocIO_1.4.0             generics_0.1.1          [34] jsonlite_1.7.2           BiocParallel_1.28.0      gtools_3.9.2            [37] dplyr_1.0.7              RCurl_1.98-1.5           magrittr_2.0.1          [40] GenomeInfoDbData_1.2.7   Matrix_1.3-4             Rcpp_1.0.7              [43] munsell_0.5.0            fansi_0.4.2              lifecycle_1.0.1         [46] stringi_1.7.6            yaml_2.2.1               zlibbioc_1.40.0         [49] BiocFileCache_2.2.0      grid_4.1.1               blob_1.2.2              [52] parallel_4.1.1           crayon_1.4.2             lattice_0.20-45         [55] Biostrings_2.62.0        splines_4.1.1            annotate_1.72.0         [58] hms_1.1.1                KEGGREST_1.34.0          locfit_1.5-9.4          [61] pillar_1.6.4             geneplotter_1.72.0       biomaRt_2.50.0          [64] XML_3.99-0.8             glue_1.5.1               png_0.1-7               [67] vctrs_0.3.8              gtable_0.3.0             purrr_0.3.4             [70] assertthat_0.2.1         cachem_1.0.6             ggplot2_3.3.5           [73] xtable_1.8-4             restfulr_0.0.13          survival_3.2-13         [76] tibble_3.1.6             GenomicAlignments_1.30.0 memoise_2.0.1           [79] ellipsis_0.3.2          
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honoredImport genomic features from the file as a GRanges object ... OKPrepare the 'metadata' data frame ... OKMake the TxDb object ... OK'select()' returned 1:1 mapping between keys and columnsreading in files with read.delim (install 'readr' package for speed up)1 2 3 4 5 6 reading in files with read.delim (install 'readr' package for speed up)1 2 3 4 5 6 summarizing abundancesummarizing countssummarizing lengthusing counts and average transcript lengths from tximportWarning message:In .get_cds_IDX(mcols0$type, mcols0$phase) :  The "phase" metadata column contains non-NA values for features of type  stop_codon. This information was ignored.using 'avgTxLength' from assays(dds), correcting for library sizeusing pre-existing normalization factorsestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationship-- note: fitType='parametric', but the dispersion trend was not well captured by the   function: y = a/x + b, and a local regression fit was automatically substituted.   specify fitType='local' or 'mean' to avoid this message next time.final dispersion estimatesfitting model and testingWarning message:In lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :  Estimated rdf < 1.0; not estimating variance
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deseq2 (Test #12)" name="11" time="117.35629940032959">
        
            
            <system-out><![CDATA[
            primary factor: Treatment ---------------------DESeq2 run informationsample table:                                TreatmentGSM461176_untreat_single.counts UntreatedGSM461177_untreat_paired.counts UntreatedGSM461178_untreat_paired.counts UntreatedGSM461182_untreat_single.counts UntreatedGSM461179_treat_single.counts     TreatedGSM461180_treat_paired.counts     TreatedGSM461181_treat_paired.counts     Treateddesign formula:~Treatment7 samples with counts over 3999 genesusing disperion fit type: parametric summary of resultsTreatment: Treated vs Untreatedout of 2921 with nonzero total read countadjusted p-value < 0.1LFC > 0 (up)       : 149, 5.1%LFC < 0 (down)     : 152, 5.2%outliers [1]       : 2, 0.068%low counts [2]     : 170, 5.8%(mean count < 3)[1] see 'cooksCutoff' argument of ?results[2] see 'independentFiltering' argument of ?resultsNULLSession information:R version 4.1.1 (2021-08-10)Platform: x86_64-conda-linux-gnu (64-bit)Running under: Debian GNU/Linux 10 (buster)Matrix products: defaultBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.solocale: [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   attached base packages:[1] stats4    tools     stats     graphics  grDevices utils     datasets [8] methods   base     other attached packages: [1] rjson_0.2.20                gplots_3.1.1                [3] RColorBrewer_1.1-2          DESeq2_1.34.0               [5] SummarizedExperiment_1.24.0 Biobase_2.54.0              [7] MatrixGenerics_1.6.0        matrixStats_0.61.0          [9] GenomicRanges_1.46.0        GenomeInfoDb_1.30.0        [11] IRanges_2.28.0              S4Vectors_0.32.0           [13] BiocGenerics_0.40.0         getopt_1.20.3              loaded via a namespace (and not attached): [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45        [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0      [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              [10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         [13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          [16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          [19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    [22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         [25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       [28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          [31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           [34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          [37] grid_4.1.1             xtable_1.8-4           gtable_0.3.0          [40] lifecycle_1.0.1        DBI_1.1.1              magrittr_2.0.1        [43] scales_1.1.1           KernSmooth_2.23-20     cachem_1.0.6          [46] XVector_0.34.0         genefilter_1.76.0      ellipsis_0.3.2        [49] vctrs_0.3.8            generics_0.1.1         bit64_4.0.5           [52] glue_1.5.1             purrr_0.3.4            parallel_4.1.1        [55] fastmap_1.1.0          survival_3.2-13        AnnotationDbi_1.56.1  [58] colorspace_2.0-2       caTools_1.18.2         memoise_2.0.1         
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honoredestimating size factorsestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationshipfinal dispersion estimatesfitting model and testing
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deseq2 (Test #3)" name="2" time="126.05875182151794">
        
            
            <system-out><![CDATA[
            primary factor: Treatment ---------------------DESeq2 run informationsample table:                                         TreatmentGSM461176_untreat_single.counts.noheader UntreatedGSM461177_untreat_paired.counts.noheader UntreatedGSM461178_untreat_paired.counts.noheader UntreatedGSM461182_untreat_single.counts.noheader UntreatedGSM461179_treat_single.counts.noheader     TreatedGSM461180_treat_paired.counts.noheader     TreatedGSM461181_treat_paired.counts.noheader     Treateddesign formula:~Treatment7 samples with counts over 3999 genesusing disperion fit type: parametric summary of resultsTreatment: Treated vs Untreatedout of 3429 with nonzero total read countadjusted p-value < 0.1LFC > 0 (up)       : 148, 4.3%LFC < 0 (down)     : 152, 4.4%outliers [1]       : 2, 0.058%low counts [2]     : 659, 19%(mean count < 3)[1] see 'cooksCutoff' argument of ?results[2] see 'independentFiltering' argument of ?resultsNULLSession information:R version 4.1.1 (2021-08-10)Platform: x86_64-conda-linux-gnu (64-bit)Running under: Debian GNU/Linux 10 (buster)Matrix products: defaultBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.solocale: [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   attached base packages:[1] stats4    tools     stats     graphics  grDevices utils     datasets [8] methods   base     other attached packages: [1] rjson_0.2.20                gplots_3.1.1                [3] RColorBrewer_1.1-2          DESeq2_1.34.0               [5] SummarizedExperiment_1.24.0 Biobase_2.54.0              [7] MatrixGenerics_1.6.0        matrixStats_0.61.0          [9] GenomicRanges_1.46.0        GenomeInfoDb_1.30.0        [11] IRanges_2.28.0              S4Vectors_0.32.0           [13] BiocGenerics_0.40.0         getopt_1.20.3              loaded via a namespace (and not attached): [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45        [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0      [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              [10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         [13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          [16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          [19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    [22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         [25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       [28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          [31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           [34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          [37] grid_4.1.1             xtable_1.8-4           gtable_0.3.0          [40] lifecycle_1.0.1        DBI_1.1.1              magrittr_2.0.1        [43] scales_1.1.1           KernSmooth_2.23-20     cachem_1.0.6          [46] XVector_0.34.0         genefilter_1.76.0      ellipsis_0.3.2        [49] vctrs_0.3.8            generics_0.1.1         bit64_4.0.5           [52] glue_1.5.1             purrr_0.3.4            parallel_4.1.1        [55] fastmap_1.1.0          survival_3.2-13        AnnotationDbi_1.56.1  [58] colorspace_2.0-2       caTools_1.18.2         memoise_2.0.1         
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honoredestimating size factorsestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationshipfinal dispersion estimatesfitting model and testing
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deseq2 (Test #4)" name="3" time="114.98859548568726">
        
            
            <system-out><![CDATA[
            primary factor: Treatment ---------------------DESeq2 run informationsample table:                       Treatmentsailfish_quant.sf4.tab Untreatedsailfish_quant.sf5.tab Untreatedsailfish_quant.sf6.tab Untreatedsailfish_quant.sf1.tab   Treatedsailfish_quant.sf2.tab   Treatedsailfish_quant.sf3.tab   Treateddesign formula:~Treatment6 samples with counts over 10 genesusing disperion fit type: parametric summary of resultsTreatment: Treated vs Untreatedout of 8 with nonzero total read countadjusted p-value < 0.1LFC > 0 (up)       : 0, 0%LFC < 0 (down)     : 0, 0%outliers [1]       : 0, 0%low counts [2]     : 0, 0%(mean count < 0)[1] see 'cooksCutoff' argument of ?results[2] see 'independentFiltering' argument of ?resultsNULLSession information:R version 4.1.1 (2021-08-10)Platform: x86_64-conda-linux-gnu (64-bit)Running under: Debian GNU/Linux 10 (buster)Matrix products: defaultBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.solocale: [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   attached base packages:[1] stats4    tools     stats     graphics  grDevices utils     datasets [8] methods   base     other attached packages: [1] tximport_1.22.0             rjson_0.2.20                [3] gplots_3.1.1                RColorBrewer_1.1-2          [5] DESeq2_1.34.0               SummarizedExperiment_1.24.0 [7] Biobase_2.54.0              MatrixGenerics_1.6.0        [9] matrixStats_0.61.0          GenomicRanges_1.46.0       [11] GenomeInfoDb_1.30.0         IRanges_2.28.0             [13] S4Vectors_0.32.0            BiocGenerics_0.40.0        [15] getopt_1.20.3              loaded via a namespace (and not attached): [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45        [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0      [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              [10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         [13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          [16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          [19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    [22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         [25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       [28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          [31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           [34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          [37] grid_4.1.1             jsonlite_1.7.2         xtable_1.8-4          [40] gtable_0.3.0           lifecycle_1.0.1        DBI_1.1.1             [43] magrittr_2.0.1         scales_1.1.1           KernSmooth_2.23-20    [46] cachem_1.0.6           XVector_0.34.0         genefilter_1.76.0     [49] ellipsis_0.3.2         vctrs_0.3.8            generics_0.1.1        [52] bit64_4.0.5            glue_1.5.1             purrr_0.3.4           [55] parallel_4.1.1         fastmap_1.1.0          survival_3.2-13       [58] AnnotationDbi_1.56.1   colorspace_2.0-2       caTools_1.18.2        [61] memoise_2.0.1         
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honoredreading in files with read.delim (install 'readr' package for speed up)1 2 3 4 5 6 summarizing abundancesummarizing countssummarizing lengthusing counts and average transcript lengths from tximportestimating size factorsusing 'avgTxLength' from assays(dds), correcting for library sizeestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationship-- note: fitType='parametric', but the dispersion trend was not well captured by the   function: y = a/x + b, and a local regression fit was automatically substituted.   specify fitType='local' or 'mean' to avoid this message next time.final dispersion estimatesfitting model and testingWarning message:In lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :  Estimated rdf < 1.0; not estimating variance
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deseq2 (Test #5)" name="4" time="119.62345123291016">
        
            
            <system-out><![CDATA[
            primary factor: Treatment ---------------------DESeq2 run informationsample table:                       Treatmentsailfish_quant.sf4.tab Untreatedsailfish_quant.sf5.tab Untreatedsailfish_quant.sf6.tab Untreatedsailfish_quant.sf1.tab   Treatedsailfish_quant.sf2.tab   Treatedsailfish_quant.sf3.tab   Treateddesign formula:~Treatment6 samples with counts over 10 genesusing disperion fit type: parametric summary of resultsTreatment: Treated vs Untreatedout of 8 with nonzero total read countadjusted p-value < 0.1LFC > 0 (up)       : 0, 0%LFC < 0 (down)     : 0, 0%outliers [1]       : 0, 0%low counts [2]     : 0, 0%(mean count < 0)[1] see 'cooksCutoff' argument of ?results[2] see 'independentFiltering' argument of ?resultsNULLSession information:R version 4.1.1 (2021-08-10)Platform: x86_64-conda-linux-gnu (64-bit)Running under: Debian GNU/Linux 10 (buster)Matrix products: defaultBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.solocale: [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   attached base packages:[1] stats4    tools     stats     graphics  grDevices utils     datasets [8] methods   base     other attached packages: [1] GenomicFeatures_1.46.1      AnnotationDbi_1.56.1        [3] tximport_1.22.0             rjson_0.2.20                [5] gplots_3.1.1                RColorBrewer_1.1-2          [7] DESeq2_1.34.0               SummarizedExperiment_1.24.0 [9] Biobase_2.54.0              MatrixGenerics_1.6.0       [11] matrixStats_0.61.0          GenomicRanges_1.46.0       [13] GenomeInfoDb_1.30.0         IRanges_2.28.0             [15] S4Vectors_0.32.0            BiocGenerics_0.40.0        [17] getopt_1.20.3              loaded via a namespace (and not attached): [1] bitops_1.0-7             bit64_4.0.5              filelock_1.0.2           [4] progress_1.2.2           httr_1.4.2               utf8_1.2.2               [7] R6_2.5.1                 KernSmooth_2.23-20       DBI_1.1.1               [10] colorspace_2.0-2         tidyselect_1.1.1         prettyunits_1.1.1       [13] bit_4.0.4                curl_4.3.2               compiler_4.1.1          [16] xml2_1.3.3               DelayedArray_0.20.0      rtracklayer_1.54.0      [19] caTools_1.18.2           scales_1.1.1             genefilter_1.76.0       [22] rappdirs_0.3.3           stringr_1.4.0            digest_0.6.29           [25] Rsamtools_2.10.0         XVector_0.34.0           pkgconfig_2.0.3         [28] dbplyr_2.1.1             fastmap_1.1.0            rlang_0.4.12            [31] RSQLite_2.2.8            BiocIO_1.4.0             generics_0.1.1          [34] jsonlite_1.7.2           BiocParallel_1.28.0      gtools_3.9.2            [37] dplyr_1.0.7              RCurl_1.98-1.5           magrittr_2.0.1          [40] GenomeInfoDbData_1.2.7   Matrix_1.3-4             Rcpp_1.0.7              [43] munsell_0.5.0            fansi_0.4.2              lifecycle_1.0.1         [46] stringi_1.7.6            yaml_2.2.1               zlibbioc_1.40.0         [49] BiocFileCache_2.2.0      grid_4.1.1               blob_1.2.2              [52] parallel_4.1.1           crayon_1.4.2             lattice_0.20-45         [55] Biostrings_2.62.0        splines_4.1.1            annotate_1.72.0         [58] hms_1.1.1                KEGGREST_1.34.0          locfit_1.5-9.4          [61] pillar_1.6.4             geneplotter_1.72.0       biomaRt_2.50.0          [64] XML_3.99-0.8             glue_1.5.1               png_0.1-7               [67] vctrs_0.3.8              gtable_0.3.0             purrr_0.3.4             [70] assertthat_0.2.1         cachem_1.0.6             ggplot2_3.3.5           [73] xtable_1.8-4             restfulr_0.0.13          survival_3.2-13         [76] tibble_3.1.6             GenomicAlignments_1.30.0 memoise_2.0.1           [79] ellipsis_0.3.2          
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honoredImport genomic features from the file as a GRanges object ... OKPrepare the 'metadata' data frame ... OKMake the TxDb object ... OK'select()' returned 1:1 mapping between keys and columnsreading in files with read.delim (install 'readr' package for speed up)1 2 3 4 5 6 reading in files with read.delim (install 'readr' package for speed up)1 2 3 4 5 6 summarizing abundancesummarizing countssummarizing lengthusing counts and average transcript lengths from tximportestimating size factorsusing 'avgTxLength' from assays(dds), correcting for library sizeestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationship-- note: fitType='parametric', but the dispersion trend was not well captured by the   function: y = a/x + b, and a local regression fit was automatically substituted.   specify fitType='local' or 'mean' to avoid this message next time.final dispersion estimatesfitting model and testingWarning message:In lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :  Estimated rdf < 1.0; not estimating variance
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deseq2 (Test #6)" name="5" time="118.11674618721008">
        
            
            <system-out><![CDATA[
            primary factor: Treatment ---------------------DESeq2 run informationsample table:                       Treatmentsailfish_quant.sf4.tab Untreatedsailfish_quant.sf5.tab Untreatedsailfish_quant.sf6.tab Untreatedsailfish_quant.sf1.tab   Treatedsailfish_quant.sf2.tab   Treatedsailfish_quant.sf3.tab   Treateddesign formula:~Treatment6 samples with counts over 11 genesusing disperion fit type: parametric summary of resultsTreatment: Treated vs Untreatedout of 9 with nonzero total read countadjusted p-value < 0.1LFC > 0 (up)       : 0, 0%LFC < 0 (down)     : 0, 0%outliers [1]       : 0, 0%low counts [2]     : 0, 0%(mean count < 0)[1] see 'cooksCutoff' argument of ?results[2] see 'independentFiltering' argument of ?resultsNULLSession information:R version 4.1.1 (2021-08-10)Platform: x86_64-conda-linux-gnu (64-bit)Running under: Debian GNU/Linux 10 (buster)Matrix products: defaultBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.solocale: [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   attached base packages:[1] stats4    tools     stats     graphics  grDevices utils     datasets [8] methods   base     other attached packages: [1] GenomicFeatures_1.46.1      AnnotationDbi_1.56.1        [3] tximport_1.22.0             rjson_0.2.20                [5] gplots_3.1.1                RColorBrewer_1.1-2          [7] DESeq2_1.34.0               SummarizedExperiment_1.24.0 [9] Biobase_2.54.0              MatrixGenerics_1.6.0       [11] matrixStats_0.61.0          GenomicRanges_1.46.0       [13] GenomeInfoDb_1.30.0         IRanges_2.28.0             [15] S4Vectors_0.32.0            BiocGenerics_0.40.0        [17] getopt_1.20.3              loaded via a namespace (and not attached): [1] bitops_1.0-7             bit64_4.0.5              filelock_1.0.2           [4] progress_1.2.2           httr_1.4.2               utf8_1.2.2               [7] R6_2.5.1                 KernSmooth_2.23-20       DBI_1.1.1               [10] colorspace_2.0-2         tidyselect_1.1.1         prettyunits_1.1.1       [13] bit_4.0.4                curl_4.3.2               compiler_4.1.1          [16] xml2_1.3.3               DelayedArray_0.20.0      rtracklayer_1.54.0      [19] caTools_1.18.2           scales_1.1.1             genefilter_1.76.0       [22] rappdirs_0.3.3           stringr_1.4.0            digest_0.6.29           [25] Rsamtools_2.10.0         XVector_0.34.0           pkgconfig_2.0.3         [28] dbplyr_2.1.1             fastmap_1.1.0            rlang_0.4.12            [31] RSQLite_2.2.8            BiocIO_1.4.0             generics_0.1.1          [34] jsonlite_1.7.2           BiocParallel_1.28.0      gtools_3.9.2            [37] dplyr_1.0.7              RCurl_1.98-1.5           magrittr_2.0.1          [40] GenomeInfoDbData_1.2.7   Matrix_1.3-4             Rcpp_1.0.7              [43] munsell_0.5.0            fansi_0.4.2              lifecycle_1.0.1         [46] stringi_1.7.6            yaml_2.2.1               zlibbioc_1.40.0         [49] BiocFileCache_2.2.0      grid_4.1.1               blob_1.2.2              [52] parallel_4.1.1           crayon_1.4.2             lattice_0.20-45         [55] Biostrings_2.62.0        splines_4.1.1            annotate_1.72.0         [58] hms_1.1.1                KEGGREST_1.34.0          locfit_1.5-9.4          [61] pillar_1.6.4             geneplotter_1.72.0       biomaRt_2.50.0          [64] XML_3.99-0.8             glue_1.5.1               png_0.1-7               [67] vctrs_0.3.8              gtable_0.3.0             purrr_0.3.4             [70] assertthat_0.2.1         cachem_1.0.6             ggplot2_3.3.5           [73] xtable_1.8-4             restfulr_0.0.13          survival_3.2-13         [76] tibble_3.1.6             GenomicAlignments_1.30.0 memoise_2.0.1           [79] ellipsis_0.3.2          
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honoredImport genomic features from the file as a GRanges object ... OKPrepare the 'metadata' data frame ... OKMake the TxDb object ... OK'select()' returned 1:1 mapping between keys and columnsreading in files with read.delim (install 'readr' package for speed up)1 2 3 4 5 6 reading in files with read.delim (install 'readr' package for speed up)1 2 3 4 5 6 summarizing abundancesummarizing countssummarizing lengthusing counts and average transcript lengths from tximportWarning message:In .get_cds_IDX(mcols0$type, mcols0$phase) :  The "phase" metadata column contains non-NA values for features of type  stop_codon. This information was ignored.estimating size factorsusing 'avgTxLength' from assays(dds), correcting for library sizeestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationship-- note: fitType='parametric', but the dispersion trend was not well captured by the   function: y = a/x + b, and a local regression fit was automatically substituted.   specify fitType='local' or 'mean' to avoid this message next time.final dispersion estimatesfitting model and testingWarning message:In lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :  Estimated rdf < 1.0; not estimating variance
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deseq2 (Test #7)" name="6" time="114.39817094802856">
        
            
            <system-out><![CDATA[
            primary factor: Treatment ---------------------DESeq2 run informationsample table:  Treatment4 Untreated5 Untreated6 Untreated1   Treated2   Treated3   Treateddesign formula:~Treatment6 samples with counts over 10 genesusing disperion fit type: parametric summary of resultsTreatment: Treated vs Untreatedout of 8 with nonzero total read countadjusted p-value < 0.1LFC > 0 (up)       : 0, 0%LFC < 0 (down)     : 0, 0%outliers [1]       : 0, 0%low counts [2]     : 0, 0%(mean count < 0)[1] see 'cooksCutoff' argument of ?results[2] see 'independentFiltering' argument of ?resultsNULLSession information:R version 4.1.1 (2021-08-10)Platform: x86_64-conda-linux-gnu (64-bit)Running under: Debian GNU/Linux 10 (buster)Matrix products: defaultBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.solocale: [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   attached base packages:[1] stats4    tools     stats     graphics  grDevices utils     datasets [8] methods   base     other attached packages: [1] tximport_1.22.0             rjson_0.2.20                [3] gplots_3.1.1                RColorBrewer_1.1-2          [5] DESeq2_1.34.0               SummarizedExperiment_1.24.0 [7] Biobase_2.54.0              MatrixGenerics_1.6.0        [9] matrixStats_0.61.0          GenomicRanges_1.46.0       [11] GenomeInfoDb_1.30.0         IRanges_2.28.0             [13] S4Vectors_0.32.0            BiocGenerics_0.40.0        [15] getopt_1.20.3              loaded via a namespace (and not attached): [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45        [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0      [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              [10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         [13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          [16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          [19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    [22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         [25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       [28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          [31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           [34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          [37] grid_4.1.1             jsonlite_1.7.2         xtable_1.8-4          [40] gtable_0.3.0           lifecycle_1.0.1        DBI_1.1.1             [43] magrittr_2.0.1         scales_1.1.1           KernSmooth_2.23-20    [46] cachem_1.0.6           XVector_0.34.0         genefilter_1.76.0     [49] ellipsis_0.3.2         vctrs_0.3.8            generics_0.1.1        [52] bit64_4.0.5            glue_1.5.1             purrr_0.3.4           [55] parallel_4.1.1         fastmap_1.1.0          survival_3.2-13       [58] AnnotationDbi_1.56.1   colorspace_2.0-2       caTools_1.18.2        [61] memoise_2.0.1         
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honoredreading in files with read.delim (install 'readr' package for speed up)1 2 3 4 5 6 summarizing abundancesummarizing countssummarizing lengthusing counts and average transcript lengths from tximportestimating size factorsusing 'avgTxLength' from assays(dds), correcting for library sizeestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationship-- note: fitType='parametric', but the dispersion trend was not well captured by the   function: y = a/x + b, and a local regression fit was automatically substituted.   specify fitType='local' or 'mean' to avoid this message next time.final dispersion estimatesfitting model and testingWarning message:In lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :  Estimated rdf < 1.0; not estimating variance
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deseq2 (Test #8)" name="7" time="109.75006437301636">
        
            
            <system-out><![CDATA[
            primary factor: Treatment ---------------------DESeq2 run informationsample table:  Treatment4 Untreated5 Untreated6 Untreated1   Treated2   Treated3   Treateddesign formula:~Treatment6 samples with counts over 10 genesusing disperion fit type: parametric Session information:R version 4.1.1 (2021-08-10)Platform: x86_64-conda-linux-gnu (64-bit)Running under: Debian GNU/Linux 10 (buster)Matrix products: defaultBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.solocale: [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   attached base packages:[1] stats4    tools     stats     graphics  grDevices utils     datasets [8] methods   base     other attached packages: [1] tximport_1.22.0             rjson_0.2.20                [3] gplots_3.1.1                RColorBrewer_1.1-2          [5] DESeq2_1.34.0               SummarizedExperiment_1.24.0 [7] Biobase_2.54.0              MatrixGenerics_1.6.0        [9] matrixStats_0.61.0          GenomicRanges_1.46.0       [11] GenomeInfoDb_1.30.0         IRanges_2.28.0             [13] S4Vectors_0.32.0            BiocGenerics_0.40.0        [15] getopt_1.20.3              loaded via a namespace (and not attached): [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45        [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0      [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              [10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         [13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          [16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          [19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    [22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         [25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       [28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          [31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           [34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          [37] grid_4.1.1             jsonlite_1.7.2         xtable_1.8-4          [40] gtable_0.3.0           lifecycle_1.0.1        DBI_1.1.1             [43] magrittr_2.0.1         scales_1.1.1           KernSmooth_2.23-20    [46] cachem_1.0.6           XVector_0.34.0         genefilter_1.76.0     [49] ellipsis_0.3.2         vctrs_0.3.8            generics_0.1.1        [52] bit64_4.0.5            glue_1.5.1             purrr_0.3.4           [55] parallel_4.1.1         fastmap_1.1.0          survival_3.2-13       [58] AnnotationDbi_1.56.1   colorspace_2.0-2       caTools_1.18.2        [61] memoise_2.0.1         
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honoredreading in files with read.delim (install 'readr' package for speed up)1 2 3 4 5 6 summarizing abundancesummarizing countssummarizing lengthusing counts and average transcript lengths from tximportestimating size factorsusing 'avgTxLength' from assays(dds), correcting for library sizeestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationship-- note: fitType='parametric', but the dispersion trend was not well captured by the   function: y = a/x + b, and a local regression fit was automatically substituted.   specify fitType='local' or 'mean' to avoid this message next time.final dispersion estimatesfitting model and testingWarning message:In lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :  Estimated rdf < 1.0; not estimating variance
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deseq2 (Test #9)" name="8" time="135.13864135742188">
        
            
            <system-out><![CDATA[
            primary factor: Treatment ---------------------DESeq2 run informationsample table:                       Treatmentsailfish_quant.sf4.tab Untreatedsailfish_quant.sf5.tab Untreatedsailfish_quant.sf6.tab Untreatedsailfish_quant.sf1.tab   Treatedsailfish_quant.sf2.tab   Treatedsailfish_quant.sf3.tab   Treateddesign formula:~Treatment6 samples with counts over 11 genesusing disperion fit type: parametric summary of resultsTreatment: Treated vs Untreatedout of 9 with nonzero total read countadjusted p-value < 0.1LFC > 0 (up)       : 0, 0%LFC < 0 (down)     : 0, 0%outliers [1]       : 0, 0%low counts [2]     : 0, 0%(mean count < 0)[1] see 'cooksCutoff' argument of ?results[2] see 'independentFiltering' argument of ?resultsNULLSession information:R version 4.1.1 (2021-08-10)Platform: x86_64-conda-linux-gnu (64-bit)Running under: Debian GNU/Linux 10 (buster)Matrix products: defaultBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.solocale: [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   attached base packages:[1] stats4    tools     stats     graphics  grDevices utils     datasets [8] methods   base     other attached packages: [1] GenomicFeatures_1.46.1      AnnotationDbi_1.56.1        [3] tximport_1.22.0             rjson_0.2.20                [5] gplots_3.1.1                RColorBrewer_1.1-2          [7] DESeq2_1.34.0               SummarizedExperiment_1.24.0 [9] Biobase_2.54.0              MatrixGenerics_1.6.0       [11] matrixStats_0.61.0          GenomicRanges_1.46.0       [13] GenomeInfoDb_1.30.0         IRanges_2.28.0             [15] S4Vectors_0.32.0            BiocGenerics_0.40.0        [17] getopt_1.20.3              loaded via a namespace (and not attached): [1] bitops_1.0-7             bit64_4.0.5              filelock_1.0.2           [4] progress_1.2.2           httr_1.4.2               utf8_1.2.2               [7] R6_2.5.1                 KernSmooth_2.23-20       DBI_1.1.1               [10] colorspace_2.0-2         tidyselect_1.1.1         prettyunits_1.1.1       [13] bit_4.0.4                curl_4.3.2               compiler_4.1.1          [16] xml2_1.3.3               DelayedArray_0.20.0      rtracklayer_1.54.0      [19] caTools_1.18.2           scales_1.1.1             genefilter_1.76.0       [22] rappdirs_0.3.3           stringr_1.4.0            digest_0.6.29           [25] Rsamtools_2.10.0         XVector_0.34.0           pkgconfig_2.0.3         [28] dbplyr_2.1.1             fastmap_1.1.0            rlang_0.4.12            [31] RSQLite_2.2.8            BiocIO_1.4.0             generics_0.1.1          [34] jsonlite_1.7.2           BiocParallel_1.28.0      gtools_3.9.2            [37] dplyr_1.0.7              RCurl_1.98-1.5           magrittr_2.0.1          [40] GenomeInfoDbData_1.2.7   Matrix_1.3-4             Rcpp_1.0.7              [43] munsell_0.5.0            fansi_0.4.2              lifecycle_1.0.1         [46] stringi_1.7.6            yaml_2.2.1               zlibbioc_1.40.0         [49] BiocFileCache_2.2.0      grid_4.1.1               blob_1.2.2              [52] parallel_4.1.1           crayon_1.4.2             lattice_0.20-45         [55] Biostrings_2.62.0        splines_4.1.1            annotate_1.72.0         [58] hms_1.1.1                KEGGREST_1.34.0          locfit_1.5-9.4          [61] pillar_1.6.4             geneplotter_1.72.0       biomaRt_2.50.0          [64] XML_3.99-0.8             glue_1.5.1               png_0.1-7               [67] vctrs_0.3.8              gtable_0.3.0             purrr_0.3.4             [70] assertthat_0.2.1         cachem_1.0.6             ggplot2_3.3.5           [73] xtable_1.8-4             restfulr_0.0.13          survival_3.2-13         [76] tibble_3.1.6             GenomicAlignments_1.30.0 memoise_2.0.1           [79] ellipsis_0.3.2          
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honoredImport genomic features from the file as a GRanges object ... OKPrepare the 'metadata' data frame ... OKMake the TxDb object ... OK'select()' returned 1:1 mapping between keys and columnsreading in files with read.delim (install 'readr' package for speed up)1 2 3 4 5 6 reading in files with read.delim (install 'readr' package for speed up)1 2 3 4 5 6 summarizing abundancesummarizing countssummarizing lengthusing counts and average transcript lengths from tximportWarning message:In .get_cds_IDX(mcols0$type, mcols0$phase) :  The "phase" metadata column contains non-NA values for features of type  stop_codon. This information was ignored.estimating size factorsusing 'avgTxLength' from assays(dds), correcting for library sizeestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationship-- note: fitType='parametric', but the dispersion trend was not well captured by the   function: y = a/x + b, and a local regression fit was automatically substituted.   specify fitType='local' or 'mean' to avoid this message next time.final dispersion estimatesfitting model and testingWarning message:In lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :  Estimated rdf < 1.0; not estimating variance
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deseq2 (Test #10)" name="9" time="116.86945533752441">
        
            
            <system-out><![CDATA[
            primary factor: Treatment ---------------------size factors for samples: taking tximport data into accountDESeq2 run informationsample table:                       Treatmentsailfish_quant.sf4.tab Untreatedsailfish_quant.sf5.tab Untreatedsailfish_quant.sf6.tab Untreatedsailfish_quant.sf1.tab   Treatedsailfish_quant.sf2.tab   Treatedsailfish_quant.sf3.tab   Treateddesign formula:~Treatment6 samples with counts over 11 genesusing disperion fit type: parametric summary of resultsTreatment: Treated vs Untreatedout of 9 with nonzero total read countadjusted p-value < 0.1LFC > 0 (up)       : 0, 0%LFC < 0 (down)     : 0, 0%outliers [1]       : 0, 0%low counts [2]     : 0, 0%(mean count < 0)[1] see 'cooksCutoff' argument of ?results[2] see 'independentFiltering' argument of ?resultsNULLSession information:R version 4.1.1 (2021-08-10)Platform: x86_64-conda-linux-gnu (64-bit)Running under: Debian GNU/Linux 10 (buster)Matrix products: defaultBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.solocale: [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   attached base packages:[1] stats4    tools     stats     graphics  grDevices utils     datasets [8] methods   base     other attached packages: [1] GenomicFeatures_1.46.1      AnnotationDbi_1.56.1        [3] tximport_1.22.0             rjson_0.2.20                [5] gplots_3.1.1                RColorBrewer_1.1-2          [7] DESeq2_1.34.0               SummarizedExperiment_1.24.0 [9] Biobase_2.54.0              MatrixGenerics_1.6.0       [11] matrixStats_0.61.0          GenomicRanges_1.46.0       [13] GenomeInfoDb_1.30.0         IRanges_2.28.0             [15] S4Vectors_0.32.0            BiocGenerics_0.40.0        [17] getopt_1.20.3              loaded via a namespace (and not attached): [1] bitops_1.0-7             bit64_4.0.5              filelock_1.0.2           [4] progress_1.2.2           httr_1.4.2               utf8_1.2.2               [7] R6_2.5.1                 KernSmooth_2.23-20       DBI_1.1.1               [10] colorspace_2.0-2         tidyselect_1.1.1         prettyunits_1.1.1       [13] bit_4.0.4                curl_4.3.2               compiler_4.1.1          [16] xml2_1.3.3               DelayedArray_0.20.0      rtracklayer_1.54.0      [19] caTools_1.18.2           scales_1.1.1             genefilter_1.76.0       [22] rappdirs_0.3.3           stringr_1.4.0            digest_0.6.29           [25] Rsamtools_2.10.0         XVector_0.34.0           pkgconfig_2.0.3         [28] dbplyr_2.1.1             fastmap_1.1.0            rlang_0.4.12            [31] RSQLite_2.2.8            BiocIO_1.4.0             generics_0.1.1          [34] jsonlite_1.7.2           BiocParallel_1.28.0      gtools_3.9.2            [37] dplyr_1.0.7              RCurl_1.98-1.5           magrittr_2.0.1          [40] GenomeInfoDbData_1.2.7   Matrix_1.3-4             Rcpp_1.0.7              [43] munsell_0.5.0            fansi_0.4.2              lifecycle_1.0.1         [46] stringi_1.7.6            yaml_2.2.1               zlibbioc_1.40.0         [49] BiocFileCache_2.2.0      grid_4.1.1               blob_1.2.2              [52] parallel_4.1.1           crayon_1.4.2             lattice_0.20-45         [55] Biostrings_2.62.0        splines_4.1.1            annotate_1.72.0         [58] hms_1.1.1                KEGGREST_1.34.0          locfit_1.5-9.4          [61] pillar_1.6.4             geneplotter_1.72.0       biomaRt_2.50.0          [64] XML_3.99-0.8             glue_1.5.1               png_0.1-7               [67] vctrs_0.3.8              gtable_0.3.0             purrr_0.3.4             [70] assertthat_0.2.1         cachem_1.0.6             ggplot2_3.3.5           [73] xtable_1.8-4             restfulr_0.0.13          survival_3.2-13         [76] tibble_3.1.6             GenomicAlignments_1.30.0 memoise_2.0.1           [79] ellipsis_0.3.2          
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honoredImport genomic features from the file as a GRanges object ... OKPrepare the 'metadata' data frame ... OKMake the TxDb object ... OK'select()' returned 1:1 mapping between keys and columnsreading in files with read.delim (install 'readr' package for speed up)1 2 3 4 5 6 reading in files with read.delim (install 'readr' package for speed up)1 2 3 4 5 6 summarizing abundancesummarizing countssummarizing lengthusing counts and average transcript lengths from tximportWarning message:In .get_cds_IDX(mcols0$type, mcols0$phase) :  The "phase" metadata column contains non-NA values for features of type  stop_codon. This information was ignored.estimating size factorsusing 'avgTxLength' from assays(dds), correcting for library sizeestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationship-- note: fitType='parametric', but the dispersion trend was not well captured by the   function: y = a/x + b, and a local regression fit was automatically substituted.   specify fitType='local' or 'mean' to avoid this message next time.final dispersion estimatesfitting model and testingWarning message:In lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :  Estimated rdf < 1.0; not estimating variance
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="mummer_mummer (Test #1)" name="0" time="92.88944935798645">
        
            
            <system-out><![CDATA[
            gnuplot 5.2 patchlevel 7
            ]]></system-out>
            <system-err><![CDATA[
            Reading mummer file /galaxy/server/database/objects/3/5/a/dataset_35a58675-8847-47c6-946e-fe3cf6127697.dat (use mummer -c)Writing plot files out.fplot, out.rplot, out.hplotWriting gnuplot script out.gpRendering plot out.pngWARNING: Unable to run 'false out.gp', Inappropriate ioctl for device
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_yield_plot (Test #1)" name="0" time="94.38626790046692">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_yield_plot (Test #2)" name="1" time="63.04824423789978">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="qualimap_bamqc (Test #1)" name="0" time="101.23199439048767">
        
            
            <system-out><![CDATA[
            Java memory size is set to 1200MLaunching application...detected environment java options -Djava.awt.headless=true -Xmx2000mQualiMap v.2.2.2-devBuilt on 2019-11-11 14:05Selected tool: bamqcAvailable memory (Mb): 60Max memory (Mb): 2027Starting bam qc....Loading sam header...Loading locator...Loading reference...Only flagged duplicate alignments will be skipped...Number of windows: 400, effective number of windows: 325Chunk of reads size: 1000Number of threads: 1Processed 50 out of 325 windows...Processed 100 out of 325 windows...Processed 150 out of 325 windows...Processed 200 out of 325 windows...Processed 250 out of 325 windows...Processed 300 out of 325 windows...Total processed windows:325Number of reads: 100Number of valid reads: 100Number of correct strand reads:0Inside of regions...Num mapped reads: 100Num mapped first of pair: 0Num mapped second of pair: 0Num singletons: 0Time taken to analyze reads: 0Computing descriptors...numberOfMappedBases: 12665referenceSize: 650numberOfSequencedBases: 7465numberOfAs: 1910Computing per chromosome statistics...Computing histograms...Overall analysis time: 0end of bam qcComputing report...Writing HTML report...HTML report created successfullyFinished
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="qualimap_bamqc (Test #2)" name="1" time="67.72330904006958">
        
            
            <system-out><![CDATA[
            Java memory size is set to 1200MLaunching application...detected environment java options -Djava.awt.headless=true -Xmx2000mQualiMap v.2.2.2-devBuilt on 2019-11-11 14:05Selected tool: bamqcAvailable memory (Mb): 60Max memory (Mb): 2027Starting bam qc....Loading sam header...Loading locator...Loading reference...Only flagged duplicate alignments will be skipped...Number of windows: 400, effective number of windows: 325Chunk of reads size: 1000Number of threads: 1Processed 50 out of 325 windows...Processed 100 out of 325 windows...Processed 150 out of 325 windows...Processed 200 out of 325 windows...Processed 250 out of 325 windows...Processed 300 out of 325 windows...Total processed windows:325Number of reads: 100Number of valid reads: 100Number of correct strand reads:0Inside of regions...Num mapped reads: 100Num mapped first of pair: 0Num mapped second of pair: 0Num singletons: 0Time taken to analyze reads: 0Computing descriptors...numberOfMappedBases: 12665referenceSize: 650numberOfSequencedBases: 7465numberOfAs: 1910Computing per chromosome statistics...Computing histograms...Overall analysis time: 0end of bam qcComputing report...Writing HTML report...HTML report created successfullyFinished
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="qualimap_bamqc (Test #3)" name="2" time="66.74423170089722">
        
            
            <system-out><![CDATA[
            Java memory size is set to 1200MLaunching application...detected environment java options -Djava.awt.headless=true -Xmx2000mQualiMap v.2.2.2-devBuilt on 2019-11-11 14:05Selected tool: bamqcAvailable memory (Mb): 60Max memory (Mb): 2027Starting bam qc....Loading sam header...Loading locator...Loading reference...Only flagged duplicate alignments will be skipped...Number of windows: 400, effective number of windows: 325Chunk of reads size: 1000Number of threads: 1Initializing regions from regions.gtf.....Found 4 regionsFilling region references... Processed 50 out of 325 windows...Processed 100 out of 325 windows...Processed 150 out of 325 windows...Processed 200 out of 325 windows...Processed 250 out of 325 windows...Processed 300 out of 325 windows...Total processed windows:325Number of reads: 100Number of valid reads: 100Number of correct strand reads:0Inside of regions...Num mapped reads: 82Num mapped first of pair: 0Num mapped second of pair: 0Num singletons: 0Time taken to analyze reads: 0Computing descriptors...numberOfMappedBases: 6451referenceSize: 650numberOfSequencedBases: 5101numberOfAs: 1243Computing per chromosome statistics...Computing histograms...Overall analysis time: 0end of bam qcComputing report...Writing HTML report...HTML report created successfullyFinished
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="qualimap_bamqc (Test #4)" name="3" time="68.97152471542358">
        
            
            <system-out><![CDATA[
            Java memory size is set to 1200MLaunching application...detected environment java options -Djava.awt.headless=true -Xmx2000mQualiMap v.2.2.2-devBuilt on 2019-11-11 14:05Selected tool: bamqcAvailable memory (Mb): 60Max memory (Mb): 2027Starting bam qc....Loading sam header...Loading locator...Loading reference...Only flagged duplicate alignments will be skipped...Number of windows: 400, effective number of windows: 325Chunk of reads size: 1000Number of threads: 1Initializing regions from regions.gtf.....Found 4 regionsFilling region references... Processed 50 out of 325 windows...Processed 100 out of 325 windows...Processed 150 out of 325 windows...Processed 200 out of 325 windows...Processed 250 out of 325 windows...Processed 300 out of 325 windows...Total processed windows:325Number of reads: 100Number of valid reads: 100Number of correct strand reads:0Inside of regions...Num mapped reads: 82Num mapped first of pair: 0Num mapped second of pair: 0Num singletons: 0Time taken to analyze reads: 0Computing descriptors...numberOfMappedBases: 6451referenceSize: 650numberOfSequencedBases: 5101numberOfAs: 1243Computing per chromosome statistics...Computing histograms...Overall analysis time: 0end of bam qcComputing report...Writing HTML report...HTML report created successfullyFinished
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="qualimap_bamqc (Test #5)" name="4" time="70.533029794693">
        
            
            <system-out><![CDATA[
            Java memory size is set to 1200MLaunching application...detected environment java options -Djava.awt.headless=true -Xmx2000mQualiMap v.2.2.2-devBuilt on 2019-11-11 14:05Selected tool: bamqcAvailable memory (Mb): 60Max memory (Mb): 2027Starting bam qc....Loading sam header...Loading locator...Loading reference...Only flagged duplicate alignments will be skipped...Number of windows: 400, effective number of windows: 325Chunk of reads size: 1000Number of threads: 1Initializing regions from regions.gtf.....Found 4 regionsFilling region references... Processed 50 out of 325 windows...Processed 100 out of 325 windows...Processed 150 out of 325 windows...Processed 200 out of 325 windows...Processed 250 out of 325 windows...Processed 300 out of 325 windows...Total processed windows:325Number of reads: 100Number of valid reads: 100Number of correct strand reads:0Inside of regions...Num mapped reads: 82Num mapped first of pair: 0Num mapped second of pair: 0Num singletons: 0Ouside of regions...Num mapped reads: 18Num mapped first of pair: 0Num mapped second of pair: 0Num singletons: 0Time taken to analyze reads: 0Computing descriptors...numberOfMappedBases: 6451referenceSize: 650numberOfSequencedBases: 5101numberOfAs: 1243Computing per chromosome statistics...Computing histograms...Computing descriptors for outside regions...numberOfMappedBases: 6214referenceSize: 650numberOfSequencedBases: 2364numberOfAs: 667Computing per chromosome statistics for outside regions...Computing histograms for outside regions...Overall analysis time: 0end of bam qcComputing report...Writing HTML report...HTML report created successfullyFinished
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_stats (Test #1)" name="0" time="68.48338866233826">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_stats (Test #2)" name="1" time="62.29517102241516">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_stats (Test #11)" name="10" time="61.97628927230835">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_stats (Test #12)" name="11" time="62.41541600227356">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_stats (Test #13)" name="12" time="56.29285669326782">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_stats (Test #3)" name="2" time="61.8157377243042">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_stats (Test #4)" name="3" time="62.65912699699402">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_stats (Test #5)" name="4" time="60.93698835372925">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_stats (Test #6)" name="5" time="62.3341178894043">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_stats (Test #7)" name="6" time="62.12450313568115">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_stats (Test #8)" name="7" time="63.25047850608826">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_stats (Test #9)" name="8" time="62.59204864501953">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_stats (Test #10)" name="9" time="62.90753960609436">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #1)" name="0" time="69.79007148742676">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #2)" name="1" time="60.32200646400452">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #11)" name="10" time="60.9665048122406">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #12)" name="11" time="60.27966523170471">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #13)" name="12" time="60.34588956832886">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #14)" name="13" time="61.13210940361023">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #15)" name="14" time="60.22019720077515">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #16)" name="15" time="61.21733045578003">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #17)" name="16" time="60.16479516029358">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #18)" name="17" time="60.15186619758606">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #19)" name="18" time="61.179543018341064">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #20)" name="19" time="10.634939908981323">
        
            <error type="error" message="An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.<>()"><![CDATA[
                { "dynamic_param_error": false, "execution_problem": "An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.\u003c\u003e()", "inputs": {  "singtabop|input": {   "id": "d0e942504d90cb07",   "src": "hda"  },  "singtabop|use_type": "single",  "singtabop|user|general|fulltable_custom_expr": "for n in table: n = n + 1",  "singtabop|user|general|use": "custom",  "singtabop|user|mode": "fulltable" }, "status": "success", "test_index": 19, "time_seconds": 10.634939908981323, "tool_id": "table_compute", "tool_version": "1.2.4+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="table_compute (Test #3)" name="2" time="60.7458860874176">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #21)" name="20" time="11.286375761032104">
        
            <error type="error" message="An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.<>()"><![CDATA[
                { "dynamic_param_error": false, "execution_problem": "An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.\u003c\u003e()", "inputs": {  "singtabop|input": {   "id": "a31b398afe7e0160",   "src": "hda"  },  "singtabop|use_type": "single",  "singtabop|user|general|fulltable_custom_expr": "table + table[0,0]",  "singtabop|user|general|use": "custom",  "singtabop|user|mode": "fulltable" }, "status": "success", "test_index": 20, "time_seconds": 11.286375761032104, "tool_id": "table_compute", "tool_version": "1.2.4+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="table_compute (Test #22)" name="21" time="61.01303768157959">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #23)" name="22" time="61.000837087631226">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #24)" name="23" time="60.19466304779053">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #25)" name="24" time="61.22382926940918">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #26)" name="25" time="60.25384759902954">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #27)" name="26" time="61.345195293426514">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #28)" name="27" time="60.288084268569946">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #29)" name="28" time="60.941814661026">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #30)" name="29" time="61.281811475753784">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #4)" name="3" time="61.399752378463745">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #31)" name="30" time="67.24589371681213">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #32)" name="31" time="61.05147957801819">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #33)" name="32" time="60.45788073539734">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #34)" name="33" time="61.11324977874756">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #35)" name="34" time="61.23191738128662">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #36)" name="35" time="63.371933698654175">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #37)" name="36" time="62.385804176330566">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #38)" name="37" time="63.32030940055847">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #39)" name="38" time="62.0543372631073">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #40)" name="39" time="63.05880880355835">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #5)" name="4" time="59.963902711868286">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #41)" name="40" time="11.794297933578491">
        
            <error type="error" message="An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.<>()"><![CDATA[
                { "dynamic_param_error": false, "execution_problem": "An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.\u003c\u003e()", "inputs": {  "singtabop|col_row_names": [   "has_col_names",   "has_row_names"  ],  "singtabop|input": {   "id": "9a3b7563b3969039",   "src": "hda"  },  "singtabop|use_type": "single",  "singtabop|user|element|custom_expr": "el\u0027+\u0027em",  "singtabop|user|element|mode": "custom",  "singtabop|user|mode": "element" }, "status": "success", "test_index": 40, "time_seconds": 11.794297933578491, "tool_id": "table_compute", "tool_version": "1.2.4+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="table_compute (Test #42)" name="41" time="63.337093353271484">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #43)" name="42" time="63.27811789512634">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #6)" name="5" time="59.57236313819885">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #7)" name="6" time="59.710066080093384">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #8)" name="7" time="60.379809617996216">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #9)" name="8" time="61.06492042541504">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #10)" name="9" time="60.32919478416443">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="vcfcommonsamples (Test #1)" name="0" time="68.30395936965942">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="vcfdistance (Test #1)" name="0" time="59.32109546661377">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
</testsuite>