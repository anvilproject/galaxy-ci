{"version": "0.1", "suitename": "Ephemeris tool tests targeting http://34.148.1.59:8000/galaxy/", "results": {"total": 103, "errors": 25, "failures": 0, "skips": 0}, "tests": [{"id": "toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon/1.4.13-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon", "tool_version": "1.4.13", "test_index": 0, "time_seconds": 122.80100703239441, "inputs": {"reads": {"src": "hda", "id": "ffbba2629df4f383"}, "overlaps": {"src": "hda", "id": "21acd4fa1deddc64"}, "corrected_reads": {"src": "hda", "id": "bc73e69019b282ca"}, "u": true, "f": true, "w": "800", "e": "0.2"}, "job": {"model_class": "Job", "id": "10a7cc602972568d", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:23:40.334773", "create_time": "2022-10-22T17:22:07.917125", "galaxy_version": "21.09", "command_version": "v1.4.13", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon/1.4.13", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-6q7gj", "command_line": "ln -s '/galaxy/server/database/objects/6/0/5/dataset_605c0c69-e853-47fa-81c8-3727f6aaaa6d.dat' reads.fasta && ln -s '/galaxy/server/database/objects/a/f/a/dataset_afa68087-dfa6-4951-95da-01e56931b146.dat' overlaps.sam && ln -s '/galaxy/server/database/objects/1/d/3/dataset_1d3dad8e-25cd-4431-a842-ddd4b993ceb9.dat' corrected_reads.fasta &&  racon reads.fasta overlaps.sam corrected_reads.fasta -t ${GALAXY_SLOTS:-4} -u -f -w 800 -q 10.0 -e 0.2 -m 5 -x -4 -g -8 > racon_polished_consensus.fa", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "g": "\"-8\"", "x": "\"-4\"", "m": "\"5\"", "e": "\"0.2\"", "q": "\"10.0\"", "w": "\"800\"", "f": "\"true\"", "u": "\"true\""}, "inputs": {"reads": {"id": "ffbba2629df4f383", "src": "hda", "uuid": "605c0c69-e853-47fa-81c8-3727f6aaaa6d"}, "overlaps": {"id": "21acd4fa1deddc64", "src": "hda", "uuid": "afa68087-dfa6-4951-95da-01e56931b146"}, "corrected_reads": {"id": "bc73e69019b282ca", "src": "hda", "uuid": "1d3dad8e-25cd-4431-a842-ddd4b993ceb9"}}, "outputs": {"consensus": {"id": "b89edffed9696332", "src": "hda", "uuid": "d54ab8c4-283b-44f9-b770-45a946c17f54"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[racon::Polisher::initialize] loaded target sequences 0.001204 s\n[racon::Polisher::initialize] loaded sequences 0.010991 s\n[racon::Polisher::initialize] loaded overlaps 0.010042 s\n[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.008918 s\r[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.009386 s\r[racon::Polisher::initialize] aligning overlaps [===>                ] 0.009923 s\r[racon::Polisher::initialize] aligning overlaps [====>               ] 0.010445 s\r[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.010761 s\r[racon::Polisher::initialize] aligning overlaps [======>             ] 0.011093 s\r[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.011511 s\r[racon::Polisher::initialize] aligning overlaps [========>           ] 0.011837 s\r[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.012210 s\r[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.012520 s\r[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.012953 s\r[racon::Polisher::initialize] aligning overlaps [============>       ] 0.013390 s\r[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.013857 s\r[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.014203 s\r[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.014593 s\r[racon::Polisher::initialize] aligning overlaps [================>   ] 0.015065 s\r[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.015325 s\r[racon::Polisher::initialize] aligning overlaps [==================> ] 0.015804 s\r[racon::Polisher::initialize] aligning overlaps [===================>] 0.016280 s\r[racon::Polisher::initialize] aligning overlaps [====================] 0.017397 s\n[racon::Polisher::initialize] transformed data into windows 0.000300 s\n[racon::Polisher::polish] generating consensus [=>                  ] 0.103536 s\r[racon::Polisher::polish] generating consensus [==>                 ] 0.203149 s\r[racon::Polisher::polish] generating consensus [===>                ] 0.289189 s\r[racon::Polisher::polish] generating consensus [====>               ] 0.340812 s\r[racon::Polisher::polish] generating consensus [=====>              ] 0.385046 s\r[racon::Polisher::polish] generating consensus [======>             ] 0.436335 s\r[racon::Polisher::polish] generating consensus [=======>            ] 0.496986 s\r[racon::Polisher::polish] generating consensus [========>           ] 0.575077 s\r[racon::Polisher::polish] generating consensus [=========>          ] 0.699834 s\r[racon::Polisher::polish] generating consensus [==========>         ] 0.844965 s\r[racon::Polisher::polish] generating consensus [===========>        ] 1.068982 s\r[racon::Polisher::polish] generating consensus [============>       ] 1.259411 s\r[racon::Polisher::polish] generating consensus [=============>      ] 1.430612 s\r[racon::Polisher::polish] generating consensus [==============>     ] 1.576738 s\r[racon::Polisher::polish] generating consensus [===============>    ] 1.672412 s\r[racon::Polisher::polish] generating consensus [================>   ] 1.796933 s\r[racon::Polisher::polish] generating consensus [=================>  ] 1.847021 s\r[racon::Polisher::polish] generating consensus [==================> ] 2.000227 s\r[racon::Polisher::polish] generating consensus [===================>] 2.170585 s\r[racon::Polisher::polish] generating consensus [====================] 2.324681 s\n[racon::Polisher::] total = 2.365501 s\n", "job_stdout": "", "job_stderr": "", "stderr": "[racon::Polisher::initialize] loaded target sequences 0.001204 s\n[racon::Polisher::initialize] loaded sequences 0.010991 s\n[racon::Polisher::initialize] loaded overlaps 0.010042 s\n[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.008918 s\r[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.009386 s\r[racon::Polisher::initialize] aligning overlaps [===>                ] 0.009923 s\r[racon::Polisher::initialize] aligning overlaps [====>               ] 0.010445 s\r[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.010761 s\r[racon::Polisher::initialize] aligning overlaps [======>             ] 0.011093 s\r[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.011511 s\r[racon::Polisher::initialize] aligning overlaps [========>           ] 0.011837 s\r[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.012210 s\r[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.012520 s\r[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.012953 s\r[racon::Polisher::initialize] aligning overlaps [============>       ] 0.013390 s\r[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.013857 s\r[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.014203 s\r[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.014593 s\r[racon::Polisher::initialize] aligning overlaps [================>   ] 0.015065 s\r[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.015325 s\r[racon::Polisher::initialize] aligning overlaps [==================> ] 0.015804 s\r[racon::Polisher::initialize] aligning overlaps [===================>] 0.016280 s\r[racon::Polisher::initialize] aligning overlaps [====================] 0.017397 s\n[racon::Polisher::initialize] transformed data into windows 0.000300 s\n[racon::Polisher::polish] generating consensus [=>                  ] 0.103536 s\r[racon::Polisher::polish] generating consensus [==>                 ] 0.203149 s\r[racon::Polisher::polish] generating consensus [===>                ] 0.289189 s\r[racon::Polisher::polish] generating consensus [====>               ] 0.340812 s\r[racon::Polisher::polish] generating consensus [=====>              ] 0.385046 s\r[racon::Polisher::polish] generating consensus [======>             ] 0.436335 s\r[racon::Polisher::polish] generating consensus [=======>            ] 0.496986 s\r[racon::Polisher::polish] generating consensus [========>           ] 0.575077 s\r[racon::Polisher::polish] generating consensus [=========>          ] 0.699834 s\r[racon::Polisher::polish] generating consensus [==========>         ] 0.844965 s\r[racon::Polisher::polish] generating consensus [===========>        ] 1.068982 s\r[racon::Polisher::polish] generating consensus [============>       ] 1.259411 s\r[racon::Polisher::polish] generating consensus [=============>      ] 1.430612 s\r[racon::Polisher::polish] generating consensus [==============>     ] 1.576738 s\r[racon::Polisher::polish] generating consensus [===============>    ] 1.672412 s\r[racon::Polisher::polish] generating consensus [================>   ] 1.796933 s\r[racon::Polisher::polish] generating consensus [=================>  ] 1.847021 s\r[racon::Polisher::polish] generating consensus [==================> ] 2.000227 s\r[racon::Polisher::polish] generating consensus [===================>] 2.170585 s\r[racon::Polisher::polish] generating consensus [====================] 2.324681 s\n[racon::Polisher::] total = 2.365501 s\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:23:28", "plugin": "core", "name": "end_epoch", "raw_value": "1666459408.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:23:25", "plugin": "core", "name": "start_epoch", "raw_value": "1666459405.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon/1.4.13-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon", "tool_version": "1.4.13", "test_index": 1, "time_seconds": 110.33554244041443, "inputs": {"reads": {"src": "hda", "id": "492eb008f0bc91b9"}, "overlaps": {"src": "hda", "id": "560ec10a38c79921"}, "corrected_reads": {"src": "hda", "id": "f5d14e2d2d9ce220"}}, "job": {"model_class": "Job", "id": "27eb4b86c55db45c", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:24:09.860224", "create_time": "2022-10-22T17:22:38.612055", "galaxy_version": "21.09", "command_version": "v1.4.13", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/racon/racon/1.4.13", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-95bmd", "command_line": "ln -s '/galaxy/server/database/objects/4/3/5/dataset_435a2682-0c8e-41ca-91d5-2f6c93d8863b.dat' reads.fasta && ln -s '/galaxy/server/database/objects/0/8/9/dataset_089b23b2-344b-4a9d-b5ae-294c5bbad55c.dat' overlaps.paf && ln -s '/galaxy/server/database/objects/8/e/8/dataset_8e811f87-8696-49e4-abf5-1a40f6af112d.dat' corrected_reads.fasta &&  racon reads.fasta overlaps.paf corrected_reads.fasta -t ${GALAXY_SLOTS:-4}   -w 500 -q 10.0 -e 0.3 -m 5 -x -4 -g -8 > racon_polished_consensus.fa", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "g": "\"-8\"", "x": "\"-4\"", "m": "\"5\"", "e": "\"0.3\"", "q": "\"10.0\"", "w": "\"500\"", "f": "\"false\"", "u": "\"false\""}, "inputs": {"reads": {"id": "492eb008f0bc91b9", "src": "hda", "uuid": "435a2682-0c8e-41ca-91d5-2f6c93d8863b"}, "overlaps": {"id": "560ec10a38c79921", "src": "hda", "uuid": "089b23b2-344b-4a9d-b5ae-294c5bbad55c"}, "corrected_reads": {"id": "f5d14e2d2d9ce220", "src": "hda", "uuid": "8e811f87-8696-49e4-abf5-1a40f6af112d"}}, "outputs": {"consensus": {"id": "9c70659fbe4a21f9", "src": "hda", "uuid": "e367ec8f-efc6-4b8e-a4fd-2069157c0d69"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[racon::Polisher::initialize] loaded target sequences 0.002656 s\n[racon::Polisher::initialize] loaded sequences 0.028160 s\n[racon::Polisher::initialize] loaded overlaps 0.001312 s\n[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.072965 s\r[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.111366 s\r[racon::Polisher::initialize] aligning overlaps [===>                ] 0.160680 s\r[racon::Polisher::initialize] aligning overlaps [====>               ] 0.181681 s\r[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.217403 s\r[racon::Polisher::initialize] aligning overlaps [======>             ] 0.233930 s\r[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.262976 s\r[racon::Polisher::initialize] aligning overlaps [========>           ] 0.293028 s\r[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.334682 s\r[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.388132 s\r[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.410473 s\r[racon::Polisher::initialize] aligning overlaps [============>       ] 0.455405 s\r[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.491474 s\r[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.520349 s\r[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.552500 s\r[racon::Polisher::initialize] aligning overlaps [================>   ] 0.595336 s\r[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.629129 s\r[racon::Polisher::initialize] aligning overlaps [==================> ] 0.652686 s\r[racon::Polisher::initialize] aligning overlaps [===================>] 0.687931 s\r[racon::Polisher::initialize] aligning overlaps [====================] 0.804556 s\n[racon::Polisher::initialize] transformed data into windows 0.000279 s\n[racon::Polisher::polish] generating consensus [=>                  ] 0.095865 s\r[racon::Polisher::polish] generating consensus [==>                 ] 0.176538 s\r[racon::Polisher::polish] generating consensus [===>                ] 0.261121 s\r[racon::Polisher::polish] generating consensus [====>               ] 0.324061 s\r[racon::Polisher::polish] generating consensus [=====>              ] 0.376898 s\r[racon::Polisher::polish] generating consensus [======>             ] 0.423974 s\r[racon::Polisher::polish] generating consensus [=======>            ] 0.470196 s\r[racon::Polisher::polish] generating consensus [========>           ] 0.512750 s\r[racon::Polisher::polish] generating consensus [=========>          ] 0.544284 s\r[racon::Polisher::polish] generating consensus [==========>         ] 0.593893 s\r[racon::Polisher::polish] generating consensus [===========>        ] 0.716700 s\r[racon::Polisher::polish] generating consensus [============>       ] 0.855038 s\r[racon::Polisher::polish] generating consensus [=============>      ] 1.036851 s\r[racon::Polisher::polish] generating consensus [==============>     ] 1.268217 s\r[racon::Polisher::polish] generating consensus [===============>    ] 1.438339 s\r[racon::Polisher::polish] generating consensus [================>   ] 1.588467 s\r[racon::Polisher::polish] generating consensus [=================>  ] 1.748765 s\r[racon::Polisher::polish] generating consensus [==================> ] 1.828454 s\r[racon::Polisher::polish] generating consensus [===================>] 1.916141 s\r[racon::Polisher::polish] generating consensus [====================] 2.552509 s\n[racon::Polisher::] total = 3.391371 s\n", "job_stdout": "", "job_stderr": "", "stderr": "[racon::Polisher::initialize] loaded target sequences 0.002656 s\n[racon::Polisher::initialize] loaded sequences 0.028160 s\n[racon::Polisher::initialize] loaded overlaps 0.001312 s\n[racon::Polisher::initialize] aligning overlaps [=>                  ] 0.072965 s\r[racon::Polisher::initialize] aligning overlaps [==>                 ] 0.111366 s\r[racon::Polisher::initialize] aligning overlaps [===>                ] 0.160680 s\r[racon::Polisher::initialize] aligning overlaps [====>               ] 0.181681 s\r[racon::Polisher::initialize] aligning overlaps [=====>              ] 0.217403 s\r[racon::Polisher::initialize] aligning overlaps [======>             ] 0.233930 s\r[racon::Polisher::initialize] aligning overlaps [=======>            ] 0.262976 s\r[racon::Polisher::initialize] aligning overlaps [========>           ] 0.293028 s\r[racon::Polisher::initialize] aligning overlaps [=========>          ] 0.334682 s\r[racon::Polisher::initialize] aligning overlaps [==========>         ] 0.388132 s\r[racon::Polisher::initialize] aligning overlaps [===========>        ] 0.410473 s\r[racon::Polisher::initialize] aligning overlaps [============>       ] 0.455405 s\r[racon::Polisher::initialize] aligning overlaps [=============>      ] 0.491474 s\r[racon::Polisher::initialize] aligning overlaps [==============>     ] 0.520349 s\r[racon::Polisher::initialize] aligning overlaps [===============>    ] 0.552500 s\r[racon::Polisher::initialize] aligning overlaps [================>   ] 0.595336 s\r[racon::Polisher::initialize] aligning overlaps [=================>  ] 0.629129 s\r[racon::Polisher::initialize] aligning overlaps [==================> ] 0.652686 s\r[racon::Polisher::initialize] aligning overlaps [===================>] 0.687931 s\r[racon::Polisher::initialize] aligning overlaps [====================] 0.804556 s\n[racon::Polisher::initialize] transformed data into windows 0.000279 s\n[racon::Polisher::polish] generating consensus [=>                  ] 0.095865 s\r[racon::Polisher::polish] generating consensus [==>                 ] 0.176538 s\r[racon::Polisher::polish] generating consensus [===>                ] 0.261121 s\r[racon::Polisher::polish] generating consensus [====>               ] 0.324061 s\r[racon::Polisher::polish] generating consensus [=====>              ] 0.376898 s\r[racon::Polisher::polish] generating consensus [======>             ] 0.423974 s\r[racon::Polisher::polish] generating consensus [=======>            ] 0.470196 s\r[racon::Polisher::polish] generating consensus [========>           ] 0.512750 s\r[racon::Polisher::polish] generating consensus [=========>          ] 0.544284 s\r[racon::Polisher::polish] generating consensus [==========>         ] 0.593893 s\r[racon::Polisher::polish] generating consensus [===========>        ] 0.716700 s\r[racon::Polisher::polish] generating consensus [============>       ] 0.855038 s\r[racon::Polisher::polish] generating consensus [=============>      ] 1.036851 s\r[racon::Polisher::polish] generating consensus [==============>     ] 1.268217 s\r[racon::Polisher::polish] generating consensus [===============>    ] 1.438339 s\r[racon::Polisher::polish] generating consensus [================>   ] 1.588467 s\r[racon::Polisher::polish] generating consensus [=================>  ] 1.748765 s\r[racon::Polisher::polish] generating consensus [==================> ] 1.828454 s\r[racon::Polisher::polish] generating consensus [===================>] 1.916141 s\r[racon::Polisher::polish] generating consensus [====================] 2.552509 s\n[racon::Polisher::] total = 3.391371 s\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:23:56", "plugin": "core", "name": "end_epoch", "raw_value": "1666459436.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:23:52", "plugin": "core", "name": "start_epoch", "raw_value": "1666459432.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 0, "time_seconds": 137.34867215156555, "inputs": {"library|input_1": {"src": "hda", "id": "b9938bbaea56d461"}, "library|input_2": {"src": "hda", "id": "1617132b22fd13a9"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "0460e7cd2b84b12d"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "5ce55e6dbecc39c2", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:54:59.671857", "create_time": "2022-10-22T16:53:07.602002", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-z8qpd", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/9/6/3/dataset_9634154f-2dc5-426a-a0df-add1ee83de5b.dat' genome && ln -s -f '/galaxy/server/database/objects/9/6/3/dataset_9634154f-2dc5-426a-a0df-add1ee83de5b.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/5/d/5/dataset_5d54d430-1083-4836-88a5-628b5c15b6e7.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/d/9/b/dataset_d9b7e15c-c25c-4a8d-91ce-736a47d1a909.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/2/b/0/dataset_2b0ad44c-7f28-43e7-b316-8482b06a5106.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 154, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 152, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 153, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "b9938bbaea56d461", "src": "hda", "uuid": "5d54d430-1083-4836-88a5-628b5c15b6e7"}, "input_2": {"id": "1617132b22fd13a9", "src": "hda", "uuid": "d9b7e15c-c25c-4a8d-91ce-736a47d1a909"}, "own_file": {"id": "0460e7cd2b84b12d", "src": "hda", "uuid": "9634154f-2dc5-426a-a0df-add1ee83de5b"}}, "outputs": {"output": {"id": "428272ada6fcd227", "src": "hda", "uuid": "2b0ad44c-7f28-43e7-b316-8482b06a5106"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/9/6/3/dataset_9634154f-2dc5-426a-a0df-add1ee83de5b.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\nGetting block 3 of 30\nGetting block 4 of 30\n  Reserving size (777) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 4: 30%\n  bucket 3: 20%\n  bucket 4: 40%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 3: 30%\n  bucket 4: 60%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 4: 70%\n  bucket 3: 40%\n  bucket 4: 80%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 4: 90%\n  bucket 3: 50%\n  bucket 4: 100%\n  bucket 1: 80%\n  bucket 2: 70%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 1: 100%\n  bucket 2: 90%\n  bucket 3: 80%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  Sorting block time: 00:00:00\n  bucket 8: 20%\nReturning block of 306 for bucket 6\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nReturning block of 706 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\nGetting block 13 of 30\n  bucket 12: 40%\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 50%\n  bucket 12: 60%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 13: 10%\n  bucket 12: 90%\n  bucket 13: 20%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\nGetting block 18 of 30\n  bucket 17: 80%\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 90%\n  bucket 18: 10%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 20%\n  Sorting block time: 00:00:00\n  bucket 18: 30%\nReturning block of 579 for bucket 17\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\nGetting block 28 of 30\n  bucket 27: 50%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 27: 60%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 27: 70%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  bucket 28: 90%\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nReturning block of 593 for bucket 27\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 20%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 1: 30%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 1: 50%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 4: 60%\n  bucket 1: 60%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 4: 70%\n  bucket 1: 70%\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 4: 80%\n  bucket 1: 80%\n  bucket 3: 100%\n  bucket 2: 100%\n  bucket 4: 90%\n  bucket 1: 90%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  bucket 5: 40%\n  Calculating Z arrays for bucket 6\n  bucket 5: 50%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 6: 10%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 6: 20%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\nGetting block 8 of 30\n  bucket 7: 50%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 60%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 70%\n  bucket 8: 10%\n  bucket 7: 80%\n  bucket 8: 20%\n  bucket 7: 90%\n  bucket 8: 30%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 30\n  bucket 16: 10%\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 17: 20%\n  bucket 16: 50%\n  bucket 17: 30%\n  bucket 16: 60%\n  bucket 17: 40%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 17: 50%\n  bucket 16: 90%\n  bucket 17: 60%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  bucket 18: 50%\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 60%\n  bucket 19: 10%\n  bucket 18: 70%\n  bucket 19: 20%\n  bucket 18: 80%\n  bucket 19: 30%\n  bucket 18: 90%\n  bucket 19: 40%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 70%\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 22: 40%\n  bucket 23: 30%\n  bucket 22: 50%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 50%\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 24: 60%\n  bucket 25: 20%\n  bucket 24: 70%\n  bucket 25: 30%\n  bucket 24: 80%\n  bucket 25: 40%\n  bucket 24: 90%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\nGetting block 27 of 30\n  bucket 26: 30%\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 27: 30%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 27: 40%\n  bucket 26: 90%\n  bucket 27: 50%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  bucket 28: 10%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 28: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 28: 50%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 28: 60%\n  bucket 29: 90%\n  bucket 28: 70%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/9/6/3/dataset_9634154f-2dc5-426a-a0df-add1ee83de5b.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\nGetting block 3 of 30\nGetting block 4 of 30\n  Reserving size (777) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 4: 30%\n  bucket 3: 20%\n  bucket 4: 40%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 3: 30%\n  bucket 4: 60%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 4: 70%\n  bucket 3: 40%\n  bucket 4: 80%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 4: 90%\n  bucket 3: 50%\n  bucket 4: 100%\n  bucket 1: 80%\n  bucket 2: 70%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 1: 100%\n  bucket 2: 90%\n  bucket 3: 80%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  Sorting block time: 00:00:00\n  bucket 8: 20%\nReturning block of 306 for bucket 6\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nReturning block of 706 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\nGetting block 13 of 30\n  bucket 12: 40%\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 50%\n  bucket 12: 60%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 13: 10%\n  bucket 12: 90%\n  bucket 13: 20%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\nGetting block 18 of 30\n  bucket 17: 80%\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 90%\n  bucket 18: 10%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 20%\n  Sorting block time: 00:00:00\n  bucket 18: 30%\nReturning block of 579 for bucket 17\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\nGetting block 28 of 30\n  bucket 27: 50%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 27: 60%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 27: 70%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  bucket 28: 90%\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nReturning block of 593 for bucket 27\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 20%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 1: 30%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 1: 50%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 4: 60%\n  bucket 1: 60%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 4: 70%\n  bucket 1: 70%\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 4: 80%\n  bucket 1: 80%\n  bucket 3: 100%\n  bucket 2: 100%\n  bucket 4: 90%\n  bucket 1: 90%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  bucket 5: 40%\n  Calculating Z arrays for bucket 6\n  bucket 5: 50%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 6: 10%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 6: 20%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\nGetting block 8 of 30\n  bucket 7: 50%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 60%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 70%\n  bucket 8: 10%\n  bucket 7: 80%\n  bucket 8: 20%\n  bucket 7: 90%\n  bucket 8: 30%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 30\n  bucket 16: 10%\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 17: 20%\n  bucket 16: 50%\n  bucket 17: 30%\n  bucket 16: 60%\n  bucket 17: 40%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 17: 50%\n  bucket 16: 90%\n  bucket 17: 60%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  bucket 18: 50%\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 60%\n  bucket 19: 10%\n  bucket 18: 70%\n  bucket 19: 20%\n  bucket 18: 80%\n  bucket 19: 30%\n  bucket 18: 90%\n  bucket 19: 40%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 70%\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 22: 40%\n  bucket 23: 30%\n  bucket 22: 50%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 50%\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 24: 60%\n  bucket 25: 20%\n  bucket 24: 70%\n  bucket 25: 30%\n  bucket 24: 80%\n  bucket 25: 40%\n  bucket 24: 90%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\nGetting block 27 of 30\n  bucket 26: 30%\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 27: 30%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 27: 40%\n  bucket 26: 90%\n  bucket 27: 50%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  bucket 28: 10%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 28: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 28: 50%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 28: 60%\n  bucket 29: 90%\n  bucket 28: 70%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:54:46", "plugin": "core", "name": "end_epoch", "raw_value": "1666457686.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:54:45", "plugin": "core", "name": "start_epoch", "raw_value": "1666457685.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_hr5g_kw_.sam v. /tmp/history_bam_converted_to_sam_g1zkhvlx.sam )\n--- local_file\n+++ history_data\n@@ -1,30 +1,31 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/118/tmp -O bam -o /galaxy/server/database/objects/2/b/0/dataset_2b0ad44c-7f28-43e7-b316-8482b06a5106.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1106:6455:17124\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBAAFABDBBFGGGGGGGGGGHHHGHHGHHHHHHHHHGHHGHHGHHHGHGGGEGHHHHHHHHHHHHHGHHHGHHHGGHGGHHHHHHHHHHHHHHHHHHGHHHHHHHHGHHHHHGGCFEHHHGFHHHHGHHFFH?GGHHHHGHGHGHHCFGGGGGGGFFFFFFFFFFFFFFFFFFFFADFA?.FEFAFFFEFFFFFFFFFFFFDABFBBFFFFFFFFEFFBFFFFFFFFFFF/FFBFFFFFFADE>BFFF9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3>AAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tBBBBAFFFFFFFGGGGGGGFGGHHHHHHHHFHHHFHHHHGHHHHHHHHGHHHGHHEGHHHGDGCHHHHHHHHHGEHEHHHHHHHFHGGEGGHHHHHHHGEGHGHHDHHHHHHHHEHFHGHGHHHGEGCEHHFHHHGHHHHHHHF?GHHHFEFFAFFHHGG?;@DDFFB?@B;BDAFFFEBBD>D>D9@DDCFFFFFFCFDFE.AA;/BB/.;-.;BFBBBFFBFFFFFFF/9FF?/;/BBFFFFF/;FFB/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\t3>>A@FFFFFFFGGGFEECFGGFFB5GBHH5DFH5GBEEAEFHFHHF3F3GHFHHHEF3GAEHBGFHFFEFFHHHHFFB31FGGEGFHGEHHHHHHHHHHHHHHHHHEEEEGHHHFFF3GF3FGF44BBGEHHHHGG2B/BGGHE</ECDFHHBF1DGBFBFGFH<1GHGDGGFDFE0/<--;-9./BBED;BFBD/BF9BFFFDBFDADD;FFF?->;B=.9.;.BBFFF..;A;/B/;B//;;//BBF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tBBCCCFFFCBCCGGGGGGGGGGHGHGHHGFGFGFHGGHHGHHHHHHHHFHHGGGGAGFBGHHHFBBGH5GDHH5EEEGEHEGFBF1DGFDGFGGGBBCEEGEHFEFDDHFBFHFD/@BGDGDHHGDCCFCD/C<->.ADDGE1GA<DBGFGHBG/..DGFCDGD.:0:.;CFGHEHBF.A-99CFGGFF0C0C0BF0;CA9/B:///;//BF/9B9?-..:;.;9.9A././;B//F.B?A////9;:/:/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tA>ABAFA?D@AFGGGGFGGGFGFHHHFFH4BCBGHHHHGFFF3G5BF3322EEAFHHHHHHAB5GHFHEHFHHH3BEEHFGF5@13FDF3GDGFHHFGHHHGHHHGFGGHHFCG//?/EGHHHG3F4BFFGHHHEDGFHHB/B/?FBF<@-9?BDEFFF?B--?DFFFB9FA>B;A.BFDB?AB.--@;-.FFAEFFFF9AE;DDFFFFB/9BFFFFFFFB:BF/BB/BFF//FFF-=--.99=--.9///\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tAAAAAFFFFFFFGGGGGGFGGGHHGGHHHGGGGGGHGHGDFGHFGGGGFHHHHHGGGGGGGGFHGDFGGGGHGG?@EFHGEFEHEGFHHHHHF2FEHHGHGDCEAD?GFDFGGHBGHHFEHHHHHHHHHDFGHGHHGBDFG0FFHFGGFHHH=GGBF-AACEHEHHGGGHHHGHHFHCCFEBB0FFFFFF/;0;;FFFBFE.AA0BF0??-AD/////;:BFFBFFBBBFFFFFB/.9ADDAD-D;-;=A-\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\t@?AAAFFBFBFFFGGFGFGGGEFCGGHHHHFGHGHFHGHHHHGGFGGFGHHGHGHHHHGHGFFHHGGGGGHHHHHHHHHBFHHEFHHHHHHGF?FAGHGFHHHGDGFHHGGGHGHFHHHGHHHGHHFHHGFFGFHHHGHHHHFFHHHHH/FGHHHHGHGHG<C???B=@ABBFEF@=-AFFFFFFBFAFFDFFFFA?AFFCFFABEFFFFFFFFF?FFFDFFBFF;FFEFFEFFFFFFFAF///9FF/BB/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tBBBBBFFFFFFFEGGGGGGGGGGHHHHHHHHGHGGHHHHGFGGG?HGGHHHHHHHGGHGFGHGEEGFHHHHHHHHHHHFHHFHHGGCGGGHHHHBFGFFHGGGEFGHHGFFEEFHGGDGEHFHHHGGGCCCGHHG?EGFGGGFED@D?CEDFHEHGHFFHFHHGCGG.:CGGD:AEDCG?C?BFFFGGG/CEFBFEFFF/;:BBB;CFGD.:/:B:BB/BFFFBBFBFFAA9A..9-9@:/./;B/9/:/;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1108:7626:10048\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGAA\tCCCCCFFFFFFFGGGGGGGGGGGHHHHEFEFHHGGGGGGHHHGEF?GGGGGGHHHHHHGGGEGEHHHHGGGGGGGGGGGGGGHHHHHHHHHHHHFFCGHGHHHHGG/BFGDGG2FFHFHGHH0FHFGFHHHHFFHHHHHHHGG<FHHHFGHHGGGGFHHHGGGGGGHGGHGGGHHHHHHFGGGGGGGFFFGGFGGBFGGGGGGGGGGGFGFFFCFFDFFFFFFFFF;./;AAAFFFFFFAFABBFFFB/;;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1108:7626:10048\t141\t*\t0\t0\t*\t*\t0\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTCTGGGGTCGGCGGATTT\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHHFGHHHHHHHHHHHHGHHHHGGFHHHFGGGGHHHGHHHHHHHHHHHFGHHHHHGHGHGHHGCGCGGFHHHGGGGGGGGGGGGGGGGGGGFFFAFFFFFFAA-AFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBFFDFFFFFB-<>;>@BE<:000.0.0/0<00<0:>..-<<<---.0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1109:11270:12255\t77\t*\t0\t0\t*\t*\t0\t0\tAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAGGTAGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTT\tCCCCCFFFFFFFGGGGGGGGGGGGHHHHFFFHHHGGGFGGFFHGEGCHHGGGGHHHHHHGGGGGGHHGHGGGGGGGGGCEGFCHHHHHGFHFHHHHGFHHGGFHGGGFD/EFGEFFDGFHHGEFCEHFFGHHHGHHHHHHHHHGCGHHHGGFGHHHHGHEHHCFFADGHHHD?CG.CGHBCBFBFFGGFFFGFFFFF.CFBFBCFFFFGFFFFFGGGFFFFFDFAFFFFFF-@DBFFFFBFD---.;BAA.\tYT:Z:UP\n@@ -179,6 +180,8 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n@@ -199,5 +202,3 @@\n M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH<1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 1, "time_seconds": 130.55703234672546, "inputs": {"library|input_1": {"src": "hdca", "id": "5588fe59cd2c9ade"}, "library|unaligned_file": true, "library|paired_options|paired_options_selector": "no", "library|type": "paired_collection", "reference_genome|own_file": {"src": "hda", "id": "0460e7cd2b84b12d"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "d165ac34bf4f54cf", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:55:01.664867", "create_time": "2022-10-22T16:53:21.446964", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-rjslp", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/9/6/3/dataset_9634154f-2dc5-426a-a0df-add1ee83de5b.dat' genome && ln -s -f '/galaxy/server/database/objects/9/6/3/dataset_9634154f-2dc5-426a-a0df-add1ee83de5b.dat' genome.fa &&   ln -s '/galaxy/server/database/objects/5/d/5/dataset_5d54d430-1083-4836-88a5-628b5c15b6e7.dat' input_f.fastq &&  ln -s '/galaxy/server/database/objects/d/9/b/dataset_d9b7e15c-c25c-4a8d-91ce-736a47d1a909.dat' input_r.fastq &&    bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq' --un-conc '/galaxy/server/database/objects/b/1/3/dataset_b136c876-4c32-4ec2-a2a7-ddef1c74d301.dat'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/e/5/8/dataset_e588c974-db21-44a7-b7da-96980fc89d39.dat'  && mv '/galaxy/server/database/objects/b/1/3/dataset_b136c876-4c32-4ec2-a2a7-ddef1c74d301.1.dat' '/galaxy/server/database/objects/b/1/3/dataset_b136c876-4c32-4ec2-a2a7-ddef1c74d301.dat' && mv '/galaxy/server/database/objects/b/1/3/dataset_b136c876-4c32-4ec2-a2a7-ddef1c74d301.2.dat' '/galaxy/server/database/objects/0/d/7/dataset_0d72653c-4722-48e4-b26c-d231a5ee0933.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 154, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 2, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 2, \"src\": \"hdca\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_collection\", \"unaligned_file\": \"true\"}"}, "inputs": {"input_11": {"id": "b9938bbaea56d461", "src": "hda", "uuid": "5d54d430-1083-4836-88a5-628b5c15b6e7"}, "input_12": {"id": "1617132b22fd13a9", "src": "hda", "uuid": "d9b7e15c-c25c-4a8d-91ce-736a47d1a909"}, "own_file": {"id": "0460e7cd2b84b12d", "src": "hda", "uuid": "9634154f-2dc5-426a-a0df-add1ee83de5b"}}, "outputs": {"output": {"id": "4ef8549b0b224ca1", "src": "hda", "uuid": "e588c974-db21-44a7-b7da-96980fc89d39"}, "output_unaligned_reads_r": {"id": "3bb820ab653caf40", "src": "hda", "uuid": "0d72653c-4722-48e4-b26c-d231a5ee0933"}, "output_unaligned_reads_l": {"id": "e600523fc5ca9ce9", "src": "hda", "uuid": "b136c876-4c32-4ec2-a2a7-ddef1c74d301"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/9/6/3/dataset_9634154f-2dc5-426a-a0df-add1ee83de5b.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 2: 20%\n  bucket 3: 40%\n  bucket 1: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 2: 30%\n  bucket 4: 50%\n  bucket 1: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 1: 60%\n  bucket 3: 70%\n  bucket 2: 40%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 1: 70%\n  bucket 4: 80%\n  bucket 2: 50%\n  bucket 3: 90%\n  bucket 1: 80%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 30\n  bucket 7: 20%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 8: 30%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 7: 90%\n  bucket 8: 50%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 60%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 70%\n  bucket 10: 10%\n  bucket 9: 80%\n  bucket 10: 20%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\nGetting block 12 of 30\n  bucket 11: 20%\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 12: 50%\n  bucket 11: 90%\n  bucket 12: 60%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\nGetting block 14 of 30\n  bucket 13: 90%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 10%\n  bucket 14: 20%\n  Sorting block time: 00:00:00\n  bucket 14: 30%\nReturning block of 598 for bucket 13\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 50%\n  bucket 16: 10%\n  bucket 15: 60%\n  bucket 16: 20%\n  bucket 15: 70%\n  bucket 16: 30%\n  bucket 15: 80%\n  bucket 16: 40%\n  bucket 15: 90%\n  bucket 16: 50%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 30\n  Entering block accumulator loop for bucket 19:\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  bucket 21: 10%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 22: 20%\n  bucket 21: 60%\n  bucket 22: 30%\n  bucket 21: 70%\n  bucket 22: 40%\n  bucket 21: 80%\n  bucket 22: 50%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 60%\n  bucket 22: 70%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\nGetting block 24 of 30\n  Calculating Z arrays for bucket 23\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 25: 70%\n  bucket 26: 80%\n  bucket 25: 80%\n  bucket 26: 90%\n  bucket 25: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\nGetting block 30 of 30\n  bucket 29: 20%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 29: 40%\n  bucket 30: 20%\n  bucket 29: 50%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 60%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 70%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 29: 80%\n  bucket 30: 90%\n  bucket 29: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\n  bucket 1: 10%\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  bucket 1: 20%\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 1: 30%\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 1: 70%\n  bucket 2: 20%\n  bucket 4: 30%\n  bucket 1: 80%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 4: 40%\n  bucket 1: 90%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 2: 60%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 2: 70%\n  bucket 4: 90%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\n  bucket 5: 20%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 7\nGetting block 8 of 30\n  Calculating Z arrays for bucket 7\n  bucket 5: 40%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 10%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 8: 10%\n  bucket 5: 70%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 8: 20%\n  bucket 5: 80%\n  bucket 8: 30%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 5: 90%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 5: 100%\n  bucket 6: 60%\n  bucket 7: 60%\n  Sorting block of length 776 for bucket 5\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 6: 70%\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 7: 80%\n  bucket 8: 90%\n  bucket 7: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\nGetting block 11 of 30\n  Calculating Z arrays for bucket 10\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 30\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 10: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 10: 20%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 10: 30%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 10: 40%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 10: 50%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 10: 60%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\nGetting block 15 of 30\n  bucket 14: 50%\n  Reserving size (777) for bucket 15\nGetting block 16 of 30\n  Calculating Z arrays for bucket 15\n  bucket 14: 60%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 14: 70%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 14: 80%\n  bucket 16: 40%\n  bucket 14: 90%\n  bucket 16: 50%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 15: 10%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 15: 20%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\nGetting block 23 of 30\n  Calculating Z arrays for bucket 22\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 22: 10%\n  bucket 23: 20%\n  bucket 22: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 22: 30%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 22: 40%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 22: 50%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 24 of 30\nGetting block 25 of 30\n  Reserving size (777) for bucket 24\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 24\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 24: 60%\n  bucket 25: 70%\n  bucket 24: 70%\n  bucket 25: 80%\n  bucket 24: 80%\n  bucket 25: 90%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 30\n  bucket 26: 20%\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 26: 80%\n  bucket 27: 90%\n  bucket 26: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\nGetting block 29 of 30\n  bucket 28: 100%\n  Reserving size (777) for bucket 29\n  Sorting block of length 631 for bucket 28\n  Calculating Z arrays for bucket 29\n  (Using difference cover)\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/9/6/3/dataset_9634154f-2dc5-426a-a0df-add1ee83de5b.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 2: 20%\n  bucket 3: 40%\n  bucket 1: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 2: 30%\n  bucket 4: 50%\n  bucket 1: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 1: 60%\n  bucket 3: 70%\n  bucket 2: 40%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 1: 70%\n  bucket 4: 80%\n  bucket 2: 50%\n  bucket 3: 90%\n  bucket 1: 80%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 30\n  bucket 7: 20%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 8: 30%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 7: 90%\n  bucket 8: 50%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 60%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 70%\n  bucket 10: 10%\n  bucket 9: 80%\n  bucket 10: 20%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\nGetting block 12 of 30\n  bucket 11: 20%\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 12: 50%\n  bucket 11: 90%\n  bucket 12: 60%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\nGetting block 14 of 30\n  bucket 13: 90%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 10%\n  bucket 14: 20%\n  Sorting block time: 00:00:00\n  bucket 14: 30%\nReturning block of 598 for bucket 13\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 50%\n  bucket 16: 10%\n  bucket 15: 60%\n  bucket 16: 20%\n  bucket 15: 70%\n  bucket 16: 30%\n  bucket 15: 80%\n  bucket 16: 40%\n  bucket 15: 90%\n  bucket 16: 50%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 30\n  Entering block accumulator loop for bucket 19:\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  bucket 21: 10%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 22: 20%\n  bucket 21: 60%\n  bucket 22: 30%\n  bucket 21: 70%\n  bucket 22: 40%\n  bucket 21: 80%\n  bucket 22: 50%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 60%\n  bucket 22: 70%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\nGetting block 24 of 30\n  Calculating Z arrays for bucket 23\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 25: 70%\n  bucket 26: 80%\n  bucket 25: 80%\n  bucket 26: 90%\n  bucket 25: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\nGetting block 30 of 30\n  bucket 29: 20%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 29: 40%\n  bucket 30: 20%\n  bucket 29: 50%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 60%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 70%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 29: 80%\n  bucket 30: 90%\n  bucket 29: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\n  bucket 1: 10%\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  bucket 1: 20%\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 1: 30%\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 1: 70%\n  bucket 2: 20%\n  bucket 4: 30%\n  bucket 1: 80%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 4: 40%\n  bucket 1: 90%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 2: 60%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 2: 70%\n  bucket 4: 90%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\n  bucket 5: 20%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 7\nGetting block 8 of 30\n  Calculating Z arrays for bucket 7\n  bucket 5: 40%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 10%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 8: 10%\n  bucket 5: 70%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 8: 20%\n  bucket 5: 80%\n  bucket 8: 30%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 5: 90%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 5: 100%\n  bucket 6: 60%\n  bucket 7: 60%\n  Sorting block of length 776 for bucket 5\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 6: 70%\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 7: 80%\n  bucket 8: 90%\n  bucket 7: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\nGetting block 11 of 30\n  Calculating Z arrays for bucket 10\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 30\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 10: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 10: 20%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 10: 30%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 10: 40%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 10: 50%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 10: 60%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\nGetting block 15 of 30\n  bucket 14: 50%\n  Reserving size (777) for bucket 15\nGetting block 16 of 30\n  Calculating Z arrays for bucket 15\n  bucket 14: 60%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 14: 70%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 14: 80%\n  bucket 16: 40%\n  bucket 14: 90%\n  bucket 16: 50%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 15: 10%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 15: 20%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\nGetting block 23 of 30\n  Calculating Z arrays for bucket 22\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 22: 10%\n  bucket 23: 20%\n  bucket 22: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 22: 30%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 22: 40%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 22: 50%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 24 of 30\nGetting block 25 of 30\n  Reserving size (777) for bucket 24\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 24\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 24: 60%\n  bucket 25: 70%\n  bucket 24: 70%\n  bucket 25: 80%\n  bucket 24: 80%\n  bucket 25: 90%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 30\n  bucket 26: 20%\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 26: 80%\n  bucket 27: 90%\n  bucket 26: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\nGetting block 29 of 30\n  bucket 28: 100%\n  Reserving size (777) for bucket 29\n  Sorting block of length 631 for bucket 28\n  Calculating Z arrays for bucket 29\n  (Using difference cover)\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:54:46", "plugin": "core", "name": "end_epoch", "raw_value": "1666457686.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:54:45", "plugin": "core", "name": "start_epoch", "raw_value": "1666457685.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam__dr8d594.sam v. /tmp/history_bam_converted_to_sam_pojw98is.sam )\n--- local_file\n+++ history_data\n@@ -1,30 +1,31 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome --passthrough -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/119/tmp -O bam -o /galaxy/server/database/objects/e/5/8/dataset_e588c974-db21-44a7-b7da-96980fc89d39.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1106:6455:17124\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBAAFABDBBFGGGGGGGGGGHHHGHHGHHHHHHHHHGHHGHHGHHHGHGGGEGHHHHHHHHHHHHHGHHHGHHHGGHGGHHHHHHHHHHHHHHHHHHGHHHHHHHHGHHHHHGGCFEHHHGFHHHHGHHFFH?GGHHHHGHGHGHHCFGGGGGGGFFFFFFFFFFFFFFFFFFFFADFA?.FEFAFFFEFFFFFFFFFFFFDABFBBFFFFFFFFEFFBFFFFFFFFFFF/FFBFFFFFFADE>BFFF9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3>AAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tBBBBAFFFFFFFGGGGGGGFGGHHHHHHHHFHHHFHHHHGHHHHHHHHGHHHGHHEGHHHGDGCHHHHHHHHHGEHEHHHHHHHFHGGEGGHHHHHHHGEGHGHHDHHHHHHHHEHFHGHGHHHGEGCEHHFHHHGHHHHHHHF?GHHHFEFFAFFHHGG?;@DDFFB?@B;BDAFFFEBBD>D>D9@DDCFFFFFFCFDFE.AA;/BB/.;-.;BFBBBFFBFFFFFFF/9FF?/;/BBFFFFF/;FFB/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\t3>>A@FFFFFFFGGGFEECFGGFFB5GBHH5DFH5GBEEAEFHFHHF3F3GHFHHHEF3GAEHBGFHFFEFFHHHHFFB31FGGEGFHGEHHHHHHHHHHHHHHHHHEEEEGHHHFFF3GF3FGF44BBGEHHHHGG2B/BGGHE</ECDFHHBF1DGBFBFGFH<1GHGDGGFDFE0/<--;-9./BBED;BFBD/BF9BFFFDBFDADD;FFF?->;B=.9.;.BBFFF..;A;/B/;B//;;//BBF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tBBCCCFFFCBCCGGGGGGGGGGHGHGHHGFGFGFHGGHHGHHHHHHHHFHHGGGGAGFBGHHHFBBGH5GDHH5EEEGEHEGFBF1DGFDGFGGGBBCEEGEHFEFDDHFBFHFD/@BGDGDHHGDCCFCD/C<->.ADDGE1GA<DBGFGHBG/..DGFCDGD.:0:.;CFGHEHBF.A-99CFGGFF0C0C0BF0;CA9/B:///;//BF/9B9?-..:;.;9.9A././;B//F.B?A////9;:/:/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tA>ABAFA?D@AFGGGGFGGGFGFHHHFFH4BCBGHHHHGFFF3G5BF3322EEAFHHHHHHAB5GHFHEHFHHH3BEEHFGF5@13FDF3GDGFHHFGHHHGHHHGFGGHHFCG//?/EGHHHG3F4BFFGHHHEDGFHHB/B/?FBF<@-9?BDEFFF?B--?DFFFB9FA>B;A.BFDB?AB.--@;-.FFAEFFFF9AE;DDFFFFB/9BFFFFFFFB:BF/BB/BFF//FFF-=--.99=--.9///\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tAAAAAFFFFFFFGGGGGGFGGGHHGGHHHGGGGGGHGHGDFGHFGGGGFHHHHHGGGGGGGGFHGDFGGGGHGG?@EFHGEFEHEGFHHHHHF2FEHHGHGDCEAD?GFDFGGHBGHHFEHHHHHHHHHDFGHGHHGBDFG0FFHFGGFHHH=GGBF-AACEHEHHGGGHHHGHHFHCCFEBB0FFFFFF/;0;;FFFBFE.AA0BF0??-AD/////;:BFFBFFBBBFFFFFB/.9ADDAD-D;-;=A-\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\t@?AAAFFBFBFFFGGFGFGGGEFCGGHHHHFGHGHFHGHHHHGGFGGFGHHGHGHHHHGHGFFHHGGGGGHHHHHHHHHBFHHEFHHHHHHGF?FAGHGFHHHGDGFHHGGGHGHFHHHGHHHGHHFHHGFFGFHHHGHHHHFFHHHHH/FGHHHHGHGHG<C???B=@ABBFEF@=-AFFFFFFBFAFFDFFFFA?AFFCFFABEFFFFFFFFF?FFFDFFBFF;FFEFFEFFFFFFFAF///9FF/BB/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tBBBBBFFFFFFFEGGGGGGGGGGHHHHHHHHGHGGHHHHGFGGG?HGGHHHHHHHGGHGFGHGEEGFHHHHHHHHHHHFHHFHHGGCGGGHHHHBFGFFHGGGEFGHHGFFEEFHGGDGEHFHHHGGGCCCGHHG?EGFGGGFED@D?CEDFHEHGHFFHFHHGCGG.:CGGD:AEDCG?C?BFFFGGG/CEFBFEFFF/;:BBB;CFGD.:/:B:BB/BFFFBBFBFFAA9A..9-9@:/./;B/9/:/;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1108:7626:10048\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGAA\tCCCCCFFFFFFFGGGGGGGGGGGHHHHEFEFHHGGGGGGHHHGEF?GGGGGGHHHHHHGGGEGEHHHHGGGGGGGGGGGGGGHHHHHHHHHHHHFFCGHGHHHHGG/BFGDGG2FFHFHGHH0FHFGFHHHHFFHHHHHHHGG<FHHHFGHHGGGGFHHHGGGGGGHGGHGGGHHHHHHFGGGGGGGFFFGGFGGBFGGGGGGGGGGGFGFFFCFFDFFFFFFFFF;./;AAAFFFFFFAFABBFFFB/;;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1108:7626:10048\t141\t*\t0\t0\t*\t*\t0\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTCTGGGGTCGGCGGATTT\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHHFGHHHHHHHHHHHHGHHHHGGFHHHFGGGGHHHGHHHHHHHHHHHFGHHHHHGHGHGHHGCGCGGFHHHGGGGGGGGGGGGGGGGGGGFFFAFFFFFFAA-AFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBFFDFFFFFB-<>;>@BE<:000.0.0/0<00<0:>..-<<<---.0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1109:11270:12255\t77\t*\t0\t0\t*\t*\t0\t0\tAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAGGTAGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTT\tCCCCCFFFFFFFGGGGGGGGGGGGHHHHFFFHHHGGGFGGFFHGEGCHHGGGGHHHHHHGGGGGGHHGHGGGGGGGGGCEGFCHHHHHGFHFHHHHGFHHGGFHGGGFD/EFGEFFDGFHHGEFCEHFFGHHHGHHHHHHHHHGCGHHHGGFGHHHHGHEHHCFFADGHHHD?CG.CGHBCBFBFFGGFFFGFFFFF.CFBFBCFFFFGFFFFFGGGFFFFFDFAFFFFFF-@DBFFFFBFD---.;BAA.\tYT:Z:UP\n@@ -179,6 +180,8 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n@@ -199,5 +202,3 @@\n M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH<1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 2, "time_seconds": 119.16543889045715, "inputs": {"library|input_1": {"src": "hda", "id": "b9938bbaea56d461"}, "library|input_2": {"src": "hda", "id": "1617132b22fd13a9"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "0460e7cd2b84b12d"}, "reference_genome|source": "history", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "7804f60e49eafe69", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:55:01.283840", "create_time": "2022-10-22T16:53:30.152827", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-j2fmf", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/9/6/3/dataset_9634154f-2dc5-426a-a0df-add1ee83de5b.dat' genome && ln -s -f '/galaxy/server/database/objects/9/6/3/dataset_9634154f-2dc5-426a-a0df-add1ee83de5b.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/5/d/5/dataset_5d54d430-1083-4836-88a5-628b5c15b6e7.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/d/9/b/dataset_d9b7e15c-c25c-4a8d-91ce-736a47d1a909.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/c/6/d/dataset_c6d25b79-676a-4d47-a50d-be65127239f1.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 154, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 152, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 153, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "b9938bbaea56d461", "src": "hda", "uuid": "5d54d430-1083-4836-88a5-628b5c15b6e7"}, "input_2": {"id": "1617132b22fd13a9", "src": "hda", "uuid": "d9b7e15c-c25c-4a8d-91ce-736a47d1a909"}, "own_file": {"id": "0460e7cd2b84b12d", "src": "hda", "uuid": "9634154f-2dc5-426a-a0df-add1ee83de5b"}}, "outputs": {"output": {"id": "b1fd97f80fde1279", "src": "hda", "uuid": "c6d25b79-676a-4d47-a50d-be65127239f1"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/9/6/3/dataset_9634154f-2dc5-426a-a0df-add1ee83de5b.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 2: 20%\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 2: 30%\n  bucket 3: 50%\n  bucket 1: 30%\n  bucket 2: 40%\n  bucket 3: 60%\n  bucket 4: 20%\n  bucket 2: 50%\n  bucket 3: 70%\n  bucket 1: 40%\n  bucket 3: 80%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 1: 50%\n  bucket 3: 90%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 1: 60%\n  bucket 2: 90%\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  bucket 4: 60%\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\n  bucket 4: 70%\nReturning block of 690 for bucket 1\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\nGetting block 8 of 30\n  Calculating Z arrays for bucket 7\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 7: 40%\n  bucket 8: 60%\n  bucket 7: 50%\n  bucket 8: 70%\n  bucket 7: 60%\n  bucket 8: 80%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 90%\n  bucket 7: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\nGetting block 10 of 30\n  bucket 9: 60%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 70%\n  bucket 10: 10%\n  bucket 9: 80%\n  bucket 10: 20%\n  bucket 9: 90%\n  bucket 10: 30%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  Sorting block time: 00:00:00\n  bucket 10: 80%\nReturning block of 547 for bucket 9\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 30\n  bucket 11: 40%\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 60%\n  bucket 12: 10%\n  bucket 11: 70%\n  bucket 12: 20%\n  bucket 11: 80%\n  bucket 12: 30%\n  bucket 11: 90%\n  bucket 12: 40%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 15: 40%\n  bucket 16: 70%\n  bucket 15: 50%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 15: 60%\n  bucket 15: 70%\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\nGetting block 20 of 30\n  Reserving size (777) for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 19\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 30%\n  bucket 20: 50%\n  bucket 19: 40%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 19: 60%\n  bucket 20: 80%\n  bucket 19: 70%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 22: 10%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 22: 30%\n  bucket 21: 90%\n  bucket 22: 40%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 50%\n  bucket 22: 60%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 30\n  bucket 26: 10%\n  Reserving size (777) for bucket 27\n  bucket 26: 20%\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 26: 50%\n  bucket 27: 40%\n  bucket 26: 60%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 26: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 1: 90%\n  bucket 3: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 4: 60%\n  bucket 2: 90%\n  bucket 4: 70%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\nGetting block 6 of 30\n  bucket 5: 50%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 60%\n  bucket 6: 10%\n  bucket 5: 70%\n  bucket 6: 20%\n  bucket 5: 80%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 90%\n  bucket 6: 50%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  bucket 6: 60%\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 30\n  bucket 7: 10%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 30%\n  bucket 8: 10%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 8: 50%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 30\n  bucket 11: 10%\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\nGetting block 16 of 30\n  bucket 15: 30%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 16: 10%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 16: 20%\n  bucket 15: 90%\n  bucket 15: 100%\n  bucket 16: 30%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 40%\n  bucket 16: 50%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\nGetting block 18 of 30\n  bucket 17: 30%\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  bucket 18: 90%\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\nGetting block 20 of 30\n  Calculating Z arrays for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  Entering block accumulator loop for bucket 19:\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 19: 10%\n  bucket 20: 40%\n  bucket 19: 20%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 30%\n  bucket 20: 70%\n  bucket 19: 40%\n  bucket 20: 80%\n  bucket 19: 50%\n  bucket 20: 90%\n  bucket 19: 60%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 21: 100%\n  bucket 22: 80%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\nGetting block 24 of 30\n  bucket 23: 100%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\nGetting block 28 of 30\n  Calculating Z arrays for bucket 27\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 27: 80%\n  bucket 28: 90%\n  bucket 27: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/9/6/3/dataset_9634154f-2dc5-426a-a0df-add1ee83de5b.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 2: 20%\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 2: 30%\n  bucket 3: 50%\n  bucket 1: 30%\n  bucket 2: 40%\n  bucket 3: 60%\n  bucket 4: 20%\n  bucket 2: 50%\n  bucket 3: 70%\n  bucket 1: 40%\n  bucket 3: 80%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 1: 50%\n  bucket 3: 90%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 1: 60%\n  bucket 2: 90%\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  bucket 4: 60%\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\n  bucket 4: 70%\nReturning block of 690 for bucket 1\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\nGetting block 8 of 30\n  Calculating Z arrays for bucket 7\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 7: 40%\n  bucket 8: 60%\n  bucket 7: 50%\n  bucket 8: 70%\n  bucket 7: 60%\n  bucket 8: 80%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 90%\n  bucket 7: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\nGetting block 10 of 30\n  bucket 9: 60%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 70%\n  bucket 10: 10%\n  bucket 9: 80%\n  bucket 10: 20%\n  bucket 9: 90%\n  bucket 10: 30%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  Sorting block time: 00:00:00\n  bucket 10: 80%\nReturning block of 547 for bucket 9\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 30\n  bucket 11: 40%\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 60%\n  bucket 12: 10%\n  bucket 11: 70%\n  bucket 12: 20%\n  bucket 11: 80%\n  bucket 12: 30%\n  bucket 11: 90%\n  bucket 12: 40%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 15: 40%\n  bucket 16: 70%\n  bucket 15: 50%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 15: 60%\n  bucket 15: 70%\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\nGetting block 20 of 30\n  Reserving size (777) for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 19\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 30%\n  bucket 20: 50%\n  bucket 19: 40%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 19: 60%\n  bucket 20: 80%\n  bucket 19: 70%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 22: 10%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 22: 30%\n  bucket 21: 90%\n  bucket 22: 40%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 50%\n  bucket 22: 60%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 30\n  bucket 26: 10%\n  Reserving size (777) for bucket 27\n  bucket 26: 20%\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 26: 50%\n  bucket 27: 40%\n  bucket 26: 60%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 26: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 1: 90%\n  bucket 3: 90%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 4: 60%\n  bucket 2: 90%\n  bucket 4: 70%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\nGetting block 6 of 30\n  bucket 5: 50%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 60%\n  bucket 6: 10%\n  bucket 5: 70%\n  bucket 6: 20%\n  bucket 5: 80%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 90%\n  bucket 6: 50%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  bucket 6: 60%\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\nGetting block 8 of 30\n  bucket 7: 10%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 30%\n  bucket 8: 10%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 8: 50%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 30\n  bucket 11: 10%\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\nGetting block 16 of 30\n  bucket 15: 30%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 16: 10%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 16: 20%\n  bucket 15: 90%\n  bucket 15: 100%\n  bucket 16: 30%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 40%\n  bucket 16: 50%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\nGetting block 18 of 30\n  bucket 17: 30%\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  bucket 18: 90%\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\nGetting block 20 of 30\n  Calculating Z arrays for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  Entering block accumulator loop for bucket 19:\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 19: 10%\n  bucket 20: 40%\n  bucket 19: 20%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 30%\n  bucket 20: 70%\n  bucket 19: 40%\n  bucket 20: 80%\n  bucket 19: 50%\n  bucket 20: 90%\n  bucket 19: 60%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 21: 100%\n  bucket 22: 80%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\nGetting block 24 of 30\n  bucket 23: 100%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\nGetting block 28 of 30\n  Calculating Z arrays for bucket 27\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 27: 80%\n  bucket 28: 90%\n  bucket 27: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:54:46", "plugin": "core", "name": "end_epoch", "raw_value": "1666457686.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:54:45", "plugin": "core", "name": "start_epoch", "raw_value": "1666457685.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_eew0fi4i.sam v. /tmp/history_bam_converted_to_sam_nsoxvg29.sam )\n--- local_file\n+++ history_data\n@@ -1,31 +1,32 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n @RG\tID:rg1\tPL:CAPILLARY\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome --rg-id rg1 --rg PL:CAPILLARY -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome --rg-id rg1 --rg PL:CAPILLARY -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/120/tmp -O bam -o /galaxy/server/database/objects/c/6/d/dataset_c6d25b79-676a-4d47-a50d-be65127239f1.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3>AAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\tRG:Z:rg1\n********\n*SNIP *\n********\n M01368:8:000000000-A3GHV:1:1108:11059:23181\t165\tchrM\t2\t0\t*\t=\t2\t0\tAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACC\tCCCCCFFFFFCCGGGGGGGGGGHHHHHHHHHHHGHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHHHHHHHHHHHHHGHGHEHHGFCGGGHHHHHHHHHHHHHHHFGHHHHHGHGHGHHGGGBFGFFFFEAFFFA.BFFFEFDDFFFFFFFFFFEEFF;D;EFFFFFF0BFFFADDFFFFFBFBFFFFFBB0FFFF0::0BF000BFFFBBF0EDFF@\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1108:25084:18127\t161\tchrM\t2\t8\t4M24I223M\t=\t1\t-238\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tCCCCCFFFFFFFGGGGGGGGGGGGHHHHHHHHFHHHHHHHHHHHHHHGGHHGHHHHHGGGGFHHHHHFHHHHHHHHHGGHHHHHCGGHGHHGGGGGGGHHGGGGGGGGHHHGHHGGGGGGGGGGGGGGGG@CDE?EFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFE;DFBFFFFFFFFFFFFFFFFFFFAFFFFFFFBFFE0BBBFFFFFFFFFFBFFFF9BB0:0:B;\tAS:i:-97\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYS:i:-65\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M2I15M\t=\t1\t-246\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tCCCCCFFFFFFCGGGGGGGGGGHHHHHHHHHFFHHHHGGGGGHFFFHHFHHHHHHHHHHHHHHHGFEGGGHGEDFCDFHGHFG@@DGGHHHHHHGGGGCGGGGGEHGGCGBB?CF99EGFGGFGG?D9CFFFF/BBFFFFFEF9BFFAFFFFEFFFFFFFFFFFFFFFFFFFFF.FFBBFFFFFFFFFFFF-9;;;BFFFFFB9BFBFBFABFFEFFFFFFFFFF::BFFBFFFF.9//;FFFFF/BFFB/\tAS:i:-78\tXN:i:0\tXM:i:12\tXO:i:2\tXG:i:6\tNM:i:18\tMD:Z:2C0A67A115A42A0T0A0A1A3A0C0A3\tYS:i:-78\tYT:Z:DP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1110:23303:11846\t101\tchrM\t2\t0\t*\t=\t2\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGTGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTC\t3ABB?FAB?DAAGGGFBGGBB5AFFFGFHHGGGEGHHHFHHF3EGFHHHHEFHHGGHHHGH3EFHHHHHBDGHHE?ECHGHGHHHHHHFHHHGHHHHHHHGGHGGFHHHFHHGFFHHFEGFHHHHHHEHHFDAGHHHH/BDDFGGH1FDBGHHHHHHHCGHHHFH?0CGCF>CC=@--AFBFFB?=BFDFFF//FDB;-9A-AD-.A.A=?-9-:B/AEB/BFF.A;DDFFFBBFFFF/BBFFFFBFF9B;\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1111:14287:20817\t97\tchrM\t2\t8\t2M36I213M\t=\t1\t-250\tGCCAACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTCATCGCACCTACGTTCACTATTACAGGCGAACATACTTATTAAAGTGTGTTAATTAAT\t>>A3>AAAACFFFGFGFGGGGGHGHHHHHHHGGGGGHGHFFCGHHGBGHFHHHHAGHHHHEHHAGFFEHEAE?GHHHHEGFFFDGHGHBFFHFHHHGHGHGHBECG@@@EHGGEGCGGGGFFGGGG?BGGGGGG.-C.FEDCFFFEFFFAF/99BEFA.:9BFB/9FFFEFFFFFFEFFF/FBBFFFFFFFFFFFB//;.@@//;DFFFF//BBFFFBF;A;DF=>B//;9B//B/;/;9//9//;B/:B9\tAS:i:-137\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:36\tNM:i:42\tMD:Z:0A0T69A85T16A21C18\tYS:i:-32\tYT:Z:DP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1111:23624:14516\t165\tchrM\t2\t0\t*\t=\t2\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACCCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tBBBBABFFFFFFGGGGGGGGGGHHCGHHHHHHHGHHHHHHHHHHHGDGEHHHHHHGHHHHHHHHHHHHHHHGGEFGHHHHHHHHBGFHHHHHHHHHHHHHHGHGGGGCEFGGCGHHHHFHHHHGHHHHFGHHHHHHGHGHGHHBCA?B-9FGFG?D;BD?9BFFFFFFF;DFFFF-.A;ADF-@=EF??A.BFFFEF>FDFFFFFFFFFFFBFFFFFFFFFFF/FFF/BFFFFFFFBA.?@;FFBDFFFF/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M2I15M\t=\t1\t-246\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tCCCCCFFFFFFCGGGGGGGGGGHHHHHHHHHFFHHHHGGGGGHFFFHHFHHHHHHHHHHHHHHHGFEGGGHGEDFCDFHGHFG@@DGGHHHHHHGGGGCGGGGGEHGGCGBB?CF99EGFGGFGG?D9CFFFF/BBFFFFFEF9BFFAFFFFEFFFFFFFFFFFFFFFFFFFFF.FFBBFFFFFFFFFFFF-9;;;BFFFFFB9BFBFBFABFFEFFFFFFFFFF::BFFBFFFF.9//;FFFFF/BFFB/\tAS:i:-78\tXN:i:0\tXM:i:12\tXO:i:2\tXG:i:6\tNM:i:18\tMD:Z:2C0A67A115A42A0T0A0A1A3A0C0A3\tYS:i:-78\tYT:Z:DP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t83\tchrM\t2\t40\t1M10I240M\t=\t1\t-242\tATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAAC\t//A:D9/FBFFFFFB;//FFBA@:..BFFFFFA0A;;D;:.GGFBFEC//BAGFBEGGGFFGHFHCDC@CC.ACGCCDCGF1.?GDCA/HHHGHGGGCGGHGGDGGGHGDGDCGGHHGEGHFHFGGGGEGHHHHHHGHHHHGFHHGHFGGGGHHBFHHHHHHHHGGGFHEEGB5EFHFGHHGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHGCGHHHHHHHGHHHHGGHGGGGGGGGGGFFFFFFFAAAAA\tAS:i:-41\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:14A56A169\tYS:i:-45\tYT:Z:CP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:5446:12248\t89\tchrM\t2\t0\t4M39I208M\t=\t2\t0\tATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATT\tFFFEFFFFFEFFFFFFBFFFFFFFFFFBFFFFFFFFFGGFFFFGGGGGGGF?;/GGGGGEGE;EF:GGGGGGHHHHGGGHFHHHHHHHHHHHHHGGGGGGHGGGGGGGHHGHGGGGGGHHHHHHGGGGHHGGFGHHHGGGGGGHHHGFFHHHHGGGGGHHHHHHHHHGHHHHHHHHGGGGGHGHGHHHHHHHHHHGGHGGHGBGHHHHHHHHHHHHHHHHGGGGHHHHHGFGGGGGGGGFCCFFFFDCCCC\tAS:i:-137\tXN:i:0\tXM:i:3\tXO:i:1\tXG:i:39\tNM:i:42\tMD:Z:2C0A67A140\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1102:18842:24844\t153\tchrM\t2\t3\t4M24I223M\t=\t2\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tFB:/BFFBFF;////FA9.FFFBFFFFFFFF9FBB/.A/FEF09FGEC?C9DEGFGEFEGGGFFFGFFGGHFCHHHFFHFDD@-EA?CFGGGGHHHHGDACDFEHHHHHGGGGHHGGGGHHHGGGGGGHGGCEFGHHHGGGGGHHHHHHHHHHHGFHHHFHGGGGGHHGHHHHHHGHHHHGGHGGHHHGHGHHHHHFHHHHHHHHGGGGHHHHHHHHHHHHHHHHGHHHGGGGGGGGGGFFFFBFFBCCCC\tAS:i:-95\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYT:Z:UP\tRG:Z:rg1\n@@ -180,6 +181,8 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\tRG:Z:rg1\n@@ -200,5 +203,3 @@\n M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH<1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\tRG:Z:rg1\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 3, "time_seconds": 103.29515290260315, "inputs": {"library|input_1": {"src": "hda", "id": "1c60af6e1bf58737"}, "library|input_2": {"src": "hda", "id": "3d63732ba61d003f"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "6a835735f7f58a3a"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "save_mapping_stats": true}, "job": {"model_class": "Job", "id": "fdacce0199ccf531", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:55:57.006810", "create_time": "2022-10-22T16:54:34.200465", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-bzcg5", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/b/3/5/dataset_b35f4ebd-7820-48e8-949e-289147ca40a9.dat' genome && ln -s -f '/galaxy/server/database/objects/b/3/5/dataset_b35f4ebd-7820-48e8-949e-289147ca40a9.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/7/a/c/dataset_7ac6cd67-41dc-42b5-bd54-5566e4d1d898.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/0/1/b/dataset_01b7b620-e82f-4c5b-9159-a8fbe9a75a2f.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                2> '/galaxy/server/database/objects/2/a/f/dataset_2af31c0e-e884-45d5-b779-6e9f428392aa.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/0/1/7/dataset_017ffd9c-2daa-4923-a436-3528a8e0b870.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"true\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 162, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 160, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 161, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "1c60af6e1bf58737", "src": "hda", "uuid": "7ac6cd67-41dc-42b5-bd54-5566e4d1d898"}, "input_2": {"id": "3d63732ba61d003f", "src": "hda", "uuid": "01b7b620-e82f-4c5b-9159-a8fbe9a75a2f"}, "own_file": {"id": "6a835735f7f58a3a", "src": "hda", "uuid": "b35f4ebd-7820-48e8-949e-289147ca40a9"}}, "outputs": {"mapping_stats": {"id": "1f1cc3143f81345a", "src": "hda", "uuid": "2af31c0e-e884-45d5-b779-6e9f428392aa"}, "output": {"id": "056653edda57a6c4", "src": "hda", "uuid": "017ffd9c-2daa-4923-a436-3528a8e0b870"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/b/3/5/dataset_b35f4ebd-7820-48e8-949e-289147ca40a9.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 4: 40%\n  bucket 1: 80%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 1: 90%\n  bucket 3: 40%\n  bucket 1: 100%\n  bucket 2: 50%\n  Sorting block of length 689 for bucket 1\n  bucket 4: 60%\n  bucket 3: 50%\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 4: 80%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  bucket 3: 80%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nReturning block of 446 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\n  bucket 5: 20%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\nGetting block 7 of 30\n  bucket 5: 80%\n  bucket 6: 80%\n  Reserving size (777) for bucket 7\nGetting block 8 of 30\n  Calculating Z arrays for bucket 7\n  bucket 6: 90%\n  bucket 5: 90%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 100%\n  Entering block accumulator loop for bucket 8:\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  bucket 9: 10%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\nGetting block 12 of 30\n  bucket 11: 20%\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 30%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 40%\n  bucket 16: 10%\n  bucket 15: 50%\n  bucket 16: 20%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 15: 70%\n  bucket 16: 40%\n  bucket 15: 80%\n  bucket 16: 50%\n  bucket 15: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\nGetting block 20 of 30\n  Calculating Z arrays for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 22: 30%\n  bucket 21: 70%\n  bucket 22: 40%\n  bucket 21: 80%\n  bucket 22: 50%\n  bucket 21: 90%\n  bucket 22: 60%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  Sorting block time: 00:00:00\n  bucket 22: 100%\nReturning block of 22 for bucket 21\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 60%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 70%\n  bucket 24: 10%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 30\n  bucket 25: 20%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 25: 50%\n  bucket 26: 20%\n  bucket 25: 60%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\nGetting block 30 of 30\n  bucket 29: 40%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 50%\n  bucket 30: 30%\n  bucket 29: 60%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 70%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 29: 80%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Reserving size (777) for bucket 2\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 3: 60%\n  bucket 4: 30%\n  bucket 3: 70%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 1: 50%\n  bucket 4: 50%\n  bucket 2: 50%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 3: 100%\n  bucket 1: 60%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 4: 70%\n  bucket 1: 70%\n  bucket 4: 80%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 1: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\nGetting block 7 of 30\n  bucket 5: 30%\n  bucket 6: 20%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 7: 10%\n  bucket 6: 40%\n  bucket 7: 20%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 6: 90%\n  bucket 7: 80%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\nGetting block 11 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 9: 20%\n  bucket 11: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 11: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 11: 40%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 11: 50%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 11: 60%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 11: 70%\n  bucket 9: 80%\n  bucket 11: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 11: 90%\n  bucket 10: 80%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 9: 100%\n  bucket 10: 90%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\nGetting block 14 of 30\n  bucket 13: 60%\n  Reserving size (777) for bucket 14\nGetting block 15 of 30\n  Calculating Z arrays for bucket 14\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 13: 90%\n  bucket 15: 20%\n  bucket 14: 20%\n  bucket 15: 30%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 30%\n  bucket 15: 40%\n  bucket 14: 40%\n  bucket 15: 50%\n  bucket 14: 50%\n  bucket 15: 60%\n  bucket 14: 60%\n  bucket 15: 70%\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  bucket 14: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 14: 80%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  bucket 14: 90%\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 30%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 19: 30%\n  bucket 18: 70%\n  bucket 19: 40%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 19: 50%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 40%\n  Entering block accumulator loop for bucket 23:\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 23: 10%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 23: 20%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 23: 30%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 23: 40%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 23: 80%\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\nGetting block 26 of 30\n  Calculating Z arrays for bucket 25\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 25: 10%\n  bucket 26: 20%\n  bucket 25: 20%\n  bucket 26: 30%\n  bucket 25: 30%\n  bucket 26: 40%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 27: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\nGetting block 30 of 30\n  Calculating Z arrays for bucket 29\n  Reserving size (777) for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 10%\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 40%\n  bucket 30: 50%\n  bucket 29: 50%\n  bucket 30: 60%\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 29: 70%\n  bucket 30: 90%\n  bucket 29: 80%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  bucket 29: 90%\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_stderr": "Building a SMALL index\n", "stderr": "\nBuilding a SMALL index\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/b/3/5/dataset_b35f4ebd-7820-48e8-949e-289147ca40a9.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 4: 40%\n  bucket 1: 80%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 1: 90%\n  bucket 3: 40%\n  bucket 1: 100%\n  bucket 2: 50%\n  Sorting block of length 689 for bucket 1\n  bucket 4: 60%\n  bucket 3: 50%\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 4: 80%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  bucket 3: 80%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nReturning block of 446 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\n  bucket 5: 20%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\nGetting block 7 of 30\n  bucket 5: 80%\n  bucket 6: 80%\n  Reserving size (777) for bucket 7\nGetting block 8 of 30\n  Calculating Z arrays for bucket 7\n  bucket 6: 90%\n  bucket 5: 90%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 100%\n  Entering block accumulator loop for bucket 8:\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  bucket 9: 10%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\nGetting block 12 of 30\n  bucket 11: 20%\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 30%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 40%\n  bucket 16: 10%\n  bucket 15: 50%\n  bucket 16: 20%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 15: 70%\n  bucket 16: 40%\n  bucket 15: 80%\n  bucket 16: 50%\n  bucket 15: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\nGetting block 20 of 30\n  Calculating Z arrays for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 22: 30%\n  bucket 21: 70%\n  bucket 22: 40%\n  bucket 21: 80%\n  bucket 22: 50%\n  bucket 21: 90%\n  bucket 22: 60%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  Sorting block time: 00:00:00\n  bucket 22: 100%\nReturning block of 22 for bucket 21\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 60%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 70%\n  bucket 24: 10%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 30\n  bucket 25: 20%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 25: 50%\n  bucket 26: 20%\n  bucket 25: 60%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\nGetting block 30 of 30\n  bucket 29: 40%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 50%\n  bucket 30: 30%\n  bucket 29: 60%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 70%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 29: 80%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Reserving size (777) for bucket 2\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 3: 60%\n  bucket 4: 30%\n  bucket 3: 70%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 1: 50%\n  bucket 4: 50%\n  bucket 2: 50%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 3: 100%\n  bucket 1: 60%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 4: 70%\n  bucket 1: 70%\n  bucket 4: 80%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 1: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\nGetting block 7 of 30\n  bucket 5: 30%\n  bucket 6: 20%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 7: 10%\n  bucket 6: 40%\n  bucket 7: 20%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 6: 90%\n  bucket 7: 80%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\nGetting block 11 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 9: 20%\n  bucket 11: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 11: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 11: 40%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 11: 50%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 11: 60%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 11: 70%\n  bucket 9: 80%\n  bucket 11: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 11: 90%\n  bucket 10: 80%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 9: 100%\n  bucket 10: 90%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\nGetting block 14 of 30\n  bucket 13: 60%\n  Reserving size (777) for bucket 14\nGetting block 15 of 30\n  Calculating Z arrays for bucket 14\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 13: 90%\n  bucket 15: 20%\n  bucket 14: 20%\n  bucket 15: 30%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 30%\n  bucket 15: 40%\n  bucket 14: 40%\n  bucket 15: 50%\n  bucket 14: 50%\n  bucket 15: 60%\n  bucket 14: 60%\n  bucket 15: 70%\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  bucket 14: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 14: 80%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  bucket 14: 90%\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 30%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 19: 30%\n  bucket 18: 70%\n  bucket 19: 40%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 19: 50%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 40%\n  Entering block accumulator loop for bucket 23:\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 23: 10%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 23: 20%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 23: 30%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 23: 40%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 23: 80%\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\nGetting block 26 of 30\n  Calculating Z arrays for bucket 25\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 25: 10%\n  bucket 26: 20%\n  bucket 25: 20%\n  bucket 26: 30%\n  bucket 25: 30%\n  bucket 26: 40%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 27: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\nGetting block 30 of 30\n  Calculating Z arrays for bucket 29\n  Reserving size (777) for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 10%\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 40%\n  bucket 30: 50%\n  bucket 29: 50%\n  bucket 30: 60%\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 29: 70%\n  bucket 30: 90%\n  bucket 29: 80%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  bucket 29: 90%\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:55:48", "plugin": "core", "name": "end_epoch", "raw_value": "1666457748.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:55:47", "plugin": "core", "name": "start_epoch", "raw_value": "1666457747.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam__lfgtz22.sam v. /tmp/history_bam_converted_to_sam_r_2ozepp.sam )\n--- local_file\n+++ history_data\n@@ -1,29 +1,30 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/124/tmp -O bam -o /galaxy/server/database/objects/0/1/7/dataset_017ffd9c-2daa-4923-a436-3528a8e0b870.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1106:6455:17124\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBAAFABDBBFGGGGGGGGGGHHHGHHGHHHHHHHHHGHHGHHGHHHGHGGGEGHHHHHHHHHHHHHGHHHGHHHGGHGGHHHHHHHHHHHHHHHHHHGHHHHHHHHGHHHHHGGCFEHHHGFHHHHGHHFFH?GGHHHHGHGHGHHCFGGGGGGGFFFFFFFFFFFFFFFFFFFFADFA?.FEFAFFFEFFFFFFFFFFFFDABFBBFFFFFFFFEFFBFFFFFFFFFFF/FFBFFFFFFADE>BFFF9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1110:12808:18367\t161\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACAGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTT\tABCCCCDDDFFFGGGGGGGGGGHHHHHHHHHGGGGGGHHHHFHHGHHHHHHHHHHHHHGHHHGGHHHH3GFHEFHHHHHGHHGFHHHHHFGHHHHHGHGHGGHGGGGGGGHHHGGCGGGGHHGGGGGGGGGGGGGGGGGGGF-BAEFEBEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFAFEFDFFFFFFFFFF0BFBED=@DFFFFFFFFFEFFFFFBFAFB;0:;F0\tAS:i:-137\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T30G38A140A0A1\tYS:i:-138\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1110:16559:7507\t163\tchrM\t1\t23\t3M35I213M\t=\t1\t251\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAAT\t>AABBCCCCFFFGGGGGGGGGGHHHHHHHHHGGHGGHGHFHHHHFHHHHHHHHHHFHHGHHHHGHHHHHGGEEGHHHHHHHHHHHHHHHHHHHHHHGHGHGHHGGGGGGGHHGGGFGAGFGGGGGGGGGGGDDDFAGGFFFFCFAFEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFE..@BFFBD./;:0FFFFF09B/AFCA=-99BFFBFFFFFFFB:BFBFFBFB9:\tAS:i:-125\tXN:i:0\tXM:i:3\tXO:i:1\tXG:i:35\tNM:i:38\tMD:Z:1A0T69A143\tYS:i:-8\tYT:Z:CP\n********\n*SNIP *\n********\n@@ -179,6 +162,24 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11310:21761\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTT\tCCCCBFFFFFFFGGGGGGGGGGGHHHHHHHHHHHHGHHHHHGGGGGHHHHHGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHGHHHGHHHGHGHHGHHHHGGHGGG=FFGEHHHHHGHFGGHHGHHHHHFHHHHHHHGGHHHHHHHGHEHHGHHHHHGGGGF9AGE?DEGFFGGGGGGGGGGGGGGFFFF/9FFBFFFFFFFEFFFBFFFFFFFFFFFFEFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11310:21761\t141\t*\t0\t0\t*\t*\t0\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCTCC\tBCCCCFCCCCCCGGGGGGGGGGHHHHHHHHGGGGGHHHHHHHHGHHHHHHHHHGHHHHHHHHGHHHHHHHHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHGHHHDGHHHHHHHHHHHHHHHHHGHHHHHGGGGGGHHHHHGHHHHHHHHFFHHHHHCCAHFHHGGFFFFFFFFFAA;BDDFFFF00.-=D.ABDA-.::AAF;F@.AAD./0000.9-;.9:00009:F090;FF000900;\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11578:14676\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTC\tCDDDDFFFBFFCGGGGGGGGGGHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHGGGGGHHHHFGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGHHHHGGGGGGHGGHGHHHHHHH;CHHHHHHHHHHHHHHHGHGGGGFGGGFGGGGGGGGGGGGFGGGEGGFFFFFFFFFFFFFFFFFFFFFFFFF/FFFFFFFFFFFFFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11578:14676\t141\t*\t0\t0\t*\t*\t0\t0\tGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGT\tCCBCCCBBCCCCGGGGGGGGGGHGGGGGHHHHHHHGHHHHGHHHHHFFFGGHGHHHHHHHHHHHHHHHHFGHHHHHHHGHHGHFHFGHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHDGGCGHHHHHHHHHHHHHFF<GGHHHHGFGHGEHGGA=A=DFFFFAFAFF?FFFFFFFFFADFAAD;FFFA:BBBAE.A.EBFFFFEF-..0BFFF9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:13575:19255\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGTTCCCGTGAGTGGTTAATAGGGTGATAGGCCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tAA1A1DFFFFFBGG3A111FFAEGDDBGFDHF00F01BBA00BFGEHFBFFA1FABB0FAE?CFHF1BGFHFB0011F121E//>>1F10>B?EFHGCC/?/BFG/EEGFFEE//BCFDE0?E@@B/?11</?//<@?/F<<<A-<FBGH0.00=G0<<C//./0;;GC....<C.=.00;;BB./:.900////.C000;0090;..//000;C/;;/B/9BA9A9-AEEFF?B---;B99//9/;A//9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:13575:19255\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTGGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTAACTATTACAG\tAA>>ABFDCFFFFFDGFGFDGDEG1EGEFFBFHFGHA0E00A0CAAC0FFDFFAGHFEHHFDH/EAFCFFHACGHHAFFEF2DFFG/FGHHHHGHGH0C@/E@GGC0FG10>GGFGHHGHFFBGFGB2>F<EEF0@C@9:AAF00;9@-9.;FBBBBB->@;-A@FF<-;---@-;-----;-BFF/;---9//BBFFFF//B;FF///9BF///;/;B/BBFBFFBB/;-9--///;9/:-;BFFBBB9F\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:17564:15723\t77\t*\t0\t0\t*\t*\t0\t0\tTATGCTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAA\tEDCCDFFCEEDCGGGGGGGGGGHHHHHGFGHGGHGGHHHHHHHHGHHEHHGGGGGHHHHHHHHHGHHHGHHHHGGGGGHHHHFFGHHHGGGGGGHHHGGGGGHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHFEHHHHHHHHHHGHHGHGGHGGGCGGGGHHH1FGGGFGGFGGGGGGGGGGEFGGGGGGGGGGGGGGGGGFFFFFFFFFFAEFFFFFFFFFFBBFBBFFFFFE1:BFFB0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:17564:15723\t141\t*\t0\t0\t*\t*\t0\t0\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCCCCCCCCFFFGGGGGGGGGGHHHHGHHGHHHHHHGHHHHHHFHHHHGGGGHHGHFHHHHHHHFHHHHHHHGHGGHGGHGHHHHFHFHHGHHHHHHHHHHHHHEHGHHHHHGGGGGHHHHGEHHGHHHHHHGHFGHFHGGAHGGHGGGCCBDFGFFAFDBDDFFFFFBDA;AAD-ADC?AFEFB-@@AAEFEFFFFF..-:.B0:FFFFFFEF0BFF09FF.0;9BFFFFF0BFFFFFF?.::-909;.9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:18108:12091\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACAC\tCCCCCFBFFFFFGGGGGGGGGGHHHHHHHHHHHHHGGGGGGFHHHBFGHHHGGGGGGHHGGGGGHHGFGGHHHHHHGGGGGGHGHFGGGGGGDGEGEFGCHHHHHHHHHHGHHHHGEDHHHGGGCDGGGGFHFHGHHHGHHGHFGHHHFHHGFHHHFHHGGHFHFHHGB0CGHGFHCBGGGGEDEE9ADFEFFFGFBFGFFGGFFFFFGGFGFFFFFFFF/A?FEFFFFFEF-A.B//;BFFEF//BB///\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:18108:12091\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\tCBBCCFCCCCCFGGGGGGGGGGHHGHHHHFHHHHHHFHGHHHHFHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHGHHHHGHFHGHHGHHHHHHGHHHHHHGHHHHHGGGGGHHHHHHHHGHHHHHGFGHHHHHGHDHGHHGCA;?AAFGFEFDFFF.FFFFEBDFFFFFFFFBFFFFFFFFFEFEFFFEFFFFFFF.:BFFF0BFFFFFFFFFFFF;0FF0;BFFFFFFFFBFFFBFEFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTT\tABBBBFFFFFFFGGGGGGGGGGHHGHGHHHGHHHFGHGFGHFEHGGHGGHHHGHHHHFGHGGFGFFHHFHHHHEGHFHHHHHFGGGGGHGGGHGFHGHGGGGGGHHHGGGGHHGGGGHHHGGHGGGGGGHHHHGGGGGCFHGGGCDGHGHHHFHEHHHHHHHHHEEFHHGG:C:?0<EFGBFGGGGGFE.BFGEFFFGFFGGGGGGFDEF/FFGFFFFFFF;BBFA;.:EFFE:AAFEF.BFFFFF;9FF.\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tBBBBAFFFFFFFGGGGGGGFGGHHHHHHHHFHHHFHHHHGHHHHHHHHGHHHGHHEGHHHGDGCHHHHHHHHHGEHEHHHHHHHFHGGEGGHHHHHHHGEGHGHHDHHHHHHHHEHFHGHGHHHGEGCEHHFHHHGHHHHHHHF?GHHHFEFFAFFHHGG?;@DDFFB?@B;BDAFFFEBBD>D>D9@DDCFFFFFFCFDFE.AA;/BB/.;-.;BFBBBFFBFFFFFFF/9FF?/;/BBFFFFF/;FFB/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\t3>>A@FFFFFFFGGGFEECFGGFFB5GBHH5DFH5GBEEAEFHFHHF3F3GHFHHHEF3GAEHBGFHFFEFFHHHHFFB31FGGEGFHGEHHHHHHHHHHHHHHHHHEEEEGHHHFFF3GF3FGF44BBGEHHHHGG2B/BGGHE</ECDFHHBF1DGBFBFGFH<1GHGDGGFDFE0/<--;-9./BBED;BFBD/BF9BFFFDBFDADD;FFF?->;B=.9.;.BBFFF..;A;/B/;B//;;//BBF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tBBCCCFFFCBCCGGGGGGGGGGHGHGHHGFGFGFHGGHHGHHHHHHHHFHHGGGGAGFBGHHHFBBGH5GDHH5EEEGEHEGFBF1DGFDGFGGGBBCEEGEHFEFDDHFBFHFD/@BGDGDHHGDCCFCD/C<->.ADDGE1GA<DBGFGHBG/..DGFCDGD.:0:.;CFGHEHBF.A-99CFGGFF0C0C0BF0;CA9/B:///;//BF/9B9?-..:;.;9.9A././;B//F.B?A////9;:/:/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tA>ABAFA?D@AFGGGGFGGGFGFHHHFFH4BCBGHHHHGFFF3G5BF3322EEAFHHHHHHAB5GHFHEHFHHH3BEEHFGF5@13FDF3GDGFHHFGHHHGHHHGFGGHHFCG//?/EGHHHG3F4BFFGHHHEDGFHHB/B/?FBF<@-9?BDEFFF?B--?DFFFB9FA>B;A.BFDB?AB.--@;-.FFAEFFFF9AE;DDFFFFB/9BFFFFFFFB:BF/BB/BFF//FFF-=--.99=--.9///\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tAAAAAFFFFFFFGGGGGGFGGGHHGGHHHGGGGGGHGHGDFGHFGGGGFHHHHHGGGGGGGGFHGDFGGGGHGG?@EFHGEFEHEGFHHHHHF2FEHHGHGDCEAD?GFDFGGHBGHHFEHHHHHHHHHDFGHGHHGBDFG0FFHFGGFHHH=GGBF-AACEHEHHGGGHHHGHHFHCCFEBB0FFFFFF/;0;;FFFBFE.AA0BF0??-AD/////;:BFFBFFBBBFFFFFB/.9ADDAD-D;-;=A-\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\t@?AAAFFBFBFFFGGFGFGGGEFCGGHHHHFGHGHFHGHHHHGGFGGFGHHGHGHHHHGHGFFHHGGGGGHHHHHHHHHBFHHEFHHHHHHGF?FAGHGFHHHGDGFHHGGGHGHFHHHGHHHGHHFHHGFFGFHHHGHHHHFFHHHHH/FGHHHHGHGHG<C???B=@ABBFEF@=-AFFFFFFBFAFFDFFFFA?AFFCFFABEFFFFFFFFF?FFFDFFBFF;FFEFFEFFFFFFFAF///9FF/BB/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tBBBBBFFFFFFFEGGGGGGGGGGHHHHHHHHGHGGHHHHGFGGG?HGGHHHHHHHGGHGFGHGEEGFHHHHHHHHHHHFHHFHHGGCGGGHHHHBFGFFHGGGEFGHHGFFEEFHGGDGEHFHHHGGGCCCGHHG?EGFGGGFED@D?CEDFHEHGHFFHFHHGCGG.:CGGD:AEDCG?C?BFFFGGG/CEFBFEFFF/;:BBB;CFGD.:/:B:BB/BFFFBBFBFFAA9A..9-9@:/./;B/9/:/;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 4, "time_seconds": 116.89515089988708, "inputs": {"library|input_1": {"src": "hda", "id": "8313807c43e52624"}, "library|unaligned_file": false, "library|type": "paired_interleaved", "reference_genome|own_file": {"src": "hda", "id": "8bb0d1b8c6527c44"}, "reference_genome|source": "history", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "a2ee5fa02d9f8778", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:56:56.852522", "create_time": "2022-10-22T16:55:20.375816", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-8qgn6", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/c/d/5/dataset_cd541f90-424d-44e5-b080-e95f1b518cce.dat' genome && ln -s -f '/galaxy/server/database/objects/c/d/5/dataset_cd541f90-424d-44e5-b080-e95f1b518cce.dat' genome.fa &&   ln -s '/galaxy/server/database/objects/0/3/7/dataset_037dee94-9bd7-4494-8d0d-cd645f2ddc7d.dat' input_il.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   --interleaved 'input_il.fastq'                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/e/6/3/dataset_e63077b7-5bed-43be-825d-8185c46c693f.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 172, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 3, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 165, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_interleaved\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "8313807c43e52624", "src": "hda", "uuid": "037dee94-9bd7-4494-8d0d-cd645f2ddc7d"}, "own_file": {"id": "8bb0d1b8c6527c44", "src": "hda", "uuid": "cd541f90-424d-44e5-b080-e95f1b518cce"}}, "outputs": {"output": {"id": "2a55b279b9ba8f12", "src": "hda", "uuid": "e63077b7-5bed-43be-825d-8185c46c693f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/d/5/dataset_cd541f90-424d-44e5-b080-e95f1b518cce.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\nGetting block 2 of 30\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 4: 80%\n  bucket 2: 100%\n  bucket 3: 90%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 30\n  bucket 7: 30%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 10%\n  bucket 7: 60%\n  bucket 8: 20%\n  bucket 7: 70%\n  bucket 8: 30%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 7: 90%\n  bucket 7: 100%\n  bucket 8: 50%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 60%\n  bucket 10: 80%\n  bucket 9: 70%\n  bucket 10: 90%\n  bucket 9: 80%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\nGetting block 12 of 30\n  Calculating Z arrays for bucket 11\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 12: 90%\n  bucket 11: 90%\n  bucket 12: 100%\n  bucket 11: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\nGetting block 17 of 30\n  bucket 16: 30%\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 40%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 16: 50%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 16: 60%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 16: 70%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 16: 80%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 16: 90%\n  bucket 17: 60%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 17: 100%\nReturning block of 724 for bucket 16\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\nGetting block 21 of 30\n  Calculating Z arrays for bucket 20\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 21: 10%\n  bucket 20: 20%\n  bucket 21: 20%\n  bucket 20: 30%\n  bucket 21: 30%\n  bucket 20: 40%\n  bucket 21: 40%\n  bucket 20: 50%\n  bucket 21: 50%\n  bucket 20: 60%\n  bucket 21: 60%\n  bucket 20: 70%\n  bucket 21: 70%\n  bucket 20: 80%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 50%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 60%\n  bucket 25: 10%\n  bucket 24: 70%\n  bucket 25: 20%\n  bucket 24: 80%\n  bucket 25: 30%\n  bucket 24: 90%\n  bucket 25: 40%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 30\n  Entering block accumulator loop for bucket 27:\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 27: 30%\n  bucket 28: 40%\n  bucket 27: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 28: 70%\n  bucket 27: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 27: 80%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 1: 40%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 1: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nReturning block of 777 for bucket 5\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 50%\n  bucket 10: 10%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 10: 30%\n  bucket 9: 90%\n  bucket 10: 40%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\nGetting block 11 of 30\n  bucket 10: 50%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 60%\n  bucket 11: 10%\n  bucket 10: 70%\n  bucket 11: 20%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 11: 30%\n  Sorting block time: 00:00:00\n  bucket 10: 100%\nReturning block of 536 for bucket 9\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Entering block accumulator loop for bucket 15:\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 15: 40%\n  bucket 16: 40%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 15: 60%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 16: 90%\n  bucket 15: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  bucket 20: 50%\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 60%\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 20: 70%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 20: 80%\n  bucket 21: 50%\n  bucket 20: 90%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\nGetting block 25 of 30\n  bucket 24: 40%\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 50%\n  bucket 25: 10%\n  bucket 24: 60%\n  bucket 25: 20%\n  bucket 24: 70%\n  bucket 25: 30%\n  bucket 24: 80%\n  bucket 25: 40%\n  bucket 24: 90%\n  bucket 25: 50%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  Sorting block time: 00:00:00\n  bucket 25: 90%\nReturning block of 733 for bucket 24\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  bucket 28: 10%\n  Reserving size (777) for bucket 29\n  bucket 28: 20%\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\nGetting block 30 of 30\n  bucket 28: 40%\n  Reserving size (777) for bucket 30\n  bucket 28: 50%\n  bucket 29: 10%\n  Calculating Z arrays for bucket 30\n  bucket 28: 60%\n  Entering block accumulator loop for bucket 30:\n  bucket 28: 70%\n  bucket 29: 20%\n  bucket 28: 80%\n  bucket 30: 10%\n  bucket 29: 30%\n  bucket 28: 90%\n  bucket 30: 20%\n  bucket 29: 40%\n  bucket 28: 100%\n  bucket 30: 30%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 50%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 60%\n  bucket 30: 60%\n  bucket 29: 70%\n  bucket 30: 70%\n  bucket 29: 80%\n  bucket 30: 80%\n  bucket 29: 90%\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  bucket 30: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n50.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n50.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/d/5/dataset_cd541f90-424d-44e5-b080-e95f1b518cce.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\nGetting block 2 of 30\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 4: 80%\n  bucket 2: 100%\n  bucket 3: 90%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 30\n  bucket 7: 30%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 10%\n  bucket 7: 60%\n  bucket 8: 20%\n  bucket 7: 70%\n  bucket 8: 30%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 7: 90%\n  bucket 7: 100%\n  bucket 8: 50%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 60%\n  bucket 10: 80%\n  bucket 9: 70%\n  bucket 10: 90%\n  bucket 9: 80%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\nGetting block 12 of 30\n  Calculating Z arrays for bucket 11\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 12: 90%\n  bucket 11: 90%\n  bucket 12: 100%\n  bucket 11: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\nGetting block 17 of 30\n  bucket 16: 30%\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 40%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 16: 50%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 16: 60%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 16: 70%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 16: 80%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 16: 90%\n  bucket 17: 60%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 17: 100%\nReturning block of 724 for bucket 16\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\nGetting block 21 of 30\n  Calculating Z arrays for bucket 20\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 21: 10%\n  bucket 20: 20%\n  bucket 21: 20%\n  bucket 20: 30%\n  bucket 21: 30%\n  bucket 20: 40%\n  bucket 21: 40%\n  bucket 20: 50%\n  bucket 21: 50%\n  bucket 20: 60%\n  bucket 21: 60%\n  bucket 20: 70%\n  bucket 21: 70%\n  bucket 20: 80%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 50%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 60%\n  bucket 25: 10%\n  bucket 24: 70%\n  bucket 25: 20%\n  bucket 24: 80%\n  bucket 25: 30%\n  bucket 24: 90%\n  bucket 25: 40%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 30\n  Entering block accumulator loop for bucket 27:\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 27: 30%\n  bucket 28: 40%\n  bucket 27: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 28: 70%\n  bucket 27: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 27: 80%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 1: 40%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 1: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nReturning block of 777 for bucket 5\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 50%\n  bucket 10: 10%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 10: 30%\n  bucket 9: 90%\n  bucket 10: 40%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\nGetting block 11 of 30\n  bucket 10: 50%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 60%\n  bucket 11: 10%\n  bucket 10: 70%\n  bucket 11: 20%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 11: 30%\n  Sorting block time: 00:00:00\n  bucket 10: 100%\nReturning block of 536 for bucket 9\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Entering block accumulator loop for bucket 15:\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 15: 40%\n  bucket 16: 40%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 15: 60%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 16: 90%\n  bucket 15: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  bucket 20: 50%\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 60%\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 20: 70%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 20: 80%\n  bucket 21: 50%\n  bucket 20: 90%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\nGetting block 25 of 30\n  bucket 24: 40%\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 50%\n  bucket 25: 10%\n  bucket 24: 60%\n  bucket 25: 20%\n  bucket 24: 70%\n  bucket 25: 30%\n  bucket 24: 80%\n  bucket 25: 40%\n  bucket 24: 90%\n  bucket 25: 50%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  Sorting block time: 00:00:00\n  bucket 25: 90%\nReturning block of 733 for bucket 24\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  bucket 28: 10%\n  Reserving size (777) for bucket 29\n  bucket 28: 20%\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\nGetting block 30 of 30\n  bucket 28: 40%\n  Reserving size (777) for bucket 30\n  bucket 28: 50%\n  bucket 29: 10%\n  Calculating Z arrays for bucket 30\n  bucket 28: 60%\n  Entering block accumulator loop for bucket 30:\n  bucket 28: 70%\n  bucket 29: 20%\n  bucket 28: 80%\n  bucket 30: 10%\n  bucket 29: 30%\n  bucket 28: 90%\n  bucket 30: 20%\n  bucket 29: 40%\n  bucket 28: 100%\n  bucket 30: 30%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 50%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 60%\n  bucket 30: 60%\n  bucket 29: 70%\n  bucket 30: 70%\n  bucket 29: 80%\n  bucket 30: 80%\n  bucket 29: 90%\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  bucket 30: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:56:45", "plugin": "core", "name": "end_epoch", "raw_value": "1666457805.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:56:45", "plugin": "core", "name": "start_epoch", "raw_value": "1666457805.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_2evix4qv.sam v. /tmp/history_bam_converted_to_sam_dai1pffu.sam )\n--- local_file\n+++ history_data\n@@ -1,7 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n @RG\tID:rg1\tPL:CAPILLARY\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome --interleaved input_il.fastq --rg-id rg1 --rg PL:CAPILLARY\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome --rg-id rg1 --rg PL:CAPILLARY --interleaved input_il.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/133/tmp -O bam -o /galaxy/server/database/objects/e/6/3/dataset_e63077b7-5bed-43be-825d-8185c46c693f.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t153\tchrM\t1\t3\t4M23I224M\t=\t1\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tFB099BFFFBFBBFEF?EFFFB090FFFFFFFFFFD;;.GFFGFGFA0FGFFEFEGGGFBCE;BGHHFFGHGEHFHHHHGFE@ECCDCGGGGGEHFFFGGGGGBHHGFGGGCGHHGGGGGGHGGGGGGHHHDGCFFBHGGGGGHHHHHFHFHGGGHHHHGHGGGGGHHHGGHGHHHHHHHGGHGGHHGGHHHHHHHEHHHHHHHHGGGGHHHHHHHHHHHHHHHHGHHHGGGGGGGGGGFFFFCFFCCCCB\tAS:i:-99\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:23\tNM:i:29\tMD:Z:0G0A0T0C11A56A155\tYT:Z:UP\tRG:Z:rg1\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 5, "time_seconds": 119.75757932662964, "inputs": {"library|input_1": {"src": "hda", "id": "7f43844edcba03d9"}, "library|input_2": {"src": "hda", "id": "42d195ee0d402843"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "8bb0d1b8c6527c44"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "a76b0c7a7c827d11", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:57:01.275695", "create_time": "2022-10-22T16:55:37.970706", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-6w25q", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/c/d/5/dataset_cd541f90-424d-44e5-b080-e95f1b518cce.dat' genome && ln -s -f '/galaxy/server/database/objects/c/d/5/dataset_cd541f90-424d-44e5-b080-e95f1b518cce.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/2/e/3/dataset_2e3811c1-ea66-4acb-8fee-3f4af96bfc4d.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/1/4/f/dataset_14f74fe6-0d3a-44d4-bbcb-9538b79717d3.dat' input_r.fastq.gz &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq.gz' -2 'input_r.fastq.gz'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/a/c/5/dataset_ac56648b-770d-430a-ad27-e72b8e9a050d.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 172, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 167, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 169, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "7f43844edcba03d9", "src": "hda", "uuid": "2e3811c1-ea66-4acb-8fee-3f4af96bfc4d"}, "input_2": {"id": "42d195ee0d402843", "src": "hda", "uuid": "14f74fe6-0d3a-44d4-bbcb-9538b79717d3"}, "own_file": {"id": "8bb0d1b8c6527c44", "src": "hda", "uuid": "cd541f90-424d-44e5-b080-e95f1b518cce"}}, "outputs": {"output": {"id": "d57c5df8e1f9acac", "src": "hda", "uuid": "ac56648b-770d-430a-ad27-e72b8e9a050d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/d/5/dataset_cd541f90-424d-44e5-b080-e95f1b518cce.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 3: 50%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 1: 60%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 4: 60%\n  bucket 1: 80%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 4: 70%\n  bucket 1: 90%\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 4: 80%\n  bucket 1: 100%\n  bucket 3: 100%\n  bucket 2: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\nGetting block 6 of 30\n  bucket 5: 40%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 50%\n  bucket 6: 10%\n  bucket 5: 60%\n  bucket 6: 20%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 90%\n  bucket 6: 50%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 30\n  Entering block accumulator loop for bucket 7:\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 7: 100%\n  bucket 8: 60%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  Sorting block time: 00:00:00\n  bucket 8: 100%\nReturning block of 706 for bucket 7\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 10%\n  bucket 9: 60%\n  bucket 10: 20%\n  bucket 9: 70%\n  bucket 10: 30%\n  bucket 9: 80%\n  bucket 10: 40%\n  bucket 9: 90%\n  bucket 10: 50%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  Sorting block time: 00:00:00\n  bucket 10: 100%\nReturning block of 547 for bucket 9\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 11: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  bucket 14: 90%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nReturning block of 598 for bucket 13\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 30\n  Entering block accumulator loop for bucket 19:\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 19: 60%\n  bucket 20: 60%\n  bucket 19: 70%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  bucket 21: 10%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 21: 80%\n  bucket 22: 90%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 30%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 24: 10%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 24: 20%\n  bucket 23: 80%\n  bucket 24: 30%\n  bucket 23: 90%\n  bucket 24: 40%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 20%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 26: 20%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 25: 90%\n  bucket 26: 50%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\nGetting block 28 of 30\n  bucket 27: 60%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 28: 10%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\nGetting block 30 of 30\n  bucket 29: 80%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 90%\n  bucket 29: 100%\n  bucket 30: 10%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 1: 20%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 1: 40%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 1: 50%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 1: 60%\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 4: 60%\n  bucket 1: 80%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 1: 90%\n  bucket 4: 70%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 7: 30%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 7: 40%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 7: 60%\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 30\n  bucket 9: 20%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 10: 10%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 9: 60%\n  bucket 10: 30%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 50%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 30\n  bucket 11: 10%\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 30\n  bucket 13: 20%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\nGetting block 18 of 30\n  bucket 17: 100%\n  Reserving size (777) for bucket 18\n  Sorting block of length 606 for bucket 17\n  Calculating Z arrays for bucket 18\n  (Using difference cover)\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 20%\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 24: 30%\nGetting block 26 of 30\n  bucket 25: 20%\n  bucket 24: 40%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 24: 50%\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 24: 60%\n  bucket 25: 50%\n  bucket 26: 20%\n  bucket 24: 70%\n  bucket 25: 60%\n  bucket 26: 30%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 26: 40%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 26: 50%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  bucket 26: 60%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  bucket 28: 10%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 28: 60%\n  bucket 29: 70%\n  bucket 28: 70%\n  bucket 29: 80%\n  bucket 28: 80%\n  bucket 29: 90%\n  bucket 28: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 30 of 30\n  bucket 28: 100%\nReturning block of 583 for bucket 29\n  Reserving size (777) for bucket 30\n  Sorting block of length 631 for bucket 28\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  (Using difference cover)\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/d/5/dataset_cd541f90-424d-44e5-b080-e95f1b518cce.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 3: 50%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 1: 60%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 4: 60%\n  bucket 1: 80%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 4: 70%\n  bucket 1: 90%\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 4: 80%\n  bucket 1: 100%\n  bucket 3: 100%\n  bucket 2: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\nGetting block 6 of 30\n  bucket 5: 40%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 50%\n  bucket 6: 10%\n  bucket 5: 60%\n  bucket 6: 20%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 90%\n  bucket 6: 50%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 30\n  Entering block accumulator loop for bucket 7:\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 7: 100%\n  bucket 8: 60%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  Sorting block time: 00:00:00\n  bucket 8: 100%\nReturning block of 706 for bucket 7\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 10%\n  bucket 9: 60%\n  bucket 10: 20%\n  bucket 9: 70%\n  bucket 10: 30%\n  bucket 9: 80%\n  bucket 10: 40%\n  bucket 9: 90%\n  bucket 10: 50%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  Sorting block time: 00:00:00\n  bucket 10: 100%\nReturning block of 547 for bucket 9\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 11: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  bucket 14: 90%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nReturning block of 598 for bucket 13\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 30\n  Entering block accumulator loop for bucket 19:\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 19: 60%\n  bucket 20: 60%\n  bucket 19: 70%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  bucket 21: 10%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 21: 80%\n  bucket 22: 90%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 30%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 24: 10%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 24: 20%\n  bucket 23: 80%\n  bucket 24: 30%\n  bucket 23: 90%\n  bucket 24: 40%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 20%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 26: 20%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 25: 90%\n  bucket 26: 50%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\nGetting block 28 of 30\n  bucket 27: 60%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 28: 10%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\nGetting block 30 of 30\n  bucket 29: 80%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 90%\n  bucket 29: 100%\n  bucket 30: 10%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 1: 20%\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 1: 40%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 1: 50%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 1: 60%\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 4: 60%\n  bucket 1: 80%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 1: 90%\n  bucket 4: 70%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 7: 30%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 7: 40%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 7: 60%\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 30\n  bucket 9: 20%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 10: 10%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 9: 60%\n  bucket 10: 30%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 50%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 30\n  bucket 11: 10%\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 30\n  bucket 13: 20%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\nGetting block 18 of 30\n  bucket 17: 100%\n  Reserving size (777) for bucket 18\n  Sorting block of length 606 for bucket 17\n  Calculating Z arrays for bucket 18\n  (Using difference cover)\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 20%\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 24: 30%\nGetting block 26 of 30\n  bucket 25: 20%\n  bucket 24: 40%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 24: 50%\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 24: 60%\n  bucket 25: 50%\n  bucket 26: 20%\n  bucket 24: 70%\n  bucket 25: 60%\n  bucket 26: 30%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 26: 40%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 26: 50%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  bucket 26: 60%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  bucket 28: 10%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 28: 60%\n  bucket 29: 70%\n  bucket 28: 70%\n  bucket 29: 80%\n  bucket 28: 80%\n  bucket 29: 90%\n  bucket 28: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 30 of 30\n  bucket 28: 100%\nReturning block of 583 for bucket 29\n  Reserving size (777) for bucket 30\n  Sorting block of length 631 for bucket 28\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  (Using difference cover)\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:56:49", "plugin": "core", "name": "end_epoch", "raw_value": "1666457809.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:56:48", "plugin": "core", "name": "start_epoch", "raw_value": "1666457808.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_jyhs66wm.sam v. /tmp/history_bam_converted_to_sam_u5eni83i.sam )\n--- local_file\n+++ history_data\n@@ -1,30 +1,31 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 input_f.fastq.gz -2 input_r.fastq.gz\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/134/tmp -O bam -o /galaxy/server/database/objects/a/c/5/dataset_ac56648b-770d-430a-ad27-e72b8e9a050d.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3>AAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n********\n*SNIP *\n********\n M01368:8:000000000-A3GHV:1:1108:11059:23181\t165\tchrM\t2\t0\t*\t=\t2\t0\tAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACC\tCCCCCFFFFFCCGGGGGGGGGGHHHHHHHHHHHGHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHHHHHHHHHHHHHGHGHEHHGFCGGGHHHHHHHHHHHHHHHFGHHHHHGHGHGHHGGGBFGFFFFEAFFFA.BFFFEFDDFFFFFFFFFFEEFF;D;EFFFFFF0BFFFADDFFFFFBFBFFFFFBB0FFFF0::0BF000BFFFBBF0EDFF@\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1108:25084:18127\t161\tchrM\t2\t8\t4M24I223M\t=\t1\t-238\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tCCCCCFFFFFFFGGGGGGGGGGGGHHHHHHHHFHHHHHHHHHHHHHHGGHHGHHHHHGGGGFHHHHHFHHHHHHHHHGGHHHHHCGGHGHHGGGGGGGHHGGGGGGGGHHHGHHGGGGGGGGGGGGGGGG@CDE?EFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFE;DFBFFFFFFFFFFFFFFFFFFFAFFFFFFFBFFE0BBBFFFFFFFFFFBFFFF9BB0:0:B;\tAS:i:-97\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYS:i:-65\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M2I15M\t=\t1\t-246\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tCCCCCFFFFFFCGGGGGGGGGGHHHHHHHHHFFHHHHGGGGGHFFFHHFHHHHHHHHHHHHHHHGFEGGGHGEDFCDFHGHFG@@DGGHHHHHHGGGGCGGGGGEHGGCGBB?CF99EGFGGFGG?D9CFFFF/BBFFFFFEF9BFFAFFFFEFFFFFFFFFFFFFFFFFFFFF.FFBBFFFFFFFFFFFF-9;;;BFFFFFB9BFBFBFABFFEFFFFFFFFFF::BFFBFFFF.9//;FFFFF/BFFB/\tAS:i:-78\tXN:i:0\tXM:i:12\tXO:i:2\tXG:i:6\tNM:i:18\tMD:Z:2C0A67A115A42A0T0A0A1A3A0C0A3\tYS:i:-78\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1110:23303:11846\t101\tchrM\t2\t0\t*\t=\t2\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGTGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTC\t3ABB?FAB?DAAGGGFBGGBB5AFFFGFHHGGGEGHHHFHHF3EGFHHHHEFHHGGHHHGH3EFHHHHHBDGHHE?ECHGHGHHHHHHFHHHGHHHHHHHGGHGGFHHHFHHGFFHHFEGFHHHHHHEHHFDAGHHHH/BDDFGGH1FDBGHHHHHHHCGHHHFH?0CGCF>CC=@--AFBFFB?=BFDFFF//FDB;-9A-AD-.A.A=?-9-:B/AEB/BFF.A;DDFFFBBFFFF/BBFFFFBFF9B;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:14287:20817\t97\tchrM\t2\t8\t2M36I213M\t=\t1\t-250\tGCCAACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTCATCGCACCTACGTTCACTATTACAGGCGAACATACTTATTAAAGTGTGTTAATTAAT\t>>A3>AAAACFFFGFGFGGGGGHGHHHHHHHGGGGGHGHFFCGHHGBGHFHHHHAGHHHHEHHAGFFEHEAE?GHHHHEGFFFDGHGHBFFHFHHHGHGHGHBECG@@@EHGGEGCGGGGFFGGGG?BGGGGGG.-C.FEDCFFFEFFFAF/99BEFA.:9BFB/9FFFEFFFFFFEFFF/FBBFFFFFFFFFFFB//;.@@//;DFFFF//BBFFFBF;A;DF=>B//;9B//B/;/;9//9//;B/:B9\tAS:i:-137\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:36\tNM:i:42\tMD:Z:0A0T69A85T16A21C18\tYS:i:-32\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1111:23624:14516\t165\tchrM\t2\t0\t*\t=\t2\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACCCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tBBBBABFFFFFFGGGGGGGGGGHHCGHHHHHHHGHHHHHHHHHHHGDGEHHHHHHGHHHHHHHHHHHHHHHGGEFGHHHHHHHHBGFHHHHHHHHHHHHHHGHGGGGCEFGGCGHHHHFHHHHGHHHHFGHHHHHHGHGHGHHBCA?B-9FGFG?D;BD?9BFFFFFFF;DFFFF-.A;ADF-@=EF??A.BFFFEF>FDFFFFFFFFFFFBFFFFFFFFFFF/FFF/BFFFFFFFBA.?@;FFBDFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M2I15M\t=\t1\t-246\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tCCCCCFFFFFFCGGGGGGGGGGHHHHHHHHHFFHHHHGGGGGHFFFHHFHHHHHHHHHHHHHHHGFEGGGHGEDFCDFHGHFG@@DGGHHHHHHGGGGCGGGGGEHGGCGBB?CF99EGFGGFGG?D9CFFFF/BBFFFFFEF9BFFAFFFFEFFFFFFFFFFFFFFFFFFFFF.FFBBFFFFFFFFFFFF-9;;;BFFFFFB9BFBFBFABFFEFFFFFFFFFF::BFFBFFFF.9//;FFFFF/BFFB/\tAS:i:-78\tXN:i:0\tXM:i:12\tXO:i:2\tXG:i:6\tNM:i:18\tMD:Z:2C0A67A115A42A0T0A0A1A3A0C0A3\tYS:i:-78\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t83\tchrM\t2\t40\t1M10I240M\t=\t1\t-242\tATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAAC\t//A:D9/FBFFFFFB;//FFBA@:..BFFFFFA0A;;D;:.GGFBFEC//BAGFBEGGGFFGHFHCDC@CC.ACGCCDCGF1.?GDCA/HHHGHGGGCGGHGGDGGGHGDGDCGGHHGEGHFHFGGGGEGHHHHHHGHHHHGFHHGHFGGGGHHBFHHHHHHHHGGGFHEEGB5EFHFGHHGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHGCGHHHHHHHGHHHHGGHGGGGGGGGGGFFFFFFFAAAAA\tAS:i:-41\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:14A56A169\tYS:i:-45\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:5446:12248\t89\tchrM\t2\t0\t4M39I208M\t=\t2\t0\tATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATT\tFFFEFFFFFEFFFFFFBFFFFFFFFFFBFFFFFFFFFGGFFFFGGGGGGGF?;/GGGGGEGE;EF:GGGGGGHHHHGGGHFHHHHHHHHHHHHHGGGGGGHGGGGGGGHHGHGGGGGGHHHHHHGGGGHHGGFGHHHGGGGGGHHHGFFHHHHGGGGGHHHHHHHHHGHHHHHHHHGGGGGHGHGHHHHHHHHHHGGHGGHGBGHHHHHHHHHHHHHHHHGGGGHHHHHGFGGGGGGGGFCCFFFFDCCCC\tAS:i:-137\tXN:i:0\tXM:i:3\tXO:i:1\tXG:i:39\tNM:i:42\tMD:Z:2C0A67A140\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1102:18842:24844\t153\tchrM\t2\t3\t4M24I223M\t=\t2\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tFB:/BFFBFF;////FA9.FFFBFFFFFFFF9FBB/.A/FEF09FGEC?C9DEGFGEFEGGGFFFGFFGGHFCHHHFFHFDD@-EA?CFGGGGHHHHGDACDFEHHHHHGGGGHHGGGGHHHGGGGGGHGGCEFGHHHGGGGGHHHHHHHHHHHGFHHHFHGGGGGHHGHHHHHHGHHHHGGHGGHHHGHGHHHHHFHHHHHHHHGGGGHHHHHHHHHHHHHHHHGHHHGGGGGGGGGGFFFFBFFBCCCC\tAS:i:-95\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYT:Z:UP\n@@ -179,6 +180,8 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n@@ -199,5 +202,3 @@\n M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH<1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 6, "time_seconds": 126.24456334114075, "inputs": {"library|input_1": {"src": "hda", "id": "84999953dd8597ae"}, "library|input_2": {"src": "hda", "id": "3bcba2477862f43a"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "8bb0d1b8c6527c44"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "64e87c7c177f708f", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:57:07.874212", "create_time": "2022-10-22T16:55:38.874192", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-cpxff", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/c/d/5/dataset_cd541f90-424d-44e5-b080-e95f1b518cce.dat' genome && ln -s -f '/galaxy/server/database/objects/c/d/5/dataset_cd541f90-424d-44e5-b080-e95f1b518cce.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/c/f/0/dataset_cf084836-114c-437a-9bf6-be7b2f6be835.dat' input_f.fastq.bz2 &&  ln -f -s '/galaxy/server/database/objects/a/2/8/dataset_a28ea9cf-5877-4cbc-8d16-391b3013d8a9.dat' input_r.fastq.bz2 &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq.bz2' -2 'input_r.fastq.bz2'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/d/6/7/dataset_d6768182-08f0-479a-ad42-124c1bcd9f6c.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 172, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 168, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 170, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "84999953dd8597ae", "src": "hda", "uuid": "cf084836-114c-437a-9bf6-be7b2f6be835"}, "input_2": {"id": "3bcba2477862f43a", "src": "hda", "uuid": "a28ea9cf-5877-4cbc-8d16-391b3013d8a9"}, "own_file": {"id": "8bb0d1b8c6527c44", "src": "hda", "uuid": "cd541f90-424d-44e5-b080-e95f1b518cce"}}, "outputs": {"output": {"id": "89f0393c1ba0cb90", "src": "hda", "uuid": "d6768182-08f0-479a-ad42-124c1bcd9f6c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/d/5/dataset_cd541f90-424d-44e5-b080-e95f1b518cce.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 2: 80%\n  bucket 3: 40%\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 2: 90%\n  bucket 3: 50%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 1: 80%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 1: 90%\n  bucket 4: 80%\n  bucket 3: 70%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 7: 60%\n  bucket 6: 80%\n  bucket 7: 70%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\nGetting block 9 of 30\n  bucket 8: 30%\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 9: 10%\n  bucket 8: 60%\n  bucket 9: 20%\n  bucket 8: 70%\n  bucket 9: 30%\n  bucket 8: 80%\n  bucket 9: 40%\n  bucket 8: 90%\n  bucket 9: 50%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\nGetting block 11 of 30\n  bucket 10: 80%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\nGetting block 13 of 30\n  bucket 12: 60%\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 70%\n  bucket 13: 10%\n  bucket 12: 80%\n  bucket 13: 20%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\nGetting block 15 of 30\n  bucket 14: 20%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 15: 30%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 15: 40%\n  bucket 14: 80%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 30%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 40%\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 16: 50%\n  bucket 17: 30%\n  bucket 16: 60%\n  bucket 17: 40%\n  bucket 16: 70%\n  bucket 17: 50%\n  bucket 16: 80%\n  bucket 17: 60%\n  bucket 16: 90%\n  bucket 17: 70%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\nGetting block 19 of 30\n  Calculating Z arrays for bucket 18\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 18:\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 18: 10%\n  bucket 19: 20%\n  bucket 18: 20%\n  bucket 19: 30%\n  bucket 18: 30%\n  bucket 19: 40%\n  bucket 18: 40%\n  bucket 19: 50%\n  bucket 18: 50%\n  bucket 19: 60%\n  bucket 18: 60%\n  bucket 19: 70%\n  bucket 18: 70%\n  bucket 19: 80%\n  bucket 18: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 70%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 80%\n  bucket 23: 10%\n  bucket 22: 90%\n  bucket 23: 20%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\nGetting block 25 of 30\n  Calculating Z arrays for bucket 24\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 24: 10%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 24: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 24: 60%\n  bucket 25: 80%\n  bucket 24: 70%\n  bucket 25: 90%\n  bucket 24: 80%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\nGetting block 27 of 30\n  Calculating Z arrays for bucket 26\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 26: 10%\n  bucket 27: 20%\n  bucket 26: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 26: 30%\n  bucket 27: 50%\n  bucket 26: 40%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 26: 50%\n  bucket 27: 80%\n  bucket 26: 60%\n  bucket 27: 90%\n  bucket 26: 70%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\nGetting block 29 of 30\n  bucket 28: 60%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 70%\n  bucket 29: 10%\n  bucket 28: 80%\n  bucket 29: 20%\n  bucket 28: 90%\n  bucket 29: 30%\n  bucket 28: 100%\n  bucket 29: 40%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 4: 40%\n  bucket 2: 70%\n  bucket 3: 50%\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 1: 100%\n  bucket 3: 80%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\nGetting block 7 of 30\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 6: 30%\n  bucket 5: 20%\n  bucket 6: 40%\n  bucket 7: 20%\n  bucket 6: 50%\n  bucket 5: 30%\n  bucket 6: 60%\n  bucket 7: 30%\n  bucket 5: 40%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 5: 50%\n  bucket 7: 40%\n  bucket 6: 90%\n  bucket 5: 60%\n  bucket 6: 100%\n  bucket 7: 50%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 7: 60%\n  bucket 5: 80%\n  bucket 7: 70%\n  bucket 5: 90%\n  bucket 7: 80%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 90%\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 90%\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 90%\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 100%\n  Entering block accumulator loop for bucket 11:\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\nGetting block 14 of 30\n  bucket 13: 50%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 60%\n  bucket 14: 10%\n  bucket 13: 70%\n  bucket 14: 20%\n  bucket 13: 80%\n  bucket 14: 30%\n  bucket 13: 90%\n  bucket 14: 40%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 20%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 16: 10%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 16: 20%\n  bucket 15: 70%\n  bucket 16: 30%\n  bucket 15: 80%\n  bucket 16: 40%\n  bucket 15: 90%\n  bucket 16: 50%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 30\n  bucket 17: 20%\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\nGetting block 20 of 30\n  Calculating Z arrays for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  bucket 21: 10%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\nGetting block 24 of 30\n  bucket 23: 90%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 30\n  bucket 25: 20%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 26: 10%\n  bucket 25: 40%\n  bucket 26: 20%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\nGetting block 29 of 30\n  Calculating Z arrays for bucket 28\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 28: 80%\n  bucket 29: 60%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/d/5/dataset_cd541f90-424d-44e5-b080-e95f1b518cce.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 2: 80%\n  bucket 3: 40%\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 2: 90%\n  bucket 3: 50%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 1: 80%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 1: 90%\n  bucket 4: 80%\n  bucket 3: 70%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 7: 60%\n  bucket 6: 80%\n  bucket 7: 70%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\nGetting block 9 of 30\n  bucket 8: 30%\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 9: 10%\n  bucket 8: 60%\n  bucket 9: 20%\n  bucket 8: 70%\n  bucket 9: 30%\n  bucket 8: 80%\n  bucket 9: 40%\n  bucket 8: 90%\n  bucket 9: 50%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\nGetting block 11 of 30\n  bucket 10: 80%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\nGetting block 13 of 30\n  bucket 12: 60%\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 70%\n  bucket 13: 10%\n  bucket 12: 80%\n  bucket 13: 20%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\nGetting block 15 of 30\n  bucket 14: 20%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 15: 30%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 15: 40%\n  bucket 14: 80%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 30%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 40%\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 16: 50%\n  bucket 17: 30%\n  bucket 16: 60%\n  bucket 17: 40%\n  bucket 16: 70%\n  bucket 17: 50%\n  bucket 16: 80%\n  bucket 17: 60%\n  bucket 16: 90%\n  bucket 17: 70%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\nGetting block 19 of 30\n  Calculating Z arrays for bucket 18\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 18:\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 18: 10%\n  bucket 19: 20%\n  bucket 18: 20%\n  bucket 19: 30%\n  bucket 18: 30%\n  bucket 19: 40%\n  bucket 18: 40%\n  bucket 19: 50%\n  bucket 18: 50%\n  bucket 19: 60%\n  bucket 18: 60%\n  bucket 19: 70%\n  bucket 18: 70%\n  bucket 19: 80%\n  bucket 18: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 70%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 80%\n  bucket 23: 10%\n  bucket 22: 90%\n  bucket 23: 20%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\nGetting block 25 of 30\n  Calculating Z arrays for bucket 24\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 24: 10%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 24: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 24: 60%\n  bucket 25: 80%\n  bucket 24: 70%\n  bucket 25: 90%\n  bucket 24: 80%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\nGetting block 27 of 30\n  Calculating Z arrays for bucket 26\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 26: 10%\n  bucket 27: 20%\n  bucket 26: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 26: 30%\n  bucket 27: 50%\n  bucket 26: 40%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 26: 50%\n  bucket 27: 80%\n  bucket 26: 60%\n  bucket 27: 90%\n  bucket 26: 70%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\nGetting block 29 of 30\n  bucket 28: 60%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 70%\n  bucket 29: 10%\n  bucket 28: 80%\n  bucket 29: 20%\n  bucket 28: 90%\n  bucket 29: 30%\n  bucket 28: 100%\n  bucket 29: 40%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 4: 40%\n  bucket 2: 70%\n  bucket 3: 50%\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 1: 100%\n  bucket 3: 80%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\nGetting block 7 of 30\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 6: 30%\n  bucket 5: 20%\n  bucket 6: 40%\n  bucket 7: 20%\n  bucket 6: 50%\n  bucket 5: 30%\n  bucket 6: 60%\n  bucket 7: 30%\n  bucket 5: 40%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 5: 50%\n  bucket 7: 40%\n  bucket 6: 90%\n  bucket 5: 60%\n  bucket 6: 100%\n  bucket 7: 50%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 7: 60%\n  bucket 5: 80%\n  bucket 7: 70%\n  bucket 5: 90%\n  bucket 7: 80%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 90%\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 90%\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 90%\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 100%\n  Entering block accumulator loop for bucket 11:\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\nGetting block 14 of 30\n  bucket 13: 50%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 60%\n  bucket 14: 10%\n  bucket 13: 70%\n  bucket 14: 20%\n  bucket 13: 80%\n  bucket 14: 30%\n  bucket 13: 90%\n  bucket 14: 40%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 20%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 16: 10%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 16: 20%\n  bucket 15: 70%\n  bucket 16: 30%\n  bucket 15: 80%\n  bucket 16: 40%\n  bucket 15: 90%\n  bucket 16: 50%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 30\n  bucket 17: 20%\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\nGetting block 20 of 30\n  Calculating Z arrays for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  bucket 21: 10%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\nGetting block 24 of 30\n  bucket 23: 90%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 30\n  bucket 25: 20%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 26: 10%\n  bucket 25: 40%\n  bucket 26: 20%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\nGetting block 29 of 30\n  Calculating Z arrays for bucket 28\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 28: 80%\n  bucket 29: 60%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:56:53", "plugin": "core", "name": "end_epoch", "raw_value": "1666457813.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:56:52", "plugin": "core", "name": "start_epoch", "raw_value": "1666457812.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_oc299_gg.sam v. /tmp/history_bam_converted_to_sam_5ben_7l7.sam )\n--- local_file\n+++ history_data\n@@ -1,29 +1,30 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 /tmp/gxy-cpxff-rr4rt_49mate1 -2 /tmp/gxy-cpxff-rr4rt_49mate2\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/135/tmp -O bam -o /galaxy/server/database/objects/d/6/7/dataset_d6768182-08f0-479a-ad42-124c1bcd9f6c.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3>AAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n********\n*SNIP *\n********\n-M01368:8:000000000-A3GHV:1:1109:19224:11655\t77\t*\t0\t0\t*\t*\t0\t0\tAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGCATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCTGTCTCTTATACACATCTCCGAGCC\tBBB@A4FFFBBBGGGGGGGGGGHHHHHHHHFHHHHGFGHGGGFFAGFHHHFHHHGHHHHHHHHHHHFHGGHGHHGCFFGHHHGHHHGHHFHGGH3BFFGHHGHGEFFH/EG@-CFGGCC@-;BD?FGGGGGG??FGDAGDFFFFEFF@BAAFEFFBFFFFF?FD9BBFFFF/FFFFBFFFFFFF?FFBFFFF/FBBFFBFFFE?F;@B//AFFFFFFFFF//;BFFEF.BFFFB/;F/99/FBFFBDCF;B\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:19224:11655\t141\t*\t0\t0\t*\t*\t0\t0\tCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTCTGTCTCTTATACACATCTGAGCTTC\tCCCCCFFFFFFFGGGGFGGGGGHGGHGGGHHHHHHHHHHHHHGGGGGHFHHHHHHFHHHHHFHHHGGGGGHEFHCEEHHHGGGGFGGGFGGGGHEGGGEHFHHHHDGGF?AGFHGGGGGGGGHGGGGGGGHHHHHHGFFFHHHHFCEFHFHGF<EGFHFGGAGBFHHHG/C.;C:0:GGG00CFGEFGBA.9C:BBFFGFGGFFFBFGAGG.D..:A.DFFEFFFBFFF0099:9BB0BFB009000;000\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:21978:9490\t77\t*\t0\t0\t*\t*\t0\t0\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCAGTT\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGAFGHGHFGDGBCGHHHHHFHHGHHHHHHHGHHHH1E?EGGGHHHHFGFHFHHHHHEDHHGHH@GGHGHHCGG?CFGFGGGGGFGB.BFGGFFGGFFFBDDBFFFFFF9-;DEFFDFBFFBB.EFF;BFBFFFFFFFFFFFFFFFFFFFFFFFFF/B9/FFFFFFFAFFFF--99AFFFFFFFA;;;FF..9//;/;;/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:21978:9490\t141\t*\t0\t0\t*\t*\t0\t0\tGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGGTCCAGTGTAGAGTTATGGGG\tBAABBFFFFFFFGGGGGGGGGGGGGHHHGHGGHHHGGGGGGGFHGGGGHHGGGGHHHHHHGGGGG?HHHGGGGGG?E1FEEE?EHHHHFHAGHHHHHHHHHFHHHHGGFDEG2FCFFGHHHHFH?FF<FFGDHHHHBGHHEGFDD<GFGFDBGHGGHH0GDFH@<AEE.::CFGGHGGBGFGG0BFAF0000BFDEGGFGGGGGFGE00BC;;B00.;AAD.;--------.-;/:9////////////;9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:22910:4079\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTCCACTTTAGCTA\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHGGGGGHHHHGGEHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGFHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGGHHHGGHGGGHHGHGHHHHHHHGFHHHHHHHHHHHHHHHHHHGGHHHHHHHHHHGHHHHHHGGGGGGGGGGGGGGGGGGGGFFGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFCCDFFFFFFF0BFFFFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:22910:4079\t141\t*\t0\t0\t*\t*\t0\t0\tCTCCGGGCCCATAACACTTGGGGTAGCTAAAGTGGACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCT\tCCCDCCCCCDDFGGGGGGGGGGGEGGHHHHHHGHHHHGHHHHHHGGGFGHGFHHHHHHHHHHHHHHHFHGHHHHHGGHHHHHHBGHHGGCGGHEHHHFHHHHFHHFHHHHHHGHGGHGGHHHHHHHHHGHHFFHHHHHGHHHHHHHGHHGHHGG?FGHHGHHHHHHHHHHHGGHHHHHH?CEHGFHGGF--@DFFFFFAA;DDFFFFFF?@FC.A=DD-.AFFFF;->;.ED.FFFFFFF-.:00009BBF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:24217:19077\t77\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGCCTTTGATTCCTGCCTCATCCTATTACTGTC\t>AAA3BDFFFFDGBFFEEGGGGHHGHFHHCFHGHGHHHGF3BFGFHGFEFHFHGH3EGFC1EEGBFGBHFGGFFHHHGHFHGHHGHGGHCEHEBCFF3ED3@GH4FDEG12FFHFFHG/G3FGA/@EFEFCG33FFGBBGHFHH/?BFBGFGFAGC2C/@-;@-;BFFEFADF?DFFFFFF?;AFFA;AD;..FEFFA--;9;D.9BFFBE?;.;///://///99//BB/9;F./B//BBFB9////99/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:24217:19077\t141\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGAACCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTC\tBBBBBFFFFFFFGFEGGCFGFGHHHHFHHFHHHHHHGGEEEFGHGFFAGFFEEAEGGHHBEEFAFGAEF1G3GFGGEEF@EAGGHGFF?ECGGHEEEFGGHHHHFHHFHHGFHHHC2D<FFFFAFDFF<FF1FGGBHHFF0>AGHGG00<G<<DGBGDD0<.;CGG;;:;CFFHHHHHHG?D.;.;/ACD.;FFFB0CFBFGGFGGB0;EFAFF9B/:BB/;;AEFF//:AF-A.;//:B///;BFBB:;/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:25237:11722\t77\t*\t0\t0\t*\t*\t0\t0\tCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATATCGTATGCCGT\tAABBBFFFFFBBF5BGGFGABGHGGAEFGFHHHHFHCHFHHBFGGGEHBGGHFFFFGFAEF5FHH?EGGF5AEG3?EBFHD?C/EFHFFEGEE?CFGGGHHFHB3EEFG?EEGHCFGGGGGGGEC<CDFHHHHHE.FD11FFAGBGD.DGHEA<.<<0<EHAHCFHHF./;CC0GFH0::0CFGG0FBFD;9/90BFF0CBBFGB09;B:0;CFF0.-;@AFEEF--;AFFBF/99D-;.//.../9;B-.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:25237:11722\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTCGATCTCTGTG\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHGHGHHHHHGGGGGHHHHHHHHHHHGHHHAGHHHHHGHGHGHGGGGCGF?FHGGGGGGGGHHHGHHGGGFFGGGGGGGGGGGGGGGE?DEGGGFFEF;DDFFFFFFFEFFFEFFFFFFE./B9BFFFBFFFFFFFFFFFF>-BFFA9FFFFFFFFFFFBFAFFAFFFFFBFFFFFFF/9BFFDFFDDFF-9@CDAD;:AFF/;B//....;;///;\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:27103:7153\t77\t*\t0\t0\t*\t*\t0\t0\tGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGCTGTCTC\t33>A?FFFDFBFGCG4EGFG??GACFGGHFHCFHCHBECDEFCEGHHHHHFFGGF3AFFHHFGEGCGHHGEHGFGHHEGG?EFHHH?EGGHHGGGGHHHHHHEGGGGGHFHHGFDDGGACFCC@?/FDDGHHHGHEFFHHH0FDHHFFEDCD.<GGEHGF0CHHHF/CAGC000CCGFHFGFGFFG?:CB990;F09;FB0BBGGGGGG?;A9EBDEFA///;FF/:F?BFBBFFBFFFF///;/9B;///\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:27103:7153\t141\t*\t0\t0\t*\t*\t0\t0\tNTACTTCAGGGTCNTAAAACCTNAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCANGGNAGCTCTCCNNGNNNNTGGTATTNTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACCTGTCTC\t#>>AAAFFFFFFG#AAFFGGGG#BAFFAGHHHGGGGHGHHHHFHHHHHHHGHHHHHHHEGFGGHHBGHGHHBGFFEG2GHHFHFHHHGHHGHFH#/B#??FFGHHH##?####????FHG#??CFGGGEF>CGAGAGGGFGAA@@FFFFFFFFB=@@FF?FF;FFFF@@-@-AFEF?BB/BF?E-BBFFF;:BB/BFFFB/BFFFBFBFBBFFFFFB/FFFBB/;9A@@BFFBFFFF/BBFFFFFFE/:9/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:8763:7859\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGCTTTATGC\tBABAADFFFFFFGGGGGGGGFBGFGHHFBHHHHGGHHGGEHGDHHHFGHEHHHHGHHGGGGAGHHFBHHGHFHHHHHHHHGGGCEFGFFFFEHHH?FFG1FFHHFEGGGHGFEEHHHHHGGGFGGGHHHHGGGGG/C/FG-<A<GFHHFFCGHHFHGE0<<CGHHHGCHG.CCCCCE00BBFGFFG.BB0FFBFBCF0;CBFFFEEGBBBFFBF/FFF9BF/9BAFFD9AFEDAA.A/BFFFFFFFFFEB/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:8763:7859\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAGCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAG\t>AAABFFFFFFFGGGGGGGGGGHHHHHHHCHFAFHHDGEGFHHHHHHHHFHHHHFHHHHHHGHGGHGGHHHFHGHHHHHFFHHHHHHBGHFFHGHGHHHHHGGEGGHHHHHGHHHHHHHHHGFGHHHHGHGHGHHCCGGGGGGGGGGAAGF?FFFFBFA@=BDDFF?-;FFF;@CFFEFEFFFFFFFFFBFDFFFFFFFFFFFFFFFFFFFFFF:FFFF/BF/FFFEFF?DECAFEFFFFFE:FFFFFFFB\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:14751:26540\t77\t*\t0\t0\t*\t*\t0\t0\tTAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACTGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGTTGTGCACGCGATAGCATTGCGCGACGCTGGCGCCGGCGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTG\tAAA?1CFFFFADGEEGFGB1112DGDGHGFGHHCG/ECEBGGHDFGHHFHGHEB1BCGFFE2EGHHGHFFFHHBFFHEFCGGHHFHHHHH111BFFHGHEHBEHGGECEFHGFHFGGDBBGHHBHHHH0GH22FGHGFFFH1BFCG0F@FGG11@GDHFG1D/1FGFHH/FCG.>0><-<@CCFFG.CC-@C?C9FFF0C---;------;9----9-9@-AAFF9B9---9-/;B9BF/9BB//B/;///\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:14751:26540\t141\t*\t0\t0\t*\t*\t0\t0\tATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGTTGGGCTATTTGGGTTTTTTGACCCTGAAG\tBBBBBFBBBBBFGGGGGGGGGGHHHHGGFHGGHGGCHHHHHHGHHHGHHGEGGGHHHHHHHHHHEFHHHHHHGEE?FGHGEHGGHHHGGGGGGEHHGGGGHHGGGEGHHHGHGGGDFGHHGHGGGGGCGAFFCCDFHHHH1CGGHBHFHFCGFFCDFHGCCE.CC:EGFHHCGHHGCF?FGGGFGGG;B9;FFFFFFEGEBF0;;;0;CFBFFF?D.DE.:..99-...;;//9A.;DE.9-./:FB.;//\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:15519:10008\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACC\tBBBBBFFFFFFFGGGGGGCBGGE?GGGHHHHHGHHBEGGHHGGGGGHHHHHHHHHHHGGHHHHGFGGGGHGHGCFGHHHGGGCGGHGHGGGGGHFGGGHHHHHHGCEFGGHHHHGGGGGGGHGG/CEGHHHHGFHHHGFHHGFFHGHGHFGGEGFDDGGBCGHHGFHH/CHHHHGHGHF0CFGGGGGGGFFFFFBFFFFFFGFFGGF?DGEDEEFEFFFF?FFFFFFFFFFFFFFFBFFF.BFFFBFBBA;\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:15519:10008\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAG\tBBCBCFFFFFFFGGGGGGGGGGHHHGHHHFHHBGHHHGGGGHHHHHHGHHHHHHHHHHHHHHHGGHGGHHGHHHGGBGHHHHHHHHHHHHHHHHHGGFHHHGGGEGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGDGGGGGGGGGBFFFFFFFFFFFFFFFFFFFECB-=BFFFFFFFFBB?E-A::FFBFFFFFBFFFFFFFFFFFFBFFEFFF;0BFF0:FE?FFFFBFFFFFFFFFFFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:16700:6843\t77\t*\t0\t0\t*\t*\t0\t0\tAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCTGTCTCTTATACACATCTCCGAGCC\tBBBBBFFFFFFFGGGGGGGGGGHHHHGHHHHHHHHHHHHGGGGGHHHHHGGHGHGGGGGGHHHGFFGHHGGGGHHHHHHCGG@FGHFHFEGGGGGGHGGGGDGHHHHHHHHHHHHHHGHHGHGHHGGGGGCGHEHGHHHFHHHFF.DGHHHHHHGHHHHHHGFGHGCGHGHHHHHHHHGHHHCD?:A::FCDGEGFGFFBFGBFGGGF00CBFFFF/BFBFFFFAE.FBBFBFFFFB/BFFBFFF/ADCAD\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 7, "time_seconds": 103.26993894577026, "inputs": {"library|input_1": {"src": "hda", "id": "580d6b0d7ee44f77"}, "library|input_2": {"src": "hda", "id": "6d4a6c2b5ab08883"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "309647dce82a5497"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "7c7dc48cf58a4e3f", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:57:40.624782", "create_time": "2022-10-22T16:56:16.503856", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-dddhx", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/1/1/2/dataset_11236465-19ba-42ad-9f2f-91b26ded2825.dat' genome && ln -s -f '/galaxy/server/database/objects/1/1/2/dataset_11236465-19ba-42ad-9f2f-91b26ded2825.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/9/7/4/dataset_9749dfab-9568-42d0-83f0-c06964fd906e.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/0/e/b/dataset_0ebbf629-9afe-4cdb-93f5-8f9eec10f78b.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/4/c/4/dataset_4c468b83-d3d6-49bf-8b21-4d336cabbd03.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 178, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 176, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 177, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "580d6b0d7ee44f77", "src": "hda", "uuid": "9749dfab-9568-42d0-83f0-c06964fd906e"}, "input_2": {"id": "6d4a6c2b5ab08883", "src": "hda", "uuid": "0ebbf629-9afe-4cdb-93f5-8f9eec10f78b"}, "own_file": {"id": "309647dce82a5497", "src": "hda", "uuid": "11236465-19ba-42ad-9f2f-91b26ded2825"}}, "outputs": {"output": {"id": "069470a61d303261", "src": "hda", "uuid": "4c468b83-d3d6-49bf-8b21-4d336cabbd03"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/1/2/dataset_11236465-19ba-42ad-9f2f-91b26ded2825.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\nGetting block 2 of 30\n  bucket 1: 30%\n  Reserving size (777) for bucket 2\n  bucket 1: 40%\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 50%\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 70%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 80%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 90%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 100%\n  bucket 3: 30%\n  Sorting block of length 689 for bucket 1\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 4: 40%\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  bucket 5: 10%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 6: 30%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\n  bucket 7: 30%\n  bucket 8: 10%\nReturning block of 306 for bucket 6\n  bucket 7: 40%\n  bucket 8: 20%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 9: 60%\n  bucket 10: 30%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  bucket 10: 90%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\nGetting block 12 of 30\n  Calculating Z arrays for bucket 11\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 70%\n  bucket 12: 80%\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\nGetting block 14 of 30\n  bucket 13: 30%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 60%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 70%\n  bucket 16: 10%\n  bucket 15: 80%\n  bucket 16: 20%\n  bucket 15: 90%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 17: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 17: 30%\n  bucket 18: 50%\n  bucket 17: 40%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 17: 50%\n  bucket 18: 80%\n  bucket 17: 60%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  bucket 19: 10%\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 19: 60%\n  bucket 20: 60%\n  bucket 19: 70%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 30%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 40%\n  bucket 22: 10%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 22: 30%\n  bucket 21: 80%\n  bucket 22: 40%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\nGetting block 28 of 30\n  bucket 27: 50%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 28: 10%\n  bucket 27: 80%\n  bucket 28: 20%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 4: 20%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 4: 30%\n  bucket 1: 80%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 1: 100%\n  bucket 2: 50%\n  bucket 4: 50%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 2: 80%\n  Sorting block time: 00:00:00\n  bucket 4: 80%\nReturning block of 485 for bucket 1\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 2: 100%\n  bucket 3: 100%\n  Sorting block of length 774 for bucket 2\n  bucket 4: 100%\n  (Using difference cover)\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 8 of 30\nReturning block of 180 for bucket 6\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 11 of 30\nGetting block 10 of 30\n  Reserving size (777) for bucket 11\n  Reserving size (777) for bucket 10\n  bucket 9: 20%\n  Calculating Z arrays for bucket 11\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 10:\n  bucket 11: 10%\n  bucket 10: 10%\n  bucket 11: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 11: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 11: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 11: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 60%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 9: 70%\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 9: 80%\n  bucket 10: 100%\n  bucket 11: 80%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 11: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\nGetting block 14 of 30\n  bucket 13: 80%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 90%\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 15: 30%\n  bucket 14: 40%\n  bucket 15: 40%\n  Sorting block time: 00:00:00\n  bucket 14: 50%\nReturning block of 596 for bucket 13\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 14: 60%\n  bucket 15: 70%\n  bucket 14: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 14: 80%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 14: 90%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 18: 30%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 18: 40%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 18: 50%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 18: 60%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 18: 70%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 18: 80%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 18: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 20: 90%\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\nGetting block 23 of 30\n  Calculating Z arrays for bucket 22\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 22: 60%\n  bucket 23: 60%\n  bucket 22: 70%\n  bucket 23: 70%\n  bucket 22: 80%\n  bucket 23: 80%\n  bucket 22: 90%\n  bucket 23: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 30\n  Entering block accumulator loop for bucket 24:\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 25: 20%\n  bucket 24: 40%\n  bucket 25: 30%\n  bucket 24: 50%\n  bucket 25: 40%\n  bucket 24: 60%\n  bucket 25: 50%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 25: 60%\n  bucket 24: 90%\n  bucket 25: 70%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\nGetting block 27 of 30\n  bucket 26: 60%\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 26: 70%\n  bucket 27: 20%\n  bucket 26: 80%\n  bucket 27: 30%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 90%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/1/2/dataset_11236465-19ba-42ad-9f2f-91b26ded2825.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\nGetting block 2 of 30\n  bucket 1: 30%\n  Reserving size (777) for bucket 2\n  bucket 1: 40%\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 50%\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 70%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 80%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 90%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 100%\n  bucket 3: 30%\n  Sorting block of length 689 for bucket 1\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 4: 40%\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  bucket 5: 10%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 6: 30%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\n  bucket 7: 30%\n  bucket 8: 10%\nReturning block of 306 for bucket 6\n  bucket 7: 40%\n  bucket 8: 20%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 9: 60%\n  bucket 10: 30%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  bucket 10: 90%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\nGetting block 12 of 30\n  Calculating Z arrays for bucket 11\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  bucket 12: 70%\n  bucket 12: 80%\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\nGetting block 14 of 30\n  bucket 13: 30%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 60%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 70%\n  bucket 16: 10%\n  bucket 15: 80%\n  bucket 16: 20%\n  bucket 15: 90%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 17: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 17: 30%\n  bucket 18: 50%\n  bucket 17: 40%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 17: 50%\n  bucket 18: 80%\n  bucket 17: 60%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  bucket 19: 10%\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 19: 60%\n  bucket 20: 60%\n  bucket 19: 70%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 30%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 40%\n  bucket 22: 10%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 22: 30%\n  bucket 21: 80%\n  bucket 22: 40%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\nGetting block 28 of 30\n  bucket 27: 50%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 28: 10%\n  bucket 27: 80%\n  bucket 28: 20%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 4: 20%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 4: 30%\n  bucket 1: 80%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 1: 100%\n  bucket 2: 50%\n  bucket 4: 50%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 2: 80%\n  Sorting block time: 00:00:00\n  bucket 4: 80%\nReturning block of 485 for bucket 1\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 2: 100%\n  bucket 3: 100%\n  Sorting block of length 774 for bucket 2\n  bucket 4: 100%\n  (Using difference cover)\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 8 of 30\nReturning block of 180 for bucket 6\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 11 of 30\nGetting block 10 of 30\n  Reserving size (777) for bucket 11\n  Reserving size (777) for bucket 10\n  bucket 9: 20%\n  Calculating Z arrays for bucket 11\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 10:\n  bucket 11: 10%\n  bucket 10: 10%\n  bucket 11: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 11: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 11: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 11: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 60%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 9: 70%\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 9: 80%\n  bucket 10: 100%\n  bucket 11: 80%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 11: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\nGetting block 14 of 30\n  bucket 13: 80%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 90%\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 15: 30%\n  bucket 14: 40%\n  bucket 15: 40%\n  Sorting block time: 00:00:00\n  bucket 14: 50%\nReturning block of 596 for bucket 13\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 14: 60%\n  bucket 15: 70%\n  bucket 14: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 14: 80%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 14: 90%\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 18: 30%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 18: 40%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 18: 50%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 18: 60%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 18: 70%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 18: 80%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 18: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 20: 90%\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\nGetting block 23 of 30\n  Calculating Z arrays for bucket 22\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 22: 60%\n  bucket 23: 60%\n  bucket 22: 70%\n  bucket 23: 70%\n  bucket 22: 80%\n  bucket 23: 80%\n  bucket 22: 90%\n  bucket 23: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 30\n  Entering block accumulator loop for bucket 24:\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 25: 20%\n  bucket 24: 40%\n  bucket 25: 30%\n  bucket 24: 50%\n  bucket 25: 40%\n  bucket 24: 60%\n  bucket 25: 50%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 25: 60%\n  bucket 24: 90%\n  bucket 25: 70%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\nGetting block 27 of 30\n  bucket 26: 60%\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 26: 70%\n  bucket 27: 20%\n  bucket 26: 80%\n  bucket 27: 30%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 90%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:57:31", "plugin": "core", "name": "end_epoch", "raw_value": "1666457851.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:57:30", "plugin": "core", "name": "start_epoch", "raw_value": "1666457850.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_wjk_d16e.sam v. /tmp/history_bam_converted_to_sam_jlwt_e0k.sam )\n--- local_file\n+++ history_data\n@@ -1,23 +1,24 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/mvandenb/miniconda3/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -f -1 input_f.fasta -2 input_r.fasta\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -f -1 input_f.fasta -2 input_r.fasta\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/139/tmp -O bam -o /galaxy/server/database/objects/4/c/4/dataset_4c468b83-d3d6-49bf-8b21-4d336cabbd03.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t24\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-47\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-47\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I208M11I6M\t=\t1\t-218\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-151\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:33\tNM:i:40\tMD:Z:0G0A1C68A141A0T0T1\tYS:i:-143\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I208M11I6M\t=\t1\t218\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-151\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:33\tNM:i:40\tMD:Z:0G0A1C68A141A0T0T1\tYS:i:-143\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t6\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-146\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-140\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t233M3I7M1I7M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-64\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:4\tNM:i:11\tMD:Z:72A158A1A0A1A6A0T2\tYS:i:-83\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t233M3I7M1I7M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-64\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:4\tNM:i:11\tMD:Z:72A158A1A0A1A6A0T2\tYS:i:-83\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n********\n*SNIP *\n********\n@@ -103,24 +122,6 @@\n M01368:8:000000000-A3GHV:1:1104:13832:4398\t141\t*\t0\t0\t*\t*\t0\t0\tGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGATCTCGGGGGGTGCCGGCTCATTAAAAAAAGAAGATGTCGAGATGTCAGTGCGTGAGTGGAAGTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:24927:22253\t77\t*\t0\t0\t*\t*\t0\t0\tAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:24927:22253\t141\t*\t0\t0\t*\t*\t0\t0\tGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGGGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACGAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11310:21761\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11310:21761\t141\t*\t0\t0\t*\t*\t0\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCTCC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11578:14676\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:11578:14676\t141\t*\t0\t0\t*\t*\t0\t0\tGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:13575:19255\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGTTCCCGTGAGTGGTTAATAGGGTGATAGGCCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:13575:19255\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTGGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTAACTATTACAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:17564:15723\t77\t*\t0\t0\t*\t*\t0\t0\tTATGCTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:17564:15723\t141\t*\t0\t0\t*\t*\t0\t0\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:18108:12091\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACAC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:18108:12091\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:15481:16176\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:26031:14826\t77\t*\t0\t0\t*\t*\t0\t0\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATATCGTATGCCGTCTTCTGCTTGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:26031:14826\t141\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGACCTAGTGGTGATATAGGGGTGTCCCGCGTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:27607:15990\t77\t*\t0\t0\t*\t*\t0\t0\tGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGACTTCTGCTTGAAAAAAAAAAACTACAACCCACGGACGCA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-8", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 8, "time_seconds": 113.29962205886841, "inputs": {"library|input_1": {"src": "hda", "id": "fc1b41610a506a33"}, "library|input_2": {"src": "hda", "id": "bdf313cb8d01d98b"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "891967302346c618"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "sam_options|reorder": true, "sam_options|sam_options_selector": "yes"}, "job": {"model_class": "Job", "id": "12b8f0b482bfb7f6", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:58:49.897800", "create_time": "2022-10-22T16:57:18.881403", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-8s7tm", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/5/c/5/dataset_5c58a803-01fe-4a63-8a5f-d8c8b5665fb3.dat' genome && ln -s -f '/galaxy/server/database/objects/5/c/5/dataset_5c58a803-01fe-4a63-8a5f-d8c8b5665fb3.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/4/0/2/dataset_402e12c8-948b-41a9-b07b-34f287835968.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/d/b/b/dataset_dbb17998-04d6-484d-b14f-4c0d617ec631.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                    --reorder   | samtools view -bS - -o '/galaxy/server/database/objects/0/b/0/dataset_0b0929b5-560d-40ba-8e31-38ec3e98f76b.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 0, \"no_unal\": \"false\", \"omit_sec_seq\": \"false\", \"reorder\": \"true\", \"sam_no_qname_trunc\": \"false\", \"sam_opt\": \"false\", \"sam_options_selector\": \"yes\", \"soft_clipped_unmapped_tlen\": \"false\", \"xeq\": \"false\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 185, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 183, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 184, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "fc1b41610a506a33", "src": "hda", "uuid": "402e12c8-948b-41a9-b07b-34f287835968"}, "input_2": {"id": "bdf313cb8d01d98b", "src": "hda", "uuid": "dbb17998-04d6-484d-b14f-4c0d617ec631"}, "own_file": {"id": "891967302346c618", "src": "hda", "uuid": "5c58a803-01fe-4a63-8a5f-d8c8b5665fb3"}}, "outputs": {"output": {"id": "bdf48967a10060ac", "src": "hda", "uuid": "0b0929b5-560d-40ba-8e31-38ec3e98f76b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/5/c/5/dataset_5c58a803-01fe-4a63-8a5f-d8c8b5665fb3.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Entering block accumulator loop for bucket 1:\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 1: 50%\n  bucket 3: 40%\n  bucket 2: 30%\n  bucket 4: 30%\n  bucket 1: 60%\n  bucket 3: 50%\n  bucket 2: 40%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 2: 50%\n  bucket 4: 50%\n  bucket 1: 80%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 1: 100%\n  bucket 2: 70%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 2: 80%\n  bucket 3: 100%\n  bucket 4: 90%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\nGetting block 6 of 30\n  bucket 5: 50%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 60%\n  bucket 6: 10%\n  bucket 5: 70%\n  bucket 6: 20%\n  bucket 5: 80%\n  bucket 6: 30%\n  bucket 5: 90%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  bucket 7: 40%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 7: 70%\n  bucket 8: 30%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\nGetting block 12 of 30\n  bucket 11: 100%\n  Reserving size (777) for bucket 12\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\nGetting block 16 of 30\n  bucket 15: 70%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 80%\n  bucket 16: 10%\n  bucket 15: 90%\n  bucket 16: 20%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 17: 30%\n  bucket 18: 40%\n  bucket 17: 40%\n  bucket 18: 50%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 17: 60%\n  bucket 18: 80%\n  bucket 17: 70%\n  bucket 18: 90%\n  bucket 17: 80%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  bucket 19: 10%\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 19: 60%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 50%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 60%\n  bucket 22: 10%\n  bucket 21: 70%\n  bucket 22: 20%\n  bucket 21: 80%\n  bucket 22: 30%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 40%\n  bucket 22: 50%\n  Sorting block time: 00:00:00\n  bucket 22: 60%\nReturning block of 22 for bucket 21\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\nGetting block 24 of 30\n  Calculating Z arrays for bucket 23\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 23: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 20%\n  bucket 24: 40%\n  bucket 23: 30%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 40%\n  bucket 24: 80%\n  bucket 23: 50%\n  bucket 24: 90%\n  bucket 23: 60%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 30\n  bucket 25: 10%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 26: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 40%\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 28: 50%\n  bucket 29: 20%\n  bucket 28: 60%\n  bucket 29: 30%\n  bucket 28: 70%\n  bucket 29: 40%\n  bucket 28: 80%\n  bucket 29: 50%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 4 of 30\n  Reserving size (777) for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 10%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 1: 20%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 2: 50%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 1: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 2: 70%\n  bucket 3: 50%\n  bucket 2: 80%\n  bucket 4: 50%\n  bucket 1: 40%\n  bucket 2: 90%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 1: 50%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 1: 60%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 1: 70%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\nGetting block 6 of 30\n  bucket 5: 80%\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  bucket 5: 90%\nGetting block 8 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  bucket 5: 100%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 7\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\nReturning block of 777 for bucket 5\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 6: 40%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 6: 60%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 6: 70%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 8: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 8: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  bucket 8: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 10: 20%\n  bucket 11: 20%\n  bucket 10: 30%\n  bucket 11: 30%\n  bucket 10: 40%\n  bucket 11: 40%\n  bucket 10: 50%\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 10: 60%\n  bucket 11: 60%\n  bucket 12: 10%\n  bucket 10: 70%\n  bucket 11: 70%\n  bucket 12: 20%\n  bucket 10: 80%\n  bucket 11: 80%\n  bucket 12: 30%\n  bucket 11: 90%\n  bucket 10: 90%\n  bucket 12: 40%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 10: 100%\n  bucket 12: 50%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\nGetting block 20 of 30\n  Calculating Z arrays for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 30%\n  bucket 20: 50%\n  bucket 19: 40%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 19: 50%\n  bucket 20: 80%\n  bucket 19: 60%\n  bucket 20: 90%\n  bucket 19: 70%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\nGetting block 22 of 30\n  Calculating Z arrays for bucket 21\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  bucket 23: 10%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 24: 70%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  bucket 24: 80%\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\nGetting block 29 of 30\n  bucket 28: 30%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 40%\n  bucket 29: 10%\n  bucket 28: 50%\n  bucket 29: 20%\n  bucket 28: 60%\n  bucket 29: 30%\n  bucket 28: 70%\n  bucket 29: 40%\n  bucket 28: 80%\n  bucket 29: 50%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/5/c/5/dataset_5c58a803-01fe-4a63-8a5f-d8c8b5665fb3.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Entering block accumulator loop for bucket 1:\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 1: 50%\n  bucket 3: 40%\n  bucket 2: 30%\n  bucket 4: 30%\n  bucket 1: 60%\n  bucket 3: 50%\n  bucket 2: 40%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 2: 50%\n  bucket 4: 50%\n  bucket 1: 80%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 1: 100%\n  bucket 2: 70%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 2: 80%\n  bucket 3: 100%\n  bucket 4: 90%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\nGetting block 6 of 30\n  bucket 5: 50%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 60%\n  bucket 6: 10%\n  bucket 5: 70%\n  bucket 6: 20%\n  bucket 5: 80%\n  bucket 6: 30%\n  bucket 5: 90%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  bucket 7: 40%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 7: 70%\n  bucket 8: 30%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\nGetting block 12 of 30\n  bucket 11: 100%\n  Reserving size (777) for bucket 12\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\nGetting block 16 of 30\n  bucket 15: 70%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 80%\n  bucket 16: 10%\n  bucket 15: 90%\n  bucket 16: 20%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 17: 30%\n  bucket 18: 40%\n  bucket 17: 40%\n  bucket 18: 50%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 17: 60%\n  bucket 18: 80%\n  bucket 17: 70%\n  bucket 18: 90%\n  bucket 17: 80%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  bucket 19: 10%\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 19: 60%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 50%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 60%\n  bucket 22: 10%\n  bucket 21: 70%\n  bucket 22: 20%\n  bucket 21: 80%\n  bucket 22: 30%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 40%\n  bucket 22: 50%\n  Sorting block time: 00:00:00\n  bucket 22: 60%\nReturning block of 22 for bucket 21\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\nGetting block 24 of 30\n  Calculating Z arrays for bucket 23\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 23: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 20%\n  bucket 24: 40%\n  bucket 23: 30%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 40%\n  bucket 24: 80%\n  bucket 23: 50%\n  bucket 24: 90%\n  bucket 23: 60%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 30\n  bucket 25: 10%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 26: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 40%\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 28: 50%\n  bucket 29: 20%\n  bucket 28: 60%\n  bucket 29: 30%\n  bucket 28: 70%\n  bucket 29: 40%\n  bucket 28: 80%\n  bucket 29: 50%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 4 of 30\n  Reserving size (777) for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 10%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 1: 20%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 2: 50%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 1: 30%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 2: 70%\n  bucket 3: 50%\n  bucket 2: 80%\n  bucket 4: 50%\n  bucket 1: 40%\n  bucket 2: 90%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 1: 50%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 1: 60%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 1: 70%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\nGetting block 6 of 30\n  bucket 5: 80%\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  bucket 5: 90%\nGetting block 8 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  bucket 5: 100%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 7\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\nReturning block of 777 for bucket 5\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 6: 40%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 6: 60%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 6: 70%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 8: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 8: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  bucket 8: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 10: 20%\n  bucket 11: 20%\n  bucket 10: 30%\n  bucket 11: 30%\n  bucket 10: 40%\n  bucket 11: 40%\n  bucket 10: 50%\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 10: 60%\n  bucket 11: 60%\n  bucket 12: 10%\n  bucket 10: 70%\n  bucket 11: 70%\n  bucket 12: 20%\n  bucket 10: 80%\n  bucket 11: 80%\n  bucket 12: 30%\n  bucket 11: 90%\n  bucket 10: 90%\n  bucket 12: 40%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 10: 100%\n  bucket 12: 50%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\nGetting block 20 of 30\n  Calculating Z arrays for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 30%\n  bucket 20: 50%\n  bucket 19: 40%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 19: 50%\n  bucket 20: 80%\n  bucket 19: 60%\n  bucket 20: 90%\n  bucket 19: 70%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\nGetting block 22 of 30\n  Calculating Z arrays for bucket 21\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  bucket 23: 10%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 24: 70%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  bucket 24: 80%\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\nGetting block 29 of 30\n  bucket 28: 30%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 40%\n  bucket 29: 10%\n  bucket 28: 50%\n  bucket 29: 20%\n  bucket 28: 60%\n  bucket 29: 30%\n  bucket 28: 70%\n  bucket 29: 40%\n  bucket 28: 80%\n  bucket 29: 50%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:58:42", "plugin": "core", "name": "end_epoch", "raw_value": "1666457922.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:58:41", "plugin": "core", "name": "start_epoch", "raw_value": "1666457921.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0-9", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 9, "time_seconds": 118.06594371795654, "inputs": {"library|input_1": {"src": "hda", "id": "fc1b41610a506a33"}, "library|input_2": {"src": "hda", "id": "bdf313cb8d01d98b"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "891967302346c618"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "sam_options|sam_opt": true, "sam_options|sam_options_selector": "yes"}, "job": {"model_class": "Job", "id": "1d48986d8a218572", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:58:59.379343", "create_time": "2022-10-22T16:57:33.942984", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-b6ccs", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/5/c/5/dataset_5c58a803-01fe-4a63-8a5f-d8c8b5665fb3.dat' genome && ln -s -f '/galaxy/server/database/objects/5/c/5/dataset_5c58a803-01fe-4a63-8a5f-d8c8b5665fb3.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/4/0/2/dataset_402e12c8-948b-41a9-b07b-34f287835968.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/d/b/b/dataset_dbb17998-04d6-484d-b14f-4c0d617ec631.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                       > '/galaxy/server/database/objects/0/2/a/dataset_02a78dc7-4fad-4b0a-90b8-e8539b8ecf74.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 0, \"no_unal\": \"false\", \"omit_sec_seq\": \"false\", \"reorder\": \"false\", \"sam_no_qname_trunc\": \"false\", \"sam_opt\": \"true\", \"sam_options_selector\": \"yes\", \"soft_clipped_unmapped_tlen\": \"false\", \"xeq\": \"false\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 185, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 183, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 184, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "fc1b41610a506a33", "src": "hda", "uuid": "402e12c8-948b-41a9-b07b-34f287835968"}, "input_2": {"id": "bdf313cb8d01d98b", "src": "hda", "uuid": "dbb17998-04d6-484d-b14f-4c0d617ec631"}, "own_file": {"id": "891967302346c618", "src": "hda", "uuid": "5c58a803-01fe-4a63-8a5f-d8c8b5665fb3"}}, "outputs": {"output": {"id": "c29a6123f5bab9df", "src": "hda", "uuid": "02a78dc7-4fad-4b0a-90b8-e8539b8ecf74"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/5/c/5/dataset_5c58a803-01fe-4a63-8a5f-d8c8b5665fb3.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 30\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 3\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 3: 10%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 1: 90%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 2: 100%\n  bucket 3: 90%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 3: 100%\n  bucket 4: 100%\n  Sorting block of length 629 for bucket 3\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 30\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 11: 10%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 11: 20%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 11: 30%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 11: 40%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 11: 80%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 11: 90%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 40%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 50%\n  bucket 15: 10%\n  bucket 14: 60%\n  bucket 15: 20%\n  bucket 14: 70%\n  bucket 15: 30%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 15: 40%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  bucket 21: 40%\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 50%\n  bucket 22: 10%\n  bucket 21: 60%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 22: 30%\n  bucket 21: 90%\n  bucket 22: 40%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\nGetting block 24 of 30\n  bucket 23: 90%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 25: 10%\n  bucket 26: 20%\n  bucket 25: 20%\n  bucket 26: 30%\n  bucket 25: 30%\n  bucket 26: 40%\n  bucket 25: 40%\n  bucket 26: 50%\n  bucket 25: 50%\n  bucket 26: 60%\n  bucket 25: 60%\n  bucket 26: 70%\n  bucket 25: 70%\n  bucket 26: 80%\n  bucket 25: 80%\n  bucket 26: 90%\n  bucket 25: 90%\n  bucket 26: 100%\n  bucket 25: 100%\n  Sorting block of length 643 for bucket 26\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\nGetting block 30 of 30\n  bucket 29: 60%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 70%\n  bucket 30: 10%\n  bucket 29: 80%\n  bucket 30: 20%\n  bucket 29: 90%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 4: 30%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 2: 40%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 1: 50%\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 3: 40%\n  bucket 4: 70%\n  bucket 2: 80%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 1: 70%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 1: 80%\n  bucket 3: 70%\n  bucket 1: 90%\n  bucket 3: 80%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nReturning block of 485 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  bucket 5: 10%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  bucket 8: 80%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Entering block accumulator loop for bucket 9:\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 11: 60%\n  bucket 12: 80%\n  bucket 11: 70%\n  bucket 12: 90%\n  bucket 11: 80%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 40%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 50%\n  bucket 14: 10%\n  bucket 13: 60%\n  bucket 14: 20%\n  bucket 13: 70%\n  bucket 14: 30%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 13: 90%\n  bucket 14: 50%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\nGetting block 16 of 30\n  bucket 15: 20%\n  Reserving size (777) for bucket 16\n  bucket 15: 30%\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 16: 10%\n  bucket 15: 60%\n  bucket 16: 20%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 16: 30%\n  bucket 15: 90%\n  bucket 16: 40%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  Sorting block time: 00:00:00\n  bucket 16: 80%\nReturning block of 630 for bucket 15\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 17: 10%\n  bucket 18: 30%\n  bucket 17: 20%\n  bucket 18: 40%\n  bucket 17: 30%\n  bucket 18: 50%\n  bucket 17: 40%\n  bucket 18: 60%\n  bucket 17: 50%\n  bucket 18: 70%\n  bucket 17: 60%\n  bucket 18: 80%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 30\n  Entering block accumulator loop for bucket 19:\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 22: 10%\n  bucket 21: 60%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 22: 30%\n  bucket 21: 80%\n  bucket 22: 40%\n  bucket 21: 90%\n  bucket 21: 100%\n  bucket 22: 50%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 30%\n  bucket 24: 10%\n  bucket 23: 40%\n  bucket 24: 20%\n  bucket 23: 50%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 23: 100%\n  bucket 24: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\nGetting block 26 of 30\n  Calculating Z arrays for bucket 25\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 25:\n  bucket 26: 10%\n  bucket 25: 10%\n  bucket 26: 20%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  bucket 26: 90%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\nGetting block 28 of 30\n  Calculating Z arrays for bucket 27\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 27: 10%\n  bucket 28: 20%\n  bucket 27: 20%\n  bucket 28: 30%\n  bucket 27: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 27: 40%\n  bucket 28: 60%\n  bucket 27: 50%\n  bucket 28: 70%\n  bucket 27: 60%\n  bucket 28: 80%\n  bucket 27: 70%\n  bucket 28: 90%\n  bucket 27: 80%\n  bucket 28: 100%\n  bucket 27: 90%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\nGetting block 30 of 30\n  bucket 29: 60%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 70%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 80%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 90%\n  bucket 30: 50%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  bucket 30: 60%\n  (Using difference cover)\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/5/c/5/dataset_5c58a803-01fe-4a63-8a5f-d8c8b5665fb3.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 30\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 3\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 3: 10%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 1: 90%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 2: 100%\n  bucket 3: 90%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 3: 100%\n  bucket 4: 100%\n  Sorting block of length 629 for bucket 3\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 8: 50%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 30\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 11: 10%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 11: 20%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 11: 30%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 11: 40%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 11: 80%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 11: 90%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 40%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 50%\n  bucket 15: 10%\n  bucket 14: 60%\n  bucket 15: 20%\n  bucket 14: 70%\n  bucket 15: 30%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 15: 40%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  bucket 21: 40%\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 50%\n  bucket 22: 10%\n  bucket 21: 60%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 22: 30%\n  bucket 21: 90%\n  bucket 22: 40%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\nGetting block 24 of 30\n  bucket 23: 90%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 25: 10%\n  bucket 26: 20%\n  bucket 25: 20%\n  bucket 26: 30%\n  bucket 25: 30%\n  bucket 26: 40%\n  bucket 25: 40%\n  bucket 26: 50%\n  bucket 25: 50%\n  bucket 26: 60%\n  bucket 25: 60%\n  bucket 26: 70%\n  bucket 25: 70%\n  bucket 26: 80%\n  bucket 25: 80%\n  bucket 26: 90%\n  bucket 25: 90%\n  bucket 26: 100%\n  bucket 25: 100%\n  Sorting block of length 643 for bucket 26\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\nGetting block 30 of 30\n  bucket 29: 60%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 70%\n  bucket 30: 10%\n  bucket 29: 80%\n  bucket 30: 20%\n  bucket 29: 90%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 4: 30%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 2: 40%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 1: 50%\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 3: 40%\n  bucket 4: 70%\n  bucket 2: 80%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 1: 70%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 1: 80%\n  bucket 3: 70%\n  bucket 1: 90%\n  bucket 3: 80%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nReturning block of 485 for bucket 1\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  bucket 5: 10%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  bucket 8: 80%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Entering block accumulator loop for bucket 9:\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 11: 60%\n  bucket 12: 80%\n  bucket 11: 70%\n  bucket 12: 90%\n  bucket 11: 80%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 40%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 50%\n  bucket 14: 10%\n  bucket 13: 60%\n  bucket 14: 20%\n  bucket 13: 70%\n  bucket 14: 30%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 13: 90%\n  bucket 14: 50%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\nGetting block 16 of 30\n  bucket 15: 20%\n  Reserving size (777) for bucket 16\n  bucket 15: 30%\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 16: 10%\n  bucket 15: 60%\n  bucket 16: 20%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 16: 30%\n  bucket 15: 90%\n  bucket 16: 40%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  Sorting block time: 00:00:00\n  bucket 16: 80%\nReturning block of 630 for bucket 15\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 17: 10%\n  bucket 18: 30%\n  bucket 17: 20%\n  bucket 18: 40%\n  bucket 17: 30%\n  bucket 18: 50%\n  bucket 17: 40%\n  bucket 18: 60%\n  bucket 17: 50%\n  bucket 18: 70%\n  bucket 17: 60%\n  bucket 18: 80%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 30\n  Entering block accumulator loop for bucket 19:\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 22: 10%\n  bucket 21: 60%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 22: 30%\n  bucket 21: 80%\n  bucket 22: 40%\n  bucket 21: 90%\n  bucket 21: 100%\n  bucket 22: 50%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 30%\n  bucket 24: 10%\n  bucket 23: 40%\n  bucket 24: 20%\n  bucket 23: 50%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 23: 100%\n  bucket 24: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\nGetting block 26 of 30\n  Calculating Z arrays for bucket 25\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 25:\n  bucket 26: 10%\n  bucket 25: 10%\n  bucket 26: 20%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  bucket 26: 90%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\nGetting block 28 of 30\n  Calculating Z arrays for bucket 27\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 27: 10%\n  bucket 28: 20%\n  bucket 27: 20%\n  bucket 28: 30%\n  bucket 27: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 27: 40%\n  bucket 28: 60%\n  bucket 27: 50%\n  bucket 28: 70%\n  bucket 27: 60%\n  bucket 28: 80%\n  bucket 27: 70%\n  bucket 28: 90%\n  bucket 27: 80%\n  bucket 28: 100%\n  bucket 27: 90%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\nGetting block 30 of 30\n  bucket 29: 60%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 70%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 80%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 90%\n  bucket 30: 50%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  bucket 30: 60%\n  (Using difference cover)\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:58:46", "plugin": "core", "name": "end_epoch", "raw_value": "1666457926.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:58:45", "plugin": "core", "name": "start_epoch", "raw_value": "1666457925.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa", "tool_version": "0.7.17.4", "test_index": 0, "time_seconds": 120.68166661262512, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "02b0a381cea8c0de"}, "reference_source|reference_source_selector": "history", "input_type|fastq_input1": {"src": "hda", "id": "3cddb56c17e33e02"}, "input_type|input_type_selector": "single", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "8f38fc5cb51747e7", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:59:08.785821", "create_time": "2022-10-22T16:57:38.600668", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-8lpp6", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/f/f/7/dataset_ff7ea62a-8b11-41c1-8664-ff25be1d809a.dat' 'localref.fa' && bwa index 'localref.fa' &&                 bwa aln -t \"${GALAXY_SLOTS:-1}\"     'localref.fa' '/galaxy/server/database/objects/9/a/d/dataset_9ada2fe3-b5d7-48c9-b223-03a3120f4a34.dat' > first.sai &&  bwa samse    'localref.fa' first.sai '/galaxy/server/database/objects/9/a/d/dataset_9ada2fe3-b5d7-48c9-b223-03a3120f4a34.dat'    | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/0/7/6/dataset_0763790f-4a98-424e-8ec0-c1f21ed9d4ad.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "input_type": "{\"__current_case__\": 2, \"adv_se_options\": {\"__current_case__\": 1, \"adv_se_options_selector\": \"do_not_set\"}, \"fastq_input1\": {\"values\": [{\"id\": 187, \"src\": \"hda\"}]}, \"input_type_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 186, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "02b0a381cea8c0de", "src": "hda", "uuid": "ff7ea62a-8b11-41c1-8664-ff25be1d809a"}, "fastq_input1": {"id": "3cddb56c17e33e02", "src": "hda", "uuid": "9ada2fe3-b5d7-48c9-b223-03a3120f4a34"}}, "outputs": {"bam_output": {"id": "d1035e838b5bf9b8", "src": "hda", "uuid": "0763790f-4a98-424e-8ec0-c1f21ed9d4ad"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.057 sec; CPU: 0.010 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/9/a/d/dataset_9ada2fe3-b5d7-48c9-b223-03a3120f4a34.dat\n[main] Real time: 0.016 sec; CPU: 0.026 sec\n[bwa_aln_core] convert to sequence coordinate... 0.00 sec\n[bwa_aln_core] refine gapped alignments... 0.00 sec\n[bwa_aln_core] print alignments... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa samse localref.fa first.sai /galaxy/server/database/objects/9/a/d/dataset_9ada2fe3-b5d7-48c9-b223-03a3120f4a34.dat\n[main] Real time: 0.007 sec; CPU: 0.003 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.057 sec; CPU: 0.010 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/9/a/d/dataset_9ada2fe3-b5d7-48c9-b223-03a3120f4a34.dat\n[main] Real time: 0.016 sec; CPU: 0.026 sec\n[bwa_aln_core] convert to sequence coordinate... 0.00 sec\n[bwa_aln_core] refine gapped alignments... 0.00 sec\n[bwa_aln_core] print alignments... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa samse localref.fa first.sai /galaxy/server/database/objects/9/a/d/dataset_9ada2fe3-b5d7-48c9-b223-03a3120f4a34.dat\n[main] Real time: 0.007 sec; CPU: 0.003 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:58:53", "plugin": "core", "name": "end_epoch", "raw_value": "1666457933.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:58:53", "plugin": "core", "name": "start_epoch", "raw_value": "1666457933.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa", "tool_version": "0.7.17.4", "test_index": 1, "time_seconds": 110.30140542984009, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "f0c6feea528e6eee"}, "reference_source|reference_source_selector": "history", "input_type|fastq_input1": {"src": "hda", "id": "07f63d8345392f16"}, "input_type|fastq_input2": {"src": "hda", "id": "fd7410e1cb46429f"}, "input_type|input_type_selector": "paired", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "0460e7cd2b84b12d", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:59:30.703233", "create_time": "2022-10-22T16:57:59.822352", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-mw79t", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/f/e/1/dataset_fe13c6a6-53e9-4a06-a247-c02db6a80f27.dat' 'localref.fa' && bwa index 'localref.fa' &&                 bwa aln -t \"${GALAXY_SLOTS:-1}\"   'localref.fa' '/galaxy/server/database/objects/3/f/a/dataset_3fa63ec0-035c-43c5-8d24-413c25a83ff8.dat' > first.sai &&  bwa aln -t \"${GALAXY_SLOTS:-1}\"   'localref.fa' '/galaxy/server/database/objects/b/0/2/dataset_b02d869d-cb8e-4339-b261-803531aa4ff6.dat' > second.sai &&  bwa sampe   'localref.fa' first.sai second.sai '/galaxy/server/database/objects/3/f/a/dataset_3fa63ec0-035c-43c5-8d24-413c25a83ff8.dat' '/galaxy/server/database/objects/b/0/2/dataset_b02d869d-cb8e-4339-b261-803531aa4ff6.dat'    | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/8/f/d/dataset_8fd8bb25-7928-4cc5-9fa1-c9b29ed72914.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "input_type": "{\"__current_case__\": 0, \"adv_pe_options\": {\"__current_case__\": 1, \"adv_pe_options_selector\": \"do_not_set\"}, \"fastq_input1\": {\"values\": [{\"id\": 192, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 193, \"src\": \"hda\"}]}, \"input_type_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 191, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "f0c6feea528e6eee", "src": "hda", "uuid": "fe13c6a6-53e9-4a06-a247-c02db6a80f27"}, "fastq_input1": {"id": "07f63d8345392f16", "src": "hda", "uuid": "3fa63ec0-035c-43c5-8d24-413c25a83ff8"}, "fastq_input2": {"id": "fd7410e1cb46429f", "src": "hda", "uuid": "b02d869d-cb8e-4339-b261-803531aa4ff6"}}, "outputs": {"bam_output": {"id": "23c822330595b017", "src": "hda", "uuid": "8fd8bb25-7928-4cc5-9fa1-c9b29ed72914"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.063 sec; CPU: 0.010 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/3/f/a/dataset_3fa63ec0-035c-43c5-8d24-413c25a83ff8.dat\n[main] Real time: 0.017 sec; CPU: 0.025 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/b/0/2/dataset_b02d869d-cb8e-4339-b261-803531aa4ff6.dat\n[main] Real time: 0.016 sec; CPU: 0.021 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/3/f/a/dataset_3fa63ec0-035c-43c5-8d24-413c25a83ff8.dat /galaxy/server/database/objects/b/0/2/dataset_b02d869d-cb8e-4339-b261-803531aa4ff6.dat\n[main] Real time: 0.008 sec; CPU: 0.003 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.063 sec; CPU: 0.010 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/3/f/a/dataset_3fa63ec0-035c-43c5-8d24-413c25a83ff8.dat\n[main] Real time: 0.017 sec; CPU: 0.025 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/b/0/2/dataset_b02d869d-cb8e-4339-b261-803531aa4ff6.dat\n[main] Real time: 0.016 sec; CPU: 0.021 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/3/f/a/dataset_3fa63ec0-035c-43c5-8d24-413c25a83ff8.dat /galaxy/server/database/objects/b/0/2/dataset_b02d869d-cb8e-4339-b261-803531aa4ff6.dat\n[main] Real time: 0.008 sec; CPU: 0.003 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:59:15", "plugin": "core", "name": "end_epoch", "raw_value": "1666457955.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:59:15", "plugin": "core", "name": "start_epoch", "raw_value": "1666457955.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa", "tool_version": "0.7.17.4", "test_index": 2, "time_seconds": 135.21125483512878, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "82499597283b968a"}, "reference_source|reference_source_selector": "history", "input_type|fastq_input1": {"src": "hda", "id": "5fb95fb7a5839616"}, "input_type|fastq_input2": {"src": "hda", "id": "ddecc7a9e7cfda53"}, "input_type|input_type_selector": "paired", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "056653edda57a6c4", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:01:05.514200", "create_time": "2022-10-22T16:59:17.399335", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-tghkc", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/0/0/8/dataset_008c89f7-5c62-47ed-9a3c-538f0c974e35.dat' 'localref.fa' && bwa index 'localref.fa' &&                 bwa aln -t \"${GALAXY_SLOTS:-1}\"   'localref.fa' '/galaxy/server/database/objects/0/6/a/dataset_06ab09d9-aa10-49ac-8519-971eda462852.dat' > first.sai &&  bwa aln -t \"${GALAXY_SLOTS:-1}\"   'localref.fa' '/galaxy/server/database/objects/7/d/a/dataset_7da78fb6-7393-4dc0-b1b8-f4f6d8d4e3a6.dat' > second.sai &&  bwa sampe   'localref.fa' first.sai second.sai '/galaxy/server/database/objects/0/6/a/dataset_06ab09d9-aa10-49ac-8519-971eda462852.dat' '/galaxy/server/database/objects/7/d/a/dataset_7da78fb6-7393-4dc0-b1b8-f4f6d8d4e3a6.dat'    | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/1/5/5/dataset_155a54e6-9352-4c9a-afad-7b192475c8df.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "input_type": "{\"__current_case__\": 0, \"adv_pe_options\": {\"__current_case__\": 1, \"adv_pe_options_selector\": \"do_not_set\"}, \"fastq_input1\": {\"values\": [{\"id\": 196, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 202, \"src\": \"hda\"}]}, \"input_type_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 200, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "82499597283b968a", "src": "hda", "uuid": "008c89f7-5c62-47ed-9a3c-538f0c974e35"}, "fastq_input1": {"id": "5fb95fb7a5839616", "src": "hda", "uuid": "06ab09d9-aa10-49ac-8519-971eda462852"}, "fastq_input2": {"id": "ddecc7a9e7cfda53", "src": "hda", "uuid": "7da78fb6-7393-4dc0-b1b8-f4f6d8d4e3a6"}}, "outputs": {"bam_output": {"id": "76f535192e91c613", "src": "hda", "uuid": "155a54e6-9352-4c9a-afad-7b192475c8df"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.053 sec; CPU: 0.009 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/0/6/a/dataset_06ab09d9-aa10-49ac-8519-971eda462852.dat\n[main] Real time: 0.017 sec; CPU: 0.026 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/7/d/a/dataset_7da78fb6-7393-4dc0-b1b8-f4f6d8d4e3a6.dat\n[main] Real time: 0.018 sec; CPU: 0.022 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/0/6/a/dataset_06ab09d9-aa10-49ac-8519-971eda462852.dat /galaxy/server/database/objects/7/d/a/dataset_7da78fb6-7393-4dc0-b1b8-f4f6d8d4e3a6.dat\n[main] Real time: 0.009 sec; CPU: 0.004 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.053 sec; CPU: 0.009 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/0/6/a/dataset_06ab09d9-aa10-49ac-8519-971eda462852.dat\n[main] Real time: 0.017 sec; CPU: 0.026 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/7/d/a/dataset_7da78fb6-7393-4dc0-b1b8-f4f6d8d4e3a6.dat\n[main] Real time: 0.018 sec; CPU: 0.022 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/0/6/a/dataset_06ab09d9-aa10-49ac-8519-971eda462852.dat /galaxy/server/database/objects/7/d/a/dataset_7da78fb6-7393-4dc0-b1b8-f4f6d8d4e3a6.dat\n[main] Real time: 0.009 sec; CPU: 0.004 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:00:52", "plugin": "core", "name": "end_epoch", "raw_value": "1666458052.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:00:52", "plugin": "core", "name": "start_epoch", "raw_value": "1666458052.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa", "tool_version": "0.7.17.4", "test_index": 3, "time_seconds": 113.83284068107605, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "82499597283b968a"}, "reference_source|reference_source_selector": "history", "input_type|bam_input": {"src": "hda", "id": "a0f2215e28e812bc"}, "input_type|input_type_selector": "paired_bam", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "1f1cc3143f81345a", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:00:52.994805", "create_time": "2022-10-22T16:59:26.879721", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-bzjwq", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/0/0/8/dataset_008c89f7-5c62-47ed-9a3c-538f0c974e35.dat' 'localref.fa' && bwa index 'localref.fa' &&                 bwa aln -t \"${GALAXY_SLOTS:-1}\" -b -1   'localref.fa' '/galaxy/server/database/objects/3/2/c/dataset_32c28e79-0d54-4e8b-b59d-c947e129c976.dat' > first.sai &&  bwa aln -t \"${GALAXY_SLOTS:-1}\" -b -2   'localref.fa' '/galaxy/server/database/objects/3/2/c/dataset_32c28e79-0d54-4e8b-b59d-c947e129c976.dat' > second.sai &&  bwa sampe    'localref.fa' first.sai second.sai '/galaxy/server/database/objects/3/2/c/dataset_32c28e79-0d54-4e8b-b59d-c947e129c976.dat' '/galaxy/server/database/objects/3/2/c/dataset_32c28e79-0d54-4e8b-b59d-c947e129c976.dat'    | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/e/1/5/dataset_e156fe2a-69d7-4753-b6a3-5be106121ea9.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "input_type": "{\"__current_case__\": 3, \"adv_bam_pe_options\": {\"__current_case__\": 1, \"adv_pe_options_selector\": \"do_not_set\"}, \"bam_input\": {\"values\": [{\"id\": 199, \"src\": \"hda\"}]}, \"input_type_selector\": \"paired_bam\"}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 200, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "82499597283b968a", "src": "hda", "uuid": "008c89f7-5c62-47ed-9a3c-538f0c974e35"}, "bam_input": {"id": "a0f2215e28e812bc", "src": "hda", "uuid": "32c28e79-0d54-4e8b-b59d-c947e129c976"}}, "outputs": {"bam_output": {"id": "51be122c2cc93b62", "src": "hda", "uuid": "e156fe2a-69d7-4753-b6a3-5be106121ea9"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.065 sec; CPU: 0.011 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 -b -1 localref.fa /galaxy/server/database/objects/3/2/c/dataset_32c28e79-0d54-4e8b-b59d-c947e129c976.dat\n[main] Real time: 0.020 sec; CPU: 0.026 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 -b -2 localref.fa /galaxy/server/database/objects/3/2/c/dataset_32c28e79-0d54-4e8b-b59d-c947e129c976.dat\n[main] Real time: 0.016 sec; CPU: 0.023 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/3/2/c/dataset_32c28e79-0d54-4e8b-b59d-c947e129c976.dat /galaxy/server/database/objects/3/2/c/dataset_32c28e79-0d54-4e8b-b59d-c947e129c976.dat\n[main] Real time: 0.012 sec; CPU: 0.006 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.065 sec; CPU: 0.011 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 -b -1 localref.fa /galaxy/server/database/objects/3/2/c/dataset_32c28e79-0d54-4e8b-b59d-c947e129c976.dat\n[main] Real time: 0.020 sec; CPU: 0.026 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 -b -2 localref.fa /galaxy/server/database/objects/3/2/c/dataset_32c28e79-0d54-4e8b-b59d-c947e129c976.dat\n[main] Real time: 0.016 sec; CPU: 0.023 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe localref.fa first.sai second.sai /galaxy/server/database/objects/3/2/c/dataset_32c28e79-0d54-4e8b-b59d-c947e129c976.dat /galaxy/server/database/objects/3/2/c/dataset_32c28e79-0d54-4e8b-b59d-c947e129c976.dat\n[main] Real time: 0.012 sec; CPU: 0.006 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:00:44", "plugin": "core", "name": "end_epoch", "raw_value": "1666458044.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:00:44", "plugin": "core", "name": "start_epoch", "raw_value": "1666458044.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa", "tool_version": "0.7.17.4", "test_index": 4, "time_seconds": 132.83451676368713, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "a7ae668ec845388f"}, "reference_source|reference_source_selector": "history", "input_type|fastq_input1": {"src": "hda", "id": "53d249969540df77"}, "input_type|fastq_input2": {"src": "hda", "id": "b33d1275133f0f20"}, "input_type|input_type_selector": "paired", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "84999953dd8597ae", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:01:21.585124", "create_time": "2022-10-22T16:59:38.561982", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa/0.7.17.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-cxjcq", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/0/d/7/dataset_0d7e022b-2172-4067-b9c7-b7b02e78784e.dat' 'localref.fa' && bwa index 'localref.fa' &&                            bwa aln -t \"${GALAXY_SLOTS:-1}\"   'localref.fa' '/galaxy/server/database/objects/2/1/5/dataset_215d4e18-b5c3-4d80-ae38-935543a5068e.dat' > first.sai &&  bwa aln -t \"${GALAXY_SLOTS:-1}\"   'localref.fa' '/galaxy/server/database/objects/0/e/b/dataset_0ebae3df-693b-4dd8-97c7-d23f43c641b4.dat' > second.sai &&  bwa sampe    -r '@RG\\tID:rg1\\tPL:CAPILLARY'  'localref.fa' first.sai second.sai '/galaxy/server/database/objects/2/1/5/dataset_215d4e18-b5c3-4d80-ae38-935543a5068e.dat' '/galaxy/server/database/objects/0/e/b/dataset_0ebae3df-693b-4dd8-97c7-d23f43c641b4.dat'    | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/3/b/2/dataset_3b29a56c-569d-4793-a8c4-572cecbd317a.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "input_type": "{\"__current_case__\": 0, \"adv_pe_options\": {\"__current_case__\": 1, \"adv_pe_options_selector\": \"do_not_set\"}, \"fastq_input1\": {\"values\": [{\"id\": 206, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 207, \"src\": \"hda\"}]}, \"input_type_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 205, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "a7ae668ec845388f", "src": "hda", "uuid": "0d7e022b-2172-4067-b9c7-b7b02e78784e"}, "fastq_input1": {"id": "53d249969540df77", "src": "hda", "uuid": "215d4e18-b5c3-4d80-ae38-935543a5068e"}, "fastq_input2": {"id": "b33d1275133f0f20", "src": "hda", "uuid": "0ebae3df-693b-4dd8-97c7-d23f43c641b4"}}, "outputs": {"bam_output": {"id": "bc9d15ab0c5da73c", "src": "hda", "uuid": "3b29a56c-569d-4793-a8c4-572cecbd317a"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.055 sec; CPU: 0.009 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/2/1/5/dataset_215d4e18-b5c3-4d80-ae38-935543a5068e.dat\n[main] Real time: 0.015 sec; CPU: 0.026 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/0/e/b/dataset_0ebae3df-693b-4dd8-97c7-d23f43c641b4.dat\n[main] Real time: 0.019 sec; CPU: 0.027 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe -r @RG\\tID:rg1\\tPL:CAPILLARY localref.fa first.sai second.sai /galaxy/server/database/objects/2/1/5/dataset_215d4e18-b5c3-4d80-ae38-935543a5068e.dat /galaxy/server/database/objects/0/e/b/dataset_0ebae3df-693b-4dd8-97c7-d23f43c641b4.dat\n[main] Real time: 0.011 sec; CPU: 0.004 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.055 sec; CPU: 0.009 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/2/1/5/dataset_215d4e18-b5c3-4d80-ae38-935543a5068e.dat\n[main] Real time: 0.015 sec; CPU: 0.026 sec\n[bwa_aln] 17bp reads: max_diff = 2\n[bwa_aln] 38bp reads: max_diff = 3\n[bwa_aln] 64bp reads: max_diff = 4\n[bwa_aln] 93bp reads: max_diff = 5\n[bwa_aln] 124bp reads: max_diff = 6\n[bwa_aln] 157bp reads: max_diff = 7\n[bwa_aln] 190bp reads: max_diff = 8\n[bwa_aln] 225bp reads: max_diff = 9\n[bwa_aln_core] calculate SA coordinate... 0.02 sec\n[bwa_aln_core] write to the disk... 0.00 sec\n[bwa_aln_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa aln -t 4 localref.fa /galaxy/server/database/objects/0/e/b/dataset_0ebae3df-693b-4dd8-97c7-d23f43c641b4.dat\n[main] Real time: 0.019 sec; CPU: 0.027 sec\n[bwa_sai2sam_pe_core] convert to sequence coordinate... \n[infer_isize] fail to infer insert size: too few good pairs\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] changing coordinates of 0 alignments.\n[bwa_sai2sam_pe_core] align unmapped mate...\n[bwa_sai2sam_pe_core] time elapses: 0.00 sec\n[bwa_sai2sam_pe_core] refine gapped alignments... 0.00 sec\n[bwa_sai2sam_pe_core] print alignments... 0.00 sec\n[bwa_sai2sam_pe_core] 100 sequences have been processed.\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa sampe -r @RG\\tID:rg1\\tPL:CAPILLARY localref.fa first.sai second.sai /galaxy/server/database/objects/2/1/5/dataset_215d4e18-b5c3-4d80-ae38-935543a5068e.dat /galaxy/server/database/objects/0/e/b/dataset_0ebae3df-693b-4dd8-97c7-d23f43c641b4.dat\n[main] Real time: 0.011 sec; CPU: 0.004 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:01:04", "plugin": "core", "name": "end_epoch", "raw_value": "1666458064.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:01:04", "plugin": "core", "name": "start_epoch", "raw_value": "1666458064.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem", "tool_version": "0.7.17.1", "test_index": 0, "time_seconds": 105.34587144851685, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "a7ae668ec845388f"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "53d249969540df77"}, "fastq_input|fastq_input2": {"src": "hda", "id": "b33d1275133f0f20"}, "fastq_input|fastq_input_selector": "paired", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "42d195ee0d402843", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:01:16.064612", "create_time": "2022-10-22T16:59:48.354331", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-4w7qp", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/0/d/7/dataset_0d7e022b-2172-4067-b9c7-b7b02e78784e.dat' 'localref.fa' && bwa index 'localref.fa' &&    bwa mem -t \"${GALAXY_SLOTS:-1}\" -v 1                 'localref.fa' '/galaxy/server/database/objects/2/1/5/dataset_215d4e18-b5c3-4d80-ae38-935543a5068e.dat' '/galaxy/server/database/objects/0/e/b/dataset_0ebae3df-693b-4dd8-97c7-d23f43c641b4.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/e/3/f/dataset_e3f5f5d5-16b4-45a3-ad61-585335b595c8.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "fastq_input": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 206, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 207, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\", \"iset_stats\": null}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 205, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "a7ae668ec845388f", "src": "hda", "uuid": "0d7e022b-2172-4067-b9c7-b7b02e78784e"}, "fastq_input1": {"id": "53d249969540df77", "src": "hda", "uuid": "215d4e18-b5c3-4d80-ae38-935543a5068e"}, "fastq_input2": {"id": "b33d1275133f0f20", "src": "hda", "uuid": "0ebae3df-693b-4dd8-97c7-d23f43c641b4"}}, "outputs": {"bam_output": {"id": "36ef9062f867bc76", "src": "hda", "uuid": "e3f5f5d5-16b4-45a3-ad61-585335b595c8"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.063 sec; CPU: 0.010 sec\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)\n[M::mem_pestat] mean and std.dev: (192.97, 35.99)\n[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/2/1/5/dataset_215d4e18-b5c3-4d80-ae38-935543a5068e.dat /galaxy/server/database/objects/0/e/b/dataset_0ebae3df-693b-4dd8-97c7-d23f43c641b4.dat\n[main] Real time: 0.023 sec; CPU: 0.023 sec\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.063 sec; CPU: 0.010 sec\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)\n[M::mem_pestat] mean and std.dev: (192.97, 35.99)\n[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/2/1/5/dataset_215d4e18-b5c3-4d80-ae38-935543a5068e.dat /galaxy/server/database/objects/0/e/b/dataset_0ebae3df-693b-4dd8-97c7-d23f43c641b4.dat\n[main] Real time: 0.023 sec; CPU: 0.023 sec\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:01:01", "plugin": "core", "name": "end_epoch", "raw_value": "1666458061.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:01:00", "plugin": "core", "name": "start_epoch", "raw_value": "1666458060.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem", "tool_version": "0.7.17.1", "test_index": 1, "time_seconds": 115.04990601539612, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "ad870574ed6a7af0"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "b1338ed218f71be2"}, "fastq_input|fastq_input_selector": "single", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "89f0393c1ba0cb90", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:02:48.363152", "create_time": "2022-10-22T17:01:07.491783", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-gn47m", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/e/e/b/dataset_eeb98676-89e8-4417-b346-89cd94bf0d6a.dat' 'localref.fa' && bwa index 'localref.fa' &&    bwa mem -t \"${GALAXY_SLOTS:-1}\" -v 1                'localref.fa' '/galaxy/server/database/objects/2/d/4/dataset_2d498d0d-eeee-4929-bb89-30e93c137f86.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/f/0/1/dataset_f01ba154-6515-416f-a136-f7eb403a212e.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "fastq_input": "{\"__current_case__\": 1, \"fastq_input1\": {\"values\": [{\"id\": 211, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 212, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "ad870574ed6a7af0", "src": "hda", "uuid": "eeb98676-89e8-4417-b346-89cd94bf0d6a"}, "fastq_input1": {"id": "b1338ed218f71be2", "src": "hda", "uuid": "2d498d0d-eeee-4929-bb89-30e93c137f86"}}, "outputs": {"bam_output": {"id": "724a2b7f8f7c7c43", "src": "hda", "uuid": "f01ba154-6515-416f-a136-f7eb403a212e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.056 sec; CPU: 0.009 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/2/d/4/dataset_2d498d0d-eeee-4929-bb89-30e93c137f86.dat\n[main] Real time: 0.010 sec; CPU: 0.009 sec\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.056 sec; CPU: 0.009 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/2/d/4/dataset_2d498d0d-eeee-4929-bb89-30e93c137f86.dat\n[main] Real time: 0.010 sec; CPU: 0.009 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:02:38", "plugin": "core", "name": "end_epoch", "raw_value": "1666458158.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:02:38", "plugin": "core", "name": "start_epoch", "raw_value": "1666458158.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem", "tool_version": "0.7.17.1", "test_index": 2, "time_seconds": 119.46476483345032, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "d1004eedd01b0d38"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "33d931cfbff9471e"}, "fastq_input|fastq_input2": {"src": "hda", "id": "bc7ac34307ecacf3"}, "fastq_input|fastq_input_selector": "paired", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "815ba234f042f110", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:03:04.664515", "create_time": "2022-10-22T17:01:27.963472", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-gzsg2", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/0/8/2/dataset_08275b7a-6065-4d9a-bfdc-3e29f8e6376e.dat' 'localref.fa' && bwa index 'localref.fa' &&    bwa mem -t \"${GALAXY_SLOTS:-1}\" -v 1                 'localref.fa' '/galaxy/server/database/objects/6/b/2/dataset_6b243809-e2ca-4b05-896d-08ed77c85619.dat' '/galaxy/server/database/objects/c/7/6/dataset_c76a8d7c-4972-49bc-ac55-601b8bd7510d.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/2/2/e/dataset_22e5f199-98eb-41b4-8c1c-b017eb716eab.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "fastq_input": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 213, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 218, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\", \"iset_stats\": null}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"auto\", \"ref_file\": {\"values\": [{\"id\": 216, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "d1004eedd01b0d38", "src": "hda", "uuid": "08275b7a-6065-4d9a-bfdc-3e29f8e6376e"}, "fastq_input1": {"id": "33d931cfbff9471e", "src": "hda", "uuid": "6b243809-e2ca-4b05-896d-08ed77c85619"}, "fastq_input2": {"id": "bc7ac34307ecacf3", "src": "hda", "uuid": "c76a8d7c-4972-49bc-ac55-601b8bd7510d"}}, "outputs": {"bam_output": {"id": "a82dfdda8729b78d", "src": "hda", "uuid": "22e5f199-98eb-41b4-8c1c-b017eb716eab"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.057 sec; CPU: 0.009 sec\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)\n[M::mem_pestat] mean and std.dev: (192.97, 35.99)\n[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/6/b/2/dataset_6b243809-e2ca-4b05-896d-08ed77c85619.dat /galaxy/server/database/objects/c/7/6/dataset_c76a8d7c-4972-49bc-ac55-601b8bd7510d.dat\n[main] Real time: 0.021 sec; CPU: 0.021 sec\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index localref.fa\n[main] Real time: 0.057 sec; CPU: 0.009 sec\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)\n[M::mem_pestat] mean and std.dev: (192.97, 35.99)\n[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 localref.fa /galaxy/server/database/objects/6/b/2/dataset_6b243809-e2ca-4b05-896d-08ed77c85619.dat /galaxy/server/database/objects/c/7/6/dataset_c76a8d7c-4972-49bc-ac55-601b8bd7510d.dat\n[main] Real time: 0.021 sec; CPU: 0.021 sec\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:02:53", "plugin": "core", "name": "end_epoch", "raw_value": "1666458173.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:02:53", "plugin": "core", "name": "start_epoch", "raw_value": "1666458173.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem", "tool_version": "0.7.17.1", "test_index": 3, "time_seconds": 114.85735392570496, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "d1004eedd01b0d38"}, "reference_source|index_a": "is", "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "1c1ffa3085325dde"}, "fastq_input|fastq_input2": {"src": "hda", "id": "bc7ac34307ecacf3"}, "fastq_input|fastq_input_selector": "paired", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|read_group_lb_conditional|LB": "AARDVARK-1", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "illumina"}, "job": {"model_class": "Job", "id": "fc1b41610a506a33", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:03:11.166188", "create_time": "2022-10-22T17:01:44.155219", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bwa/bwa_mem/0.7.17.1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-mffcn", "command_line": "set -o | grep -q pipefail && set -o pipefail;  ln -s '/galaxy/server/database/objects/0/8/2/dataset_08275b7a-6065-4d9a-bfdc-3e29f8e6376e.dat' 'localref.fa' && bwa index -a is 'localref.fa' &&    bwa mem -t \"${GALAXY_SLOTS:-1}\" -v 1                            -R '@RG\\tID:rg1\\tPL:CAPILLARY\\tLB:AARDVARK-1'   'localref.fa' '/galaxy/server/database/objects/a/0/7/dataset_a0700c75-5f93-4a38-9b32-3153b0bafbf4.dat' '/galaxy/server/database/objects/c/7/6/dataset_c76a8d7c-4972-49bc-ac55-601b8bd7510d.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/9/b/c/dataset_9bc978ff-cec2-4959-9bd9-3538695d20a9.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"illumina\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": \"AARDVARK-1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "fastq_input": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 217, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 218, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\", \"iset_stats\": null}", "reference_source": "{\"__current_case__\": 1, \"index_a\": \"is\", \"ref_file\": {\"values\": [{\"id\": 216, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "d1004eedd01b0d38", "src": "hda", "uuid": "08275b7a-6065-4d9a-bfdc-3e29f8e6376e"}, "fastq_input1": {"id": "1c1ffa3085325dde", "src": "hda", "uuid": "a0700c75-5f93-4a38-9b32-3153b0bafbf4"}, "fastq_input2": {"id": "bc7ac34307ecacf3", "src": "hda", "uuid": "c76a8d7c-4972-49bc-ac55-601b8bd7510d"}}, "outputs": {"bam_output": {"id": "aae36f9813407efa", "src": "hda", "uuid": "9bc978ff-cec2-4959-9bd9-3538695d20a9"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a is localref.fa\n[main] Real time: 0.054 sec; CPU: 0.009 sec\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)\n[M::mem_pestat] mean and std.dev: (192.97, 35.99)\n[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 -R @RG\\tID:rg1\\tPL:CAPILLARY\\tLB:AARDVARK-1 localref.fa /galaxy/server/database/objects/a/0/7/dataset_a0700c75-5f93-4a38-9b32-3153b0bafbf4.dat /galaxy/server/database/objects/c/7/6/dataset_c76a8d7c-4972-49bc-ac55-601b8bd7510d.dat\n[main] Real time: 0.016 sec; CPU: 0.021 sec\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stderr": "\n[bwa_index] Pack FASTA... 0.00 sec\n[bwa_index] Construct BWT for the packed sequence...\n[bwa_index] 0.00 seconds elapse.\n[bwa_index] Update BWT... 0.00 sec\n[bwa_index] Pack forward-only FASTA... 0.00 sec\n[bwa_index] Construct SA from BWT and Occ... 0.00 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a is localref.fa\n[main] Real time: 0.054 sec; CPU: 0.009 sec\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (171, 199, 227)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (59, 339)\n[M::mem_pestat] mean and std.dev: (192.97, 35.99)\n[M::mem_pestat] low and high boundaries for proper pairs: (3, 395)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -t 4 -v 1 -R @RG\\tID:rg1\\tPL:CAPILLARY\\tLB:AARDVARK-1 localref.fa /galaxy/server/database/objects/a/0/7/dataset_a0700c75-5f93-4a38-9b32-3153b0bafbf4.dat /galaxy/server/database/objects/c/7/6/dataset_c76a8d7c-4972-49bc-ac55-601b8bd7510d.dat\n[main] Real time: 0.016 sec; CPU: 0.021 sec\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:02:59", "plugin": "core", "name": "end_epoch", "raw_value": "1666458179.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:02:59", "plugin": "core", "name": "start_epoch", "raw_value": "1666458179.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper", "tool_version": "1.3.2", "test_index": 0, "time_seconds": 117.90165781974792, "inputs": {"source|target": {"src": "hda", "id": "733bc055308b60e3"}, "source|ref_source": "history", "query": {"src": "hda", "id": "9eeed020d9a14d4e"}}, "job": {"model_class": "Job", "id": "33d931cfbff9471e", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:07:12.866584", "create_time": "2022-10-22T17:05:43.527539", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-snhzk", "command_line": "lastz_D  '/galaxy/server/database/objects/9/4/3/dataset_943d9418-8042-4ce2-a778-0f46bdcbcebc.dat'    '/galaxy/server/database/objects/6/c/d/dataset_6cd7d70d-742c-4e86-875e-3d17950aa76c.dat'   --inferonly '--infscores=/galaxy/server/database/objects/4/6/5/dataset_4653bb3f-b0db-450f-8247-10f84bc2d42d.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "score_file": null, "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 248, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "733bc055308b60e3", "src": "hda", "uuid": "943d9418-8042-4ce2-a778-0f46bdcbcebc"}, "query": {"id": "9eeed020d9a14d4e", "src": "hda", "uuid": "6cd7d70d-742c-4e86-875e-3d17950aa76c"}}, "outputs": {"output": {"id": "6bd000aa5fa5d88c", "src": "hda", "uuid": "4653bb3f-b0db-450f-8247-10f84bc2d42d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:06:57", "plugin": "core", "name": "end_epoch", "raw_value": "1666458417.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:06:57", "plugin": "core", "name": "start_epoch", "raw_value": "1666458417.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper", "tool_version": "1.3.2", "test_index": 1, "time_seconds": 100.51295852661133, "inputs": {"source|target": {"src": "hda", "id": "c2b25aa562bc4836"}, "source|ref_source": "history", "query": {"src": "hda", "id": "2306bb6e07cc548e"}, "score_file": {"src": "hda", "id": "7316539fd3de88a2"}}, "job": {"model_class": "Job", "id": "1c1ffa3085325dde", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:08:12.661858", "create_time": "2022-10-22T17:06:51.758334", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_d_wrapper/1.3.2", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-lc8lt", "command_line": "lastz_D  '/galaxy/server/database/objects/a/6/d/dataset_a6d12a37-7835-4baa-9ebf-9b39972cd833.dat'    '/galaxy/server/database/objects/c/2/c/dataset_c2c948f5-6b00-4b95-9676-19e6aa9ee9ad.dat'   '--inferonly=/galaxy/server/database/objects/b/7/6/dataset_b76d42cd-516c-4f2b-b9b7-979d4c2b6d23.dat' '--infscores=/galaxy/server/database/objects/f/b/0/dataset_fb06a046-8fdf-4377-8963-2076f5290ee4.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 254, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "c2b25aa562bc4836", "src": "hda", "uuid": "a6d12a37-7835-4baa-9ebf-9b39972cd833"}, "query": {"id": "2306bb6e07cc548e", "src": "hda", "uuid": "c2c948f5-6b00-4b95-9676-19e6aa9ee9ad"}, "score_file": {"id": "7316539fd3de88a2", "src": "hda", "uuid": "b76d42cd-516c-4f2b-b9b7-979d4c2b6d23"}}, "outputs": {"output": {"id": "0b4eab8ac6db49f7", "src": "hda", "uuid": "fb06a046-8fdf-4377-8963-2076f5290ee4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:08:04", "plugin": "core", "name": "end_epoch", "raw_value": "1666458484.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:08:04", "plugin": "core", "name": "start_epoch", "raw_value": "1666458484.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 0, "time_seconds": 12.837942600250244, "inputs": {"source|target_2bit": "phiX174", "source|ref_source": "cached", "query": {"src": "hda", "id": "27692746980bc645"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "general_def"}, "execution_problem": "parameter 'target_2bit': an invalid option ('phiX174') was selected (valid options: /cvmfs/data.galaxyproject.org/byhand/felCat3/seq/felCat3.2bit,/cvmfs/data.galaxyproject.org/byhand/droMoj2/droMoj2.2bit,eschColi_EC4115,caeRem4,eschColi_O157H7,/cvmfs/data.galaxyproject.org/byhand/droVir1/droVir1.2bit,droWil1,/cvmfs/data.galaxyproject.org/byhand/xenTro2/seq/xenTro2.2bit,nomLeu3,gadMor1,nomLeu1,strPur3,sacCer3,/cvmfs/data.galaxyproject.org/byhand/droAna3/droAna3.2bit,Homo_sapiens_AK1,/cvmfs/data.galaxyproject.org/byhand/susScr2/seq/susScr2.2bit,micMur1,oryza_sativa_japonica_nipponbare_IRGSP4.0,loxAfr1,bosTau8,caeRem2,Araly1,bosTau3,16720,/cvmfs/data.galaxyproject.org/byhand/danRer6/seq/danRer7.2bit,ponAbe2,triCas2,Schizosaccharomyces_pombe_1.1,chrPic1,/cvmfs/data.galaxyproject.org/byhand/droMoj3/droMoj3.2bit,bosTau6,caeRem1,oryLat1,Homo_sapiens_nuHg19_mtrCRS,/cvmfs/data.galaxyproject.org/byhand/droVir2/droVir2.2bit,12931,tetNig1,Arabidopsis_thaliana_TAIR10,oviAri1,/cvmfs/data.galaxyproject.org/byhand/ce6/seq/ce6.2bit,arabidopsis,/cvmfs/data.galaxyproject.org/byhand/droGri1/droGri1.2bit,monDom5,/cvmfs/data.galaxyproject.org/byhand/taeGut1/seq/taeGut1.2bit,melUnd1,sacCer1,Tcas_3.0,/cvmfs/data.galaxyproject.org/byhand/droPer1/droPer1.2bit,/cvmfs/data.galaxyproject.org/byhand/danRer5/seq/danRer5.2bit,panTro2,canFam1,/cvmfs/data.galaxyproject.org/byhand/droSec1/droSec1.2bit,/cvmfs/data.galaxyproject.org/byhand/equCab2/seq/equCab2.2bit,/cvmfs/data.galaxyproject.org/byhand/droGri2/droGri2.2bit,/cvmfs/data.galaxyproject.org/byhand/phiX/seq/phiX.2bit,xenTro1,/cvmfs/data.galaxyproject.org/byhand/mm8/seq/mm8.2bit,priPac1,tetNig2,echTel1,/cvmfs/data.galaxyproject.org/byhand/galGal3/seq/galGal3.2bit,vicPac2,vicPac1,ce3,20079,ce8,otoGar1,fr1,venter1,caePb3,dasNov3,saiBol1,/cvmfs/data.galaxyproject.org/byhand/sacCer2/seq/sacCer2,/cvmfs/data.galaxyproject.org/byhand/ornAna1/seq/ornAna1.2bit,27835,/cvmfs/data.galaxyproject.org/byhand/rn4/seq/rn4.2bit,Bombyx_mori_p50T_2.0,borEut13,braFlo1,rn3,eschColi_K12,AgamP3,rheMac3,/cvmfs/data.galaxyproject.org/byhand/hg18/seq/hg18.2bit,/cvmfs/data.galaxyproject.org/byhand/bosTau4/seq/bosTau4.2bit,PhumU1,caeJap3,259,lMaj5,gasAcu1,allMis1,hg17,droYak1,/cvmfs/data.galaxyproject.org/byhand/canFam2/seq/canFam2.2bit,/cvmfs/data.galaxyproject.org/byhand/hg18/seq/chr21.2bit,Xanthomonas_oryzae_PXO99A,calJac3,AaegL1,felCat4,dasNov1,caePb2,aptMan1,386,ailMel1,dm6,eriEur1,danRer4,musFur1,petMar1,tupBel1,oryCun2,/cvmfs/data.galaxyproject.org/byhand/rheMac2/seq/rheMac2.2bit,galGal4,Spur_v2.6,/cvmfs/data.galaxyproject.org/byhand/droEre2/droEre2.2bit,bordBron,caePb1,apiMel4,dp3,droSim1,hg_g1k_v37,bosTauMd3,papHam1,dipOrd1,nomLeu2,/cvmfs/data.galaxyproject.org/byhand/apiMel2/apiMel2.2bit,ce5,ce9,/cvmfs/data.galaxyproject.org/byhand/droAna1/droAna1.2bit,rn5,CpipJ1,anoCar2,Amel_4.5,/cvmfs/data.galaxyproject.org/byhand/calJac1/calJac1.2bit,tarSyr1,gorGor3,Hydra_JCVI,/cvmfs/data.galaxyproject.org/byhand/apiMel3/seq/apiMel3.2bit,Zea_mays_B73_RefGen_v2,/cvmfs/data.galaxyproject.org/byhand/Sscrofa9.58/seq/Sscrofa9.58.2bit,otoGar3,danRer10,caeJap4,caeJap2,felCat8,caeRem3,bosTau2,ente638,monDom4,droYak2,/cvmfs/data.galaxyproject.org/byhand/anoCar1/anoCar1.2bit,13954,178,galGal2,pseuAeru,monDom1,ce7,rn6,16351,speTri2,/cvmfs/data.galaxyproject.org/byhand/strPur2/seq/strPur2.2bit,papAnu2,/cvmfs/data.galaxyproject.org/byhand/dm3/seq/dm3.2bit,CHM13_T2T_v2.0,caeJap1,bosTau5,cb3,fr2,panTro4,16297,eschColi_CFT073,dm2,cerSim1,turTru2,hg19_rCRS_pUC18_phiX174,/cvmfs/data.galaxyproject.org/byhand/droMoj1/droMoj1.2bit,cavPor3,ce4,278,ce2,baciSubt,13953,/cvmfs/data.galaxyproject.org/byhand/droEre1/droEre1.2bit,/cvmfs/data.galaxyproject.org/byhand/droVir3/droVir3.2bit,bosTau7,panPan1,apiMel1,equCab1,aplCal1,oryLat2,/cvmfs/data.galaxyproject.org/byhand/hg19/seq/hg19.2bit,panTro3,eschColi_APEC_O1,Ptrichocarpa_156,loxAfr3,/cvmfs/data.galaxyproject.org/byhand/anoGam1/anoGam1.2bit,/cvmfs/data.galaxyproject.org/byhand/danRer6/seq/danRer6.2bit,hg38,susScr1,panTro1,sorAra1,oryCun1,myoLuc2,ci2,/cvmfs/data.galaxyproject.org/byhand/droAna2/droAna2.2bit,/cvmfs/data.galaxyproject.org/byhand/mm9/seq/mm9.2bit,felCat5,ce10,eschColi_TW14359,mm10,dp4,burkPseu_1106A,IscaW1)", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 1, "time_seconds": 122.3767945766449, "inputs": {"source|target": {"src": "hda", "id": "fe430d7543a322c8"}, "source|ref_source": "history", "query": {"src": "hda", "id": "1dd1a11d81743135"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "general_def"}, "job": {"model_class": "Job", "id": "0eb4c36e16eb6fe4", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:05:13.726404", "create_time": "2022-10-22T17:03:30.493004", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-rnhxv", "command_line": "lastz  '/galaxy/server/database/objects/9/c/e/dataset_9ce834aa-4205-48ee-aaa1-b100c0cc4150.dat'    '/galaxy/server/database/objects/5/e/f/dataset_5ef3765b-1c2c-4bbd-bb91-21402323b664.dat'     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=general- --action:target=multiple  > '/galaxy/server/database/objects/3/2/d/dataset_32df771c-f544-4725-bb63-2e96227b040d.dat'", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 1, \"format\": \"general_def\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 234, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "fe430d7543a322c8", "src": "hda", "uuid": "9ce834aa-4205-48ee-aaa1-b100c0cc4150"}, "query": {"id": "1dd1a11d81743135", "src": "hda", "uuid": "5ef3765b-1c2c-4bbd-bb91-21402323b664"}}, "outputs": {"output": {"id": "43c8b8e70423b10c", "src": "hda", "uuid": "32df771c-f544-4725-bb63-2e96227b040d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:05:00", "plugin": "core", "name": "end_epoch", "raw_value": "1666458300.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:04:59", "plugin": "core", "name": "start_epoch", "raw_value": "1666458299.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 2, "time_seconds": 116.8007402420044, "inputs": {"source|target": {"src": "hda", "id": "fe430d7543a322c8"}, "source|ref_source": "history", "query": {"src": "hda", "id": "1dd1a11d81743135"}, "where_to_look|strand": "--strand=both", "scoring|score_file": {"src": "hda", "id": "1ab4f8d83bbab496"}, "output_format|out|format": "general_def"}, "job": {"model_class": "Job", "id": "82499597283b968a", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:05:15.010313", "create_time": "2022-10-22T17:03:47.210171", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-dvlsz", "command_line": "lastz  '/galaxy/server/database/objects/9/c/e/dataset_9ce834aa-4205-48ee-aaa1-b100c0cc4150.dat'    '/galaxy/server/database/objects/5/e/f/dataset_5ef3765b-1c2c-4bbd-bb91-21402323b664.dat'     '--strand=both'     '--scores=/galaxy/server/database/objects/f/1/1/dataset_f116132a-396f-4346-a26e-77bb30e429a5.dat'  '--ambiguous=iupac'               --traceback=160M    --format=general- --action:target=multiple  > '/galaxy/server/database/objects/1/c/4/dataset_1c4d6325-9e5b-4906-a6dd-03767cb9fce7.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 1, \"format\": \"general_def\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": {\"values\": [{\"id\": 236, \"src\": \"hda\"}]}}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 234, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "fe430d7543a322c8", "src": "hda", "uuid": "9ce834aa-4205-48ee-aaa1-b100c0cc4150"}, "query": {"id": "1dd1a11d81743135", "src": "hda", "uuid": "5ef3765b-1c2c-4bbd-bb91-21402323b664"}, "score_file": {"id": "1ab4f8d83bbab496", "src": "hda", "uuid": "f116132a-396f-4346-a26e-77bb30e429a5"}}, "outputs": {"output": {"id": "e63126dee0018651", "src": "hda", "uuid": "1c4d6325-9e5b-4906-a6dd-03767cb9fce7"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:05:03", "plugin": "core", "name": "end_epoch", "raw_value": "1666458303.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:05:03", "plugin": "core", "name": "start_epoch", "raw_value": "1666458303.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 3, "time_seconds": 97.30655550956726, "inputs": {"source|target": {"src": "hda", "id": "afb135da648d8313"}, "source|ref_source": "history", "query": {"src": "hda", "id": "5d85e49f9d109a15"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "blastn"}, "job": {"model_class": "Job", "id": "ccc4870139115d8f", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:05:14.967947", "create_time": "2022-10-22T17:03:52.190193", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-9whjj", "command_line": "lastz  <(gunzip -c '/galaxy/server/database/objects/6/1/c/dataset_61ccd5d0-d8f8-4234-9460-48d00d7dd35f.dat')    <(gunzip -c '/galaxy/server/database/objects/2/4/8/dataset_248a6570-9c53-4bdd-8677-4d8b6ed4deca.dat')     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=BLASTN- --action:target=multiple  > '/galaxy/server/database/objects/d/e/f/dataset_defc1da0-27b9-4c53-b5d3-5cac852d6f72.dat'", "traceback": null, "params": {"__input_ext": "\"fasta.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 4, \"format\": \"blastn\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 238, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "afb135da648d8313", "src": "hda", "uuid": "61ccd5d0-d8f8-4234-9460-48d00d7dd35f"}, "query": {"id": "5d85e49f9d109a15", "src": "hda", "uuid": "248a6570-9c53-4bdd-8677-4d8b6ed4deca"}}, "outputs": {"output": {"id": "ebbe824960cc2a97", "src": "hda", "uuid": "defc1da0-27b9-4c53-b5d3-5cac852d6f72"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:05:03", "plugin": "core", "name": "end_epoch", "raw_value": "1666458303.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:05:03", "plugin": "core", "name": "start_epoch", "raw_value": "1666458303.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 4, "time_seconds": 96.24935817718506, "inputs": {"source|target": {"src": "hda", "id": "2e32383fed094599"}, "source|ref_source": "history", "query": {"src": "hda", "id": "8ffe9e1dd6339204"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "blastn"}, "job": {"model_class": "Job", "id": "51be122c2cc93b62", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:06:32.157710", "create_time": "2022-10-22T17:05:06.746959", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-9fczv", "command_line": "lastz  <(gunzip -c '/galaxy/server/database/objects/e/d/3/dataset_ed353191-00d9-433d-bf5e-3df49cf88168.dat')    <(bunzip2 -c '/galaxy/server/database/objects/9/7/5/dataset_9751e74a-9cf1-4242-9090-a1a1250c3ead.dat')     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=BLASTN- --action:target=multiple  > '/galaxy/server/database/objects/c/4/4/dataset_c44cf0bd-47e6-4fd6-880f-f2854f78db38.dat'", "traceback": null, "params": {"__input_ext": "\"fasta.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 4, \"format\": \"blastn\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 242, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "2e32383fed094599", "src": "hda", "uuid": "ed353191-00d9-433d-bf5e-3df49cf88168"}, "query": {"id": "8ffe9e1dd6339204", "src": "hda", "uuid": "9751e74a-9cf1-4242-9090-a1a1250c3ead"}}, "outputs": {"output": {"id": "2151a231f353a5ad", "src": "hda", "uuid": "c44cf0bd-47e6-4fd6-880f-f2854f78db38"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:06:22", "plugin": "core", "name": "end_epoch", "raw_value": "1666458382.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:06:22", "plugin": "core", "name": "start_epoch", "raw_value": "1666458382.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 5, "time_seconds": 103.21579575538635, "inputs": {"source|target": {"src": "hda", "id": "ca28c5c74b900b4f"}, "source|ref_source": "history", "query": {"src": "hda", "id": "f4c14471d21670ed"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "blastn"}, "job": {"model_class": "Job", "id": "b1338ed218f71be2", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:06:56.975165", "create_time": "2022-10-22T17:05:34.068256", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-72q5l", "command_line": "lastz  <(gunzip -c '/galaxy/server/database/objects/8/b/a/dataset_8bac39b6-bd58-4b60-b8cd-7cadd496df4e.dat')    <(gunzip -c '/galaxy/server/database/objects/9/2/c/dataset_92cb6660-a7ca-414f-9a24-ad7ab24dec87.dat')     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=BLASTN- --action:target=multiple  > '/galaxy/server/database/objects/c/8/a/dataset_c8a2fd5e-ac10-4bf3-92b7-0d0ea273c76f.dat'", "traceback": null, "params": {"__input_ext": "\"fasta.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 4, \"format\": \"blastn\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 247, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "ca28c5c74b900b4f", "src": "hda", "uuid": "8bac39b6-bd58-4b60-b8cd-7cadd496df4e"}, "query": {"id": "f4c14471d21670ed", "src": "hda", "uuid": "92cb6660-a7ca-414f-9a24-ad7ab24dec87"}}, "outputs": {"output": {"id": "89ea78703312f4d8", "src": "hda", "uuid": "c8a2fd5e-ac10-4bf3-92b7-0d0ea273c76f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:06:47", "plugin": "core", "name": "end_epoch", "raw_value": "1666458407.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:06:47", "plugin": "core", "name": "start_epoch", "raw_value": "1666458407.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2", "tool_version": "1.3.2", "test_index": 6, "time_seconds": 106.27679872512817, "inputs": {"source|target": {"src": "hda", "id": "ca28c5c74b900b4f"}, "source|ref_source": "history", "query": {"src": "hda", "id": "c557b7987edbe049"}, "where_to_look|strand": "--strand=both", "output_format|out|format": "blastn"}, "job": {"model_class": "Job", "id": "ad870574ed6a7af0", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:07:01.468400", "create_time": "2022-10-22T17:05:41.512363", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/lastz/lastz_wrapper_2/1.3.2", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-94xxf", "command_line": "lastz  <(gunzip -c '/galaxy/server/database/objects/8/b/a/dataset_8bac39b6-bd58-4b60-b8cd-7cadd496df4e.dat')    '/galaxy/server/database/objects/5/6/0/dataset_560c0b3c-c215-42b5-98d2-bb9b36ade6a1.dat'     '--strand=both'      '--ambiguous=iupac'               --traceback=160M    --format=BLASTN- --action:target=multiple  > '/galaxy/server/database/objects/d/e/c/dataset_deca88b3-9829-481a-bd90-577389f5b06d.dat'", "traceback": null, "params": {"__input_ext": "\"fasta.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_format": "{\"out\": {\"__current_case__\": 4, \"format\": \"blastn\"}, \"rplot\": \"false\"}", "interpolation": "{\"inner\": \"\"}", "filters": "{\"continuity\": {\"cont_max\": \"\", \"cont_min\": \"\"}, \"coverage\": {\"cov_max\": \"\", \"cov_min\": \"\"}, \"filter_cgap\": \"\", \"filter_ngap\": \"\", \"filter_nmatch\": \"\", \"filter_nmatch_percent\": \"\", \"filter_nmismatch\": \"\", \"identity\": {\"id_max\": \"\", \"id_min\": \"\"}, \"notrivial\": \"false\"}", "gap_ext": "{\"allgappedbounds\": \"false\", \"gapped\": \"false\", \"gappedthresh\": \"\", \"nogapped\": \"false\", \"noytrim\": \"false\", \"ydrop\": \"\"}", "chaining": "{\"chain\": \"false\", \"chaning_penalties\": {\"__current_case__\": 1, \"chaning_penalties_selector\": \"no\"}}", "hsp": "{\"entropy\": \"false\", \"entropy_report\": \"false\", \"gfextend\": \"false\", \"hsp_method\": {\"__current_case__\": 0, \"hsp_method_selector\": \"none\"}, \"noentropy\": \"false\", \"nogfextend\": \"false\"}", "seeding": "{\"seed\": {\"__current_case__\": 0, \"seed_selector\": \"defaults\"}, \"seed_filer\": {\"__current_case__\": 1, \"seed_filer_selector\": \"no\"}, \"transitions\": \"--transition\"}", "scoring": "{\"ambigIUPAC\": \"true\", \"ambigN\": \"false\", \"gap\": {\"__current_case__\": 1, \"gap_selector\": \"no\"}, \"match\": {\"__current_case__\": 1, \"match_selector\": \"no\"}, \"score_file\": null}", "where_to_look": "{\"nomirror\": \"false\", \"qdepth\": {\"__current_case__\": 1, \"qdepth_selector\": \"no\"}, \"qhspbest\": \"\", \"qhsplimit\": {\"__current_case__\": 1, \"qhsplimit_selector\": \"no\"}, \"self\": \"false\", \"strand\": \"--strand=both\"}", "source": "{\"__current_case__\": 1, \"ref_source\": \"history\", \"target\": {\"values\": [{\"id\": 247, \"src\": \"hda\"}]}}"}, "inputs": {"target": {"id": "ca28c5c74b900b4f", "src": "hda", "uuid": "8bac39b6-bd58-4b60-b8cd-7cadd496df4e"}, "query": {"id": "c557b7987edbe049", "src": "hda", "uuid": "560c0b3c-c215-42b5-98d2-bb9b36ade6a1"}}, "outputs": {"output": {"id": "36d72f07ca9023b7", "src": "hda", "uuid": "deca88b3-9829-481a-bd90-577389f5b06d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:06:52", "plugin": "core", "name": "end_epoch", "raw_value": "1666458412.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:06:52", "plugin": "core", "name": "start_epoch", "raw_value": "1666458412.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth", "tool_version": "0.2.2", "test_index": 0, "time_seconds": 135.71814632415771, "inputs": {"referenceSource|reference": {"src": "hda", "id": "f2572da177eb60a5"}, "single_or_paired|input_mate1": {"src": "hda", "id": "657ede796beacf84"}, "single_or_paired|input_mate2": {"src": "hda", "id": "31ab3acf2bdf22d4"}, "single_or_paired|single_or_paired_opts": "paired"}, "job": {"model_class": "Job", "id": "891967302346c618", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:03:37.395629", "create_time": "2022-10-22T17:01:52.694451", "galaxy_version": "21.09", "command_version": "bwa-meth.py 0.2.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-thp8b", "command_line": "mkdir index_dir && ln -s '/galaxy/server/database/objects/9/0/3/dataset_903a692c-4935-4913-a01b-80851371a3a1.dat' index_dir/genome.fa && bwameth.py index index_dir/genome.fa &&  ln -f -s '/galaxy/server/database/objects/3/c/a/dataset_3ca12032-05ce-403a-8e42-be2257daed9e.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/8/0/9/dataset_8098d8a1-6db9-4ab1-9217-26c796046cec.dat' input_r.fastq.gz &&  bwameth.py -t \"${GALAXY_SLOTS:-4}\" --reference 'index_dir/genome.fa'   input_f.fastq.gz input_r.fastq.gz | samtools view -u - | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -T \"${TMPDIR:-.}\" -O bam -o output.bam -", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "readGroup": "\"\"", "single_or_paired": "{\"__current_case__\": 1, \"input_mate1\": {\"values\": [{\"id\": 220, \"src\": \"hda\"}]}, \"input_mate2\": {\"values\": [{\"id\": 221, \"src\": \"hda\"}]}, \"single_or_paired_opts\": \"paired\"}", "referenceSource": "{\"__current_case__\": 0, \"reference\": {\"values\": [{\"id\": 224, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference": {"id": "879f5546ed211fc4", "src": "hda", "uuid": "903a692c-4935-4913-a01b-80851371a3a1"}, "input_mate1": {"id": "657ede796beacf84", "src": "hda", "uuid": "3ca12032-05ce-403a-8e42-be2257daed9e"}, "input_mate2": {"id": "31ab3acf2bdf22d4", "src": "hda", "uuid": "8098d8a1-6db9-4ab1-9217-26c796046cec"}}, "outputs": {"output": {"id": "af2fdc8099eb2b36", "src": "hda", "uuid": "0ccec806-3b70-40c9-a8d1-3f3e8203a7b0"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[bwa_index] Pack FASTA... 0.01 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.53 seconds elapse.\n[bwa_index] Update BWT... 0.01 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.12 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 0.763 sec; CPU: 0.677 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.023 CPU sec, 0.012 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.082 sec; CPU: 0.029 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "job_stdout": "", "job_stderr": "", "stderr": "[bwa_index] Pack FASTA... 0.01 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.53 seconds elapse.\n[bwa_index] Update BWT... 0.01 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.12 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 0.763 sec; CPU: 0.677 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.023 CPU sec, 0.012 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.082 sec; CPU: 0.029 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:03:20", "plugin": "core", "name": "end_epoch", "raw_value": "1666458200.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:03:19", "plugin": "core", "name": "start_epoch", "raw_value": "1666458199.0000000"}, {"title": "Memory Allocated (MB)", "value": "4000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4000.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_rshdv3zx.sam v. /tmp/history_bam_converted_to_sam_icp9d1ki.sam )\n--- local_file\n+++ history_data\n@@ -1,7 +1,9 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:chrREF\tLN:900000\n @RG\tID:input_\tSM:input_\n-@PG\tID:bwa-meth\tPN:bwa-meth\tVN:0.2.0\tCL:\"/usr/users/ga002/soranzon/miniconda3/envs/__bwameth@0.2.0/bin/bwameth.py -t 1 --reference index_dir/genome.fa input_f.fastq input_r.fastq\"\n+@PG\tID:bwa-meth\tPN:bwa-meth\tVN:0.2.2\tCL:\"/usr/local/bin/bwameth.py -t 2 --reference index_dir/genome.fa input_f.fastq.gz input_r.fastq.gz\"\n+@PG\tID:samtools\tPN:samtools\tPP:bwa-meth\tVN:1.10\tCL:samtools view -u -\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.10\tCL:samtools sort -@ 2 -T /galaxy/server/database/jobs_directory/000/185/tmp -O bam -o output.bam -\n HISEQ:105:C2UE1ACXX:3:1101:7442:8079\t163\tchrREF\t26002\t60\t101M\t=\t26025\t124\tCAAAATATATCAATCAAAAAAACATCCAAAACCGAAACTCCAAACAACAAAAAAATAATAAAATACTACCCATAAAACCTAACCCTCAATATACCCCGACA\tBBBFFFFFFFFFFIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIFIFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFBFFF\tNM:i:1\tMD:Z:50C50\tMC:Z:101M\tAS:i:98\tXS:i:0\tRG:Z:input_\tYC:Z:GA\tYD:Z:r\n HISEQ:105:C2UE1ACXX:3:1101:7442:8079\t83\tchrREF\t26025\t60\t101M\t=\t26002\t-124\tATCCAAAACCGAAACTCCAAACAACAAAAAAATAATAAAATACTACCCATAAAACCTAACCCTCAATATACCCCGACATAATTTCAAAAAAATCAAACACC\tB0''B<<<00FB7<000'BBB0B<0FFFFFFFFFFFFFFFFFBFFB<7FFIFFFBBB<FFB<<7FFIFFFFFBBFF<IIIIIFFBIIFFFFFFBFFFFBBB\tNM:i:1\tMD:Z:27C73\tMC:Z:101M\tAS:i:98\tXS:i:0\tRG:Z:input_\tYC:Z:CT\tYD:Z:r\n HISEQ:105:C2UE1ACXX:3:1101:6662:24968\t99\tchrREF\t26991\t60\t101M\t=\t26992\t102\tAGGTGTCGTTTAATTGTTTAGGTTTATGGTATTGTGTTTCGTTTTTTTGGTATTTGTGAGGGTAGAATTGTTTTTGGGTTTTAATTTTTTTAAGTATGGGA\tBBBFFFFFFFFFFIIBFFIFBBFFFFIB<FFFI<FBFFFFBFFIIIII77BFFIIBFBFBBBFBBFFFF<BBFFF'07BBBBFFFFFFFFFFB0<BF####\tNM:i:0\tMD:Z:101\tMC:Z:101M\tAS:i:101\tXS:i:19\tRG:Z:input_\tYC:Z:CT\tYD:Z:f\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth", "tool_version": "0.2.2", "test_index": 1, "time_seconds": 127.06592273712158, "inputs": {"referenceSource|reference": {"src": "hda", "id": "321aed973e832480"}, "single_or_paired|input_mate1": {"src": "hdca", "id": "41a3bde838b2a340"}, "single_or_paired|single_or_paired_opts": "paired_collection"}, "job": {"model_class": "Job", "id": "fd7410e1cb46429f", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:04:55.567234", "create_time": "2022-10-22T17:03:12.804145", "galaxy_version": "21.09", "command_version": "bwa-meth.py 0.2.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bwameth/bwameth/0.2.2", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-l24gx", "command_line": "mkdir index_dir && ln -s '/galaxy/server/database/objects/9/9/f/dataset_99f4c7b6-4b36-40e8-99b1-e76f903af270.dat' index_dir/genome.fa && bwameth.py index index_dir/genome.fa &&  ln -s '/galaxy/server/database/objects/b/3/9/dataset_b39267d7-c3d6-40ae-8098-69875cf36521.dat' input_f.fastq.gz &&  ln -s '/galaxy/server/database/objects/8/8/6/dataset_8869517c-5878-4b3f-b7a3-2315f9f1b780.dat' input_r.fastq.gz &&  bwameth.py -t \"${GALAXY_SLOTS:-4}\" --reference 'index_dir/genome.fa'   input_f.fastq.gz input_r.fastq.gz | samtools view -u - | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -T \"${TMPDIR:-.}\" -O bam -o output.bam -", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "readGroup": "\"\"", "single_or_paired": "{\"__current_case__\": 2, \"input_mate1\": {\"values\": [{\"id\": 3, \"src\": \"hdca\"}]}, \"single_or_paired_opts\": \"paired_collection\"}", "referenceSource": "{\"__current_case__\": 0, \"reference\": {\"values\": [{\"id\": 231, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference": {"id": "92e37857b316433c", "src": "hda", "uuid": "99f4c7b6-4b36-40e8-99b1-e76f903af270"}, "input_mate11": {"id": "9326f48120903311", "src": "hda", "uuid": "b39267d7-c3d6-40ae-8098-69875cf36521"}, "input_mate12": {"id": "083b4c9ddcfcaecb", "src": "hda", "uuid": "8869517c-5878-4b3f-b7a3-2315f9f1b780"}}, "outputs": {"output": {"id": "36aed32f319c972d", "src": "hda", "uuid": "0589decb-91a6-43cf-b135-498b336f6332"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[bwa_index] Pack FASTA... 0.01 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.52 seconds elapse.\n[bwa_index] Update BWT... 0.01 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.11 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 0.753 sec; CPU: 0.666 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.023 CPU sec, 0.012 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.085 sec; CPU: 0.029 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "job_stdout": "", "job_stderr": "", "stderr": "[bwa_index] Pack FASTA... 0.01 sec\n[bwa_index] Construct BWT for the packed sequence...\n[BWTIncCreate] textLength=3600000, availableWord=4573648\n[bwt_gen] Finished constructing BWT in 5 iterations.\n[bwa_index] 0.52 seconds elapse.\n[bwa_index] Update BWT... 0.01 sec\n[bwa_index] Pack forward-only FASTA... 0.01 sec\n[bwa_index] Construct SA from BWT and Occ... 0.11 sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa index -a bwtsw index_dir/genome.fa.bwameth.c2t\n[main] Real time: 0.753 sec; CPU: 0.666 sec\nconverting c2t in index_dir/genome.fa to index_dir/genome.fa.bwameth.c2t\nindexing: index_dir/genome.fa.bwameth.c2t\n[M::bwa_idx_load_from_disk] read 0 ALT contigs\nconverting reads in input_f.fastq.gz,input_r.fastq.gz\n[M::process] read 200 sequences (20200 bp)...\n[M::process] 0 single-end sequences; 200 paired-end sequences\n[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 97, 0, 0)\n[M::mem_pestat] skip orientation FF as there are not enough pairs\n[M::mem_pestat] analyzing insert size distribution for orientation FR...\n[M::mem_pestat] (25, 50, 75) percentile: (108, 141, 169)\n[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 291)\n[M::mem_pestat] mean and std.dev: (138.16, 39.31)\n[M::mem_pestat] low and high boundaries for proper pairs: (1, 352)\n[M::mem_pestat] skip orientation RF as there are not enough pairs\n[M::mem_pestat] skip orientation RR as there are not enough pairs\n[M::mem_process_seqs] Processed 200 reads in 0.023 CPU sec, 0.012 real sec\n[main] Version: 0.7.17-r1188\n[main] CMD: bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R @RG\\tID:input_\\tSM:input_ -t 2 index_dir/genome.fa.bwameth.c2t -\n[main] Real time: 0.085 sec; CPU: 0.029 sec\nrunning: /usr/local/bin/python /usr/local/bin/bwameth.py c2t input_f.fastq.gz input_r.fastq.gz |bwa mem -T 40 -B 2 -L 10 -CM -U 100 -p -R '@RG\\tID:input_\\tSM:input_' -t 2  index_dir/genome.fa.bwameth.c2t -\n[bam_sort_core] merging from 0 files and 2 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:04:46", "plugin": "core", "name": "end_epoch", "raw_value": "1666458286.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:04:44", "plugin": "core", "name": "start_epoch", "raw_value": "1666458284.0000000"}, {"title": "Memory Allocated (MB)", "value": "4000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4000.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_m8euya0w.sam v. /tmp/history_bam_converted_to_sam_q1s9wcgn.sam )\n--- local_file\n+++ history_data\n@@ -1,7 +1,9 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:chrREF\tLN:900000\n @RG\tID:input_\tSM:input_\n-@PG\tID:bwa-meth\tPN:bwa-meth\tVN:0.2.0\tCL:\"/usr/users/ga002/soranzon/miniconda3/envs/__bwameth@0.2.0/bin/bwameth.py -t 1 --reference index_dir/genome.fa input_f.fastq input_r.fastq\"\n+@PG\tID:bwa-meth\tPN:bwa-meth\tVN:0.2.2\tCL:\"/usr/local/bin/bwameth.py -t 2 --reference index_dir/genome.fa input_f.fastq.gz input_r.fastq.gz\"\n+@PG\tID:samtools\tPN:samtools\tPP:bwa-meth\tVN:1.10\tCL:samtools view -u -\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.10\tCL:samtools sort -@ 2 -T /galaxy/server/database/jobs_directory/000/193/tmp -O bam -o output.bam -\n HISEQ:105:C2UE1ACXX:3:1101:7442:8079\t163\tchrREF\t26002\t60\t101M\t=\t26025\t124\tCAAAATATATCAATCAAAAAAACATCCAAAACCGAAACTCCAAACAACAAAAAAATAATAAAATACTACCCATAAAACCTAACCCTCAATATACCCCGACA\tBBBFFFFFFFFFFIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIFIFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFBFFF\tNM:i:1\tMD:Z:50C50\tMC:Z:101M\tAS:i:98\tXS:i:0\tRG:Z:input_\tYC:Z:GA\tYD:Z:r\n HISEQ:105:C2UE1ACXX:3:1101:7442:8079\t83\tchrREF\t26025\t60\t101M\t=\t26002\t-124\tATCCAAAACCGAAACTCCAAACAACAAAAAAATAATAAAATACTACCCATAAAACCTAACCCTCAATATACCCCGACATAATTTCAAAAAAATCAAACACC\tB0''B<<<00FB7<000'BBB0B<0FFFFFFFFFFFFFFFFFBFFB<7FFIFFFBBB<FFB<<7FFIFFFFFBBFF<IIIIIFFBIIFFFFFFBFFFFBBB\tNM:i:1\tMD:Z:27C73\tMC:Z:101M\tAS:i:98\tXS:i:0\tRG:Z:input_\tYC:Z:CT\tYD:Z:r\n HISEQ:105:C2UE1ACXX:3:1101:6662:24968\t99\tchrREF\t26991\t60\t101M\t=\t26992\t102\tAGGTGTCGTTTAATTGTTTAGGTTTATGGTATTGTGTTTCGTTTTTTTGGTATTTGTGAGGGTAGAATTGTTTTTGGGTTTTAATTTTTTTAAGTATGGGA\tBBBFFFFFFFFFFIIBFFIFBBFFFFIB<FFFI<FBFFFFBFFIIIII77BFFIIBFBFBBBFBBFFFF<BBFFF'07BBBBFFFFFFFFFFB0<BF####\tNM:i:0\tMD:Z:101\tMC:Z:101M\tAS:i:101\tXS:i:19\tRG:Z:input_\tYC:Z:CT\tYD:Z:f\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0", "test_index": 0, "time_seconds": 105.17664790153503, "inputs": {"reads": {"src": "hda", "id": "1c6df73f37a24a47"}, "reference_source|ref": {"src": "hda", "id": "cca25dff10d47d9a"}, "reference_source|ref_selector": "history"}, "job": {"model_class": "Job", "id": "242537a826af0287", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:30:19.115800", "create_time": "2022-10-22T17:28:50.099434", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-qhfjq", "command_line": "ln -s '/galaxy/server/database/objects/8/b/8/dataset_8b89c121-1281-4a96-9ddf-7a6382147045.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq alnqual -b    '/galaxy/server/database/objects/0/c/2/dataset_0c27336c-4385-480f-9169-c9c83401b95d.dat' 'reference.fa' > '/galaxy/server/database/objects/b/8/5/dataset_b8525b15-686d-49aa-aa38-8c269b2fac33.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "recompute_all": "\"false\"", "alnqual_choice": "{\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 381, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "1c6df73f37a24a47", "src": "hda", "uuid": "0c27336c-4385-480f-9169-c9c83401b95d"}, "ref": {"id": "cca25dff10d47d9a", "src": "hda", "uuid": "8b89c121-1281-4a96-9ddf-7a6382147045"}}, "outputs": {"output": {"id": "a0b850a8fad0cdb5", "src": "hda", "uuid": "b8525b15-686d-49aa-aa38-8c269b2fac33"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:30:03", "plugin": "core", "name": "end_epoch", "raw_value": "1666459803.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:30:02", "plugin": "core", "name": "start_epoch", "raw_value": "1666459802.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmpilty09qlalnqual-out1.bam v. /tmp/tmpdg_cozidalnqual-out1.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0", "test_index": 1, "time_seconds": 105.07362341880798, "inputs": {"reads": {"src": "hda", "id": "ee7b806f983b4422"}, "reference_source|ref": {"src": "hda", "id": "d6f30f845716bbc3"}, "reference_source|ref_selector": "history", "alnqual_choice|alnquals_to_use": "-B"}, "job": {"model_class": "Job", "id": "1898da1f9f8d0073", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:30:40.366037", "create_time": "2022-10-22T17:29:08.490173", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-8xr7x", "command_line": "ln -s '/galaxy/server/database/objects/0/7/1/dataset_071406bf-0574-4de0-94a8-5b38a33b8636.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq alnqual -b  -B  '/galaxy/server/database/objects/3/6/f/dataset_36f5af54-4188-4c92-a8fe-14eb2a51c660.dat' 'reference.fa' > '/galaxy/server/database/objects/a/b/7/dataset_ab745c27-3bb7-43f2-b7e7-88333f890e6c.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "recompute_all": "\"false\"", "alnqual_choice": "{\"__current_case__\": 0, \"alnquals_to_use\": \"-B\", \"extended_baq\": \"\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 385, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "ee7b806f983b4422", "src": "hda", "uuid": "36f5af54-4188-4c92-a8fe-14eb2a51c660"}, "ref": {"id": "d6f30f845716bbc3", "src": "hda", "uuid": "071406bf-0574-4de0-94a8-5b38a33b8636"}}, "outputs": {"output": {"id": "8e5bf8c5c7c53f18", "src": "hda", "uuid": "ab745c27-3bb7-43f2-b7e7-88333f890e6c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:30:19", "plugin": "core", "name": "end_epoch", "raw_value": "1666459819.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:30:18", "plugin": "core", "name": "start_epoch", "raw_value": "1666459818.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmp66_30px4alnqual-out2.bam v. /tmp/tmpqcd6amhsalnqual-out2.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0", "test_index": 2, "time_seconds": 111.95855593681335, "inputs": {"reads": {"src": "hda", "id": "5bde6e636407e863"}, "reference_source|ref": {"src": "hda", "id": "8e412a4602547afc"}, "reference_source|ref_selector": "history", "alnqual_choice|alnquals_to_use": "-A"}, "job": {"model_class": "Job", "id": "0af9b97856bab0fd", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:31:09.676992", "create_time": "2022-10-22T17:29:35.863639", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-mjk4l", "command_line": "ln -s '/galaxy/server/database/objects/2/f/e/dataset_2fe71e54-1424-44e7-ac8c-b8384298a295.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq alnqual -b  -A  '/galaxy/server/database/objects/f/9/f/dataset_f9fbeeea-0489-47f5-96d4-4959c1e755dc.dat' 'reference.fa' > '/galaxy/server/database/objects/b/c/8/dataset_bc86744e-0fd8-40a1-89ba-dd2c8a4f20f6.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "recompute_all": "\"false\"", "alnqual_choice": "{\"__current_case__\": 2, \"alnquals_to_use\": \"-A\", \"extended_baq\": \"true\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 388, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "5bde6e636407e863", "src": "hda", "uuid": "f9fbeeea-0489-47f5-96d4-4959c1e755dc"}, "ref": {"id": "8e412a4602547afc", "src": "hda", "uuid": "2fe71e54-1424-44e7-ac8c-b8384298a295"}}, "outputs": {"output": {"id": "4b054d1c85edac61", "src": "hda", "uuid": "bc86744e-0fd8-40a1-89ba-dd2c8a4f20f6"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:30:55", "plugin": "core", "name": "end_epoch", "raw_value": "1666459855.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:30:54", "plugin": "core", "name": "start_epoch", "raw_value": "1666459854.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmp3jfyb3x4alnqual-out3.bam v. /tmp/tmp56fbjap9alnqual-out3.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0", "test_index": 3, "time_seconds": 131.80263805389404, "inputs": {"reads": {"src": "hda", "id": "9b6fc5321df08746"}, "reference_source|ref": {"src": "hda", "id": "8a4f1e7277a03df0"}, "reference_source|ref_selector": "history", "alnqual_choice|extended_baq": false}, "job": {"model_class": "Job", "id": "c7ec0940083d64ec", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:32:26.174378", "create_time": "2022-10-22T17:30:41.915961", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-drcq8", "command_line": "ln -s '/galaxy/server/database/objects/e/2/b/dataset_e2bca8e8-7aa0-4dfa-8ad0-78d9f52c64f5.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq alnqual -b -e   '/galaxy/server/database/objects/e/8/a/dataset_e8a24170-532e-4977-ab8b-7b7dfd07a675.dat' 'reference.fa' > '/galaxy/server/database/objects/3/4/2/dataset_3429d214-21ea-4e00-bc34-484244d42025.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "recompute_all": "\"false\"", "alnqual_choice": "{\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"false\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 393, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "9b6fc5321df08746", "src": "hda", "uuid": "e8a24170-532e-4977-ab8b-7b7dfd07a675"}, "ref": {"id": "8a4f1e7277a03df0", "src": "hda", "uuid": "e2bca8e8-7aa0-4dfa-8ad0-78d9f52c64f5"}}, "outputs": {"output": {"id": "198eb807cbe77c04", "src": "hda", "uuid": "3429d214-21ea-4e00-bc34-484244d42025"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:32:10", "plugin": "core", "name": "end_epoch", "raw_value": "1666459930.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:32:09", "plugin": "core", "name": "start_epoch", "raw_value": "1666459929.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmp_u4v4dv2alnqual-out4.bam v. /tmp/tmpna1mmyihalnqual-out4.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual", "tool_version": "2.1.5+galaxy0", "test_index": 4, "time_seconds": 126.94748330116272, "inputs": {"reads": {"src": "hda", "id": "9b6fc5321df08746"}, "reference_source|ref": {"src": "hda", "id": "8a4f1e7277a03df0"}, "reference_source|ref_selector": "history"}, "job": {"model_class": "Job", "id": "655a6dccf80063df", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:32:26.053756", "create_time": "2022-10-22T17:30:57.441899", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_alnqual/lofreq_alnqual/2.1.5+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-b74hv", "command_line": "ln -s '/galaxy/server/database/objects/e/2/b/dataset_e2bca8e8-7aa0-4dfa-8ad0-78d9f52c64f5.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq alnqual -b    '/galaxy/server/database/objects/e/8/a/dataset_e8a24170-532e-4977-ab8b-7b7dfd07a675.dat' 'reference.fa' > '/galaxy/server/database/objects/7/9/8/dataset_7988eade-3654-4914-a799-605c64b89734.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "recompute_all": "\"false\"", "alnqual_choice": "{\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 393, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "9b6fc5321df08746", "src": "hda", "uuid": "e8a24170-532e-4977-ab8b-7b7dfd07a675"}, "ref": {"id": "8a4f1e7277a03df0", "src": "hda", "uuid": "e2bca8e8-7aa0-4dfa-8ad0-78d9f52c64f5"}}, "outputs": {"output": {"id": "c1376ddcb39830d1", "src": "hda", "uuid": "7988eade-3654-4914-a799-605c64b89734"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:32:12", "plugin": "core", "name": "end_epoch", "raw_value": "1666459932.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:32:11", "plugin": "core", "name": "start_epoch", "raw_value": "1666459931.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmpmtqx0bmcalnqual-out5.bam v. /tmp/tmpuyjl9l66alnqual-out5.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call", "tool_version": "2.1.5+galaxy1", "test_index": 0, "time_seconds": 141.56006932258606, "inputs": {"reads": {"src": "hda", "id": "fcf1b68bee32c13f"}, "reference_source|ref": {"src": "hda", "id": "1a6ce6ca02ba3d86"}, "reference_source|ref_selector": "history"}, "job": {"model_class": "Job", "id": "91f33c342f4239f5", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:24:45.476231", "create_time": "2022-10-22T17:22:52.567481", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-wnxbm", "command_line": "ln -s '/galaxy/server/database/objects/a/9/6/dataset_a96087fd-2ab7-4a7b-94d2-71a38b34afce.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/a/b/9/dataset_ab9c18c4-7653-412b-93c5-2285d53ebaf6.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/2/b/d/metadata_2bdd5673-8cd6-4b03-b7a1-4615ab1f6a76.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf    --sig 0.01 --bonf dynamic   reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 2, \"bonf\": \"dynamic\", \"filter_type\": \"set_lofreq_standard\", \"others\": \"\", \"sig\": \"0.01\"}", "call_control": "{\"__current_case__\": 0, \"set_call_options\": \"no\"}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 349, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "fcf1b68bee32c13f", "src": "hda", "uuid": "ab9c18c4-7653-412b-93c5-2285d53ebaf6"}, "ref": {"id": "1a6ce6ca02ba3d86", "src": "hda", "uuid": "a96087fd-2ab7-4a7b-94d2-71a38b34afce"}}, "outputs": {"variants": {"id": "a6a59fa7f580e0dc", "src": "hda", "uuid": "a2395e00-40fc-4645-873f-704ee6191e30"}}, "output_collections": {}, "tool_stdout": "INFO [2022-10-22 17:24:25,205]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2022-10-22 17:24:25,240]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2022-10-22 17:24:29,280]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/272/tmp/lofreq2_call_parallel78_4c2df/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2022-10-22 17:24:25,205]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2022-10-22 17:24:25,240]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2022-10-22 17:24:29,280]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/272/tmp/lofreq2_call_parallel78_4c2df/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:24:29", "plugin": "core", "name": "end_epoch", "raw_value": "1666459469.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:24:25", "plugin": "core", "name": "start_epoch", "raw_value": "1666459465.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call", "tool_version": "2.1.5+galaxy1", "test_index": 1, "time_seconds": 117.4342713356018, "inputs": {"reads": {"src": "hda", "id": "fcf1b68bee32c13f"}, "reference_source|ref": {"src": "hda", "id": "1a6ce6ca02ba3d86"}, "reference_source|ref_selector": "history", "call_control|set_call_options": "yes"}, "job": {"model_class": "Job", "id": "bd5dae26f4aa2408", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:24:45.600637", "create_time": "2022-10-22T17:23:07.262367", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-4dlm5", "command_line": "ln -s '/galaxy/server/database/objects/a/9/6/dataset_a96087fd-2ab7-4a7b-94d2-71a38b34afce.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/a/b/9/dataset_ab9c18c4-7653-412b-93c5-2285d53ebaf6.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/2/b/d/metadata_2bdd5673-8cd6-4b03-b7a1-4615ab1f6a76.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf   --min-cov 1 --max-depth 1000000  --min-bq 6 --min-alt-bq 6    --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0  --sig 0.01 --bonf dynamic   reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 2, \"bonf\": \"dynamic\", \"filter_type\": \"set_lofreq_standard\", \"others\": \"\", \"sig\": \"0.01\"}", "call_control": "{\"__current_case__\": 1, \"align_quals\": {\"alnqual\": {\"__current_case__\": 0, \"alnqual_choice\": {\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}, \"use_alnqual\": \"\"}}, \"bc_quals\": {\"alt_bq\": {\"__current_case__\": 0, \"modify\": \"\"}, \"min_alt_bq\": \"6\", \"min_bq\": \"6\"}, \"coverage\": {\"max_depth\": \"1000000\", \"min_cov\": \"1\"}, \"joint_qual\": {\"def_alt_jq\": \"0\", \"min_alt_jq\": \"0\", \"min_jq\": \"0\"}, \"map_quals\": {\"min_mq\": \"0\", \"use_mq\": {\"__current_case__\": 0, \"max_mq\": \"255\", \"no_mq\": \"\"}}, \"pe\": {\"use_orphan\": \"false\"}, \"set_call_options\": \"yes\", \"source_qual\": {\"use_src_qual\": {\"__current_case__\": 0, \"src_qual\": \"\"}}}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 349, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "fcf1b68bee32c13f", "src": "hda", "uuid": "ab9c18c4-7653-412b-93c5-2285d53ebaf6"}, "ref": {"id": "1a6ce6ca02ba3d86", "src": "hda", "uuid": "a96087fd-2ab7-4a7b-94d2-71a38b34afce"}}, "outputs": {"variants": {"id": "8670836634d92111", "src": "hda", "uuid": "5aa836db-fbcc-4899-a4e8-42432cded6d4"}}, "output_collections": {}, "tool_stdout": "INFO [2022-10-22 17:24:25,472]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2022-10-22 17:24:25,493]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2022-10-22 17:24:29,411]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/273/tmp/lofreq2_call_parallel24mbr0op/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2022-10-22 17:24:25,472]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2022-10-22 17:24:25,493]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2022-10-22 17:24:29,411]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/273/tmp/lofreq2_call_parallel24mbr0op/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:24:29", "plugin": "core", "name": "end_epoch", "raw_value": "1666459469.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:24:25", "plugin": "core", "name": "start_epoch", "raw_value": "1666459465.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call", "tool_version": "2.1.5+galaxy1", "test_index": 2, "time_seconds": 121.0839033126831, "inputs": {"reads": {"src": "hda", "id": "8cb39dedd407efbe"}, "reference_source|ref": {"src": "hda", "id": "31919c34b090bbe3"}, "reference_source|ref_selector": "history", "call_control|source_qual|use_src_qual|def_nm_q": "40", "call_control|source_qual|use_src_qual|ign_vcf": {"src": "hda", "id": "bf02b2d70362ca32"}, "call_control|source_qual|use_src_qual|src_qual": "--src-qual", "call_control|set_call_options": "yes"}, "job": {"model_class": "Job", "id": "e8f92349cd10ca3b", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:25:41.986271", "create_time": "2022-10-22T17:24:08.289166", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-ppgdk", "command_line": "ln -s '/galaxy/server/database/objects/1/a/1/dataset_1a1e30f5-3ce1-495e-837c-9f7c3dee974e.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/6/2/8/dataset_628dc722-7519-496d-99bf-c47d23996d78.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/a/d/c/metadata_adcb2642-d90f-47fe-8adb-2274dfb90cbb.dat' reads.bam.bai && ln -s '/galaxy/server/database/objects/4/e/0/dataset_4e0ed67e-23f9-491c-a0ba-8c70e5014d26.dat' ign0.vcf &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf   --min-cov 1 --max-depth 1000000  --min-bq 6 --min-alt-bq 6    --min-mq 0 --max-mq 255 --src-qual --ign-vcf 'ign0.vcf' --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0  --sig 0.01 --bonf dynamic   reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 2, \"bonf\": \"dynamic\", \"filter_type\": \"set_lofreq_standard\", \"others\": \"\", \"sig\": \"0.01\"}", "call_control": "{\"__current_case__\": 1, \"align_quals\": {\"alnqual\": {\"__current_case__\": 0, \"alnqual_choice\": {\"__current_case__\": 1, \"alnquals_to_use\": \"\", \"extended_baq\": \"true\"}, \"use_alnqual\": \"\"}}, \"bc_quals\": {\"alt_bq\": {\"__current_case__\": 0, \"modify\": \"\"}, \"min_alt_bq\": \"6\", \"min_bq\": \"6\"}, \"coverage\": {\"max_depth\": \"1000000\", \"min_cov\": \"1\"}, \"joint_qual\": {\"def_alt_jq\": \"0\", \"min_alt_jq\": \"0\", \"min_jq\": \"0\"}, \"map_quals\": {\"min_mq\": \"0\", \"use_mq\": {\"__current_case__\": 0, \"max_mq\": \"255\", \"no_mq\": \"\"}}, \"pe\": {\"use_orphan\": \"false\"}, \"set_call_options\": \"yes\", \"source_qual\": {\"use_src_qual\": {\"__current_case__\": 1, \"def_nm_q\": \"40\", \"ign_vcf\": {\"values\": [{\"id\": 354, \"src\": \"hda\"}]}, \"src_qual\": \"--src-qual\"}}}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 353, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "8cb39dedd407efbe", "src": "hda", "uuid": "628dc722-7519-496d-99bf-c47d23996d78"}, "ref": {"id": "31919c34b090bbe3", "src": "hda", "uuid": "1a1e30f5-3ce1-495e-837c-9f7c3dee974e"}, "call_control|source_qual|ign_vcf": {"id": "bf02b2d70362ca32", "src": "hda", "uuid": "4e0ed67e-23f9-491c-a0ba-8c70e5014d26"}}, "outputs": {"variants": {"id": "5c027063f02820d7", "src": "hda", "uuid": "15f16e1e-4b0d-43e8-be2b-c069f2287764"}}, "output_collections": {}, "tool_stdout": "INFO [2022-10-22 17:25:25,383]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --src-qual --ign-vcf ign0.vcf --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2022-10-22 17:25:25,416]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2022-10-22 17:25:29,080]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/277/tmp/lofreq2_call_parallelmt01t2pv/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2022-10-22 17:25:25,383]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --min-cov 1 --max-depth 1000000 --min-bq 6 --min-alt-bq 6 --min-mq 0 --max-mq 255 --src-qual --ign-vcf ign0.vcf --def-nm-q 40 --min-jq 0 --min-alt-jq 0 --def-alt-jq 0 --sig 0.01 --bonf dynamic reads.bam\n\nINFO [2022-10-22 17:25:25,416]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2022-10-22 17:25:29,080]: Executing lofreq filter -i /galaxy/server/database/jobs_directory/000/277/tmp/lofreq2_call_parallelmt01t2pv/concat.vcf.gz -o variants.vcf --snvqual-thresh 38 --indelqual-thresh 20\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:25:29", "plugin": "core", "name": "end_epoch", "raw_value": "1666459529.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:25:25", "plugin": "core", "name": "start_epoch", "raw_value": "1666459525.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call", "tool_version": "2.1.5+galaxy1", "test_index": 3, "time_seconds": 115.73921465873718, "inputs": {"reads": {"src": "hda", "id": "87efa83f5ccf8ba1"}, "reference_source|ref": {"src": "hda", "id": "ba78573659d04884"}, "reference_source|ref_selector": "history", "filter_control|filter_type": "set_all_off"}, "job": {"model_class": "Job", "id": "3e0fa99b62e22b4b", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:26:06.046635", "create_time": "2022-10-22T17:24:28.900048", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-b4hkr", "command_line": "ln -s '/galaxy/server/database/objects/a/9/8/dataset_a98f4f46-8dc1-4ad1-8b26-597ac87d77f0.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/e/e/2/dataset_ee216176-b4ea-4d91-8f88-66511cd14fb4.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/f/b/f/metadata_fbf75c69-ba5a-401a-a397-f0a50ab3ec2f.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf    --sig 1 --bonf 1 --no-default-filter  reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)  && ln -s variants.vcf variants.vcf.gz && gzip -df variants.vcf.gz", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 0, \"bonf\": \"1\", \"filter_type\": \"set_all_off\", \"others\": \"--no-default-filter\", \"sig\": \"1\"}", "call_control": "{\"__current_case__\": 0, \"set_call_options\": \"no\"}", "variant_types": "\"\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 357, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "87efa83f5ccf8ba1", "src": "hda", "uuid": "ee216176-b4ea-4d91-8f88-66511cd14fb4"}, "ref": {"id": "ba78573659d04884", "src": "hda", "uuid": "a98f4f46-8dc1-4ad1-8b26-597ac87d77f0"}}, "outputs": {"variants": {"id": "b74a7c59a95dd9b9", "src": "hda", "uuid": "e32cfe00-6e56-4c07-ab00-04d4385fe04c"}}, "output_collections": {}, "tool_stdout": "INFO [2022-10-22 17:25:52,256]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2022-10-22 17:25:52,278]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2022-10-22 17:25:55,024]: Copying concatenated vcf file to final destination\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2022-10-22 17:25:52,256]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2022-10-22 17:25:52,278]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 66\nNumber of indel tests performed: 0\nINFO [2022-10-22 17:25:55,024]: Copying concatenated vcf file to final destination\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:25:55", "plugin": "core", "name": "end_epoch", "raw_value": "1666459555.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:25:52", "plugin": "core", "name": "start_epoch", "raw_value": "1666459552.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call", "tool_version": "2.1.5+galaxy1", "test_index": 4, "time_seconds": 128.06862688064575, "inputs": {"reads": {"src": "hda", "id": "0917dc60882b63bb"}, "reference_source|ref": {"src": "hda", "id": "f53660808fb84df2"}, "reference_source|ref_selector": "history", "variant_types": "--call-indels --only-indels", "filter_control|filter_type": "set_all_off"}, "job": {"model_class": "Job", "id": "9acec2a1b9834864", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:26:53.685103", "create_time": "2022-10-22T17:25:09.584446", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_call/lofreq_call/2.1.5+galaxy1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-gp5g9", "command_line": "ln -s '/galaxy/server/database/objects/c/c/b/dataset_ccbad6fa-eab3-4829-9e53-a15b5796c209.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  ln -s '/galaxy/server/database/objects/c/6/5/dataset_c6526b85-927e-4f5a-8162-70e1cc6890cf.dat' reads.bam && ln -s -f '/galaxy/server/database/objects/_metadata_files/8/8/c/metadata_88c1a09b-e62d-4239-8f32-b7ff294aafb0.dat' reads.bam.bai &&   lofreq call-parallel --pp-threads ${GALAXY_SLOTS:-1} --verbose  --ref 'reference.fa' --out variants.vcf --call-indels --only-indels    --sig 1 --bonf 1 --no-default-filter  reads.bam 2>&1  || (tool_exit_code=$? && cat \"$TMPDIR/lofreq2_call_parallel*/*.log\" 1>&2 && exit $tool_exit_code)  && ln -s variants.vcf variants.vcf.gz && gzip -df variants.vcf.gz", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "filter_control": "{\"__current_case__\": 0, \"bonf\": \"1\", \"filter_type\": \"set_all_off\", \"others\": \"--no-default-filter\", \"sig\": \"1\"}", "call_control": "{\"__current_case__\": 0, \"set_call_options\": \"no\"}", "variant_types": "\"--call-indels --only-indels\"", "regions": "{\"__current_case__\": 0, \"restrict_to_region\": \"genome\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 362, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "0917dc60882b63bb", "src": "hda", "uuid": "c6526b85-927e-4f5a-8162-70e1cc6890cf"}, "ref": {"id": "f53660808fb84df2", "src": "hda", "uuid": "ccbad6fa-eab3-4829-9e53-a15b5796c209"}}, "outputs": {"variants": {"id": "901be9e199d8ffea", "src": "hda", "uuid": "e81ca3d0-f427-4236-b95a-5434dca441b1"}}, "output_collections": {}, "tool_stdout": "INFO [2022-10-22 17:26:39,248]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --call-indels --only-indels --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2022-10-22 17:26:39,266]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 0\nNumber of indel tests performed: 9\nINFO [2022-10-22 17:26:43,021]: Copying concatenated vcf file to final destination\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "INFO [2022-10-22 17:26:39,248]: Using 1 threads with following basic args: lofreq call --verbose --ref reference.fa --call-indels --only-indels --sig 1 --bonf 1 --no-default-filter reads.bam\n\nINFO [2022-10-22 17:26:39,266]: Adding 3 commands to mp-pool\nNumber of substitution tests performed: 0\nNumber of indel tests performed: 9\nINFO [2022-10-22 17:26:43,021]: Copying concatenated vcf file to final destination\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:26:43", "plugin": "core", "name": "end_epoch", "raw_value": "1666459603.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:26:39", "plugin": "core", "name": "start_epoch", "raw_value": "1666459599.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter/2.1.5+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter", "tool_version": "2.1.5+galaxy0", "test_index": 0, "time_seconds": 93.76293158531189, "inputs": {"invcf": {"src": "hda", "id": "a7c0d8fb955b950b"}, "filter_by_type|qual|snvqual_filter|snvqual_thresh": "38", "filter_by_type|qual|snvqual_filter|snvqual": "min-phred", "filter_by_type|qual|indelqual_filter|indelqual_thresh": "20", "filter_by_type|qual|indelqual_filter|indelqual": "min-phred"}, "job": {"model_class": "Job", "id": "930e6a69619f035c", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:28:55.502645", "create_time": "2022-10-22T17:27:34.742781", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter/2.1.5+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-d4hl2", "command_line": "lofreq filter -i /galaxy/server/database/objects/4/6/8/dataset_468a6211-c88b-4b11-a4a4-b76a84b31dd4.dat --no-defaults --verbose   -Q 38 -K 20 -v 10 -V 0 -a 0.0 -A 0.0 -b fdr -c 0.001   -o filtered.vcf", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "flag_or_drop": "\"\"", "sb": "{\"sb_filter\": {\"__current_case__\": 2, \"sb_alpha\": \"0.001\", \"sb_compound\": \"true\", \"sb_indels\": \"false\", \"sb_mtc\": \"fdr\", \"strand_bias\": \"mtc\"}}", "af": "{\"af_max\": \"0.0\", \"af_min\": \"0.0\"}", "coverage": "{\"cov_max\": \"0\", \"cov_min\": \"10\"}", "filter_by_type": "{\"__current_case__\": 0, \"keep_only\": \"\", \"qual\": {\"indelqual_filter\": {\"__current_case__\": 1, \"indelqual\": \"min-phred\", \"indelqual_thresh\": \"20\"}, \"snvqual_filter\": {\"__current_case__\": 1, \"snvqual\": \"min-phred\", \"snvqual_thresh\": \"38\"}}}"}, "inputs": {"invcf": {"id": "a7c0d8fb955b950b", "src": "hda", "uuid": "468a6211-c88b-4b11-a4a4-b76a84b31dd4"}}, "outputs": {"outvcf": {"id": "95907e1fd1c3ba3c", "src": "hda", "uuid": "d3ac7d3b-8932-4c85-9a8a-f0ff7e8bf60d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Skipping default settings\nAt least one type of multiple testing correction requested. Doing first pass of vcf\nMTC application completed\nSuccessful exit.\n", "job_stdout": "", "job_stderr": "", "stderr": "Skipping default settings\nAt least one type of multiple testing correction requested. Doing first pass of vcf\nMTC application completed\nSuccessful exit.\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:28:46", "plugin": "core", "name": "end_epoch", "raw_value": "1666459726.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:28:46", "plugin": "core", "name": "start_epoch", "raw_value": "1666459726.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter/2.1.5+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter", "tool_version": "2.1.5+galaxy0", "test_index": 1, "time_seconds": 94.1114866733551, "inputs": {"invcf": {"src": "hda", "id": "3838c126b28db3ea"}, "filter_by_type|qual|snvqual_filter|snvqual_alpha": "0.01", "filter_by_type|qual|snvqual_filter|snvqual_mtc": "bonf", "filter_by_type|qual|snvqual_filter|snvqual_ntests": "66", "filter_by_type|qual|snvqual_filter|snvqual": "mtc", "filter_by_type|keep_only": "--only-snvs"}, "job": {"model_class": "Job", "id": "44c5bd0951c5d768", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:29:17.775631", "create_time": "2022-10-22T17:27:53.572483", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter/2.1.5+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-dx7d5", "command_line": "lofreq filter -i /galaxy/server/database/objects/1/f/c/dataset_1fc3e7d2-32eb-4612-9c8e-eb9f91d99be0.dat --no-defaults --verbose  --only-snvs -q bonf -r 0.01 -s 66 -v 10 -V 0 -a 0.0 -A 0.0 -b fdr -c 0.001   -o filtered.vcf", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "flag_or_drop": "\"\"", "sb": "{\"sb_filter\": {\"__current_case__\": 2, \"sb_alpha\": \"0.001\", \"sb_compound\": \"true\", \"sb_indels\": \"false\", \"sb_mtc\": \"fdr\", \"strand_bias\": \"mtc\"}}", "af": "{\"af_max\": \"0.0\", \"af_min\": \"0.0\"}", "coverage": "{\"cov_max\": \"0\", \"cov_min\": \"10\"}", "filter_by_type": "{\"__current_case__\": 1, \"keep_only\": \"--only-snvs\", \"qual\": {\"snvqual_filter\": {\"__current_case__\": 2, \"snvqual\": \"mtc\", \"snvqual_alpha\": \"0.01\", \"snvqual_mtc\": \"bonf\", \"snvqual_ntests\": \"66\"}}}"}, "inputs": {"invcf": {"id": "3838c126b28db3ea", "src": "hda", "uuid": "1fc3e7d2-32eb-4612-9c8e-eb9f91d99be0"}}, "outputs": {"outvcf": {"id": "8601ce7a8703480e", "src": "hda", "uuid": "2dd76546-54fa-4dac-9d48-56065b9dd377"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Skipping default settings\nAt least one type of multiple testing correction requested. Doing first pass of vcf\nMTC application completed\nSuccessful exit.\n", "job_stdout": "", "job_stderr": "", "stderr": "Skipping default settings\nAt least one type of multiple testing correction requested. Doing first pass of vcf\nMTC application completed\nSuccessful exit.\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:29:08", "plugin": "core", "name": "end_epoch", "raw_value": "1666459748.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:29:08", "plugin": "core", "name": "start_epoch", "raw_value": "1666459748.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter/2.1.5+galaxy0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter", "tool_version": "2.1.5+galaxy0", "test_index": 2, "time_seconds": 104.40052318572998, "inputs": {"invcf": {"src": "hda", "id": "b786b1320626f3ef"}, "filter_by_type|qual|snvqual_filter|snvqual_thresh": "38", "filter_by_type|qual|snvqual_filter|snvqual": "min-phred", "filter_by_type|qual|indelqual_filter|indelqual_thresh": "20", "filter_by_type|qual|indelqual_filter|indelqual": "min-phred", "flag_or_drop": "--print-all"}, "job": {"model_class": "Job", "id": "57a4ea9f6c23cbae", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:30:14.608043", "create_time": "2022-10-22T17:28:45.688940", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_filter/lofreq_filter/2.1.5+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-4krf4", "command_line": "lofreq filter -i /galaxy/server/database/objects/6/4/d/dataset_64de568f-575e-4376-90d2-3f19b34468da.dat --no-defaults --verbose --print-all  -Q 38 -K 20 -v 10 -V 0 -a 0.0 -A 0.0 -b fdr -c 0.001   -o filtered.vcf", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "flag_or_drop": "\"--print-all\"", "sb": "{\"sb_filter\": {\"__current_case__\": 2, \"sb_alpha\": \"0.001\", \"sb_compound\": \"true\", \"sb_indels\": \"false\", \"sb_mtc\": \"fdr\", \"strand_bias\": \"mtc\"}}", "af": "{\"af_max\": \"0.0\", \"af_min\": \"0.0\"}", "coverage": "{\"cov_max\": \"0\", \"cov_min\": \"10\"}", "filter_by_type": "{\"__current_case__\": 0, \"keep_only\": \"\", \"qual\": {\"indelqual_filter\": {\"__current_case__\": 1, \"indelqual\": \"min-phred\", \"indelqual_thresh\": \"20\"}, \"snvqual_filter\": {\"__current_case__\": 1, \"snvqual\": \"min-phred\", \"snvqual_thresh\": \"38\"}}}"}, "inputs": {"invcf": {"id": "b786b1320626f3ef", "src": "hda", "uuid": "64de568f-575e-4376-90d2-3f19b34468da"}}, "outputs": {"outvcf": {"id": "0fed15630d4c8c6a", "src": "hda", "uuid": "6ea74728-bcba-4f82-8c77-dca53740eab1"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Skipping default settings\nAt least one type of multiple testing correction requested. Doing first pass of vcf\nMTC application completed\nSuccessful exit.\n", "job_stdout": "", "job_stderr": "", "stderr": "Skipping default settings\nAt least one type of multiple testing correction requested. Doing first pass of vcf\nMTC application completed\nSuccessful exit.\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:29:58", "plugin": "core", "name": "end_epoch", "raw_value": "1666459798.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:29:58", "plugin": "core", "name": "start_epoch", "raw_value": "1666459798.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual", "tool_version": "2.1.5+galaxy0", "test_index": 0, "time_seconds": 97.5922417640686, "inputs": {"reads": {"src": "hda", "id": "8d5b60c011006dc9"}, "strategy|insertions": "20", "strategy|deletions": "30", "strategy|selector": "uniform"}, "job": {"model_class": "Job", "id": "c31fedf45acf7ca2", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:27:43.280635", "create_time": "2022-10-22T17:26:17.675782", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-92wkw", "command_line": "lofreq indelqual --uniform 20,30 -o output.bam /galaxy/server/database/objects/8/3/b/dataset_83bd69c1-b118-4505-879c-063a3aa06f10.dat", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strategy": "{\"__current_case__\": 0, \"deletions\": \"30\", \"insertions\": \"20\", \"selector\": \"uniform\"}"}, "inputs": {"reads": {"id": "8d5b60c011006dc9", "src": "hda", "uuid": "83bd69c1-b118-4505-879c-063a3aa06f10"}}, "outputs": {"output": {"id": "c38eaf867d5fce57", "src": "hda", "uuid": "32d053c8-7772-48f0-8055-6be5d932cfc8"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:27:34", "plugin": "core", "name": "end_epoch", "raw_value": "1666459654.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:27:34", "plugin": "core", "name": "start_epoch", "raw_value": "1666459654.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmpdwt6obeoindelqual-out1.bam v. /tmp/tmp4xz6b167indelqual-out1.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual", "tool_version": "2.1.5+galaxy0", "test_index": 1, "time_seconds": 104.14496088027954, "inputs": {"reads": {"src": "hda", "id": "7a44effd0795f191"}, "strategy|reference_source|ref": {"src": "hda", "id": "9d3a0b97e4b6eb7b"}, "strategy|reference_source|ref_selector": "history", "strategy|selector": "dindel"}, "job": {"model_class": "Job", "id": "33c173a90a74a375", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:28:29.619670", "create_time": "2022-10-22T17:27:01.816350", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-h4hlj", "command_line": "ln -s '/galaxy/server/database/objects/4/8/4/dataset_484cb0f4-cae4-4965-bdef-12b24a94f7dc.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq indelqual --dindel --ref reference.fa -o output.bam /galaxy/server/database/objects/8/d/7/dataset_8d71081a-6830-486e-819d-a78b6bb4c585.dat", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strategy": "{\"__current_case__\": 1, \"reference_source\": {\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 371, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}, \"selector\": \"dindel\"}"}, "inputs": {"reads": {"id": "7a44effd0795f191", "src": "hda", "uuid": "8d71081a-6830-486e-819d-a78b6bb4c585"}, "strategy|ref": {"id": "9d3a0b97e4b6eb7b", "src": "hda", "uuid": "484cb0f4-cae4-4965-bdef-12b24a94f7dc"}}, "outputs": {"output": {"id": "490cd896fc8612ef", "src": "hda", "uuid": "f43f31cc-a099-4730-bd47-cc91f9926b91"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:28:19", "plugin": "core", "name": "end_epoch", "raw_value": "1666459699.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:28:19", "plugin": "core", "name": "start_epoch", "raw_value": "1666459699.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmpwcxmz4geindelqual-out2.bam v. /tmp/tmptn3y6dgaindelqual-out2.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual", "tool_version": "2.1.5+galaxy0", "test_index": 2, "time_seconds": 100.38775563240051, "inputs": {"reads": {"src": "hda", "id": "7a44effd0795f191"}, "strategy|insertions": "20", "strategy|selector": "uniform"}, "job": {"model_class": "Job", "id": "1722c024ac8c4951", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:28:33.829597", "create_time": "2022-10-22T17:27:10.508272", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-rsnnk", "command_line": "lofreq indelqual --uniform 20 -o output.bam /galaxy/server/database/objects/8/d/7/dataset_8d71081a-6830-486e-819d-a78b6bb4c585.dat", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strategy": "{\"__current_case__\": 0, \"deletions\": \"\", \"insertions\": \"20\", \"selector\": \"uniform\"}"}, "inputs": {"reads": {"id": "7a44effd0795f191", "src": "hda", "uuid": "8d71081a-6830-486e-819d-a78b6bb4c585"}}, "outputs": {"output": {"id": "a0e3ff0a2e8924c5", "src": "hda", "uuid": "a62c8497-869d-40e3-b74b-903e172a1118"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:28:22", "plugin": "core", "name": "end_epoch", "raw_value": "1666459702.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:28:22", "plugin": "core", "name": "start_epoch", "raw_value": "1666459702.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmpmlxke9tuindelqual-out3.bam v. /tmp/tmp3jpaon0findelqual-out3.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi/2.1.5+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi", "tool_version": "2.1.5+galaxy0", "test_index": 0, "time_seconds": 120.02377510070801, "inputs": {"reads": {"src": "hda", "id": "6f6dc5f9e0a236aa"}, "reference_source|ref": {"src": "hda", "id": "f53660808fb84df2"}, "reference_source|ref_selector": "history"}, "job": {"model_class": "Job", "id": "7a0b4b0d53e7398e", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:26:45.442710", "create_time": "2022-10-22T17:25:22.567708", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi/2.1.5+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-ljsml", "command_line": "ln -s '/galaxy/server/database/objects/c/c/b/dataset_ccbad6fa-eab3-4829-9e53-a15b5796c209.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq viterbi --ref 'reference.fa'  --defqual 2 --out tmp.bam '/galaxy/server/database/objects/b/b/b/dataset_bbb73c28-22da-4eac-abc3-d30d3c2bda9b.dat' &&  samtools sort --no-PG -T \"${TMPDIR:-.}\" -@ ${GALAXY_SLOTS:-1} -O BAM -o '/galaxy/server/database/objects/e/4/d/dataset_e4d4608f-5418-4cc8-a5c9-fbf88aa4717f.dat' tmp.bam", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv_options": "{\"bq2_handling\": {\"__current_case__\": 0, \"defqual\": \"2\", \"replace_bq2\": \"keep\"}, \"keepflags\": \"false\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 362, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "6f6dc5f9e0a236aa", "src": "hda", "uuid": "bbb73c28-22da-4eac-abc3-d30d3c2bda9b"}, "ref": {"id": "f53660808fb84df2", "src": "hda", "uuid": "ccbad6fa-eab3-4829-9e53-a15b5796c209"}}, "outputs": {"realigned": {"id": "59699deec2d8e9de", "src": "hda", "uuid": "e4d4608f-5418-4cc8-a5c9-fbf88aa4717f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:26:35", "plugin": "core", "name": "end_epoch", "raw_value": "1666459595.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:26:35", "plugin": "core", "name": "start_epoch", "raw_value": "1666459595.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi/2.1.5+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi", "tool_version": "2.1.5+galaxy0", "test_index": 1, "time_seconds": 99.7625904083252, "inputs": {"reads": {"src": "hda", "id": "339074bd70f370f0"}, "reference_source|ref": {"src": "hda", "id": "7da34de2dd8af9f9"}, "reference_source|ref_selector": "history", "adv_options|keepflags": true}, "job": {"model_class": "Job", "id": "ba22881c5b9685ec", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:27:21.210455", "create_time": "2022-10-22T17:25:55.186734", "galaxy_version": "21.09", "command_version": "2.1.5", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi/2.1.5+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-zqsgw", "command_line": "ln -s '/galaxy/server/database/objects/8/a/f/dataset_8afaecd2-d8d3-47bd-890a-69e7acf010b5.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq viterbi --ref 'reference.fa' --keepflags --defqual 2 --out tmp.bam '/galaxy/server/database/objects/4/c/8/dataset_4c8943e1-7030-4dc3-acdf-2a6cc6d31dad.dat' &&  samtools sort --no-PG -T \"${TMPDIR:-.}\" -@ ${GALAXY_SLOTS:-1} -O BAM -o '/galaxy/server/database/objects/b/9/f/dataset_b9f8a142-e287-457d-ad9b-3cec6284d31b.dat' tmp.bam", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv_options": "{\"bq2_handling\": {\"__current_case__\": 0, \"defqual\": \"2\", \"replace_bq2\": \"keep\"}, \"keepflags\": \"true\"}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 366, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "339074bd70f370f0", "src": "hda", "uuid": "4c8943e1-7030-4dc3-acdf-2a6cc6d31dad"}, "ref": {"id": "7da34de2dd8af9f9", "src": "hda", "uuid": "8afaecd2-d8d3-47bd-890a-69e7acf010b5"}}, "outputs": {"realigned": {"id": "77aaf2a713b210a1", "src": "hda", "uuid": "b9f8a142-e287-457d-ad9b-3cec6284d31b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:27:09", "plugin": "core", "name": "end_epoch", "raw_value": "1666459629.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:27:09", "plugin": "core", "name": "start_epoch", "raw_value": "1666459629.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm/0.3+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm", "tool_version": "0.3+galaxy0", "test_index": 0, "time_seconds": 99.36746549606323, "inputs": {"readFile": {"src": "hda", "id": "1b160fafc76c55d6"}, "paf": {"src": "hda", "id": "9825c85006363b49"}}, "job": {"model_class": "Job", "id": "7316539fd3de88a2", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:22:23.675949", "create_time": "2022-10-22T17:21:00.502098", "galaxy_version": "21.09", "command_version": "0.3-r179", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm/0.3+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-2s7bd", "command_line": "miniasm -f '/galaxy/server/database/objects/8/a/a/dataset_8aa8232e-c2c4-4114-af9b-feaacaf77650.dat' -m '100' -i '0.05' -s '1000' -c '3' -o '1000' -h '1000' -I '0.08' -g '1000' -d '50000' -e '4' -n '3' -F '0.8' '/galaxy/server/database/objects/b/4/6/dataset_b46bea48-9007-45b4-839b-dad665788bb4.dat' > '/galaxy/server/database/objects/4/d/3/dataset_4d398826-f46f-4725-b789-ee1330567a14.dat'", "traceback": null, "params": {"__input_ext": "\"fastqsanger\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "graph": "{\"finalDropRatio\": \"0.8\", \"maxBubDist\": \"50000\", \"maxGapDiff\": \"1000\", \"minUtgSize\": \"4\", \"nRounds\": \"3\"}", "overlapping": "{\"intThres\": \"0.08\", \"maxHang\": \"1000\", \"minOvlp\": \"1000\"}", "preselection": "{\"minCov\": \"3\", \"minIden\": \"0.05\", \"minMatch\": \"100\", \"minSpan\": \"1000\"}"}, "inputs": {"readFile": {"id": "1b160fafc76c55d6", "src": "hda", "uuid": "8aa8232e-c2c4-4114-af9b-feaacaf77650"}, "paf": {"id": "9825c85006363b49", "src": "hda", "uuid": "b46bea48-9007-45b4-839b-dad665788bb4"}}, "outputs": {"gfa": {"id": "09069462941b614d", "src": "hda", "uuid": "4d398826-f46f-4725-b789-ee1330567a14"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::main] ===> Step 1: reading read mappings <===\n[M::ma_hit_read::0.157*1.00] read 100000 hits; stored 187742 hits and 12067 sequences (111354001 bp)\n[M::main] ===> Step 2: 1-pass (crude) read selection <===\n[M::ma_hit_sub::0.171*1.00] 9155 query sequences remain after sub\n[M::ma_hit_cut::0.174*1.00] 161122 hits remain after cut\n[M::ma_hit_flt::0.176*1.00] 156936 hits remain after filtering; crude coverage after filtering: 11.85\n[M::main] ===> Step 3: 2-pass (fine) read selection <===\n[M::ma_hit_sub::0.182*1.00] 9023 query sequences remain after sub\n[M::ma_hit_cut::0.184*1.00] 152071 hits remain after cut\n[M::ma_hit_contained::0.187*1.00] 1536 sequences and 8359 hits remain after containment removal\n[M::main] ===> Step 4: graph cleaning <===\n[M::ma_sg_gen] read 8236 arcs\n[M::main] ===> Step 4.1: transitive reduction <===\n[M::asg_arc_del_trans] transitively reduced 4182 arcs\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 362 asymmetric arcs\n[M::main] ===> Step 4.2: initial tip cutting and bubble popping <===\n[M::asg_cut_tip] cut 260 tips\n[M::asg_pop_bubble] popped 105 bubbles and trimmed 4 tips\n[M::main] ===> Step 4.3: cutting short overlaps (3 rounds in total) <===\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 29 asymmetric arcs\n[M::asg_arc_del_short] removed 37 short overlaps\n[M::asg_cut_tip] cut 104 tips\n[M::asg_pop_bubble] popped 1 bubbles and trimmed 0 tips\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 1 asymmetric arcs\n[M::asg_arc_del_short] removed 1 short overlaps\n[M::asg_cut_tip] cut 3 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::asg_arc_del_short] removed 0 short overlaps\n[M::main] ===> Step 4.4: removing short internal sequences and bi-loops <===\n[M::asg_cut_internal] cut 0 internal sequences\n[M::asg_cut_biloop] cut 0 small bi-loops\n[M::asg_cut_tip] cut 0 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::main] ===> Step 4.5: aggressively cutting short overlaps <===\n[M::asg_arc_del_short] removed 0 short overlaps\n[M::main] ===> Step 5: generating unitigs <===\n[M::main] Version: 0.3-r179\n[M::main] CMD: miniasm -f /galaxy/server/database/objects/8/a/a/dataset_8aa8232e-c2c4-4114-af9b-feaacaf77650.dat -m 100 -i 0.05 -s 1000 -c 3 -o 1000 -h 1000 -I 0.08 -g 1000 -d 50000 -e 4 -n 3 -F 0.8 /galaxy/server/database/objects/b/4/6/dataset_b46bea48-9007-45b4-839b-dad665788bb4.dat\n[M::main] Real time: 0.203 sec; CPU: 0.199 sec\n", "stderr": "\n[M::main] ===> Step 1: reading read mappings <===\n[M::ma_hit_read::0.157*1.00] read 100000 hits; stored 187742 hits and 12067 sequences (111354001 bp)\n[M::main] ===> Step 2: 1-pass (crude) read selection <===\n[M::ma_hit_sub::0.171*1.00] 9155 query sequences remain after sub\n[M::ma_hit_cut::0.174*1.00] 161122 hits remain after cut\n[M::ma_hit_flt::0.176*1.00] 156936 hits remain after filtering; crude coverage after filtering: 11.85\n[M::main] ===> Step 3: 2-pass (fine) read selection <===\n[M::ma_hit_sub::0.182*1.00] 9023 query sequences remain after sub\n[M::ma_hit_cut::0.184*1.00] 152071 hits remain after cut\n[M::ma_hit_contained::0.187*1.00] 1536 sequences and 8359 hits remain after containment removal\n[M::main] ===> Step 4: graph cleaning <===\n[M::ma_sg_gen] read 8236 arcs\n[M::main] ===> Step 4.1: transitive reduction <===\n[M::asg_arc_del_trans] transitively reduced 4182 arcs\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 362 asymmetric arcs\n[M::main] ===> Step 4.2: initial tip cutting and bubble popping <===\n[M::asg_cut_tip] cut 260 tips\n[M::asg_pop_bubble] popped 105 bubbles and trimmed 4 tips\n[M::main] ===> Step 4.3: cutting short overlaps (3 rounds in total) <===\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 29 asymmetric arcs\n[M::asg_arc_del_short] removed 37 short overlaps\n[M::asg_cut_tip] cut 104 tips\n[M::asg_pop_bubble] popped 1 bubbles and trimmed 0 tips\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 1 asymmetric arcs\n[M::asg_arc_del_short] removed 1 short overlaps\n[M::asg_cut_tip] cut 3 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::asg_arc_del_short] removed 0 short overlaps\n[M::main] ===> Step 4.4: removing short internal sequences and bi-loops <===\n[M::asg_cut_internal] cut 0 internal sequences\n[M::asg_cut_biloop] cut 0 small bi-loops\n[M::asg_cut_tip] cut 0 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::main] ===> Step 4.5: aggressively cutting short overlaps <===\n[M::asg_arc_del_short] removed 0 short overlaps\n[M::main] ===> Step 5: generating unitigs <===\n[M::main] Version: 0.3-r179\n[M::main] CMD: miniasm -f /galaxy/server/database/objects/8/a/a/dataset_8aa8232e-c2c4-4114-af9b-feaacaf77650.dat -m 100 -i 0.05 -s 1000 -c 3 -o 1000 -h 1000 -I 0.08 -g 1000 -d 50000 -e 4 -n 3 -F 0.8 /galaxy/server/database/objects/b/4/6/dataset_b46bea48-9007-45b4-839b-dad665788bb4.dat\n[M::main] Real time: 0.203 sec; CPU: 0.199 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 17:22:13", "plugin": "core", "name": "end_epoch", "raw_value": "1666459333.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:22:13", "plugin": "core", "name": "start_epoch", "raw_value": "1666459333.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm/0.3+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm", "tool_version": "0.3+galaxy0", "test_index": 1, "time_seconds": 103.16384863853455, "inputs": {"readFile": {"src": "hda", "id": "d5aae8df3561ba1d"}, "paf": {"src": "hda", "id": "78e58592359d92a0"}, "preselection|minMatch": "99", "preselection|minIden": "0.04", "preselection|minSpan": "999", "preselection|minCov": "2", "overlapping|minOvlp": "999", "overlapping|maxHang": "999", "overlapping|intThres": "0.7", "graph|maxGapDiff": "999", "graph|maxBubDist": "45000", "graph|minUtgSize": "3", "graph|nRounds": "2", "graph|finalDropRatio": "0.7"}, "job": {"model_class": "Job", "id": "5593ac7960055ba5", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:22:47.914861", "create_time": "2022-10-22T17:21:20.289918", "galaxy_version": "21.09", "command_version": "0.3-r179", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/miniasm/miniasm/0.3+galaxy0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-rn24v", "command_line": "miniasm -f '/galaxy/server/database/objects/8/d/e/dataset_8de8db76-0889-4024-914a-0a4b3d465c06.dat' -m '99' -i '0.04' -s '999' -c '2' -o '999' -h '999' -I '0.7' -g '999' -d '45000' -e '3' -n '2' -F '0.7' '/galaxy/server/database/objects/5/a/1/dataset_5a142449-0841-43f9-b85f-3a917622252a.dat' > '/galaxy/server/database/objects/7/c/4/dataset_7c47c138-5691-4e43-b9ad-dd6a4317e3cb.dat'", "traceback": null, "params": {"__input_ext": "\"fastqsanger\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "graph": "{\"finalDropRatio\": \"0.7\", \"maxBubDist\": \"45000\", \"maxGapDiff\": \"999\", \"minUtgSize\": \"3\", \"nRounds\": \"2\"}", "overlapping": "{\"intThres\": \"0.7\", \"maxHang\": \"999\", \"minOvlp\": \"999\"}", "preselection": "{\"minCov\": \"2\", \"minIden\": \"0.04\", \"minMatch\": \"99\", \"minSpan\": \"999\"}"}, "inputs": {"readFile": {"id": "d5aae8df3561ba1d", "src": "hda", "uuid": "8de8db76-0889-4024-914a-0a4b3d465c06"}, "paf": {"id": "78e58592359d92a0", "src": "hda", "uuid": "5a142449-0841-43f9-b85f-3a917622252a"}}, "outputs": {"gfa": {"id": "e56b7af3faa036a6", "src": "hda", "uuid": "7c47c138-5691-4e43-b9ad-dd6a4317e3cb"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::main] ===> Step 1: reading read mappings <===\n[M::ma_hit_read::0.157*0.99] read 100000 hits; stored 187766 hits and 12068 sequences (111355211 bp)\n[M::main] ===> Step 2: 1-pass (crude) read selection <===\n[M::ma_hit_sub::0.174*0.99] 10122 query sequences remain after sub\n[M::ma_hit_cut::0.177*0.99] 171862 hits remain after cut\n[M::ma_hit_flt::0.179*0.99] 165533 hits remain after filtering; crude coverage after filtering: 11.51\n[M::main] ===> Step 3: 2-pass (fine) read selection <===\n[M::ma_hit_sub::0.185*0.99] 9994 query sequences remain after sub\n[M::ma_hit_cut::0.187*0.99] 163595 hits remain after cut\n[M::ma_hit_contained::0.191*0.99] 1772 sequences and 10061 hits remain after containment removal\n[M::main] ===> Step 4: graph cleaning <===\n[M::ma_sg_gen] read 9758 arcs\n[M::main] ===> Step 4.1: transitive reduction <===\n[M::asg_arc_del_trans] transitively reduced 4694 arcs\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 484 asymmetric arcs\n[M::main] ===> Step 4.2: initial tip cutting and bubble popping <===\n[M::asg_cut_tip] cut 282 tips\n[M::asg_pop_bubble] popped 173 bubbles and trimmed 6 tips\n[M::main] ===> Step 4.3: cutting short overlaps (2 rounds in total) <===\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 26 asymmetric arcs\n[M::asg_arc_del_short] removed 38 short overlaps\n[M::asg_cut_tip] cut 53 tips\n[M::asg_pop_bubble] popped 8 bubbles and trimmed 0 tips\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 2 asymmetric arcs\n[M::asg_arc_del_short] removed 2 short overlaps\n[M::asg_cut_tip] cut 2 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::main] ===> Step 4.4: removing short internal sequences and bi-loops <===\n[M::asg_cut_internal] cut 0 internal sequences\n[M::asg_cut_biloop] cut 0 small bi-loops\n[M::asg_cut_tip] cut 0 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::main] ===> Step 4.5: aggressively cutting short overlaps <===\n[M::asg_arc_del_short] removed 0 short overlaps\n[M::main] ===> Step 5: generating unitigs <===\n[M::main] Version: 0.3-r179\n[M::main] CMD: miniasm -f /galaxy/server/database/objects/8/d/e/dataset_8de8db76-0889-4024-914a-0a4b3d465c06.dat -m 99 -i 0.04 -s 999 -c 2 -o 999 -h 999 -I 0.7 -g 999 -d 45000 -e 3 -n 2 -F 0.7 /galaxy/server/database/objects/5/a/1/dataset_5a142449-0841-43f9-b85f-3a917622252a.dat\n[M::main] Real time: 0.205 sec; CPU: 0.201 sec\n", "stderr": "\n[M::main] ===> Step 1: reading read mappings <===\n[M::ma_hit_read::0.157*0.99] read 100000 hits; stored 187766 hits and 12068 sequences (111355211 bp)\n[M::main] ===> Step 2: 1-pass (crude) read selection <===\n[M::ma_hit_sub::0.174*0.99] 10122 query sequences remain after sub\n[M::ma_hit_cut::0.177*0.99] 171862 hits remain after cut\n[M::ma_hit_flt::0.179*0.99] 165533 hits remain after filtering; crude coverage after filtering: 11.51\n[M::main] ===> Step 3: 2-pass (fine) read selection <===\n[M::ma_hit_sub::0.185*0.99] 9994 query sequences remain after sub\n[M::ma_hit_cut::0.187*0.99] 163595 hits remain after cut\n[M::ma_hit_contained::0.191*0.99] 1772 sequences and 10061 hits remain after containment removal\n[M::main] ===> Step 4: graph cleaning <===\n[M::ma_sg_gen] read 9758 arcs\n[M::main] ===> Step 4.1: transitive reduction <===\n[M::asg_arc_del_trans] transitively reduced 4694 arcs\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 484 asymmetric arcs\n[M::main] ===> Step 4.2: initial tip cutting and bubble popping <===\n[M::asg_cut_tip] cut 282 tips\n[M::asg_pop_bubble] popped 173 bubbles and trimmed 6 tips\n[M::main] ===> Step 4.3: cutting short overlaps (2 rounds in total) <===\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 26 asymmetric arcs\n[M::asg_arc_del_short] removed 38 short overlaps\n[M::asg_cut_tip] cut 53 tips\n[M::asg_pop_bubble] popped 8 bubbles and trimmed 0 tips\n[M::asg_arc_del_multi] removed 0 multi-arcs\n[M::asg_arc_del_asymm] removed 2 asymmetric arcs\n[M::asg_arc_del_short] removed 2 short overlaps\n[M::asg_cut_tip] cut 2 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::main] ===> Step 4.4: removing short internal sequences and bi-loops <===\n[M::asg_cut_internal] cut 0 internal sequences\n[M::asg_cut_biloop] cut 0 small bi-loops\n[M::asg_cut_tip] cut 0 tips\n[M::asg_pop_bubble] popped 0 bubbles and trimmed 0 tips\n[M::main] ===> Step 4.5: aggressively cutting short overlaps <===\n[M::asg_arc_del_short] removed 0 short overlaps\n[M::main] ===> Step 5: generating unitigs <===\n[M::main] Version: 0.3-r179\n[M::main] CMD: miniasm -f /galaxy/server/database/objects/8/d/e/dataset_8de8db76-0889-4024-914a-0a4b3d465c06.dat -m 99 -i 0.04 -s 999 -c 2 -o 999 -h 999 -I 0.7 -g 999 -d 45000 -e 3 -n 2 -F 0.7 /galaxy/server/database/objects/5/a/1/dataset_5a142449-0841-43f9-b85f-3a917622252a.dat\n[M::main] Real time: 0.205 sec; CPU: 0.201 sec\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:22:34", "plugin": "core", "name": "end_epoch", "raw_value": "1666459354.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:22:33", "plugin": "core", "name": "start_epoch", "raw_value": "1666459353.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 0, "time_seconds": 107.17945790290833, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "fdc2b29a1c679029"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "84cb4e45a531697f"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single"}, "job": {"model_class": "Job", "id": "dc6b2726329d281e", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:50:42.356739", "create_time": "2022-10-22T16:49:15.721182", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-2qddn", "command_line": "ln -f -s '/galaxy/server/database/objects/b/0/b/dataset_b0b4f6ed-eca8-4bd2-b266-46ab413ca604.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/c/3/c/dataset_c3c3a0df-5e18-4ac4-81dd-dc3806039d5a.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/5/a/f/dataset_5af521ed-b847-4974-8a88-71d0629a7415.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 122, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 121, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "fdc2b29a1c679029", "src": "hda", "uuid": "b0b4f6ed-eca8-4bd2-b266-46ab413ca604"}, "fastq_input1": {"id": "84cb4e45a531697f", "src": "hda", "uuid": "c3c3a0df-5e18-4ac4-81dd-dc3806039d5a"}}, "outputs": {"alignment_output": {"id": "2bbd831da9af12f7", "src": "hda", "uuid": "5af521ed-b847-4974-8a88-71d0629a7415"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.003*0.90] collected minimizers\n[M::mm_idx_gen::0.005*1.56] sorted minimizers\n[M::main::0.005*1.55] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.55] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.53] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.008*1.31] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/c/3/c/dataset_c3c3a0df-5e18-4ac4-81dd-dc3806039d5a.dat\n[M::main] Real time: 0.010 sec; CPU: 0.012 sec; Peak RSS: 0.004 GB\n", "stderr": "\n[M::mm_idx_gen::0.003*0.90] collected minimizers\n[M::mm_idx_gen::0.005*1.56] sorted minimizers\n[M::main::0.005*1.55] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.55] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.53] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.008*1.31] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/c/3/c/dataset_c3c3a0df-5e18-4ac4-81dd-dc3806039d5a.dat\n[M::main] Real time: 0.010 sec; CPU: 0.012 sec; Peak RSS: 0.004 GB\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:50:31", "plugin": "core", "name": "end_epoch", "raw_value": "1666457431.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:50:31", "plugin": "core", "name": "start_epoch", "raw_value": "1666457431.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_3k2ibucs.sam v. /tmp/history_bam_converted_to_sam_z9nt4ldj.sam )\n--- local_file\n+++ history_data\n@@ -1,171 +1,171 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_19.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t*\t0\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\t*\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:18422:19051/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t*\t0\t0\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t*\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:123\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t*\t0\t0\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\t*\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:200\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:18842:24844/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\t*\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t*\t0\t0\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\t*\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:200\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5983:21093/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1102:7765:18353/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t*\t0\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\t*\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:123\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t*\t0\t0\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\t*\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:142\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:14060:21273/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S156M15S\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\t*\tNM:i:1\tms:i:302\tAS:i:302\tnn:i:0\ttp:A:P\tcm:i:22\ts1:i:150\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:14528:12993/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGAT\t*\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:17657:20856/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t90S161M\t*\t0\t0\tAAAGCGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\t*\tNM:i:1\tms:i:312\tAS:i:312\tnn:i:0\ttp:A:P\tcm:i:22\ts1:i:150\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16480,+,90M161S,60,2;\n-M01368:8:000000000-A3GHV:1:1103:25519:6301/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t18S184M49S\t*\t0\t0\tAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGCATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATTTCGT\t*\tNM:i:2\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:21\ts1:i:157\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1103:6074:6549/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t108S143M\t*\t0\t0\tTAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTG\t*\tNM:i:1\tms:i:276\tAS:i:276\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16462,+,108M143S,60,1;\n-M01368:8:000000000-A3GHV:1:1104:11572:8264/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1104:12288:20635/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\t*\tNM:i:3\tms:i:262\tAS:i:262\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:109\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1104:13832:4398/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t7S132M112S\t*\t0\t0\tCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGACAAAAAAAAACACACAACAACCAACACCCAGTAGACTAGTGCGTC\t*\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:123\ts2:i:0\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1110:15519:10008/1\t2064\tgi|251831106|ref|NC_012920.1|\t16503\t12\t67M184H\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:124\tAS:i:124\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0149\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,67S184M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1110:16700:6843/1\t2064\tgi|251831106|ref|NC_012920.1|\t16503\t12\t25H67M159H\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:124\tAS:i:124\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0149\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,92S159M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:16531/1\t2064\tgi|251831106|ref|NC_012920.1|\t16503\t5\t59M192H\t*\t0\t0\tGGTTCCTACTTCAAGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACA\t*\tNM:i:2\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:31\ts2:i:0\tde:f:0.0339\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,67S184M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:8665:25542/1\t2048\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701/1\t2064\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:27103:7153/1\t2064\tgi|251831106|ref|NC_012920.1|\t16508\t12\t7H62M182H\t*\t0\t0\tCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:114\tAS:i:114\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0161\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,69S182M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233/1\t2048\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t*\t0\t0\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794/1\t2064\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t*\t0\t0\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:17564:15723/1\t2064\tgi|251831106|ref|NC_012920.1|\t16512\t12\t58M193H\t*\t0\t0\tTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:106\tAS:i:106\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0172\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,58S193M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748/1\t2064\tgi|251831106|ref|NC_012920.1|\t16513\t12\t57M194H\t*\t0\t0\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:18714:24788/1\t2064\tgi|251831106|ref|NC_012920.1|\t16513\t12\t57M194H\t*\t0\t0\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255/1\t2064\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t*\t0\t0\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490/1\t2048\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t*\t0\t0\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050/1\t2064\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t*\t0\t0\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:8763:7859/1\t2064\tgi|251831106|ref|NC_012920.1|\t16519\t19\t51M200H\t*\t0\t0\tGCATAAAGCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:100\tAS:i:100\tnn:i:0\ttp:A:P\tcm:i:4\ts1:i:38\ts2:i:0\tde:f:0.0196\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,51S200M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1113:5741:16959/1\t2064\tgi|251831106|ref|NC_012920.1|\t16519\t11\t51M200H\t*\t0\t0\tTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:92\tAS:i:92\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0196\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,51S200M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:13575:19255/1\t2064\tgi|251831106|ref|NC_012920.1|\t16520\t11\t50M201H\t*\t0\t0\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:16350:22621/1\t2064\tgi|251831106|ref|NC_012920.1|\t16520\t11\t50M201H\t*\t0\t0\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272/1\t2064\tgi|251831106|ref|NC_012920.1|\t16522\t11\t48M203H\t*\t0\t0\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145/1\t2048\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t*\t0\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258/1\t2048\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010/1\t2064\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176/1\t2064\tgi|251831106|ref|NC_012920.1|\t16527\t11\t5H43M203H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048/1\t2064\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:19224:11655/1\t2048\tgi|251831106|ref|NC_012920.1|\t16530\t11\t40M211H\t*\t0\t0\tAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:80\tAS:i:80\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,40S186M25S,60,2;\trl:i:0\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 1, "time_seconds": 110.79329681396484, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "fdc2b29a1c679029"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "84cb4e45a531697f"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single", "io_options|output_format": "CRAM"}, "job": {"model_class": "Job", "id": "ee370c5bd1db8cac", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:50:53.686571", "create_time": "2022-10-22T16:49:21.242171", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-v7mbz", "command_line": "ln -f -s '/galaxy/server/database/objects/b/0/b/dataset_b0b4f6ed-eca8-4bd2-b266-46ab413ca604.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/c/3/c/dataset_c3c3a0df-5e18-4ac4-81dd-dc3806039d5a.dat' -a | samtools sort -T \"${TMPDIR:-.}\" -@${GALAXY_SLOTS:-2} -O CRAM  --reference reference.fa --output-fmt-option no_ref -o '/galaxy/server/database/objects/9/6/3/dataset_9630e47d-6e77-47f9-9477-0767589595ec.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"CRAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 122, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 121, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "fdc2b29a1c679029", "src": "hda", "uuid": "b0b4f6ed-eca8-4bd2-b266-46ab413ca604"}, "fastq_input1": {"id": "84cb4e45a531697f", "src": "hda", "uuid": "c3c3a0df-5e18-4ac4-81dd-dc3806039d5a"}}, "outputs": {"alignment_output": {"id": "f4248b0b788ff392", "src": "hda", "uuid": "9630e47d-6e77-47f9-9477-0767589595ec"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.002*1.06] collected minimizers\n[M::mm_idx_gen::0.004*1.77] sorted minimizers\n[M::main::0.004*1.76] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*1.76] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.004*1.72] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.006*1.71] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/c/3/c/dataset_c3c3a0df-5e18-4ac4-81dd-dc3806039d5a.dat\n[M::main] Real time: 0.007 sec; CPU: 0.011 sec; Peak RSS: 0.004 GB\n", "stderr": "\n[M::mm_idx_gen::0.002*1.06] collected minimizers\n[M::mm_idx_gen::0.004*1.77] sorted minimizers\n[M::main::0.004*1.76] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*1.76] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.004*1.72] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.006*1.71] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/c/3/c/dataset_c3c3a0df-5e18-4ac4-81dd-dc3806039d5a.dat\n[M::main] Real time: 0.007 sec; CPU: 0.011 sec; Peak RSS: 0.004 GB\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:50:37", "plugin": "core", "name": "end_epoch", "raw_value": "1666457437.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:50:37", "plugin": "core", "name": "start_epoch", "raw_value": "1666457437.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 2, "time_seconds": 134.43980884552002, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "a76b0c7a7c827d11"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "64e87c7c177f708f"}, "fastq_input|fastq_input2": {"src": "hda", "id": "40334d71ea34ee76"}, "fastq_input|fastq_input_selector": "paired"}, "job": {"model_class": "Job", "id": "4ff81fc8340a71d9", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:52:42.324919", "create_time": "2022-10-22T16:50:56.771803", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-c4bgn", "command_line": "ln -f -s '/galaxy/server/database/objects/7/2/e/dataset_72e3b3d3-7f36-467d-8522-f34b2b82a0c0.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/0/4/f/dataset_04fd1a36-8669-4a51-808f-92c1617df7ac.dat' '/galaxy/server/database/objects/5/d/a/dataset_5da35334-7aa6-4dfd-8a5b-65b49c6f4bd9.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/f/b/9/dataset_fb9e6835-9774-4a0e-89cc-eebf291b715e.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 1, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 135, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 136, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 134, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "a76b0c7a7c827d11", "src": "hda", "uuid": "72e3b3d3-7f36-467d-8522-f34b2b82a0c0"}, "fastq_input1": {"id": "64e87c7c177f708f", "src": "hda", "uuid": "04fd1a36-8669-4a51-808f-92c1617df7ac"}, "fastq_input2": {"id": "40334d71ea34ee76", "src": "hda", "uuid": "5da35334-7aa6-4dfd-8a5b-65b49c6f4bd9"}}, "outputs": {"alignment_output": {"id": "04d9067693b5fe2f", "src": "hda", "uuid": "fb9e6835-9774-4a0e-89cc-eebf291b715e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.002*0.80] collected minimizers\n[M::mm_idx_gen::0.004*1.56] sorted minimizers\n[M::main::0.004*1.55] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*1.55] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.004*1.53] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.009*2.06] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/0/4/f/dataset_04fd1a36-8669-4a51-808f-92c1617df7ac.dat /galaxy/server/database/objects/5/d/a/dataset_5da35334-7aa6-4dfd-8a5b-65b49c6f4bd9.dat\n[M::main] Real time: 0.011 sec; CPU: 0.019 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.002*0.80] collected minimizers\n[M::mm_idx_gen::0.004*1.56] sorted minimizers\n[M::main::0.004*1.55] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*1.55] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.004*1.53] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.009*2.06] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/0/4/f/dataset_04fd1a36-8669-4a51-808f-92c1617df7ac.dat /galaxy/server/database/objects/5/d/a/dataset_5da35334-7aa6-4dfd-8a5b-65b49c6f4bd9.dat\n[M::main] Real time: 0.011 sec; CPU: 0.019 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:52:30", "plugin": "core", "name": "end_epoch", "raw_value": "1666457550.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:52:30", "plugin": "core", "name": "start_epoch", "raw_value": "1666457550.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_w3y7mcyw.sam v. /tmp/history_bam_converted_to_sam_sybcmvdn.sam )\n--- local_file\n+++ history_data\n@@ -1,303 +1,301 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_12.dat /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_13.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t73\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t=\t1\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\tBCCCCFFFFFFFGGGGGGGGGGGHHHHGHGHHHHHHHHHGGGGGGHHHHGHHHHHHHHHHGHHHHHHGGHGGHHHGHHHHFHHGHHHHHHHHHGHEHEFFGHHEGGCEFGGFHHHBGHHGHHHHGHFHHHGHGHGHGGCDFDDACGGGGGGGAAFFFFFFFFFBAFFFFFB;FFFFFFADDFFFFFFFFFFEFFFFFFFFFFBFFFFFFFFFFFFFFEFFFFFFFFBFEFFFFEFE;DFFFDFBFF/9BFB\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t133\tgi|251831106|ref|NC_012920.1|\t1\t0\t*\t=\t1\t0\tTCGCCTTACCGCTACTCACCCACGGCGGCCATCAGCCGATACTAAGTTTGGGGTATGGTGGGGGGGATAATGAATTAGGTTGTGGGGGAGGGTTTGTGGTTGAGAGAAACACAAAAAACAATCTTATATATGGGTAGTCGTTTTGTATTGGTTTTTTGTTTTGTTTGTGTTTTGAGTGTCGGTTTAGTTCGGTGTACTAGGGGGGGTGGATGGGGTCGGCTGGTGAGGGGGTCTTAGTGTATTGAGTGTGG\t1>11111@11111A111A100000000////011110//>>/12@1@22B/////1@>21/>>/-----9/;////9////--;-;-;-----;--------9/-/-///9-;-------9//////9/////-//-/9-;-;9--/////99-;--9-:-;----/---/-----////---9-/////--;A-//////---------9/-----;-----/-/-----;--;//////////9;///-\n-M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t10S241M\t=\t1\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tNM:i:1\tms:i:472\tAS:i:472\tnn:i:0\ttp:A:P\tcm:i:34\ts1:i:234\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1101:18422:19051\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1101:25545:21098\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t=\t1\t216\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tNM:i:3\tms:i:246\tAS:i:246\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:119\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1101:5446:12248\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t78S173M\t=\t1\t213\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCDDDCCCCFFFGGGGGGGGGGHHHHHGHHHHHHHHGHHHHHHGHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHGFGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGGGGGGFFFFFFFFFFFFFFAFFFFFFFFFFFFFBFC?.EAFFFFFFFFAFFFFFFFFFFFFFFFEFFFF0FFFFFFF0BFFFFFFFFF?.BDCFFEDA/\tNM:i:1\tms:i:336\tAS:i:336\tnn:i:0\ttp:A:P\tcm:i:25\ts1:i:167\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16492,+,78M173S,36,1;\n-M01368:8:000000000-A3GHV:1:1101:5861:6452\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t236\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,2;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t=\t1\t151\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t>A@AAAAD2ADDFFGGGGGFGGHA?EAEFBEAGHFABFGG5FDF5DB1EEGAFDFB53FF5FH@G5FFEHGHEFHFFHBE333GF43GCGGGGE@0?BFGGB0B?FHGFDGGHHHBFFDEGGHGFFFDFE@<1>@FFFGHHHHFHEFGDABFFGG/@DCE<CG1<GF0/DD000=<DHGBDFDCECE/:AC?-;-;9B/ABBB-AD9BFB99AB?BDFBAD-.9..@;=;;..9..9/9;BEF;A:9/BFF\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t=\t1\t213\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:13809:1733\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t50S179M22S\t=\t1\t179\tNATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATCTGTCTCTTATACACATCTGAC\t#>AABBFFCFFFGGGFGGGGGGGGHHHHHHHHHHHHHHHHHHGHHHGGEGGFFHHHHHHGHGHGHHHHHEHFHGHHHHEFHHGHGGGGGHHHHGHHHHHHHHHGFGHHHHHGHGHGHHGGGCCGGGGFGGGGGGDGGGGFGDGGGFFFFFFEFFFFFFFBAF:9AF//;BEF-DD/FFFFBFFFFFFFFFEBFF?FB;/;//BFFEFFE/::..9;-:B9:FBFFFFFFBFB/9/FFF/B///99/:B///\tNM:i:1\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16520,+,50M201S,11,2;\n-M01368:8:000000000-A3GHV:1:1102:17584:10050\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t52S138M61S\t=\t1\t138\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTTGGGGGGTGG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHGGHHHHHHHHHHHHHHGHHHGGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHHGGHHHHHHGHGHGGHGGFGGGGGGGGGGFGGFGGGGGGGGGFFFFFFFFFFEFFCFAAFEFEFFFFFFFCFDFFFFFFEFFFFFFFFFFBFFFFFFF/:BFFFFFFFFFFFFFFFFAFC=@-.;A///B././//////.-9----\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16518,+,52M199S,11,1;\n-M01368:8:000000000-A3GHV:1:1102:18842:24844\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t228\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\tBBBCBFF@CCBBGGGGGGGGGGHHGHGGHHHGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGGHHHHHHHHHHHHHHHHHHHHGGGHGGHHHHHHGHBFGHHHHHHHHBGHHHHHHGHGGGHFGCGGFHHFHFFHHBHHHHFFHFHHHHGGDHGGBC?;@DFBFFFFFFFFFBFFFFFFFFFFFFFF.B?FB.@;;DFFFFFFFFFFFEE-A./BBBFBFBFFF//BFB/BFF/\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t=\t1\t213\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5728:8777\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t179\tCACTTGGGAGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tBBBBBFFBBBBFGGGGGGGDGGHHHHHFHHHGGGGGHHGFHFHHFHHHGGHHHHHHHHHHHHHGHHHHHHFGHHHGGGGHHHHHHHHHGHHHGHHHHFHHHGGHGGHFFHHHHGFHHHHHHHHHHFHFHHHFHFHHHHHGGGGGHGHHHHHGHHHHHHH/FHHHHHGHGGGHHGGFBFFFFFFFFFF;DDFFFFFFF;;BA.=DDBFFFFF;-DFF.EDFFFFFFEF-AFFFFFB;FBFFFBFFFFB9B..\tNM:i:2\tms:i:280\tAS:i:280\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,2;\n-M01368:8:000000000-A3GHV:1:1102:5983:21093\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t177\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAAABCFCABBCFGGGGGGGGGGHHHHHHGFHHHHHHHHGGHHHGHGHHHGGGGFHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHFHGGHHHHFHGHHEHHHHHHHGHHHHHD@FGGHHHHHFFFHHGGHGH?DHHHHHGHGHEGG/@?ADGFGGFFFFAFFFFFFFFFFFFFFFFFFFFFFFAAFFFFFFDFFFFFFFF;D9BFFFFFFFFFFFFFFFFFEFFFBBFFF0BFFFBBFF0EFFFFFFFA\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:170\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:7765:18353\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t=\t1\t236\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCBCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHGHHHGHHHHHHHHHHHGGGGGGHHHHHHHHHHHHHHHHHHHHGGHGGHHHGHHGHHGHHHHHHHHHCGGFHHHHGHHHHHGCFGGHHGHHHHHHGFHHHGHHHHHHHGHGHGFF/CC?ADAFGFFFFFFFFFFFFFFDFFFFFFFFAFFFFFFFFFFFEDFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFBBFBFBFFFFFFFFFFFFFFFFF?\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t=\t1\t173\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\tCCCCCFFFFFFFGGGGGGGGGGGGGGGHFHHHHHHHHHHHHHHHHGHHHHHHHHGHHHIHHHHHHHGGGGFHHHHHHHHHHHHHHHHHHHGHGGHGGHHHHHHHHHGHHHHHHHHHHHHHHHHHGHHHH/FGGGGHHHHHHHGGEHHHHHGHHHHHHGHGHEFEFGGFFFFFFFFFFFFFFFFFFFFFAFDFFFFFAFFFF;;@FFEFFFFFFFFFFE=?AFFFFFFFFFFFFFFFFFFBFBBBFFFFEFF\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:168\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1105:16787:9771\t2209\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t=\t1\t-16265\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCDCFFFFFFFGGGGGGGGGGGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGFG\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701\t2129\tgi|251831106|ref|NC_012920.1|\t16506\t21\t64M187H\t=\t1\t-16569\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/FB;///BF/.B/FFFFFFFFFFFFFFF9?DDEBFED.DDCFFGFFGGGFF;;0FFFGAGGGGF\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:77\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2209\tgi|251831106|ref|NC_012920.1|\t16508\t12\t62M189H\t=\t1\t-16370\tCTACCTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCCCFFFFFFFGGGGGGGGGGHHHHHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHGHGGHG\tNM:i:2\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0323\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,62S140M49S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2209\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16378\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABBBBFFFFFFFGGGGGGGGGGGGBFHHGG?EEHHGHHHHHHGFHFHHHHGHGHHGGHE\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S134M58S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t2145\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16309\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGF\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2129\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t=\t1\t-16569\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t;0/FFFBGFBBFCHHHHHHFHHFFGGEACCCDEGGGGFGD1GFHGFGFFEHHHHGGHHH\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t2193\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAACCCTAAAGAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/:/:;9////A?B.F//B;/./.A9.9;.;:..-?9B9/FB//;///:B/9AC;0FB\tNM:i:2\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:92\ts2:i:0\tde:f:0.0351\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t.9/.BFFBFBEFF;FFFFBF?BEDA:/.ADEFFFFFFEGGGGFCB;99/B;.GFFGF\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:77\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFGFFFGGFFBFBCBHGC.GC?DHHHGDAFFCHHEHGHHHHGFGGHHHGCGHHHH\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2145\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t=\t1\t-16377\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGA\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2193\tgi|251831106|ref|NC_012920.1|\t16516\t12\t57H54M140H\t=\t1\t-16569\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFB0000FAFB0GGFGBGGHGGFC::.EEA<@HFDG0HHGGHGBDFGFG<DDFGE\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,111S140M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2129\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t=\t1\t-16569\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFGGGGGGGGGGGHHHGHHGGGHHHHGGGGGHHHHHHFHHHHHHHHHHGGHHHH\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2209\tgi|251831106|ref|NC_012920.1|\t16518\t11\t52M199H\t=\t1\t-16381\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHG\tNM:i:1\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0192\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,52S138M61S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:6074:6549\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t20\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t///A/:/BFFFF9...FFE;.9:.;.CF//B/FBFBBFBFGF/:?DFC90\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:9655:13916\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t21\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t:FBEF;0FFFFFFFBFFFFFEADEFBFFFFFFGGGFGFFBBB/F.GGFC9\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:92\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t2129\tgi|251831106|ref|NC_012920.1|\t16522\t20\t48M203H\t=\t1\t-16569\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/.FFFFFBBFBFBFFFEFEEFFFDFFFFFFFB//BBEFFB/.AABBFF\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16406\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tAAABBFFFFFDFGGGGGGGGGGHHHHHHGHHHGFHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S120M86S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t2145\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16275\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16388\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S138M68S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258\t2145\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t=\t1\t-16287\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t11>>ABFFFFFFGGCGC1BBF1GHHHBHHHHGFHGH1A100AA\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:17657:20856\t2193\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFEFFF?FEFFFFEAA.;AAFFF:0FB0FFBFFFB:A9A90FF\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tHFHHHGAFA<.HFGHGGGGGHGGDDGHHHHFHFHGGFC?HGHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t28\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFFB.FEFAA:EFFE:.;AFBB;FFFFFFFGFF/FEDFGGG\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tGFHHHHHHGGGHGGHGGGGGGHHHFGGGGHHGFHHHF<GGHHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:14540:5315\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCCCACGTTCCCCTTAAATAAGACATCACGATG\t09BFBB:--A=-.A;FEBFFFFFFFFFFFFFFFC//?AA0EFF\tNM:i:1\tms:i:76\tAS:i:76\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:84\ts2:i:0\tde:f:0.0233\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 3, "time_seconds": 128.5334131717682, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "a76b0c7a7c827d11"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "2c927acdea8165b9"}, "fastq_input|fastq_input2": {"src": "hda", "id": "40334d71ea34ee76"}, "fastq_input|fastq_input_selector": "paired"}, "job": {"model_class": "Job", "id": "02d7f9babb95cd3e", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:52:50.826369", "create_time": "2022-10-22T16:51:11.543281", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-kzssb", "command_line": "ln -f -s '/galaxy/server/database/objects/7/2/e/dataset_72e3b3d3-7f36-467d-8522-f34b2b82a0c0.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/7/1/1/dataset_711327b5-17ea-44b4-9281-87f3335aadfa.dat' '/galaxy/server/database/objects/5/d/a/dataset_5da35334-7aa6-4dfd-8a5b-65b49c6f4bd9.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/e/7/f/dataset_e7fe9d8d-92a3-4c62-8f7d-4887b28b54c4.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 1, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 132, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 136, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 134, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "a76b0c7a7c827d11", "src": "hda", "uuid": "72e3b3d3-7f36-467d-8522-f34b2b82a0c0"}, "fastq_input1": {"id": "2c927acdea8165b9", "src": "hda", "uuid": "711327b5-17ea-44b4-9281-87f3335aadfa"}, "fastq_input2": {"id": "40334d71ea34ee76", "src": "hda", "uuid": "5da35334-7aa6-4dfd-8a5b-65b49c6f4bd9"}}, "outputs": {"alignment_output": {"id": "7c7dc48cf58a4e3f", "src": "hda", "uuid": "e7fe9d8d-92a3-4c62-8f7d-4887b28b54c4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.002*1.25] collected minimizers\n[M::mm_idx_gen::0.004*1.87] sorted minimizers\n[M::main::0.004*1.86] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*1.86] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.004*1.81] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.011*1.68] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/7/1/1/dataset_711327b5-17ea-44b4-9281-87f3335aadfa.dat /galaxy/server/database/objects/5/d/a/dataset_5da35334-7aa6-4dfd-8a5b-65b49c6f4bd9.dat\n[M::main] Real time: 0.012 sec; CPU: 0.019 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.002*1.25] collected minimizers\n[M::mm_idx_gen::0.004*1.87] sorted minimizers\n[M::main::0.004*1.86] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*1.86] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.004*1.81] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.011*1.68] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/7/1/1/dataset_711327b5-17ea-44b4-9281-87f3335aadfa.dat /galaxy/server/database/objects/5/d/a/dataset_5da35334-7aa6-4dfd-8a5b-65b49c6f4bd9.dat\n[M::main] Real time: 0.012 sec; CPU: 0.019 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:52:35", "plugin": "core", "name": "end_epoch", "raw_value": "1666457555.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:52:35", "plugin": "core", "name": "start_epoch", "raw_value": "1666457555.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_yiyhhcj3.sam v. /tmp/history_bam_converted_to_sam_5b0z4knc.sam )\n--- local_file\n+++ history_data\n@@ -1,303 +1,301 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_12.dat /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_13.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t73\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t=\t1\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\tBCCCCFFFFFFFGGGGGGGGGGGHHHHGHGHHHHHHHHHGGGGGGHHHHGHHHHHHHHHHGHHHHHHGGHGGHHHGHHHHFHHGHHHHHHHHHGHEHEFFGHHEGGCEFGGFHHHBGHHGHHHHGHFHHHGHGHGHGGCDFDDACGGGGGGGAAFFFFFFFFFBAFFFFFB;FFFFFFADDFFFFFFFFFFEFFFFFFFFFFBFFFFFFFFFFFFFFEFFFFFFFFBFEFFFFEFE;DFFFDFBFF/9BFB\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t133\tgi|251831106|ref|NC_012920.1|\t1\t0\t*\t=\t1\t0\tTCGCCTTACCGCTACTCACCCACGGCGGCCATCAGCCGATACTAAGTTTGGGGTATGGTGGGGGGGATAATGAATTAGGTTGTGGGGGAGGGTTTGTGGTTGAGAGAAACACAAAAAACAATCTTATATATGGGTAGTCGTTTTGTATTGGTTTTTTGTTTTGTTTGTGTTTTGAGTGTCGGTTTAGTTCGGTGTACTAGGGGGGGTGGATGGGGTCGGCTGGTGAGGGGGTCTTAGTGTATTGAGTGTGG\t1>11111@11111A111A100000000////011110//>>/12@1@22B/////1@>21/>>/-----9/;////9////--;-;-;-----;--------9/-/-///9-;-------9//////9/////-//-/9-;-;9--/////99-;--9-:-;----/---/-----////---9-/////--;A-//////---------9/-----;-----/-/-----;--;//////////9;///-\n-M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t10S241M\t=\t1\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tNM:i:1\tms:i:472\tAS:i:472\tnn:i:0\ttp:A:P\tcm:i:34\ts1:i:234\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1101:18422:19051\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1101:25545:21098\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t=\t1\t216\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tNM:i:3\tms:i:246\tAS:i:246\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:119\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1101:5446:12248\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t78S173M\t=\t1\t213\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCDDDCCCCFFFGGGGGGGGGGHHHHHGHHHHHHHHGHHHHHHGHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHGFGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGGGGGGFFFFFFFFFFFFFFAFFFFFFFFFFFFFBFC?.EAFFFFFFFFAFFFFFFFFFFFFFFFEFFFF0FFFFFFF0BFFFFFFFFF?.BDCFFEDA/\tNM:i:1\tms:i:336\tAS:i:336\tnn:i:0\ttp:A:P\tcm:i:25\ts1:i:167\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16492,+,78M173S,36,1;\n-M01368:8:000000000-A3GHV:1:1101:5861:6452\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t236\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,2;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t=\t1\t151\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t>A@AAAAD2ADDFFGGGGGFGGHA?EAEFBEAGHFABFGG5FDF5DB1EEGAFDFB53FF5FH@G5FFEHGHEFHFFHBE333GF43GCGGGGE@0?BFGGB0B?FHGFDGGHHHBFFDEGGHGFFFDFE@<1>@FFFGHHHHFHEFGDABFFGG/@DCE<CG1<GF0/DD000=<DHGBDFDCECE/:AC?-;-;9B/ABBB-AD9BFB99AB?BDFBAD-.9..@;=;;..9..9/9;BEF;A:9/BFF\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t=\t1\t213\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:13809:1733\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t50S179M22S\t=\t1\t179\tNATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATCTGTCTCTTATACACATCTGAC\t#>AABBFFCFFFGGGFGGGGGGGGHHHHHHHHHHHHHHHHHHGHHHGGEGGFFHHHHHHGHGHGHHHHHEHFHGHHHHEFHHGHGGGGGHHHHGHHHHHHHHHGFGHHHHHGHGHGHHGGGCCGGGGFGGGGGGDGGGGFGDGGGFFFFFFEFFFFFFFBAF:9AF//;BEF-DD/FFFFBFFFFFFFFFEBFF?FB;/;//BFFEFFE/::..9;-:B9:FBFFFFFFBFB/9/FFF/B///99/:B///\tNM:i:1\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16520,+,50M201S,11,2;\n-M01368:8:000000000-A3GHV:1:1102:17584:10050\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t52S138M61S\t=\t1\t138\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTTGGGGGGTGG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHGGHHHHHHHHHHHHHHGHHHGGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHHGGHHHHHHGHGHGGHGGFGGGGGGGGGGFGGFGGGGGGGGGFFFFFFFFFFEFFCFAAFEFEFFFFFFFCFDFFFFFFEFFFFFFFFFFBFFFFFFF/:BFFFFFFFFFFFFFFFFAFC=@-.;A///B././//////.-9----\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16518,+,52M199S,11,1;\n-M01368:8:000000000-A3GHV:1:1102:18842:24844\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t228\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\tBBBCBFF@CCBBGGGGGGGGGGHHGHGGHHHGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGGHHHHHHHHHHHHHHHHHHHHGGGHGGHHHHHHGHBFGHHHHHHHHBGHHHHHHGHGGGHFGCGGFHHFHFFHHBHHHHFFHFHHHHGGDHGGBC?;@DFBFFFFFFFFFBFFFFFFFFFFFFFF.B?FB.@;;DFFFFFFFFFFFEE-A./BBBFBFBFFF//BFB/BFF/\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t=\t1\t213\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5728:8777\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t179\tCACTTGGGAGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tBBBBBFFBBBBFGGGGGGGDGGHHHHHFHHHGGGGGHHGFHFHHFHHHGGHHHHHHHHHHHHHGHHHHHHFGHHHGGGGHHHHHHHHHGHHHGHHHHFHHHGGHGGHFFHHHHGFHHHHHHHHHHFHFHHHFHFHHHHHGGGGGHGHHHHHGHHHHHHH/FHHHHHGHGGGHHGGFBFFFFFFFFFF;DDFFFFFFF;;BA.=DDBFFFFF;-DFF.EDFFFFFFEF-AFFFFFB;FBFFFBFFFFB9B..\tNM:i:2\tms:i:280\tAS:i:280\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,2;\n-M01368:8:000000000-A3GHV:1:1102:5983:21093\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t177\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAAABCFCABBCFGGGGGGGGGGHHHHHHGFHHHHHHHHGGHHHGHGHHHGGGGFHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHFHGGHHHHFHGHHEHHHHHHHGHHHHHD@FGGHHHHHFFFHHGGHGH?DHHHHHGHGHEGG/@?ADGFGGFFFFAFFFFFFFFFFFFFFFFFFFFFFFAAFFFFFFDFFFFFFFF;D9BFFFFFFFFFFFFFFFFFEFFFBBFFF0BFFFBBFF0EFFFFFFFA\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:170\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:7765:18353\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t=\t1\t236\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCBCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHGHHHGHHHHHHHHHHHGGGGGGHHHHHHHHHHHHHHHHHHHHGGHGGHHHGHHGHHGHHHHHHHHHCGGFHHHHGHHHHHGCFGGHHGHHHHHHGFHHHGHHHHHHHGHGHGFF/CC?ADAFGFFFFFFFFFFFFFFDFFFFFFFFAFFFFFFFFFFFEDFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFBBFBFBFFFFFFFFFFFFFFFFF?\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t=\t1\t173\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\tCCCCCFFFFFFFGGGGGGGGGGGGGGGHFHHHHHHHHHHHHHHHHGHHHHHHHHGHHHIHHHHHHHGGGGFHHHHHHHHHHHHHHHHHHHGHGGHGGHHHHHHHHHGHHHHHHHHHHHHHHHHHGHHHH/FGGGGHHHHHHHGGEHHHHHGHHHHHHGHGHEFEFGGFFFFFFFFFFFFFFFFFFFFFAFDFFFFFAFFFF;;@FFEFFFFFFFFFFE=?AFFFFFFFFFFFFFFFFFFBFBBBFFFFEFF\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:168\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1105:16787:9771\t2209\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t=\t1\t-16265\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCDCFFFFFFFGGGGGGGGGGGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGFG\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701\t2129\tgi|251831106|ref|NC_012920.1|\t16506\t21\t64M187H\t=\t1\t-16569\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/FB;///BF/.B/FFFFFFFFFFFFFFF9?DDEBFED.DDCFFGFFGGGFF;;0FFFGAGGGGF\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:77\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2209\tgi|251831106|ref|NC_012920.1|\t16508\t12\t62M189H\t=\t1\t-16370\tCTACCTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCCCFFFFFFFGGGGGGGGGGHHHHHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHGHGGHG\tNM:i:2\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0323\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,62S140M49S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2209\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16378\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABBBBFFFFFFFGGGGGGGGGGGGBFHHGG?EEHHGHHHHHHGFHFHHHHGHGHHGGHE\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S134M58S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t2145\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16309\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGF\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2129\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t=\t1\t-16569\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t;0/FFFBGFBBFCHHHHHHFHHFFGGEACCCDEGGGGFGD1GFHGFGFFEHHHHGGHHH\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t2193\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAACCCTAAAGAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/:/:;9////A?B.F//B;/./.A9.9;.;:..-?9B9/FB//;///:B/9AC;0FB\tNM:i:2\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:92\ts2:i:0\tde:f:0.0351\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t.9/.BFFBFBEFF;FFFFBF?BEDA:/.ADEFFFFFFEGGGGFCB;99/B;.GFFGF\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:77\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFGFFFGGFFBFBCBHGC.GC?DHHHGDAFFCHHEHGHHHHGFGGHHHGCGHHHH\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2145\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t=\t1\t-16377\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGA\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2193\tgi|251831106|ref|NC_012920.1|\t16516\t12\t57H54M140H\t=\t1\t-16569\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFB0000FAFB0GGFGBGGHGGFC::.EEA<@HFDG0HHGGHGBDFGFG<DDFGE\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,111S140M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2129\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t=\t1\t-16569\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFGGGGGGGGGGGHHHGHHGGGHHHHGGGGGHHHHHHFHHHHHHHHHHGGHHHH\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2209\tgi|251831106|ref|NC_012920.1|\t16518\t11\t52M199H\t=\t1\t-16381\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHG\tNM:i:1\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0192\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,52S138M61S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:6074:6549\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t20\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t///A/:/BFFFF9...FFE;.9:.;.CF//B/FBFBBFBFGF/:?DFC90\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:9655:13916\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t21\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t:FBEF;0FFFFFFFBFFFFFEADEFBFFFFFFGGGFGFFBBB/F.GGFC9\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:92\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t2129\tgi|251831106|ref|NC_012920.1|\t16522\t20\t48M203H\t=\t1\t-16569\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/.FFFFFBBFBFBFFFEFEEFFFDFFFFFFFB//BBEFFB/.AABBFF\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16406\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tAAABBFFFFFDFGGGGGGGGGGHHHHHHGHHHGFHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S120M86S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t2145\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16275\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16388\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S138M68S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258\t2145\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t=\t1\t-16287\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t11>>ABFFFFFFGGCGC1BBF1GHHHBHHHHGFHGH1A100AA\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:17657:20856\t2193\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFEFFF?FEFFFFEAA.;AAFFF:0FB0FFBFFFB:A9A90FF\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tHFHHHGAFA<.HFGHGGGGGHGGDDGHHHHFHFHGGFC?HGHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t28\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFFB.FEFAA:EFFE:.;AFBB;FFFFFFFGFF/FEDFGGG\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tGFHHHHHHGGGHGGHGGGGGGHHHFGGGGHHGFHHHF<GGHHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:14540:5315\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCCCACGTTCCCCTTAAATAAGACATCACGATG\t09BFBB:--A=-.A;FEBFFFFFFFFFFFFFFFC//?AA0EFF\tNM:i:1\tms:i:76\tAS:i:76\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:84\ts2:i:0\tde:f:0.0233\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 4, "time_seconds": 100.93105483055115, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "a76b0c7a7c827d11"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hdca", "id": "ad66bb894d08d0bf"}, "fastq_input|fastq_input_selector": "paired_collection"}, "job": {"model_class": "Job", "id": "ff1242f704c1d50c", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:52:35.006277", "create_time": "2022-10-22T16:51:18.702133", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-4sjf9", "command_line": "ln -f -s '/galaxy/server/database/objects/7/2/e/dataset_72e3b3d3-7f36-467d-8522-f34b2b82a0c0.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/0/4/f/dataset_04fd1a36-8669-4a51-808f-92c1617df7ac.dat' '/galaxy/server/database/objects/5/d/a/dataset_5da35334-7aa6-4dfd-8a5b-65b49c6f4bd9.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/1/9/c/dataset_19c53e9e-576d-49ec-b464-6af1622762a5.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 2, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 1, \"src\": \"hdca\"}]}, \"fastq_input_selector\": \"paired_collection\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 134, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "a76b0c7a7c827d11", "src": "hda", "uuid": "72e3b3d3-7f36-467d-8522-f34b2b82a0c0"}, "fastq_input11": {"id": "64e87c7c177f708f", "src": "hda", "uuid": "04fd1a36-8669-4a51-808f-92c1617df7ac"}, "fastq_input12": {"id": "40334d71ea34ee76", "src": "hda", "uuid": "5da35334-7aa6-4dfd-8a5b-65b49c6f4bd9"}}, "outputs": {"alignment_output": {"id": "89d074f94871106e", "src": "hda", "uuid": "19c53e9e-576d-49ec-b464-6af1622762a5"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.005*0.67] collected minimizers\n[M::mm_idx_gen::0.006*1.23] sorted minimizers\n[M::main::0.006*1.23] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.23] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.007*1.22] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.015*1.28] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/0/4/f/dataset_04fd1a36-8669-4a51-808f-92c1617df7ac.dat /galaxy/server/database/objects/5/d/a/dataset_5da35334-7aa6-4dfd-8a5b-65b49c6f4bd9.dat\n[M::main] Real time: 0.017 sec; CPU: 0.020 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stderr": "\n[M::mm_idx_gen::0.005*0.67] collected minimizers\n[M::mm_idx_gen::0.006*1.23] sorted minimizers\n[M::main::0.006*1.23] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.23] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.007*1.22] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.015*1.28] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 4 -a reference.fa /galaxy/server/database/objects/0/4/f/dataset_04fd1a36-8669-4a51-808f-92c1617df7ac.dat /galaxy/server/database/objects/5/d/a/dataset_5da35334-7aa6-4dfd-8a5b-65b49c6f4bd9.dat\n[M::main] Real time: 0.017 sec; CPU: 0.020 sec; Peak RSS: 0.004 GB\n[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:52:25", "plugin": "core", "name": "end_epoch", "raw_value": "1666457545.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:52:25", "plugin": "core", "name": "start_epoch", "raw_value": "1666457545.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_zrvmcprh.sam v. /tmp/history_bam_converted_to_sam_aso5zgzb.sam )\n--- local_file\n+++ history_data\n@@ -1,303 +1,301 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_16.dat /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_17.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t73\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t=\t1\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\tBCCCCFFFFFFFGGGGGGGGGGGHHHHGHGHHHHHHHHHGGGGGGHHHHGHHHHHHHHHHGHHHHHHGGHGGHHHGHHHHFHHGHHHHHHHHHGHEHEFFGHHEGGCEFGGFHHHBGHHGHHHHGHFHHHGHGHGHGGCDFDDACGGGGGGGAAFFFFFFFFFBAFFFFFB;FFFFFFADDFFFFFFFFFFEFFFFFFFFFFBFFFFFFFFFFFFFFEFFFFFFFFBFEFFFFEFE;DFFFDFBFF/9BFB\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t133\tgi|251831106|ref|NC_012920.1|\t1\t0\t*\t=\t1\t0\tTCGCCTTACCGCTACTCACCCACGGCGGCCATCAGCCGATACTAAGTTTGGGGTATGGTGGGGGGGATAATGAATTAGGTTGTGGGGGAGGGTTTGTGGTTGAGAGAAACACAAAAAACAATCTTATATATGGGTAGTCGTTTTGTATTGGTTTTTTGTTTTGTTTGTGTTTTGAGTGTCGGTTTAGTTCGGTGTACTAGGGGGGGTGGATGGGGTCGGCTGGTGAGGGGGTCTTAGTGTATTGAGTGTGG\t1>11111@11111A111A100000000////011110//>>/12@1@22B/////1@>21/>>/-----9/;////9////--;-;-;-----;--------9/-/-///9-;-------9//////9/////-//-/9-;-;9--/////99-;--9-:-;----/---/-----////---9-/////--;A-//////---------9/-----;-----/-/-----;--;//////////9;///-\n-M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t10S241M\t=\t1\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tNM:i:1\tms:i:472\tAS:i:472\tnn:i:0\ttp:A:P\tcm:i:34\ts1:i:234\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1101:18422:19051\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1101:25545:21098\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t=\t1\t216\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tNM:i:3\tms:i:246\tAS:i:246\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:119\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1101:5446:12248\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t78S173M\t=\t1\t213\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCDDDCCCCFFFGGGGGGGGGGHHHHHGHHHHHHHHGHHHHHHGHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHGFGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGGGGGGFFFFFFFFFFFFFFAFFFFFFFFFFFFFBFC?.EAFFFFFFFFAFFFFFFFFFFFFFFFEFFFF0FFFFFFF0BFFFFFFFFF?.BDCFFEDA/\tNM:i:1\tms:i:336\tAS:i:336\tnn:i:0\ttp:A:P\tcm:i:25\ts1:i:167\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16492,+,78M173S,36,1;\n-M01368:8:000000000-A3GHV:1:1101:5861:6452\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t236\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,2;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t=\t1\t151\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t>A@AAAAD2ADDFFGGGGGFGGHA?EAEFBEAGHFABFGG5FDF5DB1EEGAFDFB53FF5FH@G5FFEHGHEFHFFHBE333GF43GCGGGGE@0?BFGGB0B?FHGFDGGHHHBFFDEGGHGFFFDFE@<1>@FFFGHHHHFHEFGDABFFGG/@DCE<CG1<GF0/DD000=<DHGBDFDCECE/:AC?-;-;9B/ABBB-AD9BFB99AB?BDFBAD-.9..@;=;;..9..9/9;BEF;A:9/BFF\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t=\t1\t213\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:13809:1733\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t50S179M22S\t=\t1\t179\tNATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATCTGTCTCTTATACACATCTGAC\t#>AABBFFCFFFGGGFGGGGGGGGHHHHHHHHHHHHHHHHHHGHHHGGEGGFFHHHHHHGHGHGHHHHHEHFHGHHHHEFHHGHGGGGGHHHHGHHHHHHHHHGFGHHHHHGHGHGHHGGGCCGGGGFGGGGGGDGGGGFGDGGGFFFFFFEFFFFFFFBAF:9AF//;BEF-DD/FFFFBFFFFFFFFFEBFF?FB;/;//BFFEFFE/::..9;-:B9:FBFFFFFFBFB/9/FFF/B///99/:B///\tNM:i:1\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16520,+,50M201S,11,2;\n-M01368:8:000000000-A3GHV:1:1102:17584:10050\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t52S138M61S\t=\t1\t138\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTTGGGGGGTGG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHGGHHHHHHHHHHHHHHGHHHGGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHHGGHHHHHHGHGHGGHGGFGGGGGGGGGGFGGFGGGGGGGGGFFFFFFFFFFEFFCFAAFEFEFFFFFFFCFDFFFFFFEFFFFFFFFFFBFFFFFFF/:BFFFFFFFFFFFFFFFFAFC=@-.;A///B././//////.-9----\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16518,+,52M199S,11,1;\n-M01368:8:000000000-A3GHV:1:1102:18842:24844\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t228\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\tBBBCBFF@CCBBGGGGGGGGGGHHGHGGHHHGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGGHHHHHHHHHHHHHHHHHHHHGGGHGGHHHHHHGHBFGHHHHHHHHBGHHHHHHGHGGGHFGCGGFHHFHFFHHBHHHHFFHFHHHHGGDHGGBC?;@DFBFFFFFFFFFBFFFFFFFFFFFFFF.B?FB.@;;DFFFFFFFFFFFEE-A./BBBFBFBFFF//BFB/BFF/\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t=\t1\t213\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5728:8777\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t179\tCACTTGGGAGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tBBBBBFFBBBBFGGGGGGGDGGHHHHHFHHHGGGGGHHGFHFHHFHHHGGHHHHHHHHHHHHHGHHHHHHFGHHHGGGGHHHHHHHHHGHHHGHHHHFHHHGGHGGHFFHHHHGFHHHHHHHHHHFHFHHHFHFHHHHHGGGGGHGHHHHHGHHHHHHH/FHHHHHGHGGGHHGGFBFFFFFFFFFF;DDFFFFFFF;;BA.=DDBFFFFF;-DFF.EDFFFFFFEF-AFFFFFB;FBFFFBFFFFB9B..\tNM:i:2\tms:i:280\tAS:i:280\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,2;\n-M01368:8:000000000-A3GHV:1:1102:5983:21093\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t177\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAAABCFCABBCFGGGGGGGGGGHHHHHHGFHHHHHHHHGGHHHGHGHHHGGGGFHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHFHGGHHHHFHGHHEHHHHHHHGHHHHHD@FGGHHHHHFFFHHGGHGH?DHHHHHGHGHEGG/@?ADGFGGFFFFAFFFFFFFFFFFFFFFFFFFFFFFAAFFFFFFDFFFFFFFF;D9BFFFFFFFFFFFFFFFFFEFFFBBFFF0BFFFBBFF0EFFFFFFFA\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:170\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:7765:18353\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t=\t1\t236\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCBCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHGHHHGHHHHHHHHHHHGGGGGGHHHHHHHHHHHHHHHHHHHHGGHGGHHHGHHGHHGHHHHHHHHHCGGFHHHHGHHHHHGCFGGHHGHHHHHHGFHHHGHHHHHHHGHGHGFF/CC?ADAFGFFFFFFFFFFFFFFDFFFFFFFFAFFFFFFFFFFFEDFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFBBFBFBFFFFFFFFFFFFFFFFF?\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t=\t1\t173\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\tCCCCCFFFFFFFGGGGGGGGGGGGGGGHFHHHHHHHHHHHHHHHHGHHHHHHHHGHHHIHHHHHHHGGGGFHHHHHHHHHHHHHHHHHHHGHGGHGGHHHHHHHHHGHHHHHHHHHHHHHHHHHGHHHH/FGGGGHHHHHHHGGEHHHHHGHHHHHHGHGHEFEFGGFFFFFFFFFFFFFFFFFFFFFAFDFFFFFAFFFF;;@FFEFFFFFFFFFFE=?AFFFFFFFFFFFFFFFFFFBFBBBFFFFEFF\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:168\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1105:16787:9771\t2209\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t=\t1\t-16265\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCDCFFFFFFFGGGGGGGGGGGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGFG\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701\t2129\tgi|251831106|ref|NC_012920.1|\t16506\t21\t64M187H\t=\t1\t-16569\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/FB;///BF/.B/FFFFFFFFFFFFFFF9?DDEBFED.DDCFFGFFGGGFF;;0FFFGAGGGGF\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:77\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2209\tgi|251831106|ref|NC_012920.1|\t16508\t12\t62M189H\t=\t1\t-16370\tCTACCTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCCCFFFFFFFGGGGGGGGGGHHHHHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHGHGGHG\tNM:i:2\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0323\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,62S140M49S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2209\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16378\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABBBBFFFFFFFGGGGGGGGGGGGBFHHGG?EEHHGHHHHHHGFHFHHHHGHGHHGGHE\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S134M58S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t2145\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16309\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGF\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2129\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t=\t1\t-16569\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t;0/FFFBGFBBFCHHHHHHFHHFFGGEACCCDEGGGGFGD1GFHGFGFFEHHHHGGHHH\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t2193\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAACCCTAAAGAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/:/:;9////A?B.F//B;/./.A9.9;.;:..-?9B9/FB//;///:B/9AC;0FB\tNM:i:2\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:92\ts2:i:0\tde:f:0.0351\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t.9/.BFFBFBEFF;FFFFBF?BEDA:/.ADEFFFFFFEGGGGFCB;99/B;.GFFGF\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:77\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFGFFFGGFFBFBCBHGC.GC?DHHHGDAFFCHHEHGHHHHGFGGHHHGCGHHHH\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2145\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t=\t1\t-16377\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGA\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2193\tgi|251831106|ref|NC_012920.1|\t16516\t12\t57H54M140H\t=\t1\t-16569\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFB0000FAFB0GGFGBGGHGGFC::.EEA<@HFDG0HHGGHGBDFGFG<DDFGE\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,111S140M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2129\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t=\t1\t-16569\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFGGGGGGGGGGGHHHGHHGGGHHHHGGGGGHHHHHHFHHHHHHHHHHGGHHHH\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2209\tgi|251831106|ref|NC_012920.1|\t16518\t11\t52M199H\t=\t1\t-16381\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHG\tNM:i:1\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0192\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,52S138M61S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:6074:6549\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t20\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t///A/:/BFFFF9...FFE;.9:.;.CF//B/FBFBBFBFGF/:?DFC90\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:9655:13916\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t21\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t:FBEF;0FFFFFFFBFFFFFEADEFBFFFFFFGGGFGFFBBB/F.GGFC9\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:92\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t2129\tgi|251831106|ref|NC_012920.1|\t16522\t20\t48M203H\t=\t1\t-16569\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/.FFFFFBBFBFBFFFEFEEFFFDFFFFFFFB//BBEFFB/.AABBFF\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16406\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tAAABBFFFFFDFGGGGGGGGGGHHHHHHGHHHGFHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S120M86S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t2145\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16275\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16388\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S138M68S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258\t2145\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t=\t1\t-16287\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t11>>ABFFFFFFGGCGC1BBF1GHHHBHHHHGFHGH1A100AA\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:17657:20856\t2193\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFEFFF?FEFFFFEAA.;AAFFF:0FB0FFBFFFB:A9A90FF\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tHFHHHGAFA<.HFGHGGGGGHGGDDGHHHHFHFHGGFC?HGHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t28\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFFB.FEFAA:EFFE:.;AFBB;FFFFFFFGFF/FEDFGGG\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tGFHHHHHHGGGHGGHGGGGGGHHHFGGGGHHGFHHHF<GGHHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:14540:5315\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCCCACGTTCCCCTTAAATAAGACATCACGATG\t09BFBB:--A=-.A;FEBFFFFFFFFFFFFFFFC//?AA0EFF\tNM:i:1\tms:i:76\tAS:i:76\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:84\ts2:i:0\tde:f:0.0233\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 5, "time_seconds": 23.480507612228394, "inputs": {"reference_source|ref_file": "bwa-mem-mt-genome", "reference_source|reference_source_selector": "cached", "fastq_input|fastq_input1": {"src": "hda", "id": "7a71e406336fa7be"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single"}, "execution_problem": "parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: panTro3full,bosTau4,panTro2canon,Xanthomonas_oryzae_MAFF_311018,caeRem4,eschColi_O157H7,droWil1,nomLeu3,gadMor1,mm7canon,nomLeu1,strPur3,sacCer3,pseuAeru_PAO1,Homo_sapiens_AK1,micMur1,droVir3,oryza_sativa_japonica_nipponbare_IRGSP4.0,loxAfr1,bosTau8,caeRem2,Araly1,bosTau3,hg18,ponAbe2,mm8,Arabidopsis_thaliana_TAIR9,ce6,hg19,triCas2,Schizosaccharomyces_pombe_1.1,chrPic1,bosTau6,hg38canon,caeRem1,oryLat1,droVir2,Homo_sapiens_nuHg19_mtrCRS,ci2full,tetNig1,Arabidopsis_thaliana_TAIR10,oviAri1,sarHar1,monDom5,melUnd1,sacCer1,Tcas_3.0,taeGut1,panTro2,canFam1,equCab2chrM,xenTro1,priPac1,phiX,tetNig2,echTel1,vicPac2,hg38female,vicPac1,ce3,ce8,otoGar1,fr1,venter1,caePb3,cb3canon,hg19chrM,dasNov3,droEre1,susScr2,saiBol1,canFam2,anoCar1,27835,rn4,Bombyx_mori_p50T_2.0,borEut13,hg19female,braFlo1,eschColi_K12,rn3,AgamP3,equCab2,rheMac3,pseuAeru_UCBPP_PA14,PhumU1,hetGla1,ci2canon,caeJap3,taeGut1canon,lMaj5,gasAcu1,allMis1,hg17,xenTro3,galGal3canon,droYak1,Xanthomonas_oryzae_PXO99A,droGri1,sacCer2,calJac3,AaegL1,pUC18,felCat4,dasNov1,Sscrofa9.58,calJac1,caePb2,aptMan1,ailMel1,dm6,eriEur1,danRer4,musFur1,petMar1,Tcacao_1.0,tetNig2canon,oryCun2,strePneu_R6,galGal4,Spur_v2.6,oryLat2canon,tupBel1,galGal3,droEre2,rn3canon,bordBron,droMoj3,caePb1,dm3,danRer3,apiMel4,dp3,droSim1,hg_g1k_v37,panTro3canon,droPer1,bosTauMd3,papHam1,hg19canon,Xanthomonas_oryzae_KACC10331,dipOrd1,danRer7,nomLeu2,ce5,ce9,droMoj1,burkPseu_668,rn5,hg18canon,CpipJ1,strPur2,anoCar2,Amel_4.5,criGri1,xenTro2,gorGor3,Hydra_JCVI,tarSyr1,geoFor1,taeGut2,danRer6,cb3full,Zea_mays_B73_RefGen_v2,anoGam1,otoGar3,tetNig1canon,danRer10,caeJap4,caeJap2,caeRem3,felCat8,bosTau2,canFam3,ente638,eschColi_K12_DH10B,monDom4,felCat4canon,droYak2,apiMel3,hg18chr21,latCha1,galGal2,mm9female,burkPseu_1710B,melGal1,monDom1,calJac3canon,ce7,ornAna1,rn6,hg18nohaps,eschColi_O157H7_EC4115,rn4canon,pseuAeru_PA7,felCat3,IscaW1,speTri2,droSec1,papAnu2,CHM13_T2T_v2.0,caeJap1,bosTau5,rheMac2,fr2,panTro4,eschColi_CFT073,dm2,turTru2,cerSim1,hg19_rCRS_pUC18_phiX174,cavPor3,burkPseu_K96243,eschColi_K12_W3110,ce4,eschColi_O157H7_EDL933,mm8canon,ce2,baciSubt,apiMel1,aplCal1,bosTau7,panPan1,equCab1,danRer5,oryLat2,droGri2,eschColi_APEC_O1,droAna1,loxAfr3,Ptrichocarpa_156,droMoj2,hg17canon,droAna2,hg38,danRer2,mm9,susScr1,choHof1,mm7,panTro1,sorAra1,oryCun1,droAna3,myoLuc2,mm9canon,susScr3,ce10,felCat5,mm10,droVir1,dp4,hg19chrX,burkPseu_1106A,panTro1canon,apiMel2,galGal2canon,eschColi_O157H7_TW14359)", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 6, "time_seconds": 8.834886074066162, "inputs": {"reference_source|ref_file": "bwa-mem-mt-genome", "reference_source|reference_source_selector": "cached", "fastq_input|fastq_input1": {"src": "hda", "id": "71bb13922ea715f6"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single", "mapping_options|min_occ_floor": "1000", "alignment_options|A": "2", "alignment_options|B": "8", "alignment_options|O": "12", "alignment_options|O2": "32", "alignment_options|E": "2", "alignment_options|E2": "1", "alignment_options|z": "400", "alignment_options|s": "40"}, "execution_problem": "parameter 'ref_file': an invalid option ('bwa-mem-mt-genome') was selected (valid options: panTro3full,bosTau4,panTro2canon,Xanthomonas_oryzae_MAFF_311018,caeRem4,eschColi_O157H7,droWil1,nomLeu3,gadMor1,mm7canon,nomLeu1,strPur3,sacCer3,pseuAeru_PAO1,Homo_sapiens_AK1,micMur1,droVir3,oryza_sativa_japonica_nipponbare_IRGSP4.0,loxAfr1,bosTau8,caeRem2,Araly1,bosTau3,hg18,ponAbe2,mm8,Arabidopsis_thaliana_TAIR9,ce6,hg19,triCas2,Schizosaccharomyces_pombe_1.1,chrPic1,bosTau6,hg38canon,caeRem1,oryLat1,droVir2,Homo_sapiens_nuHg19_mtrCRS,ci2full,tetNig1,Arabidopsis_thaliana_TAIR10,oviAri1,sarHar1,monDom5,melUnd1,sacCer1,Tcas_3.0,taeGut1,panTro2,canFam1,equCab2chrM,xenTro1,priPac1,phiX,tetNig2,echTel1,vicPac2,hg38female,vicPac1,ce3,ce8,otoGar1,fr1,venter1,caePb3,cb3canon,hg19chrM,dasNov3,droEre1,susScr2,saiBol1,canFam2,anoCar1,27835,rn4,Bombyx_mori_p50T_2.0,borEut13,hg19female,braFlo1,eschColi_K12,rn3,AgamP3,equCab2,rheMac3,pseuAeru_UCBPP_PA14,PhumU1,hetGla1,ci2canon,caeJap3,taeGut1canon,lMaj5,gasAcu1,allMis1,hg17,xenTro3,galGal3canon,droYak1,Xanthomonas_oryzae_PXO99A,droGri1,sacCer2,calJac3,AaegL1,pUC18,felCat4,dasNov1,Sscrofa9.58,calJac1,caePb2,aptMan1,ailMel1,dm6,eriEur1,danRer4,musFur1,petMar1,Tcacao_1.0,tetNig2canon,oryCun2,strePneu_R6,galGal4,Spur_v2.6,oryLat2canon,tupBel1,galGal3,droEre2,rn3canon,bordBron,droMoj3,caePb1,dm3,danRer3,apiMel4,dp3,droSim1,hg_g1k_v37,panTro3canon,droPer1,bosTauMd3,papHam1,hg19canon,Xanthomonas_oryzae_KACC10331,dipOrd1,danRer7,nomLeu2,ce5,ce9,droMoj1,burkPseu_668,rn5,hg18canon,CpipJ1,strPur2,anoCar2,Amel_4.5,criGri1,xenTro2,gorGor3,Hydra_JCVI,tarSyr1,geoFor1,taeGut2,danRer6,cb3full,Zea_mays_B73_RefGen_v2,anoGam1,otoGar3,tetNig1canon,danRer10,caeJap4,caeJap2,caeRem3,felCat8,bosTau2,canFam3,ente638,eschColi_K12_DH10B,monDom4,felCat4canon,droYak2,apiMel3,hg18chr21,latCha1,galGal2,mm9female,burkPseu_1710B,melGal1,monDom1,calJac3canon,ce7,ornAna1,rn6,hg18nohaps,eschColi_O157H7_EC4115,rn4canon,pseuAeru_PA7,felCat3,IscaW1,speTri2,droSec1,papAnu2,CHM13_T2T_v2.0,caeJap1,bosTau5,rheMac2,fr2,panTro4,eschColi_CFT073,dm2,turTru2,cerSim1,hg19_rCRS_pUC18_phiX174,cavPor3,burkPseu_K96243,eschColi_K12_W3110,ce4,eschColi_O157H7_EDL933,mm8canon,ce2,baciSubt,apiMel1,aplCal1,bosTau7,panPan1,equCab1,danRer5,oryLat2,droGri2,eschColi_APEC_O1,droAna1,loxAfr3,Ptrichocarpa_156,droMoj2,hg17canon,droAna2,hg38,danRer2,mm9,susScr1,choHof1,mm7,panTro1,sorAra1,oryCun1,droAna3,myoLuc2,mm9canon,susScr3,ce10,felCat5,mm10,droVir1,dp4,hg19chrX,burkPseu_1106A,panTro1canon,apiMel2,galGal2canon,eschColi_O157H7_TW14359)", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 7, "time_seconds": 91.9133460521698, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "bc2a29496e9e21a9"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "bc2a29496e9e21a9"}, "fastq_input|analysis_type_selector": "ava-ont", "fastq_input|fastq_input_selector": "single", "io_options|output_format": "paf"}, "job": {"model_class": "Job", "id": "789c339718dd8b82", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:53:02.192900", "create_time": "2022-10-22T16:51:40.036769", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-pznkt", "command_line": "ln -f -s '/galaxy/server/database/objects/5/6/b/dataset_56b73c26-9ffe-49df-b89d-a00d2c3a013a.dat' reference.fa && minimap2 -x ava-ont           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/5/6/b/dataset_56b73c26-9ffe-49df-b89d-a00d2c3a013a.dat' > '/galaxy/server/database/objects/a/2/4/dataset_a24a06ae-52ed-482f-836f-d5ccec6bc47e.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"paf\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"ava-ont\", \"fastq_input1\": {\"values\": [{\"id\": 142, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 142, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "bc2a29496e9e21a9", "src": "hda", "uuid": "56b73c26-9ffe-49df-b89d-a00d2c3a013a"}, "fastq_input1": {"id": "bc2a29496e9e21a9", "src": "hda", "uuid": "56b73c26-9ffe-49df-b89d-a00d2c3a013a"}}, "outputs": {"alignment_output": {"id": "b4073372df7a7dfb", "src": "hda", "uuid": "a24a06ae-52ed-482f-836f-d5ccec6bc47e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.011*0.91] collected minimizers\n[M::mm_idx_gen::0.025*2.01] sorted minimizers\n[M::main::0.026*2.01] loaded/built the index for 25 target sequence(s)\n[M::mm_mapopt_update::0.027*1.95] mid_occ = 3\n[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25\n[M::mm_idx_stat::0.028*1.92] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935\n[M::worker_pipeline::0.035*2.10] mapped 25 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x ava-ont -t 4 reference.fa /galaxy/server/database/objects/5/6/b/dataset_56b73c26-9ffe-49df-b89d-a00d2c3a013a.dat\n[M::main] Real time: 0.041 sec; CPU: 0.079 sec; Peak RSS: 0.011 GB\n", "stderr": "\n[M::mm_idx_gen::0.011*0.91] collected minimizers\n[M::mm_idx_gen::0.025*2.01] sorted minimizers\n[M::main::0.026*2.01] loaded/built the index for 25 target sequence(s)\n[M::mm_mapopt_update::0.027*1.95] mid_occ = 3\n[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25\n[M::mm_idx_stat::0.028*1.92] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935\n[M::worker_pipeline::0.035*2.10] mapped 25 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x ava-ont -t 4 reference.fa /galaxy/server/database/objects/5/6/b/dataset_56b73c26-9ffe-49df-b89d-a00d2c3a013a.dat\n[M::main] Real time: 0.041 sec; CPU: 0.079 sec; Peak RSS: 0.011 GB\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:52:48", "plugin": "core", "name": "end_epoch", "raw_value": "1666457568.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:52:48", "plugin": "core", "name": "start_epoch", "raw_value": "1666457568.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4-8", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2", "tool_version": "2.17+galaxy4", "test_index": 8, "time_seconds": 98.82337212562561, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "eab1fe6d869b11f3"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "eab1fe6d869b11f3"}, "fastq_input|analysis_type_selector": "self-homology", "fastq_input|fastq_input_selector": "single"}, "job": {"model_class": "Job", "id": "1d5dd50f7dda9dd3", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:54:13.538958", "create_time": "2022-10-22T16:52:50.882648", "galaxy_version": "21.09", "command_version": "2.17-r941", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-7qttf", "command_line": "ln -f -s '/galaxy/server/database/objects/a/9/e/dataset_a9ebecfb-d973-4e8d-b75c-db12b9b5f87b.dat' reference.fa && minimap2 -DP -k19 -w19 -m200           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/a/9/e/dataset_a9ebecfb-d973-4e8d-b75c-db12b9b5f87b.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/6/1/5/dataset_61542807-0c32-40b8-b2ec-ddcd0742fd33.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": \"false\", \"Q\": \"false\", \"Y\": \"false\", \"c\": \"false\", \"cs\": null, \"eqx\": \"false\", \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": \"true\", \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": \"false\", \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": \"false\", \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"self-homology\", \"fastq_input1\": {\"values\": [{\"id\": 144, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 144, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "eab1fe6d869b11f3", "src": "hda", "uuid": "a9ebecfb-d973-4e8d-b75c-db12b9b5f87b"}, "fastq_input1": {"id": "eab1fe6d869b11f3", "src": "hda", "uuid": "a9ebecfb-d973-4e8d-b75c-db12b9b5f87b"}}, "outputs": {"alignment_output": {"id": "12b8f0b482bfb7f6", "src": "hda", "uuid": "61542807-0c32-40b8-b2ec-ddcd0742fd33"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "[M::mm_idx_gen::0.004*0.85] collected minimizers\n[M::mm_idx_gen::0.006*1.34] sorted minimizers\n[M::main::0.006*1.33] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.32] mid_occ = 9\n[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.31] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057\n[M::worker_pipeline::0.034*1.04] mapped 1 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 4 -a reference.fa /galaxy/server/database/objects/a/9/e/dataset_a9ebecfb-d973-4e8d-b75c-db12b9b5f87b.dat\n[M::main] Real time: 0.035 sec; CPU: 0.036 sec; Peak RSS: 0.010 GB\n", "stderr": "\n[M::mm_idx_gen::0.004*0.85] collected minimizers\n[M::mm_idx_gen::0.006*1.34] sorted minimizers\n[M::main::0.006*1.33] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.32] mid_occ = 9\n[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.31] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057\n[M::worker_pipeline::0.034*1.04] mapped 1 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 4 -a reference.fa /galaxy/server/database/objects/a/9/e/dataset_a9ebecfb-d973-4e8d-b75c-db12b9b5f87b.dat\n[M::main] Real time: 0.035 sec; CPU: 0.036 sec; Peak RSS: 0.010 GB\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:54:04", "plugin": "core", "name": "end_epoch", "raw_value": "1666457644.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:54:04", "plugin": "core", "name": "start_epoch", "raw_value": "1666457644.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler", "tool_version": "0.4.8.0", "test_index": 0, "time_seconds": 481.14781522750854, "inputs": {"paired_unpaired|fastq_input1": {"src": "hda", "id": "10a7cc602972568d"}, "paired_unpaired|fastq_input2": {"src": "hda", "id": "60e701dbd7fce949"}, "paired_unpaired|fastq_input_selector": "paired", "mode": "normal", "min_fasta_length": "100", "linear_seqs": "0", "spades|no_correct": true, "spades|min_kmer_frac": "0.2", "spades|max_kmer_frac": "0.95", "spades|kmer_count": "10", "spades|depth_filter": "0.25", "rotation|no_rotate": false, "rotation|start_gene_id": "90", "rotation|start_gene_cov": "95", "pilon|no_pilon": false, "pilon|min_polish_size": "1000", "graph_clean|min_component_size": "1000", "graph_clean|min_dead_end_size": "1000", "lr_align|scores": "3,-6,-5,-2"}, "job": {"model_class": "Job", "id": "af2fdc8099eb2b36", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:14:57.634896", "create_time": "2022-10-22T17:07:16.140703", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-g5452", "command_line": "ln -s '/galaxy/server/database/objects/4/8/6/dataset_48690a17-8ded-4074-b1ff-730400f73fdf.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/3/2/e/dataset_32e5f8d8-2eea-4c85-8a97-928b0f101e08.dat' fq2.fastq && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -1 'fq1.fastq' -2 'fq2.fastq' --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --no_correct --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0'  --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"false\"}", "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"true\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "long": null, "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 263, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 264, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}"}, "inputs": {"fastq_input1": {"id": "10a7cc602972568d", "src": "hda", "uuid": "48690a17-8ded-4074-b1ff-730400f73fdf"}, "fastq_input2": {"id": "60e701dbd7fce949", "src": "hda", "uuid": "32e5f8d8-2eea-4c85-8a97-928b0f101e08"}}, "outputs": {"assembly": {"id": "3c0a13a0853af4cd", "src": "hda", "uuid": "561cf349-1ada-4715-a3f1-137ece2c7242"}, "assembly_graph": {"id": "3bc608675e455d37", "src": "hda", "uuid": "c2407106-5136-4eff-b667-9803a9cf3c99"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2022-10-22 17:12:16)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/225/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version             Status     Path                                   \n  spades.py       3.14.1              good       /usr/local/bin/spades.py               \n  racon                               not used                                          \n  makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb             \n  tblastn         2.12.0+             good       /usr/local/bin/tblastn                 \n  bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build           \n  bowtie2         2.4.4               good       /usr/local/bin/bowtie2                 \n  samtools        1.14                good       /usr/local/bin/samtools                \n  java            11.0.9.1-internal   good       /usr/local/bin/java                    \n  pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar\n  bcftools                            not used                                          \n\n\nChoosing k-mer range for assembly (2022-10-22 17:12:18)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2022-10-22 17:12:19)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/225/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/225/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/225/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/225/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 62\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/225/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/225/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 62 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.008     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.008     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.110    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.110    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.112    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.112    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.114    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.148    24M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.156    24M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.157    24M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.157    24M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.158    24M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.158    24M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.158    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16661 Gb\n  0:00:00.158    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.385    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.385    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.465    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.466    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.507    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.508    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.508    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.509    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.510    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16658 Gb\n  0:00:00.510    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.160     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:01.161     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:01.169    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.448    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.449    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.664    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.738    38M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.774    38M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:01.775    38M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.781    38M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.783    38M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:01.784    38M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:01.784    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:01.792    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:01.793    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:01.793    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:01.793    38M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:01.797    38M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:01.801    38M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:01.804    38M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:01.810    38M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.812    39M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.812    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.813    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.829    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:01.829    39M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.928    39M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:01.931    39M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:01.943    39M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:01.944    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:01.944    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:01.945    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:01.945    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:02.040    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:02.254    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.747    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:03.328    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.344    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:04.344    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:04.347    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:04.348    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:04.349    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:04.349    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:04.349    39M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:04.350    39M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:04.350    39M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:04.350    39M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:04.350    39M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:04.350    39M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:04\n..\n   : 246)   Deduplicating paths\n  0:00:13.678    24M / 94M   INFO    General                 (launcher.cpp              : 250)   Paths deduplicated\n  0:00:13.679    24M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:13.679    24M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:13.679    24M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:13.679    24M / 94M   INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:13.679    24M / 94M   INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:13.679    24M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:13.679    24M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:13.679    24M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:13.679    24M / 94M   INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:13.679    24M / 94M   INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished\n  0:00:13.680    24M / 94M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output\n  0:00:13.680    24M / 94M   INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/before_rr.fasta\n  0:00:13.695    24M / 94M   INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa\n  0:00:13.696    24M / 94M   INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/assembly_graph.fastg\n  0:00:13.711    24M / 94M   INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds\n  0:00:13.711    24M / 94M   INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/final_contigs.fasta\n  0:00:13.725    24M / 94M   INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/final_contigs.paths\n  0:00:13.738    24M / 94M   INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/scaffolds.fasta\n  0:00:13.751    24M / 94M   INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/scaffolds.paths\n  0:00:13.768    24M / 94M   INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths\n  0:00:13.799    24M / 94M   INFO    General                 (pipeline.cpp              : 259)   SPAdes finished\n  0:00:13.805    24M / 94M   INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 13 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:13.671    25M / 94M   WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2022-10-22 17:14:17)\nFilter by read depth        (2022-10-22 17:14:17)\nFilter homopolymer loops    (2022-10-22 17:14:17)\nMerge all possible          (2022-10-22 17:14:17)\nNormalise read depths       (2022-10-22 17:14:17)\nRemove zero length segments (2022-10-22 17:14:17)\nSort link order             (2022-10-22 17:14:17)\nGraph cleaning finished     (2022-10-22 17:14:17)\nSaving /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2022-10-22 17:14:17)\nFilter by read depth        (2022-10-22 17:14:17)\nFilter homopolymer loops    (2022-10-22 17:14:17)\nMerge all possible          (2022-10-22 17:14:17)\nNormalise read depths       (2022-10-22 17:14:17)\nRemove zero length segments (2022-10-22 17:14:17)\nSort link order             (2022-10-22 17:14:17)\nGraph cleaning finished     (2022-10-22 17:14:17)\nSaving /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2022-10-22 17:14:17)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/\n\n\nDetermining graph multiplicity (2022-10-22 17:14:18)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/225/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2022-10-22 17:14:18)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/225/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2022-10-22 17:14:18)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2022-10-22 17:14:18)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2022-10-22 17:14:18)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/225/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2022-10-22 17:14:18)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2022-10-22 17:14:18)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/225/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nPolishing assembly with Pilon (2022-10-22 17:14:18)\n    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any\nremaining small-scale errors with the assembly.\n\nAligning reads to find appropriate insert size range...\n  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta\n  bowtie2 -1 /galaxy/server/database/jobs_directory/000/225/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/225/working/fq2.fastq -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.sam\nInsert size 1st percentile:  263\nInsert size 99th percentile: 450\n\nPilon polish round 1\n  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/225/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/225/working/fq2.fastq\n  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam\n  samtools index 1_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/225/working/pilon_polish --fix bases --frags 1_paired_alignments.bam\nNo Pilon changes\n\nSaving /galaxy/server/database/jobs_directory/000/225/working/005_polished.gfa\n\n\nRotating completed replicons (2022-10-22 17:14:28)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2022-10-22 17:14:45)\nSaving /galaxy/server/database/jobs_directory/000/225/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/225/working/assembly.fasta\n\n", "tool_stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "job_stdout": "", "job_stderr": "", "stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "stdout": "\nStarting Unicycler (2022-10-22 17:12:16)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/225/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version             Status     Path                                   \n  spades.py       3.14.1              good       /usr/local/bin/spades.py               \n  racon                               not used                                          \n  makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb             \n  tblastn         2.12.0+             good       /usr/local/bin/tblastn                 \n  bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build           \n  bowtie2         2.4.4               good       /usr/local/bin/bowtie2                 \n  samtools        1.14                good       /usr/local/bin/samtools                \n  java            11.0.9.1-internal   good       /usr/local/bin/java                    \n  pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar\n  bcftools                            not used                                          \n\n\nChoosing k-mer range for assembly (2022-10-22 17:12:18)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2022-10-22 17:12:19)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/225/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/225/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/225/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/225/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 62\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/225/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/225/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 62 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.008     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.008     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.110    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.110    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.112    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.112    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.114    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.148    24M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.156    24M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.157    24M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.157    24M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.158    24M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.158    24M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.158    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16661 Gb\n  0:00:00.158    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.385    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.385    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.465    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.466    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.507    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.508    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.508    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.509    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.510    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16658 Gb\n  0:00:00.510    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.160     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:01.161     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:01.169    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.448    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.449    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.664    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.738    38M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.774    38M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:01.775    38M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.781    38M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.783    38M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:01.784    38M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:01.784    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:01.792    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:01.793    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:01.793    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:01.793    38M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:01.797    38M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:01.801    38M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:01.804    38M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:01.810    38M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.812    39M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.812    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.813    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.829    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:01.829    39M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.928    39M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:01.931    39M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:01.943    39M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:01.944    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:01.944    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:01.945    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:01.945    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:02.040    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:02.254    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.747    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:03.328    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.344    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:04.344    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:04.347    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:04.348    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:04.349    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:04.349    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:04.349    39M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:04.350    39M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:04.350    39M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:04.350    39M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:04.350    39M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:04.350    39M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:04\n..\n   : 246)   Deduplicating paths\n  0:00:13.678    24M / 94M   INFO    General                 (launcher.cpp              : 250)   Paths deduplicated\n  0:00:13.679    24M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:13.679    24M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:13.679    24M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:13.679    24M / 94M   INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:13.679    24M / 94M   INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:13.679    24M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:13.679    24M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:13.679    24M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:13.679    24M / 94M   INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:13.679    24M / 94M   INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished\n  0:00:13.680    24M / 94M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output\n  0:00:13.680    24M / 94M   INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/before_rr.fasta\n  0:00:13.695    24M / 94M   INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa\n  0:00:13.696    24M / 94M   INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/assembly_graph.fastg\n  0:00:13.711    24M / 94M   INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds\n  0:00:13.711    24M / 94M   INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/final_contigs.fasta\n  0:00:13.725    24M / 94M   INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/final_contigs.paths\n  0:00:13.738    24M / 94M   INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/scaffolds.fasta\n  0:00:13.751    24M / 94M   INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/scaffolds.paths\n  0:00:13.768    24M / 94M   INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths\n  0:00:13.799    24M / 94M   INFO    General                 (pipeline.cpp              : 259)   SPAdes finished\n  0:00:13.805    24M / 94M   INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 13 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:13.671    25M / 94M   WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2022-10-22 17:14:17)\nFilter by read depth        (2022-10-22 17:14:17)\nFilter homopolymer loops    (2022-10-22 17:14:17)\nMerge all possible          (2022-10-22 17:14:17)\nNormalise read depths       (2022-10-22 17:14:17)\nRemove zero length segments (2022-10-22 17:14:17)\nSort link order             (2022-10-22 17:14:17)\nGraph cleaning finished     (2022-10-22 17:14:17)\nSaving /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2022-10-22 17:14:17)\nFilter by read depth        (2022-10-22 17:14:17)\nFilter homopolymer loops    (2022-10-22 17:14:17)\nMerge all possible          (2022-10-22 17:14:17)\nNormalise read depths       (2022-10-22 17:14:17)\nRemove zero length segments (2022-10-22 17:14:17)\nSort link order             (2022-10-22 17:14:17)\nGraph cleaning finished     (2022-10-22 17:14:17)\nSaving /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2022-10-22 17:14:17)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/225/working/spades_assembly/\n\n\nDetermining graph multiplicity (2022-10-22 17:14:18)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/225/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2022-10-22 17:14:18)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/225/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2022-10-22 17:14:18)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2022-10-22 17:14:18)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2022-10-22 17:14:18)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/225/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2022-10-22 17:14:18)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2022-10-22 17:14:18)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/225/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nPolishing assembly with Pilon (2022-10-22 17:14:18)\n    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any\nremaining small-scale errors with the assembly.\n\nAligning reads to find appropriate insert size range...\n  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta\n  bowtie2 -1 /galaxy/server/database/jobs_directory/000/225/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/225/working/fq2.fastq -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.sam\nInsert size 1st percentile:  263\nInsert size 99th percentile: 450\n\nPilon polish round 1\n  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/225/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/225/working/fq2.fastq\n  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam\n  samtools index 1_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/225/working/pilon_polish --fix bases --frags 1_paired_alignments.bam\nNo Pilon changes\n\nSaving /galaxy/server/database/jobs_directory/000/225/working/005_polished.gfa\n\n\nRotating completed replicons (2022-10-22 17:14:28)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2022-10-22 17:14:45)\nSaving /galaxy/server/database/jobs_directory/000/225/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/225/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 minutes", "plugin": "core", "name": "runtime_seconds", "raw_value": "149.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:14:45", "plugin": "core", "name": "end_epoch", "raw_value": "1666458885.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:12:16", "plugin": "core", "name": "start_epoch", "raw_value": "1666458736.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler", "tool_version": "0.4.8.0", "test_index": 1, "time_seconds": 322.7388801574707, "inputs": {"paired_unpaired|fastq_input1": {"src": "hda", "id": "10a7cc602972568d"}, "paired_unpaired|fastq_input2": {"src": "hda", "id": "60e701dbd7fce949"}, "paired_unpaired|fastq_input_selector": "paired", "long": {"src": "hda", "id": "bc94dd6343e7f646"}, "mode": "normal", "min_fasta_length": "100", "linear_seqs": "0", "spades|no_correct": true, "spades|min_kmer_frac": "0.2", "spades|max_kmer_frac": "0.95", "spades|kmer_count": "10", "spades|depth_filter": "0.25", "rotation|no_rotate": false, "rotation|start_gene_id": "90", "rotation|start_gene_cov": "95", "pilon|no_pilon": false, "pilon|min_polish_size": "1000", "graph_clean|min_component_size": "1000", "graph_clean|min_dead_end_size": "1000", "lr_align|scores": "3,-6,-5,-2"}, "job": {"model_class": "Job", "id": "321aed973e832480", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:12:23.501096", "create_time": "2022-10-22T17:07:31.380806", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-rcjqb", "command_line": "ln -s '/galaxy/server/database/objects/4/8/6/dataset_48690a17-8ded-4074-b1ff-730400f73fdf.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/3/2/e/dataset_32e5f8d8-2eea-4c85-8a97-928b0f101e08.dat' fq2.fastq && ln -s '/galaxy/server/database/objects/9/3/4/dataset_934d327c-3e43-4e76-bdac-e925dbc3eb0e.dat' 'lr.fasta' && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -1 'fq1.fastq' -2 'fq2.fastq' -l lr.fasta --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --no_correct --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0'  --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"false\"}", "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"true\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 263, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 264, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}"}, "inputs": {"fastq_input1": {"id": "10a7cc602972568d", "src": "hda", "uuid": "48690a17-8ded-4074-b1ff-730400f73fdf"}, "fastq_input2": {"id": "60e701dbd7fce949", "src": "hda", "uuid": "32e5f8d8-2eea-4c85-8a97-928b0f101e08"}, "long": {"id": "bc94dd6343e7f646", "src": "hda", "uuid": "934d327c-3e43-4e76-bdac-e925dbc3eb0e"}}, "outputs": {"assembly": {"id": "cca58667108a868c", "src": "hda", "uuid": "22c5e753-7b20-4b98-84aa-460a36270c03"}, "assembly_graph": {"id": "e552ddadd100a408", "src": "hda", "uuid": "9cfc0cb1-624d-4af9-a411-20e2dcfea8a7"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2022-10-22 17:08:56)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/226/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version             Status     Path                                   \n  spades.py       3.14.1              good       /usr/local/bin/spades.py               \n  racon           1.4.20              good       /usr/local/bin/racon                   \n  makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb             \n  tblastn         2.12.0+             good       /usr/local/bin/tblastn                 \n  bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build           \n  bowtie2         2.4.4               good       /usr/local/bin/bowtie2                 \n  samtools        1.14                good       /usr/local/bin/samtools                \n  java            11.0.9.1-internal   good       /usr/local/bin/java                    \n  pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar\n  bcftools                            not used                                          \n\n\nChoosing k-mer range for assembly (2022-10-22 17:08:57)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2022-10-22 17:08:57)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/226/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/226/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/226/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/226/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 62\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/226/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/226/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 62 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.005     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.105    86M / 86M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.106    62M / 62M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.107    72M / 72M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.107    72M / 72M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.109    72M / 72M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.148    24M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.167    24M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.167    24M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.168    24M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.169    24M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.170    24M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.171    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16661 Gb\n  0:00:00.171    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.614    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.615    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.828    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.829    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.970    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.974    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.975    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.979    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.980    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16658 Gb\n  0:00:00.980    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:02.686     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:02.687     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:02.699    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.505    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:03.505    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:03.948    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.130    38M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.205    38M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:04.206    38M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:04.214    38M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:04.217    38M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:04.217    38M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:04.217    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:04.241    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:04.241    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:04.243    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:04.243    38M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:04.254    38M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:04.268    38M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:04.272    38M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:04.289    38M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:04.294    39M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:04.295    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:04.295    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.352    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:04.352    39M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:04.490    39M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:04.494    39M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:04.508    39M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:04.508    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:04.508    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:04.508    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:04.508    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:04.637    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:04.938    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:05.646    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:06.660    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:08.573    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:08.574    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:08.575    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:08.575    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:08.576    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:08.576    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:08.576    39M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:08.576    39M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:08.576    39M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:08.576    39M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:08.577    39M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:08.577    39M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:08.5\n..\nworking/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:15.185    27M / 98M   WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2022-10-22 17:11:35)\nFilter by read depth        (2022-10-22 17:11:35)\nFilter homopolymer loops    (2022-10-22 17:11:35)\nMerge all possible          (2022-10-22 17:11:35)\nNormalise read depths       (2022-10-22 17:11:35)\nRemove zero length segments (2022-10-22 17:11:35)\nSort link order             (2022-10-22 17:11:35)\nGraph cleaning finished     (2022-10-22 17:11:35)\nSaving /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2022-10-22 17:11:35)\nFilter by read depth        (2022-10-22 17:11:35)\nFilter homopolymer loops    (2022-10-22 17:11:35)\nMerge all possible          (2022-10-22 17:11:35)\nNormalise read depths       (2022-10-22 17:11:35)\nRemove zero length segments (2022-10-22 17:11:35)\nSort link order             (2022-10-22 17:11:35)\nGraph cleaning finished     (2022-10-22 17:11:35)\nSaving /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2022-10-22 17:11:35)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/\n\n\nDetermining graph multiplicity (2022-10-22 17:11:36)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/226/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2022-10-22 17:11:36)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/226/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2022-10-22 17:11:36)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2022-10-22 17:11:36)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2022-10-22 17:11:36)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2022-10-22 17:11:36)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/226/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/226/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2022-10-22 17:11:36)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/226/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times\n(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2022-10-22 17:11:36)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2022-10-22 17:11:36)\n1\t5386\t5\t5077\t-\t1\t5386\t8\t5080\t5072\t5072\t255\tcm:i:945\n1\t5386\t5093\t5384\t-\t1\t5386\t5087\t5378\t291\t291\t255\tcm:i:52\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2022-10-22 17:11:36)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5077,-,1,8,5080\n    5093,5384,-,1,5087,5378\nReference ranges:\n    1-: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 5076 points, score=5074.000394 (good)\n    line 2: 292 points, score=290.006826 (good)\nAll Seqan alignments (time to align = 0.069 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\n\n\nRead alignment summary (2022-10-22 17:11:36)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nDeleting /galaxy/server/database/jobs_directory/000/226/working/read_alignment/\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2022-10-22 17:11:36)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2022-10-22 17:11:36)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/226/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2022-10-22 17:11:36)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2022-10-22 17:11:36)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/226/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nPolishing assembly with Pilon (2022-10-22 17:11:36)\n    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any\nremaining small-scale errors with the assembly.\n\nAligning reads to find appropriate insert size range...\n  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta\n  bowtie2 -1 /galaxy/server/database/jobs_directory/000/226/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/226/working/fq2.fastq -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.sam\nInsert size 1st percentile:  263\nInsert size 99th percentile: 450\n\nPilon polish round 1\n  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/226/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/226/working/fq2.fastq\n  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam\n  samtools index 1_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/226/working/pilon_polish --fix bases --frags 1_paired_alignments.bam\nNo Pilon changes\n\nPilon polish round 2\n  bowtie2-build 2_polish_input.fasta 2_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 2_polish_input.fasta -S 2_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/226/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/226/working/fq2.fastq\n  samtools sort -@ 4 -o 2_paired_alignments.bam -O bam -T temp 2_paired_alignments.sam\n  samtools index 2_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 2_polish_input.fasta --changes --output 2_pilon --outdir /galaxy/server/database/jobs_directory/000/226/working/pilon_polish --fix all --frags 2_paired_alignments.bam\nNo Pilon changes\n\nSaving /galaxy/server/database/jobs_directory/000/226/working/005_polished.gfa\n\n\nRotating completed replicons (2022-10-22 17:11:56)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2022-10-22 17:12:11)\nSaving /galaxy/server/database/jobs_directory/000/226/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/226/working/assembly.fasta\n\n", "tool_stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "job_stdout": "", "job_stderr": "", "stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "stdout": "\nStarting Unicycler (2022-10-22 17:08:56)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/226/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version             Status     Path                                   \n  spades.py       3.14.1              good       /usr/local/bin/spades.py               \n  racon           1.4.20              good       /usr/local/bin/racon                   \n  makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb             \n  tblastn         2.12.0+             good       /usr/local/bin/tblastn                 \n  bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build           \n  bowtie2         2.4.4               good       /usr/local/bin/bowtie2                 \n  samtools        1.14                good       /usr/local/bin/samtools                \n  java            11.0.9.1-internal   good       /usr/local/bin/java                    \n  pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar\n  bcftools                            not used                                          \n\n\nChoosing k-mer range for assembly (2022-10-22 17:08:57)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2022-10-22 17:08:57)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/226/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/226/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/226/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/226/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 62\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/226/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/226/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 62 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.005     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.105    86M / 86M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.106    62M / 62M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.107    72M / 72M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.107    72M / 72M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.109    72M / 72M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.148    24M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.167    24M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.167    24M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.168    24M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.169    24M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.170    24M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.171    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16661 Gb\n  0:00:00.171    24M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.614    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.615    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.828    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.829    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.970    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.974    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.975    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.979    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.980    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16658 Gb\n  0:00:00.980    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:02.686     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:02.687     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:02.699    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.505    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:03.505    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:03.948    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.130    38M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.205    38M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:04.206    38M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:04.214    38M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:04.217    38M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:04.217    38M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:04.217    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:04.241    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:04.241    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:04.243    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:04.243    38M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:04.254    38M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:04.268    38M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:04.272    38M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:04.289    38M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:04.294    39M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:04.295    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:04.295    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.352    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:04.352    39M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:04.490    39M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:04.494    39M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:04.508    39M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:04.508    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:04.508    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:04.508    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:04.508    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:04.637    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:04.938    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:05.646    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:06.660    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:08.573    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:08.574    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:08.575    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:08.575    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:08.576    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:08.576    39M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:08.576    39M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:08.576    39M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:08.576    39M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:08.576    39M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:08.577    39M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:08.577    39M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:08.5\n..\nworking/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:15.185    27M / 98M   WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2022-10-22 17:11:35)\nFilter by read depth        (2022-10-22 17:11:35)\nFilter homopolymer loops    (2022-10-22 17:11:35)\nMerge all possible          (2022-10-22 17:11:35)\nNormalise read depths       (2022-10-22 17:11:35)\nRemove zero length segments (2022-10-22 17:11:35)\nSort link order             (2022-10-22 17:11:35)\nGraph cleaning finished     (2022-10-22 17:11:35)\nSaving /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2022-10-22 17:11:35)\nFilter by read depth        (2022-10-22 17:11:35)\nFilter homopolymer loops    (2022-10-22 17:11:35)\nMerge all possible          (2022-10-22 17:11:35)\nNormalise read depths       (2022-10-22 17:11:35)\nRemove zero length segments (2022-10-22 17:11:35)\nSort link order             (2022-10-22 17:11:35)\nGraph cleaning finished     (2022-10-22 17:11:35)\nSaving /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2022-10-22 17:11:35)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/226/working/spades_assembly/\n\n\nDetermining graph multiplicity (2022-10-22 17:11:36)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/226/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2022-10-22 17:11:36)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/226/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2022-10-22 17:11:36)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2022-10-22 17:11:36)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2022-10-22 17:11:36)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2022-10-22 17:11:36)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/226/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/226/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2022-10-22 17:11:36)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/226/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times\n(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2022-10-22 17:11:36)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2022-10-22 17:11:36)\n1\t5386\t5\t5077\t-\t1\t5386\t8\t5080\t5072\t5072\t255\tcm:i:945\n1\t5386\t5093\t5384\t-\t1\t5386\t5087\t5378\t291\t291\t255\tcm:i:52\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2022-10-22 17:11:36)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5077,-,1,8,5080\n    5093,5384,-,1,5087,5378\nReference ranges:\n    1-: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 5076 points, score=5074.000394 (good)\n    line 2: 292 points, score=290.006826 (good)\nAll Seqan alignments (time to align = 0.069 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\n\n\nRead alignment summary (2022-10-22 17:11:36)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nDeleting /galaxy/server/database/jobs_directory/000/226/working/read_alignment/\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2022-10-22 17:11:36)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2022-10-22 17:11:36)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/226/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2022-10-22 17:11:36)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2022-10-22 17:11:36)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/226/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nPolishing assembly with Pilon (2022-10-22 17:11:36)\n    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any\nremaining small-scale errors with the assembly.\n\nAligning reads to find appropriate insert size range...\n  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta\n  bowtie2 -1 /galaxy/server/database/jobs_directory/000/226/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/226/working/fq2.fastq -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.sam\nInsert size 1st percentile:  263\nInsert size 99th percentile: 450\n\nPilon polish round 1\n  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/226/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/226/working/fq2.fastq\n  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam\n  samtools index 1_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/226/working/pilon_polish --fix bases --frags 1_paired_alignments.bam\nNo Pilon changes\n\nPilon polish round 2\n  bowtie2-build 2_polish_input.fasta 2_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 2_polish_input.fasta -S 2_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/226/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/226/working/fq2.fastq\n  samtools sort -@ 4 -o 2_paired_alignments.bam -O bam -T temp 2_paired_alignments.sam\n  samtools index 2_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 2_polish_input.fasta --changes --output 2_pilon --outdir /galaxy/server/database/jobs_directory/000/226/working/pilon_polish --fix all --frags 2_paired_alignments.bam\nNo Pilon changes\n\nSaving /galaxy/server/database/jobs_directory/000/226/working/005_polished.gfa\n\n\nRotating completed replicons (2022-10-22 17:11:56)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2022-10-22 17:12:11)\nSaving /galaxy/server/database/jobs_directory/000/226/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/226/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 minutes", "plugin": "core", "name": "runtime_seconds", "raw_value": "195.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:12:11", "plugin": "core", "name": "end_epoch", "raw_value": "1666458731.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:08:56", "plugin": "core", "name": "start_epoch", "raw_value": "1666458536.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler", "tool_version": "0.4.8.0", "test_index": 2, "time_seconds": 612.4048976898193, "inputs": {"paired_unpaired|fastq_input1": {"src": "hdca", "id": "8719d0548dfb0e09"}, "paired_unpaired|fastq_input_selector": "paired_collection", "mode": "normal", "min_fasta_length": "100", "linear_seqs": "0", "spades|no_correct": true, "spades|min_kmer_frac": "0.2", "spades|max_kmer_frac": "0.95", "spades|kmer_count": "10", "spades|depth_filter": "0.25", "rotation|no_rotate": false, "rotation|start_gene_id": "90", "rotation|start_gene_cov": "95", "pilon|no_pilon": true, "pilon|min_polish_size": "1000", "graph_clean|min_component_size": "1000", "graph_clean|min_dead_end_size": "1000", "lr_align|scores": "3,-6,-5,-2"}, "job": {"model_class": "Job", "id": "9326f48120903311", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:17:24.760821", "create_time": "2022-10-22T17:07:34.249895", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-p4vg7", "command_line": "ln -s '/galaxy/server/database/objects/4/8/6/dataset_48690a17-8ded-4074-b1ff-730400f73fdf.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/3/2/e/dataset_32e5f8d8-2eea-4c85-8a97-928b0f101e08.dat' fq2.fastq && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -1 'fq1.fastq' -2 'fq2.fastq' --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --no_correct --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0' --no_pilon --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"true\"}", "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"true\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "long": null, "paired_unpaired": "{\"__current_case__\": 1, \"fastq_input1\": {\"values\": [{\"id\": 4, \"src\": \"hdca\"}]}, \"fastq_input_selector\": \"paired_collection\"}"}, "inputs": {"fastq_input11": {"id": "10a7cc602972568d", "src": "hda", "uuid": "48690a17-8ded-4074-b1ff-730400f73fdf"}, "fastq_input12": {"id": "60e701dbd7fce949", "src": "hda", "uuid": "32e5f8d8-2eea-4c85-8a97-928b0f101e08"}}, "outputs": {"assembly": {"id": "e7d0ba7d4fadcfc7", "src": "hda", "uuid": "cd1f254f-ae56-4d23-b124-b130a5f66a5b"}, "assembly_graph": {"id": "27eb4b86c55db45c", "src": "hda", "uuid": "4dc05a33-8e88-4daa-83fd-04e3919d80d2"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2022-10-22 17:14:51)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --no_pilon --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/227/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py       3.14.1    good       /usr/local/bin/spades.py  \n  racon                     not used                             \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nChoosing k-mer range for assembly (2022-10-22 17:14:52)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2022-10-22 17:14:52)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/227/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/227/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/227/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/227/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 62\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/227/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/227/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 62 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.013     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.014     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.161    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.162    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.165    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.165    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.168    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.255    26M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.278    26M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.278    26M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.278    26M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.281    26M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.282    26M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.282    26M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16661 Gb\n  0:00:00.282    26M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.784    44M / 60M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.784    44M / 60M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.971    44M / 60M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.972    44M / 60M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.080    44M / 60M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:01.081    44M / 60M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.081    44M / 60M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:01.082    44M / 60M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.083    44M / 60M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16658 Gb\n  0:00:01.083    44M / 60M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:02.761     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:02.761     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:02.771    44M / 60M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.508    44M / 60M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:03.508    44M / 60M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:03.936    44M / 60M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.093    35M / 60M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.183    35M / 60M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:04.183    35M / 60M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:04.191    35M / 60M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:04.193    35M / 60M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:04.193    35M / 60M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:04.193    35M / 60M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:04.211    35M / 60M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:04.212    35M / 60M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:04.212    35M / 60M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:04.212    35M / 60M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:04.222    35M / 60M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:04.226    36M / 60M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:04.233    36M / 60M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:04.245    36M / 60M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:04.250    32M / 60M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:04.250    32M / 60M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:04.250    32M / 60M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.306    33M / 60M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:04.306    33M / 60M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:04.439    33M / 60M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:04.441    33M / 60M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:04.461    33M / 60M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:04.461    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:04.461    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:04.462    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:04.462    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:04.579    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:04.892    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:05.686    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:06.577    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:08.054    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:08.055    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:08.056    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:08.057    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:08.057    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:08.057    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:08.058    33M / 60M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:08.059    33M / 60M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:08.059    33M / 60M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:08.059    33M / 60M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:08.060    33M / 60M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:08.061    33M / 60M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:08.061    33M / 60M   INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:08.063    33M / 60M   INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge r\n..\noverlaps\n  0:00:13.027    23M / 94M   INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:13.027    23M / 94M   INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:13.027    23M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:13.027    23M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:13.027    23M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:13.027    23M / 94M   INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:13.028    23M / 94M   INFO    General                 (launcher.cpp              : 439)   Closing gaps in paths\n  0:00:13.028    23M / 94M   INFO    General                 (launcher.cpp              : 467)   Gap closing completed\n  0:00:13.028    23M / 94M   INFO    General                 (launcher.cpp              : 296)   Traversing tandem repeats\n  0:00:13.028    23M / 94M   INFO    General                 (launcher.cpp              : 306)   Traversed 0 loops\n  0:00:13.028    23M / 94M   INFO    General                 (launcher.cpp              : 244)   Finalizing paths\n  0:00:13.028    23M / 94M   INFO    General                 (launcher.cpp              : 246)   Deduplicating paths\n  0:00:13.028    23M / 94M   INFO    General                 (launcher.cpp              : 250)   Paths deduplicated\n  0:00:13.028    23M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:13.028    23M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:13.028    23M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:13.028    23M / 94M   INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:13.028    23M / 94M   INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:13.028    23M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:13.029    23M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:13.029    23M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:13.029    23M / 94M   INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:13.029    23M / 94M   INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished\n  0:00:13.029    23M / 94M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output\n  0:00:13.029    23M / 94M   INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/before_rr.fasta\n  0:00:13.047    23M / 94M   INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa\n  0:00:13.047    23M / 94M   INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/assembly_graph.fastg\n  0:00:13.062    23M / 94M   INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds\n  0:00:13.063    23M / 94M   INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/final_contigs.fasta\n  0:00:13.077    23M / 94M   INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/final_contigs.paths\n  0:00:13.091    23M / 94M   INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/scaffolds.fasta\n  0:00:13.108    23M / 94M   INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/scaffolds.paths\n  0:00:13.126    23M / 94M   INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths\n  0:00:13.166    23M / 94M   INFO    General                 (pipeline.cpp              : 259)   SPAdes finished\n  0:00:13.172    19M / 94M   INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 13 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:13.025    23M / 94M   WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2022-10-22 17:16:58)\nFilter by read depth        (2022-10-22 17:16:58)\nFilter homopolymer loops    (2022-10-22 17:16:58)\nMerge all possible          (2022-10-22 17:16:58)\nNormalise read depths       (2022-10-22 17:16:58)\nRemove zero length segments (2022-10-22 17:16:58)\nSort link order             (2022-10-22 17:16:58)\nGraph cleaning finished     (2022-10-22 17:16:58)\nSaving /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2022-10-22 17:16:58)\nFilter by read depth        (2022-10-22 17:16:58)\nFilter homopolymer loops    (2022-10-22 17:16:58)\nMerge all possible          (2022-10-22 17:16:58)\nNormalise read depths       (2022-10-22 17:16:58)\nRemove zero length segments (2022-10-22 17:16:58)\nSort link order             (2022-10-22 17:16:58)\nGraph cleaning finished     (2022-10-22 17:16:58)\nSaving /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2022-10-22 17:16:58)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/\n\n\nDetermining graph multiplicity (2022-10-22 17:16:58)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/227/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2022-10-22 17:16:59)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/227/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2022-10-22 17:16:59)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2022-10-22 17:16:59)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2022-10-22 17:16:59)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/227/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2022-10-22 17:16:59)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2022-10-22 17:16:59)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/227/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2022-10-22 17:16:59)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2022-10-22 17:17:13)\nSaving /galaxy/server/database/jobs_directory/000/227/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/227/working/assembly.fasta\n\n", "tool_stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "job_stdout": "", "job_stderr": "", "stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "stdout": "\nStarting Unicycler (2022-10-22 17:14:51)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --no_pilon --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/227/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py       3.14.1    good       /usr/local/bin/spades.py  \n  racon                     not used                             \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nChoosing k-mer range for assembly (2022-10-22 17:14:52)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2022-10-22 17:14:52)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/227/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/227/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/227/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/227/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 62\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/227/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/227/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 62 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.013     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.014     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.161    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.162    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.165    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.165    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.168    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.255    26M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.278    26M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.278    26M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.278    26M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.281    26M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.282    26M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.282    26M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16661 Gb\n  0:00:00.282    26M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.784    44M / 60M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.784    44M / 60M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.971    44M / 60M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.972    44M / 60M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.080    44M / 60M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:01.081    44M / 60M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.081    44M / 60M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:01.082    44M / 60M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.083    44M / 60M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 5.16658 Gb\n  0:00:01.083    44M / 60M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:02.761     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:02.761     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:02.771    44M / 60M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.508    44M / 60M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:03.508    44M / 60M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:03.936    44M / 60M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.093    35M / 60M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.183    35M / 60M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:04.183    35M / 60M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:04.191    35M / 60M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:04.193    35M / 60M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:04.193    35M / 60M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:04.193    35M / 60M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:04.211    35M / 60M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:04.212    35M / 60M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:04.212    35M / 60M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:04.212    35M / 60M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:04.222    35M / 60M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:04.226    36M / 60M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:04.233    36M / 60M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:04.245    36M / 60M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:04.250    32M / 60M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:04.250    32M / 60M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:04.250    32M / 60M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.306    33M / 60M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:04.306    33M / 60M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:04.439    33M / 60M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:04.441    33M / 60M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:04.461    33M / 60M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:04.461    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:04.461    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:04.462    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:04.462    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:04.579    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:04.892    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:05.686    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:06.577    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:08.054    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:08.055    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:08.056    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:08.057    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:08.057    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:08.057    33M / 60M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:08.058    33M / 60M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:08.059    33M / 60M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:08.059    33M / 60M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:08.059    33M / 60M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:08.060    33M / 60M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:08.061    33M / 60M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:08.061    33M / 60M   INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:08.063    33M / 60M   INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge r\n..\noverlaps\n  0:00:13.027    23M / 94M   INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:13.027    23M / 94M   INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:13.027    23M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:13.027    23M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:13.027    23M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:13.027    23M / 94M   INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:13.028    23M / 94M   INFO    General                 (launcher.cpp              : 439)   Closing gaps in paths\n  0:00:13.028    23M / 94M   INFO    General                 (launcher.cpp              : 467)   Gap closing completed\n  0:00:13.028    23M / 94M   INFO    General                 (launcher.cpp              : 296)   Traversing tandem repeats\n  0:00:13.028    23M / 94M   INFO    General                 (launcher.cpp              : 306)   Traversed 0 loops\n  0:00:13.028    23M / 94M   INFO    General                 (launcher.cpp              : 244)   Finalizing paths\n  0:00:13.028    23M / 94M   INFO    General                 (launcher.cpp              : 246)   Deduplicating paths\n  0:00:13.028    23M / 94M   INFO    General                 (launcher.cpp              : 250)   Paths deduplicated\n  0:00:13.028    23M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:13.028    23M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:13.028    23M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:13.028    23M / 94M   INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:13.028    23M / 94M   INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:13.028    23M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:13.029    23M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:13.029    23M / 94M   INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:13.029    23M / 94M   INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:13.029    23M / 94M   INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished\n  0:00:13.029    23M / 94M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output\n  0:00:13.029    23M / 94M   INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/before_rr.fasta\n  0:00:13.047    23M / 94M   INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa\n  0:00:13.047    23M / 94M   INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/assembly_graph.fastg\n  0:00:13.062    23M / 94M   INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds\n  0:00:13.063    23M / 94M   INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/final_contigs.fasta\n  0:00:13.077    23M / 94M   INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/final_contigs.paths\n  0:00:13.091    23M / 94M   INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/scaffolds.fasta\n  0:00:13.108    23M / 94M   INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/scaffolds.paths\n  0:00:13.126    23M / 94M   INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths\n  0:00:13.166    23M / 94M   INFO    General                 (pipeline.cpp              : 259)   SPAdes finished\n  0:00:13.172    19M / 94M   INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 13 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:13.025    23M / 94M   WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2022-10-22 17:16:58)\nFilter by read depth        (2022-10-22 17:16:58)\nFilter homopolymer loops    (2022-10-22 17:16:58)\nMerge all possible          (2022-10-22 17:16:58)\nNormalise read depths       (2022-10-22 17:16:58)\nRemove zero length segments (2022-10-22 17:16:58)\nSort link order             (2022-10-22 17:16:58)\nGraph cleaning finished     (2022-10-22 17:16:58)\nSaving /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2022-10-22 17:16:58)\nFilter by read depth        (2022-10-22 17:16:58)\nFilter homopolymer loops    (2022-10-22 17:16:58)\nMerge all possible          (2022-10-22 17:16:58)\nNormalise read depths       (2022-10-22 17:16:58)\nRemove zero length segments (2022-10-22 17:16:58)\nSort link order             (2022-10-22 17:16:58)\nGraph cleaning finished     (2022-10-22 17:16:58)\nSaving /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2022-10-22 17:16:58)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/227/working/spades_assembly/\n\n\nDetermining graph multiplicity (2022-10-22 17:16:58)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/227/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2022-10-22 17:16:59)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/227/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2022-10-22 17:16:59)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2022-10-22 17:16:59)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2022-10-22 17:16:59)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/227/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2022-10-22 17:16:59)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2022-10-22 17:16:59)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/227/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2022-10-22 17:16:59)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2022-10-22 17:17:13)\nSaving /galaxy/server/database/jobs_directory/000/227/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/227/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 minutes", "plugin": "core", "name": "runtime_seconds", "raw_value": "142.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:17:13", "plugin": "core", "name": "end_epoch", "raw_value": "1666459033.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:14:51", "plugin": "core", "name": "start_epoch", "raw_value": "1666458891.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler", "tool_version": "0.4.8.0", "test_index": 3, "time_seconds": 565.6741397380829, "inputs": {"paired_unpaired|fastq_input_selector": "none", "long": {"src": "hda", "id": "1b16b902c938e712"}, "min_anchor_seg_len": "10", "spades|kmers": "21,23"}, "job": {"model_class": "Job", "id": "8520428d564a9568", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:17:37.567596", "create_time": "2022-10-22T17:08:22.659168", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-vdtfx", "command_line": "ln -s '/galaxy/server/database/objects/9/6/8/dataset_968e4d5a-5a21-4456-b659-7ae4f2604c37.dat' 'lr.fasta' && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -l lr.fasta --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --min_anchor_seg_len '10'  --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmers '21,23' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0'  --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"false\"}", "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"21,23\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"false\"}", "min_anchor_seg_len": "\"10\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "paired_unpaired": "{\"__current_case__\": 3, \"fastq_input_selector\": \"none\"}"}, "inputs": {"long": {"id": "1b16b902c938e712", "src": "hda", "uuid": "968e4d5a-5a21-4456-b659-7ae4f2604c37"}}, "outputs": {"assembly": {"id": "bd5dae26f4aa2408", "src": "hda", "uuid": "1d88e2d0-5d0d-453f-9949-615cbfb60db6"}, "assembly_graph": {"id": "91f33c342f4239f5", "src": "hda", "uuid": "053b7dcf-052b-4d76-aba7-39e8852391eb"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2022-10-22 17:17:19)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only long reads, Unicycler will assemble the reads with miniasm and\nthen run repeated polishing rounds using Racon.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/229/working\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py                 not used                             \n  racon           1.4.20    good       /usr/local/bin/racon      \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nLoading reads (2022-10-22 17:17:19)\n\r0 / 40 (0.0%)\r1 / 40 (2.5%) - 412 bp\r2 / 40 (5.0%) - 4,847 bp\r3 / 40 (7.5%) - 8,974 bp\r4 / 40 (10.0%) - 13,249 bp\r5 / 40 (12.5%) - 14,258 bp\r6 / 40 (15.0%) - 14,806 bp\r7 / 40 (17.5%) - 19,262 bp\r8 / 40 (20.0%) - 19,737 bp\r9 / 40 (22.5%) - 20,395 bp\r10 / 40 (25.0%) - 32,024 bp\r11 / 40 (27.5%) - 32,698 bp\r12 / 40 (30.0%) - 34,509 bp\r13 / 40 (32.5%) - 39,018 bp\r14 / 40 (35.0%) - 43,351 bp\r15 / 40 (37.5%) - 44,224 bp\r16 / 40 (40.0%) - 45,978 bp\r17 / 40 (42.5%) - 46,402 bp\r18 / 40 (45.0%) - 61,596 bp\r19 / 40 (47.5%) - 62,279 bp\r20 / 40 (50.0%) - 63,700 bp\r21 / 40 (52.5%) - 66,412 bp\r22 / 40 (55.0%) - 66,845 bp\r23 / 40 (57.5%) - 67,316 bp\r24 / 40 (60.0%) - 69,428 bp\r25 / 40 (62.5%) - 73,964 bp\r26 / 40 (65.0%) - 75,608 bp\r27 / 40 (67.5%) - 80,223 bp\r28 / 40 (70.0%) - 84,810 bp\r29 / 40 (72.5%) - 92,076 bp\r30 / 40 (75.0%) - 92,832 bp\r31 / 40 (77.5%) - 92,939 bp\r32 / 40 (80.0%) - 93,532 bp\r33 / 40 (82.5%) - 96,370 bp\r34 / 40 (85.0%) - 100,656 bp\r35 / 40 (87.5%) - 119,222 bp\r36 / 40 (90.0%) - 123,827 bp\r37 / 40 (92.5%) - 155,106 bp\r38 / 40 (95.0%) - 156,254 bp\r39 / 40 (97.5%) - 157,993 bp\r40 / 40 (100.0%) - 162,406 bp\r40 / 40 (100.0%) - 162,406 bp\n\n\nAssembling contigs and long reads with miniasm (2022-10-22 17:17:19)\nSaving to /galaxy/server/database/jobs_directory/000/229/working/miniasm_assembly/01_assembly_reads.fastq:\n  40 long reads\n\nFinding overlaps with minimap... success\n  120 overlaps\n\nAssembling reads with miniasm... success\n  7 segments, 6 links\n\n    Unicycler removes any links from the string graph which create branches.\nI.e. if any segment has two or more links connected to one end, those links are\nremoved. This will result in a graph with only simple linear paths that is\nsuitable for creating unambiguous bridges.\n\nNo links needed removal\nSaving /galaxy/server/database/jobs_directory/000/229/working/miniasm_assembly/11_branching_paths_removed.gfa\nMerging segments into unitigs:\n\nLinear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-\n\n  1 linear unitig\n  total size = 5,836 bp\nSaving /galaxy/server/database/jobs_directory/000/229/working/miniasm_assembly/12_unitig_graph.gfa\nSaving /galaxy/server/database/jobs_directory/000/229/working/002_unitig_graph.gfa\n\n\nPolishing miniasm assembly with Racon (2022-10-22 17:17:20)\n    Unicycler now uses Racon to polish the miniasm assembly. It does multiple\nrounds of polishing to get the best consensus. Circular unitigs are rotated\nbetween rounds such that all parts (including the ends) are polished well.\n\nSaving to /galaxy/server/database/jobs_directory/000/229/working/miniasm_assembly/racon_polish/polishing_reads.fastq:\n  40 long reads\n\nPolish       Assembly          Mapping\nround            size          quality\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t210\t4010\t+\t1\t5836\t1061\t4603\t1147\t3800\t255\tcm:i:200\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t5836\t5221\t5833\t179\t612\t255\tcm:i:27\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t5836\t2376\t5833\t3457\t3457\t255\tcm:i:1153\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2525\t-\t1\t5836\t30\t2314\t787\t2399\t255\tcm:i:144\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t280\t4284\t-\t1\t5836\t4\t3936\t1481\t4004\t255\tcm:i:246\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4286\t-\t1\t5836\t4215\t5833\t546\t1618\t255\tcm:i:88\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t170\t4027\t+\t1\t5836\t1680\t5833\t1032\t4153\t255\tcm:i:174\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4082\t+\t1\t5836\t4\t1602\t220\t1598\t255\tcm:i:30\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1334\t4566\t-\t1\t5836\t2699\t5786\t1281\t3232\t255\tcm:i:243\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t5836\t50\t2663\t772\t2680\t255\tcm:i:129\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t5836\t2657\t5833\t1469\t3386\t255\tcm:i:268\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2786\t-\t1\t5836\t30\t2636\t905\t2689\t255\tcm:i:157\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t143\t4271\t-\t1\t5836\t338\t4254\t1834\t4128\t255\tcm:i:470\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3092\t4330\t-\t1\t5836\t4503\t5798\t430\t1295\t255\tcm:i:77\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t544\t4408\t-\t1\t5836\t69\t3927\t1208\t3864\t255\tcm:i:237\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3008\t4472\t-\t1\t5836\t4215\t5748\t351\t1533\t255\tcm:i:53\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t5836\t2909\t3222\t131\t313\t255\tcm:i:22\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t335\t4397\t+\t1\t5836\t1321\t5257\t1351\t4062\t255\tcm:i:280\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4349\t+\t1\t5836\t23\t961\t238\t938\t255\tcm:i:40\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t537\t+\t1\t5836\t5334\t5798\t154\t464\t255\tcm:i:26\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t111\t4359\t-\t1\t5836\t1673\t5798\t2062\t4248\t255\tcm:i:487\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t109\t1619\t-\t1\t5836\t30\t1525\t472\t1510\t255\tcm:i:68\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t5836\t1733\t5833\t1303\t4100\t255\tcm:i:230\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t5836\t4\t1690\t311\t1712\t255\tcm:i:43\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4205\t+\t1\t5836\t23\t3939\t1039\t3916\t255\tcm:i:166\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t296\t1782\t+\t1\t5836\t4242\t5798\t367\t1556\t255\tcm:i:63\nbegin           5,836             5.33\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6290\t1009\t5054\t2431\t4045\t255\tcm:i:529\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6290\t5670\t6287\t297\t617\t255\tcm:i:63\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6290\t4\t404\t122\t400\t255\tcm:i:19\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6290\t2540\t6287\t2249\t3747\t255\tcm:i:527\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6290\t51\t2474\t1276\t2423\t255\tcm:i:245\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6290\t4\t4316\t2322\t4312\t255\tcm:i:486\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6290\t4354\t6287\t943\t1933\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t116\t4027\t+\t1\t6290\t1774\t6287\t2145\t4513\t255\tcm:i:426\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6290\t4\t1741\t421\t1737\t255\tcm:i:61\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6290\t2854\t6226\t2257\t3372\t255\tcm:i:501\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6290\t51\t2831\t1459\t2780\t255\tcm:i:289\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6290\t2825\t6287\t2268\t3462\t255\tcm:i:513\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2745\t-\t1\t6290\t74\t2805\t1501\t2731\t255\tcm:i:289\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6290\t354\t4699\t2022\t4345\t255\tcm:i:377\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6290\t4984\t6271\t614\t1287\t255\tcm:i:117\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6290\t72\t4534\t1921\t4462\t255\tcm:i:337\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6290\t4597\t6206\t580\t1609\t255\tcm:i:103\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6290\t3083\t3386\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6290\t1126\t5708\t2368\t4582\t255\tcm:i:487\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4392\t+\t1\t6290\t23\t1039\t362\t1016\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t539\t+\t1\t6290\t5785\t6254\t217\t469\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6290\t1806\t6258\t2777\t4452\t255\tcm:i:600\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6290\t74\t1603\t761\t1529\t255\tcm:i:150\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t795\t+\t1\t6290\t5209\t5912\t149\t703\t255\tcm:i:24\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6290\t585\t1307\t155\t722\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t6290\t1886\t6287\t2070\t4401\t255\tcm:i:456\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6290\t4\t1838\t656\t1834\t255\tcm:i:109\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6290\t2060\t2358\t156\t298\t255\tcm:i:35\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6290\t23\t4436\t2106\t4413\t255\tcm:i:421\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6290\t4488\t6273\t744\t1785\t255\tcm:i:131\n1               6,290             7.82\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6242\t1016\t5009\t2460\t3993\t255\tcm:i:530\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6242\t5626\t6239\t283\t613\t255\tcm:i:61\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6242\t4\t408\t117\t404\t255\tcm:i:18\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6242\t2535\t6239\t2234\t3704\t255\tcm:i:514\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6242\t51\t2469\t1387\t2418\t255\tcm:i:271\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6242\t4\t4276\t2380\t4272\t255\tcm:i:494\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6242\t4314\t6239\t955\t1925\t255\tcm:i:196\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6242\t1759\t6239\t2194\t4480\t255\tcm:i:440\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6242\t4\t1735\t450\t1731\t255\tcm:i:67\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6242\t2848\t6178\t2284\t3330\t255\tcm:i:509\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6242\t51\t2825\t1504\t2774\t255\tcm:i:295\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6242\t2819\t6239\t2235\t3420\t255\tcm:i:510\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t109\t2745\t-\t1\t6242\t74\t2787\t1517\t2713\t255\tcm:i:304\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6242\t358\t4659\t2051\t4301\t255\tcm:i:391\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6242\t4939\t6223\t618\t1284\t255\tcm:i:114\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6242\t72\t4493\t1941\t4421\t255\tcm:i:345\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6242\t4556\t6158\t579\t1602\t255\tcm:i:105\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6242\t3077\t3380\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6242\t1133\t5664\t2405\t4531\t255\tcm:i:507\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6242\t23\t1051\t353\t1028\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6242\t5759\t6206\t204\t447\t255\tcm:i:40\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6242\t1799\t6210\t2749\t4411\t255\tcm:i:591\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6242\t74\t1601\t795\t1527\t255\tcm:i:165\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6242\t5166\t5916\t224\t750\t255\tcm:i:35\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t160\t847\t+\t1\t6242\t602\t1310\t144\t708\t255\tcm:i:16\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6242\t1908\t6239\t2061\t4331\t255\tcm:i:454\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6242\t4\t1831\t667\t1827\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6242\t2053\t2352\t157\t299\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6242\t23\t4395\t2130\t4372\t255\tcm:i:425\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6242\t4447\t6225\t762\t1778\t255\tcm:i:138\n2               6,242             8.02\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6265\t1028\t5025\t2436\t3997\t255\tcm:i:527\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6265\t5642\t6262\t281\t620\t255\tcm:i:59\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6265\t4\t408\t105\t404\t255\tcm:i:17\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6265\t2544\t6262\t2228\t3718\t255\tcm:i:507\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6265\t51\t2478\t1353\t2427\t255\tcm:i:260\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6265\t4\t4293\t2377\t4289\t255\tcm:i:492\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6265\t4331\t6262\t967\t1931\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6265\t1772\t6262\t2190\t4490\t255\tcm:i:436\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6265\t4\t1748\t448\t1744\t255\tcm:i:62\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6265\t2857\t6201\t2270\t3344\t255\tcm:i:503\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6265\t51\t2834\t1463\t2783\t255\tcm:i:284\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6265\t2828\t6262\t2251\t3434\t255\tcm:i:515\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t102\t2745\t-\t1\t6265\t74\t2804\t1511\t2730\t255\tcm:i:305\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6265\t358\t4676\t2063\t4318\t255\tcm:i:392\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4328\t-\t1\t6265\t4930\t6246\t623\t1316\t255\tcm:i:113\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6265\t72\t4510\t1987\t4438\t255\tcm:i:350\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6265\t4573\t6181\t569\t1608\t255\tcm:i:102\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6265\t3089\t3392\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6265\t1145\t5680\t2423\t4535\t255\tcm:i:509\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6265\t23\t1063\t337\t1040\t255\tcm:i:56\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6265\t5779\t6229\t223\t450\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6265\t1812\t6233\t2769\t4421\t255\tcm:i:601\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6265\t74\t1615\t764\t1541\t255\tcm:i:156\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6265\t5182\t5936\t236\t754\t255\tcm:i:36\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6265\t589\t1322\t155\t733\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6265\t1921\t6262\t2062\t4341\t255\tcm:i:449\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6265\t4\t1844\t660\t1840\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6265\t2063\t2361\t157\t298\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6265\t23\t4412\t2182\t4389\t255\tcm:i:436\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6265\t4464\t6248\t787\t1784\t255\tcm:i:141\n3               6,265             8.04\n\nBest polish: /galaxy/server/database/jobs_directory/000/229/working/miniasm_assembly/racon_polish/016_rotated.fasta\nSaving /galaxy/server/database/jobs_directory/000/229/working/miniasm_assembly/13_racon_polished.gfa\nSaving /galaxy/server/database/jobs_directory/000/229/working/003_racon_polished.gfa\n\n\nAssembly complete (2022-10-22 17:17:20)\nSaving /galaxy/server/database/jobs_directory/000/229/working/assembly.gfa\n\n", "tool_stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "job_stdout": "", "job_stderr": "", "stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "stdout": "\nStarting Unicycler (2022-10-22 17:17:19)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only long reads, Unicycler will assemble the reads with miniasm and\nthen run repeated polishing rounds using Racon.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/229/working\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py                 not used                             \n  racon           1.4.20    good       /usr/local/bin/racon      \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nLoading reads (2022-10-22 17:17:19)\n\r0 / 40 (0.0%)\r1 / 40 (2.5%) - 412 bp\r2 / 40 (5.0%) - 4,847 bp\r3 / 40 (7.5%) - 8,974 bp\r4 / 40 (10.0%) - 13,249 bp\r5 / 40 (12.5%) - 14,258 bp\r6 / 40 (15.0%) - 14,806 bp\r7 / 40 (17.5%) - 19,262 bp\r8 / 40 (20.0%) - 19,737 bp\r9 / 40 (22.5%) - 20,395 bp\r10 / 40 (25.0%) - 32,024 bp\r11 / 40 (27.5%) - 32,698 bp\r12 / 40 (30.0%) - 34,509 bp\r13 / 40 (32.5%) - 39,018 bp\r14 / 40 (35.0%) - 43,351 bp\r15 / 40 (37.5%) - 44,224 bp\r16 / 40 (40.0%) - 45,978 bp\r17 / 40 (42.5%) - 46,402 bp\r18 / 40 (45.0%) - 61,596 bp\r19 / 40 (47.5%) - 62,279 bp\r20 / 40 (50.0%) - 63,700 bp\r21 / 40 (52.5%) - 66,412 bp\r22 / 40 (55.0%) - 66,845 bp\r23 / 40 (57.5%) - 67,316 bp\r24 / 40 (60.0%) - 69,428 bp\r25 / 40 (62.5%) - 73,964 bp\r26 / 40 (65.0%) - 75,608 bp\r27 / 40 (67.5%) - 80,223 bp\r28 / 40 (70.0%) - 84,810 bp\r29 / 40 (72.5%) - 92,076 bp\r30 / 40 (75.0%) - 92,832 bp\r31 / 40 (77.5%) - 92,939 bp\r32 / 40 (80.0%) - 93,532 bp\r33 / 40 (82.5%) - 96,370 bp\r34 / 40 (85.0%) - 100,656 bp\r35 / 40 (87.5%) - 119,222 bp\r36 / 40 (90.0%) - 123,827 bp\r37 / 40 (92.5%) - 155,106 bp\r38 / 40 (95.0%) - 156,254 bp\r39 / 40 (97.5%) - 157,993 bp\r40 / 40 (100.0%) - 162,406 bp\r40 / 40 (100.0%) - 162,406 bp\n\n\nAssembling contigs and long reads with miniasm (2022-10-22 17:17:19)\nSaving to /galaxy/server/database/jobs_directory/000/229/working/miniasm_assembly/01_assembly_reads.fastq:\n  40 long reads\n\nFinding overlaps with minimap... success\n  120 overlaps\n\nAssembling reads with miniasm... success\n  7 segments, 6 links\n\n    Unicycler removes any links from the string graph which create branches.\nI.e. if any segment has two or more links connected to one end, those links are\nremoved. This will result in a graph with only simple linear paths that is\nsuitable for creating unambiguous bridges.\n\nNo links needed removal\nSaving /galaxy/server/database/jobs_directory/000/229/working/miniasm_assembly/11_branching_paths_removed.gfa\nMerging segments into unitigs:\n\nLinear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-\n\n  1 linear unitig\n  total size = 5,836 bp\nSaving /galaxy/server/database/jobs_directory/000/229/working/miniasm_assembly/12_unitig_graph.gfa\nSaving /galaxy/server/database/jobs_directory/000/229/working/002_unitig_graph.gfa\n\n\nPolishing miniasm assembly with Racon (2022-10-22 17:17:20)\n    Unicycler now uses Racon to polish the miniasm assembly. It does multiple\nrounds of polishing to get the best consensus. Circular unitigs are rotated\nbetween rounds such that all parts (including the ends) are polished well.\n\nSaving to /galaxy/server/database/jobs_directory/000/229/working/miniasm_assembly/racon_polish/polishing_reads.fastq:\n  40 long reads\n\nPolish       Assembly          Mapping\nround            size          quality\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t210\t4010\t+\t1\t5836\t1061\t4603\t1147\t3800\t255\tcm:i:200\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t5836\t5221\t5833\t179\t612\t255\tcm:i:27\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t5836\t2376\t5833\t3457\t3457\t255\tcm:i:1153\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2525\t-\t1\t5836\t30\t2314\t787\t2399\t255\tcm:i:144\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t280\t4284\t-\t1\t5836\t4\t3936\t1481\t4004\t255\tcm:i:246\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4286\t-\t1\t5836\t4215\t5833\t546\t1618\t255\tcm:i:88\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t170\t4027\t+\t1\t5836\t1680\t5833\t1032\t4153\t255\tcm:i:174\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4082\t+\t1\t5836\t4\t1602\t220\t1598\t255\tcm:i:30\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1334\t4566\t-\t1\t5836\t2699\t5786\t1281\t3232\t255\tcm:i:243\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t5836\t50\t2663\t772\t2680\t255\tcm:i:129\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t5836\t2657\t5833\t1469\t3386\t255\tcm:i:268\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2786\t-\t1\t5836\t30\t2636\t905\t2689\t255\tcm:i:157\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t143\t4271\t-\t1\t5836\t338\t4254\t1834\t4128\t255\tcm:i:470\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3092\t4330\t-\t1\t5836\t4503\t5798\t430\t1295\t255\tcm:i:77\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t544\t4408\t-\t1\t5836\t69\t3927\t1208\t3864\t255\tcm:i:237\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3008\t4472\t-\t1\t5836\t4215\t5748\t351\t1533\t255\tcm:i:53\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t5836\t2909\t3222\t131\t313\t255\tcm:i:22\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t335\t4397\t+\t1\t5836\t1321\t5257\t1351\t4062\t255\tcm:i:280\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4349\t+\t1\t5836\t23\t961\t238\t938\t255\tcm:i:40\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t537\t+\t1\t5836\t5334\t5798\t154\t464\t255\tcm:i:26\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t111\t4359\t-\t1\t5836\t1673\t5798\t2062\t4248\t255\tcm:i:487\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t109\t1619\t-\t1\t5836\t30\t1525\t472\t1510\t255\tcm:i:68\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t5836\t1733\t5833\t1303\t4100\t255\tcm:i:230\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t5836\t4\t1690\t311\t1712\t255\tcm:i:43\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4205\t+\t1\t5836\t23\t3939\t1039\t3916\t255\tcm:i:166\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t296\t1782\t+\t1\t5836\t4242\t5798\t367\t1556\t255\tcm:i:63\nbegin           5,836             5.33\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6290\t1009\t5054\t2431\t4045\t255\tcm:i:529\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6290\t5670\t6287\t297\t617\t255\tcm:i:63\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6290\t4\t404\t122\t400\t255\tcm:i:19\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6290\t2540\t6287\t2249\t3747\t255\tcm:i:527\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6290\t51\t2474\t1276\t2423\t255\tcm:i:245\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6290\t4\t4316\t2322\t4312\t255\tcm:i:486\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6290\t4354\t6287\t943\t1933\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t116\t4027\t+\t1\t6290\t1774\t6287\t2145\t4513\t255\tcm:i:426\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6290\t4\t1741\t421\t1737\t255\tcm:i:61\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6290\t2854\t6226\t2257\t3372\t255\tcm:i:501\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6290\t51\t2831\t1459\t2780\t255\tcm:i:289\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6290\t2825\t6287\t2268\t3462\t255\tcm:i:513\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2745\t-\t1\t6290\t74\t2805\t1501\t2731\t255\tcm:i:289\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6290\t354\t4699\t2022\t4345\t255\tcm:i:377\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6290\t4984\t6271\t614\t1287\t255\tcm:i:117\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6290\t72\t4534\t1921\t4462\t255\tcm:i:337\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6290\t4597\t6206\t580\t1609\t255\tcm:i:103\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6290\t3083\t3386\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6290\t1126\t5708\t2368\t4582\t255\tcm:i:487\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4392\t+\t1\t6290\t23\t1039\t362\t1016\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t539\t+\t1\t6290\t5785\t6254\t217\t469\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6290\t1806\t6258\t2777\t4452\t255\tcm:i:600\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6290\t74\t1603\t761\t1529\t255\tcm:i:150\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t795\t+\t1\t6290\t5209\t5912\t149\t703\t255\tcm:i:24\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6290\t585\t1307\t155\t722\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t6290\t1886\t6287\t2070\t4401\t255\tcm:i:456\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6290\t4\t1838\t656\t1834\t255\tcm:i:109\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6290\t2060\t2358\t156\t298\t255\tcm:i:35\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6290\t23\t4436\t2106\t4413\t255\tcm:i:421\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6290\t4488\t6273\t744\t1785\t255\tcm:i:131\n1               6,290             7.82\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6242\t1016\t5009\t2460\t3993\t255\tcm:i:530\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6242\t5626\t6239\t283\t613\t255\tcm:i:61\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6242\t4\t408\t117\t404\t255\tcm:i:18\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6242\t2535\t6239\t2234\t3704\t255\tcm:i:514\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6242\t51\t2469\t1387\t2418\t255\tcm:i:271\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6242\t4\t4276\t2380\t4272\t255\tcm:i:494\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6242\t4314\t6239\t955\t1925\t255\tcm:i:196\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6242\t1759\t6239\t2194\t4480\t255\tcm:i:440\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6242\t4\t1735\t450\t1731\t255\tcm:i:67\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6242\t2848\t6178\t2284\t3330\t255\tcm:i:509\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6242\t51\t2825\t1504\t2774\t255\tcm:i:295\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6242\t2819\t6239\t2235\t3420\t255\tcm:i:510\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t109\t2745\t-\t1\t6242\t74\t2787\t1517\t2713\t255\tcm:i:304\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6242\t358\t4659\t2051\t4301\t255\tcm:i:391\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6242\t4939\t6223\t618\t1284\t255\tcm:i:114\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6242\t72\t4493\t1941\t4421\t255\tcm:i:345\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6242\t4556\t6158\t579\t1602\t255\tcm:i:105\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6242\t3077\t3380\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6242\t1133\t5664\t2405\t4531\t255\tcm:i:507\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6242\t23\t1051\t353\t1028\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6242\t5759\t6206\t204\t447\t255\tcm:i:40\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6242\t1799\t6210\t2749\t4411\t255\tcm:i:591\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6242\t74\t1601\t795\t1527\t255\tcm:i:165\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6242\t5166\t5916\t224\t750\t255\tcm:i:35\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t160\t847\t+\t1\t6242\t602\t1310\t144\t708\t255\tcm:i:16\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6242\t1908\t6239\t2061\t4331\t255\tcm:i:454\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6242\t4\t1831\t667\t1827\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6242\t2053\t2352\t157\t299\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6242\t23\t4395\t2130\t4372\t255\tcm:i:425\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6242\t4447\t6225\t762\t1778\t255\tcm:i:138\n2               6,242             8.02\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6265\t1028\t5025\t2436\t3997\t255\tcm:i:527\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6265\t5642\t6262\t281\t620\t255\tcm:i:59\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6265\t4\t408\t105\t404\t255\tcm:i:17\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6265\t2544\t6262\t2228\t3718\t255\tcm:i:507\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6265\t51\t2478\t1353\t2427\t255\tcm:i:260\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6265\t4\t4293\t2377\t4289\t255\tcm:i:492\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6265\t4331\t6262\t967\t1931\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6265\t1772\t6262\t2190\t4490\t255\tcm:i:436\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6265\t4\t1748\t448\t1744\t255\tcm:i:62\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6265\t2857\t6201\t2270\t3344\t255\tcm:i:503\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6265\t51\t2834\t1463\t2783\t255\tcm:i:284\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6265\t2828\t6262\t2251\t3434\t255\tcm:i:515\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t102\t2745\t-\t1\t6265\t74\t2804\t1511\t2730\t255\tcm:i:305\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6265\t358\t4676\t2063\t4318\t255\tcm:i:392\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4328\t-\t1\t6265\t4930\t6246\t623\t1316\t255\tcm:i:113\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6265\t72\t4510\t1987\t4438\t255\tcm:i:350\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6265\t4573\t6181\t569\t1608\t255\tcm:i:102\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6265\t3089\t3392\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6265\t1145\t5680\t2423\t4535\t255\tcm:i:509\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6265\t23\t1063\t337\t1040\t255\tcm:i:56\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6265\t5779\t6229\t223\t450\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6265\t1812\t6233\t2769\t4421\t255\tcm:i:601\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6265\t74\t1615\t764\t1541\t255\tcm:i:156\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6265\t5182\t5936\t236\t754\t255\tcm:i:36\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6265\t589\t1322\t155\t733\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6265\t1921\t6262\t2062\t4341\t255\tcm:i:449\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6265\t4\t1844\t660\t1840\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6265\t2063\t2361\t157\t298\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6265\t23\t4412\t2182\t4389\t255\tcm:i:436\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6265\t4464\t6248\t787\t1784\t255\tcm:i:141\n3               6,265             8.04\n\nBest polish: /galaxy/server/database/jobs_directory/000/229/working/miniasm_assembly/racon_polish/016_rotated.fasta\nSaving /galaxy/server/database/jobs_directory/000/229/working/miniasm_assembly/13_racon_polished.gfa\nSaving /galaxy/server/database/jobs_directory/000/229/working/003_racon_polished.gfa\n\n\nAssembly complete (2022-10-22 17:17:20)\nSaving /galaxy/server/database/jobs_directory/000/229/working/assembly.gfa\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:17:20", "plugin": "core", "name": "end_epoch", "raw_value": "1666459040.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:17:19", "plugin": "core", "name": "start_epoch", "raw_value": "1666459039.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_FPKM_count/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_FPKM_count", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 113.72314643859863, "inputs": {"input": {"src": "hda", "id": "2d705b74654c7487"}, "refgene": {"src": "hda", "id": "2e0a1ee1abec981b"}}, "job": {"model_class": "Job", "id": "b52b68a8def44fff", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:39:35.839887", "create_time": "2022-10-22T16:38:03.041792", "galaxy_version": "21.09", "command_version": "FPKM_count.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_FPKM_count/2.6.4.1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-74drb", "command_line": "ln -sf '/galaxy/server/database/objects/2/3/c/dataset_23c2c4d9-d834-40ba-8323-3f79ccd2cf22.dat' 'local_input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/b/2/3/metadata_b237b8b0-2540-4f16-9529-ffbe6834a77d.dat' 'local_input.bam.bai' && FPKM_count.py -i 'local_input.bam' -o output -r '/galaxy/server/database/objects/e/3/1/dataset_e311fd83-8c53-43df-ba75-ffb6164674a0.dat'          --single-read=\"1\"", "traceback": null, "params": {"strand_type": "{\"__current_case__\": 2, \"strand_specific\": \"none\"}", "multihits_type": "{\"__current_case__\": 1, \"multihits_type_selector\": \"use_multihits\"}", "onlyexonic": "\"false\"", "singleread": "\"1\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"auto\""}, "inputs": {"refgene": {"id": "2e0a1ee1abec981b", "src": "hda", "uuid": "e311fd83-8c53-43df-ba75-ffb6164674a0"}, "input": {"id": "2d705b74654c7487", "src": "hda", "uuid": "23c2c4d9-d834-40ba-8323-3f79ccd2cf22"}}, "outputs": {"outputxls": {"id": "17a98530c95ab840", "src": "hda", "uuid": "304d4d93-a9b9-4645-a085-4a756e30730f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Extract exon regions from  /galaxy/server/database/objects/e/3/1/dataset_e311fd83-8c53-43df-ba75-ffb6164674a0.dat...\nCounting total fragment ...  Done\nTotal fragment = 20.0                \nTotal exonic fragment = 2.0                 \n 1 transcripts finished\r 2 transcripts finished\r 3 transcripts finished\r 4 transcripts finished\r 5 transcripts finished\r 6 transcripts finished\r 7 transcripts finished\r", "job_stdout": "", "job_stderr": "", "stderr": "Extract exon regions from  /galaxy/server/database/objects/e/3/1/dataset_e311fd83-8c53-43df-ba75-ffb6164674a0.dat...\nCounting total fragment ...  Done\nTotal fragment = 20.0                \nTotal exonic fragment = 2.0                 \n 1 transcripts finished\r 2 transcripts finished\r 3 transcripts finished\r 4 transcripts finished\r 5 transcripts finished\r 6 transcripts finished\r 7 transcripts finished\r", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:39:26", "plugin": "core", "name": "start_epoch", "raw_value": "1666456766.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:39:26", "plugin": "core", "name": "end_epoch", "raw_value": "1666456766.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RNA_fragment_size/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RNA_fragment_size", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 109.39078974723816, "inputs": {"input": {"src": "hda", "id": "9198c68fc5d261d7"}, "refgene": {"src": "hda", "id": "2e0ed09c94d961bb"}}, "job": {"model_class": "Job", "id": "ecf72c2fe534b462", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:41:41.894608", "create_time": "2022-10-22T16:40:13.449253", "galaxy_version": "21.09", "command_version": "RNA_fragment_size.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RNA_fragment_size/2.6.4.1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-lkrqp", "command_line": "ln -sf '/galaxy/server/database/objects/f/4/0/dataset_f4038d98-d8f0-4499-874b-bb45118b2a34.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/3/7/b/metadata_37bf15de-7244-4a6d-bae0-db49aa2551e0.dat' 'input.bam.bai' && RNA_fragment_size.py -i 'input.bam' --refgene='/galaxy/server/database/objects/e/c/e/dataset_ece8bfbd-0a84-4df7-bf5b-ccefc74bb9a9.dat' --mapq=30 --frag-num=3 > '/galaxy/server/database/objects/8/e/b/dataset_8eb81119-37b7-48da-a688-3af1413531e3.dat'", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "fragnum": "\"3\"", "mapq": "\"30\""}, "inputs": {"input": {"id": "9198c68fc5d261d7", "src": "hda", "uuid": "f4038d98-d8f0-4499-874b-bb45118b2a34"}, "refgene": {"id": "2e0ed09c94d961bb", "src": "hda", "uuid": "ece8bfbd-0a84-4df7-bf5b-ccefc74bb9a9"}}, "outputs": {"output": {"id": "96383855032d5021", "src": "hda", "uuid": "8eb81119-37b7-48da-a688-3af1413531e3"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:41:27", "plugin": "core", "name": "end_epoch", "raw_value": "1666456887.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:41:27", "plugin": "core", "name": "start_epoch", "raw_value": "1666456887.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RPKM_saturation/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RPKM_saturation", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 123.33925795555115, "inputs": {"input": {"src": "hda", "id": "9353a8fe964e666e"}, "refgene": {"src": "hda", "id": "8f0bb9d7855c0624"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "f04c784c25a34a26", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:41:38.705767", "create_time": "2022-10-22T16:39:56.723726", "galaxy_version": "21.09", "command_version": "RPKM_saturation.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_RPKM_saturation/2.6.4.1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-kktpz", "command_line": "RPKM_saturation.py -i '/galaxy/server/database/objects/5/d/f/dataset_5df6a2bb-7724-486e-8584-d731f6acc937.dat' -o output -r '/galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat'    -l 5 -u 100 -s 5 -c 0.01", "traceback": null, "params": {"strand_type": "{\"__current_case__\": 2, \"strand_specific\": \"none\"}", "percentileFloor": "\"5\"", "percentileCeiling": "\"100\"", "percentileStep": "\"5\"", "rpkmCutoff": "\"0.01\"", "mapq": "\"30\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bam\""}, "inputs": {"input": {"id": "9353a8fe964e666e", "src": "hda", "uuid": "5df6a2bb-7724-486e-8584-d731f6acc937"}, "refgene": {"id": "0c2fef3a2ab24620", "src": "hda", "uuid": "1ccc214e-cf03-4d5d-abcd-a86e3f889d4e"}}, "outputs": {"outputpdf": {"id": "51e5d6c21701936e", "src": "hda", "uuid": "6519f76b-632b-42ef-9b0a-e0026079bf5a"}, "outputxls": {"id": "ad5ede50edad413b", "src": "hda", "uuid": "f05e0b9d-d01b-4aed-b8ef-283741a2fe07"}, "outputrawxls": {"id": "e442f359ebfebd74", "src": "hda", "uuid": "7c4cb8e7-8527-4cde-a0b7-b887afec794f"}, "outputr": {"id": "61c9d5e0a87b8aee", "src": "hda", "uuid": "d86b4ab6-338e-470c-b277-822d5df155f6"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Load BAM file ...  Done\nshuffling alignments ... Done\nsampling 5% (245) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 10% (491) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 15% (737) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 20% (983) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 25% (1229) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 30% (1474) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 35% (1720) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 40% (1966) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 45% (2212) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 50% (2458) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 55% (2703) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 60% (2949) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 65% (3195) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 70% (3441) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 75% (3687) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 80% (3932) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 85% (4178) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 90% (4424) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 95% (4670) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 100% (4916) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\n", "job_stdout": "", "job_stderr": "", "stderr": "Load BAM file ...  Done\nshuffling alignments ... Done\nsampling 5% (245) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 10% (491) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 15% (737) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 20% (983) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 25% (1229) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 30% (1474) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 35% (1720) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 40% (1966) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 45% (2212) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 50% (2458) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 55% (2703) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 60% (2949) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 65% (3195) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 70% (3441) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 75% (3687) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 80% (3932) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 85% (4178) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 90% (4424) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 95% (4670) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\nsampling 100% (4916) fragments ...\nassign reads to transcripts in /galaxy/server/database/objects/1/c/c/dataset_1ccc214e-cf03-4d5d-abcd-a86e3f889d4e.dat ...\n\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:41:25", "plugin": "core", "name": "end_epoch", "raw_value": "1666456885.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:41:24", "plugin": "core", "name": "start_epoch", "raw_value": "1666456884.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 95.98204350471497, "inputs": {"input": {"src": "hda", "id": "3201bc80ed22451b"}, "chromsize": {"src": "hda", "id": "73ce94ed840ebce9"}}, "job": {"model_class": "Job", "id": "0310ad036ac773f7", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:47:09.965830", "create_time": "2022-10-22T16:45:46.536735", "galaxy_version": "21.09", "command_version": "bam2wig.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-l4whh", "command_line": "ln -sf '/galaxy/server/database/objects/c/d/e/dataset_cde637d3-98c6-4f83-8e2f-f8f47f75b385.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/e/9/a/metadata_e9a4bf4e-8827-4554-aa4f-ee0fbc600a7c.dat' 'input.bam.bai' && bam2wig.py -i 'input.bam' -s '/galaxy/server/database/objects/a/8/8/dataset_a88ed499-1f6f-4610-868f-894c7b079035.dat' -o outfile", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strand_type": "{\"__current_case__\": 2, \"strand_specific\": \"none\"}", "wigsum_type": "{\"__current_case__\": 1, \"wigsum_type_selector\": \"raw\"}", "multihits_type": "{\"__current_case__\": 1, \"multihits_type_selector\": \"use_multihits\"}"}, "inputs": {"chromsize": {"id": "73ce94ed840ebce9", "src": "hda", "uuid": "a88ed499-1f6f-4610-868f-894c7b079035"}, "input": {"id": "3201bc80ed22451b", "src": "hda", "uuid": "cde637d3-98c6-4f83-8e2f-f8f47f75b385"}}, "outputs": {"output": {"id": "4ff81fc8340a71d9", "src": "hda", "uuid": "50b59a98-4fbe-4ea9-96b7-7c3bccfb3a61"}}, "output_collections": {}, "tool_stdout": "Skip multi-hits:False\nRun wigToBigWig outfile.wig /galaxy/server/database/objects/a/8/8/dataset_a88ed499-1f6f-4610-868f-894c7b079035.dat outfile.bw \n", "tool_stderr": "No alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n", "job_stdout": "", "job_stderr": "", "stderr": "No alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n", "stdout": "Skip multi-hits:False\nRun wigToBigWig outfile.wig /galaxy/server/database/objects/a/8/8/dataset_a88ed499-1f6f-4610-868f-894c7b079035.dat outfile.bw \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}, {"title": "Memory Allocated (MB)", "value": "4000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4000.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:46:54", "plugin": "core", "name": "start_epoch", "raw_value": "1666457214.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:46:54", "plugin": "core", "name": "end_epoch", "raw_value": "1666457214.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig", "tool_version": "2.6.4", "test_index": 1, "time_seconds": 110.92820453643799, "inputs": {"input": {"src": "hda", "id": "ff1242f704c1d50c"}, "chromsize": {"src": "hda", "id": "829bb0463fc48691"}, "multihits_type|mapq": "20", "multihits_type|multihits_type_selector": "skip_multihits"}, "job": {"model_class": "Job", "id": "9fcfab36bba1d9f5", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:48:40.710211", "create_time": "2022-10-22T16:47:07.992347", "galaxy_version": "21.09", "command_version": "bam2wig.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-2sc67", "command_line": "ln -sf '/galaxy/server/database/objects/7/2/f/dataset_72f8606a-01b7-483a-96c6-3f2957d43e14.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/a/d/c/metadata_adcfcc59-7faf-472f-9384-8e846506a62e.dat' 'input.bam.bai' && bam2wig.py -i 'input.bam' -s '/galaxy/server/database/objects/6/f/f/dataset_6ff86df8-930c-46fe-a960-289df0d5844e.dat' -o outfile       --skip-multi-hits --mapq=20", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strand_type": "{\"__current_case__\": 2, \"strand_specific\": \"none\"}", "wigsum_type": "{\"__current_case__\": 1, \"wigsum_type_selector\": \"raw\"}", "multihits_type": "{\"__current_case__\": 0, \"mapq\": \"20\", \"multihits_type_selector\": \"skip_multihits\"}"}, "inputs": {"input": {"id": "ff1242f704c1d50c", "src": "hda", "uuid": "72f8606a-01b7-483a-96c6-3f2957d43e14"}, "chromsize": {"id": "829bb0463fc48691", "src": "hda", "uuid": "6ff86df8-930c-46fe-a960-289df0d5844e"}}, "outputs": {"output": {"id": "b6093b17ae5c3fce", "src": "hda", "uuid": "f75d76b6-22aa-430f-a30d-e036e3319416"}}, "output_collections": {}, "tool_stdout": "Skip multi-hits:True\nRun wigToBigWig outfile.wig /galaxy/server/database/objects/6/f/f/dataset_6ff86df8-930c-46fe-a960-289df0d5844e.dat outfile.bw \n", "tool_stderr": "No alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n", "job_stdout": "", "job_stderr": "", "stderr": "No alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n", "stdout": "Skip multi-hits:True\nRun wigToBigWig outfile.wig /galaxy/server/database/objects/6/f/f/dataset_6ff86df8-930c-46fe-a960-289df0d5844e.dat outfile.bw \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:48:31", "plugin": "core", "name": "end_epoch", "raw_value": "1666457311.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:48:31", "plugin": "core", "name": "start_epoch", "raw_value": "1666457311.0000000"}, {"title": "Memory Allocated (MB)", "value": "4000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4000.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig", "tool_version": "2.6.4", "test_index": 2, "time_seconds": 126.36255407333374, "inputs": {"input": {"src": "hda", "id": "a916ed1e1503fda1"}, "chromsize": {"src": "hda", "id": "3dcf26485bd65c6e"}, "strand_type|pair_type": "sd", "strand_type|strand_specific": "pair"}, "job": {"model_class": "Job", "id": "81d653ed45cd27e5", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:49:02.777037", "create_time": "2022-10-22T16:47:22.868114", "galaxy_version": "21.09", "command_version": "bam2wig.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-kcc2h", "command_line": "ln -sf '/galaxy/server/database/objects/a/4/3/dataset_a432438e-e459-4f18-a75c-9618de8a3736.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/f/b/9/metadata_fb9e41b9-c4e2-4277-b8d1-2166e056be81.dat' 'input.bam.bai' && bam2wig.py -i 'input.bam' -s '/galaxy/server/database/objects/9/3/c/dataset_93c735f4-7f1b-483c-b8e5-43ae9a350f25.dat' -o outfile  -d '1++,1--,2+-,2-+'", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strand_type": "{\"__current_case__\": 0, \"pair_type\": \"sd\", \"strand_specific\": \"pair\"}", "wigsum_type": "{\"__current_case__\": 1, \"wigsum_type_selector\": \"raw\"}", "multihits_type": "{\"__current_case__\": 1, \"multihits_type_selector\": \"use_multihits\"}"}, "inputs": {"input": {"id": "a916ed1e1503fda1", "src": "hda", "uuid": "a432438e-e459-4f18-a75c-9618de8a3736"}, "chromsize": {"id": "3dcf26485bd65c6e", "src": "hda", "uuid": "93c735f4-7f1b-483c-b8e5-43ae9a350f25"}}, "outputs": {"outputfwd": {"id": "54f53ddd4bf12efe", "src": "hda", "uuid": "f12c127d-66aa-4dc0-8e22-4548feb5c9da"}, "outputrv": {"id": "28262b517724fe65", "src": "hda", "uuid": "08893169-e754-4544-9683-113274f891cf"}}, "output_collections": {}, "tool_stdout": "Skip multi-hits:False\n", "tool_stderr": "No alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n/bin/sh: wigToBigWig: not found\n", "job_stdout": "", "job_stderr": "", "stderr": "No alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n/bin/sh: wigToBigWig: not found\n", "stdout": "Skip multi-hits:False\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:48:46", "plugin": "core", "name": "end_epoch", "raw_value": "1666457326.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:48:46", "plugin": "core", "name": "start_epoch", "raw_value": "1666457326.0000000"}, {"title": "Memory Allocated (MB)", "value": "4000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4000.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig", "tool_version": "2.6.4", "test_index": 3, "time_seconds": 98.23353862762451, "inputs": {"input": {"src": "hda", "id": "a916ed1e1503fda1"}, "chromsize": {"src": "hda", "id": "3dcf26485bd65c6e"}, "wigsum_type|totalwig": "100", "wigsum_type|wigsum_type_selector": "normalize"}, "job": {"model_class": "Job", "id": "06d0bd5be7ab2d74", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:48:48.278129", "create_time": "2022-10-22T16:47:28.339431", "galaxy_version": "21.09", "command_version": "bam2wig.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam2wig/2.6.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-xpqv8", "command_line": "ln -sf '/galaxy/server/database/objects/a/4/3/dataset_a432438e-e459-4f18-a75c-9618de8a3736.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/f/b/9/metadata_fb9e41b9-c4e2-4277-b8d1-2166e056be81.dat' 'input.bam.bai' && bam2wig.py -i 'input.bam' -s '/galaxy/server/database/objects/9/3/c/dataset_93c735f4-7f1b-483c-b8e5-43ae9a350f25.dat' -o outfile    -t 100", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strand_type": "{\"__current_case__\": 2, \"strand_specific\": \"none\"}", "wigsum_type": "{\"__current_case__\": 0, \"totalwig\": \"100\", \"wigsum_type_selector\": \"normalize\"}", "multihits_type": "{\"__current_case__\": 1, \"multihits_type_selector\": \"use_multihits\"}"}, "inputs": {"input": {"id": "a916ed1e1503fda1", "src": "hda", "uuid": "a432438e-e459-4f18-a75c-9618de8a3736"}, "chromsize": {"id": "3dcf26485bd65c6e", "src": "hda", "uuid": "93c735f4-7f1b-483c-b8e5-43ae9a350f25"}}, "outputs": {"output": {"id": "1d5dd50f7dda9dd3", "src": "hda", "uuid": "eb83cf7e-092d-4290-8896-f190ef708d71"}}, "output_collections": {}, "tool_stdout": "Skip multi-hits:False\nRun wigToBigWig outfile.wig /galaxy/server/database/objects/9/3/c/dataset_93c735f4-7f1b-483c-b8e5-43ae9a350f25.dat outfile.bw \n", "tool_stderr": "Calcualte wigsum ... \nNo alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n\n\ntotal wigsum is:1960.0\n\nNo alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n", "job_stdout": "", "job_stderr": "", "stderr": "Calcualte wigsum ... \nNo alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n\n\ntotal wigsum is:1960.0\n\nNo alignments for chr19_gl000208_random. skipped\nNo alignments for chr21_gl000210_random. skipped\nNo alignments for chr6_apd_hap1. skipped\nProcessing chr13 ...\nProcessing chr12 ...\nProcessing chr11 ...\nProcessing chr10 ...\nProcessing chr17 ...\nProcessing chr16 ...\nProcessing chr15 ...\nProcessing chr14 ...\nProcessing chr19 ...\nProcessing chr18 ...\nNo alignments for chr9_gl000198_random. skipped\nNo alignments for chrUn_gl000239. skipped\nNo alignments for chrUn_gl000238. skipped\nNo alignments for chrUn_gl000233. skipped\nNo alignments for chrUn_gl000232. skipped\nNo alignments for chrUn_gl000231. skipped\nNo alignments for chrUn_gl000230. skipped\nNo alignments for chrUn_gl000237. skipped\nNo alignments for chrUn_gl000236. skipped\nNo alignments for chrUn_gl000235. skipped\nNo alignments for chrUn_gl000234. skipped\nNo alignments for chr6_qbl_hap6. skipped\nNo alignments for chr11_gl000202_random. skipped\nNo alignments for chr17_gl000206_random. skipped\nNo alignments for chr6_cox_hap2. skipped\nNo alignments for chr4_gl000193_random. skipped\nNo alignments for chrUn_gl000248. skipped\nNo alignments for chrUn_gl000249. skipped\nNo alignments for chrUn_gl000246. skipped\nNo alignments for chrUn_gl000247. skipped\nNo alignments for chrUn_gl000244. skipped\nNo alignments for chrUn_gl000245. skipped\nNo alignments for chrUn_gl000242. skipped\nNo alignments for chrUn_gl000243. skipped\nNo alignments for chrUn_gl000240. skipped\nNo alignments for chrUn_gl000241. skipped\nNo alignments for chr17_gl000204_random. skipped\nNo alignments for chr17_ctg5_hap1. skipped\nNo alignments for chr17_gl000205_random. skipped\nNo alignments for chr9_gl000199_random. skipped\nNo alignments for chr9_gl000201_random. skipped\nProcessing chr8 ...\nNo alignments for chr6_ssto_hap7. skipped\nNo alignments for chr8_gl000197_random. skipped\nNo alignments for chr6_dbb_hap3. skipped\nNo alignments for chr7_gl000195_random. skipped\nNo alignments for chr1_gl000191_random. skipped\nNo alignments for chr4_ctg9_hap1. skipped\nProcessing chr3 ...\nNo alignments for chrUn_gl000229. skipped\nProcessing chr1 ...\nNo alignments for chr17_gl000203_random. skipped\nNo alignments for chr4_gl000194_random. skipped\nProcessing chrY ...\nProcessing chrX ...\nNo alignments for chr9_gl000200_random. skipped\nProcessing chr9 ...\nProcessing chrM ...\nNo alignments for chr8_gl000196_random. skipped\nNo alignments for chr6_mann_hap4. skipped\nNo alignments for chrUn_gl000211. skipped\nNo alignments for chrUn_gl000213. skipped\nNo alignments for chrUn_gl000212. skipped\nNo alignments for chrUn_gl000215. skipped\nNo alignments for chrUn_gl000214. skipped\nNo alignments for chrUn_gl000217. skipped\nNo alignments for chrUn_gl000216. skipped\nNo alignments for chrUn_gl000219. skipped\nNo alignments for chrUn_gl000218. skipped\nNo alignments for chr19_gl000209_random. skipped\nProcessing chr22 ...\nProcessing chr20 ...\nProcessing chr21 ...\nNo alignments for chr6_mcf_hap5. skipped\nProcessing chr7 ...\nProcessing chr6 ...\nProcessing chr5 ...\nProcessing chr4 ...\nNo alignments for chrUn_gl000228. skipped\nProcessing chr2 ...\nNo alignments for chr1_gl000192_random. skipped\nNo alignments for chrUn_gl000224. skipped\nNo alignments for chrUn_gl000225. skipped\nNo alignments for chrUn_gl000226. skipped\nNo alignments for chrUn_gl000227. skipped\nNo alignments for chrUn_gl000220. skipped\nNo alignments for chrUn_gl000221. skipped\nNo alignments for chrUn_gl000222. skipped\nNo alignments for chrUn_gl000223. skipped\nNo alignments for chr18_gl000207_random. skipped\n/bin/sh: wigToBigWig: not found\n", "stdout": "Skip multi-hits:False\nRun wigToBigWig outfile.wig /galaxy/server/database/objects/9/3/c/dataset_93c735f4-7f1b-483c-b8e5-43ae9a350f25.dat outfile.bw \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:48:38", "plugin": "core", "name": "end_epoch", "raw_value": "1666457318.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:48:38", "plugin": "core", "name": "start_epoch", "raw_value": "1666457318.0000000"}, {"title": "Memory Allocated (MB)", "value": "4000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4000.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam_stat/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam_stat", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 100.89961171150208, "inputs": {"input": {"src": "hda", "id": "a916ed1e1503fda1"}}, "job": {"model_class": "Job", "id": "0f2ee5daebb7f4d1", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:48:55.189771", "create_time": "2022-10-22T16:47:30.121266", "galaxy_version": "21.09", "command_version": "bam_stat.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_bam_stat/2.6.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-f788n", "command_line": "bam_stat.py -i '/galaxy/server/database/objects/a/4/3/dataset_a432438e-e459-4f18-a75c-9618de8a3736.dat' -q 30 > '/galaxy/server/database/objects/1/b/0/dataset_1b07f0bc-ade8-4a84-953e-5cbcaed79568.dat'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "mapq": "\"30\""}, "inputs": {"input": {"id": "a916ed1e1503fda1", "src": "hda", "uuid": "a432438e-e459-4f18-a75c-9618de8a3736"}}, "outputs": {"output": {"id": "8cd14a2de529d283", "src": "hda", "uuid": "1b07f0bc-ade8-4a84-953e-5cbcaed79568"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Load BAM file ...  Done\n", "stderr": "\nLoad BAM file ...  Done\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:48:41", "plugin": "core", "name": "end_epoch", "raw_value": "1666457321.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:48:41", "plugin": "core", "name": "start_epoch", "raw_value": "1666457321.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 137.5660126209259, "inputs": {"input": {"src": "hda", "id": "8719d0548dfb0e09"}}, "job": {"model_class": "Job", "id": "64c4e6a4e521a7bf", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:37:42.383258", "create_time": "2022-10-22T16:35:45.021869", "galaxy_version": "21.09", "command_version": "clipping_profile.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile/2.6.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-c7xlc", "command_line": "clipping_profile.py -i '/galaxy/server/database/objects/e/8/9/dataset_e89ec7eb-d2d6-4686-9e5c-8bc1ccd59905.dat' -o output -q 30 -s \"SE\"", "traceback": null, "params": {"mapq": "\"30\"", "layout": "\"SE\"", "rscript_output": "\"false\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bam\""}, "inputs": {"input": {"id": "8719d0548dfb0e09", "src": "hda", "uuid": "e89ec7eb-d2d6-4686-9e5c-8bc1ccd59905"}}, "outputs": {"outputpdf": {"id": "d28ded9d637f6d1e", "src": "hda", "uuid": "7ad59de9-541e-4d84-b0f2-e0ea100f5b14"}, "outputxls": {"id": "2b346b22c14a1f38", "src": "hda", "uuid": "553c2b41-6695-43ee-8e59-e9ed4a35c697"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Load BAM file ...  Done\nTotoal reads used: 40\n", "job_stdout": "", "job_stderr": "", "stderr": "Load BAM file ...  Done\nTotoal reads used: 40\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:37:16", "plugin": "core", "name": "end_epoch", "raw_value": "1666456636.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:37:16", "plugin": "core", "name": "start_epoch", "raw_value": "1666456636.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile/2.6.4-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile", "tool_version": "2.6.4", "test_index": 1, "time_seconds": 112.69784116744995, "inputs": {"input": {"src": "hda", "id": "2d705b74654c7487"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "82d76993aec094db", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:39:34.032049", "create_time": "2022-10-22T16:38:01.957045", "galaxy_version": "21.09", "command_version": "clipping_profile.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_clipping_profile/2.6.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-vqqw8", "command_line": "clipping_profile.py -i '/galaxy/server/database/objects/2/3/c/dataset_23c2c4d9-d834-40ba-8323-3f79ccd2cf22.dat' -o output -q 30 -s \"SE\"", "traceback": null, "params": {"mapq": "\"30\"", "layout": "\"SE\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"auto\""}, "inputs": {"input": {"id": "2d705b74654c7487", "src": "hda", "uuid": "23c2c4d9-d834-40ba-8323-3f79ccd2cf22"}}, "outputs": {"outputxls": {"id": "45afd52273bf712c", "src": "hda", "uuid": "eaea88bc-1091-4666-8cb2-4fffd8358895"}, "outputpdf": {"id": "2216cf2e1c664077", "src": "hda", "uuid": "f6bd0db6-9f7f-4a9a-bf69-55c6f3014e46"}, "outputr": {"id": "692593367426ab9f", "src": "hda", "uuid": "509c4c69-156c-449a-9a99-cf72dfed5fea"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Load BAM file ...  Done\nTotoal reads used: 40\n", "job_stdout": "", "job_stderr": "", "stderr": "Load BAM file ...  Done\nTotoal reads used: 40\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:39:23", "plugin": "core", "name": "start_epoch", "raw_value": "1666456763.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:39:24", "plugin": "core", "name": "end_epoch", "raw_value": "1666456764.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_deletion_profile/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_deletion_profile", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 115.13834285736084, "inputs": {"input": {"src": "hda", "id": "8243c124e0854b3e"}, "readlength": "101", "rscript_output": true}, "job": {"model_class": "Job", "id": "692593367426ab9f", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:41:29.405078", "create_time": "2022-10-22T16:39:54.070715", "galaxy_version": "21.09", "command_version": "deletion_profile.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_deletion_profile/2.6.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-5665r", "command_line": "deletion_profile.py -i '/galaxy/server/database/objects/1/6/6/dataset_16622985-83ae-47d2-8776-85719739227b.dat' -o output -l 101 -n 1000000 -q 30", "traceback": null, "params": {"readlength": "\"101\"", "readnum": "\"1000000\"", "mapq": "\"30\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"auto\""}, "inputs": {"input": {"id": "8243c124e0854b3e", "src": "hda", "uuid": "16622985-83ae-47d2-8776-85719739227b"}}, "outputs": {"outputxls": {"id": "2d2b21a97d84453e", "src": "hda", "uuid": "98f2c1f6-6f4b-416b-bbfc-cbb2107263f1"}, "outputr": {"id": "fb550595335915ec", "src": "hda", "uuid": "d4b169dc-9258-4540-8052-ba0befd48409"}, "outputpdf": {"id": "3f8549b9567a7489", "src": "hda", "uuid": "5fba0873-1d1c-4d26-961e-387f5d4d3519"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n\n\n", "tool_stderr": "Process BAM file ...  Total reads used: 0\n", "job_stdout": "", "job_stderr": "", "stderr": "Process BAM file ...  Total reads used: 0\n", "stdout": "null device \n          1 \n\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:41:20", "plugin": "core", "name": "end_epoch", "raw_value": "1666456880.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:41:19", "plugin": "core", "name": "start_epoch", "raw_value": "1666456879.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage/2.6.4.3-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage", "tool_version": "2.6.4.3", "test_index": 0, "time_seconds": 132.97740530967712, "inputs": {"batch_mode|input": {"src": "hda", "id": "2d705b74654c7487"}, "batch_mode|batch_mode_selector": "batch", "refgene": {"src": "hda", "id": "2e0a1ee1abec981b"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "8a2c09189c23f69e", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:39:55.287315", "create_time": "2022-10-22T16:38:14.854323", "galaxy_version": "21.09", "command_version": "geneBody_coverage.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage/2.6.4.3", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-q9qzw", "command_line": "ln -sf '/galaxy/server/database/objects/2/3/c/dataset_23c2c4d9-d834-40ba-8323-3f79ccd2cf22.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/b/2/3/metadata_b237b8b0-2540-4f16-9529-ffbe6834a77d.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam.bai' && geneBody_coverage.py -i 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam' -r '/galaxy/server/database/objects/a/6/4/dataset_a64e913a-ff97-4129-9e5c-40a9695e573e.dat' --minimum_length 100 -o output", "traceback": null, "params": {"batch_mode": "{\"__current_case__\": 0, \"batch_mode_selector\": \"batch\", \"input\": {\"values\": [{\"id\": 24, \"src\": \"hda\"}]}}", "minimum_length": "\"100\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"auto\""}, "inputs": {"input": {"id": "2d705b74654c7487", "src": "hda", "uuid": "23c2c4d9-d834-40ba-8323-3f79ccd2cf22"}, "refgene": {"id": "65c8e3c0e87fc2c1", "src": "hda", "uuid": "a64e913a-ff97-4129-9e5c-40a9695e573e"}}, "outputs": {"outputcurvespdf": {"id": "f04c784c25a34a26", "src": "hda", "uuid": "2afd7d45-2c51-49ca-b90b-6a227549e71d"}, "outputr": {"id": "d155f3d653bd45f5", "src": "hda", "uuid": "9acf5515-2e02-4b2e-a13a-4f91d6a50465"}, "outputtxt": {"id": "ecf72c2fe534b462", "src": "hda", "uuid": "71da3baf-0b76-4f7a-a0ae-62468506b36c"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "@ 2022-10-22 16:39:38: Read BED file (reference gene model) ...\n@ 2022-10-22 16:39:38: Total 7 transcripts loaded\n@ 2022-10-22 16:39:38: Get BAM file(s) ...\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam\n@ 2022-10-22 16:39:38: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam ...\n\n\n\n\tSample\tSkewness\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam\t3.366683083597443\n@ 2022-10-22 16:39:38: Running R script ...\n", "job_stdout": "", "job_stderr": "", "stderr": "@ 2022-10-22 16:39:38: Read BED file (reference gene model) ...\n@ 2022-10-22 16:39:38: Total 7 transcripts loaded\n@ 2022-10-22 16:39:38: Get BAM file(s) ...\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam\n@ 2022-10-22 16:39:38: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam ...\n\n\n\n\tSample\tSkewness\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam\t3.366683083597443\n@ 2022-10-22 16:39:38: Running R script ...\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:39:38", "plugin": "core", "name": "start_epoch", "raw_value": "1666456778.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:39:38", "plugin": "core", "name": "end_epoch", "raw_value": "1666456778.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage/2.6.4.3-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage", "tool_version": "2.6.4.3", "test_index": 1, "time_seconds": 129.0104694366455, "inputs": {"batch_mode|inputs": [{"src": "hda", "id": "2d705b74654c7487"}, {"src": "hda", "id": "2d705b74654c7487"}, {"src": "hda", "id": "2d705b74654c7487"}], "batch_mode|batch_mode_selector": "merge", "refgene": {"src": "hda", "id": "2e0a1ee1abec981b"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "0999a7e0a240e2ad", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:39:51.578413", "create_time": "2022-10-22T16:38:16.047276", "galaxy_version": "21.09", "command_version": "geneBody_coverage.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage/2.6.4.3", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-qz2dt", "command_line": "ln -sf '/galaxy/server/database/objects/2/3/c/dataset_23c2c4d9-d834-40ba-8323-3f79ccd2cf22.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/b/2/3/metadata_b237b8b0-2540-4f16-9529-ffbe6834a77d.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam.bai' && echo 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam' >> 'input_list.txt' &&  ln -sf '/galaxy/server/database/objects/2/3/c/dataset_23c2c4d9-d834-40ba-8323-3f79ccd2cf22.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/b/2/3/metadata_b237b8b0-2540-4f16-9529-ffbe6834a77d.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam.bai' && echo 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam' >> 'input_list.txt' &&  ln -sf '/galaxy/server/database/objects/2/3/c/dataset_23c2c4d9-d834-40ba-8323-3f79ccd2cf22.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/b/2/3/metadata_b237b8b0-2540-4f16-9529-ffbe6834a77d.dat' 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam.bai' && echo 'pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam' >> 'input_list.txt' && geneBody_coverage.py -i 'input_list.txt' -r '/galaxy/server/database/objects/a/6/4/dataset_a64e913a-ff97-4129-9e5c-40a9695e573e.dat' --minimum_length 100 -o output", "traceback": null, "params": {"batch_mode": "{\"__current_case__\": 1, \"batch_mode_selector\": \"merge\", \"inputs\": {\"values\": [{\"id\": 24, \"src\": \"hda\"}, {\"id\": 24, \"src\": \"hda\"}, {\"id\": 24, \"src\": \"hda\"}]}}", "minimum_length": "\"100\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bam\""}, "inputs": {"inputs": {"id": "2d705b74654c7487", "src": "hda", "uuid": "23c2c4d9-d834-40ba-8323-3f79ccd2cf22"}, "inputs1": {"id": "2d705b74654c7487", "src": "hda", "uuid": "23c2c4d9-d834-40ba-8323-3f79ccd2cf22"}, "inputs2": {"id": "2d705b74654c7487", "src": "hda", "uuid": "23c2c4d9-d834-40ba-8323-3f79ccd2cf22"}, "inputs3": {"id": "2d705b74654c7487", "src": "hda", "uuid": "23c2c4d9-d834-40ba-8323-3f79ccd2cf22"}, "refgene": {"id": "65c8e3c0e87fc2c1", "src": "hda", "uuid": "a64e913a-ff97-4129-9e5c-40a9695e573e"}}, "outputs": {"outputcurvespdf": {"id": "322fafcdb0d439fb", "src": "hda", "uuid": "4fc98ce5-0809-484e-b844-3125df9b64d1"}, "outputheatmappdf": {"id": "ac64c14c2573b400", "src": "hda", "uuid": "86130338-9e33-4cb8-9447-8e707e446bd2"}, "outputr": {"id": "93103fad0028588e", "src": "hda", "uuid": "1de05e9c-79b8-41c9-b5bf-9aae53900726"}, "outputtxt": {"id": "8bd69e6269c5414d", "src": "hda", "uuid": "53302605-ce56-4a37-ab9f-4bd079f35c6a"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \nnull device \n          1 \n", "tool_stderr": "@ 2022-10-22 16:39:34: Read BED file (reference gene model) ...\n@ 2022-10-22 16:39:34: Total 7 transcripts loaded\n@ 2022-10-22 16:39:34: Get BAM file(s) ...\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam\n@ 2022-10-22 16:39:34: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam ...\n@ 2022-10-22 16:39:34: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam ...\n@ 2022-10-22 16:39:34: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam ...\n\n\n\n\tSample\tSkewness\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam\t3.366683083597443\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam.1\t3.366683083597443\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam.2\t3.366683083597443\n@ 2022-10-22 16:39:34: Running R script ...\n", "job_stdout": "", "job_stderr": "", "stderr": "@ 2022-10-22 16:39:34: Read BED file (reference gene model) ...\n@ 2022-10-22 16:39:34: Total 7 transcripts loaded\n@ 2022-10-22 16:39:34: Get BAM file(s) ...\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam\n\tpairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam\n@ 2022-10-22 16:39:34: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.bam ...\n@ 2022-10-22 16:39:34: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.1.bam ...\n@ 2022-10-22 16:39:34: Processing pairend_strandspecific_51mer_hg19_chr1_1-100000_bam.2.bam ...\n\n\n\n\tSample\tSkewness\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam\t3.366683083597443\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam.1\t3.366683083597443\n\tpairend_strandspecific_51mer_hg19_chr1_1_100000_bam.2\t3.366683083597443\n@ 2022-10-22 16:39:34: Running R script ...\n", "stdout": "null device \n          1 \nnull device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:39:34", "plugin": "core", "name": "start_epoch", "raw_value": "1666456774.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:39:34", "plugin": "core", "name": "end_epoch", "raw_value": "1666456774.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage2/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage2", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 136.91750478744507, "inputs": {"input": {"src": "hda", "id": "41a3bde838b2a340"}, "refgene": {"src": "hda", "id": "fdd7107d590e4090"}}, "job": {"model_class": "Job", "id": "89928bd445b3a932", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:37:41.370668", "create_time": "2022-10-22T16:35:51.560980", "galaxy_version": "21.09", "command_version": "geneBody_coverage2.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_geneBody_coverage2/2.6.4.1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-lmh7s", "command_line": "geneBody_coverage2.py -i '/galaxy/server/database/objects/7/e/4/dataset_7e440d0e-8ca3-44b0-a5f5-083304800017.dat' -r '/galaxy/server/database/objects/8/c/0/dataset_8c04be6c-5ce0-4054-87bd-3d1895d43170.dat' -o output", "traceback": null, "params": {"chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bigwig\""}, "inputs": {"input": {"id": "41a3bde838b2a340", "src": "hda", "uuid": "7e440d0e-8ca3-44b0-a5f5-083304800017"}, "refgene": {"id": "87a0e8daeedde6cd", "src": "hda", "uuid": "8c04be6c-5ce0-4054-87bd-3d1895d43170"}}, "outputs": {"outputpdf": {"id": "0462be77d7767903", "src": "hda", "uuid": "d9363d5d-85ed-4882-a944-b4ec42fba37a"}, "outputtxt": {"id": "6932b3652856d200", "src": "hda", "uuid": "1c4916a5-6b66-4afe-b15e-1dd127904b56"}, "outputr": {"id": "82d76993aec094db", "src": "hda", "uuid": "396c1f1d-2928-4130-9112-1c9f18820207"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "calculating coverage over gene body ...\n  1 genes finished\r  2 genes finished\r  5 genes finished\r  6 genes finished\r  7 genes finished\r", "job_stdout": "", "job_stderr": "", "stderr": "calculating coverage over gene body ...\n  1 genes finished\r  2 genes finished\r  5 genes finished\r  6 genes finished\r  7 genes finished\r", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:37:26", "plugin": "core", "name": "end_epoch", "raw_value": "1666456646.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:37:25", "plugin": "core", "name": "start_epoch", "raw_value": "1666456645.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_infer_experiment/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_infer_experiment", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 116.63195037841797, "inputs": {"input": {"src": "hda", "id": "9198c68fc5d261d7"}, "refgene": {"src": "hda", "id": "2e0ed09c94d961bb"}}, "job": {"model_class": "Job", "id": "ac64c14c2573b400", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:41:52.369451", "create_time": "2022-10-22T16:40:16.398371", "galaxy_version": "21.09", "command_version": "infer_experiment.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_infer_experiment/2.6.4.1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-j7kbf", "command_line": "infer_experiment.py -i '/galaxy/server/database/objects/f/4/0/dataset_f4038d98-d8f0-4499-874b-bb45118b2a34.dat' -r '/galaxy/server/database/objects/3/c/f/dataset_3cf3970e-7714-4358-a6d5-c9ef4830c1ac.dat' --sample-size 200000 --mapq 30 > '/galaxy/server/database/objects/5/4/5/dataset_5453b08c-e1f9-47ae-9cb7-7843a0792c24.dat'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "mapq": "\"30\"", "sample_size": "\"200000\""}, "inputs": {"input": {"id": "9198c68fc5d261d7", "src": "hda", "uuid": "f4038d98-d8f0-4499-874b-bb45118b2a34"}, "refgene": {"id": "4ac03d63952a6506", "src": "hda", "uuid": "3cf3970e-7714-4358-a6d5-c9ef4830c1ac"}}, "outputs": {"output": {"id": "f5d73cb60dc1694f", "src": "hda", "uuid": "5453b08c-e1f9-47ae-9cb7-7843a0792c24"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Reading reference gene model /galaxy/server/database/objects/3/c/f/dataset_3cf3970e-7714-4358-a6d5-c9ef4830c1ac.dat ... Done\nLoading SAM/BAM file ...  Finished\nTotal 30 usable reads were sampled\n", "stderr": "\nReading reference gene model /galaxy/server/database/objects/3/c/f/dataset_3cf3970e-7714-4358-a6d5-c9ef4830c1ac.dat ... Done\nLoading SAM/BAM file ...  Finished\nTotal 30 usable reads were sampled\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:41:36", "plugin": "core", "name": "end_epoch", "raw_value": "1666456896.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:41:36", "plugin": "core", "name": "start_epoch", "raw_value": "1666456896.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_inner_distance/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_inner_distance", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 115.16414046287537, "inputs": {"input": {"src": "hda", "id": "096fbaae85520190"}, "refgene": {"src": "hda", "id": "b7822188ccff3e28"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "96383855032d5021", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:45:26.092258", "create_time": "2022-10-22T16:43:49.321639", "galaxy_version": "21.09", "command_version": "inner_distance.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_inner_distance/2.6.4.1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-9bxx7", "command_line": "inner_distance.py -i '/galaxy/server/database/objects/f/7/0/dataset_f702305f-459a-4c11-9301-c7fae5d73d8b.dat' -o output -r '/galaxy/server/database/objects/0/2/4/dataset_0248244d-6166-4733-8fb4-9e26f9bb9331.dat' --sample-size 200000 --lower-bound -250 --upper-bound 250 --step 5 --mapq 30", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "mapq": "\"30\"", "step": "\"5\"", "upperBound": "\"250\"", "lowerBound": "\"-250\"", "sample_size": "\"200000\""}, "inputs": {"input": {"id": "096fbaae85520190", "src": "hda", "uuid": "f702305f-459a-4c11-9301-c7fae5d73d8b"}, "refgene": {"id": "0f2ee5daebb7f4d1", "src": "hda", "uuid": "0248244d-6166-4733-8fb4-9e26f9bb9331"}}, "outputs": {"outputpdf": {"id": "4a95da11e39ff98a", "src": "hda", "uuid": "46bdc195-b891-445d-a10a-57207ad89000"}, "outputtxt": {"id": "5071e4b149ead423", "src": "hda", "uuid": "0bd232ed-cae8-4a78-b4c7-e6bfc20c5df3"}, "outputfreqtxt": {"id": "f8fee73887937604", "src": "hda", "uuid": "767b672e-6f09-4db2-b415-4fc028a96994"}, "outputr": {"id": "9b3d9f38b0f6e9f9", "src": "hda", "uuid": "4eb17b69-90a4-4e54-90b3-e8a8c63cbbf6"}}, "output_collections": {}, "tool_stdout": "Name\tMean\tMedian\tsd\noutput\t96.4736842105263\t67\t87.858705014265\nnull device \n          1 \n", "tool_stderr": "Get exon regions from /galaxy/server/database/objects/0/2/4/dataset_0248244d-6166-4733-8fb4-9e26f9bb9331.dat ...\nLoad BAM file ...  Done\nTotal read pairs  used 20\n", "job_stdout": "", "job_stderr": "", "stderr": "Get exon regions from /galaxy/server/database/objects/0/2/4/dataset_0248244d-6166-4733-8fb4-9e26f9bb9331.dat ...\nLoad BAM file ...  Done\nTotal read pairs  used 20\n", "stdout": "Name\tMean\tMedian\tsd\noutput\t96.4736842105263\t67\t87.858705014265\nnull device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:45:11", "plugin": "core", "name": "start_epoch", "raw_value": "1666457111.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:45:12", "plugin": "core", "name": "end_epoch", "raw_value": "1666457112.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_insertion_profile/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_insertion_profile", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 107.2495801448822, "inputs": {"input": {"src": "hda", "id": "3201bc80ed22451b"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "8f131a4d3fb4ee87", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:47:13.378060", "create_time": "2022-10-22T16:45:40.263277", "galaxy_version": "21.09", "command_version": "insertion_profile.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_insertion_profile/2.6.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-bhfrd", "command_line": "insertion_profile.py -i '/galaxy/server/database/objects/c/d/e/dataset_cde637d3-98c6-4f83-8e2f-f8f47f75b385.dat' -o output -q 30 -s \"SE\"", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "layout": "\"SE\"", "mapq": "\"30\""}, "inputs": {"input": {"id": "3201bc80ed22451b", "src": "hda", "uuid": "cde637d3-98c6-4f83-8e2f-f8f47f75b385"}}, "outputs": {"outputpdf": {"id": "3a533d5e0abc4bf4", "src": "hda", "uuid": "04bfff2f-5e6c-48ce-b1ea-9748c66c61cc"}, "outputxls": {"id": "875534a3743a9110", "src": "hda", "uuid": "f16b24c4-f5c7-4680-866a-b529da879621"}, "outputr": {"id": "b3ad3e42cb725bf5", "src": "hda", "uuid": "e943500d-f421-43f7-bc42-2b35edd34696"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Load BAM file ...  Done\nTotoal reads used: 40\n", "job_stdout": "", "job_stderr": "", "stderr": "Load BAM file ...  Done\nTotoal reads used: 40\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:46:57", "plugin": "core", "name": "start_epoch", "raw_value": "1666457217.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:46:58", "plugin": "core", "name": "end_epoch", "raw_value": "1666457218.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_annotation/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_annotation", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 152.90642094612122, "inputs": {"input": {"src": "hda", "id": "1677996776504a10"}, "refgene": {"src": "hda", "id": "0cf10a9938486f70"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "f636d11efefa1f3f", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:44:01.999888", "create_time": "2022-10-22T16:41:50.774543", "galaxy_version": "21.09", "command_version": "junction_annotation.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_annotation/2.6.4.1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-2wp75", "command_line": "junction_annotation.py --input-file '/galaxy/server/database/objects/e/c/3/dataset_ec347fb6-b783-44d4-a984-b6cf6035b448.dat' --refgene '/galaxy/server/database/objects/0/a/f/dataset_0aff0e14-8748-4c51-a888-f30a38e8a6d0.dat' --out-prefix output --min-intron 50 --mapq 30", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "mapq": "\"30\"", "min_intron": "\"50\""}, "inputs": {"input": {"id": "1677996776504a10", "src": "hda", "uuid": "ec347fb6-b783-44d4-a984-b6cf6035b448"}, "refgene": {"id": "0cf10a9938486f70", "src": "hda", "uuid": "0aff0e14-8748-4c51-a888-f30a38e8a6d0"}}, "outputs": {"outputpdf": {"id": "8fbe3b428f02c558", "src": "hda", "uuid": "d54bb45f-4fa4-4ddc-8de9-d952cd74f8d1"}, "outputjpdf": {"id": "4fc200e1bf375177", "src": "hda", "uuid": "02c54f81-c2a8-4381-b7c7-36ae0b1e5307"}, "outputxls": {"id": "88cda07065933a63", "src": "hda", "uuid": "3178c30a-65b8-428e-b1c2-b55f7679df31"}, "outputr": {"id": "cbb7db92e90cfa83", "src": "hda", "uuid": "3f4aae28-f8d2-48af-8d56-c2f5379a8328"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \nnull device \n          1 \ntotal = 4\n", "tool_stderr": "Reading reference bed file:  /galaxy/server/database/objects/0/a/f/dataset_0aff0e14-8748-4c51-a888-f30a38e8a6d0.dat  ...  Done\nLoad BAM file ...  Done\n\n===================================================================\nTotal splicing  Events:\t4\nKnown Splicing Events:\t1\nPartial Novel Splicing Events:\t1\nNovel Splicing Events:\t1\n\nTotal splicing  Junctions:\t3\nKnown Splicing Junctions:\t1\nPartial Novel Splicing Junctions:\t1\nNovel Splicing Junctions:\t1\n\n===================================================================\n", "job_stdout": "", "job_stderr": "", "stderr": "Reading reference bed file:  /galaxy/server/database/objects/0/a/f/dataset_0aff0e14-8748-4c51-a888-f30a38e8a6d0.dat  ...  Done\nLoad BAM file ...  Done\n\n===================================================================\nTotal splicing  Events:\t4\nKnown Splicing Events:\t1\nPartial Novel Splicing Events:\t1\nNovel Splicing Events:\t1\n\nTotal splicing  Junctions:\t3\nKnown Splicing Junctions:\t1\nPartial Novel Splicing Junctions:\t1\nNovel Splicing Junctions:\t1\n\n===================================================================\n", "stdout": "null device \n          1 \nnull device \n          1 \ntotal = 4\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:43:43", "plugin": "core", "name": "end_epoch", "raw_value": "1666457023.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:43:43", "plugin": "core", "name": "start_epoch", "raw_value": "1666457023.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_saturation/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_saturation", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 129.3946557044983, "inputs": {"input": {"src": "hda", "id": "75d927d0d9b411d6"}, "refgene": {"src": "hda", "id": "57508ed7da9e2850"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "2c7e04d53899a564", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:50:57.485669", "create_time": "2022-10-22T16:49:10.119956", "galaxy_version": "21.09", "command_version": "junction_saturation.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_junction_saturation/2.6.4.1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-mnqsw", "command_line": "junction_saturation.py --input-file '/galaxy/server/database/objects/9/3/4/dataset_934f8f28-9698-449b-9214-daa01e99cd4b.dat' --refgene '/galaxy/server/database/objects/4/8/8/dataset_4886a29b-ff6c-4175-96fc-0661eccc1a67.dat' --out-prefix output --min-intron 50 --min-coverage 1 --mapq 30", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "percentiles_type": "{\"__current_case__\": 1, \"percentiles_type_selector\": \"default\"}", "mapq": "\"30\"", "min_coverage": "\"1\"", "min_intron": "\"50\""}, "inputs": {"input": {"id": "75d927d0d9b411d6", "src": "hda", "uuid": "934f8f28-9698-449b-9214-daa01e99cd4b"}, "refgene": {"id": "2cf94284fe542d49", "src": "hda", "uuid": "4886a29b-ff6c-4175-96fc-0661eccc1a67"}}, "outputs": {"outputpdf": {"id": "fdacce0199ccf531", "src": "hda", "uuid": "b67222f4-235f-40a8-bbd7-51690a487a09"}, "outputr": {"id": "29473ae12d465aed", "src": "hda", "uuid": "003e6583-32b6-4332-b740-1c2ce36dd0ab"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "reading reference bed file:  /galaxy/server/database/objects/4/8/8/dataset_4886a29b-ff6c-4175-96fc-0661eccc1a67.dat  ...  Done! Total 14 known splicing junctions.\nLoad BAM file ...  Done\nshuffling alignments ... Done\nsampling 5% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 10% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 15% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 20% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 25% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 30% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 35% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 40% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 45% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 50% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 55% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 60% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 65% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 70% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 75% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 80% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 85% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 90% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 95% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 100% (3) splicing reads. 3 splicing junctions. 1 known splicing junctions. 2 novel splicing junctions.\n", "job_stdout": "", "job_stderr": "", "stderr": "reading reference bed file:  /galaxy/server/database/objects/4/8/8/dataset_4886a29b-ff6c-4175-96fc-0661eccc1a67.dat  ...  Done! Total 14 known splicing junctions.\nLoad BAM file ...  Done\nshuffling alignments ... Done\nsampling 5% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 10% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 15% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 20% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 25% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 30% (0) splicing reads. 0 splicing junctions. 0 known splicing junctions. 0 novel splicing junctions.\nsampling 35% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 40% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 45% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 50% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 55% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 60% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 65% (1) splicing reads. 1 splicing junctions. 1 known splicing junctions. 0 novel splicing junctions.\nsampling 70% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 75% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 80% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 85% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 90% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 95% (2) splicing reads. 2 splicing junctions. 1 known splicing junctions. 1 novel splicing junctions.\nsampling 100% (3) splicing reads. 3 splicing junctions. 1 known splicing junctions. 2 novel splicing junctions.\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:50:39", "plugin": "core", "name": "end_epoch", "raw_value": "1666457439.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:50:39", "plugin": "core", "name": "start_epoch", "raw_value": "1666457439.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_mismatch_profile/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_mismatch_profile", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 107.81339383125305, "inputs": {"input": {"src": "hda", "id": "8f131a4d3fb4ee87"}, "readlength": "101", "rscript_output": true}, "job": {"model_class": "Job", "id": "9198c68fc5d261d7", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:43:39.885209", "create_time": "2022-10-22T16:42:10.959297", "galaxy_version": "21.09", "command_version": "mismatch_profile.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_mismatch_profile/2.6.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-fxc4n", "command_line": "mismatch_profile.py -i '/galaxy/server/database/objects/8/1/7/dataset_8174ee7d-13c0-46b1-9173-67dc9a5154ee.dat' -o output -l 101 -n 1000000 -q 30", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "mapq": "\"30\"", "readnum": "\"1000000\"", "readlength": "\"101\""}, "inputs": {"input": {"id": "8f131a4d3fb4ee87", "src": "hda", "uuid": "8174ee7d-13c0-46b1-9173-67dc9a5154ee"}}, "outputs": {"outputpdf": {"id": "7cd84a079d16d4c3", "src": "hda", "uuid": "d6e1aa75-9260-4af5-95f0-df4d1c62eeca"}, "outputxls": {"id": "9fcfab36bba1d9f5", "src": "hda", "uuid": "37aa72db-019e-4161-ac28-11a5aa9b94a0"}, "outputr": {"id": "98c4f11efd1f7e5b", "src": "hda", "uuid": "f1e44351-7c82-41ec-a813-2cb2ddb310a6"}}, "output_collections": {}, "tool_stdout": "\n\n", "tool_stderr": "Process BAM file ...  No mismatches found\n", "job_stdout": "", "job_stderr": "", "stderr": "Process BAM file ...  No mismatches found\n", "stdout": "\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:43:26", "plugin": "core", "name": "end_epoch", "raw_value": "1666457006.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:43:25", "plugin": "core", "name": "start_epoch", "raw_value": "1666457005.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_GC/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_GC", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 107.07332730293274, "inputs": {"input": {"src": "hda", "id": "75d927d0d9b411d6"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "9b3d9f38b0f6e9f9", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:50:27.517716", "create_time": "2022-10-22T16:48:54.656678", "galaxy_version": "21.09", "command_version": "read_GC.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_GC/2.6.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-4g555", "command_line": "read_GC.py --input-file '/galaxy/server/database/objects/9/3/4/dataset_934f8f28-9698-449b-9214-daa01e99cd4b.dat' --out-prefix output --mapq 30", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "mapq": "\"30\""}, "inputs": {"input": {"id": "75d927d0d9b411d6", "src": "hda", "uuid": "934f8f28-9698-449b-9214-daa01e99cd4b"}}, "outputs": {"outputpdf": {"id": "f6ec676023fbc2e1", "src": "hda", "uuid": "919a0a46-a81c-4ad5-8a47-d98109fabf83"}, "outputxls": {"id": "7a1e228f9f61408d", "src": "hda", "uuid": "45332cd7-8a95-4b86-a634-a3326e5051bd"}, "outputr": {"id": "5ce55e6dbecc39c2", "src": "hda", "uuid": "d74444cc-235a-457f-98d6-0bde543debb4"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Read BAM file ...  Done\nwriting GC content ...\nwriting R script ...\n", "job_stdout": "", "job_stderr": "", "stderr": "Read BAM file ...  Done\nwriting GC content ...\nwriting R script ...\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:50:17", "plugin": "core", "name": "end_epoch", "raw_value": "1666457417.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:50:16", "plugin": "core", "name": "start_epoch", "raw_value": "1666457416.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_NVC/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_NVC", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 136.9536817073822, "inputs": {"input": {"src": "hda", "id": "8719d0548dfb0e09"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "fff8cc35a48146de", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:37:41.423377", "create_time": "2022-10-22T16:35:44.119404", "galaxy_version": "21.09", "command_version": "read_NVC.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_NVC/2.6.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-m4sq4", "command_line": "read_NVC.py --input-file '/galaxy/server/database/objects/e/8/9/dataset_e89ec7eb-d2d6-4686-9e5c-8bc1ccd59905.dat' --out-prefix output  --mapq 30", "traceback": null, "params": {"nx": "\"false\"", "mapq": "\"30\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"auto\""}, "inputs": {"input": {"id": "8719d0548dfb0e09", "src": "hda", "uuid": "e89ec7eb-d2d6-4686-9e5c-8bc1ccd59905"}}, "outputs": {"outputpdf": {"id": "fff8cc35a48146de", "src": "hda", "uuid": "4ee13c01-0fbd-4fe1-ad83-1716564f1e64"}, "outputxls": {"id": "89a28a6ea439cfd2", "src": "hda", "uuid": "afd54c8f-c30e-43db-963c-4cdb58113fc5"}, "outputr": {"id": "64c4e6a4e521a7bf", "src": "hda", "uuid": "0c5bc3ca-04fb-4f19-9ded-d1bb47741f9c"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Read BAM file ...  Done\ngenerating data matrix ...\ngenerating R script  ...\n", "job_stdout": "", "job_stderr": "", "stderr": "Read BAM file ...  Done\ngenerating data matrix ...\ngenerating R script  ...\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:37:21", "plugin": "core", "name": "end_epoch", "raw_value": "1666456641.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:37:20", "plugin": "core", "name": "start_epoch", "raw_value": "1666456640.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_distribution/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_distribution", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 123.48015522956848, "inputs": {"input": {"src": "hda", "id": "8f131a4d3fb4ee87"}, "refgene": {"src": "hda", "id": "0cf10a9938486f70"}}, "job": {"model_class": "Job", "id": "0c2fef3a2ab24620", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:43:45.667797", "create_time": "2022-10-22T16:42:07.022126", "galaxy_version": "21.09", "command_version": "read_distribution.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_distribution/2.6.4.1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-fk5f8", "command_line": "read_distribution.py -i '/galaxy/server/database/objects/8/1/7/dataset_8174ee7d-13c0-46b1-9173-67dc9a5154ee.dat' -r '/galaxy/server/database/objects/3/f/3/dataset_3f3a5197-1fef-471e-b4ab-4f4e981fad32.dat' > '/galaxy/server/database/objects/7/7/a/dataset_77a8fbfc-0862-4e25-a4c6-0e664c54ccd4.dat'", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input": {"id": "8f131a4d3fb4ee87", "src": "hda", "uuid": "8174ee7d-13c0-46b1-9173-67dc9a5154ee"}, "refgene": {"id": "f3460363ad6cf0ed", "src": "hda", "uuid": "3f3a5197-1fef-471e-b4ab-4f4e981fad32"}}, "outputs": {"output": {"id": "7f3071a0577ff30b", "src": "hda", "uuid": "77a8fbfc-0862-4e25-a4c6-0e664c54ccd4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "processing /galaxy/server/database/objects/3/f/3/dataset_3f3a5197-1fef-471e-b4ab-4f4e981fad32.dat ... Done\nprocessing /galaxy/server/database/objects/8/1/7/dataset_8174ee7d-13c0-46b1-9173-67dc9a5154ee.dat ... Finished\n\n", "stderr": "\nprocessing /galaxy/server/database/objects/3/f/3/dataset_3f3a5197-1fef-471e-b4ab-4f4e981fad32.dat ... Done\nprocessing /galaxy/server/database/objects/8/1/7/dataset_8174ee7d-13c0-46b1-9173-67dc9a5154ee.dat ... Finished\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2022-10-22 16:43:30", "plugin": "core", "name": "end_epoch", "raw_value": "1666457010.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:43:30", "plugin": "core", "name": "start_epoch", "raw_value": "1666457010.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_duplication/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_duplication", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 138.56537246704102, "inputs": {"input": {"src": "hda", "id": "8719d0548dfb0e09"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "89a28a6ea439cfd2", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:37:42.402852", "create_time": "2022-10-22T16:35:44.209066", "galaxy_version": "21.09", "command_version": "read_duplication.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_duplication/2.6.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-c2jvb", "command_line": "read_duplication.py -i '/galaxy/server/database/objects/e/8/9/dataset_e89ec7eb-d2d6-4686-9e5c-8bc1ccd59905.dat' -o output -u 500 -q 30", "traceback": null, "params": {"upLimit": "\"500\"", "mapq": "\"30\"", "rscript_output": "\"true\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"auto\""}, "inputs": {"input": {"id": "8719d0548dfb0e09", "src": "hda", "uuid": "e89ec7eb-d2d6-4686-9e5c-8bc1ccd59905"}}, "outputs": {"outputpdf": {"id": "c9afb814ed48aaad", "src": "hda", "uuid": "99a72733-88d5-42da-98d3-7058b39de5c8"}, "outputxls": {"id": "89928bd445b3a932", "src": "hda", "uuid": "82da4f74-510c-4a9b-a9b2-cb40a64f6d16"}, "outputseqxls": {"id": "f55de58d972afe6d", "src": "hda", "uuid": "7d25f044-3884-44df-86be-fa008462dcc4"}, "outputr": {"id": "321ebc189036b754", "src": "hda", "uuid": "d359fb0a-a29c-4da5-a317-bfa78eb3c491"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \n", "tool_stderr": "Load BAM file ...  Done\nreport duplicte rate based on sequence ...\nreport duplicte rate based on mapping  ...\ngenerate R script ...\n", "job_stdout": "", "job_stderr": "", "stderr": "Load BAM file ...  Done\nreport duplicte rate based on sequence ...\nreport duplicte rate based on mapping  ...\ngenerate R script ...\n", "stdout": "null device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:37:16", "plugin": "core", "name": "end_epoch", "raw_value": "1666456636.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:37:15", "plugin": "core", "name": "start_epoch", "raw_value": "1666456635.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 91.35289645195007, "inputs": {"inputs": {"src": "hda", "id": "06d0bd5be7ab2d74"}}, "job": {"model_class": "Job", "id": "f5d73cb60dc1694f", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:45:17.007157", "create_time": "2022-10-22T16:43:56.406275", "galaxy_version": "21.09", "command_version": "read_hexamer.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-q5shr", "command_line": "ln -sf '/galaxy/server/database/objects/7/1/1/dataset_711e52f5-204b-4e98-a84f-12a0bae3d0b3.dat' \"pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq\" && read_hexamer.py -i 'pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq' > '/galaxy/server/database/objects/2/e/7/dataset_2e77c08d-3cb6-4671-8a1a-00633a12394d.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "refgene": null, "refgenome": null}, "inputs": {"inputs": {"id": "06d0bd5be7ab2d74", "src": "hda", "uuid": "711e52f5-204b-4e98-a84f-12a0bae3d0b3"}}, "outputs": {"output": {"id": "d44724dc9a5c583b", "src": "hda", "uuid": "2e77c08d-3cb6-4671-8a1a-00633a12394d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done\n", "stderr": "\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:45:06", "plugin": "core", "name": "start_epoch", "raw_value": "1666457106.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:45:06", "plugin": "core", "name": "end_epoch", "raw_value": "1666457106.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer", "tool_version": "2.6.4", "test_index": 1, "time_seconds": 90.9220838546753, "inputs": {"inputs": {"src": "hda", "id": "a10a7f44f5e86819"}}, "job": {"model_class": "Job", "id": "823cb19a57b7688a", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:45:33.874105", "create_time": "2022-10-22T16:44:12.666047", "galaxy_version": "21.09", "command_version": "read_hexamer.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-bcgck", "command_line": "gunzip -c '/galaxy/server/database/objects/2/8/2/dataset_282c55a3-6ee0-4e2c-b278-c124e5c883cb.dat' > \"pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq_gz\" && read_hexamer.py -i 'pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq_gz' > '/galaxy/server/database/objects/d/4/8/dataset_d482dba8-57bc-4209-a760-2a9691b59f74.dat'", "traceback": null, "params": {"__input_ext": "\"fastqsanger.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "refgene": null, "refgenome": null}, "inputs": {"inputs": {"id": "a10a7f44f5e86819", "src": "hda", "uuid": "282c55a3-6ee0-4e2c-b278-c124e5c883cb"}}, "outputs": {"output": {"id": "2c7e04d53899a564", "src": "hda", "uuid": "d482dba8-57bc-4209-a760-2a9691b59f74"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq_gz file ... Done\n", "stderr": "\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq_gz file ... Done\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:45:21", "plugin": "core", "name": "start_epoch", "raw_value": "1666457121.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:45:22", "plugin": "core", "name": "end_epoch", "raw_value": "1666457122.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer", "tool_version": "2.6.4", "test_index": 2, "time_seconds": 104.637122631073, "inputs": {"inputs": [{"src": "hda", "id": "d32a05dbe97642af"}, {"src": "hda", "id": "ee370c5bd1db8cac"}]}, "job": {"model_class": "Job", "id": "8fbe3b428f02c558", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:46:56.716777", "create_time": "2022-10-22T16:45:30.010839", "galaxy_version": "21.09", "command_version": "read_hexamer.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-t7jtl", "command_line": "ln -sf '/galaxy/server/database/objects/a/9/6/dataset_a9613f68-a8bf-46b9-9612-27b893af7ead.dat' \"pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq\" &&    ln -sf '/galaxy/server/database/objects/7/b/f/dataset_7bf5e810-2a89-4d78-864e-5c6d973341b5.dat' \"pairend_strandspecific_51mer_hg19_chr1_1-100000_R2_fastq\" && read_hexamer.py -i 'pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq,pairend_strandspecific_51mer_hg19_chr1_1-100000_R2_fastq' > '/galaxy/server/database/objects/1/4/0/dataset_14075e6e-9828-4a93-91c5-e77f04373ddf.dat'", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "refgene": null, "refgenome": null}, "inputs": {"inputs2": {"id": "ee370c5bd1db8cac", "src": "hda", "uuid": "7bf5e810-2a89-4d78-864e-5c6d973341b5"}, "inputs1": {"id": "d32a05dbe97642af", "src": "hda", "uuid": "a9613f68-a8bf-46b9-9612-27b893af7ead"}, "inputs": {"id": "d32a05dbe97642af", "src": "hda", "uuid": "a9613f68-a8bf-46b9-9612-27b893af7ead"}}, "outputs": {"output": {"id": "72f83348d2098df7", "src": "hda", "uuid": "14075e6e-9828-4a93-91c5-e77f04373ddf"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R2_fastq file ... Done\n", "stderr": "\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R2_fastq file ... Done\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:46:44", "plugin": "core", "name": "start_epoch", "raw_value": "1666457204.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:46:44", "plugin": "core", "name": "end_epoch", "raw_value": "1666457204.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer", "tool_version": "2.6.4", "test_index": 3, "time_seconds": 92.69720602035522, "inputs": {"inputs": [{"src": "hda", "id": "d32a05dbe97642af"}, {"src": "hda", "id": "d32a05dbe97642af"}]}, "job": {"model_class": "Job", "id": "4fc200e1bf375177", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:46:49.456496", "create_time": "2022-10-22T16:45:34.230657", "galaxy_version": "21.09", "command_version": "read_hexamer.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_hexamer/2.6.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-czgtq", "command_line": "ln -sf '/galaxy/server/database/objects/a/9/6/dataset_a9613f68-a8bf-46b9-9612-27b893af7ead.dat' \"pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq\" &&    ln -sf '/galaxy/server/database/objects/a/9/6/dataset_a9613f68-a8bf-46b9-9612-27b893af7ead.dat' \"pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq.1\" && read_hexamer.py -i 'pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq,pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq.1' > '/galaxy/server/database/objects/3/f/5/dataset_3f5a2845-8136-4e45-ac46-d432bf4b706b.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "refgene": null, "refgenome": null}, "inputs": {"inputs2": {"id": "d32a05dbe97642af", "src": "hda", "uuid": "a9613f68-a8bf-46b9-9612-27b893af7ead"}, "inputs1": {"id": "d32a05dbe97642af", "src": "hda", "uuid": "a9613f68-a8bf-46b9-9612-27b893af7ead"}, "inputs": {"id": "d32a05dbe97642af", "src": "hda", "uuid": "a9613f68-a8bf-46b9-9612-27b893af7ead"}}, "outputs": {"output": {"id": "dcbc46b2e7ee24fc", "src": "hda", "uuid": "3f5a2845-8136-4e45-ac46-d432bf4b706b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Calculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq.1 file ... Done\n", "stderr": "\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq file ... Done\nCalculate hexamer of pairend_strandspecific_51mer_hg19_chr1_1-100000_R1_fastq.1 file ... Done\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:46:42", "plugin": "core", "name": "start_epoch", "raw_value": "1666457202.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:46:42", "plugin": "core", "name": "end_epoch", "raw_value": "1666457202.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_quality/2.6.4-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_quality", "tool_version": "2.6.4", "test_index": 0, "time_seconds": 91.44322752952576, "inputs": {"input": {"src": "hda", "id": "81d653ed45cd27e5"}, "rscript_output": true}, "job": {"model_class": "Job", "id": "4ac03d63952a6506", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:45:11.140652", "create_time": "2022-10-22T16:43:54.466943", "galaxy_version": "21.09", "command_version": "read_quality.py 2.6.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_read_quality/2.6.4", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-9hpds", "command_line": "read_quality.py --input-file '/galaxy/server/database/objects/1/5/c/dataset_15c72242-36f1-4df9-a560-bf9a0bc34088.dat' --out-prefix output -r 1000 --mapq 30", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rscript_output": "\"true\"", "mapq": "\"30\"", "reduce": "\"1000\""}, "inputs": {"input": {"id": "81d653ed45cd27e5", "src": "hda", "uuid": "15c72242-36f1-4df9-a560-bf9a0bc34088"}}, "outputs": {"outputheatpdf": {"id": "5266fd6ba1b07ab1", "src": "hda", "uuid": "3e0293a1-3ebe-4845-9a94-98c14f6078b6"}, "outputboxpdf": {"id": "6a6a21bc6099b394", "src": "hda", "uuid": "a1eb1034-aed8-4752-8349-c67263040d4f"}, "outputr": {"id": "b31a779a79dd67da", "src": "hda", "uuid": "c5b20aa4-f546-4148-a05d-987ede7c93df"}}, "output_collections": {}, "tool_stdout": "null device \n          1 \nnull device \n          1 \n", "tool_stderr": "Read BAM file ...  Done\n", "job_stdout": "", "job_stderr": "", "stderr": "Read BAM file ...  Done\n", "stdout": "null device \n          1 \nnull device \n          1 \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:45:02", "plugin": "core", "name": "start_epoch", "raw_value": "1666457102.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:45:02", "plugin": "core", "name": "end_epoch", "raw_value": "1666457102.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_tin/2.6.4.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_tin", "tool_version": "2.6.4.1", "test_index": 0, "time_seconds": 112.34564971923828, "inputs": {"input": {"src": "hda", "id": "8f131a4d3fb4ee87"}, "refgene": {"src": "hda", "id": "0cf10a9938486f70"}}, "job": {"model_class": "Job", "id": "2d2b21a97d84453e", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T16:43:31.341747", "create_time": "2022-10-22T16:42:02.610722", "galaxy_version": "21.09", "command_version": "tin.py 2.6.4", "tool_id": "toolshed.g2.bx.psu.edu/repos/nilesh/rseqc/rseqc_tin/2.6.4.1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-9wfr2", "command_line": "ln -sf '/galaxy/server/database/objects/8/1/7/dataset_8174ee7d-13c0-46b1-9173-67dc9a5154ee.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/7/d/2/metadata_7d2186e5-a491-4b51-8e15-4bbc43da5a58.dat' 'input.bam.bai' && tin.py -i 'input.bam' --refgene='/galaxy/server/database/objects/0/a/f/dataset_0aff0e14-8748-4c51-a888-f30a38e8a6d0.dat' --minCov=10 --sample-size=100", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "subtractbackground": "\"false\"", "samplesize": "\"100\"", "minCov": "\"10\""}, "inputs": {"input": {"id": "8f131a4d3fb4ee87", "src": "hda", "uuid": "8174ee7d-13c0-46b1-9173-67dc9a5154ee"}, "refgene": {"id": "0cf10a9938486f70", "src": "hda", "uuid": "0aff0e14-8748-4c51-a888-f30a38e8a6d0"}}, "outputs": {"outputsummary": {"id": "0310ad036ac773f7", "src": "hda", "uuid": "d5aee019-35e7-427a-a8fa-acd7d5bec442"}, "outputxls": {"id": "d1b239d81d35aa03", "src": "hda", "uuid": "35fd6c85-1c82-4f6c-bf34-dff24277f608"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "@ 2022-10-22 16:43:19: Get BAM file(s) ...\nTotal 1 BAM file(s):\n\tinput.bam\n@ 2022-10-22 16:43:19: Processing input.bam\n 2 transcripts finished\r", "job_stdout": "", "job_stderr": "", "stderr": "@ 2022-10-22 16:43:19: Get BAM file(s) ...\nTotal 1 BAM file(s):\n\tinput.bam\n@ 2022-10-22 16:43:19: Processing input.bam\n 2 transcripts finished\r", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2022-10-22 16:43:19", "plugin": "core", "name": "end_epoch", "raw_value": "1666456999.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 16:43:18", "plugin": "core", "name": "start_epoch", "raw_value": "1666456998.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 0, "time_seconds": 359.4123754501343, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "91bea76004055b79"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "21ea439acfe4618b"}}, "job": {"model_class": "Job", "id": "db42f6d4caf88213", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:18:23.439815", "create_time": "2022-10-22T17:12:42.322218", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-q6vjw", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/b/3/a/dataset_b3a09560-cf0a-4991-988c-c334d4a7054f.dat --pe1-2 fastq:/galaxy/server/database/objects/0/0/4/dataset_00424cb9-b3f0-498c-877e-6a6473e67c67.dat && python '/galaxy/server/database/jobs_directory/000/232/configs/tmphexfwzf6' < contigs.fasta > '/galaxy/server/database/objects/a/9/d/dataset_a9d9833a-b0be-43ad-9bd0-7d79b7c9db16.dat' && python '/galaxy/server/database/jobs_directory/000/232/configs/tmphexfwzf6' < scaffolds.fasta > '/galaxy/server/database/objects/4/5/8/dataset_458f86dd-255f-4e3b-a73d-844a55d02cf7.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 274, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 275, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "91bea76004055b79", "src": "hda", "uuid": "b3a09560-cf0a-4991-988c-c334d4a7054f"}, "libraries_0|files_0|rev_reads": {"id": "21ea439acfe4618b", "src": "hda", "uuid": "00424cb9-b3f0-498c-877e-6a6473e67c67"}}, "outputs": {"out_log": {"id": "3e0fa99b62e22b4b", "src": "hda", "uuid": "5a9fd36f-e9db-4ef5-9aa6-98b86a9c6a11"}, "out_scaffolds": {"id": "2c039cad48c40976", "src": "hda", "uuid": "29fd3820-c315-43a8-b426-2a830548667c"}, "out_contigs": {"id": "ca4a7096b086cc88", "src": "hda", "uuid": "4dd89da8-237a-423c-957a-2b52b511626b"}, "out_scaffold_stats": {"id": "e8f92349cd10ca3b", "src": "hda", "uuid": "458f86dd-255f-4e3b-a73d-844a55d02cf7"}, "out_contig_stats": {"id": "f85c7ea516194a82", "src": "hda", "uuid": "a9d9833a-b0be-43ad-9bd0-7d79b7c9db16"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/232/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/b/3/a/dataset_b3a09560-cf0a-4991-988c-c334d4a7054f.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/0/0/4/dataset_00424cb9-b3f0-498c-877e-6a6473e67c67.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/232/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/b/3/a/dataset_b3a09560-cf0a-4991-988c-c334d4a7054f.dat']\n      right reads: ['/galaxy/server/database/objects/0/0/4/dataset_00424cb9-b3f0-498c-877e-6a6473e67c67.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/232/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/232/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/232/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/232/working/corrected/configs/config.info\n  0:00:00.006     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.006     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.006     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.009     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.009     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.009     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.021     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.021     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.023     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.023     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.023     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.023     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/b/3/a/dataset_b3a09560-cf0a-4991-988c-c334d4a7054f.dat\n  0:00:01.135     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/0/4/dataset_00424cb9-b3f0-498c-877e-6a6473e67c67.dat\n  0:00:02.282     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:02.289    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:02.791    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:02.792    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:03.216    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:03.356    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:03.425    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:03.430    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:03.435    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:03.437    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:03.467    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:03.467    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:03.467    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/b/3/a/dataset_b3a09560-cf0a-4991-988c-c334d4a7054f.dat\n  0:00:03.509    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/0/4/dataset_00424cb9-b3f0-498c-877e-6a6473e67c67.dat\n  0:00:03.553    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:03.554    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:03.554    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:03.573    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:03.573    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:03.574    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:03.574    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:03.574    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:03.574    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:03.574    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:03.574    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:03.575    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:03.583    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:03.583    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:03.622    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:03.622    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:03.622    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:03.622    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/b/3/a/dataset_b3a09560-cf0a-4991-988c-c334d4a7054f.dat and /galaxy/server/database/objects/0/0/4/dataset_00424cb9-b3f0-498c-877e-6a6473e67c67.dat\n  0:00:03.654    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:03.663    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:03.670    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:03.725    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:03.725    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:03.725    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/232/working/corrected/corrected.yaml\n  0:00:03.743    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/232/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/232/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/232/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.015     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.015     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.121    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.126     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.237   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.243     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.367   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.553     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.553     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.553     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.555     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.556     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.557     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.557     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.947     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.950    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.950    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.165    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:01.165    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.241    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:01.241    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.242    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:01.242    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.242    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:01.242    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:02.706     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:02.717    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.538    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:03.539    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:03.927    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.023    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.098    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:04.099    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:04.107    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:04.111    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n0:00:12.360    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:12.368    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:12.368    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:12.368    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:12.368    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:12.368    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:12.368    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:12.368    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:12.368    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:12.368    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:12.368    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:12.368    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:12.388    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:12.388    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:12.388    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:12.411    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:12.411    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/232/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:12.413    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/232/working//K33/before_rr.fasta\n  0:00:12.425    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/232/working//K33/assembly_graph.fastg\n  0:00:12.441    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/232/working//K33/simplified_contigs.fasta\n  0:00:12.453    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/232/working//K33/intermediate_contigs.fasta\n  0:00:12.480    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:12.480    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:12.480    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:12.480    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:12.480    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:12.480    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:12.512    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:12.647    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:13.038    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:13.038    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:13.051    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:13.149   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:13.160   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:13.165   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:13.171   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:13.171   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:13.171   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:13.193   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:13.207   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:13.275    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:13.280    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:13.280    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:13.280    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:13.280    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:13.280    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:13.280    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:13.280    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:13.280    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:13.280    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:13.281    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:13.282    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:13.282    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:13.282    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:13.282    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:13.282    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:13.282    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:13.282    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:13.282    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:13.282    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:13.282    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:13.283    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:13.283    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:13.283    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:13.283    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:13.283    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:13.283    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:13.283    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:13.283    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:13.283    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:13.283    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:13.283    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/232/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:13.286    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/232/working//K33/before_rr.fasta\n  0:00:13.302    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/232/working//K33/assembly_graph.fastg\n  0:00:13.317    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/232/working//K33/final_contigs.paths\n  0:00:13.347    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/232/working//K33/scaffolds.paths\n  0:00:13.410    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:13.415    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 13 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/232/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/232/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/232/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/232/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/232/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/232/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/232/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/232/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/232/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/b/3/a/dataset_b3a09560-cf0a-4991-988c-c334d4a7054f.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/0/0/4/dataset_00424cb9-b3f0-498c-877e-6a6473e67c67.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/232/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/b/3/a/dataset_b3a09560-cf0a-4991-988c-c334d4a7054f.dat']\n      right reads: ['/galaxy/server/database/objects/0/0/4/dataset_00424cb9-b3f0-498c-877e-6a6473e67c67.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/232/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/232/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/232/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/232/working/corrected/configs/config.info\n  0:00:00.006     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.006     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.006     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.009     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.009     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.009     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.021     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.021     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.023     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.023     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.023     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.023     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/b/3/a/dataset_b3a09560-cf0a-4991-988c-c334d4a7054f.dat\n  0:00:01.135     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/0/0/4/dataset_00424cb9-b3f0-498c-877e-6a6473e67c67.dat\n  0:00:02.282     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:02.289    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:02.791    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:02.792    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:03.216    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:03.356    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:03.425    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:03.430    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:03.435    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:03.437    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:03.467    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:03.467    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:03.467    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/b/3/a/dataset_b3a09560-cf0a-4991-988c-c334d4a7054f.dat\n  0:00:03.509    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/0/0/4/dataset_00424cb9-b3f0-498c-877e-6a6473e67c67.dat\n  0:00:03.553    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:03.554    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:03.554    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:03.573    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:03.573    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:03.574    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:03.574    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:03.574    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:03.574    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:03.574    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:03.574    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:03.575    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:03.583    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:03.583    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:03.622    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:03.622    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:03.622    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:03.622    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/b/3/a/dataset_b3a09560-cf0a-4991-988c-c334d4a7054f.dat and /galaxy/server/database/objects/0/0/4/dataset_00424cb9-b3f0-498c-877e-6a6473e67c67.dat\n  0:00:03.654    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:03.663    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:03.670    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:03.725    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:03.725    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:03.725    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/232/working/corrected/corrected.yaml\n  0:00:03.743    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/232/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/232/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/232/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.015     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.015     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.121    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.126     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.237   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.243     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.367   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.553     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.553     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.553     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.555     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.556     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.557     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.557     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.947     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.950    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.950    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.165    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:01.165    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.241    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:01.241    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.242    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:01.242    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.242    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:01.242    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:02.706     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:02.717    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.538    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:03.539    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:03.927    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.023    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.098    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:04.099    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:04.107    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:04.111    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n0:00:12.360    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:12.368    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:12.368    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:12.368    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:12.368    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:12.368    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:12.368    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:12.368    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:12.368    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:12.368    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:12.368    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:12.368    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:12.368    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:12.388    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:12.388    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:12.388    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:12.411    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:12.411    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/232/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:12.413    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/232/working//K33/before_rr.fasta\n  0:00:12.425    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/232/working//K33/assembly_graph.fastg\n  0:00:12.441    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/232/working//K33/simplified_contigs.fasta\n  0:00:12.453    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/232/working//K33/intermediate_contigs.fasta\n  0:00:12.480    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:12.480    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:12.480    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:12.480    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:12.480    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:12.480    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:12.512    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:12.647    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:13.038    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:13.038    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:13.051    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:13.149   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:13.160   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:13.165   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:13.171   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:13.171   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:13.171   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:13.193   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:13.207   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:13.275    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:13.280    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:13.280    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:13.280    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:13.280    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:13.280    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:13.280    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:13.280    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:13.280    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:13.280    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:13.281    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:13.282    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:13.282    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:13.282    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:13.282    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:13.282    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:13.282    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:13.282    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:13.282    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:13.282    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:13.282    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:13.283    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:13.283    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:13.283    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:13.283    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:13.283    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:13.283    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:13.283    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:13.283    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:13.283    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:13.283    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:13.283    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:13.283    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:13.283    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/232/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:13.286    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/232/working//K33/before_rr.fasta\n  0:00:13.302    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/232/working//K33/assembly_graph.fastg\n  0:00:13.317    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/232/working//K33/final_contigs.paths\n  0:00:13.347    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/232/working//K33/scaffolds.paths\n  0:00:13.410    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:13.415    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 13 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/232/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/232/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/232/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/232/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/232/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/232/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/232/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/232/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "19 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "19.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:18:13", "plugin": "core", "name": "end_epoch", "raw_value": "1666459093.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:17:54", "plugin": "core", "name": "start_epoch", "raw_value": "1666459074.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 1, "time_seconds": 184.59286642074585, "inputs": {"sc": false, "onlyassembler": true, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "b9420ff379b9d364"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "8b702fc184806be9"}}, "job": {"model_class": "Job", "id": "1dd1a11d81743135", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:18:02.715647", "create_time": "2022-10-22T17:15:19.360119", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-8tbqf", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output  --only-assembler  -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fasta:/galaxy/server/database/objects/5/6/3/dataset_56394c98-2523-45d7-b420-e6da07797ccd.dat --pe1-2 fasta:/galaxy/server/database/objects/3/a/b/dataset_3ab41ca8-d603-4289-b54e-230cebffbcbe.dat && python '/galaxy/server/database/jobs_directory/000/235/configs/tmpbvps1gp9' < contigs.fasta > '/galaxy/server/database/objects/a/d/7/dataset_ad75b1c0-4b9e-45b2-a026-7c7f3e7cd8c3.dat' && python '/galaxy/server/database/jobs_directory/000/235/configs/tmpbvps1gp9' < scaffolds.fasta > '/galaxy/server/database/objects/f/8/6/dataset_f86ea89d-ad32-4b61-b581-c932163aff72.dat'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 281, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 282, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"true\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "b9420ff379b9d364", "src": "hda", "uuid": "56394c98-2523-45d7-b420-e6da07797ccd"}, "libraries_0|files_0|rev_reads": {"id": "8b702fc184806be9", "src": "hda", "uuid": "3ab41ca8-d603-4289-b54e-230cebffbcbe"}}, "outputs": {"out_log": {"id": "a4292ff31fd90b5e", "src": "hda", "uuid": "bfd7370b-9ac1-4b9e-8eb2-22c4e90f1364"}, "out_scaffolds": {"id": "7a0b4b0d53e7398e", "src": "hda", "uuid": "b645b5e1-9780-4d2c-97a9-816db418bcc5"}, "out_contigs": {"id": "9acec2a1b9834864", "src": "hda", "uuid": "01775037-d657-4a7e-922d-2ea3dbebaaba"}, "out_scaffold_stats": {"id": "5c838e3dac89a0d9", "src": "hda", "uuid": "f86ea89d-ad32-4b61-b581-c932163aff72"}, "out_contig_stats": {"id": "6e02da3d402bd090", "src": "hda", "uuid": "ad75b1c0-4b9e-45b2-a026-7c7f3e7cd8c3"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/235/working\t--disable-gzip-output\t--only-assembler\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfasta:/galaxy/server/database/objects/5/6/3/dataset_56394c98-2523-45d7-b420-e6da07797ccd.dat\t--pe1-2\tfasta:/galaxy/server/database/objects/3/a/b/dataset_3ab41ca8-d603-4289-b54e-230cebffbcbe.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/235/working\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/5/6/3/dataset_56394c98-2523-45d7-b420-e6da07797ccd.dat']\n      right reads: ['/galaxy/server/database/objects/3/a/b/dataset_3ab41ca8-d603-4289-b54e-230cebffbcbe.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/235/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/235/working/spades.log\n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/235/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/235/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.018     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.018     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.133    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.137     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.285   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.289     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.468   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.675     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.675     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1611\n  0:00:00.675     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.676     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.678     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.678     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.678     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:01.084     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:01.087    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:01.087    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.299    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:01.300    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.425    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:01.427    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.427    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:01.428    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.429    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:01.429    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:02.993     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 974 kmers.\n  0:00:03.006    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.792    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 975 kmers in total.\n  0:00:03.792    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:04.171    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.270    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.349    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.2133 bits per kmer).\n  0:00:04.349    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:04.360    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:04.362    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Condensing graph\n  0:00:04.363    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 355)   Extracting unbranching paths\n  0:00:04.363    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 374)   Extracting unbranching paths finished. 5 sequences extracted\n  0:00:04.364    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 310)   Collecting perfect loops\n  0:00:04.366    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 343)   Collecting perfect loops finished. 0 loops collected\n  0:00:04.366    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:04.366    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:04.366    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.405    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 2768 bytes occupied (22.7351 bits per kmer).\n  0:00:04.406    16M / 3G    INFO    General                 (construction.cpp          : 388)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:04.450    16M / 3G    INFO    General                 (construction.cpp          : 508)   Filling coverage and flanking coverage from PHM\n  0:00:04.486    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == EC Threshold Finding\n  0:00:04.486    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 0\n  0:00:04.486    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 356\n  0:00:04.486    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 356. Coverage mad: 44.478\n  0:00:04.486    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:04.540    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:04.692    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:05.120    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:05.867    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:06.987    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:08.865    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 271.705. Fitted coverage std. dev: 78.9849\n  0:00:08.866    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.978568\n  0:00:08.866    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 251\n  0:00:08.866    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 135\n  0:00:08.866    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 738\n  0:00:08.866    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 112)   Mean coverage was calculated as 271.705\n  0:00:08.866    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 127)   EC coverage threshold value was calculated as 135\n  0:00:08.866    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 128)   Trusted kmer low bound: 0\n  0:00:08.866    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Gap Closer\n  0:00:08.866    16M / 3G    INFO    General                 (graph_pack.hpp            : 101)   Index refill\n  0:00:08.868    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:08.868    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:08.869    16M / 3G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:08.869    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:08.869    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:09.486     3G / 3G    INFO    General                 (edge_index_builders.hpp   :  82)   Used 10 sequences.\n  0:00:09.492    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:09.785    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:09.785    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:09.967    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:09.999    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:10.019    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9784 bytes occupied (80.3614 bits per kmer).\n  0:00:10.019    16M / 3G    INFO    General                 (edge_index_builders.hpp   : 107)   Collecting edge information from graph, this takes a while.\n  0:00:10.020    16M / 3G    INFO    General                 (edge_index.hpp            :  92)   Index refilled\n  0:00:10.022    16M / 3G    INFO    General                 (gap_closer.cpp            : 159)   Preparing shift maps\n  0:00:10.022    16M / 3G    INFO    General                 (gap_closer.cpp            : 119)   Processing paired reads (takes a while)\n  0:00:10.025    16M / 3G    INFO    General                 (gap_closer.cpp            : 138)   Used 2054 paired reads\n  0:00:10.025    16M / 3G    INFO    General                 (gap_closer.cpp            : 140)   Merging paired indices\n  0:00:10.025    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:10.025    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:10.026    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Raw Simplification\n  0:00:10.027    16M / 3G    INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:10.027    16M / 3G    INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled\n  0:00:10.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:10.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge remover triggered 0 times\n  0:00:10.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial tip clipper\n  0:00:10.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial tip clipper triggered 2 times\n  0:00:10.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial ec remover\n  0:00:10.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial ec remover triggered 0 times\n  0:00:10.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial isolated edge remover\n  0:00:10.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial isolated edge remover triggered 0 times\n  0:00:10.027    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification\n  0:00:10.027    16M / 3G    INFO    General                 (simplification.cpp        : 357)   Graph simplification started\n  0:00:10.027    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00\n..\n   INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:11.300    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:11.301    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:11.301    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:11.301    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:11.301    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:11.301    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:11.301    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:11.301    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:11.302    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.865\n  0:00:11.302    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:11.302    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:11.302    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:11.311    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:11.311    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:11.311    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:11.314    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:11.314    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/235/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:11.314    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/235/working//K33/before_rr.fasta\n  0:00:11.319    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/235/working//K33/assembly_graph.fastg\n  0:00:11.325    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/235/working//K33/simplified_contigs.fasta\n  0:00:11.332    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/235/working//K33/intermediate_contigs.fasta\n  0:00:11.341    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:11.341    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:11.341    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:11.341    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:11.341    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:11.341    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:11.366    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:11.457    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:11.724    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:11.724    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2010 paired reads (97.8578% of all) aligned to long edges\n  0:00:11.730    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.606, deviation = 10.5347, left quantile = 201, right quantile = 228, read length = 100\n  0:00:11.783   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:11.786   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:11.789   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:11.798   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:11.798   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:11.798   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:11.806   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:11.811   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:11.823    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:11.823    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:11.823    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:11.824    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:11.824    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:11.824    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:11.824    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:11.824    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:11.824    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:11.824    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:11.824    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:11.824    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:11.824    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:11.824    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:11.824    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:11.824    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:11.824    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:11.824    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:11.824    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:11.824    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:11.824    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:11.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:11.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:11.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:11.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:11.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:11.825    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:11.825    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:11.825    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:11.825    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:11.826    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:11.826    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:11.826    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/235/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:11.827    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/235/working//K33/before_rr.fasta\n  0:00:11.832    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/235/working//K33/assembly_graph.fastg\n  0:00:11.837    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/235/working//K33/final_contigs.paths\n  0:00:11.847    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/235/working//K33/scaffolds.paths\n  0:00:11.874    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:11.876    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 11 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/235/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/235/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/235/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/235/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/235/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/235/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/235/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/235/working\t--disable-gzip-output\t--only-assembler\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfasta:/galaxy/server/database/objects/5/6/3/dataset_56394c98-2523-45d7-b420-e6da07797ccd.dat\t--pe1-2\tfasta:/galaxy/server/database/objects/3/a/b/dataset_3ab41ca8-d603-4289-b54e-230cebffbcbe.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/235/working\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/5/6/3/dataset_56394c98-2523-45d7-b420-e6da07797ccd.dat']\n      right reads: ['/galaxy/server/database/objects/3/a/b/dataset_3ab41ca8-d603-4289-b54e-230cebffbcbe.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/235/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/235/working/spades.log\n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/235/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/235/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.018     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.018     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.133    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.137     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.285   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.289     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.468   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.675     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.675     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1611\n  0:00:00.675     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.676     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.678     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.678     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.678     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:01.084     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:01.087    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:01.087    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.299    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:01.300    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.425    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:01.427    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.427    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:01.428    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.429    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:01.429    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:02.993     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 974 kmers.\n  0:00:03.006    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.792    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 975 kmers in total.\n  0:00:03.792    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:04.171    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.270    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.349    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.2133 bits per kmer).\n  0:00:04.349    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:04.360    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:04.362    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Condensing graph\n  0:00:04.363    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 355)   Extracting unbranching paths\n  0:00:04.363    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 374)   Extracting unbranching paths finished. 5 sequences extracted\n  0:00:04.364    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 310)   Collecting perfect loops\n  0:00:04.366    16M / 3G    INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 343)   Collecting perfect loops finished. 0 loops collected\n  0:00:04.366    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:04.366    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:04.366    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.405    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 2768 bytes occupied (22.7351 bits per kmer).\n  0:00:04.406    16M / 3G    INFO    General                 (construction.cpp          : 388)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:04.450    16M / 3G    INFO    General                 (construction.cpp          : 508)   Filling coverage and flanking coverage from PHM\n  0:00:04.486    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == EC Threshold Finding\n  0:00:04.486    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 0\n  0:00:04.486    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 356\n  0:00:04.486    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 356. Coverage mad: 44.478\n  0:00:04.486    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:04.540    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:04.692    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:05.120    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:05.867    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:06.987    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:08.865    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 271.705. Fitted coverage std. dev: 78.9849\n  0:00:08.866    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 0.978568\n  0:00:08.866    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 251\n  0:00:08.866    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 135\n  0:00:08.866    16M / 3G    INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 738\n  0:00:08.866    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 112)   Mean coverage was calculated as 271.705\n  0:00:08.866    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 127)   EC coverage threshold value was calculated as 135\n  0:00:08.866    16M / 3G    INFO    General                 (genomic_info_filler.cpp   : 128)   Trusted kmer low bound: 0\n  0:00:08.866    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Gap Closer\n  0:00:08.866    16M / 3G    INFO    General                 (graph_pack.hpp            : 101)   Index refill\n  0:00:08.868    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:08.868    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:08.869    16M / 3G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:08.869    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:08.869    16M / 3G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:09.486     3G / 3G    INFO    General                 (edge_index_builders.hpp   :  82)   Used 10 sequences.\n  0:00:09.492    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:09.785    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 974 kmers in total.\n  0:00:09.785    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:09.967    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:09.999    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:10.019    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9784 bytes occupied (80.3614 bits per kmer).\n  0:00:10.019    16M / 3G    INFO    General                 (edge_index_builders.hpp   : 107)   Collecting edge information from graph, this takes a while.\n  0:00:10.020    16M / 3G    INFO    General                 (edge_index.hpp            :  92)   Index refilled\n  0:00:10.022    16M / 3G    INFO    General                 (gap_closer.cpp            : 159)   Preparing shift maps\n  0:00:10.022    16M / 3G    INFO    General                 (gap_closer.cpp            : 119)   Processing paired reads (takes a while)\n  0:00:10.025    16M / 3G    INFO    General                 (gap_closer.cpp            : 138)   Used 2054 paired reads\n  0:00:10.025    16M / 3G    INFO    General                 (gap_closer.cpp            : 140)   Merging paired indices\n  0:00:10.025    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:10.025    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:10.026    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Raw Simplification\n  0:00:10.027    16M / 3G    INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:10.027    16M / 3G    INFO    General                 (graph_simplification.hpp  : 662)   Flanking coverage based disconnection disabled\n  0:00:10.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:10.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge remover triggered 0 times\n  0:00:10.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial tip clipper\n  0:00:10.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial tip clipper triggered 2 times\n  0:00:10.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial ec remover\n  0:00:10.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial ec remover triggered 0 times\n  0:00:10.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Initial isolated edge remover\n  0:00:10.027    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Initial isolated edge remover triggered 0 times\n  0:00:10.027    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification\n  0:00:10.027    16M / 3G    INFO    General                 (simplification.cpp        : 357)   Graph simplification started\n  0:00:10.027    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00\n..\n   INFO   GapCloser                (gap_closer.cpp            : 346)   Closing short gaps\n  0:00:11.300    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:11.301    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:11.301    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:11.301    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:11.301    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:11.301    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:11.301    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:11.301    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:11.301    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:11.302    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.865\n  0:00:11.302    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:11.302    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:11.302    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:11.311    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:11.311    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:11.311    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:11.314    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:11.314    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/235/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:11.314    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/235/working//K33/before_rr.fasta\n  0:00:11.319    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/235/working//K33/assembly_graph.fastg\n  0:00:11.325    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/235/working//K33/simplified_contigs.fasta\n  0:00:11.332    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/235/working//K33/intermediate_contigs.fasta\n  0:00:11.341    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:11.341    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:11.341    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:11.341    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:11.341    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:11.341    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:11.366    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:11.457    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:11.724    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:11.724    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2010 paired reads (97.8578% of all) aligned to long edges\n  0:00:11.730    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.606, deviation = 10.5347, left quantile = 201, right quantile = 228, read length = 100\n  0:00:11.783   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:11.786   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:11.789   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:11.798   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:11.798   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:11.798   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:11.806   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:11.811   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:11.823    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:11.823    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:11.823    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:11.824    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:11.824    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:11.824    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:11.824    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:11.824    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:11.824    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:11.824    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:11.824    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:11.824    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:11.824    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:11.824    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:11.824    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:11.824    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:11.824    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:11.824    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:11.824    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:11.824    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:11.824    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:11.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:11.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.865\n  0:00:11.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:11.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:11.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:11.825    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:11.825    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:11.825    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:11.825    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:11.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:11.825    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:11.826    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:11.826    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:11.826    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/235/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:11.827    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/235/working//K33/before_rr.fasta\n  0:00:11.832    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/235/working//K33/assembly_graph.fastg\n  0:00:11.837    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/235/working//K33/final_contigs.paths\n  0:00:11.847    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/235/working//K33/scaffolds.paths\n  0:00:11.874    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:11.876    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 11 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/235/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/235/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/235/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/235/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/235/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/235/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/235/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "13 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "13.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:17:47", "plugin": "core", "name": "end_epoch", "raw_value": "1666459067.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:17:34", "plugin": "core", "name": "start_epoch", "raw_value": "1666459054.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 2, "time_seconds": 132.14567375183105, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "f2b37f478c481e10"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "ba22881c5b9685ec"}}, "job": {"model_class": "Job", "id": "e63126dee0018651", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:19:37.132175", "create_time": "2022-10-22T17:17:46.253934", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-ww9pq", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq.gz:/galaxy/server/database/objects/4/2/2/dataset_422f0d9d-bb74-4113-a6e6-630476e47800.dat --pe1-2 fastq.gz:/galaxy/server/database/objects/8/7/d/dataset_87d387b3-14b4-44cc-998d-a400ed8abdfe.dat && python '/galaxy/server/database/jobs_directory/000/240/configs/tmpbhwi8w_7' < contigs.fasta > '/galaxy/server/database/objects/0/7/d/dataset_07d074d8-66d9-4396-bd78-014cbb630324.dat' && python '/galaxy/server/database/jobs_directory/000/240/configs/tmpbhwi8w_7' < scaffolds.fasta > '/galaxy/server/database/objects/e/8/5/dataset_e85d0b5a-5abe-4039-8b76-a019aa999ea3.dat'", "traceback": null, "params": {"__input_ext": "\"fastq.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 288, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 289, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "f2b37f478c481e10", "src": "hda", "uuid": "422f0d9d-bb74-4113-a6e6-630476e47800"}, "libraries_0|files_0|rev_reads": {"id": "ba22881c5b9685ec", "src": "hda", "uuid": "87d387b3-14b4-44cc-998d-a400ed8abdfe"}}, "outputs": {"out_log": {"id": "1722c024ac8c4951", "src": "hda", "uuid": "6d38e6e9-16c9-4e08-bf40-dc6ed8df7830"}, "out_scaffolds": {"id": "33c173a90a74a375", "src": "hda", "uuid": "f98755e2-0e10-4a56-85e9-0be6c8caa562"}, "out_contigs": {"id": "f3abdfa9d5ee2ab5", "src": "hda", "uuid": "1728d315-ca5a-444e-8c81-58c87fc16cb2"}, "out_scaffold_stats": {"id": "ad64879e14d78673", "src": "hda", "uuid": "e85d0b5a-5abe-4039-8b76-a019aa999ea3"}, "out_contig_stats": {"id": "6c9151949c197a10", "src": "hda", "uuid": "07d074d8-66d9-4396-bd78-014cbb630324"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/240/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/4/2/2/dataset_422f0d9d-bb74-4113-a6e6-630476e47800.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/8/7/d/dataset_87d387b3-14b4-44cc-998d-a400ed8abdfe.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/240/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/4/2/2/dataset_422f0d9d-bb74-4113-a6e6-630476e47800.dat']\n      right reads: ['/galaxy/server/database/objects/8/7/d/dataset_87d387b3-14b4-44cc-998d-a400ed8abdfe.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/240/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/240/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/240/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/240/working/corrected/configs/config.info\n  0:00:00.004     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.004     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.004     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.007     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.007     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.007     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.012     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.012     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.014     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.014     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.014     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.014     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/4/2/2/dataset_422f0d9d-bb74-4113-a6e6-630476e47800.dat\n  0:00:01.746     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/8/7/d/dataset_87d387b3-14b4-44cc-998d-a400ed8abdfe.dat\n  0:00:03.551     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:03.560    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:04.402    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:04.402    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:04.881    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:05.094    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:05.184    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:05.189    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:05.199    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:05.205    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:05.261    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:05.262    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:05.262    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/4/2/2/dataset_422f0d9d-bb74-4113-a6e6-630476e47800.dat\n  0:00:05.359    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/8/7/d/dataset_87d387b3-14b4-44cc-998d-a400ed8abdfe.dat\n  0:00:05.413    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:05.413    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:05.413    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:05.431    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:05.431    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:05.431    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:05.431    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:05.431    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:05.431    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:05.431    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:05.431    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:05.431    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:05.433    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:05.433    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:05.485    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:05.486    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:05.486    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:05.486    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/4/2/2/dataset_422f0d9d-bb74-4113-a6e6-630476e47800.dat and /galaxy/server/database/objects/8/7/d/dataset_87d387b3-14b4-44cc-998d-a400ed8abdfe.dat\n  0:00:05.519    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:05.535    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:05.539    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:05.603    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:05.604    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:05.604    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/240/working/corrected/corrected.yaml\n  0:00:05.617    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/240/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/240/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/240/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.018     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.018     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.121    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.135     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.308   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.314     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.466   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.656     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.656     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.656     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.657     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.658     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.659     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.659     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:01.087     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:01.089    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:01.090    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.301    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:01.302    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.407    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:01.408    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.408    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:01.409    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.410    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:01.410    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:02.980     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:02.994    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.723    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:03.723    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:04.143    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.275    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.360    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:04.360    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:04.364    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:04.367    16M / 3G    INFO    General                 (stage.cpp                 : 101)\n..\n0:00:14.294    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:14.297    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:14.297    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:14.298    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:14.298    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:14.298    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:14.298    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:14.299    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:14.299    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:14.312    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:14.314    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:14.317    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:14.318    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:14.318    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:14.318    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:14.318    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:14.318    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:14.318    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:14.318    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:14.318    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:14.318    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:14.318    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:14.345    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:14.345    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:14.345    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:14.362    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:14.362    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/240/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:14.363    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/240/working//K33/before_rr.fasta\n  0:00:14.377    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/240/working//K33/assembly_graph.fastg\n  0:00:14.389    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/240/working//K33/simplified_contigs.fasta\n  0:00:14.403    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/240/working//K33/intermediate_contigs.fasta\n  0:00:14.433    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:14.434    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:14.434    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:14.434    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:14.434    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:14.434    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:14.468    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:14.621    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:14.976    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:14.980    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:14.991    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:15.076   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:15.086   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:15.089   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:15.095   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:15.095   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:15.095   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:15.111   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:15.118   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:15.147    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:15.148    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:15.148    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:15.148    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:15.149    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:15.149    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:15.149    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:15.149    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:15.149    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:15.149    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:15.150    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:15.151    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:15.151    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:15.151    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:15.151    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:15.152    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:15.152    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:15.152    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:15.152    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:15.152    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:15.152    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:15.154    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:15.157    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:15.157    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:15.157    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:15.157    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:15.157    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:15.157    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:15.158    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:15.158    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:15.158    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:15.158    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:15.158    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:15.158    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/240/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:15.161    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/240/working//K33/before_rr.fasta\n  0:00:15.174    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/240/working//K33/assembly_graph.fastg\n  0:00:15.192    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/240/working//K33/final_contigs.paths\n  0:00:15.214    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/240/working//K33/scaffolds.paths\n  0:00:15.264    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:15.268    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 15 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/240/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/240/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/240/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/240/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/240/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/240/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/240/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/240/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/240/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/4/2/2/dataset_422f0d9d-bb74-4113-a6e6-630476e47800.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/8/7/d/dataset_87d387b3-14b4-44cc-998d-a400ed8abdfe.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/240/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/4/2/2/dataset_422f0d9d-bb74-4113-a6e6-630476e47800.dat']\n      right reads: ['/galaxy/server/database/objects/8/7/d/dataset_87d387b3-14b4-44cc-998d-a400ed8abdfe.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/240/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/240/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/240/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/240/working/corrected/configs/config.info\n  0:00:00.004     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.004     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.004     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.007     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.007     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.007     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.012     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.012     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.014     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.014     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.014     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.014     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/4/2/2/dataset_422f0d9d-bb74-4113-a6e6-630476e47800.dat\n  0:00:01.746     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/8/7/d/dataset_87d387b3-14b4-44cc-998d-a400ed8abdfe.dat\n  0:00:03.551     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:03.560    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:04.402    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:04.402    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:04.881    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:05.094    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:05.184    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:05.189    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:05.199    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:05.205    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:05.261    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:05.262    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:05.262    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/4/2/2/dataset_422f0d9d-bb74-4113-a6e6-630476e47800.dat\n  0:00:05.359    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/8/7/d/dataset_87d387b3-14b4-44cc-998d-a400ed8abdfe.dat\n  0:00:05.413    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:05.413    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:05.413    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:05.431    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:05.431    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:05.431    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:05.431    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:05.431    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:05.431    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:05.431    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:05.431    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:05.431    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:05.433    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:05.433    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:05.485    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:05.486    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:05.486    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:05.486    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/4/2/2/dataset_422f0d9d-bb74-4113-a6e6-630476e47800.dat and /galaxy/server/database/objects/8/7/d/dataset_87d387b3-14b4-44cc-998d-a400ed8abdfe.dat\n  0:00:05.519    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:05.535    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:05.539    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:05.603    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:05.604    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:05.604    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/240/working/corrected/corrected.yaml\n  0:00:05.617    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/240/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/240/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/240/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.018     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.018     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.121    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.135     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.308   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.314     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.466   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.656     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.656     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.656     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.657     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.658     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.659     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.659     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:01.087     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:01.089    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:01.090    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.301    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:01.302    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.407    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:01.408    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.408    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:01.409    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.410    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:01.410    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:02.980     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:02.994    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.723    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:03.723    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:04.143    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.275    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.360    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:04.360    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:04.364    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:04.367    16M / 3G    INFO    General                 (stage.cpp                 : 101)\n..\n0:00:14.294    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:14.297    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:14.297    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:14.298    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:14.298    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:14.298    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:14.298    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:14.299    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:14.299    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:14.312    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:14.314    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:14.317    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:14.318    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:14.318    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:14.318    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:14.318    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:14.318    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:14.318    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:14.318    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:14.318    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:14.318    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:14.318    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:14.345    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:14.345    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:14.345    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:14.362    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:14.362    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/240/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:14.363    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/240/working//K33/before_rr.fasta\n  0:00:14.377    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/240/working//K33/assembly_graph.fastg\n  0:00:14.389    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/240/working//K33/simplified_contigs.fasta\n  0:00:14.403    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/240/working//K33/intermediate_contigs.fasta\n  0:00:14.433    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:14.434    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:14.434    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:14.434    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:14.434    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:14.434    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:14.468    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:14.621    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:14.976    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:14.980    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:14.991    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:15.076   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:15.086   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:15.089   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:15.095   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:15.095   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:15.095   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:15.111   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:15.118   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:15.147    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:15.148    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:15.148    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:15.148    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:15.149    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:15.149    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:15.149    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:15.149    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:15.149    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:15.149    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:15.150    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:15.151    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:15.151    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:15.151    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:15.151    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:15.152    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:15.152    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:15.152    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:15.152    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:15.152    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:15.152    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:15.154    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:15.157    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:15.157    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:15.157    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:15.157    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:15.157    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:15.157    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:15.158    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:15.158    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:15.158    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:15.158    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:15.158    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:15.158    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:15.158    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:15.158    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/240/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:15.161    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/240/working//K33/before_rr.fasta\n  0:00:15.174    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/240/working//K33/assembly_graph.fastg\n  0:00:15.192    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/240/working//K33/final_contigs.paths\n  0:00:15.214    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/240/working//K33/scaffolds.paths\n  0:00:15.264    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:15.268    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 15 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/240/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/240/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/240/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/240/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/240/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/240/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/240/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/240/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "22 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "22.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:19:21", "plugin": "core", "name": "end_epoch", "raw_value": "1666459161.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:18:59", "plugin": "core", "name": "start_epoch", "raw_value": "1666459139.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 3, "time_seconds": 160.76747298240662, "inputs": {"sc": false, "careful": false, "kmer_choice|auto_kmer_choice": true, "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "32efb262293b7eab"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "c31fedf45acf7ca2"}}, "job": {"model_class": "Job", "id": "ebbe824960cc2a97", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:20:18.862717", "create_time": "2022-10-22T17:17:59.750303", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-h74m5", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250}  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/d/6/9/dataset_d6919493-3696-4dc3-8042-81a355a77b70.dat --pe1-2 fastq:/galaxy/server/database/objects/9/4/9/dataset_9497bcd1-ad51-4940-9dba-225d6d7ee05a.dat && python '/galaxy/server/database/jobs_directory/000/241/configs/tmpi4hl3680' < contigs.fasta > '/galaxy/server/database/objects/b/9/a/dataset_b9a3fc58-48ef-41bb-b61e-e1b03a21cba7.dat' && python '/galaxy/server/database/jobs_directory/000/241/configs/tmpi4hl3680' < scaffolds.fasta > '/galaxy/server/database/objects/6/0/f/dataset_60f65418-2c02-4b30-992f-36be9ebf7b72.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 290, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 291, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 1, \"auto_kmer_choice\": \"true\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "32efb262293b7eab", "src": "hda", "uuid": "d6919493-3696-4dc3-8042-81a355a77b70"}, "libraries_0|files_0|rev_reads": {"id": "c31fedf45acf7ca2", "src": "hda", "uuid": "9497bcd1-ad51-4940-9dba-225d6d7ee05a"}}, "outputs": {"out_log": {"id": "b3dbeb507c37c108", "src": "hda", "uuid": "9779b226-ee53-4fdc-a0a9-78a6364cd232"}, "out_scaffolds": {"id": "44c5bd0951c5d768", "src": "hda", "uuid": "b6c20d7d-a349-459d-ba10-7b946ef90712"}, "out_contigs": {"id": "e6b5b2d2ceafefee", "src": "hda", "uuid": "5ecfbde4-fd8b-4ba7-abd6-4cbaa56bb654"}, "out_scaffold_stats": {"id": "930e6a69619f035c", "src": "hda", "uuid": "60f65418-2c02-4b30-992f-36be9ebf7b72"}, "out_contig_stats": {"id": "acf5bef2b7a5899e", "src": "hda", "uuid": "b9a3fc58-48ef-41bb-b61e-e1b03a21cba7"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/241/working\t--disable-gzip-output\t-t\t4\t-m\t39\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/d/6/9/dataset_d6919493-3696-4dc3-8042-81a355a77b70.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/9/4/9/dataset_9497bcd1-ad51-4940-9dba-225d6d7ee05a.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/241/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/d/6/9/dataset_d6919493-3696-4dc3-8042-81a355a77b70.dat']\n      right reads: ['/galaxy/server/database/objects/9/4/9/dataset_9497bcd1-ad51-4940-9dba-225d6d7ee05a.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: automatic selection based on read length\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/241/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/241/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/241/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/241/working/corrected/configs/config.info\n  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.005     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.008     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.008     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.008     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.011     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.011     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.013     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.013     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.013     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.013     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/6/9/dataset_d6919493-3696-4dc3-8042-81a355a77b70.dat\n  0:00:01.782     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/9/4/9/dataset_9497bcd1-ad51-4940-9dba-225d6d7ee05a.dat\n  0:00:03.512     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:03.525    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:04.289    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:04.290    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:04.718    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.811    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.910    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:04.918    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:04.925    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:04.932    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:04.970    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:04.970    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:04.970    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/6/9/dataset_d6919493-3696-4dc3-8042-81a355a77b70.dat\n  0:00:05.026    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/9/4/9/dataset_9497bcd1-ad51-4940-9dba-225d6d7ee05a.dat\n  0:00:05.086    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:05.087    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:05.087    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:05.101    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:05.102    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:05.102    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:05.102    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:05.102    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:05.102    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:05.102    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:05.102    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:05.102    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:05.105    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:05.105    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:05.133    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:05.133    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:05.134    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:05.134    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/d/6/9/dataset_d6919493-3696-4dc3-8042-81a355a77b70.dat and /galaxy/server/database/objects/9/4/9/dataset_9497bcd1-ad51-4940-9dba-225d6d7ee05a.dat\n  0:00:05.161    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:05.170    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:05.179    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:05.245    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:05.245    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:05.246    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/241/working/corrected/corrected.yaml\n  0:00:05.258    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/241/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K21\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/241/working/K21/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/241/working/dataset.info) with K=21\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.020     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.020     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.119    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.125     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.303   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.311     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.472   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.675     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.675     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.675     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.676     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.678     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.678     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.678     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:01.150     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:01.152    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:01.152    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.368    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 984 kmers in total.\n  0:00:01.368    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.476    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:01.477    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.477    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:01.478    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.478    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:01.478    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:03.241     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 984 kmers.\n  0:00:03.254    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:04.166    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 985 kmers in total.\n  0:00:04.167    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:04.637    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.740    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.819    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (79.399 bits per kmer).\n  0:00:04.819    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:04.825    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:04.831    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Early tip clipping\n  0:00:04.832    16M / 3G    INFO    General                 (construction.cpp          : 2\n..\n11.217    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:11.218    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:11.218    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:11.218    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:11.218    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:11.219    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:11.219    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:11.219    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:11.219    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 140.62\n  0:00:11.219    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:11.219    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:11.219    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:11.244    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:11.244    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:11.244    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:11.254    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:11.254    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/241/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:11.255    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/241/working//K55/before_rr.fasta\n  0:00:11.273    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/241/working//K55/assembly_graph.fastg\n  0:00:11.292    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/241/working//K55/simplified_contigs.fasta\n  0:00:11.308    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/241/working//K55/intermediate_contigs.fasta\n  0:00:11.330    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:11.330    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:11.330    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:11.330    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 945\n  0:00:11.330    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:11.330    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:11.364    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:11.523    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:12.010    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:12.010    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1636 paired reads (79.6495% of all) aligned to long edges\n  0:00:12.029    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.696, deviation = 10.4821, left quantile = 201, right quantile = 228, read length = 100\n  0:00:12.126   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:12.134   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:12.139   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:12.144   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:12.145   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:12.145   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:12.160   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:12.166   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:12.210    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:12.210    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:12.210    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:12.210    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:12.211    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:12.211    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:12.211    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:12.211    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:12.211    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:12.211    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:12.212    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:12.215    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:12.215    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:12.215    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:12.215    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:12.215    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:12.215    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:12.215    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:12.215    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:12.215    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:12.215    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:12.217    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:12.220    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:12.220    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:12.221    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:12.221    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:12.221    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:12.221    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:12.221    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:12.221    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:12.221    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:12.221    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:12.221    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/241/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:12.223    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/241/working//K55/before_rr.fasta\n  0:00:12.247    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/241/working//K55/assembly_graph.fastg\n  0:00:12.257    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/241/working//K55/final_contigs.paths\n  0:00:12.280    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/241/working//K55/scaffolds.paths\n  0:00:12.334    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:12.340    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 12 seconds\n\n===== Assembling finished. Used k-mer sizes: 21, 33, 55 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/241/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/241/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/241/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/241/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/241/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/241/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/241/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/241/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/241/working\t--disable-gzip-output\t-t\t4\t-m\t39\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/d/6/9/dataset_d6919493-3696-4dc3-8042-81a355a77b70.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/9/4/9/dataset_9497bcd1-ad51-4940-9dba-225d6d7ee05a.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/241/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/d/6/9/dataset_d6919493-3696-4dc3-8042-81a355a77b70.dat']\n      right reads: ['/galaxy/server/database/objects/9/4/9/dataset_9497bcd1-ad51-4940-9dba-225d6d7ee05a.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: automatic selection based on read length\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/241/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/241/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/241/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/241/working/corrected/configs/config.info\n  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.005     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.008     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.008     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.008     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.011     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.011     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.013     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.013     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.013     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.013     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/d/6/9/dataset_d6919493-3696-4dc3-8042-81a355a77b70.dat\n  0:00:01.782     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/9/4/9/dataset_9497bcd1-ad51-4940-9dba-225d6d7ee05a.dat\n  0:00:03.512     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:03.525    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:04.289    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:04.290    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:04.718    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.811    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.910    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:04.918    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:04.925    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:04.932    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:04.970    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:04.970    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:04.970    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/d/6/9/dataset_d6919493-3696-4dc3-8042-81a355a77b70.dat\n  0:00:05.026    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/9/4/9/dataset_9497bcd1-ad51-4940-9dba-225d6d7ee05a.dat\n  0:00:05.086    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:05.087    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:05.087    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:05.101    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:05.102    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:05.102    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:05.102    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:05.102    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:05.102    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:05.102    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:05.102    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:05.102    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:05.105    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:05.105    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:05.133    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:05.133    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:05.134    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:05.134    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/d/6/9/dataset_d6919493-3696-4dc3-8042-81a355a77b70.dat and /galaxy/server/database/objects/9/4/9/dataset_9497bcd1-ad51-4940-9dba-225d6d7ee05a.dat\n  0:00:05.161    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:05.170    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:05.179    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:05.245    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:05.245    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:05.246    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/241/working/corrected/corrected.yaml\n  0:00:05.258    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/241/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K21\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/241/working/K21/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/241/working/dataset.info) with K=21\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.020     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.020     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.119    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.125     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.303   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.311     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.472   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.675     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.675     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.675     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.676     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.678     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.678     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.678     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:01.150     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:01.152    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:01.152    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.368    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 984 kmers in total.\n  0:00:01.368    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.476    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:01.477    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.477    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:01.478    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.478    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:01.478    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:03.241     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 984 kmers.\n  0:00:03.254    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:04.166    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 985 kmers in total.\n  0:00:04.167    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:04.637    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.740    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.819    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (79.399 bits per kmer).\n  0:00:04.819    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:04.825    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:04.831    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Early tip clipping\n  0:00:04.832    16M / 3G    INFO    General                 (construction.cpp          : 2\n..\n11.217    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:11.218    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:11.218    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:11.218    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:11.218    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:11.219    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:11.219    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:11.219    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:11.219    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:11.219    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 140.62\n  0:00:11.219    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:11.219    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:11.219    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:11.244    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:11.244    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:11.244    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:11.254    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:11.254    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/241/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:11.255    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/241/working//K55/before_rr.fasta\n  0:00:11.273    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/241/working//K55/assembly_graph.fastg\n  0:00:11.292    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/241/working//K55/simplified_contigs.fasta\n  0:00:11.308    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/241/working//K55/intermediate_contigs.fasta\n  0:00:11.330    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:11.330    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:11.330    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:11.330    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 945\n  0:00:11.330    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:11.330    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:11.364    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:11.523    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:12.010    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:12.010    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1636 paired reads (79.6495% of all) aligned to long edges\n  0:00:12.029    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.696, deviation = 10.4821, left quantile = 201, right quantile = 228, read length = 100\n  0:00:12.126   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:12.134   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:12.139   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:12.144   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:12.145   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:12.145   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:12.160   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:12.166   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:12.210    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:12.210    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:12.210    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:12.210    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:12.211    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:12.211    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:12.211    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:12.211    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:12.211    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:12.211    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:12.212    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:12.215    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:12.215    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:12.215    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:12.215    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:12.215    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:12.215    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:12.215    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:12.215    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:12.215    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:12.215    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:12.217    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:12.220    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:12.220    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 140.62\n  0:00:12.221    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:12.221    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:12.221    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:12.221    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:12.221    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:12.221    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:12.221    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:12.221    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:12.221    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:12.221    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:12.221    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/241/working//K55/assembly_graph_with_scaffolds.gfa\n  0:00:12.223    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/241/working//K55/before_rr.fasta\n  0:00:12.247    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/241/working//K55/assembly_graph.fastg\n  0:00:12.257    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/241/working//K55/final_contigs.paths\n  0:00:12.280    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/241/working//K55/scaffolds.paths\n  0:00:12.334    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:12.340    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 12 seconds\n\n===== Assembling finished. Used k-mer sizes: 21, 33, 55 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/241/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/241/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/241/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/241/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/241/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/241/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/241/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/241/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "38 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "38.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:20:04", "plugin": "core", "name": "end_epoch", "raw_value": "1666459204.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:19:26", "plugin": "core", "name": "start_epoch", "raw_value": "1666459166.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 4, "time_seconds": 161.15848779678345, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "77", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "e6ceaddfe4acd9d5"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "d4f139b850b9be6d"}}, "job": {"model_class": "Job", "id": "2151a231f353a5ad", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:20:44.002432", "create_time": "2022-10-22T17:18:18.054270", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-rhjph", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"77\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/6/6/a/dataset_66a00032-8d96-4041-b61e-9fee548c942b.dat --pe1-2 fastq:/galaxy/server/database/objects/8/8/4/dataset_88411f1d-9112-4043-a321-c93862deca05.dat && python '/galaxy/server/database/jobs_directory/000/244/configs/tmpapzmar9t' < contigs.fasta > '/galaxy/server/database/objects/2/a/d/dataset_2ada24f1-5ffc-4130-9a3b-ce708f46ba3d.dat' && python '/galaxy/server/database/jobs_directory/000/244/configs/tmpapzmar9t' < scaffolds.fasta > '/galaxy/server/database/objects/4/1/4/dataset_41432929-6bbd-4bb3-9b0a-77237a88cd66.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 302, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 303, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"77\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "e6ceaddfe4acd9d5", "src": "hda", "uuid": "66a00032-8d96-4041-b61e-9fee548c942b"}, "libraries_0|files_0|rev_reads": {"id": "d4f139b850b9be6d", "src": "hda", "uuid": "88411f1d-9112-4043-a321-c93862deca05"}}, "outputs": {"out_log": {"id": "1898da1f9f8d0073", "src": "hda", "uuid": "f9df255b-8638-4944-a069-0b19625ab8c2"}, "out_scaffolds": {"id": "94676113f9c88ca4", "src": "hda", "uuid": "3a9ba947-7687-4808-b497-be696e9a45e3"}, "out_contigs": {"id": "5d3badfbde532937", "src": "hda", "uuid": "8bc35bdc-e320-4293-99c0-742081f1f01e"}, "out_scaffold_stats": {"id": "242537a826af0287", "src": "hda", "uuid": "41432929-6bbd-4bb3-9b0a-77237a88cd66"}, "out_contig_stats": {"id": "57a4ea9f6c23cbae", "src": "hda", "uuid": "2ada24f1-5ffc-4130-9a3b-ce708f46ba3d"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/244/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t77\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/6/6/a/dataset_66a00032-8d96-4041-b61e-9fee548c942b.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/8/8/4/dataset_88411f1d-9112-4043-a321-c93862deca05.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/244/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/6/6/a/dataset_66a00032-8d96-4041-b61e-9fee548c942b.dat']\n      right reads: ['/galaxy/server/database/objects/8/8/4/dataset_88411f1d-9112-4043-a321-c93862deca05.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [77]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/244/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/244/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/244/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/244/working/corrected/configs/config.info\n  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.005     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.010     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.010     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.010     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.013     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.014     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.016     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.016     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.016     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.016     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/6/6/a/dataset_66a00032-8d96-4041-b61e-9fee548c942b.dat\n  0:00:01.783     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/8/8/4/dataset_88411f1d-9112-4043-a321-c93862deca05.dat\n  0:00:03.545     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:03.552    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:04.312    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:04.312    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:04.694    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.790    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.857    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:04.863    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:04.873    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:04.876    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:04.907    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:04.908    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:04.908    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/6/6/a/dataset_66a00032-8d96-4041-b61e-9fee548c942b.dat\n  0:00:04.940    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/8/8/4/dataset_88411f1d-9112-4043-a321-c93862deca05.dat\n  0:00:04.997    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:04.997    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:04.997    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:05.016    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:05.017    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:05.017    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:05.017    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:05.017    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:05.017    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:05.017    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:05.017    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:05.017    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:05.019    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:05.022    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:05.052    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:05.052    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:05.052    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:05.052    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/6/6/a/dataset_66a00032-8d96-4041-b61e-9fee548c942b.dat and /galaxy/server/database/objects/8/8/4/dataset_88411f1d-9112-4043-a321-c93862deca05.dat\n  0:00:05.080    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:05.087    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:05.090    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:05.141    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:05.142    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:05.142    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/244/working/corrected/corrected.yaml\n  0:00:05.163    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/244/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K77\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/244/working/K77/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/244/working/dataset.info) with K=77\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.020     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.020     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.101    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.106     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.234   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.241     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.375   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.539     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.539     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.539     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.540     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.542     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.542     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.542     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1398101\n  0:00:00.871     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.873    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.873    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.065    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 876 kmers in total.\n  0:00:01.066    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.135    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:01.137    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.137    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:01.139    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.139    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:01.139    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 349525\n  0:00:02.663     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 876 kmers.\n  0:00:02.675    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.419    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 879 kmers in total.\n  0:00:03.419    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:03.916    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.119    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.212    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9736 bytes occupied (88.6098 bits per kmer).\n  0:00:04.212    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:04.220    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:04.223    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n0:00:10.072    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:10.075    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:10.076    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:10.076    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:10.076    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:10.076    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:10.076    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:10.076    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:10.076    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:10.077    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:10.077    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:10.078    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:10.078    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:10.078    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:10.078    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:10.078    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:10.079    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:10.079    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:10.079    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 64.4594\n  0:00:10.079    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:10.079    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:10.079    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:10.101    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:10.101    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:10.101    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:10.109    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.109    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/244/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:10.110    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/244/working//K77/before_rr.fasta\n  0:00:10.122    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/244/working//K77/assembly_graph.fastg\n  0:00:10.133    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/244/working//K77/simplified_contigs.fasta\n  0:00:10.146    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/244/working//K77/intermediate_contigs.fasta\n  0:00:10.167    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:10.167    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:10.167    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:10.167    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 899\n  0:00:10.167    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:10.167    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:10.196    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.321    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.668    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:10.669    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1120 paired reads (54.5278% of all) aligned to long edges\n  0:00:10.682    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.791, deviation = 10.2816, left quantile = 201, right quantile = 228, read length = 100\n  0:00:10.760   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:10.770   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.776   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.784   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:10.784   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:10.785   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:10.800   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.806   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.828    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:10.828    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:10.828    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:10.828    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:10.829    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.829    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.829    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.829    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:10.829    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:10.829    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:10.829    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.829    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.830    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:10.830    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:10.830    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.830    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.830    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.830    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:10.830    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:10.830    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:10.830    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:10.834    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:10.834    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:10.835    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:10.835    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:10.835    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:10.835    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.835    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.835    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.835    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.835    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:10.835    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.835    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/244/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:10.835    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/244/working//K77/before_rr.fasta\n  0:00:10.849    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/244/working//K77/assembly_graph.fastg\n  0:00:10.864    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/244/working//K77/final_contigs.paths\n  0:00:10.888    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/244/working//K77/scaffolds.paths\n  0:00:10.939    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.944    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 77 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/244/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/244/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/244/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/244/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/244/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/244/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/244/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/244/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/244/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t77\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/6/6/a/dataset_66a00032-8d96-4041-b61e-9fee548c942b.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/8/8/4/dataset_88411f1d-9112-4043-a321-c93862deca05.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/244/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/6/6/a/dataset_66a00032-8d96-4041-b61e-9fee548c942b.dat']\n      right reads: ['/galaxy/server/database/objects/8/8/4/dataset_88411f1d-9112-4043-a321-c93862deca05.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [77]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/244/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/244/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/244/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/244/working/corrected/configs/config.info\n  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.005     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.010     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.010     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.010     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.013     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.014     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.016     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.016     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.016     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.016     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/6/6/a/dataset_66a00032-8d96-4041-b61e-9fee548c942b.dat\n  0:00:01.783     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/8/8/4/dataset_88411f1d-9112-4043-a321-c93862deca05.dat\n  0:00:03.545     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:03.552    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:04.312    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:04.312    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:04.694    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.790    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.857    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:04.863    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:04.873    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:04.876    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:04.907    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:04.908    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:04.908    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/6/6/a/dataset_66a00032-8d96-4041-b61e-9fee548c942b.dat\n  0:00:04.940    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/8/8/4/dataset_88411f1d-9112-4043-a321-c93862deca05.dat\n  0:00:04.997    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:04.997    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:04.997    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:05.016    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:05.017    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:05.017    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:05.017    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:05.017    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:05.017    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:05.017    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:05.017    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:05.017    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:05.019    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:05.022    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:05.052    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:05.052    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:05.052    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:05.052    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/6/6/a/dataset_66a00032-8d96-4041-b61e-9fee548c942b.dat and /galaxy/server/database/objects/8/8/4/dataset_88411f1d-9112-4043-a321-c93862deca05.dat\n  0:00:05.080    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:05.087    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:05.090    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:05.141    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:05.142    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:05.142    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/244/working/corrected/corrected.yaml\n  0:00:05.163    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/244/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K77\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/244/working/K77/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/244/working/dataset.info) with K=77\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.020     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.020     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.101    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.106     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.234   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.241     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.375   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.539     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.539     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.539     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.540     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.542     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.542     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.542     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1398101\n  0:00:00.871     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.873    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.873    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.065    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 876 kmers in total.\n  0:00:01.066    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.135    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:01.137    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.137    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:01.139    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.139    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:01.139    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 349525\n  0:00:02.663     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 876 kmers.\n  0:00:02.675    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.419    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 879 kmers in total.\n  0:00:03.419    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:03.916    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.119    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.212    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9736 bytes occupied (88.6098 bits per kmer).\n  0:00:04.212    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:04.220    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:04.223    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n0:00:10.072    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:10.075    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:10.076    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:10.076    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:10.076    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:10.076    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:10.076    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:10.076    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:10.076    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:10.077    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:10.077    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:10.078    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:10.078    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:10.078    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:10.078    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:10.078    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:10.079    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:10.079    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:10.079    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 64.4594\n  0:00:10.079    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:10.079    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:10.079    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:10.101    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:10.101    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:10.101    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:10.109    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.109    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/244/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:10.110    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/244/working//K77/before_rr.fasta\n  0:00:10.122    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/244/working//K77/assembly_graph.fastg\n  0:00:10.133    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/244/working//K77/simplified_contigs.fasta\n  0:00:10.146    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/244/working//K77/intermediate_contigs.fasta\n  0:00:10.167    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:10.167    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:10.167    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:10.167    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 899\n  0:00:10.167    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:10.167    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:10.196    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.321    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.668    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:10.669    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   1120 paired reads (54.5278% of all) aligned to long edges\n  0:00:10.682    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.791, deviation = 10.2816, left quantile = 201, right quantile = 228, read length = 100\n  0:00:10.760   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:10.770   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.776   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.784   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:10.784   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:10.785   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:10.800   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.806   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.828    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:10.828    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:10.828    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:10.828    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:10.829    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.829    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.829    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.829    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:10.829    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:10.829    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:10.829    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.829    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.830    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:10.830    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:10.830    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.830    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.830    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.830    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:10.830    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:10.830    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:10.830    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:10.834    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:10.834    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:10.835    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 64.4594\n  0:00:10.835    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:10.835    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:10.835    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.835    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.835    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.835    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.835    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.835    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.835    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:10.835    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.835    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/244/working//K77/assembly_graph_with_scaffolds.gfa\n  0:00:10.835    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/244/working//K77/before_rr.fasta\n  0:00:10.849    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/244/working//K77/assembly_graph.fastg\n  0:00:10.864    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/244/working//K77/final_contigs.paths\n  0:00:10.888    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/244/working//K77/scaffolds.paths\n  0:00:10.939    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.944    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 77 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/244/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/244/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/244/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/244/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/244/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/244/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/244/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/244/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "17 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "17.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:20:27", "plugin": "core", "name": "end_epoch", "raw_value": "1666459227.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:20:10", "plugin": "core", "name": "start_epoch", "raw_value": "1666459210.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 5, "time_seconds": 161.15471053123474, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "8452bff73d723785"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "469d7466804be26d"}, "contig_graph_out": true, "scaffold_graph_out": true}, "job": {"model_class": "Job", "id": "ca28c5c74b900b4f", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:21:04.138508", "create_time": "2022-10-22T17:18:42.670800", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-tctxz", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/b/1/9/dataset_b19e7d00-52aa-4329-a2ba-b11e0e3be21f.dat --pe1-2 fastq:/galaxy/server/database/objects/2/f/1/dataset_2f12d997-3a56-4f29-87ff-26406051935a.dat && python '/galaxy/server/database/jobs_directory/000/247/configs/tmphmzupy7q' < contigs.fasta > '/galaxy/server/database/objects/0/e/b/dataset_0ebf6a52-7b1c-485c-b55c-07ee1deed05b.dat' && python '/galaxy/server/database/jobs_directory/000/247/configs/tmphmzupy7q' < scaffolds.fasta > '/galaxy/server/database/objects/f/e/d/dataset_fed9ef3d-6aad-427d-8e45-6850bcb29af0.dat'", "traceback": null, "params": {"__input_ext": "\"fastq\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"true\"", "contig_graph_out": "\"true\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 309, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 310, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "8452bff73d723785", "src": "hda", "uuid": "b19e7d00-52aa-4329-a2ba-b11e0e3be21f"}, "libraries_0|files_0|rev_reads": {"id": "469d7466804be26d", "src": "hda", "uuid": "2f12d997-3a56-4f29-87ff-26406051935a"}}, "outputs": {"scaffold_graph": {"id": "655a6dccf80063df", "src": "hda", "uuid": "8b0efa6c-56fb-44c4-95a8-ff7c3ebd37e5"}, "contig_graph": {"id": "c7ec0940083d64ec", "src": "hda", "uuid": "1baaab33-32cb-4b28-a9b3-c82890011e73"}, "out_log": {"id": "33f44240720cff1e", "src": "hda", "uuid": "19d54304-fcff-4d92-872c-fe34c3359e68"}, "out_scaffolds": {"id": "42f127e6913c49fe", "src": "hda", "uuid": "7f96f804-19de-412f-b062-b2c65a1370a7"}, "out_contigs": {"id": "1b42ccb37119537a", "src": "hda", "uuid": "cfc3a0d4-9713-41e4-9e60-bb08e7c4f32d"}, "out_scaffold_stats": {"id": "e007db693687f7a9", "src": "hda", "uuid": "fed9ef3d-6aad-427d-8e45-6850bcb29af0"}, "out_contig_stats": {"id": "0af9b97856bab0fd", "src": "hda", "uuid": "0ebf6a52-7b1c-485c-b55c-07ee1deed05b"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/247/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/b/1/9/dataset_b19e7d00-52aa-4329-a2ba-b11e0e3be21f.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/2/f/1/dataset_2f12d997-3a56-4f29-87ff-26406051935a.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/247/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/b/1/9/dataset_b19e7d00-52aa-4329-a2ba-b11e0e3be21f.dat']\n      right reads: ['/galaxy/server/database/objects/2/f/1/dataset_2f12d997-3a56-4f29-87ff-26406051935a.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/247/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/247/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/247/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/247/working/corrected/configs/config.info\n  0:00:00.006     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.006     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.006     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.014     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.014     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.014     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.019     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.019     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.023     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.023     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.023     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.023     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/b/1/9/dataset_b19e7d00-52aa-4329-a2ba-b11e0e3be21f.dat\n  0:00:01.748     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/f/1/dataset_2f12d997-3a56-4f29-87ff-26406051935a.dat\n  0:00:03.428     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:03.437    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:04.198    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:04.198    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:04.646    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.767    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.828    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:04.833    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:04.840    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:04.842    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:04.881    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:04.881    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:04.881    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/b/1/9/dataset_b19e7d00-52aa-4329-a2ba-b11e0e3be21f.dat\n  0:00:04.930    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/f/1/dataset_2f12d997-3a56-4f29-87ff-26406051935a.dat\n  0:00:05.017    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:05.017    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:05.017    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:05.033    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:05.033    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:05.033    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:05.034    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:05.034    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:05.034    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:05.034    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:05.034    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:05.034    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:05.038    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:05.038    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:05.079    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:05.079    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:05.079    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:05.079    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/b/1/9/dataset_b19e7d00-52aa-4329-a2ba-b11e0e3be21f.dat and /galaxy/server/database/objects/2/f/1/dataset_2f12d997-3a56-4f29-87ff-26406051935a.dat\n  0:00:05.110    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:05.118    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:05.125    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:05.170    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:05.171    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:05.171    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/247/working/corrected/corrected.yaml\n  0:00:05.185    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/247/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/247/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/247/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.021     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.021     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.118    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.128     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.287   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.294     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.452   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.645     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.646     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.646     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.648     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.649     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.649     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.649     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:01.036     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:01.038    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:01.038    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.255    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:01.256    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.363    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:01.364    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.364    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:01.366    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.367    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:01.367    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:03.075     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:03.085    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.812    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:03.812    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:04.014    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.075    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.103    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:04.103    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:04.107    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:04.108    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n0:00:09.869    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:09.871    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:09.871    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:09.871    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:09.871    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:09.871    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:09.871    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:09.871    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:09.871    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:09.871    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:09.871    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:09.871    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:09.882    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:09.882    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:09.882    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:09.886    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.886    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/247/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.886    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/247/working//K33/before_rr.fasta\n  0:00:09.894    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/247/working//K33/assembly_graph.fastg\n  0:00:09.898    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/247/working//K33/simplified_contigs.fasta\n  0:00:09.904    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/247/working//K33/intermediate_contigs.fasta\n  0:00:09.917    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:09.917    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:09.917    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:09.917    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:09.917    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:09.917    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:09.944    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.037    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.314    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:10.314    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:10.323    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:10.381   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:10.384   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.386   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.391   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:10.391   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:10.391   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:10.402   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.409   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.425    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:10.425    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:10.425    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:10.425    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:10.426    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.426    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.426    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.426    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:10.426    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:10.426    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:10.426    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.426    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.426    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:10.426    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:10.426    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.426    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.426    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.426    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:10.426    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:10.426    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:10.426    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:10.427    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:10.427    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:10.427    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:10.427    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:10.427    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.427    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.427    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.427    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.427    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.428    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.428    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.428    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:10.428    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.428    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/247/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:10.429    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/247/working//K33/before_rr.fasta\n  0:00:10.434    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/247/working//K33/assembly_graph.fastg\n  0:00:10.443    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/247/working//K33/final_contigs.paths\n  0:00:10.467    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/247/working//K33/scaffolds.paths\n  0:00:10.509    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.512    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/247/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/247/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/247/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/247/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/247/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/247/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/247/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/247/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/247/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/b/1/9/dataset_b19e7d00-52aa-4329-a2ba-b11e0e3be21f.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/2/f/1/dataset_2f12d997-3a56-4f29-87ff-26406051935a.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/247/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/b/1/9/dataset_b19e7d00-52aa-4329-a2ba-b11e0e3be21f.dat']\n      right reads: ['/galaxy/server/database/objects/2/f/1/dataset_2f12d997-3a56-4f29-87ff-26406051935a.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/247/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/247/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/247/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/247/working/corrected/configs/config.info\n  0:00:00.006     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.006     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.006     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.014     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.014     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.014     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.019     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.019     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.023     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.023     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.023     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.023     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/b/1/9/dataset_b19e7d00-52aa-4329-a2ba-b11e0e3be21f.dat\n  0:00:01.748     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/2/f/1/dataset_2f12d997-3a56-4f29-87ff-26406051935a.dat\n  0:00:03.428     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:03.437    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:04.198    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:04.198    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:04.646    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.767    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.828    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:04.833    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:04.840    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:04.842    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:04.881    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:04.881    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:04.881    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/b/1/9/dataset_b19e7d00-52aa-4329-a2ba-b11e0e3be21f.dat\n  0:00:04.930    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/2/f/1/dataset_2f12d997-3a56-4f29-87ff-26406051935a.dat\n  0:00:05.017    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:05.017    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:05.017    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:05.033    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:05.033    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:05.033    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:05.034    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:05.034    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:05.034    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:05.034    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:05.034    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:05.034    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:05.038    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:05.038    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:05.079    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:05.079    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:05.079    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:05.079    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/b/1/9/dataset_b19e7d00-52aa-4329-a2ba-b11e0e3be21f.dat and /galaxy/server/database/objects/2/f/1/dataset_2f12d997-3a56-4f29-87ff-26406051935a.dat\n  0:00:05.110    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:05.118    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:05.125    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:05.170    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:05.171    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:05.171    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/247/working/corrected/corrected.yaml\n  0:00:05.185    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/247/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/247/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/247/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.021     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.021     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.118    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.128     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.287   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.294     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.452   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.645     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.646     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.646     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.648     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.649     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.649     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.649     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:01.036     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:01.038    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:01.038    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.255    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:01.256    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.363    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:01.364    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.364    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:01.366    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.367    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:01.367    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:03.075     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:03.085    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.812    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:03.812    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:04.014    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.075    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.103    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:04.103    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:04.107    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:04.108    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n0:00:09.869    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:09.871    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:09.871    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:09.871    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:09.871    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:09.871    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:09.871    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:09.871    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:09.871    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:09.871    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:09.871    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:09.871    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:09.871    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:09.882    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:09.882    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:09.882    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:09.886    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.886    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/247/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.886    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/247/working//K33/before_rr.fasta\n  0:00:09.894    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/247/working//K33/assembly_graph.fastg\n  0:00:09.898    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/247/working//K33/simplified_contigs.fasta\n  0:00:09.904    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/247/working//K33/intermediate_contigs.fasta\n  0:00:09.917    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:09.917    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:09.917    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:09.917    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:09.917    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:09.917    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:09.944    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.037    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.314    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:10.314    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:10.323    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:10.381   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:10.384   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.386   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.391   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:10.391   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:10.391   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:10.402   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.409   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.425    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:10.425    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:10.425    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:10.425    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:10.426    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.426    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.426    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.426    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:10.426    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:10.426    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:10.426    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.426    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.426    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:10.426    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:10.426    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.426    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.426    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.426    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:10.426    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:10.426    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:10.426    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:10.427    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:10.427    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:10.427    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:10.427    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:10.427    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.427    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.427    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.427    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.427    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.427    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.427    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.428    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.428    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.428    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:10.428    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.428    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/247/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:10.429    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/247/working//K33/before_rr.fasta\n  0:00:10.434    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/247/working//K33/assembly_graph.fastg\n  0:00:10.443    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/247/working//K33/final_contigs.paths\n  0:00:10.467    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/247/working//K33/scaffolds.paths\n  0:00:10.509    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.512    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/247/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/247/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/247/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/247/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/247/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/247/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/247/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/247/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "17 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "17.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:20:50", "plugin": "core", "name": "end_epoch", "raw_value": "1666459250.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:20:33", "plugin": "core", "name": "start_epoch", "raw_value": "1666459233.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 6, "time_seconds": 120.06920647621155, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "f1d74bbfb56b6ab9"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "9369597f8f5d9e65"}}, "job": {"model_class": "Job", "id": "9eeed020d9a14d4e", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:21:37.388012", "create_time": "2022-10-22T17:19:57.801211", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-w4bct", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq:/galaxy/server/database/objects/6/7/5/dataset_675781b7-aa6c-4c75-9896-d15025e4bd44.dat --pe1-2 fastq:/galaxy/server/database/objects/8/9/b/dataset_89b68772-5e72-4a80-b564-955577ad9b81.dat && python '/galaxy/server/database/jobs_directory/000/250/configs/tmphsi_md42' < contigs.fasta > '/galaxy/server/database/objects/9/e/5/dataset_9e5be546-bcf6-442a-99f1-1707e505b91c.dat' && python '/galaxy/server/database/jobs_directory/000/250/configs/tmphsi_md42' < scaffolds.fasta > '/galaxy/server/database/objects/c/9/1/dataset_c91e7a7b-4715-4cdb-ac40-2b70c370f9e4.dat'", "traceback": null, "params": {"__input_ext": "\"fastqsanger\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 318, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 319, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "f1d74bbfb56b6ab9", "src": "hda", "uuid": "675781b7-aa6c-4c75-9896-d15025e4bd44"}, "libraries_0|files_0|rev_reads": {"id": "9369597f8f5d9e65", "src": "hda", "uuid": "89b68772-5e72-4a80-b564-955577ad9b81"}}, "outputs": {"out_log": {"id": "37d2a835e7178e25", "src": "hda", "uuid": "20e579e7-cabc-4613-9dcc-ae7f978f9041"}, "out_scaffolds": {"id": "4b3996c311d4d3c2", "src": "hda", "uuid": "f2251577-6764-4256-9388-b8c13d43dd25"}, "out_contigs": {"id": "c8089a830dc76ed8", "src": "hda", "uuid": "75bfb26a-8d20-4761-9875-5df8502da416"}, "out_scaffold_stats": {"id": "55de0456a8ae5a7f", "src": "hda", "uuid": "c91e7a7b-4715-4cdb-ac40-2b70c370f9e4"}, "out_contig_stats": {"id": "ac1e99866de96af1", "src": "hda", "uuid": "9e5be546-bcf6-442a-99f1-1707e505b91c"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/250/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/6/7/5/dataset_675781b7-aa6c-4c75-9896-d15025e4bd44.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/8/9/b/dataset_89b68772-5e72-4a80-b564-955577ad9b81.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/250/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/6/7/5/dataset_675781b7-aa6c-4c75-9896-d15025e4bd44.dat']\n      right reads: ['/galaxy/server/database/objects/8/9/b/dataset_89b68772-5e72-4a80-b564-955577ad9b81.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/250/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/250/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/250/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/250/working/corrected/configs/config.info\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.003     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.005     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.007     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.007     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.009     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.009     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.009     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.009     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/6/7/5/dataset_675781b7-aa6c-4c75-9896-d15025e4bd44.dat\n  0:00:00.712     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/8/9/b/dataset_89b68772-5e72-4a80-b564-955577ad9b81.dat\n  0:00:01.316     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.323    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.595    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.595    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.753    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.788    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.812    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.814    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.820    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.822    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.831    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.831    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.831    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/6/7/5/dataset_675781b7-aa6c-4c75-9896-d15025e4bd44.dat\n  0:00:01.861    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/8/9/b/dataset_89b68772-5e72-4a80-b564-955577ad9b81.dat\n  0:00:01.889    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.890    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.890    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.904    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.904    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.904    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.904    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.905    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.905    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.905    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.905    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.905    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.906    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.906    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.920    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.921    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.921    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.921    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/6/7/5/dataset_675781b7-aa6c-4c75-9896-d15025e4bd44.dat and /galaxy/server/database/objects/8/9/b/dataset_89b68772-5e72-4a80-b564-955577ad9b81.dat\n  0:00:01.936    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.945    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.949    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.975    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.975    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.975    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/250/working/corrected/corrected.yaml\n  0:00:01.979    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/250/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/250/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/250/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.008     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.008     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.073    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.076     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.235   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.246     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.424   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.611     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.611     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.611     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.612     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.614     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.614     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.614     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:01.057     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:01.060    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:01.060    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.274    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:01.274    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.375    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:01.377    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.377    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:01.378    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.378    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:01.378    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:02.873     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:02.881    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.269    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:03.269    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:03.434    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:03.474    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:03.508    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:03.509    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:03.514    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:03.520    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n 0:00:09.268    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:09.269    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:09.269    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:09.269    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:09.269    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:09.269    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:09.269    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:09.269    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:09.269    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:09.270    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:09.270    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:09.270    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:09.270    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:09.270    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:09.270    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:09.270    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:09.270    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:09.270    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:09.270    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:09.270    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:09.270    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:09.270    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:09.279    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:09.280    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:09.280    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:09.289    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.289    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/250/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.291    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/250/working//K33/before_rr.fasta\n  0:00:09.305    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/250/working//K33/assembly_graph.fastg\n  0:00:09.311    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/250/working//K33/simplified_contigs.fasta\n  0:00:09.317    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/250/working//K33/intermediate_contigs.fasta\n  0:00:09.327    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:09.327    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:09.327    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:09.327    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:09.327    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:09.327    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:09.357    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.456    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.716    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.716    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.724    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.783   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.787   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.789   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.792   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.792   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.792   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.800   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.805   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.822    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.823    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.823    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.823    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.823    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.823    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.823    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.823    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.823    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.823    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.823    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.824    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.824    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.824    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.824    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.824    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.824    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.824    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.824    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.824    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.824    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.825    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.825    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.825    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.825    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.825    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.825    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/250/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.826    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/250/working//K33/before_rr.fasta\n  0:00:09.832    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/250/working//K33/assembly_graph.fastg\n  0:00:09.837    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/250/working//K33/final_contigs.paths\n  0:00:09.847    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/250/working//K33/scaffolds.paths\n  0:00:09.867    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.869    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/250/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/250/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/250/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/250/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/250/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/250/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/250/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/250/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/250/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq:/galaxy/server/database/objects/6/7/5/dataset_675781b7-aa6c-4c75-9896-d15025e4bd44.dat\t--pe1-2\tfastq:/galaxy/server/database/objects/8/9/b/dataset_89b68772-5e72-4a80-b564-955577ad9b81.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/250/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/6/7/5/dataset_675781b7-aa6c-4c75-9896-d15025e4bd44.dat']\n      right reads: ['/galaxy/server/database/objects/8/9/b/dataset_89b68772-5e72-4a80-b564-955577ad9b81.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/250/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/250/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/250/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/250/working/corrected/configs/config.info\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.003     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.003     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.005     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.007     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.007     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.009     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.009     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.009     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.009     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/6/7/5/dataset_675781b7-aa6c-4c75-9896-d15025e4bd44.dat\n  0:00:00.712     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/8/9/b/dataset_89b68772-5e72-4a80-b564-955577ad9b81.dat\n  0:00:01.316     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:01.323    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.595    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:01.595    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.753    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.788    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.812    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:01.814    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:01.820    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:01.822    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:01.831    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:01.831    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:01.831    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/6/7/5/dataset_675781b7-aa6c-4c75-9896-d15025e4bd44.dat\n  0:00:01.861    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/8/9/b/dataset_89b68772-5e72-4a80-b564-955577ad9b81.dat\n  0:00:01.889    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:01.890    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:01.890    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:01.904    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:01.904    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:01.904    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:01.904    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:01.905    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:01.905    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:01.905    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:01.905    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:01.905    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:01.906    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:01.906    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:01.920    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:01.921    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:01.921    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:01.921    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/6/7/5/dataset_675781b7-aa6c-4c75-9896-d15025e4bd44.dat and /galaxy/server/database/objects/8/9/b/dataset_89b68772-5e72-4a80-b564-955577ad9b81.dat\n  0:00:01.936    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:01.945    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:01.949    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:01.975    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:01.975    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:01.975    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/250/working/corrected/corrected.yaml\n  0:00:01.979    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/250/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/250/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/250/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.008     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.008     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.073    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.076     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.235   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.246     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.424   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.611     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.611     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.611     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.612     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.614     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.614     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.614     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:01.057     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:01.060    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:01.060    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.274    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:01.274    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.375    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:01.377    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.377    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:01.378    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.378    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:01.378    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:02.873     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:02.881    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.269    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:03.269    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:03.434    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:03.474    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:03.508    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:03.509    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:03.514    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:03.520    16M / 3G    INFO    General                 (stage.cpp                 : 101)   PRO\n..\n 0:00:09.268    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:09.269    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:09.269    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:09.269    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:09.269    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:09.269    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:09.269    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:09.269    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:09.269    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:09.270    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:09.270    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:09.270    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:09.270    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:09.270    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:09.270    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:09.270    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:09.270    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:09.270    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:09.270    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:09.270    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:09.270    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:09.270    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:09.279    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:09.280    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:09.280    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:09.289    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.289    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/250/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.291    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/250/working//K33/before_rr.fasta\n  0:00:09.305    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/250/working//K33/assembly_graph.fastg\n  0:00:09.311    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/250/working//K33/simplified_contigs.fasta\n  0:00:09.317    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/250/working//K33/intermediate_contigs.fasta\n  0:00:09.327    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:09.327    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:09.327    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:09.327    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:09.327    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:09.327    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:09.357    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.456    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.716    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:09.716    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:09.724    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:09.783   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:09.787   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.789   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.792   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:09.792   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:09.792   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:09.800   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:09.805   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:09.822    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:09.823    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:09.823    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:09.823    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:09.823    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.823    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.823    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.823    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:09.823    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:09.823    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:09.823    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.824    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:09.824    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:09.824    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:09.824    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:09.824    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:09.824    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:09.824    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:09.824    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:09.824    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:09.824    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:09.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:09.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:09.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:09.825    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.825    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.825    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.825    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.825    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.825    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:09.825    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:09.825    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:09.825    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/250/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:09.826    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/250/working//K33/before_rr.fasta\n  0:00:09.832    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/250/working//K33/assembly_graph.fastg\n  0:00:09.837    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/250/working//K33/final_contigs.paths\n  0:00:09.847    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/250/working//K33/scaffolds.paths\n  0:00:09.867    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:09.869    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 9 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/250/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/250/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/250/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/250/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/250/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/250/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/250/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/250/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "12 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "12.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:21:27", "plugin": "core", "name": "end_epoch", "raw_value": "1666459287.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:21:15", "plugin": "core", "name": "start_epoch", "raw_value": "1666459275.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades", "tool_version": "3.12.0+galaxy1", "test_index": 7, "time_seconds": 120.42209196090698, "inputs": {"sc": false, "careful": false, "kmer_choice|kmers": "33", "libraries_0|lib_type": "paired_end", "libraries_0|files_0|file_type|fwd_reads": {"src": "hda", "id": "44eaaa40c67ab40e"}, "libraries_0|files_0|file_type|rev_reads": {"src": "hda", "id": "69735aa279cb6163"}}, "job": {"model_class": "Job", "id": "6bd000aa5fa5d88c", "state": "ok", "exit_code": 0, "update_time": "2022-10-22T17:22:19.502126", "create_time": "2022-10-22T17:20:40.546343", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/nml/spades/spades/3.12.0+galaxy1", "history_id": "ad66bb894d08d0bf", "external_id": "gxy-zbtxv", "command_line": "if [[ -n $GALAXY_MEMORY_MB ]]; then GALAXY_MEMORY_GB=$(( GALAXY_MEMORY_MB / 1024 )); fi &&  spades.py -o . --disable-gzip-output    -t ${GALAXY_SLOTS:-16} -m ${GALAXY_MEMORY_GB:-250} -k \"33\"  --pe1-fr --pe1-1 fastq.gz:/galaxy/server/database/objects/3/b/c/dataset_3bc9fb05-32d5-436e-80fb-64a2abdc6380.dat --pe1-2 fastq.gz:/galaxy/server/database/objects/e/9/8/dataset_e98da4e3-7b91-48b3-ae2b-b1a2e9bec1c0.dat && python '/galaxy/server/database/jobs_directory/000/253/configs/tmpebi1qasd' < contigs.fasta > '/galaxy/server/database/objects/5/c/5/dataset_5c57d9c2-e658-4144-bda5-3387e8574fa9.dat' && python '/galaxy/server/database/jobs_directory/000/253/configs/tmpebi1qasd' < scaffolds.fasta > '/galaxy/server/database/objects/5/c/a/dataset_5caf222e-038c-45d0-b4d2-cbb6d673b41e.dat'", "traceback": null, "params": {"__input_ext": "\"fastqsanger.gz\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "scaffold_graph_out": "\"false\"", "contig_graph_out": "\"false\"", "untrusted_contigs": null, "trusted_contigs": null, "sanger_reads": null, "nanopore_reads": null, "pacbio_reads": null, "libraries": "[{\"__index__\": 0, \"files\": [{\"__index__\": 0, \"file_type\": {\"__current_case__\": 0, \"fwd_reads\": {\"values\": [{\"id\": 325, \"src\": \"hda\"}]}, \"rev_reads\": {\"values\": [{\"id\": 326, \"src\": \"hda\"}]}, \"type\": \"separate\"}}], \"lib_type\": \"paired_end\", \"orientation\": \"fr\"}]", "iontorrent": "\"false\"", "cov": "{\"__current_case__\": 0, \"state\": \"off\"}", "kmer_choice": "{\"__current_case__\": 0, \"auto_kmer_choice\": \"false\", \"kmers\": \"33\"}", "careful": "\"false\"", "onlyassembler": "\"false\"", "sc": "\"false\""}, "inputs": {"libraries_0|files_0|fwd_reads": {"id": "44eaaa40c67ab40e", "src": "hda", "uuid": "3bc9fb05-32d5-436e-80fb-64a2abdc6380"}, "libraries_0|files_0|rev_reads": {"id": "69735aa279cb6163", "src": "hda", "uuid": "e98da4e3-7b91-48b3-ae2b-b1a2e9bec1c0"}}, "outputs": {"out_log": {"id": "336b76a7a80d387b", "src": "hda", "uuid": "0ebed1eb-0b26-49a3-a3b5-494af8b4c336"}, "out_scaffolds": {"id": "7fb74b29cb924130", "src": "hda", "uuid": "9e46a309-149c-46dd-afee-673ef172a9b4"}, "out_contigs": {"id": "06b855db223827d9", "src": "hda", "uuid": "f333d7ed-01ab-4ece-8cc6-afe5a1943905"}, "out_scaffold_stats": {"id": "10466747f5a502e9", "src": "hda", "uuid": "5caf222e-038c-45d0-b4d2-cbb6d673b41e"}, "out_contig_stats": {"id": "ffd4e73ae4ea4bb9", "src": "hda", "uuid": "5c57d9c2-e658-4144-bda5-3387e8574fa9"}}, "output_collections": {}, "tool_stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/253/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/3/b/c/dataset_3bc9fb05-32d5-436e-80fb-64a2abdc6380.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/e/9/8/dataset_e98da4e3-7b91-48b3-ae2b-b1a2e9bec1c0.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/253/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/3/b/c/dataset_3bc9fb05-32d5-436e-80fb-64a2abdc6380.dat']\n      right reads: ['/galaxy/server/database/objects/e/9/8/dataset_e98da4e3-7b91-48b3-ae2b-b1a2e9bec1c0.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/253/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/253/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/253/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/253/working/corrected/configs/config.info\n  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.005     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.007     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.007     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.007     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.011     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.011     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.013     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.013     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.013     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.013     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/3/b/c/dataset_3bc9fb05-32d5-436e-80fb-64a2abdc6380.dat\n  0:00:01.488     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/e/9/8/dataset_e98da4e3-7b91-48b3-ae2b-b1a2e9bec1c0.dat\n  0:00:02.210     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:02.216    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:02.502    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:02.503    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:02.681    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:02.726    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:02.751    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:02.756    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:02.761    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:02.763    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:02.774    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:02.774    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:02.774    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/3/b/c/dataset_3bc9fb05-32d5-436e-80fb-64a2abdc6380.dat\n  0:00:02.806    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/e/9/8/dataset_e98da4e3-7b91-48b3-ae2b-b1a2e9bec1c0.dat\n  0:00:02.836    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:02.836    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:02.836    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:02.844    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:02.844    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:02.844    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:02.844    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:02.844    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:02.844    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:02.844    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:02.844    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:02.844    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:02.845    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:02.845    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:02.868    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:02.868    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:02.868    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:02.868    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/3/b/c/dataset_3bc9fb05-32d5-436e-80fb-64a2abdc6380.dat and /galaxy/server/database/objects/e/9/8/dataset_e98da4e3-7b91-48b3-ae2b-b1a2e9bec1c0.dat\n  0:00:02.889    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:02.895    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:02.898    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:02.927    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:02.927    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:02.927    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/253/working/corrected/corrected.yaml\n  0:00:02.933    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/253/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/253/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/253/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.010     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.010     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.071    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.075     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.182   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.187     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.285   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.355     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.355     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.355     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.356     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.357     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.357     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.357     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.501     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.504    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.504    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.582    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.582    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.621    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.623    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.623    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.623    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.624    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.624    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:02.412     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:02.425    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.410    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:03.410    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:03.872    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.016    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.091    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:04.091    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:04.099    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:04.101    16M / 3G    INFO    General                 (stage.cpp                 : 101)\n..\n0:00:10.222    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:10.225    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:10.225    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:10.225    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:10.225    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:10.225    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:10.226    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:10.226    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:10.226    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:10.226    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:10.226    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:10.226    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:10.246    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:10.247    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:10.247    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:10.256    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.256    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/253/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:10.257    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/253/working//K33/before_rr.fasta\n  0:00:10.274    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/253/working//K33/assembly_graph.fastg\n  0:00:10.290    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/253/working//K33/simplified_contigs.fasta\n  0:00:10.308    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/253/working//K33/intermediate_contigs.fasta\n  0:00:10.341    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:10.341    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:10.341    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:10.341    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:10.341    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:10.341    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:10.371    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.462    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.727    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:10.727    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:10.737    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:10.799   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:10.802   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.806   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.808   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:10.808   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:10.808   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:10.817   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.823   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.854    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:10.854    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:10.854    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:10.854    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:10.855    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.855    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.855    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.855    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:10.855    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:10.855    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:10.855    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.855    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.856    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:10.856    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:10.856    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.856    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.856    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.856    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:10.856    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:10.856    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:10.856    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:10.858    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:10.858    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:10.858    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:10.858    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:10.858    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.858    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.858    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.858    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.858    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:10.858    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.858    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/253/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:10.859    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/253/working//K33/before_rr.fasta\n  0:00:10.874    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/253/working//K33/assembly_graph.fastg\n  0:00:10.883    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/253/working//K33/final_contigs.paths\n  0:00:10.895    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/253/working//K33/scaffolds.paths\n  0:00:10.923    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.926    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/253/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/253/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/253/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/253/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/253/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/253/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/253/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/253/working/spades.log\n\nThank you for using SPAdes!\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Command line: /usr/local/bin/spades.py\t-o\t/galaxy/server/database/jobs_directory/000/253/working\t--disable-gzip-output\t-t\t4\t-m\t39\t-k\t33\t--pe1-fr\t--pe1-1\tfastq.gz:/galaxy/server/database/objects/3/b/c/dataset_3bc9fb05-32d5-436e-80fb-64a2abdc6380.dat\t--pe1-2\tfastq.gz:/galaxy/server/database/objects/e/9/8/dataset_e98da4e3-7b91-48b3-ae2b-b1a2e9bec1c0.dat\t\n\nSystem information:\n  SPAdes version: 3.12.0\n  Python version: 3.9.2\n  OS: Linux-5.10.133+-x86_64-with-glibc2.28\n\nOutput dir: /galaxy/server/database/jobs_directory/000/253/working\nMode: read error correction and assembling\nDebug mode is turned OFF\n\nDataset parameters:\n  Multi-cell mode (you should set '--sc' flag if input data was obtained with MDA (single-cell) technology or --meta flag if processing metagenomic dataset)\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/objects/3/b/c/dataset_3bc9fb05-32d5-436e-80fb-64a2abdc6380.dat']\n      right reads: ['/galaxy/server/database/objects/e/9/8/dataset_e98da4e3-7b91-48b3-ae2b-b1a2e9bec1c0.dat']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nRead error correction parameters:\n  Iterations: 1\n  PHRED offset will be auto-detected\n  Corrected reads will NOT be compressed\nAssembly parameters:\n  k: [33]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/253/working/tmp\n  Threads: 4\n  Memory limit (in Gb): 39\n\n\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/253/working/spades.log\n\n\n===== Read error correction started. \n\n\n== Running read error correction tool: /usr/local/share/spades-3.12.0-2/bin/spades-hammer /galaxy/server/database/jobs_directory/000/253/working/corrected/configs/config.info\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  75)   Starting BayesHammer, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  76)   Loading config from /galaxy/server/database/jobs_directory/000/253/working/corrected/configs/config.info\n  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  :  78)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.005     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.005     4M / 4M    INFO    General                 (main.cpp                  :  86)   Trying to determine PHRED offset\n  0:00:00.007     4M / 4M    INFO    General                 (main.cpp                  :  92)   Determined value is 33\n  0:00:00.007     4M / 4M    INFO    General                 (hammer_tools.cpp          :  36)   Hamming graph threshold tau=1, k=21, subkmer positions = [ 0 10 ]\n  0:00:00.007     4M / 4M    INFO    General                 (main.cpp                  : 113)   Size of aux. kmer data 24 bytes\n     === ITERATION 0 begins ===\n  0:00:00.011     4M / 4M    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.011     4M / 4M    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.013     4M / 4M    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.013     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.013     4M / 4M    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.013     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/3/b/c/dataset_3bc9fb05-32d5-436e-80fb-64a2abdc6380.dat\n  0:00:01.488     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             :  97)   Processing /galaxy/server/database/objects/e/9/8/dataset_e98da4e3-7b91-48b3-ae2b-b1a2e9bec1c0.dat\n  0:00:02.210     3G / 3G    INFO   K-mer Splitting          (kmer_data.cpp             : 112)   Total 4108 reads processed\n  0:00:02.216    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:02.502    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 1974 kmers in total.\n  0:00:02.503    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:02.681    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:02.726    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:02.751    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 10136 bytes occupied (41.078 bits per kmer).\n  0:00:02.756    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 356)   Arranging kmers in hash map order\n  0:00:02.761    16M / 3G    INFO    General                 (main.cpp                  : 148)   Clustering Hamming graph.\n  0:00:02.763    16M / 3G    INFO    General                 (main.cpp                  : 155)   Extracting clusters\n  0:00:02.774    16M / 3G    INFO    General                 (main.cpp                  : 167)   Clustering done. Total clusters: 1960\n  0:00:02.774    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 376)   Collecting K-mer information, this takes a while.\n  0:00:02.774    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/3/b/c/dataset_3bc9fb05-32d5-436e-80fb-64a2abdc6380.dat\n  0:00:02.806    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 382)   Processing /galaxy/server/database/objects/e/9/8/dataset_e98da4e3-7b91-48b3-ae2b-b1a2e9bec1c0.dat\n  0:00:02.836    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 389)   Collection done, postprocessing.\n  0:00:02.836    16M / 3G    INFO   K-mer Counting           (kmer_data.cpp             : 403)   There are 1974 kmers in total. Among them 0 (0%) are singletons.\n  0:00:02.836    16M / 3G    INFO    General                 (main.cpp                  : 173)   Subclustering Hamming graph\n  0:00:02.844    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 649)   Subclustering done. Total 0 non-read kmers were generated.\n  0:00:02.844    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 650)   Subclustering statistics:\n  0:00:02.844    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 651)     Total singleton hamming clusters: 1946. Among them 1946 (100%) are good\n  0:00:02.844    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 652)     Total singleton subclusters: 8. Among them 8 (100%) are good\n  0:00:02.844    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 653)     Total non-singleton subcluster centers: 10. Among them 10 (100%) are good\n  0:00:02.844    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 654)     Average size of non-trivial subcluster: 2.8 kmers\n  0:00:02.844    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 655)     Average number of sub-clusters per non-singleton cluster: 1.28571\n  0:00:02.844    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 656)     Total solid k-mers: 1964\n  0:00:02.844    16M / 3G    INFO   Hamming Subclustering    (kmer_cluster.cpp          : 657)     Substitution probabilities: [4,4]((0.875,0.125,0,0),(0,1,0,0),(0,0,1,0),(0,0,0.125,0.875))\n  0:00:02.845    16M / 3G    INFO    General                 (main.cpp                  : 178)   Finished clustering.\n  0:00:02.845    16M / 3G    INFO    General                 (main.cpp                  : 197)   Starting solid k-mers expansion in 4 threads.\n  0:00:02.868    16M / 3G    INFO    General                 (main.cpp                  : 218)   Solid k-mers iteration 0 produced 0 new k-mers.\n  0:00:02.868    16M / 3G    INFO    General                 (main.cpp                  : 222)   Solid k-mers finalized\n  0:00:02.868    16M / 3G    INFO    General                 (hammer_tools.cpp          : 220)   Starting read correction in 4 threads.\n  0:00:02.868    16M / 3G    INFO    General                 (hammer_tools.cpp          : 233)   Correcting pair of reads: /galaxy/server/database/objects/3/b/c/dataset_3bc9fb05-32d5-436e-80fb-64a2abdc6380.dat and /galaxy/server/database/objects/e/9/8/dataset_e98da4e3-7b91-48b3-ae2b-b1a2e9bec1c0.dat\n  0:00:02.889    48M / 3G    INFO    General                 (hammer_tools.cpp          : 168)   Prepared batch 0 of 2054 reads.\n  0:00:02.895    48M / 3G    INFO    General                 (hammer_tools.cpp          : 175)   Processed batch 0\n  0:00:02.898    48M / 3G    INFO    General                 (hammer_tools.cpp          : 185)   Written batch 0\n  0:00:02.927    16M / 3G    INFO    General                 (hammer_tools.cpp          : 274)   Correction done. Changed 4 bases in 4 reads.\n  0:00:02.927    16M / 3G    INFO    General                 (hammer_tools.cpp          : 275)   Failed to correct 0 bases out of 353915.\n  0:00:02.927    16M / 3G    INFO    General                 (main.cpp                  : 255)   Saving corrected dataset description to /galaxy/server/database/jobs_directory/000/253/working/corrected/corrected.yaml\n  0:00:02.933    16M / 3G    INFO    General                 (main.cpp                  : 262)   All done. Exiting.\n\n== Dataset description file was created: /galaxy/server/database/jobs_directory/000/253/working/corrected/corrected.yaml\n\n\n===== Read error correction finished. \n\n\n===== Assembling started.\n\n\n== Running assembler: K33\n\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  74)   Loaded config from /galaxy/server/database/jobs_directory/000/253/working/K33/configs/config.info\n  0:00:00.000     4M / 4M    INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 39 Gb\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  87)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  88)   Maximum k-mer length: 128\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  89)   Assembling dataset (/galaxy/server/database/jobs_directory/000/253/working/dataset.info) with K=33\n  0:00:00.000     4M / 4M    INFO    General                 (main.cpp                  :  90)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  51)   SPAdes started\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  58)   Starting from stage: construction\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  65)   Two-step RR enabled: 0\n  0:00:00.000     4M / 4M    INFO    General                 (launch.hpp                :  76)   Will need read mapping, kmer mapper will be attached\n  0:00:00.000     4M / 4M    INFO   StageManager             (stage.cpp                 : 132)   STAGE == de Bruijn graph construction\n  0:00:00.010     4M / 4M    INFO    General                 (read_converter.hpp        :  77)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.010     4M / 4M    INFO    General                 (read_converter.hpp        :  78)   Converting paired reads\n  0:00:00.071    68M / 84M   INFO    General                 (binary_converter.hpp      : 117)   2054 reads written\n  0:00:00.075     4M / 84M   INFO    General                 (read_converter.hpp        :  87)   Converting single reads\n  0:00:00.182   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.187     4M / 164M  INFO    General                 (read_converter.hpp        :  95)   Converting merged reads\n  0:00:00.285   132M / 164M  INFO    General                 (binary_converter.hpp      : 117)   0 reads written\n  0:00:00.355     4M / 164M  INFO    General                 (construction.cpp          : 111)   Max read length 100\n  0:00:00.355     4M / 164M  INFO    General                 (construction.cpp          : 117)   Average read length 86.1526\n  0:00:00.355     4M / 164M  INFO    General                 (stage.cpp                 : 101)   PROCEDURE == k+1-mer counting\n  0:00:00.356     4M / 164M  INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.357     4M / 164M  INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.357     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24967 Gb\n  0:00:00.357     4M / 164M  INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 2097152\n  0:00:00.501     2G / 2G    INFO    General                 (kmer_splitters.hpp        : 295)   Adding contigs from previous K\n  0:00:00.504    16M / 2G    INFO    General                 (kmer_splitters.hpp        : 308)   Used 8216 reads\n  0:00:00.504    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.582    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 972 kmers in total.\n  0:00:00.582    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.621    16M / 2G    INFO    General                 (stage.cpp                 : 101)   PROCEDURE == Extension index construction\n  0:00:00.623    16M / 2G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.623    16M / 2G    INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.623    16M / 2G    INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.624    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.2487 Gb\n  0:00:00.624    16M / 2G    INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:02.412     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 385)   Used 972 kmers.\n  0:00:02.425    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.410    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 973 kmers in total.\n  0:00:03.410    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:03.872    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:04.016    16M / 3G    INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:04.091    16M / 3G    INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 9776 bytes occupied (80.3782 bits per kmer).\n  0:00:04.091    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:04.099    16M / 3G    INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:04.101    16M / 3G    INFO    General                 (stage.cpp                 : 101)\n..\n0:00:10.222    16M / 3G    INFO   GapCloser                (gap_closer.cpp            : 380)   Closing short gaps complete: filled 0 gaps after checking 0 candidates\n  0:00:10.225    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Simplification Cleanup\n  0:00:10.225    16M / 3G    INFO    General                 (simplification.cpp        : 196)   PROCEDURE == Post simplification\n  0:00:10.225    16M / 3G    INFO    General                 (graph_simplification.hpp  : 453)   Disconnection of relatively low covered edges disabled\n  0:00:10.225    16M / 3G    INFO    General                 (graph_simplification.hpp  : 489)   Complex tip clipping disabled\n  0:00:10.225    16M / 3G    INFO    General                 (graph_simplification.hpp  : 634)   Creating parallel br instance\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Tip clipper\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Tip clipper triggered 0 times\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Bulge remover\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Bulge remover triggered 0 times\n  0:00:10.226    16M / 3G    INFO    General                 (simplification.cpp        : 330)   Disrupting self-conjugate edges\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 165)   Running Removing isolated edges\n  0:00:10.226    16M / 3G    INFO   Simplification           (parallel_processing.hpp   : 167)   Removing isolated edges triggered 0 times\n  0:00:10.226    16M / 3G    INFO    General                 (simplification.cpp        : 470)   Counting average coverage\n  0:00:10.226    16M / 3G    INFO    General                 (simplification.cpp        : 476)   Average coverage = 225.839\n  0:00:10.226    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Mismatch Correction\n  0:00:10.226    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:10.226    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:10.246    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 189)   Finished collecting potential mismatches positions\n  0:00:10.247    16M / 3G    INFO    General                 (mismatch_shall_not_pass.hp: 290)   All edges processed\n  0:00:10.247    16M / 3G    INFO    General                 (mismatch_correction.cpp   :  27)   Corrected 0 nucleotides\n  0:00:10.256    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.256    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/253/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:10.257    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/253/working//K33/before_rr.fasta\n  0:00:10.274    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/253/working//K33/assembly_graph.fastg\n  0:00:10.290    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/253/working//K33/simplified_contigs.fasta\n  0:00:10.308    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/253/working//K33/intermediate_contigs.fasta\n  0:00:10.341    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Paired Information Counting\n  0:00:10.341    16M / 3G    INFO    General                 (graph_pack.hpp            : 109)   Normalizing k-mer map. Total 0 kmers to process\n  0:00:10.341    16M / 3G    INFO    General                 (graph_pack.hpp            : 111)   Normalizing done\n  0:00:10.341    16M / 3G    INFO    General                 (pair_info_count.cpp       : 320)   Min edge length for estimation: 967\n  0:00:10.341    16M / 3G    INFO    General                 (pair_info_count.cpp       : 331)   Estimating insert size for library #0\n  0:00:10.341    16M / 3G    INFO    General                 (pair_info_count.cpp       : 190)   Estimating insert size (takes a while)\n  0:00:10.371    96M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.462    96M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.727    96M / 3G    INFO    General                 (pair_info_count.cpp       : 209)   Edge pairs: 67108864 (rough upper limit)\n  0:00:10.727    96M / 3G    INFO    General                 (pair_info_count.cpp       : 213)   2009 paired reads (97.8092% of all) aligned to long edges\n  0:00:10.737    16M / 3G    INFO    General                 (pair_info_count.cpp       : 354)     Insert size = 214.609, deviation = 10.5368, left quantile = 201, right quantile = 228, read length = 100\n  0:00:10.799   208M / 3G    INFO    General                 (pair_info_count.cpp       : 371)   Filtering data for library #0\n  0:00:10.802   208M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.806   208M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.808   208M / 3G    INFO    General                 (pair_info_count.cpp       : 383)   Mapping library #0\n  0:00:10.808   208M / 3G    INFO    General                 (pair_info_count.cpp       : 385)   Mapping paired reads (takes a while)\n  0:00:10.808   208M / 3G    INFO    General                 (pair_info_count.cpp       : 289)   Left insert size quantile 201, right insert size quantile 228, filtering threshold 2, rounding threshold 0\n  0:00:10.817   220M / 3G    INFO    General                 (pair_info_count.cpp       :  39)   Selecting usual mapper\n  0:00:10.823   220M / 3G    INFO    General                 (sequence_mapper_notifier.h:  98)   Total 2054 reads processed\n  0:00:10.854    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Distance Estimation\n  0:00:10.854    16M / 3G    INFO    General                 (distance_estimation.cpp   : 173)   Processing library #0\n  0:00:10.854    16M / 3G    INFO    General                 (distance_estimation.cpp   : 149)   Weight Filter Done\n  0:00:10.854    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SIMPLE distance estimator\n  0:00:10.855    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.855    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.855    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.855    16M / 3G    INFO    General                 (distance_estimation.cpp   : 156)   Refining clustered pair information\n  0:00:10.855    16M / 3G    INFO    General                 (distance_estimation.cpp   : 158)   The refining of clustered pair information has been finished\n  0:00:10.855    16M / 3G    INFO    General                 (distance_estimation.cpp   : 160)   Improving paired information\n  0:00:10.855    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.855    16M / 3G    INFO   PairInfoImprover         (pair_info_improver.hpp    : 103)   Paired info stats: missing = 0; contradictional = 0\n  0:00:10.856    16M / 3G    INFO    General                 (distance_estimation.cpp   : 103)   Filling scaffolding index\n  0:00:10.856    16M / 3G    INFO   DistanceEstimator        (distance_estimation.hpp   : 116)   Using SMOOTHING distance estimator\n  0:00:10.856    16M / 3G    INFO    General                 (distance_estimation.cpp   :  34)   Filtering info\n  0:00:10.856    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 242)   Start filtering; index size: 2\n  0:00:10.856    16M / 3G    INFO    General                 (pair_info_filters.hpp     : 263)   Done filtering\n  0:00:10.856    16M / 3G    INFO    General                 (distance_estimation.cpp   : 182)   Clearing raw paired index\n  0:00:10.856    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Repeat Resolving\n  0:00:10.856    16M / 3G    INFO    General                 (repeat_resolving.cpp      :  69)   Using Path-Extend repeat resolving\n  0:00:10.856    16M / 3G    INFO    General                 (launcher.cpp              : 477)   ExSPAnder repeat resolving tool started\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 392)   Creating main extenders, unique edge length = 2000\n  0:00:10.858    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:10.858    16M / 3G    INFO    General                 (extenders_logic.cpp       : 275)   Estimated coverage of library #0 is 225.839\n  0:00:10.858    16M / 3G    INFO    General                 (extenders_logic.cpp       : 472)   Using 1 paired-end library\n  0:00:10.858    16M / 3G    INFO    General                 (extenders_logic.cpp       : 473)   Using 1 paired-end scaffolding library\n  0:00:10.858    16M / 3G    INFO    General                 (extenders_logic.cpp       : 474)   Using 0 single read libraries\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 420)   Total number of extenders is 3\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.858    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.858    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 427)   Closing gaps in paths\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 455)   Gap closing completed\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 286)   Traversing tandem repeats\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 296)   Traversed 0 loops\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 234)   Finalizing paths\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 236)   Deduplicating paths\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 240)   Paths deduplicated\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:10.858    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:10.858    16M / 3G    INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:10.858    16M / 3G    INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 257)   Paths finalized\n  0:00:10.858    16M / 3G    INFO    General                 (launcher.cpp              : 529)   ExSPAnder repeat resolving tool finished\n  0:00:10.858    16M / 3G    INFO   StageManager             (stage.cpp                 : 132)   STAGE == Contig Output\n  0:00:10.858    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  40)   Writing GFA to /galaxy/server/database/jobs_directory/000/253/working//K33/assembly_graph_with_scaffolds.gfa\n  0:00:10.859    16M / 3G    INFO    General                 (contig_output.hpp         :  22)   Outputting contigs to /galaxy/server/database/jobs_directory/000/253/working//K33/before_rr.fasta\n  0:00:10.874    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  51)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/253/working//K33/assembly_graph.fastg\n  0:00:10.883    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/253/working//K33/final_contigs.paths\n  0:00:10.895    16M / 3G    INFO    General                 (contig_output_stage.cpp   :  20)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/253/working//K33/scaffolds.paths\n  0:00:10.923    16M / 3G    INFO    General                 (launch.hpp                : 149)   SPAdes finished\n  0:00:10.926    16M / 3G    INFO    General                 (main.cpp                  : 109)   Assembling time: 0 hours 0 minutes 10 seconds\n\n===== Assembling finished. Used k-mer sizes: 33 \n\n * Corrected reads are in /galaxy/server/database/jobs_directory/000/253/working/corrected/\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/253/working/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/253/working/scaffolds.fasta\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/253/working/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/253/working/assembly_graph_with_scaffolds.gfa\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/253/working/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/253/working/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/253/working/spades.log\n\nThank you for using SPAdes!\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "15 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "15.0000000"}, {"title": "Job End Time", "value": "2022-10-22 17:22:09", "plugin": "core", "name": "end_epoch", "raw_value": "1666459329.0000000"}, {"title": "Job Start Time", "value": "2022-10-22 17:21:54", "plugin": "core", "name": "start_epoch", "raw_value": "1666459314.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}]}