<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Results (powered by Planemo)"
           tests="68"
           errors="5"
           failures="2"
           skip="0">
    
    <testcase classname="bamtools (Test #1)" name="0" time="32.24485445022583">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Pileup::Run() : Data not sorted correctly!Pileup::Run() : Data not sorted correctly!Pileup::Run() : Data not sorted correctly!
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bamtools (Test #2)" name="1" time="27.833120822906494">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bamtools (Test #3)" name="2" time="29.516403198242188">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Pileup::Run() : Data not sorted correctly!Pileup::Run() : Data not sorted correctly!Pileup::Run() : Data not sorted correctly!
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bamtools (Test #4)" name="3" time="27.421117067337036">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_gtcheck (Test #1)" name="0" time="33.37178921699524">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_plugin_tag2tag (Test #1)" name="0" time="22.7518310546875">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "input_file": {   "id": "a903a536270b5301",   "src": "hda"  },  "output_type": "v",  "sec_plugin|conversion": "--gl-to-pl",  "sec_plugin|replace": true }, "job": {  "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed \u0027s,bin/bcftools,libexec/bcftools,\u0027`;     bgzip -c \u0027/galaxy/server/database/objects/7/c/3/dataset_7c395e23-376b-4f9c-88f4-fc9970b61cb4.dat\u0027 \u003e input.vcf.gz \u0026\u0026 bcftools index input.vcf.gz \u0026\u0026            bcftools plugin tag2tag                --output-type \u0027v\u0027   --threads ${GALAXY_SLOTS:-4}    input.vcf.gz   -- --gl-to-pl --replace \u003e \u0027/galaxy/server/database/objects/8/2/e/dataset_82ee7736-3417-473f-b9f1-12ff3ea2b339.dat\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-07-16T13:03:39.029095",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-gqlnp",  "galaxy_version": "23.1",  "history_id": "0a3223200d5c2319",  "id": "d957e2a624e38df7",  "inputs": {   "input_file": {    "id": "a903a536270b5301",    "src": "hda",    "uuid": "7c395e23-376b-4f9c-88f4-fc9970b61cb4"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_file": {    "id": "ad259ff8addb63d8",    "src": "hda",    "uuid": "82ee7736-3417-473f-b9f1-12ff3ea2b339"   }  },  "params": {   "__input_ext": "\"vcf\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "output_type": "\"v\"",   "sec_plugin": "{\"\": \"0.1\", \"conversion\": \"--gl-to-pl\", \"replace\": true}",   "sec_restrict": "{\"exclude\": null, \"include\": null, \"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_plugin_tag2tag/bcftools_plugin_tag2tag/1.10",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2024-07-16T13:03:45.632447",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/bcftools_plugin_tag2tag/bcftools_plugin_tag2tag/1.10, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/bcftools_plugin_tag2tag/bcftools_plugin_tag2tag/1.10, exit_code: None, stderr: ." ], "status": "failure", "test_index": 0, "time_seconds": 22.7518310546875, "tool_id": "bcftools_plugin_tag2tag", "tool_version": "1.10"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_reheader (Test #1)" name="0" time="28.897502183914185">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_reheader (Test #2)" name="1" time="28.275999546051025">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_reheader (Test #3)" name="2" time="16.754528522491455">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 2, "time_seconds": 16.754528522491455, "tool_id": "bcftools_reheader", "tool_version": "1.10"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="deeptools_multi_bigwig_summary (Test #1)" name="0" time="53.39224028587341">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Number of bins found: 120
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fasta_compute_length (Test #1)" name="0" time="32.35097527503967">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fasta_compute_length (Test #2)" name="1" time="25.163394451141357">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fasta_compute_length (Test #3)" name="2" time="27.452683448791504">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fasta_compute_length (Test #4)" name="3" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 3, "tool_id": "fasta_compute_length", "tool_version": "1.0.3"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="fasta_compute_length (Test #5)" name="4" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 4, "tool_id": "fasta_compute_length", "tool_version": "1.0.3"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="flye (Test #1)" name="0" time="112.96348762512207">
        
            
            <system-out><![CDATA[
            [2024-07-16 13:04:21] INFO: Starting Flye 2.6-release[2024-07-16 13:04:21] INFO: >>>STAGE: configure[2024-07-16 13:04:21] INFO: Configuring run[2024-07-16 13:04:21] INFO: Total read length: 1466260[2024-07-16 13:04:21] INFO: Input genome size: 10000[2024-07-16 13:04:21] INFO: Estimated coverage: 146[2024-07-16 13:04:21] INFO: Reads N50/N90: 9054 / 4697[2024-07-16 13:04:21] INFO: Minimum overlap set to 5000[2024-07-16 13:04:21] INFO: Selected k-mer size: 15[2024-07-16 13:04:21] INFO: >>>STAGE: assembly[2024-07-16 13:04:21] INFO: Assembling disjointigs[2024-07-16 13:04:21] INFO: Reading sequences[2024-07-16 13:04:21] INFO: Generating solid k-mer index[2024-07-16 13:04:43] INFO: Counting k-mers (1/2):0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:04:43] INFO: Counting k-mers (2/2):0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:04:44] INFO: Filling index table0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:04:47] INFO: Extending reads[2024-07-16 13:04:50] INFO: Overlap-based coverage: 25[2024-07-16 13:04:50] INFO: Median overlap divergence: 0.1689730% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:04:51] INFO: Assembled 1 disjointigs[2024-07-16 13:04:51] INFO: Generating sequence10% 20% 40% 50% 70% 80% 100% [2024-07-16 13:04:51] INFO: >>>STAGE: consensus[2024-07-16 13:04:51] INFO: Running Minimap2[2024-07-16 13:04:51] INFO: Computing consensus[2024-07-16 13:04:52] INFO: Alignment error rate: 0.158711[2024-07-16 13:04:52] INFO: >>>STAGE: repeat[2024-07-16 13:04:52] INFO: Building and resolving repeat graph[2024-07-16 13:04:52] INFO: Reading sequences[2024-07-16 13:04:52] INFO: Building repeat graph50% 100% [2024-07-16 13:05:15] INFO: Median overlap divergence: 0[2024-07-16 13:05:15] INFO: Aligning reads to the graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:05:37] INFO: Aligned read sequence: 1184568 / 1313105 (0.902112)[2024-07-16 13:05:37] INFO: Median overlap divergence: 0.0607255[2024-07-16 13:05:37] INFO: Mean edge coverage: 29[2024-07-16 13:05:37] INFO: Resolving repeats[2024-07-16 13:05:37] INFO: >>>STAGE: trestleTraceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs0000000000f25af500000052'[2024-07-16 13:05:37] INFO: Simple unbridged repeats: 0[2024-07-16 13:05:37] INFO: Resolved: 0[2024-07-16 13:05:37] INFO: >>>STAGE: contigger[2024-07-16 13:05:37] INFO: Generating contigs[2024-07-16 13:05:37] INFO: Reading sequences[2024-07-16 13:05:37] INFO: Generated 1 contigs[2024-07-16 13:05:37] INFO: Added 0 scaffold connections[2024-07-16 13:05:37] INFO: >>>STAGE: polishing[2024-07-16 13:05:37] INFO: Polishing genome (1/1)[2024-07-16 13:05:37] INFO: Running minimap2[2024-07-16 13:05:37] INFO: Separating alignment into bubbles[2024-07-16 13:05:39] INFO: Alignment error rate: 0.101562[2024-07-16 13:05:39] INFO: Correcting bubbles0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs0000000000f25b0c00000053'[2024-07-16 13:05:39] INFO: >>>STAGE: finalize[2024-07-16 13:05:39] INFO: Assembly statistics:Total length:39948Fragments:1Fragments N50:39948Largest frg:39948Scaffolds:0Mean coverage:28[2024-07-16 13:05:39] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/72/working/out_dir/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flye (Test #2)" name="1" time="110.5546362400055">
        
            
            <system-out><![CDATA[
            [2024-07-16 13:06:11] INFO: Starting Flye 2.6-release[2024-07-16 13:06:11] INFO: >>>STAGE: configure[2024-07-16 13:06:11] INFO: Configuring run[2024-07-16 13:06:11] INFO: Total read length: 1466260[2024-07-16 13:06:11] INFO: Input genome size: 10000[2024-07-16 13:06:11] INFO: Estimated coverage: 146[2024-07-16 13:06:11] INFO: Reads N50/N90: 9054 / 4697[2024-07-16 13:06:11] INFO: Minimum overlap set to 5000[2024-07-16 13:06:11] INFO: Selected k-mer size: 15[2024-07-16 13:06:11] INFO: >>>STAGE: assembly[2024-07-16 13:06:11] INFO: Assembling disjointigs[2024-07-16 13:06:11] INFO: Reading sequences[2024-07-16 13:06:11] INFO: Generating solid k-mer index[2024-07-16 13:06:33] INFO: Counting k-mers (1/2):0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:06:33] INFO: Counting k-mers (2/2):0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:06:33] INFO: Filling index table0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:06:37] INFO: Extending reads[2024-07-16 13:06:40] INFO: Overlap-based coverage: 25[2024-07-16 13:06:40] INFO: Median overlap divergence: 0.1690520% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:06:40] INFO: Assembled 1 disjointigs[2024-07-16 13:06:40] INFO: Generating sequence10% 20% 40% 50% 70% 80% 100% [2024-07-16 13:06:41] INFO: >>>STAGE: consensus[2024-07-16 13:06:41] INFO: Running Minimap2[2024-07-16 13:06:41] INFO: Computing consensus[2024-07-16 13:06:42] INFO: Alignment error rate: 0.156815[2024-07-16 13:06:42] INFO: >>>STAGE: repeat[2024-07-16 13:06:42] INFO: Building and resolving repeat graph[2024-07-16 13:06:42] INFO: Reading sequences[2024-07-16 13:06:42] INFO: Building repeat graph50% 100% [2024-07-16 13:07:05] INFO: Median overlap divergence: 0[2024-07-16 13:07:05] INFO: Aligning reads to the graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:07:27] INFO: Aligned read sequence: 1184563 / 1313105 (0.902108)[2024-07-16 13:07:27] INFO: Median overlap divergence: 0.0610287[2024-07-16 13:07:27] INFO: Mean edge coverage: 29[2024-07-16 13:07:27] INFO: Resolving repeats[2024-07-16 13:07:27] INFO: >>>STAGE: trestleTraceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs0000000000f25b4000000055'[2024-07-16 13:07:27] INFO: Simple unbridged repeats: 0[2024-07-16 13:07:27] INFO: Resolved: 0[2024-07-16 13:07:27] INFO: >>>STAGE: contigger[2024-07-16 13:07:27] INFO: Generating contigs[2024-07-16 13:07:27] INFO: Reading sequences[2024-07-16 13:07:27] INFO: Generated 1 contigs[2024-07-16 13:07:27] INFO: Added 0 scaffold connections[2024-07-16 13:07:27] INFO: >>>STAGE: polishing[2024-07-16 13:07:27] INFO: Polishing genome (1/1)[2024-07-16 13:07:27] INFO: Running minimap2[2024-07-16 13:07:28] INFO: Separating alignment into bubbles[2024-07-16 13:07:29] INFO: Alignment error rate: 0.101979[2024-07-16 13:07:29] INFO: Correcting bubbles0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs0000000000f25b5700000056'[2024-07-16 13:07:30] INFO: >>>STAGE: finalize[2024-07-16 13:07:30] INFO: Assembly statistics:Total length:40422Fragments:1Fragments N50:40422Largest frg:40422Scaffolds:0Mean coverage:27[2024-07-16 13:07:30] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/74/working/out_dir/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flye (Test #3)" name="2" time="108.08443117141724">
        
            
            <system-out><![CDATA[
            [2024-07-16 13:08:01] INFO: Starting Flye 2.6-release[2024-07-16 13:08:01] INFO: >>>STAGE: configure[2024-07-16 13:08:01] INFO: Configuring run[2024-07-16 13:08:01] INFO: Total read length: 1466260[2024-07-16 13:08:01] INFO: Input genome size: 10000[2024-07-16 13:08:01] INFO: Estimated coverage: 146[2024-07-16 13:08:01] INFO: Reads N50/N90: 9054 / 4697[2024-07-16 13:08:01] INFO: Minimum overlap set to 5000[2024-07-16 13:08:01] INFO: Selected k-mer size: 17[2024-07-16 13:08:01] INFO: Using longest 40x reads for contig assembly[2024-07-16 13:08:01] INFO: >>>STAGE: assembly[2024-07-16 13:08:01] INFO: Assembling disjointigs[2024-07-16 13:08:01] INFO: Reading sequences[2024-07-16 13:08:01] INFO: Generating solid k-mer index[2024-07-16 13:08:23] INFO: Counting k-mers (1/2):0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:08:23] INFO: Counting k-mers (2/2):0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:08:23] INFO: Filling index table0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:08:27] INFO: Extending reads[2024-07-16 13:08:27] INFO: Overlap-based coverage: 3[2024-07-16 13:08:27] INFO: Median overlap divergence: 0.1734680% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:08:27] INFO: Assembled 1 disjointigs[2024-07-16 13:08:27] INFO: Generating sequence10% 20% 40% 50% 70% 80% 100% [2024-07-16 13:08:27] INFO: >>>STAGE: consensus[2024-07-16 13:08:27] INFO: Running Minimap2[2024-07-16 13:08:28] INFO: Computing consensus[2024-07-16 13:08:29] INFO: Alignment error rate: 0.146313[2024-07-16 13:08:29] INFO: >>>STAGE: repeat[2024-07-16 13:08:29] INFO: Building and resolving repeat graph[2024-07-16 13:08:29] INFO: Reading sequences[2024-07-16 13:08:29] INFO: Building repeat graph50% 100% [2024-07-16 13:08:51] INFO: Median overlap divergence: 0[2024-07-16 13:08:51] INFO: Aligning reads to the graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:09:13] INFO: Aligned read sequence: 1174263 / 1313105 (0.894264)[2024-07-16 13:09:13] INFO: Median overlap divergence: 0.0589391[2024-07-16 13:09:13] INFO: Mean edge coverage: 29[2024-07-16 13:09:13] INFO: Resolving repeats[2024-07-16 13:09:13] INFO: >>>STAGE: contigger[2024-07-16 13:09:13] INFO: Generating contigs[2024-07-16 13:09:13] INFO: Reading sequences[2024-07-16 13:09:13] INFO: Generated 1 contigs[2024-07-16 13:09:13] INFO: Added 0 scaffold connectionsTraceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs0000000000f25b8b00000058'[2024-07-16 13:09:14] INFO: >>>STAGE: polishing[2024-07-16 13:09:14] INFO: Polishing genome (1/2)[2024-07-16 13:09:14] INFO: Running minimap2[2024-07-16 13:09:14] INFO: Separating alignment into bubbles[2024-07-16 13:09:15] INFO: Alignment error rate: 0.099017[2024-07-16 13:09:15] INFO: Correcting bubbles0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs0000000000f25b9c00000059'[2024-07-16 13:09:16] INFO: Polishing genome (2/2)[2024-07-16 13:09:16] INFO: Running minimap2[2024-07-16 13:09:16] INFO: Separating alignment into bubbles[2024-07-16 13:09:17] INFO: Alignment error rate: 0.094400[2024-07-16 13:09:17] INFO: Correcting bubbles0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:09:18] INFO: >>>STAGE: finalize[2024-07-16 13:09:18] INFO: Assembly statistics:Total length:40414Fragments:1Fragments N50:40414Largest frg:40414Scaffolds:0Mean coverage:27[2024-07-16 13:09:18] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/76/working/out_dir/assembly.fastaTraceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs0000000000f25b9e0000005b'
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flye (Test #4)" name="3" time="110.64325523376465">
        
            
            <system-out><![CDATA[
            [2024-07-16 13:09:49] INFO: Starting Flye 2.6-release[2024-07-16 13:09:49] INFO: >>>STAGE: configure[2024-07-16 13:09:49] INFO: Configuring run[2024-07-16 13:09:49] INFO: Total read length: 1466260[2024-07-16 13:09:49] INFO: Input genome size: 10000[2024-07-16 13:09:49] INFO: Estimated coverage: 146[2024-07-16 13:09:49] INFO: Reads N50/N90: 9054 / 4697[2024-07-16 13:09:49] INFO: Minimum overlap set to 5000[2024-07-16 13:09:49] INFO: Selected k-mer size: 15[2024-07-16 13:09:49] INFO: >>>STAGE: assembly[2024-07-16 13:09:49] INFO: Assembling disjointigs[2024-07-16 13:09:49] INFO: Reading sequences[2024-07-16 13:09:49] INFO: Generating solid k-mer index[2024-07-16 13:10:11] INFO: Counting k-mers (1/2):0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:10:11] INFO: Counting k-mers (2/2):0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:10:11] INFO: Filling index table (1/2)0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:10:11] INFO: Filling index table (2/2)0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:10:15] INFO: Extending reads[2024-07-16 13:10:19] INFO: Overlap-based coverage: 24[2024-07-16 13:10:19] INFO: Median overlap divergence: 0.1844920% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:10:19] INFO: Assembled 1 disjointigs[2024-07-16 13:10:19] INFO: Generating sequence10% 20% 30% 40% 50% 60% 70% 80% 100% [2024-07-16 13:10:19] INFO: >>>STAGE: consensus[2024-07-16 13:10:19] INFO: Running Minimap2[2024-07-16 13:10:20] INFO: Computing consensus[2024-07-16 13:10:21] INFO: Alignment error rate: 0.182990[2024-07-16 13:10:21] INFO: >>>STAGE: repeat[2024-07-16 13:10:21] INFO: Building and resolving repeat graph[2024-07-16 13:10:21] INFO: Reading sequences[2024-07-16 13:10:21] INFO: Building repeat graph50% 100% [2024-07-16 13:10:43] INFO: Median overlap divergence: 0[2024-07-16 13:10:43] INFO: Aligning reads to the graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2024-07-16 13:11:05] INFO: Aligned read sequence: 1158758 / 1313105 (0.882456)[2024-07-16 13:11:05] INFO: Median overlap divergence: 0.0639983[2024-07-16 13:11:05] INFO: Mean edge coverage: 32[2024-07-16 13:11:05] INFO: Resolving repeats[2024-07-16 13:11:06] INFO: >>>STAGE: plasmids[2024-07-16 13:11:06] INFO: Recovering short unassembled sequencesTraceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs0000000000f25bca0000005d'[2024-07-16 13:11:06] INFO: Added 0 extra contigs[2024-07-16 13:11:06] INFO: >>>STAGE: contigger[2024-07-16 13:11:06] INFO: Generating contigs[2024-07-16 13:11:06] INFO: Reading sequences[2024-07-16 13:11:06] INFO: Generated 1 contigs[2024-07-16 13:11:06] INFO: Added 0 scaffold connections[2024-07-16 13:11:06] INFO: >>>STAGE: polishing[2024-07-16 13:11:06] INFO: Polishing genome (1/1)[2024-07-16 13:11:06] INFO: Running minimap2[2024-07-16 13:11:06] INFO: Separating alignment into bubbles[2024-07-16 13:11:08] INFO: Alignment error rate: 0.115118[2024-07-16 13:11:08] INFO: Correcting bubbles0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs0000000000f25bd90000005e'Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap    self.run()  File "/usr/local/lib/python3.7/multiprocessing/process.py", line 99, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 577, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.7/multiprocessing/managers.py", line 173, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 265, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.7/multiprocessing/util.py", line 189, in __call__    res = self._callback(*self._args, **self._kwargs)  File "/usr/local/lib/python3.7/shutil.py", line 491, in rmtree    _rmtree_safe_fd(fd, path, onerror)  File "/usr/local/lib/python3.7/shutil.py", line 449, in _rmtree_safe_fd    onerror(os.unlink, fullname, sys.exc_info())  File "/usr/local/lib/python3.7/shutil.py", line 447, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '.nfs0000000000f25be50000005f'[2024-07-16 13:11:09] INFO: >>>STAGE: finalize[2024-07-16 13:11:09] INFO: Assembly statistics:Total length:35687Fragments:1Fragments N50:35687Largest frg:35687Scaffolds:0Mean coverage:35[2024-07-16 13:11:09] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/78/working/out_dir/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #1)" name="0" time="41.06266140937805">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60  Calculating Z arrays for bucket 1  Reserving size (126) for bucket 2Getting block 3 of 60  Reserving size (126) for bucket 3  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 2Getting block 4 of 60  Reserving size (126) for bucket 4Getting block 5 of 60  Entering block accumulator loop for bucket 3:  Reserving size (126) for bucket 5  Entering block accumulator loop for bucket 2:Getting block 6 of 60Getting block 8 of 60  Calculating Z arrays for bucket 5  bucket 1: 10%  Reserving size (126) for bucket 6  bucket 1: 20%Getting block 7 of 60  Reserving size (126) for bucket 7  Calculating Z arrays for bucket 4  bucket 2: 10%  Entering block accumulator loop for bucket 5:  bucket 1: 30%  Entering block accumulator loop for bucket 4:  bucket 2: 20%  bucket 5: 10%  bucket 1: 40%  bucket 2: 30%  Calculating Z arrays for bucket 7  bucket 5: 20%  Calculating Z arrays for bucket 6  bucket 4: 10%  bucket 5: 30%  bucket 1: 50%  bucket 3: 10%  Reserving size (126) for bucket 8  bucket 1: 60%  bucket 2: 40%  bucket 5: 40%  bucket 1: 70%  Entering block accumulator loop for bucket 6:  bucket 1: 80%  bucket 5: 50%  bucket 3: 20%  bucket 1: 90%  Calculating Z arrays for bucket 8  bucket 5: 60%  Entering block accumulator loop for bucket 7:  bucket 4: 20%  bucket 5: 70%  bucket 2: 50%  bucket 6: 10%  bucket 1: 100%  bucket 2: 60%  bucket 4: 30%  bucket 5: 80%  bucket 7: 10%  bucket 2: 70%  bucket 4: 40%  bucket 5: 90%  Sorting block of length 42 for bucket 1  bucket 2: 80%  bucket 4: 50%  (Using difference cover)  bucket 5: 100%  bucket 2: 90%  bucket 4: 60%  bucket 6: 20%  bucket 2: 100%  bucket 4: 70%  Sorting block of length 63 for bucket 5  (Using difference cover)  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 7: 20%  bucket 6: 30%  bucket 3: 30%  bucket 7: 30%  bucket 4: 80%  bucket 3: 40%  bucket 6: 40%  Entering block accumulator loop for bucket 8:  bucket 7: 40%  bucket 3: 50%  bucket 6: 50%  bucket 7: 50%  bucket 4: 90%  bucket 8: 10%  bucket 6: 60%  bucket 7: 60%  bucket 4: 100%  bucket 3: 60%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 8: 20%  bucket 6: 70%  bucket 7: 70%  bucket 3: 70%  bucket 6: 80%  bucket 7: 80%  bucket 8: 30%  bucket 6: 90%  bucket 7: 90%  bucket 3: 80%  bucket 6: 100%  bucket 7: 100%  bucket 8: 40%  bucket 3: 90%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 8: 50%  bucket 3: 100%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 64 for bucket 5Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 20%Getting block 11 of 60  bucket 9: 30%  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 10:  bucket 9: 40%  bucket 10: 10%  bucket 9: 50%  bucket 10: 20%  Entering block accumulator loop for bucket 11:  bucket 9: 60%  bucket 10: 30%  bucket 11: 10%  bucket 9: 70%  bucket 10: 40%  bucket 11: 20%  bucket 9: 80%  bucket 10: 50%  bucket 11: 30%  bucket 9: 90%  bucket 11: 40%  bucket 10: 60%  bucket 11: 50%  bucket 9: 100%  Sorting block of length 124 for bucket 9  bucket 11: 60%  (Using difference cover)  bucket 10: 70%  bucket 11: 70%  bucket 10: 80%  bucket 11: 80%  bucket 10: 90%  bucket 11: 90%  bucket 10: 100%  bucket 11: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 125 for bucket 9Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  Sorting block time: 00:00:00Returning block of 83 for bucket 12  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%Getting block 15 of 60  bucket 14: 40%  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  bucket 14: 50%  bucket 14: 60%  Entering block accumulator loop for bucket 15:  bucket 14: 70%  bucket 15: 10%  bucket 14: 80%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 14: 90%  bucket 15: 50%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  bucket 16: 40%  Entering block accumulator loop for bucket 17:  bucket 16: 50%  bucket 17: 10%  bucket 16: 60%  bucket 16: 70%  bucket 17: 20%  bucket 16: 80%  bucket 17: 30%  bucket 16: 90%  bucket 17: 40%  bucket 16: 100%  Sorting block of length 100 for bucket 16  bucket 17: 50%  (Using difference cover)  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  bucket 18: 30%  bucket 18: 40%  Entering block accumulator loop for bucket 19:  bucket 18: 50%  bucket 19: 10%  bucket 18: 60%  bucket 19: 20%  bucket 18: 70%  bucket 19: 30%  bucket 18: 80%  bucket 19: 40%  bucket 18: 90%  bucket 19: 50%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Entering block accumulator loop for bucket 20:  Calculating Z arrays for bucket 21  bucket 20: 10%  Entering block accumulator loop for bucket 21:  bucket 20: 20%  bucket 20: 30%  bucket 21: 10%  bucket 20: 40%  bucket 21: 20%  bucket 20: 50%  bucket 21: 30%  bucket 20: 60%  bucket 21: 40%  bucket 20: 70%  bucket 21: 50%  bucket 20: 80%  bucket 21: 60%  bucket 20: 90%  bucket 21: 70%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%Getting block 23 of 60  Reserving size (126) for bucket 23  bucket 22: 60%  Calculating Z arrays for bucket 23  bucket 22: 70%  Entering block accumulator loop for bucket 23:  bucket 22: 80%  bucket 23: 10%  bucket 22: 90%  bucket 23: 20%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Entering block accumulator loop for bucket 24:  Calculating Z arrays for bucket 25  bucket 24: 10%  Entering block accumulator loop for bucket 25:  bucket 24: 20%  bucket 25: 10%  bucket 24: 30%  bucket 25: 20%  bucket 24: 40%  bucket 25: 30%  bucket 24: 50%  bucket 25: 40%  bucket 24: 60%  bucket 25: 50%  bucket 24: 70%  bucket 25: 60%  bucket 24: 80%  bucket 25: 70%  bucket 24: 90%  bucket 25: 80%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 90%  bucket 26: 100%  Entering block accumulator loop for bucket 27:  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 20%  bucket 28: 30%  Entering block accumulator loop for bucket 29:  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 29: 10%  bucket 28: 70%  bucket 28: 80%Getting block 30 of 60  Reserving size (126) for bucket 30  bucket 29: 20%  bucket 28: 90%  Calculating Z arrays for bucket 30  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 30%  bucket 29: 40%  Entering block accumulator loop for bucket 30:  bucket 29: 50%  bucket 29: 60%  bucket 30: 10%  bucket 29: 70%  bucket 30: 20%  bucket 29: 80%  bucket 30: 30%  Sorting block time: 00:00:00  bucket 30: 40%Returning block of 107 for bucket 28  bucket 29: 90%  bucket 30: 50%  bucket 30: 60%  bucket 29: 100%  bucket 30: 70%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Entering block accumulator loop for bucket 31:  Calculating Z arrays for bucket 32  bucket 31: 10%  bucket 31: 20%  Entering block accumulator loop for bucket 32:  bucket 31: 30%  bucket 31: 40%  bucket 32: 10%  bucket 31: 50%  bucket 31: 60%  bucket 32: 20%  bucket 31: 70%  bucket 32: 30%  bucket 31: 80%  bucket 32: 40%  bucket 31: 90%  bucket 32: 50%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:Getting block 34 of 60  bucket 33: 10%  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  bucket 33: 20%  Entering block accumulator loop for bucket 34:  bucket 33: 30%  bucket 34: 10%  bucket 33: 40%  bucket 34: 20%Getting block 35 of 60  bucket 34: 30%  bucket 33: 50%  bucket 34: 40%  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  bucket 34: 50%  bucket 33: 60%  bucket 34: 60%  bucket 33: 70%  Entering block accumulator loop for bucket 35:  bucket 34: 70%  bucket 33: 80%  bucket 34: 80%  bucket 33: 90%  bucket 35: 10%  bucket 34: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 35: 20%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:Getting block 37 of 60  Reserving size (126) for bucket 37  bucket 36: 10%  Calculating Z arrays for bucket 37  bucket 36: 20%  bucket 36: 30%  Entering block accumulator loop for bucket 37:  bucket 36: 40%  bucket 36: 50%  bucket 37: 10%  bucket 36: 60%  bucket 37: 20%  bucket 36: 70%  bucket 36: 80%  bucket 37: 30%  bucket 36: 90%  bucket 37: 40%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  bucket 37: 50%  bucket 37: 60%  Entering block accumulator loop for bucket 38:  bucket 37: 70%  bucket 38: 10%  bucket 37: 80%  Sorting block time: 00:00:00Returning block of 121 for bucket 36  bucket 37: 90%  bucket 38: 20%  bucket 37: 100%  bucket 38: 30%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Entering block accumulator loop for bucket 39:  Calculating Z arrays for bucket 40  bucket 39: 10%  Entering block accumulator loop for bucket 40:  bucket 39: 20%  bucket 40: 10%  bucket 39: 30%  bucket 40: 20%  bucket 40: 30%  bucket 39: 40%  bucket 40: 40%  bucket 39: 50%  bucket 40: 50%  bucket 40: 60%  bucket 39: 60%  bucket 40: 70%  bucket 39: 70%  bucket 40: 80%  bucket 40: 90%  bucket 39: 80%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Entering block accumulator loop for bucket 41:  Calculating Z arrays for bucket 42  bucket 41: 10%  Entering block accumulator loop for bucket 42:  bucket 41: 20%  bucket 42: 10%  bucket 41: 30%  bucket 41: 40%  bucket 42: 20%  bucket 41: 50%  bucket 42: 30%  bucket 41: 60%  bucket 42: 40%  bucket 41: 70%  bucket 42: 50%  bucket 41: 80%  bucket 42: 60%  bucket 41: 90%  bucket 42: 70%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:Getting block 44 of 60  Reserving size (126) for bucket 44  bucket 43: 10%  Calculating Z arrays for bucket 44  bucket 43: 20%  Entering block accumulator loop for bucket 44:  bucket 43: 30%  bucket 44: 10%  bucket 44: 20%  bucket 43: 40%  bucket 44: 30%  bucket 43: 50%  bucket 44: 40%  bucket 43: 60%  bucket 44: 50%  bucket 43: 70%  bucket 44: 60%  bucket 43: 80%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 43: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%Getting block 47 of 60  Reserving size (126) for bucket 47  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  Sorting block time: 00:00:00Returning block of 70 for bucket 46  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  bucket 48: 40%  bucket 48: 50%  Entering block accumulator loop for bucket 49:  bucket 48: 60%  bucket 49: 10%  bucket 48: 70%  bucket 49: 20%  bucket 48: 80%  bucket 49: 30%  bucket 48: 90%  bucket 49: 40%  bucket 48: 100%  bucket 49: 50%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  bucket 51: 10%  bucket 51: 20%  Entering block accumulator loop for bucket 52:  bucket 51: 30%  bucket 52: 10%  bucket 51: 40%  bucket 52: 20%  bucket 51: 50%  bucket 52: 30%  bucket 51: 60%  bucket 52: 40%  bucket 51: 70%  bucket 52: 50%  bucket 51: 80%  bucket 52: 60%  bucket 51: 90%  bucket 52: 70%  bucket 51: 100%  bucket 52: 80%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  Sorting block time: 00:00:00Returning block of 79 for bucket 53  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%Getting block 56 of 60  Reserving size (126) for bucket 56  bucket 55: 60%  Calculating Z arrays for bucket 56  bucket 55: 70%  bucket 55: 80%  Entering block accumulator loop for bucket 56:  bucket 55: 90%  bucket 56: 10%  bucket 55: 100%  Sorting block of length 79 for bucket 55  bucket 56: 20%  (Using difference cover)  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57Getting block 58 of 60  Entering block accumulator loop for bucket 57:  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  bucket 57: 10%  Entering block accumulator loop for bucket 58:  bucket 57: 20%  bucket 57: 30%  bucket 58: 10%  bucket 57: 40%  bucket 58: 20%  bucket 57: 50%  bucket 58: 30%  bucket 57: 60%  bucket 58: 40%  bucket 58: 50%  bucket 57: 70%  bucket 57: 80%  bucket 58: 60%  bucket 57: 90%  bucket 58: 70%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59Getting block 60 of 60  Entering block accumulator loop for bucket 59:  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  bucket 59: 10%  Entering block accumulator loop for bucket 60:  bucket 59: 20%  bucket 60: 10%  bucket 60: 20%  bucket 59: 30%  bucket 60: 30%  bucket 59: 40%  bucket 60: 40%  bucket 59: 50%  bucket 60: 50%  bucket 59: 60%  bucket 60: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #2)" name="1" time="31.96019172668457">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  bucket 1: 10%Getting block 3 of 60  bucket 1: 20%  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 3  bucket 1: 30%  Entering block accumulator loop for bucket 2:  bucket 1: 40%  bucket 2: 10%  bucket 1: 50%  Entering block accumulator loop for bucket 3:  bucket 2: 20%  bucket 1: 60%Getting block 4 of 60Getting block 5 of 60  Reserving size (126) for bucket 5  bucket 2: 30%Getting block 6 of 60  bucket 2: 40%  Reserving size (126) for bucket 4  bucket 2: 50%  Reserving size (126) for bucket 6  bucket 3: 10%  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 4  bucket 3: 20%Getting block 7 of 60  Reserving size (126) for bucket 7  Entering block accumulator loop for bucket 4:  bucket 2: 60%  bucket 3: 30%  bucket 1: 70%  bucket 2: 70%  Entering block accumulator loop for bucket 5:  bucket 4: 10%  bucket 2: 80%  bucket 3: 40%  bucket 5: 10%Getting block 8 of 60  bucket 1: 80%  Reserving size (126) for bucket 8  Calculating Z arrays for bucket 7  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  bucket 3: 50%  Calculating Z arrays for bucket 6  bucket 4: 20%  bucket 2: 90%  bucket 4: 30%  bucket 7: 10%  Entering block accumulator loop for bucket 8:  bucket 5: 20%  bucket 7: 20%  Entering block accumulator loop for bucket 6:  bucket 2: 100%  bucket 3: 60%  bucket 5: 30%  bucket 7: 30%  bucket 4: 40%  bucket 6: 10%  bucket 5: 40%  bucket 4: 50%  bucket 1: 90%  bucket 6: 20%  Sorting block of length 84 for bucket 2  bucket 5: 50%  (Using difference cover)  bucket 4: 60%  bucket 5: 60%  bucket 6: 30%  bucket 8: 10%  bucket 3: 70%  bucket 4: 70%  bucket 6: 40%  bucket 8: 20%  bucket 3: 80%  bucket 1: 100%  bucket 6: 50%  bucket 4: 80%  Sorting block of length 42 for bucket 1  bucket 8: 30%  bucket 3: 90%  bucket 4: 90%  bucket 8: 40%  bucket 4: 100%  (Using difference cover)  bucket 3: 100%  bucket 5: 70%  Sorting block of length 68 for bucket 4  (Using difference cover)  Sorting block of length 106 for bucket 3  bucket 6: 60%  (Using difference cover)  bucket 7: 40%  bucket 5: 80%  bucket 8: 50%  bucket 6: 70%  bucket 7: 50%  bucket 5: 90%  bucket 6: 80%  bucket 8: 60%  bucket 7: 60%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 8: 70%  bucket 7: 70%  bucket 6: 90%  bucket 8: 80%  bucket 7: 80%  bucket 8: 90%  bucket 6: 100%  bucket 7: 90%  bucket 8: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 76 for bucket 7Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  Entering block accumulator loop for bucket 10:  bucket 9: 70%Getting block 11 of 60  Reserving size (126) for bucket 11  bucket 9: 80%  Calculating Z arrays for bucket 11  bucket 10: 10%  bucket 9: 90%  bucket 10: 20%  bucket 9: 100%  Entering block accumulator loop for bucket 11:  bucket 10: 30%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 11: 10%  bucket 10: 40%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 10: 50%  bucket 11: 50%  bucket 10: 60%  bucket 11: 60%  bucket 11: 70%  bucket 10: 70%  bucket 11: 80%  bucket 11: 90%  bucket 10: 80%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 125 for bucket 9Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)Getting block 13 of 60  Reserving size (126) for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 14:  Entering block accumulator loop for bucket 13:  Sorting block time: 00:00:00Returning block of 83 for bucket 12  bucket 14: 10%  bucket 13: 10%  bucket 14: 20%  bucket 13: 20%  bucket 14: 30%  bucket 14: 40%  bucket 13: 30%  bucket 14: 50%  bucket 13: 40%  bucket 14: 60%  bucket 13: 50%  bucket 14: 70%  bucket 13: 60%  bucket 14: 80%  bucket 14: 90%  bucket 13: 70%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)Getting block 16 of 60  Reserving size (126) for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 16  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  bucket 16: 10%  Entering block accumulator loop for bucket 17:  bucket 16: 20%  bucket 17: 10%  bucket 16: 30%  bucket 17: 20%  Sorting block time: 00:00:00  bucket 16: 40%Returning block of 69 for bucket 15  bucket 16: 50%  bucket 17: 30%  bucket 16: 60%  bucket 16: 70%  bucket 17: 40%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%Getting block 19 of 60  bucket 18: 50%  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 18: 60%  Entering block accumulator loop for bucket 19:  bucket 18: 70%  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 18: 80%  bucket 19: 20%  bucket 20: 10%  bucket 18: 90%  bucket 19: 30%  bucket 20: 20%  bucket 18: 100%  bucket 19: 40%  bucket 20: 30%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 50%  bucket 20: 40%  bucket 19: 60%  bucket 19: 70%  bucket 20: 50%  bucket 19: 80%  bucket 19: 90%  bucket 20: 60%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%Getting block 22 of 60  Reserving size (126) for bucket 22  bucket 21: 40%  Calculating Z arrays for bucket 22  bucket 21: 50%  Entering block accumulator loop for bucket 22:  bucket 21: 60%  bucket 21: 70%  bucket 22: 10%  bucket 21: 80%  bucket 22: 20%  bucket 21: 90%  bucket 22: 30%  bucket 21: 100%  bucket 22: 40%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 24:  Entering block accumulator loop for bucket 23:  bucket 24: 10%  bucket 23: 10%  bucket 24: 20%  bucket 23: 20%  bucket 24: 30%  bucket 23: 30%  bucket 24: 40%  bucket 23: 40%  bucket 24: 50%  bucket 23: 50%  bucket 24: 60%  bucket 23: 60%  bucket 24: 70%  bucket 23: 70%  bucket 24: 80%  bucket 23: 80%  bucket 24: 90%  bucket 23: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Entering block accumulator loop for bucket 26:  Calculating Z arrays for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 27:  Entering block accumulator loop for bucket 28:  bucket 27: 10%  bucket 28: 10%  bucket 27: 20%  bucket 28: 20%  bucket 27: 30%  bucket 28: 30%  bucket 27: 40%  bucket 26: 10%  bucket 28: 40%  bucket 27: 50%  bucket 26: 20%  bucket 28: 50%  bucket 27: 60%  bucket 26: 30%  bucket 28: 60%  bucket 27: 70%  bucket 26: 40%  bucket 28: 70%  bucket 27: 80%  bucket 26: 50%  bucket 28: 80%  bucket 27: 90%  bucket 26: 60%  bucket 28: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 26: 70%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%Getting block 30 of 60  Reserving size (126) for bucket 30  bucket 29: 40%  Calculating Z arrays for bucket 30  bucket 29: 50%  bucket 29: 60%  Entering block accumulator loop for bucket 30:  bucket 29: 70%  bucket 30: 10%  bucket 29: 80%  bucket 29: 90%  bucket 30: 20%  bucket 30: 30%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 31:Getting block 33 of 60  Entering block accumulator loop for bucket 32:  Reserving size (126) for bucket 33  bucket 31: 10%  Calculating Z arrays for bucket 33  bucket 32: 10%  bucket 31: 20%  Entering block accumulator loop for bucket 33:  bucket 31: 30%  bucket 33: 10%  bucket 32: 20%  bucket 33: 20%  bucket 32: 30%  bucket 33: 30%  bucket 32: 40%  bucket 31: 40%  bucket 33: 40%  bucket 32: 50%  bucket 31: 50%  bucket 32: 60%  bucket 31: 60%  bucket 33: 50%  bucket 32: 70%  bucket 31: 70%  bucket 33: 60%  bucket 32: 80%  bucket 31: 80%  bucket 33: 70%  bucket 32: 90%  bucket 31: 90%  bucket 33: 80%  bucket 32: 100%  bucket 31: 100%  Sorting block of length 125 for bucket 32  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 33: 90%  (Using difference cover)  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  bucket 34: 10%  bucket 34: 20%  Entering block accumulator loop for bucket 35:  bucket 34: 30%  bucket 35: 10%  bucket 34: 40%  bucket 35: 20%  bucket 34: 50%Getting block 36 of 60  Reserving size (126) for bucket 36  bucket 35: 30%  bucket 34: 60%  Calculating Z arrays for bucket 36  bucket 35: 40%  bucket 34: 70%  Entering block accumulator loop for bucket 36:  bucket 35: 50%  bucket 34: 80%  bucket 36: 10%  bucket 35: 60%  bucket 34: 90%  bucket 36: 20%  bucket 35: 70%  bucket 34: 100%  bucket 36: 30%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 80%  bucket 36: 40%  bucket 36: 50%  bucket 35: 90%  bucket 36: 60%  bucket 35: 100%  bucket 36: 70%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 37:  bucket 37: 10%  Entering block accumulator loop for bucket 38:  bucket 37: 20%  bucket 38: 10%  bucket 37: 30%  bucket 37: 40%  bucket 38: 20%  bucket 37: 50%  bucket 38: 30%  bucket 37: 60%  bucket 38: 40%  bucket 37: 70%  bucket 38: 50%  bucket 37: 80%  bucket 38: 60%  bucket 37: 90%  bucket 38: 70%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Entering block accumulator loop for bucket 39:  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 39: 10%  bucket 40: 10%  bucket 39: 20%  bucket 40: 20%  bucket 39: 30%  bucket 40: 30%Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  bucket 39: 40%  bucket 40: 40%  bucket 39: 50%  bucket 40: 50%  Entering block accumulator loop for bucket 41:  bucket 39: 60%  bucket 40: 60%  bucket 41: 10%  bucket 39: 70%  bucket 40: 70%  bucket 41: 20%  bucket 39: 80%  bucket 40: 80%  bucket 41: 30%  bucket 39: 90%  bucket 40: 90%  bucket 41: 40%  bucket 39: 100%  bucket 40: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block of length 41 for bucket 40  bucket 41: 50%  (Using difference cover)  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 42: 10%  bucket 42: 20%  bucket 42: 30%  bucket 42: 40%Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  Entering block accumulator loop for bucket 43:  bucket 42: 80%  bucket 42: 90%  bucket 43: 10%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  Sorting block time: 00:00:00Returning block of 120 for bucket 42  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%Getting block 45 of 60  Reserving size (126) for bucket 45  bucket 44: 20%  Calculating Z arrays for bucket 45  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  Entering block accumulator loop for bucket 45:  bucket 44: 60%  bucket 44: 70%  bucket 45: 10%  bucket 44: 80%  bucket 44: 90%  bucket 45: 20%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%Getting block 47 of 60  bucket 46: 70%  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  bucket 46: 80%  Entering block accumulator loop for bucket 47:  bucket 46: 90%  bucket 47: 10%  bucket 47: 20%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  bucket 48: 90%  bucket 48: 100%  Entering block accumulator loop for bucket 49:  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  Sorting block time: 00:00:00Returning block of 114 for bucket 48  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  bucket 50: 60%  bucket 50: 70%  Entering block accumulator loop for bucket 51:  bucket 50: 80%  bucket 50: 90%  bucket 51: 10%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 20%  bucket 51: 30%  bucket 51: 40%  bucket 51: 50%  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 53:  Entering block accumulator loop for bucket 52:  bucket 53: 10%  bucket 53: 20%  bucket 52: 10%  bucket 53: 30%  bucket 52: 20%  bucket 53: 40%  bucket 52: 30%  bucket 53: 50%  bucket 52: 40%  bucket 53: 60%  bucket 53: 70%  bucket 52: 50%  bucket 53: 80%  bucket 52: 60%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 54:  Entering block accumulator loop for bucket 55:  bucket 54: 10%  bucket 55: 10%  bucket 54: 20%  bucket 55: 20%  bucket 55: 30%  bucket 54: 30%  bucket 55: 40%  bucket 54: 40%  bucket 55: 50%  bucket 54: 50%  bucket 55: 60%  bucket 54: 60%  bucket 55: 70%  bucket 54: 70%  bucket 55: 80%  bucket 54: 80%  bucket 55: 90%  bucket 54: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  Sorting block time: 00:00:00Returning block of 65 for bucket 54  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 57:  Entering block accumulator loop for bucket 58:  bucket 57: 10%  bucket 58: 10%  bucket 57: 20%  bucket 58: 20%  bucket 57: 30%  bucket 58: 30%  bucket 57: 40%  bucket 58: 40%  bucket 57: 50%  bucket 58: 50%  bucket 57: 60%  bucket 58: 60%  bucket 57: 70%  bucket 58: 70%  bucket 58: 80%  bucket 57: 80%  bucket 58: 90%  bucket 57: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 60:  bucket 60: 10%  Entering block accumulator loop for bucket 59:  bucket 60: 20%  bucket 60: 30%  bucket 59: 10%  bucket 60: 40%  bucket 59: 20%  bucket 60: 50%  bucket 60: 60%  bucket 59: 30%  bucket 60: 70%  bucket 59: 40%  bucket 60: 80%  bucket 60: 90%  bucket 59: 50%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #11)" name="10" time="11.0795316696167">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 10, "time_seconds": 11.0795316696167, "tool_id": "hisat2", "tool_version": "2.2.1+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #12)" name="11" time="11.45261025428772">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 11, "time_seconds": 11.45261025428772, "tool_id": "hisat2", "tool_version": "2.2.1+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #13)" name="12" time="31.918437242507935">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Entering block accumulator loop for bucket 1:Getting block 3 of 60  bucket 1: 10%  Reserving size (126) for bucket 3  Reserving size (126) for bucket 2  bucket 1: 20%  Calculating Z arrays for bucket 2  bucket 1: 30%  bucket 1: 40%  Calculating Z arrays for bucket 3  bucket 1: 50%  bucket 1: 60%  Entering block accumulator loop for bucket 2:  bucket 1: 70%  Entering block accumulator loop for bucket 3:  bucket 1: 80%  bucket 2: 10%  bucket 1: 90%  bucket 3: 10%  bucket 1: 100%  bucket 2: 20%Getting block 4 of 60  bucket 3: 20%  bucket 2: 30%  Reserving size (126) for bucket 4  bucket 2: 40%  Calculating Z arrays for bucket 4  Sorting block of length 42 for bucket 1  (Using difference cover)  Sorting block time: 00:00:00Getting block 5 of 60  bucket 3: 30%  Reserving size (126) for bucket 5  Entering block accumulator loop for bucket 4:  Calculating Z arrays for bucket 5  bucket 3: 40%  bucket 2: 50%Getting block 7 of 60  bucket 2: 60%  Reserving size (126) for bucket 7Getting block 6 of 60  Reserving size (126) for bucket 6  bucket 2: 70%Getting block 8 of 60  bucket 2: 80%  bucket 3: 50%  Calculating Z arrays for bucket 7  bucket 3: 60%Returning block of 43 for bucket 1  Reserving size (126) for bucket 8  bucket 3: 70%  Calculating Z arrays for bucket 6  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 7:  bucket 2: 90%  bucket 3: 80%  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 2: 100%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 4: 10%  bucket 5: 10%  Entering block accumulator loop for bucket 8:  bucket 3: 90%  bucket 6: 10%  bucket 7: 10%  bucket 4: 20%  bucket 3: 100%  bucket 5: 20%  bucket 8: 10%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 6: 20%  bucket 7: 20%  bucket 4: 30%  bucket 5: 30%  bucket 6: 30%  bucket 8: 20%  bucket 4: 40%  bucket 5: 40%  bucket 7: 30%  bucket 6: 40%  bucket 4: 50%  bucket 8: 30%  bucket 5: 50%  bucket 7: 40%  bucket 8: 40%  bucket 6: 50%  bucket 4: 60%  bucket 5: 60%  bucket 8: 50%  bucket 4: 70%  bucket 7: 50%  bucket 5: 70%  bucket 8: 60%  bucket 6: 60%  bucket 4: 80%  bucket 5: 80%  bucket 6: 70%  bucket 8: 70%  bucket 5: 90%  bucket 6: 80%  bucket 8: 80%  bucket 5: 100%  bucket 4: 90%  Sorting block of length 63 for bucket 5  Sorting block time: 00:00:00  (Using difference cover)  bucket 7: 60%  bucket 6: 90%Returning block of 85 for bucket 2  bucket 7: 70%  bucket 6: 100%  bucket 8: 90%  bucket 7: 80%  bucket 4: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 8: 100%  bucket 7: 90%  Sorting block of length 94 for bucket 8  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 91 for bucket 6Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 40%Getting block 11 of 60  bucket 9: 50%Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  bucket 9: 60%  Entering block accumulator loop for bucket 10:  Reserving size (126) for bucket 11  bucket 9: 70%  bucket 10: 10%  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 12:  bucket 9: 80%  bucket 10: 20%  bucket 12: 10%  bucket 10: 30%  bucket 9: 90%  bucket 12: 20%  bucket 10: 40%  bucket 9: 100%  bucket 12: 30%  bucket 10: 50%  Sorting block of length 124 for bucket 9  (Using difference cover)  Entering block accumulator loop for bucket 11:  bucket 12: 40%  bucket 10: 60%  bucket 12: 50%  bucket 11: 10%  bucket 10: 70%  bucket 12: 60%  bucket 11: 20%  bucket 10: 80%  bucket 12: 70%  bucket 11: 30%  bucket 10: 90%  bucket 12: 80%  bucket 11: 40%  bucket 10: 100%  bucket 12: 90%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 11: 50%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  Sorting block time: 00:00:00Returning block of 86 for bucket 13  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 15:  bucket 15: 10%  Entering block accumulator loop for bucket 16:  bucket 15: 20%  bucket 15: 30%  bucket 16: 10%  bucket 15: 40%  bucket 16: 20%  bucket 15: 50%  bucket 16: 30%  bucket 15: 60%  bucket 16: 40%  bucket 15: 70%  bucket 16: 50%  bucket 15: 80%  bucket 16: 60%  bucket 15: 90%  bucket 16: 70%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  bucket 17: 10%  Entering block accumulator loop for bucket 18:  bucket 17: 20%  bucket 18: 10%  bucket 17: 30%  bucket 18: 20%  bucket 17: 40%  bucket 18: 30%  bucket 17: 50%  bucket 18: 40%  bucket 17: 60%  bucket 18: 50%  bucket 17: 70%  bucket 18: 60%  bucket 17: 80%  bucket 18: 70%  bucket 17: 90%  bucket 18: 80%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 19:  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 19: 20%  bucket 20: 10%  bucket 19: 30%  bucket 20: 20%  bucket 19: 40%  bucket 20: 30%  bucket 19: 50%  bucket 20: 40%  bucket 19: 60%  bucket 20: 50%  bucket 19: 70%  bucket 20: 60%  bucket 19: 80%  bucket 20: 70%  bucket 19: 90%  bucket 20: 80%  bucket 19: 100%  bucket 20: 90%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 21 of 60  Reserving size (126) for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 22:  Entering block accumulator loop for bucket 21:  bucket 22: 10%  bucket 21: 10%  bucket 22: 20%  bucket 21: 20%  bucket 22: 30%  bucket 21: 30%Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  bucket 21: 40%  bucket 22: 40%  bucket 21: 50%  bucket 22: 50%  Entering block accumulator loop for bucket 23:  bucket 21: 60%  bucket 22: 60%  bucket 21: 70%  bucket 21: 80%  bucket 22: 70%  bucket 21: 90%  bucket 23: 10%  bucket 22: 80%  bucket 21: 100%  Sorting block of length 54 for bucket 21  bucket 23: 20%  bucket 22: 90%  bucket 23: 30%  (Using difference cover)  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  bucket 24: 40%  bucket 24: 50%  Entering block accumulator loop for bucket 25:  bucket 24: 60%  bucket 25: 10%  bucket 24: 70%  bucket 25: 20%  bucket 24: 80%  bucket 25: 30%  bucket 24: 90%Getting block 26 of 60  bucket 24: 100%  bucket 25: 40%  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 25: 50%  Entering block accumulator loop for bucket 26:  bucket 25: 60%  bucket 26: 10%  bucket 25: 70%  bucket 26: 20%  bucket 25: 80%  bucket 26: 30%  bucket 25: 90%  bucket 26: 40%  bucket 25: 100%  Sorting block of length 66 for bucket 25  bucket 26: 50%  bucket 26: 60%  (Using difference cover)  Sorting block time: 00:00:00  bucket 26: 70%Returning block of 69 for bucket 24  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Entering block accumulator loop for bucket 27:  Calculating Z arrays for bucket 28  bucket 27: 10%  Entering block accumulator loop for bucket 28:  bucket 27: 20%  bucket 28: 10%  bucket 27: 30%  bucket 28: 20%  bucket 27: 40%  bucket 28: 30%  bucket 27: 50%  bucket 28: 40%  bucket 27: 60%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 27: 70%  bucket 28: 90%  bucket 27: 80%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 29  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 30:  bucket 29: 10%  bucket 30: 10%  bucket 29: 20%  bucket 30: 20%  bucket 29: 30%Getting block 31 of 60  bucket 30: 30%  bucket 29: 40%  Reserving size (126) for bucket 31  bucket 30: 40%  bucket 29: 50%  Calculating Z arrays for bucket 31  bucket 30: 50%  bucket 29: 60%  bucket 30: 60%  bucket 29: 70%  Entering block accumulator loop for bucket 31:  bucket 30: 70%  bucket 29: 80%  bucket 30: 80%  bucket 31: 10%  bucket 29: 90%  bucket 31: 20%  bucket 30: 90%  bucket 31: 30%  bucket 29: 100%  bucket 30: 100%  bucket 31: 40%  Sorting block of length 51 for bucket 29  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  (Using difference cover)  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%  bucket 33: 30%  bucket 33: 40%  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  Sorting block time: 00:00:00Returning block of 126 for bucket 32  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%Getting block 35 of 60  bucket 34: 80%  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  bucket 34: 90%  Entering block accumulator loop for bucket 35:  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  Sorting block time: 00:00:00Returning block of 123 for bucket 34  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 36:  bucket 36: 10%  Entering block accumulator loop for bucket 37:  bucket 36: 20%  bucket 37: 10%  bucket 36: 30%  bucket 37: 20%  bucket 36: 40%  bucket 37: 30%  bucket 36: 50%  bucket 37: 40%  bucket 36: 60%  bucket 37: 50%  bucket 36: 70%  bucket 37: 60%  bucket 36: 80%  bucket 37: 70%  bucket 36: 90%  bucket 37: 80%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Entering block accumulator loop for bucket 38:  Calculating Z arrays for bucket 39  bucket 38: 10%  Entering block accumulator loop for bucket 39:  bucket 38: 20%  bucket 39: 10%  bucket 38: 30%  bucket 39: 20%  bucket 38: 40%  bucket 39: 30%  bucket 38: 50%  bucket 39: 40%  bucket 38: 60%  bucket 39: 50%  bucket 38: 70%  bucket 39: 60%  bucket 38: 80%  bucket 39: 70%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Entering block accumulator loop for bucket 40:  Calculating Z arrays for bucket 41  bucket 40: 10%  Entering block accumulator loop for bucket 41:  bucket 40: 20%  bucket 41: 10%  bucket 40: 30%  bucket 41: 20%  bucket 40: 40%  bucket 41: 30%  bucket 40: 50%  bucket 41: 40%  bucket 40: 60%  bucket 41: 50%  bucket 40: 70%  bucket 41: 60%  bucket 40: 80%  bucket 41: 70%  bucket 40: 90%  bucket 41: 80%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 42:  bucket 42: 10%  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 42: 20%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 42: 30%  bucket 43: 50%  bucket 42: 40%  bucket 43: 60%  bucket 42: 50%  bucket 43: 70%  bucket 42: 60%  bucket 43: 80%  bucket 42: 70%  bucket 43: 90%  bucket 42: 80%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  Entering block accumulator loop for bucket 45:  bucket 44: 30%  bucket 44: 40%  bucket 45: 10%  bucket 44: 50%  bucket 45: 20%  bucket 44: 60%  bucket 45: 30%  bucket 44: 70%  bucket 45: 40%  bucket 44: 80%  bucket 45: 50%  bucket 44: 90%  bucket 45: 60%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 46:  bucket 46: 10%  Entering block accumulator loop for bucket 47:  bucket 46: 20%  bucket 47: 10%  bucket 46: 30%  bucket 47: 20%  bucket 46: 40%  bucket 47: 30%  bucket 46: 50%  bucket 47: 40%  bucket 46: 60%  bucket 47: 50%  bucket 46: 70%  bucket 47: 60%  bucket 46: 80%  bucket 47: 70%  bucket 46: 90%  bucket 47: 80%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 48:  bucket 48: 10%  Entering block accumulator loop for bucket 49:  bucket 48: 20%  bucket 48: 30%  bucket 49: 10%  bucket 48: 40%  bucket 49: 20%  bucket 48: 50%  bucket 48: 60%  bucket 49: 30%  bucket 48: 70%  bucket 48: 80%  bucket 49: 40%  bucket 48: 90%  bucket 48: 100%  bucket 49: 50%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 60%Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  bucket 49: 70%  bucket 49: 80%  Sorting block time: 00:00:00  Entering block accumulator loop for bucket 50:  bucket 49: 90%Getting block 51 of 60Returning block of 114 for bucket 48  bucket 49: 100%  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  bucket 50: 10%  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 50: 20%  Entering block accumulator loop for bucket 51:  bucket 50: 30%  bucket 51: 10%  bucket 50: 40%  bucket 51: 20%  bucket 50: 50%  bucket 51: 30%  bucket 50: 60%  bucket 51: 40%  bucket 50: 70%  bucket 51: 50%  bucket 50: 80%  bucket 51: 60%  bucket 50: 90%  bucket 51: 70%  Sorting block time: 00:00:00  bucket 50: 100%Returning block of 75 for bucket 49  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:  bucket 52: 10%  bucket 52: 20%  bucket 52: 30%  bucket 52: 40%  bucket 52: 50%  bucket 52: 60%Getting block 53 of 60  Reserving size (126) for bucket 53  bucket 52: 70%  Calculating Z arrays for bucket 53  bucket 52: 80%  bucket 52: 90%  Entering block accumulator loop for bucket 53:  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  Sorting block time: 00:00:00  (Using difference cover)Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:Getting block 55 of 60  bucket 54: 10%  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  bucket 54: 20%  bucket 54: 30%  Entering block accumulator loop for bucket 55:  bucket 54: 40%  bucket 55: 10%  bucket 54: 50%  bucket 55: 20%  bucket 54: 60%  bucket 55: 30%  bucket 54: 70%  bucket 55: 40%  bucket 54: 80%  bucket 55: 50%  bucket 54: 90%  bucket 55: 60%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57Getting block 58 of 60  Entering block accumulator loop for bucket 57:  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  bucket 57: 10%  Entering block accumulator loop for bucket 58:  bucket 57: 20%  bucket 58: 10%  bucket 57: 30%  bucket 58: 20%  bucket 57: 40%  bucket 58: 30%  bucket 57: 50%  bucket 58: 40%  bucket 57: 60%  bucket 58: 50%  bucket 57: 70%  bucket 58: 60%  bucket 57: 80%  bucket 58: 70%  bucket 57: 90%  bucket 58: 80%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 59:  bucket 59: 10%  bucket 59: 20%  bucket 59: 30%  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #14)" name="13" time="31.93877077102661">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 1:  bucket 1: 10%  bucket 1: 20%  bucket 1: 30%  bucket 1: 40%  bucket 1: 50%  bucket 1: 60%  bucket 1: 70%  bucket 1: 80%Getting block 2 of 60  Reserving size (126) for bucket 2  bucket 1: 90%  Calculating Z arrays for bucket 2  bucket 1: 100%  Sorting block of length 42 for bucket 1  (Using difference cover)Getting block 3 of 60  Entering block accumulator loop for bucket 2:Getting block 4 of 60  Reserving size (126) for bucket 4  Reserving size (126) for bucket 3  bucket 2: 10%  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  bucket 2: 20%  bucket 2: 30%  Entering block accumulator loop for bucket 4:  bucket 2: 40%  bucket 2: 50%  bucket 4: 10%  Entering block accumulator loop for bucket 3:  bucket 4: 20%  bucket 2: 60%Getting block 5 of 60  bucket 3: 10%  bucket 2: 70%  Reserving size (126) for bucket 5  bucket 3: 20%  Calculating Z arrays for bucket 5  bucket 2: 80%  bucket 3: 30%  bucket 4: 30%  bucket 3: 40%  Entering block accumulator loop for bucket 5:  bucket 2: 90%  Sorting block time: 00:00:00  bucket 3: 50%  bucket 4: 40%  bucket 5: 10%  bucket 2: 100%Returning block of 43 for bucket 1  bucket 5: 20%  bucket 3: 60%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 5: 30%Getting block 6 of 60  Reserving size (126) for bucket 6  bucket 3: 70%  Calculating Z arrays for bucket 6  bucket 4: 50%  bucket 5: 40%  bucket 3: 80%  bucket 4: 60%  bucket 5: 50%  bucket 3: 90%  bucket 4: 70%  bucket 5: 60%  Entering block accumulator loop for bucket 6:  bucket 4: 80%  bucket 5: 70%  bucket 3: 100%  bucket 4: 90%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 6: 10%  bucket 5: 80%  bucket 4: 100%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 5: 90%Getting block 7 of 60  bucket 5: 100%  Reserving size (126) for bucket 7  bucket 6: 20%  Sorting block of length 63 for bucket 5  Calculating Z arrays for bucket 7  (Using difference cover)  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  Entering block accumulator loop for bucket 7:Getting block 8 of 60  Reserving size (126) for bucket 8  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Calculating Z arrays for bucket 8  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 95 for bucket 8Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 60  Reserving size (126) for bucket 10  bucket 9: 10%Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Calculating Z arrays for bucket 10  bucket 9: 20%  bucket 9: 30%  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 10:  bucket 9: 40%  bucket 11: 10%  bucket 10: 10%  bucket 9: 50%  bucket 11: 20%  bucket 10: 20%  bucket 9: 60%  bucket 11: 30%  bucket 10: 30%  bucket 9: 70%  bucket 11: 40%  bucket 10: 40%  bucket 9: 80%  bucket 11: 50%  bucket 10: 50%  bucket 9: 90%  bucket 11: 60%  bucket 10: 60%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 70%  bucket 11: 70%  bucket 10: 80%  bucket 11: 80%  bucket 10: 90%  bucket 11: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:Getting block 13 of 60  bucket 12: 10%  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  bucket 12: 20%  bucket 12: 30%  Entering block accumulator loop for bucket 13:  bucket 12: 40%  bucket 13: 10%  bucket 12: 50%  bucket 13: 20%  bucket 12: 60%  bucket 13: 30%  bucket 12: 70%  bucket 13: 40%  bucket 12: 80%  bucket 13: 50%  bucket 12: 90%  bucket 13: 60%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%Getting block 15 of 60  bucket 14: 60%  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  Entering block accumulator loop for bucket 15:  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%Getting block 16 of 60  bucket 15: 50%  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  bucket 15: 60%  bucket 15: 70%  Entering block accumulator loop for bucket 16:  bucket 15: 80%  Sorting block time: 00:00:00Returning block of 83 for bucket 14  bucket 15: 90%  bucket 16: 10%  bucket 15: 100%  bucket 16: 20%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 18:  bucket 17: 10%  bucket 18: 10%  bucket 17: 20%  bucket 18: 20%  bucket 17: 30%  bucket 18: 30%  bucket 18: 40%  bucket 17: 40%  bucket 18: 50%  bucket 17: 50%  bucket 18: 60%  bucket 17: 60%  bucket 18: 70%  bucket 17: 70%  bucket 18: 80%  bucket 17: 80%  bucket 18: 90%  bucket 17: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Entering block accumulator loop for bucket 20:  Calculating Z arrays for bucket 21  bucket 20: 10%  bucket 20: 20%  Entering block accumulator loop for bucket 21:  bucket 20: 30%  bucket 20: 40%  bucket 21: 10%  bucket 20: 50%  bucket 21: 20%  bucket 20: 60%  bucket 21: 30%  bucket 20: 70%  bucket 21: 40%  bucket 20: 80%  bucket 21: 50%  bucket 20: 90%  bucket 21: 60%  bucket 20: 100%  bucket 21: 70%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%Getting block 23 of 60  bucket 22: 40%  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  bucket 22: 50%  Entering block accumulator loop for bucket 23:  bucket 22: 60%  bucket 23: 10%  bucket 22: 70%Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  bucket 22: 80%  bucket 23: 20%  bucket 23: 30%  bucket 22: 90%  bucket 23: 40%  Entering block accumulator loop for bucket 24:  bucket 23: 50%  bucket 22: 100%  Sorting block of length 80 for bucket 22  bucket 23: 60%  (Using difference cover)  bucket 24: 10%  bucket 23: 70%  bucket 24: 20%  bucket 23: 80%  bucket 24: 30%  bucket 23: 90%  bucket 24: 40%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 26:  bucket 26: 10%  Entering block accumulator loop for bucket 27:  bucket 26: 20%  bucket 27: 10%  bucket 27: 20%  bucket 26: 30%  bucket 27: 30%  bucket 26: 40%  bucket 27: 40%  bucket 27: 50%  bucket 26: 50%  bucket 27: 60%  bucket 26: 60%  bucket 27: 70%  bucket 27: 80%  bucket 26: 70%  bucket 27: 90%  bucket 26: 80%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  Sorting block time: 00:00:00  bucket 29: 70%Returning block of 107 for bucket 28  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%Getting block 31 of 60  Reserving size (126) for bucket 31  bucket 30: 40%  Calculating Z arrays for bucket 31  bucket 30: 50%  Entering block accumulator loop for bucket 31:  bucket 30: 60%  bucket 31: 10%  bucket 30: 70%  bucket 31: 20%  bucket 30: 80%  bucket 31: 30%  bucket 30: 90%  bucket 31: 40%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32Getting block 33 of 60  Entering block accumulator loop for bucket 32:  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  bucket 32: 10%  Entering block accumulator loop for bucket 33:  bucket 32: 20%Getting block 34 of 60  bucket 32: 30%  bucket 33: 10%  bucket 32: 40%  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  bucket 32: 50%  bucket 33: 20%  bucket 33: 30%  Entering block accumulator loop for bucket 34:  bucket 32: 60%  bucket 33: 40%  bucket 32: 70%  bucket 34: 10%  bucket 33: 50%  bucket 32: 80%  bucket 34: 20%  bucket 33: 60%  bucket 32: 90%  bucket 34: 30%  bucket 33: 70%  bucket 32: 100%  Sorting block of length 125 for bucket 32  bucket 34: 40%  bucket 33: 80%  (Using difference cover)  bucket 34: 50%  bucket 33: 90%  bucket 34: 60%  bucket 33: 100%  Sorting block of length 44 for bucket 33  bucket 34: 70%  (Using difference cover)  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  bucket 35: 30%  bucket 35: 40%  Entering block accumulator loop for bucket 36:  bucket 35: 50%  bucket 36: 10%  bucket 35: 60%  bucket 36: 20%  bucket 35: 70%  bucket 36: 30%  bucket 35: 80%  bucket 36: 40%  bucket 35: 90%  bucket 36: 50%  bucket 35: 100%  bucket 36: 60%  Sorting block of length 112 for bucket 35  bucket 36: 70%  (Using difference cover)  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 37: 20%  bucket 37: 30%  bucket 37: 40%  bucket 37: 50%  bucket 37: 60%  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:  bucket 39: 10%  bucket 39: 20%  bucket 39: 30%  bucket 39: 40%  Sorting block time: 00:00:00Returning block of 118 for bucket 38  bucket 39: 50%  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%  bucket 40: 40%  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41Getting block 42 of 60  Entering block accumulator loop for bucket 41:  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  bucket 41: 10%  bucket 41: 20%  Entering block accumulator loop for bucket 42:  bucket 41: 30%  bucket 41: 40%  bucket 42: 10%  bucket 41: 50%  bucket 42: 20%  bucket 41: 60%  bucket 42: 30%  bucket 41: 70%  bucket 42: 40%  bucket 41: 80%  bucket 42: 50%  bucket 41: 90%  bucket 42: 60%  bucket 41: 100%  bucket 42: 70%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 43:  bucket 43: 10%  Entering block accumulator loop for bucket 44:  bucket 43: 20%  bucket 44: 10%  bucket 43: 30%  bucket 44: 20%  bucket 43: 40%  bucket 44: 30%  bucket 43: 50%  bucket 44: 40%  bucket 43: 60%  bucket 44: 50%  bucket 43: 70%  bucket 44: 60%  bucket 43: 80%  bucket 44: 70%  bucket 43: 90%  bucket 44: 80%  bucket 43: 100%  bucket 44: 90%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46Getting block 47 of 60  Entering block accumulator loop for bucket 46:  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  bucket 46: 10%Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 47:  bucket 46: 20%  bucket 47: 10%  Entering block accumulator loop for bucket 48:  bucket 46: 30%  bucket 47: 20%  bucket 48: 10%  bucket 47: 30%  bucket 46: 40%  bucket 48: 20%  bucket 47: 40%  bucket 46: 50%  bucket 47: 50%  bucket 48: 30%  bucket 46: 60%  bucket 47: 60%  bucket 48: 40%  bucket 47: 70%  bucket 46: 70%  bucket 48: 50%  bucket 46: 80%  bucket 47: 80%  bucket 48: 60%  bucket 47: 90%  bucket 46: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 48: 70%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  bucket 49: 10%  bucket 49: 20%  Entering block accumulator loop for bucket 50:  bucket 49: 30%  bucket 50: 10%  bucket 50: 20%  bucket 49: 40%  bucket 50: 30%  bucket 49: 50%  bucket 50: 40%  bucket 49: 60%  bucket 50: 50%  bucket 49: 70%  bucket 50: 60%  bucket 49: 80%  bucket 50: 70%  bucket 50: 80%  bucket 49: 90%  bucket 50: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 52:  Entering block accumulator loop for bucket 51:  bucket 52: 10%  bucket 51: 10%  bucket 52: 20%  bucket 51: 20%  bucket 52: 30%  bucket 51: 30%  bucket 52: 40%  bucket 51: 40%  bucket 52: 50%  bucket 51: 50%  bucket 52: 60%  bucket 51: 60%  bucket 52: 70%  bucket 51: 70%  bucket 51: 80%  bucket 52: 80%  bucket 51: 90%  bucket 51: 100%  bucket 52: 90%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 53:  bucket 53: 10%  Entering block accumulator loop for bucket 54:  bucket 53: 20%  bucket 54: 10%  bucket 53: 30%  bucket 54: 20%  bucket 53: 40%  bucket 54: 30%  bucket 53: 50%  bucket 54: 40%  bucket 53: 60%  bucket 54: 50%  bucket 53: 70%  bucket 54: 60%  bucket 54: 70%  bucket 53: 80%  bucket 54: 80%  bucket 53: 90%  bucket 54: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  Entering block accumulator loop for bucket 57:  bucket 56: 90%Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  bucket 57: 10%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 20%  Entering block accumulator loop for bucket 58:  bucket 57: 30%  bucket 58: 10%  bucket 57: 40%  bucket 58: 20%  bucket 57: 50%  bucket 58: 30%  bucket 57: 60%  bucket 58: 40%  bucket 57: 70%  bucket 57: 80%  bucket 58: 50%  Sorting block time: 00:00:00  bucket 57: 90%  bucket 58: 60%Returning block of 56 for bucket 56  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 70%  bucket 58: 80%Getting block 59 of 60  Reserving size (126) for bucket 59  bucket 58: 90%  Calculating Z arrays for bucket 59  bucket 58: 100%  Sorting block of length 113 for bucket 58  Entering block accumulator loop for bucket 59:  (Using difference cover)  bucket 59: 10%  Sorting block time: 00:00:00Returning block of 86 for bucket 57  bucket 59: 20%  bucket 59: 30%  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #15)" name="14" time="30.39435315132141">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60Getting block 2 of 60  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 2  Reserving size (126) for bucket 1Getting block 3 of 60  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 1Getting block 4 of 60  Reserving size (126) for bucket 4  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 3Getting block 5 of 60  Reserving size (126) for bucket 5  bucket 2: 10%  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 1:  bucket 2: 20%  Entering block accumulator loop for bucket 4:Getting block 6 of 60Getting block 7 of 60  bucket 2: 30%  bucket 1: 10%  Calculating Z arrays for bucket 5  Reserving size (126) for bucket 6  bucket 3: 10%  Reserving size (126) for bucket 7Getting block 8 of 60  bucket 2: 40%  bucket 3: 20%  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  bucket 2: 50%  bucket 1: 20%  Calculating Z arrays for bucket 7  bucket 3: 30%  bucket 2: 60%  bucket 4: 10%  bucket 1: 30%  bucket 5: 10%  Entering block accumulator loop for bucket 7:  Reserving size (126) for bucket 8  bucket 4: 20%  bucket 1: 40%  bucket 5: 20%  bucket 3: 40%  bucket 2: 70%  bucket 4: 30%  bucket 1: 50%  Entering block accumulator loop for bucket 6:  bucket 4: 40%  bucket 3: 50%  Calculating Z arrays for bucket 8  bucket 5: 30%  bucket 7: 10%  bucket 1: 60%  bucket 2: 80%  bucket 4: 50%  bucket 3: 60%  bucket 6: 10%  bucket 7: 20%  bucket 4: 60%  Entering block accumulator loop for bucket 8:  bucket 5: 40%  bucket 3: 70%  bucket 4: 70%  bucket 2: 90%  bucket 1: 70%  bucket 7: 30%  bucket 6: 20%  bucket 7: 40%  bucket 8: 10%  bucket 1: 80%  bucket 5: 50%  bucket 3: 80%  bucket 4: 80%  bucket 2: 100%  bucket 6: 30%  bucket 5: 60%  Sorting block of length 84 for bucket 2  bucket 8: 20%  bucket 1: 90%  bucket 4: 90%  (Using difference cover)  bucket 3: 90%  bucket 1: 100%  bucket 8: 30%  bucket 7: 50%  bucket 3: 100%  bucket 8: 40%  bucket 6: 40%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 5: 70%  bucket 7: 60%  bucket 8: 50%  Sorting block of length 42 for bucket 1  bucket 7: 70%  (Using difference cover)  bucket 5: 80%  bucket 7: 80%  bucket 6: 50%  bucket 5: 90%  bucket 8: 60%  bucket 7: 90%  bucket 4: 100%  bucket 6: 60%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 8: 70%  bucket 5: 100%  bucket 7: 100%  bucket 6: 70%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 8: 80%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 6: 80%  bucket 8: 90%  bucket 6: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 95 for bucket 8Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 9: 50%  bucket 10: 20%  bucket 9: 60%  bucket 10: 30%  bucket 9: 70%  bucket 10: 40%  bucket 9: 80%  bucket 9: 90%  bucket 10: 50%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Entering block accumulator loop for bucket 11:  Calculating Z arrays for bucket 12  bucket 11: 10%  Entering block accumulator loop for bucket 12:  bucket 11: 20%  bucket 12: 10%  bucket 11: 30%  bucket 12: 20%  bucket 11: 40%  bucket 12: 30%  bucket 11: 50%  bucket 12: 40%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  bucket 12: 90%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 14: 10%  Entering block accumulator loop for bucket 15:  bucket 13: 30%  bucket 14: 20%  bucket 15: 10%  bucket 13: 40%  bucket 14: 30%  bucket 15: 20%  bucket 13: 50%  bucket 14: 40%  bucket 15: 30%  bucket 13: 60%  bucket 14: 50%  bucket 15: 40%  bucket 13: 70%  bucket 14: 60%  bucket 15: 50%  bucket 13: 80%  bucket 14: 70%  bucket 15: 60%  bucket 13: 90%  bucket 14: 80%  bucket 15: 70%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 90%  bucket 15: 80%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Entering block accumulator loop for bucket 16:  Calculating Z arrays for bucket 17  bucket 16: 10%  bucket 16: 20%  Entering block accumulator loop for bucket 17:  bucket 16: 30%  bucket 16: 40%  bucket 17: 10%  bucket 16: 50%  bucket 17: 20%  bucket 16: 60%  bucket 17: 30%  bucket 17: 40%  bucket 16: 70%  bucket 17: 50%Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  bucket 16: 80%  bucket 17: 60%  bucket 16: 90%  Entering block accumulator loop for bucket 18:  bucket 17: 70%  bucket 16: 100%  Sorting block of length 100 for bucket 16  bucket 18: 10%  (Using difference cover)  bucket 17: 80%  bucket 18: 20%  bucket 17: 90%  bucket 18: 30%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Entering block accumulator loop for bucket 19:  Calculating Z arrays for bucket 20  bucket 19: 10%  bucket 19: 20%  Entering block accumulator loop for bucket 20:  bucket 19: 30%  bucket 20: 10%  bucket 19: 40%  bucket 20: 20%  bucket 19: 50%  bucket 20: 30%  bucket 19: 60%  bucket 20: 40%  bucket 19: 70%  bucket 20: 50%  bucket 19: 80%  bucket 20: 60%  bucket 19: 90%  bucket 20: 70%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  Entering block accumulator loop for bucket 22:  bucket 21: 10%  bucket 22: 10%  bucket 21: 20%  bucket 22: 20%  bucket 21: 30%  bucket 22: 30%  bucket 21: 40%  bucket 22: 40%  bucket 21: 50%  bucket 22: 50%  bucket 21: 60%  bucket 22: 60%  bucket 21: 70%  bucket 22: 70%  bucket 21: 80%  bucket 22: 80%  bucket 21: 90%  bucket 22: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  Sorting block time: 00:00:00Returning block of 55 for bucket 21  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%Getting block 25 of 60  Reserving size (126) for bucket 25  bucket 24: 60%  Calculating Z arrays for bucket 25  bucket 24: 70%  bucket 24: 80%  Entering block accumulator loop for bucket 25:  bucket 24: 90%  bucket 24: 100%  bucket 25: 10%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 26:  bucket 26: 10%  Entering block accumulator loop for bucket 27:  bucket 26: 20%  bucket 27: 10%Getting block 28 of 60  Reserving size (126) for bucket 28  bucket 27: 20%  Calculating Z arrays for bucket 28  bucket 26: 30%  bucket 27: 30%  bucket 26: 40%  bucket 27: 40%  bucket 26: 50%  Entering block accumulator loop for bucket 28:  bucket 27: 50%  bucket 26: 60%  bucket 27: 60%  bucket 26: 70%  bucket 28: 10%  bucket 27: 70%  bucket 26: 80%  bucket 27: 80%  bucket 26: 90%  bucket 28: 20%  bucket 27: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 30:  bucket 29: 10%  bucket 30: 10%  bucket 29: 20%  bucket 30: 20%  bucket 29: 30%  bucket 30: 30%  bucket 30: 40%  bucket 29: 40%  bucket 30: 50%  bucket 29: 50%  bucket 30: 60%  bucket 30: 70%  bucket 29: 60%  bucket 30: 80%  bucket 29: 70%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 31:  Entering block accumulator loop for bucket 32:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 32: 10%  bucket 31: 40%  bucket 32: 20%  bucket 31: 50%  bucket 32: 30%  bucket 31: 60%  bucket 32: 40%  bucket 31: 70%  bucket 32: 50%  bucket 31: 80%  bucket 32: 60%  bucket 31: 90%  bucket 32: 70%  bucket 31: 100%  bucket 32: 80%  Sorting block of length 110 for bucket 31  (Using difference cover)Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  bucket 32: 90%  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 32: 100%  bucket 33: 20%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 33: 30%  bucket 33: 40%  Sorting block time: 00:00:00Returning block of 111 for bucket 31  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 35:  Entering block accumulator loop for bucket 36:  bucket 35: 10%  bucket 36: 10%  bucket 35: 20%  bucket 36: 20%  bucket 35: 30%  bucket 36: 30%  bucket 36: 40%  bucket 35: 40%  bucket 36: 50%  bucket 35: 50%  bucket 36: 60%  bucket 35: 60%  bucket 36: 70%  bucket 36: 80%  bucket 35: 70%  bucket 36: 90%  bucket 35: 80%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 37: 20%  bucket 37: 30%  bucket 37: 40%  bucket 37: 50%  bucket 37: 60%  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  Sorting block time: 00:00:00Returning block of 60 for bucket 37  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 39:  Entering block accumulator loop for bucket 40:  bucket 39: 10%  bucket 40: 10%  bucket 39: 20%  bucket 39: 30%  bucket 40: 20%  bucket 39: 40%  bucket 40: 30%  bucket 39: 50%  bucket 40: 40%  bucket 39: 60%  bucket 40: 50%  bucket 39: 70%  bucket 40: 60%  bucket 39: 80%  bucket 40: 70%  bucket 39: 90%  bucket 40: 80%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%  bucket 41: 60%Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 41: 70%  bucket 42: 10%  bucket 41: 80%  bucket 42: 20%  bucket 41: 90%  bucket 42: 30%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 40%  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  bucket 43: 60%  bucket 43: 70%  Entering block accumulator loop for bucket 44:  bucket 43: 80%  bucket 43: 90%  bucket 44: 10%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%Getting block 46 of 60  bucket 45: 20%  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  bucket 45: 30%  bucket 45: 40%  Entering block accumulator loop for bucket 46:  bucket 45: 50%  bucket 45: 60%  bucket 46: 10%  bucket 46: 20%  bucket 45: 70%  bucket 46: 30%  bucket 45: 80%  bucket 46: 40%  bucket 45: 90%  bucket 46: 50%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 47:  bucket 47: 10%Getting block 49 of 60  Reserving size (126) for bucket 49  Entering block accumulator loop for bucket 48:  Calculating Z arrays for bucket 49  bucket 47: 20%  bucket 48: 10%  bucket 47: 30%  bucket 48: 20%  bucket 47: 40%  bucket 48: 30%  bucket 47: 50%  bucket 48: 40%  bucket 47: 60%  Entering block accumulator loop for bucket 49:  bucket 48: 50%  bucket 47: 70%  bucket 48: 60%  bucket 47: 80%  bucket 48: 70%  bucket 49: 10%  bucket 47: 90%  bucket 48: 80%  bucket 48: 90%  bucket 47: 100%  bucket 49: 20%  bucket 48: 100%  Sorting block of length 83 for bucket 47  Sorting block of length 113 for bucket 48  (Using difference cover)  (Using difference cover)  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 84 for bucket 47  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  bucket 50: 20%  bucket 50: 30%  Entering block accumulator loop for bucket 51:  bucket 50: 40%  bucket 51: 10%  bucket 51: 20%  bucket 50: 50%  bucket 51: 30%  bucket 50: 60%  bucket 51: 40%  bucket 50: 70%  bucket 51: 50%  bucket 50: 80%  bucket 50: 90%  bucket 51: 60%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 52:  bucket 52: 10%  Entering block accumulator loop for bucket 53:  bucket 52: 20%  bucket 52: 30%  bucket 53: 10%  bucket 52: 40%  bucket 52: 50%  bucket 53: 20%  bucket 52: 60%  bucket 52: 70%  bucket 53: 30%  bucket 52: 80%  bucket 52: 90%  bucket 53: 40%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 55:  Entering block accumulator loop for bucket 56:  Entering block accumulator loop for bucket 54:  bucket 55: 10%  bucket 54: 10%  bucket 56: 10%  bucket 55: 20%  bucket 54: 20%  bucket 56: 20%  bucket 55: 30%  bucket 54: 30%  bucket 56: 30%  bucket 55: 40%  bucket 54: 40%  bucket 56: 40%  bucket 55: 50%  bucket 54: 50%  bucket 56: 50%  bucket 55: 60%  bucket 54: 60%  bucket 56: 60%Getting block 57 of 60  bucket 55: 70%  bucket 56: 70%  bucket 54: 70%  Reserving size (126) for bucket 57  bucket 55: 80%  bucket 56: 80%  Calculating Z arrays for bucket 57  bucket 54: 80%  bucket 55: 90%  bucket 56: 90%  bucket 54: 90%  bucket 56: 100%  bucket 55: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Entering block accumulator loop for bucket 57:  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 54: 100%  Sorting block of length 64 for bucket 54  bucket 57: 10%  (Using difference cover)  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  Sorting block time: 00:00:00  bucket 57: 100%Returning block of 80 for bucket 55  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%Getting block 59 of 60  bucket 58: 70%  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  bucket 58: 80%  Entering block accumulator loop for bucket 60:  bucket 58: 90%  Entering block accumulator loop for bucket 59:  bucket 60: 10%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 60: 20%  bucket 59: 10%  bucket 60: 30%  bucket 59: 20%  bucket 60: 40%  bucket 59: 30%  bucket 60: 50%  bucket 59: 40%  bucket 60: 60%  bucket 60: 70%  bucket 59: 50%  bucket 60: 80%  bucket 59: 60%  bucket 60: 90%  bucket 60: 100%  bucket 59: 70%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 80%  Sorting block time: 00:00:00Returning block of 114 for bucket 58  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    3 (30.00%) aligned concordantly 0 times    7 (70.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    3 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    3 pairs aligned 0 times concordantly or discordantly; of these:      6 mates make up the pairs; of these:        3 (50.00%) aligned 0 times        3 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times85.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #16)" name="15" time="34.90971326828003">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%Getting block 3 of 60  bucket 1: 30%  Reserving size (126) for bucket 3  bucket 1: 40%  bucket 2: 10%Getting block 4 of 60  Reserving size (126) for bucket 4Getting block 5 of 60  bucket 1: 50%  Reserving size (126) for bucket 5  Calculating Z arrays for bucket 4  bucket 1: 60%  Calculating Z arrays for bucket 5  bucket 1: 70%  Entering block accumulator loop for bucket 4:  Calculating Z arrays for bucket 3  bucket 1: 80%  bucket 2: 20%  bucket 4: 10%Getting block 6 of 60  Reserving size (126) for bucket 6Getting block 8 of 60  bucket 2: 30%  bucket 4: 20%  Calculating Z arrays for bucket 6  Reserving size (126) for bucket 8  Entering block accumulator loop for bucket 3:  bucket 4: 30%  Calculating Z arrays for bucket 8  bucket 2: 40%  Entering block accumulator loop for bucket 6:  bucket 1: 90%  Entering block accumulator loop for bucket 5:  bucket 6: 10%  bucket 4: 40%  bucket 3: 10%  bucket 2: 50%  bucket 4: 50%  bucket 6: 20%  Entering block accumulator loop for bucket 8:  bucket 4: 60%  bucket 1: 100%  bucket 3: 20%  bucket 4: 70%  bucket 5: 10%  bucket 8: 10%  bucket 4: 80%  bucket 6: 30%  bucket 3: 30%  bucket 2: 60%  bucket 6: 40%  bucket 5: 20%  bucket 8: 20%  bucket 6: 50%  bucket 2: 70%  bucket 3: 40%  bucket 5: 30%  Sorting block of length 42 for bucket 1  (Using difference cover)Getting block 7 of 60  bucket 5: 40%  bucket 3: 50%  bucket 2: 80%  bucket 3: 60%  bucket 4: 90%  bucket 6: 60%  bucket 3: 70%  bucket 4: 100%  Sorting block time: 00:00:00  bucket 8: 30%  bucket 5: 50%  bucket 2: 90%  bucket 3: 80%  bucket 6: 70%  bucket 2: 100%  Sorting block of length 68 for bucket 4  bucket 6: 80%  (Using difference cover)  bucket 5: 60%  bucket 3: 90%  Reserving size (126) for bucket 7  bucket 5: 70%  bucket 8: 40%  bucket 6: 90%Returning block of 43 for bucket 1  bucket 8: 50%  bucket 3: 100%  Sorting block of length 84 for bucket 2  (Using difference cover)  Sorting block of length 106 for bucket 3  bucket 5: 80%  Calculating Z arrays for bucket 7  bucket 8: 60%  (Using difference cover)  bucket 6: 100%  bucket 8: 70%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 5: 90%  bucket 8: 80%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Entering block accumulator loop for bucket 7:  bucket 7: 10%  bucket 7: 20%  bucket 7: 30%  bucket 7: 40%  bucket 7: 50%  bucket 7: 60%  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 91 for bucket 6Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Entering block accumulator loop for bucket 9:  Calculating Z arrays for bucket 10  bucket 9: 10%  bucket 9: 20%  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 10: 20%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 125 for bucket 9Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 60  Entering block accumulator loop for bucket 11:  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  bucket 11: 10%  Entering block accumulator loop for bucket 12:  bucket 11: 20%  bucket 12: 10%  bucket 11: 30%  Entering block accumulator loop for bucket 13:  bucket 12: 20%  bucket 11: 40%  bucket 13: 10%  bucket 12: 30%  bucket 11: 50%  bucket 13: 20%  bucket 12: 40%  bucket 11: 60%  bucket 13: 30%  bucket 12: 50%  bucket 11: 70%  bucket 13: 40%  bucket 12: 60%  bucket 11: 80%  bucket 13: 50%  bucket 12: 70%  bucket 13: 60%  bucket 11: 90%  bucket 12: 80%  bucket 13: 70%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 13: 80%  bucket 12: 100%  bucket 13: 90%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  Sorting block time: 00:00:00Returning block of 83 for bucket 14  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%Getting block 17 of 60Getting block 18 of 60  Reserving size (126) for bucket 18  bucket 16: 80%  Calculating Z arrays for bucket 18  Reserving size (126) for bucket 17  bucket 16: 90%  Calculating Z arrays for bucket 17  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Entering block accumulator loop for bucket 18:  Entering block accumulator loop for bucket 17:  bucket 18: 10%  bucket 18: 20%  bucket 17: 10%  bucket 18: 30%  bucket 17: 20%  bucket 18: 40%  bucket 18: 50%  bucket 17: 30%  bucket 18: 60%  bucket 17: 40%  bucket 18: 70%  bucket 17: 50%  bucket 18: 80%  bucket 17: 60%  bucket 18: 90%  bucket 17: 70%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 17: 80%  bucket 17: 90%  Sorting block time: 00:00:00Returning block of 101 for bucket 16  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 60Getting block 21 of 60  Reserving size (126) for bucket 21  Entering block accumulator loop for bucket 19:  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 10%  Calculating Z arrays for bucket 21  bucket 19: 20%  Entering block accumulator loop for bucket 20:  Entering block accumulator loop for bucket 21:  bucket 19: 30%  bucket 19: 40%  bucket 21: 10%  bucket 20: 10%  bucket 19: 50%  bucket 21: 20%  bucket 19: 60%  bucket 20: 20%  bucket 19: 70%  bucket 21: 30%  bucket 20: 30%  bucket 19: 80%  bucket 21: 40%  bucket 20: 40%  bucket 19: 90%  bucket 21: 50%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 50%  bucket 21: 60%  bucket 20: 60%  bucket 21: 70%  bucket 20: 70%  bucket 21: 80%  bucket 20: 80%  bucket 21: 90%  bucket 20: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 22:  Entering block accumulator loop for bucket 23:  bucket 22: 10%  bucket 23: 10%  bucket 22: 20%  bucket 23: 20%  bucket 22: 30%  bucket 23: 30%  bucket 22: 40%  bucket 23: 40%  bucket 22: 50%  bucket 23: 50%  bucket 22: 60%  bucket 23: 60%  bucket 22: 70%  bucket 23: 70%  bucket 22: 80%  bucket 23: 80%  bucket 23: 90%  bucket 22: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%Getting block 25 of 60  Reserving size (126) for bucket 25  bucket 24: 60%  Calculating Z arrays for bucket 25  bucket 24: 70%  bucket 24: 80%  Entering block accumulator loop for bucket 25:  bucket 24: 90%  bucket 25: 10%  bucket 24: 100%  bucket 25: 20%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Entering block accumulator loop for bucket 26:  Calculating Z arrays for bucket 27  bucket 26: 10%  Entering block accumulator loop for bucket 27:  bucket 26: 20%  bucket 26: 30%  bucket 27: 10%  bucket 26: 40%  bucket 27: 20%  bucket 26: 50%  bucket 26: 60%  bucket 27: 30%  bucket 26: 70%  bucket 27: 40%  bucket 26: 80%  bucket 27: 50%  bucket 26: 90%  bucket 27: 60%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 50%Getting block 30 of 60  Reserving size (126) for bucket 30  Entering block accumulator loop for bucket 29:  Calculating Z arrays for bucket 30  bucket 28: 60%  bucket 29: 10%  bucket 28: 70%  Entering block accumulator loop for bucket 30:  bucket 29: 20%  bucket 28: 80%  bucket 30: 10%  bucket 28: 90%  bucket 29: 30%  bucket 30: 20%  bucket 28: 100%  bucket 29: 40%  Sorting block of length 106 for bucket 28  bucket 30: 30%  (Using difference cover)  bucket 29: 50%  bucket 30: 40%  bucket 29: 60%  bucket 30: 50%  bucket 29: 70%  bucket 30: 60%  bucket 29: 80%  bucket 30: 70%  bucket 29: 90%  bucket 30: 80%  bucket 29: 100%  bucket 30: 90%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%Getting block 32 of 60  Reserving size (126) for bucket 32  bucket 31: 60%  Calculating Z arrays for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  bucket 31: 70%  Entering block accumulator loop for bucket 32:  bucket 31: 80%  Entering block accumulator loop for bucket 33:  bucket 32: 10%  bucket 31: 90%  bucket 33: 10%  bucket 32: 20%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 30%  bucket 33: 20%  bucket 32: 40%  bucket 33: 30%  bucket 32: 50%  bucket 33: 40%  bucket 32: 60%  bucket 33: 50%  bucket 32: 70%  bucket 33: 60%  bucket 32: 80%  bucket 33: 70%  bucket 32: 90%  bucket 33: 80%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 35: 10%  bucket 35: 20%  bucket 34: 20%  bucket 35: 30%  bucket 35: 40%  bucket 34: 30%  bucket 35: 50%  bucket 34: 40%  bucket 35: 60%  bucket 34: 50%  bucket 35: 70%  bucket 34: 60%  bucket 35: 80%  bucket 35: 90%  bucket 34: 70%  bucket 35: 100%  bucket 34: 80%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 36  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 36:  Entering block accumulator loop for bucket 37:  bucket 36: 10%  bucket 37: 10%  bucket 36: 20%  bucket 37: 20%  bucket 36: 30%  bucket 37: 30%  bucket 36: 40%  bucket 37: 40%  bucket 36: 50%  bucket 37: 50%  bucket 37: 60%  bucket 36: 60%  bucket 36: 70%  bucket 37: 70%  bucket 36: 80%  bucket 37: 80%  bucket 36: 90%  bucket 37: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  bucket 38: 60%  Entering block accumulator loop for bucket 39:  bucket 38: 70%  bucket 39: 10%  bucket 38: 80%  bucket 39: 20%  bucket 38: 90%  bucket 39: 30%  bucket 38: 100%  bucket 39: 40%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 50%  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  bucket 40: 40%  bucket 40: 50%  Entering block accumulator loop for bucket 41:  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  bucket 41: 10%  bucket 40: 90%  bucket 41: 20%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  Sorting block time: 00:00:00Returning block of 42 for bucket 40  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 42: 10%  bucket 42: 20%  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  bucket 43: 30%  bucket 43: 40%  Entering block accumulator loop for bucket 44:  bucket 43: 50%  bucket 44: 10%  bucket 43: 60%  bucket 44: 20%  bucket 43: 70%  bucket 44: 30%  bucket 43: 80%  bucket 44: 40%  bucket 43: 90%  bucket 44: 50%  bucket 43: 100%  bucket 44: 60%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 46:  Entering block accumulator loop for bucket 45:  bucket 46: 10%  bucket 45: 10%  bucket 46: 20%  bucket 45: 20%  bucket 46: 30%  bucket 45: 30%  bucket 46: 40%  bucket 45: 40%  bucket 46: 50%  bucket 45: 50%  bucket 46: 60%  bucket 45: 60%  bucket 46: 70%  bucket 45: 70%  bucket 46: 80%  bucket 45: 80%  bucket 46: 90%  bucket 45: 90%  bucket 46: 100%  bucket 45: 100%  Sorting block of length 69 for bucket 46  Sorting block of length 79 for bucket 45  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47Getting block 49 of 60  Reserving size (126) for bucket 49Getting block 48 of 60  Reserving size (126) for bucket 48  Entering block accumulator loop for bucket 47:  Calculating Z arrays for bucket 48  Calculating Z arrays for bucket 49  bucket 47: 10%  bucket 47: 20%  Entering block accumulator loop for bucket 48:  bucket 47: 30%  Entering block accumulator loop for bucket 49:  bucket 47: 40%  bucket 48: 10%  bucket 47: 50%  bucket 48: 20%  bucket 49: 10%  bucket 47: 60%  bucket 48: 30%  bucket 47: 70%  bucket 49: 20%  bucket 48: 40%  bucket 47: 80%  bucket 47: 90%  bucket 48: 50%  bucket 49: 30%  bucket 47: 100%  bucket 48: 60%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 48: 70%  bucket 49: 40%  bucket 48: 80%  bucket 48: 90%  bucket 49: 50%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 50:  Entering block accumulator loop for bucket 51:  bucket 50: 10%  bucket 51: 10%  bucket 50: 20%  bucket 51: 20%  bucket 50: 30%  bucket 51: 30%Getting block 52 of 60  bucket 50: 40%  bucket 51: 40%  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  bucket 50: 50%  bucket 51: 50%  bucket 50: 60%  Entering block accumulator loop for bucket 52:  bucket 51: 60%  bucket 50: 70%  bucket 52: 10%  bucket 51: 70%  bucket 50: 80%  bucket 52: 20%  bucket 51: 80%  bucket 50: 90%  bucket 52: 30%  bucket 51: 90%  bucket 50: 100%  bucket 52: 40%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 100%  bucket 52: 50%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 60%  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Entering block accumulator loop for bucket 53:  Calculating Z arrays for bucket 54  bucket 53: 10%  Entering block accumulator loop for bucket 54:  bucket 53: 20%  bucket 53: 30%  bucket 54: 10%  bucket 53: 40%  bucket 54: 20%  bucket 53: 50%  bucket 54: 30%  bucket 53: 60%  bucket 54: 40%  bucket 53: 70%  bucket 54: 50%  bucket 53: 80%  bucket 54: 60%  bucket 53: 90%  bucket 54: 70%  bucket 53: 100%  bucket 54: 80%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  Sorting block time: 00:00:00Getting block 57 of 60Returning block of 80 for bucket 55  bucket 56: 80%  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  bucket 56: 90%Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Entering block accumulator loop for bucket 57:  Entering block accumulator loop for bucket 58:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 58: 10%  bucket 57: 70%  bucket 58: 20%  bucket 57: 80%  bucket 57: 90%  bucket 58: 30%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 60:  Entering block accumulator loop for bucket 59:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 59: 10%  bucket 60: 50%  bucket 60: 60%  bucket 59: 20%  bucket 60: 70%  bucket 59: 30%  bucket 60: 80%  bucket 60: 90%  bucket 59: 40%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were unpaired; of these:    0 (0.00%) aligned 0 times    10 (100.00%) aligned exactly 1 time    0 (0.00%) aligned >1 times100.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #17)" name="16" time="34.88437819480896">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2Getting block 3 of 60  Reserving size (126) for bucket 3  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 3Getting block 4 of 60  Reserving size (126) for bucket 4  Entering block accumulator loop for bucket 3:  bucket 1: 10%  bucket 2: 10%Getting block 5 of 60  bucket 1: 20%Getting block 6 of 60  Reserving size (126) for bucket 6  Calculating Z arrays for bucket 4  bucket 1: 30%  bucket 3: 10%Getting block 7 of 60  bucket 2: 20%  bucket 1: 40%  bucket 2: 30%  Reserving size (126) for bucket 5  Calculating Z arrays for bucket 6  Reserving size (126) for bucket 7  bucket 3: 20%  Entering block accumulator loop for bucket 4:  bucket 2: 40%  bucket 3: 30%  Calculating Z arrays for bucket 7Getting block 8 of 60  bucket 1: 50%  Reserving size (126) for bucket 8  Entering block accumulator loop for bucket 7:  bucket 3: 40%  bucket 2: 50%  bucket 1: 60%  Calculating Z arrays for bucket 8  bucket 4: 10%  bucket 2: 60%  Calculating Z arrays for bucket 5  bucket 7: 10%  bucket 3: 50%  Entering block accumulator loop for bucket 8:  bucket 1: 70%  bucket 3: 60%  Entering block accumulator loop for bucket 5:  bucket 3: 70%  Entering block accumulator loop for bucket 6:  bucket 3: 80%  bucket 2: 70%  bucket 3: 90%  bucket 7: 20%  bucket 3: 100%  bucket 2: 80%  bucket 1: 80%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 7: 30%  bucket 2: 90%  bucket 1: 90%  bucket 4: 20%  bucket 1: 100%  bucket 7: 40%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 6: 10%  Sorting block time: 00:00:00  bucket 8: 10%  bucket 7: 50%  bucket 2: 100%  bucket 8: 20%  bucket 5: 10%  bucket 6: 20%  bucket 4: 30%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 6: 30%  bucket 4: 40%  bucket 8: 30%Returning block of 107 for bucket 3  bucket 7: 60%  bucket 5: 20%  bucket 8: 40%  bucket 7: 70%  bucket 4: 50%  bucket 6: 40%  bucket 5: 30%  bucket 7: 80%  bucket 4: 60%  bucket 8: 50%  bucket 6: 50%  bucket 4: 70%  bucket 8: 60%  bucket 6: 60%  bucket 7: 90%  bucket 4: 80%  bucket 5: 40%  bucket 8: 70%  bucket 7: 100%  bucket 4: 90%  bucket 6: 70%  bucket 5: 50%  bucket 8: 80%  bucket 4: 100%  bucket 6: 80%  Sorting block of length 68 for bucket 4  (Using difference cover)  Sorting block of length 75 for bucket 7  bucket 8: 90%  (Using difference cover)  bucket 5: 60%  bucket 6: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 5: 70%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block time: 00:00:00  Sorting block of length 63 for bucket 5  (Using difference cover)Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 91 for bucket 6Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  Entering block accumulator loop for bucket 10:  bucket 9: 70%  bucket 10: 10%  bucket 9: 80%  bucket 10: 20%  bucket 9: 90%  bucket 10: 30%  bucket 9: 100%  bucket 10: 40%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 50%Getting block 11 of 60  bucket 10: 60%  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  bucket 10: 70%  Entering block accumulator loop for bucket 11:  bucket 10: 80%  bucket 11: 10%  bucket 10: 90%  bucket 11: 20%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  Sorting block time: 00:00:00  bucket 11: 80%Returning block of 125 for bucket 9  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 12  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 12:  bucket 12: 10%  Entering block accumulator loop for bucket 13:  bucket 12: 20%  bucket 13: 10%  bucket 12: 30%  bucket 13: 20%  bucket 12: 40%  bucket 13: 30%  bucket 12: 50%  bucket 13: 40%  bucket 12: 60%  bucket 13: 50%  bucket 13: 60%  bucket 12: 70%  bucket 13: 70%  bucket 12: 80%  bucket 13: 80%  bucket 12: 90%  bucket 13: 90%  bucket 12: 100%  bucket 13: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 14 of 60  Reserving size (126) for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 15:  Entering block accumulator loop for bucket 14:  bucket 15: 10%  bucket 14: 10%  bucket 15: 20%  bucket 14: 20%  bucket 15: 30%  bucket 14: 30%  bucket 15: 40%  bucket 14: 40%  bucket 15: 50%  bucket 14: 50%  bucket 15: 60%  bucket 14: 60%  bucket 15: 70%  bucket 14: 70%  bucket 15: 80%  bucket 14: 80%  bucket 15: 90%  bucket 14: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  Sorting block time: 00:00:00  bucket 16: 80%Returning block of 83 for bucket 14  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 50%  bucket 17: 60%  Entering block accumulator loop for bucket 18:  bucket 17: 70%  bucket 18: 10%  bucket 17: 80%  bucket 18: 20%  bucket 17: 90%  bucket 18: 30%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%Getting block 22 of 60  Reserving size (126) for bucket 22  bucket 21: 70%  Calculating Z arrays for bucket 22  bucket 21: 80%  Entering block accumulator loop for bucket 22:  bucket 21: 90%  bucket 22: 10%  bucket 21: 100%  Sorting block of length 54 for bucket 21  bucket 22: 20%  bucket 22: 30%  (Using difference cover)  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)Getting block 24 of 60  Sorting block time: 00:00:00Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25Returning block of 65 for bucket 23  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  Entering block accumulator loop for bucket 24:  bucket 25: 30%  bucket 25: 40%  bucket 24: 10%  bucket 25: 50%  bucket 24: 20%  bucket 25: 60%  bucket 24: 30%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 24: 40%  Sorting block time: 00:00:00Returning block of 67 for bucket 25  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27Getting block 28 of 60  Calculating Z arrays for bucket 27  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 27:  Entering block accumulator loop for bucket 28:  bucket 27: 10%  bucket 28: 10%  bucket 27: 20%  bucket 28: 20%  bucket 27: 30%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 27: 40%  bucket 28: 60%  bucket 27: 50%  bucket 28: 70%  bucket 27: 60%  bucket 28: 80%  bucket 27: 70%  bucket 28: 90%  bucket 27: 80%  bucket 28: 100%  bucket 27: 90%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60Getting block 30 of 60  Reserving size (126) for bucket 29  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 29  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 30:  bucket 29: 10%  bucket 30: 10%  bucket 30: 20%  bucket 29: 20%  bucket 30: 30%  bucket 29: 30%  bucket 30: 40%  bucket 30: 50%  bucket 29: 40%  bucket 30: 60%  bucket 29: 50%  bucket 30: 70%  bucket 29: 60%  bucket 30: 80%  bucket 29: 70%  bucket 30: 90%  bucket 29: 80%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  Entering block accumulator loop for bucket 32:  bucket 31: 100%  Sorting block of length 110 for bucket 31  bucket 32: 10%  (Using difference cover)  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%  bucket 33: 30%  bucket 33: 40%Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  bucket 33: 50%  bucket 33: 60%  Entering block accumulator loop for bucket 34:  bucket 33: 70%  bucket 34: 10%  bucket 33: 80%  bucket 34: 20%  bucket 33: 90%  bucket 34: 30%  bucket 33: 100%  Sorting block of length 44 for bucket 33  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  (Using difference cover)  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35Getting block 36 of 60  Entering block accumulator loop for bucket 35:  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  bucket 35: 10%  Entering block accumulator loop for bucket 36:  bucket 35: 20%  bucket 36: 10%  bucket 35: 30%  bucket 36: 20%  bucket 35: 40%  bucket 35: 50%  bucket 36: 30%  bucket 35: 60%  bucket 36: 40%  bucket 35: 70%  bucket 36: 50%  bucket 35: 80%  bucket 36: 60%  bucket 36: 70%  bucket 35: 90%  bucket 36: 80%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  bucket 37: 10%  Entering block accumulator loop for bucket 38:  bucket 37: 20%  bucket 37: 30%  bucket 38: 10%  bucket 38: 20%  bucket 37: 40%  bucket 38: 30%  bucket 37: 50%  bucket 38: 40%  bucket 38: 50%  bucket 37: 60%  bucket 38: 60%  bucket 38: 70%  bucket 37: 70%  bucket 38: 80%  bucket 38: 90%  bucket 37: 80%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:  bucket 39: 10%  bucket 39: 20%  bucket 39: 30%  bucket 39: 40%  bucket 39: 50%  bucket 39: 60%Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  bucket 39: 70%  bucket 39: 80%  Entering block accumulator loop for bucket 40:  bucket 39: 90%  bucket 40: 10%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 20%  bucket 40: 30%  bucket 40: 40%  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41Getting block 42 of 60  Entering block accumulator loop for bucket 41:  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%  Entering block accumulator loop for bucket 42:  bucket 41: 40%  bucket 41: 50%  bucket 42: 10%  bucket 41: 60%  bucket 42: 20%  bucket 41: 70%  bucket 41: 80%  bucket 42: 30%  bucket 41: 90%  bucket 42: 40%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  bucket 43: 40%  bucket 43: 50%  Entering block accumulator loop for bucket 44:Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  bucket 44: 10%  bucket 43: 60%  bucket 44: 20%  bucket 43: 70%  Entering block accumulator loop for bucket 45:  bucket 44: 30%  bucket 43: 80%  bucket 45: 10%  bucket 44: 40%  bucket 43: 90%  bucket 45: 20%  bucket 44: 50%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 44: 60%  bucket 45: 30%  bucket 44: 70%  bucket 45: 40%  bucket 44: 80%  bucket 45: 50%  bucket 44: 90%  bucket 45: 60%  bucket 44: 100%  bucket 45: 70%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 122 for bucket 43Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  bucket 47: 60%  Entering block accumulator loop for bucket 48:  bucket 47: 70%  bucket 48: 10%  bucket 47: 80%  bucket 47: 90%  bucket 48: 20%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Entering block accumulator loop for bucket 51:  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  bucket 51: 10%  bucket 51: 20%  Entering block accumulator loop for bucket 52:  bucket 51: 30%  bucket 52: 10%  bucket 51: 40%  bucket 52: 20%  bucket 51: 50%  bucket 52: 30%  bucket 51: 60%  bucket 52: 40%  bucket 51: 70%  bucket 52: 50%  bucket 51: 80%  bucket 52: 60%  bucket 51: 90%  bucket 51: 100%  bucket 52: 70%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 54:  bucket 54: 10%  Entering block accumulator loop for bucket 55:  bucket 54: 20%  bucket 55: 10%  bucket 54: 30%  bucket 55: 20%  bucket 54: 40%  bucket 55: 30%  bucket 54: 50%  bucket 55: 40%  bucket 54: 60%  bucket 55: 50%  bucket 54: 70%  bucket 55: 60%  bucket 54: 80%  bucket 55: 70%  bucket 54: 90%  bucket 55: 80%  bucket 54: 100%  bucket 55: 90%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%Getting block 57 of 60  Reserving size (126) for bucket 57  bucket 56: 30%  Calculating Z arrays for bucket 57  bucket 56: 40%  bucket 56: 50%  Entering block accumulator loop for bucket 57:  bucket 56: 60%  bucket 57: 10%  bucket 56: 70%  bucket 57: 20%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59Getting block 60 of 60  Entering block accumulator loop for bucket 59:  bucket 58: 40%  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  bucket 59: 10%  bucket 58: 50%  Entering block accumulator loop for bucket 60:  bucket 59: 20%  bucket 58: 60%  bucket 60: 10%  bucket 59: 30%  bucket 60: 20%  bucket 60: 30%  bucket 58: 70%  bucket 60: 40%  bucket 60: 50%  bucket 58: 80%  bucket 60: 60%  bucket 60: 70%  bucket 58: 90%  bucket 60: 80%  bucket 60: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #3)" name="2" time="9.00785756111145">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 2, "time_seconds": 9.00785756111145, "tool_id": "hisat2", "tool_version": "2.2.1+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #4)" name="3" time="33.719462156295776">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Entering block accumulator loop for bucket 1:  Reserving size (126) for bucket 2Getting block 3 of 60  Reserving size (126) for bucket 3  bucket 1: 10%  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 2  bucket 1: 20%Getting block 4 of 60  Reserving size (126) for bucket 4  bucket 1: 30%  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 2:  bucket 1: 40%  Entering block accumulator loop for bucket 4:Getting block 5 of 60  Reserving size (126) for bucket 5Getting block 6 of 60  bucket 1: 50%  Reserving size (126) for bucket 6  bucket 4: 10%  bucket 2: 10%  Calculating Z arrays for bucket 5  bucket 1: 60%  Calculating Z arrays for bucket 6  bucket 2: 20%Getting block 8 of 60  Reserving size (126) for bucket 8Getting block 7 of 60  Reserving size (126) for bucket 7  bucket 2: 30%  Calculating Z arrays for bucket 8  bucket 4: 20%  bucket 2: 40%  Entering block accumulator loop for bucket 5:  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 6:  bucket 1: 70%  bucket 4: 30%  bucket 3: 10%  bucket 5: 10%  bucket 4: 40%  bucket 1: 80%  bucket 2: 50%  bucket 5: 20%  Entering block accumulator loop for bucket 7:  bucket 3: 20%  bucket 4: 50%  bucket 1: 90%  bucket 6: 10%  Entering block accumulator loop for bucket 8:  bucket 2: 60%  bucket 3: 30%  bucket 6: 20%  bucket 5: 30%  bucket 7: 10%  bucket 1: 100%  bucket 2: 70%  bucket 5: 40%  bucket 8: 10%  bucket 6: 30%  bucket 2: 80%  bucket 5: 50%  bucket 7: 20%  bucket 4: 60%  bucket 6: 40%  bucket 3: 40%  Sorting block of length 42 for bucket 1  bucket 7: 30%  (Using difference cover)  bucket 8: 20%  bucket 6: 50%  bucket 5: 60%  bucket 7: 40%  bucket 3: 50%  bucket 4: 70%  bucket 8: 30%  bucket 2: 90%  bucket 6: 60%  bucket 5: 70%  bucket 3: 60%  bucket 4: 80%  bucket 8: 40%  bucket 5: 80%  bucket 7: 50%  bucket 3: 70%  bucket 5: 90%  bucket 6: 70%  bucket 4: 90%  bucket 2: 100%  bucket 7: 60%  bucket 6: 80%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 8: 50%  bucket 6: 90%  bucket 5: 100%  bucket 3: 80%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 7: 70%  bucket 6: 100%  bucket 4: 100%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 8: 60%  bucket 3: 90%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 7: 80%  bucket 8: 70%  Sorting block time: 00:00:00  bucket 3: 100%  bucket 7: 90%Returning block of 43 for bucket 1  bucket 8: 80%  Sorting block of length 106 for bucket 3  bucket 7: 100%  (Using difference cover)  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 69 for bucket 4Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  Entering block accumulator loop for bucket 10:  bucket 9: 70%  bucket 9: 80%  bucket 10: 10%  bucket 9: 90%  bucket 10: 20%  bucket 9: 100%  Sorting block of length 124 for bucket 9  bucket 10: 30%  (Using difference cover)  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  bucket 11: 10%  Entering block accumulator loop for bucket 12:  bucket 11: 20%  bucket 12: 10%  bucket 11: 30%  bucket 12: 20%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  bucket 12: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  Sorting block time: 00:00:00  bucket 14: 60%Returning block of 86 for bucket 13  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%Getting block 16 of 60  Reserving size (126) for bucket 16  bucket 15: 50%  Calculating Z arrays for bucket 16  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  Entering block accumulator loop for bucket 16:  bucket 15: 90%  bucket 15: 100%  bucket 16: 10%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%Getting block 18 of 60  Reserving size (126) for bucket 18  bucket 17: 50%  Calculating Z arrays for bucket 18  bucket 17: 60%  Entering block accumulator loop for bucket 18:  bucket 17: 70%  bucket 18: 10%  bucket 17: 80%  bucket 18: 20%  bucket 17: 90%  bucket 18: 30%  bucket 17: 100%  bucket 18: 40%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 19:  Entering block accumulator loop for bucket 20:  bucket 19: 10%  bucket 20: 10%  bucket 19: 20%  bucket 20: 20%  bucket 20: 30%  bucket 19: 30%  bucket 20: 40%  bucket 20: 50%  bucket 19: 40%  bucket 20: 60%  bucket 20: 70%  bucket 19: 50%  bucket 20: 80%  bucket 19: 60%  bucket 20: 90%Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  bucket 20: 100%  bucket 19: 70%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 19: 80%  Entering block accumulator loop for bucket 21:  bucket 19: 90%  bucket 19: 100%  bucket 21: 10%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  Sorting block time: 00:00:00Returning block of 98 for bucket 20  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  Sorting block time: 00:00:00  (Using difference cover)Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 22:  Entering block accumulator loop for bucket 23:  bucket 22: 10%  bucket 23: 10%  bucket 22: 20%  bucket 23: 20%  bucket 22: 30%  bucket 23: 30%  bucket 22: 40%  bucket 23: 40%  bucket 22: 50%  bucket 23: 50%  bucket 22: 60%  bucket 23: 60%  bucket 22: 70%  bucket 23: 70%  bucket 22: 80%  bucket 23: 80%  bucket 22: 90%  bucket 23: 90%  bucket 22: 100%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  bucket 24: 60%  bucket 24: 70%  Entering block accumulator loop for bucket 25:  bucket 24: 80%  bucket 25: 10%  bucket 24: 90%  bucket 25: 20%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 27:  Sorting block time: 00:00:00  Entering block accumulator loop for bucket 28:Returning block of 108 for bucket 26  bucket 27: 10%  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 27: 20%  bucket 28: 40%  bucket 27: 30%  bucket 28: 50%  bucket 27: 40%  bucket 28: 60%  bucket 27: 50%  bucket 28: 70%  bucket 27: 60%  bucket 28: 80%  bucket 27: 70%  bucket 28: 90%  bucket 27: 80%  bucket 28: 100%  Sorting block of length 106 for bucket 28  bucket 27: 90%  (Using difference cover)  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 60  Entering block accumulator loop for bucket 29:  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  bucket 29: 10%  Entering block accumulator loop for bucket 30:  bucket 29: 20%  bucket 30: 10%  bucket 29: 30%  bucket 30: 20%  bucket 29: 40%  bucket 30: 30%  bucket 29: 50%  bucket 30: 40%  bucket 29: 60%  bucket 30: 50%  bucket 30: 60%  bucket 29: 70%  bucket 30: 70%  bucket 29: 80%  bucket 30: 80%  bucket 29: 90%  bucket 30: 90%  bucket 29: 100%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%Getting block 33 of 60  bucket 32: 80%  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%  bucket 33: 30%  bucket 33: 40%  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%  bucket 34: 30%Getting block 35 of 60  Reserving size (126) for bucket 35  bucket 34: 40%  Calculating Z arrays for bucket 35  bucket 34: 50%  Entering block accumulator loop for bucket 35:  bucket 34: 60%  bucket 35: 10%  bucket 34: 70%  bucket 35: 20%  bucket 34: 80%  bucket 35: 30%  bucket 34: 90%  bucket 35: 40%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%  bucket 36: 30%  bucket 36: 40%  bucket 36: 50%  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 37: 20%  bucket 37: 30%  bucket 37: 40%  bucket 37: 50%  bucket 37: 60%Getting block 38 of 60  Reserving size (126) for bucket 38  bucket 37: 70%  Calculating Z arrays for bucket 38  bucket 37: 80%  bucket 37: 90%  Entering block accumulator loop for bucket 38:  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  Sorting block time: 00:00:00Returning block of 60 for bucket 37  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Entering block accumulator loop for bucket 39:  Calculating Z arrays for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  bucket 39: 10%  Entering block accumulator loop for bucket 40:  bucket 39: 20%  Entering block accumulator loop for bucket 41:  bucket 40: 10%  bucket 39: 30%  bucket 41: 10%  bucket 39: 40%  bucket 40: 20%  bucket 39: 50%  bucket 41: 20%  bucket 40: 30%  bucket 39: 60%  bucket 41: 30%  bucket 40: 40%  bucket 39: 70%  bucket 41: 40%  bucket 40: 50%  bucket 39: 80%  bucket 41: 50%  bucket 39: 90%  bucket 40: 60%  bucket 41: 60%  bucket 39: 100%  Sorting block of length 125 for bucket 39  bucket 40: 70%  bucket 41: 70%  bucket 40: 80%  (Using difference cover)  bucket 41: 80%  bucket 40: 90%  bucket 41: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 42: 10%  bucket 42: 20%  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Entering block accumulator loop for bucket 43:  Calculating Z arrays for bucket 44Getting block 45 of 60  Entering block accumulator loop for bucket 44:  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  bucket 43: 10%  bucket 44: 10%  bucket 43: 20%  Entering block accumulator loop for bucket 45:  bucket 43: 30%  bucket 44: 20%  bucket 45: 10%  bucket 43: 40%  bucket 44: 30%  bucket 45: 20%  bucket 43: 50%  bucket 44: 40%  bucket 45: 30%  bucket 43: 60%  bucket 45: 40%  bucket 43: 70%  bucket 44: 50%  bucket 45: 50%  bucket 43: 80%  bucket 44: 60%  bucket 45: 60%  bucket 43: 90%  bucket 44: 70%  bucket 45: 70%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 44: 80%  bucket 45: 80%  bucket 45: 90%  bucket 44: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 46 of 60  Reserving size (126) for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 46  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 46:  Entering block accumulator loop for bucket 47:  bucket 46: 10%  bucket 47: 10%  bucket 46: 20%  bucket 47: 20%  bucket 46: 30%  bucket 47: 30%  bucket 46: 40%  bucket 47: 40%  bucket 46: 50%  bucket 46: 60%  bucket 47: 50%  bucket 46: 70%  bucket 47: 60%  bucket 46: 80%  bucket 47: 70%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  bucket 47: 80%  (Using difference cover)  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 48:  Entering block accumulator loop for bucket 50:  bucket 50: 10%  Entering block accumulator loop for bucket 49:  bucket 48: 10%  bucket 50: 20%  bucket 48: 20%  bucket 49: 10%  bucket 50: 30%  bucket 48: 30%  bucket 49: 20%  bucket 48: 40%  bucket 50: 40%  bucket 48: 50%  bucket 50: 50%  bucket 49: 30%  bucket 50: 60%  bucket 48: 60%  bucket 50: 70%  bucket 49: 40%  bucket 48: 70%  bucket 50: 80%  bucket 49: 50%  bucket 48: 80%  bucket 50: 90%  bucket 49: 60%  bucket 48: 90%  bucket 50: 100%  bucket 48: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 49: 70%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%Getting block 52 of 60  Reserving size (126) for bucket 52  bucket 51: 40%  Calculating Z arrays for bucket 52  bucket 51: 50%  bucket 51: 60%  Entering block accumulator loop for bucket 52:  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 10%  bucket 52: 20%  bucket 52: 30%  bucket 52: 40%  bucket 52: 50%  Sorting block time: 00:00:00Returning block of 92 for bucket 51  bucket 52: 60%  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  bucket 53: 30%  bucket 53: 40%  Entering block accumulator loop for bucket 54:  bucket 53: 50%  bucket 53: 60%  bucket 54: 10%  bucket 53: 70%  bucket 54: 20%  bucket 53: 80%  bucket 54: 30%  bucket 53: 90%  bucket 54: 40%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Entering block accumulator loop for bucket 55:  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 55: 10%  bucket 56: 10%  bucket 55: 20%  bucket 56: 20%  bucket 55: 30%  bucket 56: 30%  bucket 55: 40%  bucket 56: 40%  bucket 55: 50%  bucket 56: 50%  bucket 55: 60%  bucket 56: 60%  bucket 55: 70%  bucket 56: 70%  bucket 55: 80%  bucket 55: 90%  bucket 56: 80%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:Getting block 58 of 60  Reserving size (126) for bucket 58  bucket 57: 10%  Calculating Z arrays for bucket 58  bucket 57: 20%  bucket 57: 30%  Entering block accumulator loop for bucket 58:  bucket 57: 40%  bucket 58: 10%  bucket 57: 50%  bucket 58: 20%  bucket 57: 60%  bucket 57: 70%  bucket 58: 30%  bucket 57: 80%  bucket 58: 40%  bucket 57: 90%  bucket 58: 50%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59Getting block 60 of 60  Entering block accumulator loop for bucket 59:  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  bucket 59: 10%  Entering block accumulator loop for bucket 60:  bucket 59: 20%  bucket 60: 10%  bucket 60: 20%  bucket 59: 30%  bucket 60: 30%  bucket 60: 40%  bucket 59: 40%  bucket 60: 50%  bucket 60: 60%  bucket 59: 50%  bucket 60: 70%  bucket 59: 60%  bucket 60: 80%  bucket 60: 90%  bucket 59: 70%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    71 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    71 pairs aligned 0 times concordantly or discordantly; of these:      142 mates make up the pairs; of these:        74 (52.11%) aligned 0 times        68 (47.89%) aligned exactly 1 time        0 (0.00%) aligned >1 times92.60% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #5)" name="4" time="32.99399948120117">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60  Calculating Z arrays for bucket 1  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 2Getting block 3 of 60  Reserving size (126) for bucket 3  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 3Getting block 4 of 60  Reserving size (126) for bucket 4Getting block 5 of 60  Entering block accumulator loop for bucket 3:  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 2:  bucket 3: 10%  bucket 2: 10%  Entering block accumulator loop for bucket 4:  Reserving size (126) for bucket 5  bucket 1: 10%  bucket 4: 10%  bucket 2: 20%  bucket 3: 20%Getting block 6 of 60  bucket 3: 30%  Calculating Z arrays for bucket 5  bucket 1: 20%  bucket 3: 40%  bucket 2: 30%  bucket 4: 20%  bucket 1: 30%Getting block 7 of 60  Reserving size (126) for bucket 6  bucket 4: 30%  Entering block accumulator loop for bucket 5:  bucket 3: 50%  bucket 4: 40%  Reserving size (126) for bucket 7  Calculating Z arrays for bucket 6  bucket 1: 40%  Calculating Z arrays for bucket 7  bucket 4: 50%  bucket 5: 10%  bucket 3: 60%  bucket 2: 40%  Entering block accumulator loop for bucket 6:  bucket 3: 70%Getting block 8 of 60  bucket 6: 10%  Reserving size (126) for bucket 8  bucket 4: 60%  bucket 1: 50%  bucket 3: 80%  Entering block accumulator loop for bucket 7:  bucket 4: 70%  bucket 2: 50%  bucket 3: 90%  bucket 5: 20%  bucket 4: 80%  bucket 1: 60%  bucket 5: 30%  bucket 3: 100%  bucket 4: 90%  Calculating Z arrays for bucket 8  Sorting block of length 106 for bucket 3  bucket 1: 70%  (Using difference cover)  bucket 7: 10%  bucket 1: 80%  bucket 2: 60%  bucket 7: 20%  bucket 4: 100%  bucket 1: 90%  bucket 2: 70%  bucket 5: 40%  bucket 1: 100%  Entering block accumulator loop for bucket 8:  bucket 7: 30%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 6: 20%  bucket 5: 50%  bucket 7: 40%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 5: 60%  bucket 8: 10%  bucket 6: 30%  bucket 2: 80%  bucket 8: 20%  bucket 5: 70%  bucket 2: 90%  bucket 6: 40%  bucket 5: 80%  bucket 2: 100%  bucket 6: 50%  bucket 7: 50%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 5: 90%  bucket 7: 60%  bucket 8: 30%  bucket 6: 60%  bucket 5: 100%  bucket 8: 40%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 6: 70%  bucket 7: 70%  bucket 7: 80%  bucket 8: 50%  bucket 6: 80%  bucket 7: 90%  bucket 8: 60%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 6: 90%  bucket 8: 70%  bucket 6: 100%  bucket 8: 80%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 85 for bucket 2Getting block 9 of 60Getting block 10 of 60  Reserving size (126) for bucket 10  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 11 of 60  Calculating Z arrays for bucket 10  Reserving size (126) for bucket 11  Entering block accumulator loop for bucket 9:  Calculating Z arrays for bucket 11  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  Entering block accumulator loop for bucket 11:  bucket 10: 30%  bucket 9: 50%  bucket 10: 40%  bucket 9: 60%  bucket 11: 10%  bucket 10: 50%  bucket 9: 70%  bucket 11: 20%  bucket 10: 60%  bucket 9: 80%  bucket 11: 30%  bucket 10: 70%  bucket 9: 90%  bucket 11: 40%  bucket 10: 80%  bucket 9: 100%  bucket 11: 50%  bucket 10: 90%  Sorting block of length 124 for bucket 9  bucket 11: 60%  (Using difference cover)  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Entering block accumulator loop for bucket 12:  Calculating Z arrays for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  bucket 13: 10%  bucket 12: 10%  bucket 13: 20%  Entering block accumulator loop for bucket 14:  bucket 12: 20%  Entering block accumulator loop for bucket 15:  bucket 14: 10%  bucket 13: 30%  bucket 12: 30%Getting block 16 of 60  Reserving size (126) for bucket 16  bucket 15: 10%  Calculating Z arrays for bucket 16  bucket 14: 20%  bucket 13: 40%  bucket 15: 20%  bucket 14: 30%  bucket 12: 40%  bucket 13: 50%  bucket 15: 30%  bucket 12: 50%  Entering block accumulator loop for bucket 16:  bucket 14: 40%  bucket 13: 60%  bucket 12: 60%  bucket 15: 40%  bucket 16: 10%  bucket 14: 50%  bucket 13: 70%  bucket 14: 60%  bucket 15: 50%  bucket 16: 20%  bucket 14: 70%  bucket 13: 80%  bucket 12: 70%  bucket 14: 80%  bucket 15: 60%  bucket 16: 30%  bucket 14: 90%  bucket 12: 80%  bucket 16: 40%  bucket 14: 100%  bucket 15: 70%  bucket 13: 90%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 12: 90%  bucket 15: 80%  bucket 16: 50%  bucket 13: 100%  bucket 12: 100%  bucket 15: 90%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 16: 60%  bucket 15: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block of length 68 for bucket 15  bucket 16: 70%  bucket 16: 80%  (Using difference cover)  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 50%Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  bucket 17: 60%  Entering block accumulator loop for bucket 18:  bucket 17: 70%  Entering block accumulator loop for bucket 19:  bucket 18: 10%  bucket 17: 80%  bucket 19: 10%  bucket 18: 20%  bucket 17: 90%  bucket 18: 30%  bucket 19: 20%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 40%  bucket 19: 30%  bucket 18: 50%  bucket 19: 40%  bucket 18: 60%  bucket 19: 50%  bucket 18: 70%  bucket 19: 60%  bucket 18: 80%  bucket 19: 70%  bucket 18: 90%  bucket 19: 80%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  bucket 21: 10%  Entering block accumulator loop for bucket 22:  Sorting block time: 00:00:00Returning block of 98 for bucket 20  bucket 21: 20%  bucket 22: 10%  bucket 22: 20%  bucket 21: 30%  bucket 22: 30%  bucket 21: 40%  bucket 22: 40%  bucket 21: 50%  bucket 22: 50%  bucket 21: 60%  bucket 22: 60%  bucket 21: 70%  bucket 22: 70%  bucket 22: 80%  bucket 21: 80%  bucket 22: 90%  bucket 21: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 23:  Entering block accumulator loop for bucket 25:  bucket 23: 10%  Entering block accumulator loop for bucket 24:  bucket 25: 10%  bucket 23: 20%  bucket 24: 10%  bucket 25: 20%  bucket 23: 30%  bucket 24: 20%  bucket 23: 40%  bucket 25: 30%  bucket 23: 50%  bucket 24: 30%  bucket 25: 40%  bucket 23: 60%  bucket 24: 40%  bucket 23: 70%  bucket 24: 50%  bucket 25: 50%  bucket 24: 60%  bucket 23: 80%  bucket 25: 60%Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  bucket 24: 70%  bucket 23: 90%  bucket 25: 70%  bucket 24: 80%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 90%  bucket 25: 80%  Entering block accumulator loop for bucket 26:  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 25: 90%  bucket 26: 10%  bucket 25: 100%  bucket 26: 20%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 90%  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Entering block accumulator loop for bucket 27:  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 30%  Entering block accumulator loop for bucket 29:Getting block 30 of 60  bucket 29: 10%  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  bucket 29: 20%  bucket 28: 40%  bucket 29: 30%  Entering block accumulator loop for bucket 30:  bucket 28: 50%  bucket 29: 40%  bucket 30: 10%  bucket 28: 60%  bucket 30: 20%  bucket 29: 50%  bucket 30: 30%  bucket 28: 70%  bucket 29: 60%  bucket 30: 40%  bucket 28: 80%  bucket 30: 50%  bucket 29: 70%  bucket 30: 60%  bucket 28: 90%  bucket 29: 80%  bucket 30: 70%  bucket 28: 100%  Sorting block of length 106 for bucket 28  bucket 30: 80%  bucket 29: 90%  bucket 30: 90%  (Using difference cover)  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 32:  bucket 32: 10%  Entering block accumulator loop for bucket 33:  bucket 32: 20%  bucket 32: 30%  bucket 33: 10%  bucket 32: 40%  bucket 33: 20%  bucket 32: 50%  bucket 33: 30%  bucket 32: 60%  bucket 33: 40%  bucket 32: 70%  bucket 33: 50%  bucket 32: 80%Getting block 34 of 60  Reserving size (126) for bucket 34  bucket 32: 90%  bucket 33: 60%  Calculating Z arrays for bucket 34  bucket 32: 100%  bucket 33: 70%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 33: 80%  Entering block accumulator loop for bucket 34:  bucket 33: 90%  bucket 34: 10%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  Sorting block time: 00:00:00Returning block of 126 for bucket 32  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 36:Getting block 38 of 60  Reserving size (126) for bucket 38  bucket 36: 10%  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 37:Getting block 39 of 60  bucket 37: 10%  Entering block accumulator loop for bucket 38:  bucket 36: 20%  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  bucket 37: 20%  bucket 38: 10%  bucket 36: 30%  bucket 37: 30%  bucket 36: 40%  bucket 38: 20%  Entering block accumulator loop for bucket 39:  bucket 37: 40%  bucket 36: 50%  bucket 38: 30%  bucket 37: 50%  bucket 39: 10%  bucket 36: 60%  bucket 37: 60%  bucket 38: 40%  bucket 39: 20%  bucket 36: 70%  bucket 38: 50%  bucket 39: 30%  bucket 37: 70%  bucket 36: 80%  bucket 38: 60%  bucket 39: 40%  bucket 37: 80%  bucket 39: 50%  bucket 38: 70%  bucket 36: 90%  bucket 39: 60%  bucket 37: 90%  bucket 38: 80%  bucket 36: 100%  bucket 39: 70%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 100%  bucket 39: 80%  Sorting block of length 59 for bucket 37  bucket 38: 90%  (Using difference cover)  bucket 39: 90%  bucket 38: 100%  bucket 39: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 40 of 60  Reserving size (126) for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 41:  Entering block accumulator loop for bucket 40:Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  bucket 40: 10%Getting block 43 of 60  Entering block accumulator loop for bucket 42:  bucket 40: 20%  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  bucket 41: 10%  bucket 40: 30%  bucket 42: 10%  bucket 41: 20%  bucket 40: 40%  Entering block accumulator loop for bucket 43:  bucket 42: 20%  bucket 41: 30%  bucket 40: 50%  bucket 43: 10%  bucket 42: 30%  bucket 41: 40%  bucket 40: 60%  bucket 43: 20%  bucket 42: 40%  bucket 41: 50%  bucket 43: 30%  bucket 40: 70%  bucket 42: 50%  bucket 41: 60%  bucket 40: 80%  bucket 43: 40%  bucket 42: 60%  bucket 43: 50%  bucket 40: 90%  bucket 41: 70%  bucket 42: 70%  bucket 43: 60%  bucket 40: 100%  bucket 41: 80%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 42: 80%  bucket 41: 90%  bucket 43: 70%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 90%  bucket 43: 80%  bucket 42: 100%  bucket 43: 90%  Sorting block of length 119 for bucket 42  (Using difference cover)  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Entering block accumulator loop for bucket 44:  Calculating Z arrays for bucket 45  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  Entering block accumulator loop for bucket 45:  bucket 44: 40%  bucket 44: 50%  bucket 45: 10%  bucket 44: 60%  bucket 45: 20%  bucket 44: 70%  bucket 44: 80%  bucket 45: 30%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  bucket 46: 70%  bucket 46: 80%  Entering block accumulator loop for bucket 47:  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  Sorting block time: 00:00:00Returning block of 70 for bucket 46  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 49:  Entering block accumulator loop for bucket 48:  bucket 49: 10%  bucket 48: 10%  bucket 49: 20%  bucket 48: 20%  bucket 49: 30%  bucket 48: 30%  bucket 49: 40%  bucket 49: 50%  bucket 48: 40%  bucket 49: 60%  bucket 48: 50%  bucket 48: 60%  bucket 49: 70%  bucket 48: 70%  bucket 49: 80%  bucket 48: 80%  bucket 49: 90%  bucket 48: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 50:Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  bucket 50: 10%  bucket 50: 20%  Entering block accumulator loop for bucket 51:  Entering block accumulator loop for bucket 52:  bucket 50: 30%  bucket 51: 10%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 52: 10%  bucket 50: 70%  bucket 52: 20%  bucket 51: 20%  bucket 50: 80%  bucket 52: 30%  bucket 51: 30%  bucket 50: 90%  bucket 52: 40%  bucket 51: 40%  bucket 50: 100%  bucket 52: 50%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 50%  bucket 52: 60%  bucket 51: 60%  bucket 52: 70%  bucket 51: 70%  bucket 52: 80%  bucket 51: 80%  bucket 52: 90%  bucket 51: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  bucket 53: 40%  bucket 53: 50%  Entering block accumulator loop for bucket 54:  bucket 53: 60%  bucket 54: 10%  bucket 53: 70%  bucket 54: 20%  bucket 53: 80%  bucket 54: 30%  bucket 53: 90%  bucket 54: 40%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%Getting block 56 of 60  Reserving size (126) for bucket 56  bucket 55: 30%  Calculating Z arrays for bucket 56  bucket 55: 40%  bucket 55: 50%  Entering block accumulator loop for bucket 56:  bucket 55: 60%  bucket 56: 10%  bucket 55: 70%  bucket 56: 20%  bucket 55: 80%  bucket 56: 30%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  Sorting block time: 00:00:00Returning block of 80 for bucket 55  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%Getting block 58 of 60  bucket 57: 60%  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  bucket 57: 70%  bucket 57: 80%  Entering block accumulator loop for bucket 58:  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block time: 00:00:00  Sorting block of length 113 for bucket 58  (Using difference cover)Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 59:  bucket 59: 10%  bucket 59: 20%  bucket 59: 30%  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times85.80% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #6)" name="5" time="29.40926766395569">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  bucket 1: 10%  bucket 1: 20%Getting block 3 of 60  bucket 1: 30%  Reserving size (126) for bucket 3  Entering block accumulator loop for bucket 2:  bucket 1: 40%Getting block 4 of 60  bucket 2: 10%  Calculating Z arrays for bucket 3  bucket 1: 50%  Reserving size (126) for bucket 4Getting block 5 of 60  bucket 1: 60%  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  bucket 1: 70%  bucket 2: 20%Getting block 6 of 60  Reserving size (126) for bucket 6  bucket 1: 80%  bucket 2: 30%  Reserving size (126) for bucket 5  bucket 1: 90%  Entering block accumulator loop for bucket 4:  bucket 3: 10%  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 6  bucket 2: 40%  bucket 3: 20%Getting block 7 of 60  bucket 3: 30%  Entering block accumulator loop for bucket 5:  bucket 2: 50%  Reserving size (126) for bucket 7  bucket 3: 40%  Entering block accumulator loop for bucket 6:  bucket 2: 60%  bucket 5: 10%  bucket 3: 50%  bucket 1: 100%Getting block 8 of 60  Reserving size (126) for bucket 8  Calculating Z arrays for bucket 7  bucket 5: 20%  Sorting block of length 42 for bucket 1  Calculating Z arrays for bucket 8  bucket 5: 30%  bucket 3: 60%  bucket 4: 10%  bucket 2: 70%  Entering block accumulator loop for bucket 7:  bucket 6: 10%  bucket 3: 70%  bucket 5: 40%  (Using difference cover)  Entering block accumulator loop for bucket 8:  bucket 4: 20%  bucket 7: 10%  bucket 5: 50%  bucket 3: 80%  bucket 4: 30%  bucket 8: 10%  bucket 5: 60%  bucket 6: 20%  bucket 2: 80%  bucket 5: 70%  bucket 8: 20%  bucket 4: 40%  bucket 2: 90%  bucket 6: 30%  bucket 8: 30%  bucket 5: 80%  bucket 4: 50%  bucket 3: 90%  bucket 8: 40%  bucket 2: 100%  bucket 5: 90%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 7: 20%  bucket 8: 50%  bucket 4: 60%  bucket 5: 100%  bucket 3: 100%  bucket 6: 40%  bucket 8: 60%  bucket 4: 70%  Sorting block of length 106 for bucket 3  (Using difference cover)  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 4: 80%  bucket 7: 30%  Sorting block time: 00:00:00  bucket 6: 50%  bucket 8: 70%  bucket 4: 90%Returning block of 43 for bucket 1  bucket 6: 60%  bucket 7: 40%  bucket 4: 100%  bucket 8: 80%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 6: 70%  bucket 8: 90%  bucket 7: 50%  bucket 6: 80%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 7: 60%  bucket 6: 90%  bucket 7: 70%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 85 for bucket 2Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:Getting block 11 of 60  Reserving size (126) for bucket 11  bucket 9: 10%  Entering block accumulator loop for bucket 10:  Calculating Z arrays for bucket 11  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  Entering block accumulator loop for bucket 11:  bucket 9: 40%  bucket 10: 30%  bucket 11: 10%  bucket 9: 50%  bucket 10: 40%  bucket 11: 20%  bucket 9: 60%  bucket 10: 50%  bucket 9: 70%  bucket 11: 30%  bucket 10: 60%  bucket 9: 80%  bucket 11: 40%  bucket 10: 70%  bucket 9: 90%  bucket 11: 50%  bucket 10: 80%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 11: 60%  bucket 10: 100%  Sorting block of length 89 for bucket 10  bucket 11: 70%  (Using difference cover)  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  Entering block accumulator loop for bucket 13:  bucket 12: 30%  bucket 12: 40%  bucket 13: 10%  bucket 12: 50%  bucket 13: 20%  bucket 12: 60%  bucket 13: 30%  bucket 12: 70%  bucket 13: 40%  bucket 12: 80%  bucket 13: 50%  bucket 12: 90%  bucket 13: 60%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  bucket 14: 40%  bucket 14: 50%  Entering block accumulator loop for bucket 15:  bucket 14: 60%  bucket 15: 10%  bucket 14: 70%  bucket 15: 20%  bucket 15: 30%  bucket 14: 80%  bucket 15: 40%  bucket 14: 90%  bucket 15: 50%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  Entering block accumulator loop for bucket 17:  bucket 16: 10%  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 16: 20%  bucket 17: 50%  bucket 17: 60%  bucket 16: 30%  bucket 17: 70%  bucket 17: 80%  bucket 16: 40%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 18:  bucket 18: 10%  Entering block accumulator loop for bucket 19:  bucket 18: 20%  bucket 19: 10%  bucket 18: 30%  bucket 19: 20%  bucket 18: 40%  bucket 19: 30%  bucket 18: 50%  bucket 19: 40%  bucket 18: 60%  bucket 19: 50%  bucket 18: 70%  bucket 19: 60%  bucket 18: 80%  bucket 19: 70%  bucket 18: 90%  bucket 19: 80%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  bucket 21: 10%  bucket 21: 20%  Entering block accumulator loop for bucket 22:  bucket 21: 30%  Sorting block time: 00:00:00Returning block of 98 for bucket 20  bucket 22: 10%  bucket 21: 40%  bucket 22: 20%  bucket 21: 50%  bucket 22: 30%  bucket 21: 60%  bucket 22: 40%  bucket 21: 70%  bucket 21: 80%  bucket 22: 50%  bucket 21: 90%  bucket 22: 60%  bucket 21: 100%  bucket 22: 70%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 60  Entering block accumulator loop for bucket 24:  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  bucket 24: 10%  Entering block accumulator loop for bucket 25:  bucket 24: 20%  bucket 25: 10%  bucket 24: 30%  bucket 25: 20%  bucket 24: 40%  bucket 25: 30%  bucket 24: 50%  bucket 25: 40%  bucket 24: 60%  bucket 25: 50%  bucket 24: 70%  bucket 25: 60%  bucket 24: 80%  bucket 25: 70%  bucket 24: 90%  bucket 25: 80%  bucket 24: 100%  bucket 25: 90%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26Getting block 27 of 60Getting block 28 of 60  Reserving size (126) for bucket 28  Reserving size (126) for bucket 27Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 26:  Calculating Z arrays for bucket 28  Calculating Z arrays for bucket 27  bucket 26: 10%  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 28:  bucket 26: 20%  Entering block accumulator loop for bucket 27:  bucket 28: 10%  bucket 29: 10%  bucket 28: 20%  bucket 26: 30%  bucket 27: 10%  bucket 29: 20%  bucket 28: 30%  bucket 26: 40%  bucket 29: 30%  bucket 28: 40%  bucket 27: 20%  bucket 28: 50%  bucket 29: 40%  bucket 26: 50%  bucket 27: 30%  bucket 28: 60%  bucket 29: 50%  bucket 26: 60%  bucket 28: 70%  bucket 27: 40%  bucket 29: 60%  bucket 26: 70%  bucket 28: 80%  bucket 27: 50%  bucket 29: 70%  bucket 26: 80%  bucket 28: 90%  bucket 27: 60%  bucket 29: 80%  bucket 26: 90%  bucket 28: 100%  bucket 27: 70%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 90%  bucket 26: 100%  bucket 27: 80%  Sorting block of length 107 for bucket 26  bucket 29: 100%  bucket 27: 90%  Sorting block of length 51 for bucket 29  (Using difference cover)  (Using difference cover)  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 30:  Entering block accumulator loop for bucket 31:  bucket 30: 10%  bucket 31: 10%  bucket 30: 20%  bucket 31: 20%  bucket 30: 30%  bucket 31: 30%  bucket 30: 40%  bucket 31: 40%  bucket 30: 50%  bucket 31: 50%  bucket 30: 60%  bucket 31: 60%  bucket 30: 70%  bucket 31: 70%  bucket 30: 80%  bucket 31: 80%  bucket 30: 90%  bucket 31: 90%  bucket 30: 100%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:Getting block 33 of 60  Reserving size (126) for bucket 33  bucket 32: 10%  Calculating Z arrays for bucket 33  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  Entering block accumulator loop for bucket 33:  bucket 32: 50%  bucket 32: 60%  bucket 33: 10%  bucket 32: 70%  bucket 33: 20%  bucket 32: 80%  bucket 32: 90%  bucket 33: 30%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 33: 40%  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  Sorting block time: 00:00:00Returning block of 126 for bucket 32  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%Getting block 35 of 60  Reserving size (126) for bucket 35  bucket 34: 80%  Calculating Z arrays for bucket 35  bucket 34: 90%  Entering block accumulator loop for bucket 35:  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 36:  Entering block accumulator loop for bucket 37:  bucket 36: 10%  bucket 37: 10%  bucket 36: 20%  bucket 37: 20%  bucket 36: 30%  bucket 37: 30%  bucket 36: 40%  bucket 37: 40%  bucket 37: 50%  bucket 37: 60%  bucket 37: 70%  bucket 36: 50%  bucket 37: 80%  bucket 36: 60%  bucket 37: 90%  bucket 36: 70%  bucket 37: 100%  Sorting block of length 59 for bucket 37  bucket 36: 80%  (Using difference cover)  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 38:  Entering block accumulator loop for bucket 39:  bucket 38: 10%  bucket 39: 10%  bucket 38: 20%  bucket 39: 20%  bucket 38: 30%  bucket 39: 30%  bucket 38: 40%  bucket 39: 40%  bucket 38: 50%  bucket 39: 50%  bucket 38: 60%  bucket 39: 60%  bucket 38: 70%  bucket 39: 70%  bucket 38: 80%  bucket 39: 80%  bucket 38: 90%  bucket 39: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%  bucket 40: 40%  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 41:  bucket 41: 10%  Entering block accumulator loop for bucket 42:  bucket 41: 20%  bucket 42: 10%  bucket 41: 30%  bucket 42: 20%  bucket 41: 40%  bucket 42: 30%  bucket 41: 50%  bucket 42: 40%  bucket 41: 60%  bucket 42: 50%  bucket 41: 70%  bucket 42: 60%  bucket 41: 80%  bucket 42: 70%  bucket 41: 90%  bucket 42: 80%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Entering block accumulator loop for bucket 43:  Calculating Z arrays for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  bucket 43: 10%  Entering block accumulator loop for bucket 44:  Calculating Z arrays for bucket 45  bucket 43: 20%  bucket 44: 10%  bucket 43: 30%  bucket 44: 20%  Entering block accumulator loop for bucket 45:  bucket 43: 40%  bucket 44: 30%  bucket 45: 10%  bucket 44: 40%  bucket 43: 50%  bucket 44: 50%  bucket 45: 20%  bucket 43: 60%  bucket 44: 60%  bucket 45: 30%  bucket 44: 70%  bucket 43: 70%  bucket 44: 80%  bucket 45: 40%  bucket 43: 80%  bucket 44: 90%  bucket 45: 50%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 43: 90%  bucket 45: 60%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%Getting block 47 of 60  bucket 46: 90%  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  Sorting block time: 00:00:00  bucket 47: 90%Returning block of 70 for bucket 46  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Entering block accumulator loop for bucket 48:  Calculating Z arrays for bucket 49  Calculating Z arrays for bucket 50  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  Entering block accumulator loop for bucket 49:  Entering block accumulator loop for bucket 50:  bucket 48: 40%  bucket 48: 50%  bucket 50: 10%  bucket 49: 10%  bucket 48: 60%  bucket 48: 70%  bucket 49: 20%  bucket 48: 80%  bucket 50: 20%  bucket 48: 90%  bucket 49: 30%  bucket 50: 30%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 50: 40%  bucket 50: 50%  bucket 49: 40%  bucket 50: 60%  bucket 49: 50%  bucket 50: 70%  bucket 50: 80%  bucket 49: 60%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  bucket 49: 70%  (Using difference cover)  bucket 49: 80%  bucket 49: 90%  Sorting block time: 00:00:00Returning block of 114 for bucket 48  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Entering block accumulator loop for bucket 51:  Calculating Z arrays for bucket 52  bucket 51: 10%  Entering block accumulator loop for bucket 52:  bucket 51: 20%  bucket 51: 30%  bucket 52: 10%  bucket 51: 40%  bucket 52: 20%  bucket 51: 50%  bucket 52: 30%  bucket 51: 60%  bucket 52: 40%  bucket 51: 70%  bucket 52: 50%  bucket 51: 80%  bucket 52: 60%  bucket 51: 90%  bucket 52: 70%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%Getting block 54 of 60  Reserving size (126) for bucket 54  bucket 53: 20%  Calculating Z arrays for bucket 54  bucket 53: 30%  bucket 53: 40%  Entering block accumulator loop for bucket 54:  bucket 53: 50%  bucket 54: 10%  bucket 53: 60%  bucket 54: 20%  bucket 53: 70%  bucket 54: 30%  bucket 54: 40%  bucket 53: 80%  bucket 54: 50%  bucket 53: 90%  bucket 54: 60%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Entering block accumulator loop for bucket 55:  Calculating Z arrays for bucket 56  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  Entering block accumulator loop for bucket 56:  bucket 55: 50%  bucket 56: 10%  bucket 55: 60%  bucket 56: 20%  bucket 55: 70%  bucket 56: 30%  bucket 55: 80%  bucket 56: 40%  bucket 55: 90%  bucket 56: 50%  bucket 55: 100%  Sorting block of length 79 for bucket 55  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  (Using difference cover)  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  bucket 57: 40%  bucket 57: 50%  Entering block accumulator loop for bucket 58:  bucket 57: 60%  bucket 58: 10%  bucket 57: 70%  bucket 58: 20%  bucket 57: 80%  bucket 58: 30%Getting block 59 of 60  Reserving size (126) for bucket 59  bucket 58: 40%  Calculating Z arrays for bucket 59  bucket 57: 90%  bucket 58: 50%  bucket 57: 100%  Entering block accumulator loop for bucket 59:  bucket 58: 60%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 59: 10%  bucket 58: 70%  bucket 59: 20%  bucket 58: 80%  bucket 59: 30%  bucket 58: 90%  bucket 59: 40%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:003 reads; of these:  3 (100.00%) were unpaired; of these:    3 (100.00%) aligned 0 times    0 (0.00%) aligned exactly 1 time    0 (0.00%) aligned >1 times0.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #7)" name="6" time="29.945138454437256">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2Getting block 3 of 60  Reserving size (126) for bucket 3  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 2:Getting block 4 of 60  Reserving size (126) for bucket 4  bucket 1: 10%Getting block 5 of 60  Reserving size (126) for bucket 5  bucket 2: 10%  Calculating Z arrays for bucket 5  bucket 1: 20%  bucket 2: 20%  Entering block accumulator loop for bucket 3:  bucket 1: 30%  Calculating Z arrays for bucket 4  bucket 3: 10%  Entering block accumulator loop for bucket 5:Getting block 6 of 60Getting block 7 of 60  Reserving size (126) for bucket 7Getting block 8 of 60  Reserving size (126) for bucket 8  bucket 3: 20%  Entering block accumulator loop for bucket 4:  Calculating Z arrays for bucket 7  bucket 3: 30%  Reserving size (126) for bucket 6  bucket 1: 40%  bucket 5: 10%  bucket 4: 10%  Calculating Z arrays for bucket 6  bucket 2: 30%  bucket 4: 20%  bucket 5: 20%  bucket 1: 50%  bucket 4: 30%  bucket 5: 30%  Entering block accumulator loop for bucket 6:  bucket 3: 40%  bucket 1: 60%  bucket 4: 40%  bucket 6: 10%  bucket 1: 70%  bucket 5: 40%  Calculating Z arrays for bucket 8  bucket 2: 40%  bucket 6: 20%  Entering block accumulator loop for bucket 7:  bucket 6: 30%  bucket 1: 80%  bucket 2: 50%  bucket 1: 90%  bucket 7: 10%  bucket 6: 40%  bucket 1: 100%  bucket 5: 50%  bucket 2: 60%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 6: 50%  bucket 5: 60%  Entering block accumulator loop for bucket 8:  bucket 3: 50%  bucket 4: 50%  bucket 2: 70%  bucket 5: 70%  bucket 8: 10%  bucket 3: 60%  bucket 4: 60%  bucket 7: 20%  bucket 6: 60%  bucket 8: 20%  bucket 5: 80%  bucket 6: 70%  bucket 7: 30%  bucket 4: 70%  bucket 2: 80%  bucket 5: 90%  bucket 3: 70%  bucket 7: 40%  bucket 6: 80%  bucket 2: 90%  bucket 8: 30%  bucket 7: 50%  bucket 5: 100%  bucket 4: 80%  bucket 7: 60%  bucket 8: 40%  bucket 2: 100%  Sorting block of length 84 for bucket 2  (Using difference cover)  Sorting block of length 63 for bucket 5  bucket 7: 70%  bucket 8: 50%  (Using difference cover)  bucket 4: 90%  Sorting block time: 00:00:00  bucket 8: 60%  bucket 6: 90%  bucket 7: 80%  bucket 4: 100%Returning block of 43 for bucket 1  bucket 8: 70%  bucket 7: 90%  bucket 3: 80%  bucket 8: 80%  Sorting block of length 68 for bucket 4  bucket 6: 100%  (Using difference cover)  bucket 3: 90%  bucket 8: 90%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 7: 100%  bucket 8: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block of length 94 for bucket 8  bucket 3: 100%  (Using difference cover)  Sorting block of length 106 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 95 for bucket 8Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%Getting block 10 of 60  bucket 9: 50%  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  Entering block accumulator loop for bucket 10:  bucket 9: 90%  bucket 9: 100%  bucket 10: 10%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%Getting block 11 of 60  Reserving size (126) for bucket 11  bucket 10: 60%  Calculating Z arrays for bucket 11  bucket 10: 70%  Entering block accumulator loop for bucket 11:  bucket 10: 80%  bucket 11: 10%  bucket 10: 90%  bucket 11: 20%  bucket 11: 30%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00  bucket 11: 40%Returning block of 125 for bucket 9  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  bucket 12: 90%Getting block 14 of 60  bucket 12: 100%  Entering block accumulator loop for bucket 13:  Sorting block of length 82 for bucket 12  (Using difference cover)  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  Entering block accumulator loop for bucket 14:  bucket 13: 60%  bucket 14: 10%  bucket 13: 70%  bucket 14: 20%  bucket 13: 80%  bucket 14: 30%  bucket 14: 40%  bucket 13: 90%  bucket 14: 50%  bucket 13: 100%  bucket 14: 60%  Sorting block of length 85 for bucket 13  bucket 14: 70%  (Using difference cover)  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  Entering block accumulator loop for bucket 16:  bucket 15: 60%  bucket 15: 70%  bucket 16: 10%  bucket 15: 80%  bucket 16: 20%  bucket 15: 90%  bucket 16: 30%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 18:  bucket 17: 10%  bucket 18: 10%  bucket 17: 20%  bucket 18: 20%  bucket 17: 30%  bucket 18: 30%  bucket 17: 40%  bucket 18: 40%  bucket 17: 50%  bucket 18: 50%  bucket 17: 60%  bucket 18: 60%  bucket 17: 70%  bucket 18: 70%  bucket 17: 80%  bucket 18: 80%  bucket 17: 90%  bucket 18: 90%  bucket 17: 100%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 19:  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 19: 20%  bucket 20: 10%  bucket 19: 30%  bucket 20: 20%  bucket 19: 40%  bucket 20: 30%  bucket 19: 50%  bucket 20: 40%  bucket 19: 60%  bucket 20: 50%  bucket 19: 70%  bucket 20: 60%  bucket 19: 80%  bucket 20: 70%  bucket 19: 90%  bucket 20: 80%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%Getting block 22 of 60  bucket 21: 40%  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  bucket 21: 50%  bucket 21: 60%  Entering block accumulator loop for bucket 22:  bucket 21: 70%  bucket 22: 10%  bucket 21: 80%  bucket 22: 20%  bucket 21: 90%  bucket 22: 30%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 40%  bucket 22: 50%Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  bucket 22: 60%  bucket 22: 70%  Entering block accumulator loop for bucket 23:  bucket 22: 80%  bucket 22: 90%  bucket 23: 10%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 20%  Sorting block time: 00:00:00Returning block of 55 for bucket 21  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  Sorting block time: 00:00:00Returning block of 81 for bucket 22  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 24:  Entering block accumulator loop for bucket 25:  bucket 24: 10%  bucket 25: 10%  bucket 24: 20%  bucket 25: 20%  bucket 24: 30%  bucket 25: 30%  bucket 24: 40%  bucket 25: 40%  bucket 24: 50%  bucket 25: 50%  bucket 24: 60%  bucket 25: 60%  bucket 24: 70%  bucket 25: 70%  bucket 24: 80%  bucket 25: 80%  bucket 25: 90%  bucket 24: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27Getting block 28 of 60  Calculating Z arrays for bucket 27  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 26:  Entering block accumulator loop for bucket 27:  Entering block accumulator loop for bucket 28:  bucket 26: 10%  bucket 27: 10%  bucket 28: 10%  bucket 26: 20%  bucket 27: 20%  bucket 28: 20%  bucket 26: 30%  bucket 27: 30%  bucket 26: 40%  bucket 28: 30%  bucket 27: 40%  bucket 26: 50%  bucket 28: 40%  bucket 27: 50%  bucket 26: 60%  bucket 28: 50%  bucket 27: 60%  bucket 26: 70%  bucket 28: 60%  bucket 26: 80%  bucket 27: 70%  bucket 28: 70%  bucket 26: 90%  bucket 27: 80%  bucket 28: 80%  bucket 26: 100%  bucket 27: 90%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 28: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%Getting block 32 of 60  bucket 31: 20%Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  bucket 31: 30%  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  bucket 31: 40%  Entering block accumulator loop for bucket 33:  bucket 31: 50%  Entering block accumulator loop for bucket 32:  bucket 31: 60%  bucket 33: 10%  bucket 32: 10%  bucket 31: 70%  bucket 33: 20%  bucket 32: 20%  bucket 31: 80%  bucket 33: 30%  bucket 32: 30%  bucket 31: 90%  bucket 32: 40%  bucket 33: 40%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 50%  bucket 33: 50%  bucket 32: 60%  bucket 33: 60%  bucket 32: 70%  bucket 33: 70%  bucket 32: 80%  bucket 33: 80%  bucket 32: 90%  bucket 33: 90%  bucket 32: 100%  bucket 33: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 34:  bucket 34: 10%  Entering block accumulator loop for bucket 35:  bucket 34: 20%  bucket 34: 30%  bucket 35: 10%  bucket 34: 40%  bucket 34: 50%  bucket 35: 20%  bucket 34: 60%  bucket 35: 30%Getting block 36 of 60  bucket 34: 70%  Reserving size (126) for bucket 36  bucket 35: 40%  Calculating Z arrays for bucket 36  bucket 34: 80%  bucket 35: 50%  bucket 34: 90%  bucket 35: 60%  bucket 34: 100%  Entering block accumulator loop for bucket 36:  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 70%  bucket 36: 10%  bucket 35: 80%  bucket 36: 20%  bucket 35: 90%  bucket 36: 30%  bucket 35: 100%  bucket 36: 40%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 50%  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60Getting block 38 of 60  Reserving size (126) for bucket 38  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Calculating Z arrays for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 37:  Entering block accumulator loop for bucket 38:  Entering block accumulator loop for bucket 39:  bucket 37: 10%  bucket 38: 10%  bucket 39: 10%  bucket 37: 20%  bucket 38: 20%  bucket 39: 20%  bucket 37: 30%  bucket 39: 30%  bucket 38: 30%  bucket 37: 40%  bucket 38: 40%  bucket 39: 40%  bucket 37: 50%  bucket 38: 50%  bucket 39: 50%  bucket 37: 60%  bucket 38: 60%  bucket 39: 60%  bucket 37: 70%  bucket 38: 70%  bucket 39: 70%  bucket 37: 80%  bucket 38: 80%  bucket 39: 80%  bucket 37: 90%  bucket 39: 90%  bucket 38: 90%  bucket 37: 100%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block of length 59 for bucket 37  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%  bucket 40: 40%  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%  Sorting block time: 00:00:00  bucket 41: 60%Returning block of 42 for bucket 40  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42Getting block 43 of 60  Entering block accumulator loop for bucket 42:  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  bucket 42: 10%  bucket 42: 20%  Entering block accumulator loop for bucket 43:  bucket 42: 30%  bucket 43: 10%  bucket 42: 40%  bucket 43: 20%  bucket 42: 50%  bucket 43: 30%  bucket 42: 60%  bucket 43: 40%  bucket 42: 70%  bucket 43: 50%  bucket 42: 80%  bucket 43: 60%  bucket 42: 90%  bucket 43: 70%  bucket 42: 100%  Sorting block of length 119 for bucket 42  bucket 43: 80%  (Using difference cover)  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  Sorting block time: 00:00:00Returning block of 80 for bucket 45  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60Getting block 48 of 60  Reserving size (126) for bucket 47  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 48:  Entering block accumulator loop for bucket 47:  bucket 48: 10%  bucket 47: 10%  bucket 48: 20%  bucket 47: 20%  bucket 47: 30%  bucket 48: 30%  bucket 47: 40%  bucket 48: 40%  bucket 47: 50%  bucket 48: 50%  bucket 47: 60%  bucket 48: 60%  bucket 47: 70%  bucket 48: 70%  bucket 47: 80%  bucket 48: 80%  bucket 47: 90%  bucket 48: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%Getting block 51 of 60  Reserving size (126) for bucket 51  bucket 50: 40%  Calculating Z arrays for bucket 51  bucket 50: 50%  Entering block accumulator loop for bucket 51:  bucket 50: 60%  bucket 51: 10%  bucket 50: 70%  bucket 51: 20%  bucket 50: 80%  bucket 51: 30%  bucket 50: 90%  bucket 51: 40%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 50%  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 52:  bucket 52: 10%  Entering block accumulator loop for bucket 53:  bucket 52: 20%  bucket 52: 30%  bucket 53: 10%  bucket 52: 40%  bucket 52: 50%  bucket 53: 20%  bucket 52: 60%  bucket 53: 30%  bucket 52: 70%  bucket 53: 40%  bucket 52: 80%  bucket 53: 50%  bucket 52: 90%  bucket 53: 60%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 54:  bucket 54: 10%  Entering block accumulator loop for bucket 55:  bucket 54: 20%  bucket 55: 10%  bucket 54: 30%  bucket 55: 20%  bucket 54: 40%  bucket 55: 30%  bucket 54: 50%  bucket 55: 40%  bucket 54: 60%  bucket 55: 50%  bucket 54: 70%  bucket 55: 60%  bucket 54: 80%  bucket 55: 70%  bucket 54: 90%  bucket 55: 80%  bucket 54: 100%  bucket 55: 90%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  bucket 56: 70%  bucket 56: 80%  Entering block accumulator loop for bucket 57:  bucket 56: 90%  bucket 56: 100%  bucket 57: 10%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  bucket 58: 20%  Entering block accumulator loop for bucket 59:  bucket 58: 30%  bucket 59: 10%  bucket 58: 40%  bucket 59: 20%  bucket 58: 50%  bucket 59: 30%  bucket 58: 60%  bucket 59: 40%  bucket 59: 50%  bucket 58: 70%  bucket 59: 60%  bucket 58: 80%  bucket 59: 70%  bucket 58: 90%  bucket 59: 80%  bucket 58: 100%  bucket 59: 90%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:003 reads; of these:  3 (100.00%) were paired; of these:    3 (100.00%) aligned concordantly 0 times    0 (0.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    3 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    3 pairs aligned 0 times concordantly or discordantly; of these:      6 mates make up the pairs; of these:        6 (100.00%) aligned 0 times        0 (0.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times0.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #8)" name="7" time="32.69204378128052">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Entering block accumulator loop for bucket 1:Getting block 3 of 60  Reserving size (126) for bucket 2Getting block 4 of 60  Reserving size (126) for bucket 4Getting block 5 of 60  Calculating Z arrays for bucket 2  Reserving size (126) for bucket 5  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 2:Getting block 7 of 60  Calculating Z arrays for bucket 5  bucket 2: 10%Getting block 6 of 60  Reserving size (126) for bucket 6  Entering block accumulator loop for bucket 4:  Reserving size (126) for bucket 7  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 5:  bucket 1: 10%Getting block 8 of 60  Reserving size (126) for bucket 8  bucket 5: 10%  bucket 4: 10%  Entering block accumulator loop for bucket 6:  bucket 1: 20%  Calculating Z arrays for bucket 7  Calculating Z arrays for bucket 8  bucket 4: 20%  bucket 3: 10%  bucket 5: 20%  bucket 1: 30%  bucket 2: 20%  bucket 6: 10%  Entering block accumulator loop for bucket 8:  bucket 3: 20%  bucket 2: 30%  bucket 1: 40%  bucket 5: 30%  Entering block accumulator loop for bucket 7:  bucket 3: 30%  bucket 4: 30%  bucket 6: 20%  bucket 3: 40%  bucket 8: 10%  bucket 5: 40%  bucket 1: 50%  bucket 7: 10%  bucket 4: 40%  bucket 2: 40%  bucket 5: 50%  bucket 1: 60%  bucket 7: 20%  bucket 2: 50%  bucket 3: 50%  bucket 5: 60%  bucket 2: 60%  bucket 7: 30%  bucket 8: 20%  bucket 6: 30%  bucket 4: 50%  bucket 3: 60%  bucket 1: 70%  bucket 5: 70%  bucket 7: 40%  bucket 2: 70%  bucket 8: 30%  bucket 4: 60%  bucket 3: 70%  bucket 2: 80%  bucket 7: 50%  bucket 6: 40%  bucket 8: 40%  bucket 2: 90%  bucket 3: 80%  bucket 7: 60%  bucket 5: 80%  bucket 2: 100%  bucket 1: 80%  Sorting block of length 84 for bucket 2  bucket 7: 70%  (Using difference cover)  bucket 3: 90%  bucket 1: 90%  bucket 4: 70%  bucket 6: 50%  bucket 8: 50%  bucket 5: 90%  bucket 1: 100%  bucket 3: 100%  bucket 6: 60%  bucket 5: 100%  bucket 8: 60%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 4: 80%  bucket 7: 80%  Sorting block of length 63 for bucket 5  bucket 6: 70%  (Using difference cover)  bucket 8: 70%  bucket 7: 90%  bucket 6: 80%  bucket 4: 90%  Sorting block of length 106 for bucket 3  bucket 8: 80%  (Using difference cover)  bucket 7: 100%  bucket 4: 100%  bucket 6: 90%  bucket 8: 90%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block of length 68 for bucket 4  bucket 6: 100%  (Using difference cover)  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block of length 90 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 64 for bucket 5Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 12:  Entering block accumulator loop for bucket 11:  bucket 12: 10%  bucket 11: 10%  bucket 12: 20%  bucket 11: 20%  bucket 12: 30%  bucket 11: 30%  bucket 12: 40%  bucket 11: 40%  bucket 12: 50%  bucket 11: 50%  bucket 12: 60%  bucket 11: 60%  bucket 12: 70%  bucket 11: 70%  bucket 12: 80%  bucket 11: 80%  bucket 12: 90%  bucket 11: 90%  bucket 11: 100%  bucket 12: 100%  Sorting block of length 95 for bucket 11  Sorting block of length 82 for bucket 12  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 60  Entering block accumulator loop for bucket 13:  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 10%  bucket 13: 20%  Entering block accumulator loop for bucket 14:  bucket 13: 30%  bucket 14: 10%  bucket 13: 40%Getting block 15 of 60  Reserving size (126) for bucket 15  bucket 13: 50%  Calculating Z arrays for bucket 15  bucket 14: 20%  bucket 13: 60%  bucket 14: 30%  bucket 13: 70%  Entering block accumulator loop for bucket 15:  bucket 14: 40%  bucket 13: 80%  bucket 15: 10%  bucket 13: 90%  bucket 14: 50%  bucket 15: 20%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 60%  bucket 15: 30%  bucket 14: 70%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 14: 80%  bucket 15: 80%  bucket 14: 90%  bucket 15: 90%  bucket 15: 100%  bucket 14: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 16:  Calculating Z arrays for bucket 18  bucket 17: 10%  bucket 16: 10%  bucket 17: 20%  bucket 16: 20%  bucket 17: 30%  Entering block accumulator loop for bucket 18:  bucket 16: 30%  bucket 18: 10%  bucket 16: 40%  bucket 18: 20%  bucket 16: 50%  bucket 17: 40%  bucket 18: 30%  bucket 16: 60%  bucket 17: 50%  bucket 18: 40%  bucket 16: 70%  bucket 17: 60%  bucket 18: 50%  bucket 16: 80%  bucket 17: 70%  bucket 18: 60%  bucket 16: 90%  bucket 17: 80%  bucket 18: 70%  bucket 16: 100%  bucket 18: 80%  bucket 17: 90%  Sorting block of length 100 for bucket 16  (Using difference cover)  bucket 18: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 19:  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 19: 20%  bucket 20: 10%  bucket 19: 30%  bucket 20: 20%  bucket 19: 40%  bucket 20: 30%  bucket 19: 50%  bucket 20: 40%  bucket 19: 60%  bucket 20: 50%  bucket 19: 70%  bucket 20: 60%  bucket 19: 80%  bucket 20: 70%  bucket 19: 90%  bucket 20: 80%  bucket 19: 100%  Sorting block of length 107 for bucket 19  bucket 20: 90%  (Using difference cover)  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  Entering block accumulator loop for bucket 22:  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 24:  bucket 24: 10%  Entering block accumulator loop for bucket 25:  bucket 24: 20%  bucket 25: 10%  bucket 24: 30%  bucket 25: 20%  bucket 24: 40%  bucket 25: 30%  bucket 24: 50%  bucket 25: 40%  bucket 24: 60%  bucket 25: 50%  bucket 24: 70%  bucket 25: 60%  bucket 24: 80%  bucket 25: 70%  bucket 24: 90%  bucket 25: 80%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  Sorting block time: 00:00:00Returning block of 108 for bucket 26  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%Getting block 29 of 60  bucket 28: 50%  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 60%  bucket 28: 70%  Entering block accumulator loop for bucket 29:  bucket 28: 80%  bucket 29: 10%  bucket 28: 90%  bucket 29: 20%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 30:  Entering block accumulator loop for bucket 31:  bucket 30: 10%  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 30: 20%  bucket 31: 50%  bucket 30: 30%  bucket 31: 60%  bucket 30: 40%  bucket 31: 70%  bucket 30: 50%  bucket 31: 80%  bucket 30: 60%  bucket 31: 90%  bucket 30: 70%  bucket 31: 100%  Sorting block of length 110 for bucket 31  bucket 30: 80%  bucket 30: 90%  (Using difference cover)  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%Getting block 33 of 60  bucket 32: 40%  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  bucket 32: 50%  bucket 32: 60%  Entering block accumulator loop for bucket 33:  bucket 32: 70%  bucket 32: 80%  bucket 33: 10%  bucket 32: 90%  bucket 32: 100%  bucket 33: 20%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 33: 30%  bucket 33: 40%  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  Sorting block time: 00:00:00Returning block of 126 for bucket 32  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  bucket 34: 80%  bucket 34: 90%  Entering block accumulator loop for bucket 35:  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  Sorting block time: 00:00:00  (Using difference cover)Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%  bucket 36: 30%  bucket 36: 40%  bucket 36: 50%Getting block 37 of 60  bucket 36: 60%Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  bucket 36: 70%  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 38:  bucket 36: 80%  bucket 38: 10%  bucket 36: 90%  bucket 38: 20%  Entering block accumulator loop for bucket 37:  bucket 36: 100%  bucket 38: 30%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 38: 40%  bucket 37: 10%  bucket 38: 50%  bucket 38: 60%  bucket 37: 20%  bucket 38: 70%  bucket 38: 80%  bucket 37: 30%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 37: 40%  bucket 37: 50%  bucket 37: 60%  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00  bucket 37: 100%Returning block of 121 for bucket 36  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:  bucket 39: 10%  bucket 39: 20%  bucket 39: 30%  bucket 39: 40%  bucket 39: 50%  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40Getting block 41 of 60  Entering block accumulator loop for bucket 40:  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41Getting block 42 of 60  Entering block accumulator loop for bucket 41:  bucket 40: 10%  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  bucket 41: 10%  bucket 40: 20%  bucket 41: 20%  bucket 40: 30%  Entering block accumulator loop for bucket 42:  bucket 41: 30%  bucket 42: 10%  bucket 41: 40%  bucket 40: 40%  bucket 42: 20%  bucket 41: 50%  bucket 40: 50%  bucket 41: 60%  bucket 42: 30%  bucket 40: 60%  bucket 42: 40%  bucket 40: 70%  bucket 41: 70%  bucket 42: 50%  bucket 40: 80%  bucket 42: 60%  bucket 41: 80%  bucket 42: 70%  bucket 40: 90%  bucket 41: 90%  bucket 42: 80%  bucket 40: 100%  bucket 41: 100%  bucket 42: 90%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Entering block accumulator loop for bucket 44:  Calculating Z arrays for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  bucket 44: 10%  Entering block accumulator loop for bucket 45:  bucket 44: 20%  Entering block accumulator loop for bucket 46:  bucket 44: 30%  bucket 45: 10%  bucket 46: 10%  bucket 44: 40%  bucket 46: 20%  bucket 44: 50%  bucket 45: 20%  bucket 46: 30%  bucket 44: 60%  bucket 46: 40%  bucket 45: 30%  bucket 44: 70%  bucket 46: 50%  bucket 44: 80%  bucket 45: 40%  bucket 46: 60%  bucket 44: 90%  bucket 44: 100%  bucket 45: 50%  bucket 46: 70%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 60%  bucket 46: 80%  bucket 45: 70%  bucket 46: 90%  bucket 46: 100%  bucket 45: 80%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Sorting block time: 00:00:00Returning block of 84 for bucket 47  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Sorting block time: 00:00:00  Entering block accumulator loop for bucket 50:Returning block of 75 for bucket 49  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Entering block accumulator loop for bucket 51:  Calculating Z arrays for bucket 52Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54Getting block 53 of 60  bucket 51: 10%  Entering block accumulator loop for bucket 52:  Entering block accumulator loop for bucket 54:  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  bucket 51: 20%  bucket 52: 10%  bucket 54: 10%  bucket 51: 30%  Entering block accumulator loop for bucket 53:  bucket 52: 20%  bucket 54: 20%  bucket 51: 40%  bucket 52: 30%  bucket 54: 30%  bucket 51: 50%  bucket 52: 40%  bucket 53: 10%  bucket 54: 40%  bucket 52: 50%  bucket 53: 20%  bucket 54: 50%  bucket 52: 60%  bucket 53: 30%  bucket 54: 60%  bucket 53: 40%  bucket 52: 70%  bucket 53: 50%  bucket 54: 70%  bucket 52: 80%  bucket 53: 60%  bucket 51: 60%  bucket 52: 90%  bucket 54: 80%  bucket 53: 70%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 51: 70%  bucket 53: 80%  bucket 53: 90%  bucket 51: 80%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 55:  bucket 55: 10%  Entering block accumulator loop for bucket 56:  bucket 55: 20%  bucket 55: 30%  bucket 56: 10%  bucket 55: 40%  bucket 56: 20%  bucket 55: 50%  bucket 56: 30%  bucket 55: 60%  bucket 56: 40%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 56: 50%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  Entering block accumulator loop for bucket 58:  bucket 57: 80%  bucket 57: 90%  bucket 58: 10%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 20%  bucket 58: 30%  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 59:  bucket 59: 10%  bucket 59: 20%  bucket 59: 30%  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:01500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times85.80% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #9)" name="8" time="33.98604989051819">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2Getting block 3 of 60  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 1:Getting block 4 of 60  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 3:  bucket 1: 10%Getting block 5 of 60  bucket 3: 10%  bucket 2: 10%  bucket 3: 20%  Reserving size (126) for bucket 5Getting block 6 of 60  bucket 2: 20%  Calculating Z arrays for bucket 5  Reserving size (126) for bucket 4  bucket 1: 20%Getting block 7 of 60  Reserving size (126) for bucket 7  Calculating Z arrays for bucket 4  bucket 1: 30%  Reserving size (126) for bucket 6  bucket 1: 40%  Entering block accumulator loop for bucket 5:  bucket 1: 50%  bucket 3: 30%  bucket 2: 30%  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 4:  bucket 5: 10%  bucket 1: 60%Getting block 8 of 60  Reserving size (126) for bucket 8  bucket 1: 70%  Calculating Z arrays for bucket 6  bucket 5: 20%  bucket 3: 40%  bucket 2: 40%  bucket 5: 30%  bucket 4: 10%  Entering block accumulator loop for bucket 7:  bucket 4: 20%  Entering block accumulator loop for bucket 6:  bucket 1: 80%  bucket 5: 40%  bucket 2: 50%  Calculating Z arrays for bucket 8  bucket 4: 30%  bucket 5: 50%  bucket 7: 10%  bucket 1: 90%  bucket 6: 10%  bucket 7: 20%  Entering block accumulator loop for bucket 8:  bucket 1: 100%  bucket 6: 20%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 7: 30%  bucket 5: 60%  bucket 2: 60%  bucket 4: 40%  bucket 6: 30%  bucket 3: 50%  bucket 7: 40%  bucket 8: 10%  bucket 2: 70%  bucket 3: 60%  bucket 6: 40%  bucket 4: 50%  bucket 5: 70%  bucket 7: 50%  bucket 8: 20%  bucket 4: 60%  bucket 5: 80%  bucket 2: 80%  bucket 3: 70%  bucket 4: 70%  bucket 2: 90%  bucket 6: 50%  bucket 3: 80%  bucket 4: 80%  bucket 2: 100%  bucket 5: 90%  bucket 3: 90%  bucket 4: 90%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 7: 60%  bucket 8: 30%  bucket 4: 100%  bucket 5: 100%  bucket 8: 40%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 7: 70%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 6: 60%  Sorting block time: 00:00:00  bucket 3: 100%Returning block of 43 for bucket 1  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 7: 80%  bucket 6: 70%  bucket 7: 90%  bucket 6: 80%  bucket 7: 100%  Sorting block of length 75 for bucket 7  bucket 6: 90%  bucket 6: 100%  (Using difference cover)  bucket 8: 50%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 95 for bucket 8Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  Entering block accumulator loop for bucket 11:  bucket 10: 30%  Sorting block time: 00:00:00  bucket 11: 10%  bucket 10: 40%Returning block of 125 for bucket 9  bucket 10: 50%  bucket 11: 20%  bucket 10: 60%  bucket 11: 30%  bucket 10: 70%  bucket 11: 40%  bucket 10: 80%  bucket 11: 50%  bucket 10: 90%  bucket 11: 60%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%Getting block 13 of 60  bucket 12: 30%  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%Getting block 14 of 60  Reserving size (126) for bucket 14  bucket 12: 80%  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  bucket 12: 90%  Entering block accumulator loop for bucket 14:  bucket 12: 100%  bucket 13: 10%  bucket 14: 10%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 13: 20%  bucket 14: 20%  bucket 13: 30%  bucket 14: 30%  bucket 13: 40%  bucket 14: 40%  bucket 13: 50%  bucket 14: 50%  bucket 13: 60%  bucket 14: 60%  bucket 13: 70%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  Sorting block time: 00:00:00  bucket 14: 100%Returning block of 83 for bucket 12  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  bucket 15: 10%  Entering block accumulator loop for bucket 16:  bucket 15: 20%  bucket 16: 10%  bucket 15: 30%  bucket 16: 20%  bucket 15: 40%  bucket 16: 30%  bucket 15: 50%  bucket 16: 40%  bucket 15: 60%  bucket 16: 50%  bucket 15: 70%  bucket 16: 60%  bucket 15: 80%  bucket 16: 70%  bucket 15: 90%  bucket 15: 100%  bucket 16: 80%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 17 of 60  Reserving size (126) for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 17  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  bucket 17: 10%  Entering block accumulator loop for bucket 18:  bucket 17: 20%  bucket 17: 30%  bucket 18: 10%  bucket 17: 40%  bucket 18: 20%  bucket 17: 50%  bucket 17: 60%  bucket 18: 30%  bucket 17: 70%  bucket 18: 40%  bucket 17: 80%  bucket 18: 50%  bucket 17: 90%  bucket 18: 60%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  Entering block accumulator loop for bucket 20:  bucket 19: 50%  bucket 20: 10%  bucket 19: 60%  bucket 20: 20%  bucket 19: 70%  bucket 20: 30%  bucket 19: 80%  bucket 20: 40%  bucket 19: 90%  bucket 20: 50%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  Entering block accumulator loop for bucket 22:  bucket 21: 10%  bucket 22: 10%  bucket 21: 20%  bucket 21: 30%  bucket 22: 20%  bucket 21: 40%  bucket 22: 30%  bucket 21: 50%  bucket 21: 60%  bucket 22: 40%  bucket 21: 70%  bucket 22: 50%  bucket 21: 80%  bucket 22: 60%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  bucket 22: 70%  (Using difference cover)  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 23:  bucket 23: 10%  Entering block accumulator loop for bucket 24:  bucket 23: 20%  bucket 24: 10%  bucket 23: 30%  bucket 24: 20%  bucket 23: 40%  bucket 24: 30%  bucket 23: 50%  bucket 24: 40%  bucket 23: 60%  bucket 24: 50%  bucket 23: 70%  bucket 24: 60%  bucket 23: 80%  bucket 24: 70%  bucket 23: 90%  bucket 24: 80%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  Sorting block time: 00:00:00Returning block of 67 for bucket 25  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%Getting block 28 of 60  Sorting block of length 119 for bucket 27  (Using difference cover)  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  Sorting block time: 00:00:00Returning block of 120 for bucket 27  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  bucket 29: 30%  bucket 29: 40%  Entering block accumulator loop for bucket 30:  bucket 29: 50%  bucket 30: 10%  bucket 29: 60%  bucket 30: 20%  bucket 29: 70%  bucket 30: 30%  bucket 29: 80%  bucket 30: 40%  bucket 29: 90%  bucket 30: 50%  bucket 29: 100%  Sorting block of length 51 for bucket 29  bucket 30: 60%  (Using difference cover)  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31Getting block 32 of 60  Entering block accumulator loop for bucket 31:  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  bucket 31: 10%  Entering block accumulator loop for bucket 32:  Calculating Z arrays for bucket 33  bucket 31: 20%  bucket 32: 10%  bucket 31: 30%  Entering block accumulator loop for bucket 33:  bucket 31: 40%  bucket 32: 20%  bucket 33: 10%  bucket 31: 50%  bucket 32: 30%  bucket 33: 20%  bucket 31: 60%  bucket 32: 40%  bucket 33: 30%  bucket 31: 70%  bucket 32: 50%  bucket 33: 40%  bucket 31: 80%  bucket 32: 60%  bucket 33: 50%  bucket 31: 90%  bucket 32: 70%  bucket 33: 60%  bucket 31: 100%  bucket 32: 80%  bucket 33: 70%  Sorting block of length 110 for bucket 31  bucket 32: 90%  bucket 33: 80%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35Getting block 36 of 60  Entering block accumulator loop for bucket 35:  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  bucket 35: 10%  Entering block accumulator loop for bucket 36:  bucket 35: 20%  bucket 36: 10%  bucket 35: 30%  bucket 36: 20%  bucket 35: 40%  bucket 36: 30%  bucket 36: 40%  bucket 35: 50%  bucket 36: 50%  bucket 35: 60%  bucket 36: 60%  bucket 36: 70%  bucket 35: 70%  bucket 36: 80%  bucket 35: 80%  bucket 36: 90%  bucket 35: 90%  bucket 36: 100%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 37: 20%  bucket 37: 30%  bucket 37: 40%  bucket 37: 50%Getting block 38 of 60  Reserving size (126) for bucket 38  bucket 37: 60%  Calculating Z arrays for bucket 38  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  Entering block accumulator loop for bucket 38:  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 40:  Entering block accumulator loop for bucket 39:  bucket 40: 10%  bucket 39: 10%  bucket 40: 20%Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  bucket 39: 20%  bucket 40: 30%  bucket 39: 30%  bucket 40: 40%  Entering block accumulator loop for bucket 41:  bucket 39: 40%  bucket 40: 50%  bucket 39: 50%  bucket 41: 10%  bucket 40: 60%  bucket 39: 60%  bucket 40: 70%  bucket 41: 20%  bucket 39: 70%  bucket 40: 80%  bucket 39: 80%  bucket 41: 30%  bucket 40: 90%  bucket 39: 90%  bucket 40: 100%  bucket 41: 40%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 39: 100%  bucket 41: 50%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 42: 10%  bucket 42: 20%  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%Getting block 43 of 60  bucket 42: 80%  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 43: 70%  Sorting block time: 00:00:00Returning block of 120 for bucket 42  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  Sorting block time: 00:00:00Returning block of 67 for bucket 44  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Entering block accumulator loop for bucket 46:  Calculating Z arrays for bucket 47  bucket 46: 10%  Entering block accumulator loop for bucket 47:  bucket 46: 20%  bucket 47: 10%  bucket 46: 30%  bucket 47: 20%  bucket 46: 40%  bucket 47: 30%  bucket 46: 50%  bucket 47: 40%  bucket 46: 60%  bucket 46: 70%  bucket 47: 50%  bucket 46: 80%  bucket 47: 60%  bucket 46: 90%  bucket 47: 70%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 48 of 60  Reserving size (126) for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 48  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 48:  Entering block accumulator loop for bucket 49:  bucket 48: 10%  bucket 49: 10%  bucket 49: 20%  bucket 48: 20%  bucket 49: 30%  bucket 48: 30%  bucket 49: 40%  bucket 48: 40%  bucket 49: 50%  bucket 48: 50%  bucket 49: 60%  bucket 49: 70%  bucket 48: 60%  bucket 49: 80%  bucket 48: 70%  bucket 49: 90%  bucket 48: 80%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 50:  Entering block accumulator loop for bucket 51:  bucket 50: 10%  bucket 50: 20%  bucket 51: 10%  bucket 50: 30%  bucket 51: 20%  bucket 50: 40%  bucket 51: 30%  bucket 50: 50%  bucket 51: 40%  bucket 50: 60%  bucket 51: 50%  bucket 50: 70%  bucket 50: 80%  bucket 51: 60%  bucket 50: 90%  bucket 51: 70%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:  bucket 52: 10%  bucket 52: 20%  bucket 52: 30%  bucket 52: 40%Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  bucket 52: 50%  Entering block accumulator loop for bucket 53:  bucket 52: 60%  bucket 53: 10%  bucket 52: 70%  bucket 53: 20%  bucket 53: 30%  bucket 52: 80%  bucket 53: 40%  bucket 52: 90%  bucket 53: 50%  bucket 52: 100%  bucket 53: 60%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%Getting block 55 of 60  bucket 54: 80%  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  Sorting block time: 00:00:00  bucket 55: 100%Returning block of 65 for bucket 54  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  Sorting block time: 00:00:00Returning block of 56 for bucket 56  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%  bucket 58: 40%Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  bucket 58: 50%  bucket 58: 60%  Entering block accumulator loop for bucket 59:  bucket 58: 70%  bucket 59: 10%  bucket 59: 20%  bucket 58: 80%  bucket 59: 30%  bucket 58: 90%  bucket 59: 40%  bucket 58: 100%  Sorting block of length 113 for bucket 58  bucket 59: 50%  (Using difference cover)  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times85.80% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #10)" name="9" time="33.178006172180176">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 3 of 60  Reserving size (126) for bucket 3Getting block 2 of 60  Entering block accumulator loop for bucket 1:Getting block 4 of 60  bucket 1: 10%  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 3  Reserving size (126) for bucket 4  Calculating Z arrays for bucket 2  bucket 1: 20%  Calculating Z arrays for bucket 4Getting block 5 of 60  Reserving size (126) for bucket 5  Entering block accumulator loop for bucket 4:  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 2:Getting block 6 of 60  Reserving size (126) for bucket 6  bucket 1: 30%  bucket 2: 10%  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 3:Getting block 7 of 60  Reserving size (126) for bucket 7  bucket 3: 10%  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  bucket 3: 20%  Calculating Z arrays for bucket 7  bucket 4: 10%  bucket 2: 20%  bucket 1: 40%  bucket 6: 10%  bucket 5: 10%  bucket 4: 20%  bucket 6: 20%  bucket 1: 50%  bucket 2: 30%  bucket 3: 30%  bucket 5: 20%  bucket 2: 40%  bucket 1: 60%  bucket 3: 40%  bucket 2: 50%  bucket 6: 30%  bucket 4: 30%  bucket 5: 30%  bucket 3: 50%  bucket 2: 60%  bucket 4: 40%  bucket 6: 40%  Entering block accumulator loop for bucket 7:  bucket 3: 60%  bucket 1: 70%  bucket 2: 70%  bucket 4: 50%  bucket 3: 70%  bucket 6: 50%  bucket 1: 80%  bucket 5: 40%  bucket 6: 60%  bucket 2: 80%Getting block 8 of 60  Reserving size (126) for bucket 8  bucket 7: 10%  Calculating Z arrays for bucket 8  bucket 3: 80%  bucket 7: 20%  bucket 1: 90%  bucket 2: 90%  bucket 5: 50%  bucket 4: 60%  bucket 6: 70%  bucket 3: 90%  bucket 5: 60%  bucket 7: 30%  bucket 2: 100%  bucket 3: 100%  bucket 4: 70%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 7: 40%  bucket 5: 70%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 4: 80%  bucket 6: 80%  bucket 1: 100%  Entering block accumulator loop for bucket 8:  Sorting block of length 42 for bucket 1  bucket 7: 50%  bucket 6: 90%  bucket 8: 10%  bucket 5: 80%  bucket 4: 90%  bucket 5: 90%  bucket 8: 20%  (Using difference cover)  bucket 6: 100%  bucket 7: 60%  bucket 5: 100%  bucket 4: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  Sorting block of length 68 for bucket 4  bucket 7: 70%  (Using difference cover)  bucket 8: 30%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 7: 80%  bucket 8: 40%  bucket 7: 90%  bucket 8: 50%  bucket 7: 100%  bucket 8: 60%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 69 for bucket 4Getting block 9 of 60  Reserving size (126) for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 10:  bucket 10: 10%  Entering block accumulator loop for bucket 9:  bucket 10: 20%  bucket 9: 10%  bucket 10: 30%  bucket 9: 20%  bucket 10: 40%  bucket 9: 30%  bucket 10: 50%  bucket 9: 40%  bucket 10: 60%  bucket 9: 50%  bucket 10: 70%  bucket 9: 60%  bucket 10: 80%  bucket 9: 70%  bucket 10: 90%  bucket 9: 80%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 125 for bucket 9Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 60  Entering block accumulator loop for bucket 11:  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  Entering block accumulator loop for bucket 12:  bucket 11: 40%  bucket 12: 10%  bucket 11: 50%  bucket 12: 20%  bucket 11: 60%  bucket 12: 30%  bucket 11: 70%  bucket 12: 40%  bucket 11: 80%  bucket 12: 50%  bucket 11: 90%  bucket 12: 60%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 60  Entering block accumulator loop for bucket 13:  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  Entering block accumulator loop for bucket 14:  bucket 13: 50%  bucket 13: 60%  bucket 14: 10%  bucket 13: 70%  bucket 14: 20%  bucket 13: 80%  bucket 14: 30%  bucket 13: 90%  bucket 14: 40%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  bucket 15: 10%  bucket 15: 20%  Entering block accumulator loop for bucket 16:  bucket 15: 30%  bucket 16: 10%  bucket 15: 40%  bucket 16: 20%  bucket 15: 50%  bucket 16: 30%  bucket 15: 60%  bucket 16: 40%  bucket 15: 70%  bucket 16: 50%  bucket 15: 80%  bucket 16: 60%  bucket 15: 90%  bucket 16: 70%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Entering block accumulator loop for bucket 17:  Calculating Z arrays for bucket 18  bucket 17: 10%  Entering block accumulator loop for bucket 18:  bucket 17: 20%  bucket 18: 10%  bucket 17: 30%  bucket 18: 20%  bucket 17: 40%  bucket 18: 30%  bucket 17: 50%  bucket 18: 40%Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  bucket 17: 60%  bucket 18: 50%  Entering block accumulator loop for bucket 19:  bucket 18: 60%  bucket 17: 70%  bucket 19: 10%  bucket 17: 80%  bucket 18: 70%  bucket 19: 20%  bucket 17: 90%  bucket 18: 80%  bucket 19: 30%  bucket 18: 90%  bucket 17: 100%  bucket 19: 40%  bucket 18: 100%  Sorting block of length 39 for bucket 17  Sorting block of length 122 for bucket 18  (Using difference cover)  (Using difference cover)  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  Entering block accumulator loop for bucket 22:  bucket 21: 10%  bucket 22: 10%  bucket 21: 20%  bucket 22: 20%  bucket 21: 30%  bucket 22: 30%  bucket 21: 40%  bucket 22: 40%  bucket 21: 50%  bucket 22: 50%  bucket 21: 60%  bucket 22: 60%  bucket 21: 70%  bucket 22: 70%  bucket 21: 80%  bucket 22: 80%  bucket 21: 90%  bucket 22: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 23 of 60Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 24:  Entering block accumulator loop for bucket 23:  bucket 24: 10%  bucket 24: 20%  bucket 23: 10%  bucket 24: 30%  bucket 23: 20%  bucket 24: 40%  bucket 24: 50%  bucket 23: 30%  bucket 24: 60%  bucket 23: 40%  bucket 24: 70%  bucket 23: 50%  bucket 24: 80%  bucket 23: 60%  bucket 24: 90%  bucket 23: 70%  bucket 24: 100%  bucket 23: 80%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  Entering block accumulator loop for bucket 26:  bucket 25: 70%  bucket 26: 10%  bucket 25: 80%  bucket 26: 20%  bucket 25: 90%  bucket 26: 30%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 27  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 27:  Entering block accumulator loop for bucket 28:  bucket 27: 10%  bucket 28: 10%  bucket 27: 20%  bucket 28: 20%  bucket 27: 30%  bucket 28: 30%  bucket 28: 40%  bucket 27: 40%  bucket 28: 50%  bucket 27: 50%  bucket 28: 60%  bucket 27: 60%  bucket 28: 70%  bucket 27: 70%  bucket 28: 80%  bucket 27: 80%  bucket 28: 90%  bucket 27: 90%  bucket 28: 100%  bucket 27: 100%  Sorting block of length 106 for bucket 28  Sorting block of length 119 for bucket 27  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Entering block accumulator loop for bucket 29:  Calculating Z arrays for bucket 30  bucket 29: 10%  Entering block accumulator loop for bucket 30:  bucket 29: 20%  bucket 30: 10%  bucket 30: 20%  bucket 29: 30%  bucket 30: 30%  bucket 29: 40%  bucket 30: 40%  bucket 29: 50%  bucket 30: 50%  bucket 30: 60%  bucket 29: 60%  bucket 30: 70%  bucket 30: 80%  bucket 29: 70%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Entering block accumulator loop for bucket 31:  Calculating Z arrays for bucket 32Getting block 33 of 60  bucket 31: 10%  Entering block accumulator loop for bucket 32:  Reserving size (126) for bucket 33  bucket 31: 20%  Calculating Z arrays for bucket 33  bucket 32: 10%  bucket 31: 30%  bucket 31: 40%  bucket 32: 20%  Entering block accumulator loop for bucket 33:  bucket 31: 50%  bucket 32: 30%  bucket 31: 60%  bucket 33: 10%  bucket 32: 40%  bucket 31: 70%  bucket 33: 20%  bucket 32: 50%  bucket 31: 80%  bucket 33: 30%  bucket 32: 60%  bucket 31: 90%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 33: 40%  bucket 32: 100%  bucket 31: 100%  bucket 33: 50%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 33: 60%  Sorting block of length 125 for bucket 32  bucket 33: 70%  (Using difference cover)  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%Getting block 36 of 60  Reserving size (126) for bucket 36  bucket 35: 70%  Calculating Z arrays for bucket 36  bucket 35: 80%  bucket 35: 90%  Entering block accumulator loop for bucket 36:  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 10%  bucket 36: 20%  bucket 36: 30%  bucket 36: 40%  bucket 36: 50%  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 37: 20%  bucket 37: 30%  bucket 37: 40%  bucket 37: 50%Getting block 38 of 60  Reserving size (126) for bucket 38  bucket 37: 60%  Calculating Z arrays for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  bucket 37: 70%  Entering block accumulator loop for bucket 38:  bucket 37: 80%  bucket 37: 90%  Entering block accumulator loop for bucket 39:  bucket 38: 10%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 39: 10%  bucket 38: 20%  bucket 38: 30%  bucket 39: 20%  bucket 38: 40%  bucket 39: 30%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  bucket 39: 40%  Sorting block time: 00:00:00  Sorting block of length 117 for bucket 38  (Using difference cover)Returning block of 60 for bucket 37  bucket 39: 50%  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:Getting block 41 of 60  Reserving size (126) for bucket 41  bucket 40: 10%  Calculating Z arrays for bucket 41  bucket 40: 20%  Entering block accumulator loop for bucket 41:  bucket 40: 30%  bucket 41: 10%  bucket 40: 40%  bucket 41: 20%  bucket 40: 50%  bucket 41: 30%  bucket 40: 60%  bucket 41: 40%  bucket 41: 50%  bucket 40: 70%  bucket 41: 60%  bucket 40: 80%  bucket 41: 70%  bucket 41: 80%  bucket 40: 90%  bucket 41: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 42:  bucket 42: 10%  bucket 42: 20%  Entering block accumulator loop for bucket 43:  bucket 42: 30%  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 42: 40%  bucket 43: 40%  bucket 42: 50%  bucket 43: 50%  bucket 42: 60%  bucket 43: 60%  bucket 42: 70%  bucket 43: 70%  bucket 42: 80%  bucket 43: 80%  bucket 43: 90%  bucket 42: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 44:  bucket 44: 10%  Entering block accumulator loop for bucket 45:  bucket 44: 20%  bucket 45: 10%  bucket 44: 30%  bucket 45: 20%Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  bucket 44: 40%  bucket 45: 30%  bucket 44: 50%  Entering block accumulator loop for bucket 46:  bucket 45: 40%  bucket 44: 60%  bucket 46: 10%  bucket 45: 50%  bucket 46: 20%  bucket 44: 70%  bucket 46: 30%  bucket 45: 60%  bucket 44: 80%  bucket 46: 40%  bucket 44: 90%  bucket 45: 70%  bucket 46: 50%  bucket 44: 100%  bucket 46: 60%  bucket 45: 80%  Sorting block of length 66 for bucket 44  bucket 46: 70%  bucket 45: 90%  bucket 46: 80%  bucket 46: 90%  bucket 45: 100%  bucket 46: 100%  (Using difference cover)  Sorting block of length 79 for bucket 45  Sorting block of length 69 for bucket 46  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 47:  bucket 47: 10%  Entering block accumulator loop for bucket 48:  bucket 47: 20%  bucket 48: 10%  bucket 47: 30%  bucket 48: 20%  bucket 47: 40%  bucket 48: 30%  bucket 47: 50%  bucket 48: 40%  bucket 47: 60%  bucket 48: 50%  bucket 47: 70%  bucket 48: 60%  bucket 47: 80%  bucket 48: 70%  bucket 47: 90%  bucket 48: 80%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  bucket 49: 20%  bucket 49: 30%Getting block 51 of 60  Reserving size (126) for bucket 51  Entering block accumulator loop for bucket 50:  bucket 49: 40%  Calculating Z arrays for bucket 51  bucket 50: 10%  bucket 49: 50%  Entering block accumulator loop for bucket 51:  bucket 50: 20%  bucket 49: 60%  bucket 51: 10%  bucket 50: 30%  bucket 49: 70%  bucket 50: 40%  bucket 51: 20%  bucket 50: 50%  bucket 51: 30%  bucket 49: 80%  bucket 51: 40%  bucket 50: 60%  bucket 49: 90%  bucket 51: 50%  bucket 50: 70%  bucket 51: 60%  bucket 50: 80%  bucket 51: 70%  bucket 49: 100%  bucket 50: 90%  Sorting block of length 74 for bucket 49  bucket 51: 80%  (Using difference cover)  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Entering block accumulator loop for bucket 52:  Calculating Z arrays for bucket 53  bucket 52: 10%  Entering block accumulator loop for bucket 53:  bucket 52: 20%  bucket 53: 10%  bucket 52: 30%  bucket 53: 20%  bucket 52: 40%  bucket 53: 30%  bucket 52: 50%  bucket 53: 40%  bucket 52: 60%  bucket 53: 50%  bucket 52: 70%  bucket 53: 60%  bucket 53: 70%  bucket 52: 80%  bucket 53: 80%  bucket 53: 90%  bucket 52: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  Sorting block time: 00:00:00  (Using difference cover)Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Entering block accumulator loop for bucket 57:  Calculating Z arrays for bucket 58  bucket 57: 10%  Entering block accumulator loop for bucket 58:Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  bucket 58: 10%  bucket 57: 20%  bucket 58: 20%  Entering block accumulator loop for bucket 59:  bucket 57: 30%  bucket 58: 30%  bucket 57: 40%  bucket 59: 10%  bucket 58: 40%  bucket 57: 50%  bucket 59: 20%  bucket 58: 50%  bucket 57: 60%  bucket 59: 30%  bucket 57: 70%  bucket 58: 60%  bucket 57: 80%  bucket 59: 40%  bucket 58: 70%  bucket 57: 90%  bucket 59: 50%  bucket 57: 100%  bucket 58: 80%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 59: 60%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="ivar_removereads (Test #1)" name="0" time="42.816511154174805">
        
            
            <system-out><![CDATA[
            Found 67 primers in BED filePrimer pair for 400_1_out_R not found in BED file.Primer pair for 400_34_out_L* not found in BED file.Primer pair for 400_35_out_L not found in BED file.400_18_out_L**400_23_out_R400_32_out_LRemoving reads primed with any of:400_18_out_L**400_18_out_R**400_23_out_L400_23_out_R400_32_out_L400_32_out_RFound 67 primers in BED fileWriting to removed_reads.bamNumber of references: 1Reference Name: PRVReference Length: 10807Using Region: PRVSorted By CoordinateResults:1629 reads were removed.
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #1)" name="0" time="52.59600234031677">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #2)" name="1" time="28.564152002334595">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #3)" name="2" time="31.291028261184692">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #4)" name="3" time="31.25069236755371">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #5)" name="4" time="23.422362804412842">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "input": {   "id": "e6fa2080d3342304",   "src": "hda"  } }, "job": {  "command_line": "poretools tabular --type all \u0027/galaxy/server/database/objects/6/6/e/dataset_66e85699-c71a-44a9-8c26-5e6aa3a67e7e.dat\u0027 \u003e \u0027/galaxy/server/database/objects/8/c/2/dataset_8c228ba4-6ec3-48c8-aba1-66514f78843d.dat\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-07-16T13:14:02.172020",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-r62tv",  "galaxy_version": "23.1",  "history_id": "0a3223200d5c2319",  "id": "16173f98373d66e0",  "inputs": {   "input": {    "id": "e6fa2080d3342304",    "src": "hda",    "uuid": "66e85699-c71a-44a9-8c26-5e6aa3a67e7e"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "97fbf29191b2f837",    "src": "hda",    "uuid": "8c228ba4-6ec3-48c8-aba1-66514f78843d"   }  },  "params": {   "__input_ext": "\"fast5.tar\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "type": "\"all\""  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2024-07-16T13:14:08.712184",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0, exit_code: None, stderr: ." ], "status": "failure", "test_index": 4, "time_seconds": 23.422362804412842, "tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_idxstats (Test #1)" name="0" time="31.58012342453003">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_idxstats (Test #2)" name="1" time="29.290120840072632">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #1)" name="0" time="70.51228737831116">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #2)" name="1" time="28.193806409835815">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #11)" name="10" time="26.27039861679077">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #12)" name="11" time="27.481322526931763">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #13)" name="12" time="28.592291116714478">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #14)" name="13" time="27.057425260543823">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #15)" name="14" time="28.415210723876953">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #16)" name="15" time="28.50260639190674">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #17)" name="16" time="28.29194951057434">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #18)" name="17" time="27.777124643325806">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #19)" name="18" time="28.92571258544922">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #3)" name="2" time="27.263816118240356">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #4)" name="3" time="27.35079050064087">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #5)" name="4" time="35.12719368934631">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #6)" name="5" time="29.14701509475708">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #7)" name="6" time="26.99587869644165">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #8)" name="7" time="28.179283380508423">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #9)" name="8" time="27.179726600646973">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="split_file_to_collection (Test #10)" name="9" time="27.589695930480957">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #1)" name="0" time="164.73825597763062">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-07-16 13:15:36)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only short reads, Unicycler will essentially function as a SPAdes-optimiser. It will try many k-mer sizes, choose the best based on contig lengthand graph connectivity, and scaffold the graph using SPAdes repeat resolution.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2Unicycler version: v0.4.8Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/93/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program         Version             Status     Path                                     spades.py       3.14.1              good       /usr/local/bin/spades.py                 racon                               not used                                            makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb               tblastn         2.12.0+             good       /usr/local/bin/tblastn                   bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build             bowtie2         2.4.4               good       /usr/local/bin/bowtie2                   samtools        1.14                good       /usr/local/bin/samtools                  java            11.0.9.1-internal   good       /usr/local/bin/java                      pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar  bcftools                            not used                                          Choosing k-mer range for assembly (2024-07-16 13:15:38)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2024-07-16 13:15:38)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 8 --only-assembler -1 /galaxy/server/database/jobs_directory/000/93/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/93/working/fq2.fastqSystem information:  SPAdes version: 3.14.1  Python version: 3.9.9  OS: Linux-6.1.85+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Standard mode  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/93/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/93/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/tmp  Threads: 8  Memory limit (in Gb): 78======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/spades.log/galaxy/server/database/jobs_directory/000/93/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/93/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K27/configs/config.infoWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K27/configs/config.info  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 78 Gb  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/dataset.info) with K=27  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion  0:00:00.008     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)  0:00:00.008     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads  0:00:00.117    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written  0:00:00.117    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads  0:00:00.120    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written  0:00:00.120    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads  0:00:00.123    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written  0:00:00.176    27M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction  0:00:00.195    27M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.195    27M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.195    27M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting  0:00:00.196    27M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 8 threads. This might take a while.  0:00:00.197    27M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.198    27M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24997 Gb  0:00:00.198    27M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:00.977    45M / 58M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads  0:00:00.978    45M / 58M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.220    45M / 58M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.  0:00:01.220    45M / 58M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.406    45M / 58M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction  0:00:01.408    45M / 58M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:01.408    45M / 58M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 128 files using 8 threads. This might take a while.  0:00:01.409    45M / 58M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:01.409    45M / 58M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24991 Gb  0:00:01.410    45M / 58M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:02.807     6G / 6G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers  0:00:02.807     6G / 6G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.  0:00:02.820   137M / 137M  INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:03.319   137M / 137M  INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.  0:00:03.319   137M / 137M  INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:03.629   137M / 137M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:03.660   138M / 138M  INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:03.701   138M / 138M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).  0:00:03.701   138M / 138M  INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:03.707   138M / 138M  INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:03.708   138M / 138M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping  0:00:03.708   138M / 138M  INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)  0:00:03.708   138M / 138M  INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping  0:00:03.715   138M / 138M  INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404  0:00:03.715   138M / 138M  INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413  0:00:03.716   138M / 138M  INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper  0:00:03.716   138M / 138M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph  0:00:03.719   138M / 138M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths  0:00:03.722   138M / 138M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted  0:00:03.724   138M / 138M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops  0:00:03.729   138M / 138M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected  0:00:03.731   138M / 138M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)  0:00:03.732   138M / 138M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:03.732   138M / 138M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:03.753   138M / 138M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 20768 bytes occupied (4.71344 bits per kmer).  0:00:03.753   138M / 138M  INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.  0:00:03.820   138M / 138M  INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM  0:00:03.821   138M / 138M  INFO    General                 (construction.cpp          : 505)   Processed 4110 edges  0:00:03.827   138M / 138M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding  0:00:03.828   138M / 138M  INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7  0:00:03.828   138M / 138M  INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695  0:00:03.828   138M / 138M  INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:03.828   138M / 138M  INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model  0:00:03.909   138M / 138M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2  0:00:04.113   138M / 138M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4  0:00:04.595   138M / 138M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8  0:00:05.152   138M / 138M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16  0:00:06.109   138M / 138M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32  0:00:06.109   138M / 138M  INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:06.111   138M / 138M  INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1  0:00:06.111   138M / 138M  INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275  0:00:06.111   138M / 138M  INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275  0:00:06.111   138M / 138M  INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132  0:00:06.111   138M / 138M  INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577  0:00:06.112   138M / 138M  INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275  0:00:06.112   138M / 138M  INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0  0:00:06.112   138M / 138M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification  0:00:06.112   138M / 138M  INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning  0:00:06.112   138M / 138M  INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled  0:00:06.112   138M / 13..    General                 (launcher.cpp              : 246)   Deduplicating paths  0:00:10.900    43M / 169M  INFO    General                 (launcher.cpp              : 250)   Paths deduplicated  0:00:10.901    43M / 169M  INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:10.901    43M / 169M  INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:10.901    43M / 169M  INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:10.901    43M / 169M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:10.901    43M / 169M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:10.901    43M / 169M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:10.902    43M / 169M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:10.902    43M / 169M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:10.902    43M / 169M  INFO    General                 (launcher.cpp              : 267)   Paths finalized  0:00:10.902    43M / 169M  INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished  0:00:10.903    39M / 169M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output  0:00:10.903    39M / 169M  INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K127/before_rr.fasta  0:00:10.911    39M / 169M  INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa  0:00:10.911    39M / 169M  INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K127/assembly_graph.fastg  0:00:10.918    39M / 169M  INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds  0:00:10.918    39M / 169M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K127/final_contigs.fasta  0:00:10.925    39M / 169M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K127/final_contigs.paths  0:00:10.931    39M / 169M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K127/scaffolds.fasta  0:00:10.937    39M / 169M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K127/scaffolds.paths  0:00:10.943    39M / 169M  INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths  0:00:10.954    39M / 169M  INFO    General                 (pipeline.cpp              : 259)   SPAdes finished  0:00:10.959    39M / 169M  INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 10 seconds===== K127 finished.===== Copy files started.== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/contigs.paths===== Copy files finished.===== Assembling finished.===== Breaking scaffolds started.== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3===== Breaking scaffolds finished.===== Terminate started.===== Terminate finished. * Assembled contigs are in /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished WITH WARNINGS!=== Error correction and assembling warnings: * 0:00:10.896    43M / 169M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.======= Warnings saved to /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/warnings.logSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/assembly/spades.logThank you for using SPAdes!Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k127 graphRepair multi way junctions  (2024-07-16 13:17:23)Filter by read depth        (2024-07-16 13:17:23)Filter homopolymer loops    (2024-07-16 13:17:23)Merge all possible          (2024-07-16 13:17:23)Normalise read depths       (2024-07-16 13:17:23)Remove zero length segments (2024-07-16 13:17:23)Sort link order             (2024-07-16 13:17:23)Graph cleaning finished     (2024-07-16 13:17:23)Saving /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2024-07-16 13:17:23)Filter by read depth        (2024-07-16 13:17:23)Filter homopolymer loops    (2024-07-16 13:17:23)Merge all possible          (2024-07-16 13:17:23)Normalise read depths       (2024-07-16 13:17:23)Remove zero length segments (2024-07-16 13:17:23)Sort link order             (2024-07-16 13:17:23)Graph cleaning finished     (2024-07-16 13:17:23)Saving /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/k127_assembly_graph.gfaSPAdes assembly graph summary (2024-07-16 13:17:23)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27                                                                                    47                                                                                    63                                                                                    77                                                                                    89                                                                                    99                                                                                   107                                                                                   115                                                                                   121                                                                                   127         1       1          5,513   5,513            5,513           0   5.00e-01 <-bestRead depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/93/working/spades_assembly/Determining graph multiplicity (2024-07-16 13:17:24)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Saving /galaxy/server/database/jobs_directory/000/93/working/001_best_spades_graph.gfaCleaning graph (2024-07-16 13:17:24)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        63        64Graph overlaps removedSaving /galaxy/server/database/jobs_directory/000/93/working/002_overlaps_removed.gfa    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2024-07-16 13:17:24)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2024-07-16 13:17:24)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundApplying bridges (2024-07-16 13:17:24)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultSaving /galaxy/server/database/jobs_directory/000/93/working/003_bridges_applied.gfaCleaning up leftover segments (2024-07-16 13:17:24)Segments eligible for deletion:Bridged assembly graph (2024-07-16 13:17:24)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e a complete assembly). If there are more contigs, thenthe assembly is not complete.Saving /galaxy/server/database/jobs_directory/000/93/working/004_final_clean.gfaComponent   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completePolishing assembly with Pilon (2024-07-16 13:17:24)    Unicycler now conducts multiple rounds of Pilon in an attempt to repair anyremaining small-scale errors with the assembly.Aligning reads to find appropriate insert size range...  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta  bowtie2 -1 /galaxy/server/database/jobs_directory/000/93/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/93/working/fq2.fastq -x 0_insert_size_check.fasta --fast --threads 8 -I 0 -X 5000 -S 0_alignments.samInsert size 1st percentile:  263Insert size 99th percentile: 450Pilon polish round 1  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta  bowtie2 --local --very-sensitive-local --threads 8 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/93/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/93/working/fq2.fastq  samtools sort -@ 8 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam  samtools index 1_paired_alignments.bam  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/93/working/pilon_polish --fix bases --frags 1_paired_alignments.bamNo Pilon changesSaving /galaxy/server/database/jobs_directory/000/93/working/005_polished.gfaRotating completed replicons (2024-07-16 13:17:28)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2024-07-16 13:17:39)Saving /galaxy/server/database/jobs_directory/000/93/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/93/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #2)" name="1" time="171.9919216632843">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-07-16 13:18:13)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided both short and long reads, Unicycler will perform a hybrid assembly.It will first use SPAdes to make a short-read assembly graph, and then it willuse various methods to scaffold that graph with the long reads.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq.gz -2 fq2.fastq.gz -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2Unicycler version: v0.4.8Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/97/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program         Version             Status     Path                                     spades.py       3.14.1              good       /usr/local/bin/spades.py                 racon           1.4.20              good       /usr/local/bin/racon                     makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb               tblastn         2.12.0+             good       /usr/local/bin/tblastn                   bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build             bowtie2         2.4.4               good       /usr/local/bin/bowtie2                   samtools        1.14                good       /usr/local/bin/samtools                  java            11.0.9.1-internal   good       /usr/local/bin/java                      pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar  bcftools                            not used                                          Choosing k-mer range for assembly (2024-07-16 13:18:15)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2024-07-16 13:18:15)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/97/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 8 --only-assembler -1 /galaxy/server/database/jobs_directory/000/97/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/97/working/fq2.fastq.gzSystem information:  SPAdes version: 3.14.1  Python version: 3.9.9  OS: Linux-6.1.85+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/97/working/spades_assembly/assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Standard mode  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/97/working/fq1.fastq.gz']      right reads: ['/galaxy/server/database/jobs_directory/000/97/working/fq2.fastq.gz']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/97/working/spades_assembly/assembly/tmp  Threads: 8  Memory limit (in Gb): 78======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/97/working/spades_assembly/assembly/spades.log/galaxy/server/database/jobs_directory/000/97/working/fq1.fastq.gz: max reads length: 251/galaxy/server/database/jobs_directory/000/97/working/fq2.fastq.gz: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/97/working/spades_assembly/assembly/K27/configs/config.infoWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/97/working/spades_assembly/assembly/K27/configs/config.info  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 78 Gb  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/97/working/spades_assembly/assembly/dataset.info) with K=27  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion  0:00:00.008     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)  0:00:00.008     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads  0:00:00.137    89M / 89M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written  0:00:00.137    65M / 65M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads  0:00:00.140    75M / 75M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written  0:00:00.140    75M / 75M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads  0:00:00.142    75M / 75M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written  0:00:00.188    27M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction  0:00:00.208    27M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.208    27M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.208    27M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting  0:00:00.210    27M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 8 threads. This might take a while.  0:00:00.211    27M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.211    27M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24997 Gb  0:00:00.211    27M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:01.127    45M / 56M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads  0:00:01.127    45M / 56M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.396    45M / 56M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.  0:00:01.396    45M / 56M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.577    40M / 56M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction  0:00:01.578    40M / 56M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:01.579    40M / 56M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 128 files using 8 threads. This might take a while.  0:00:01.580    40M / 56M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:01.580    40M / 56M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24991 Gb  0:00:01.581    40M / 56M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:03.172     6G / 6G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers  0:00:03.172     6G / 6G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.  0:00:03.186   135M / 135M  INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:03.729   135M / 135M  INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.  0:00:03.729   135M / 135M  INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:04.098   135M / 135M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:04.132   131M / 131M  INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:04.175   131M / 131M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).  0:00:04.176   131M / 131M  INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:04.181   131M / 131M  INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:04.183   131M / 131M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping  0:00:04.184   131M / 131M  INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)  0:00:04.184   131M / 131M  INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping  0:00:04.192   131M / 131M  INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404  0:00:04.192   131M / 131M  INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413  0:00:04.193   131M / 131M  INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper  0:00:04.193   131M / 131M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph  0:00:04.197   131M / 131M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths  0:00:04.201   131M / 131M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted  0:00:04.202   131M / 131M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops  0:00:04.208   131M / 131M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected  0:00:04.211   131M / 131M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)  0:00:04.211   131M / 131M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:04.211   131M / 131M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:04.239   133M / 133M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 20768 bytes occupied (4.71344 bits per kmer).  0:00:04.239   133M / 133M  INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.  0:00:04.302   133M / 133M  INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM  0:00:04.304   133M / 133M  INFO    General                 (construction.cpp          : 505)   Processed 4110 edges  0:00:04.310   133M / 133M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding  0:00:04.311   133M / 133M  INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7  0:00:04.311   133M / 133M  INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695  0:00:04.311   133M / 133M  INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:04.311   133M / 133M  INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model  0:00:04.392   133M / 133M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2  0:00:04.598   133M / 133M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4  0:00:05.081   133M / 133M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8  0:00:05.645   133M / 133M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16  0:00:06.614   133M / 133M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32  0:00:06.615   133M / 133M  INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:06.616   133M / 133M  INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1  0:00:06.616   133M / 133M  INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275  0:00:06.617   133M / 133M  INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275  0:00:06.617   133M / 133M  INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132  0:00:06.617   133M / 133M  INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577  0:00:06.617   133M / 133M  INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275  0:00:06.617   133M / 133M  INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0  0:00:06.617   133M / 133M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification  0:00:06.618   133M / 133M  INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning  0:00:06.618   133M / 133M  INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled  0..ry/000/97/working/spades_assembly/assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/97/working/spades_assembly/assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/97/working/spades_assembly/assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/97/working/spades_assembly/assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/97/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished WITH WARNINGS!=== Error correction and assembling warnings: * 0:00:11.298    34M / 169M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.======= Warnings saved to /galaxy/server/database/jobs_directory/000/97/working/spades_assembly/assembly/warnings.logSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/97/working/spades_assembly/assembly/spades.logThank you for using SPAdes!Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k127 graphRepair multi way junctions  (2024-07-16 13:20:10)Filter by read depth        (2024-07-16 13:20:10)Filter homopolymer loops    (2024-07-16 13:20:10)Merge all possible          (2024-07-16 13:20:10)Normalise read depths       (2024-07-16 13:20:10)Remove zero length segments (2024-07-16 13:20:10)Sort link order             (2024-07-16 13:20:10)Graph cleaning finished     (2024-07-16 13:20:10)Saving /galaxy/server/database/jobs_directory/000/97/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2024-07-16 13:20:10)Filter by read depth        (2024-07-16 13:20:10)Filter homopolymer loops    (2024-07-16 13:20:10)Merge all possible          (2024-07-16 13:20:10)Normalise read depths       (2024-07-16 13:20:10)Remove zero length segments (2024-07-16 13:20:10)Sort link order             (2024-07-16 13:20:10)Graph cleaning finished     (2024-07-16 13:20:10)Saving /galaxy/server/database/jobs_directory/000/97/working/spades_assembly/k127_assembly_graph.gfaSPAdes assembly graph summary (2024-07-16 13:20:10)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27                                                                                    47                                                                                    63                                                                                    77                                                                                    89                                                                                    99                                                                                   107                                                                                   115                                                                                   121                                                                                   127         1       1          5,513   5,513            5,513           0   5.00e-01 <-bestRead depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/97/working/spades_assembly/Determining graph multiplicity (2024-07-16 13:20:11)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Saving /galaxy/server/database/jobs_directory/000/97/working/001_best_spades_graph.gfaCleaning graph (2024-07-16 13:20:11)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        63        64Graph overlaps removedSaving /galaxy/server/database/jobs_directory/000/97/working/002_overlaps_removed.gfa    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2024-07-16 13:20:11)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2024-07-16 13:20:11)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundLoading reads (2024-07-16 13:20:11)0 / 1 (0.0%)1 / 1 (100.0%) - 5,386 bp1 / 1 (100.0%) - 5,386 bpAssembling contigs and long reads with miniasm (2024-07-16 13:20:11)    Unicycler uses miniasm to construct a string graph assembly using both theshort read contigs and the long reads. It will then use the resulting stringgraph to produce bridges between contigs. This method requires decent coverageof long reads and therefore may not be fruitful if long reads are sparse.However, it does not rely on the short read assembly graph having goodconnectivity and is able to bridge an assembly graph even when it contains manydead ends.    Unicycler uses two types of "reads" as assembly input: anchor contigs fromthe short-read assembly and actual long reads which overlap two or more ofthese contigs. It then assembles them with miniasm.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/97/working/miniasm_assembly/all_segments.fasta1538635081-153864508250785078255cm:i:11341538650905383-1538650885381293293255cm:i:63Number of minimap alignments: 1Saving to /galaxy/server/database/jobs_directory/000/97/working/miniasm_assembly/01_assembly_reads.fastq:  0 short-read contigs  1 long readsFinding overlaps with minimap... failedAssembling reads with miniasm... empty resultCreating simple long read bridges (2024-07-16 13:20:11)    Unicycler uses long read alignments (from minimap) to resolve simple repeatstructures in the graph. This takes care of some "low-hanging fruit" of thegraph simplification.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/97/working/simple_bridging/all_segments.fasta1538635081-153864508250785078255cm:i:11341538650905383-1538650885381293293255cm:i:63Number of minimap alignments: 1    Two-way junctions are defined as cases where two graph contigs (A and B)join together (C) and then split apart again (D and E). This usually representsa simple 2-copy repeat, and there are two possible options for its resolution:(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such ajunction gets to "vote" for option 1, option 2 or neither. Unicycler creates abridge at each junction for the most voted for option.No suitable two-way junctions present    Simple loops are parts of the graph where two contigs (A and B) areconnected via a repeat (C) which loops back to itself (via D). It is possibleto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is thecorrect number of times through. In this step, such reads are found and each isaligned against alternative loop counts. A reads casts its "vote" for the loopcount it agrees best with, and Unicycler creates a bridge using the most votedfor count.No suitable simple loops presentDetermining low score threshold (2024-07-16 13:20:11)    Before conducting semi-global alignment of the long reads to the assemblygraph, Unicycler must determine a minimum alignment score threshold such thatnonsense alignments are excluded. To choose a threshold automatically, itexamines alignments between random sequences and selects a score a few standarddeviations above the mean.Automatically choosing a threshold using random alignment scores.Random alignment mean score: 61.66         standard deviation:  1.31        Low score threshold: 61.66 + (7 x 1.31) = 70.86Aligning reads with minimap (2024-07-16 13:20:11)1538655077-153868508050725072255cm:i:9451538650935384-1538650875378291291255cm:i:52Done! 1 out of 1 reads alignedAligning reads (2024-07-16 13:20:11)1/1: 1 (5386 bp)minimap alignments:    5,5077,-,1,8,5080    5093,5384,-,1,5087,5378Reference ranges:    1-: 0 - 5386Range: 1: 0 - 5386    common 10-mers: 5464    line 1: 5076 points, score=5074.000394 (good)    line 2: 292 points, score=290.006826 (good)All Seqan alignments (time to align = 0.042 s):  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1          0     5085           0      5085       -      15255        100.00   100.00%         1       5085     5386        5085      5386       -        903        100.00   100.00%Final alignments:  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1          0     5085           0      5085       -      15255        100.00   100.00%         1       5085     5386        5085      5386       -        903        100.00   100.00%Read alignment summary (2024-07-16 13:20:11)Total read count:            1Fully aligned reads:         1Partially aligned reads:     0Unaligned reads:             0Total bases aligned:     5,386 bpMean alignment identity:   100.0%Deleting /galaxy/server/database/jobs_directory/000/97/working/read_alignment/Setting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00Building long read bridges (2024-07-16 13:20:11)    Unicycler uses the long read alignments to produce bridges between anchorsegments. These bridges can be formed using as few as one long read, givingUnicycler the ability to bridge the graph even when long-read depth is low.Median depth of 10 longest contigs: 1.00                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path                Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  QualityApplying bridges (2024-07-16 13:20:11)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultSaving /galaxy/server/database/jobs_directory/000/97/working/003_bridges_applied.gfaCleaning up leftover segments (2024-07-16 13:20:11)Segments eligible for deletion:Bridged assembly graph (2024-07-16 13:20:11)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e a complete assembly). If there are more contigs, thenthe assembly is not complete.Saving /galaxy/server/database/jobs_directory/000/97/working/004_final_clean.gfaComponent   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completePolishing assembly with Pilon (2024-07-16 13:20:11)    Unicycler now conducts multiple rounds of Pilon in an attempt to repair anyremaining small-scale errors with the assembly.Aligning reads to find appropriate insert size range...  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta  bowtie2 -1 /galaxy/server/database/jobs_directory/000/97/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/97/working/fq2.fastq.gz -x 0_insert_size_check.fasta --fast --threads 8 -I 0 -X 5000 -S 0_alignments.samInsert size 1st percentile:  263Insert size 99th percentile: 450Pilon polish round 1  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta  bowtie2 --local --very-sensitive-local --threads 8 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/97/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/97/working/fq2.fastq.gz  samtools sort -@ 8 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam  samtools index 1_paired_alignments.bam  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/97/working/pilon_polish --fix bases --frags 1_paired_alignments.bamNo Pilon changesPilon polish round 2  bowtie2-build 2_polish_input.fasta 2_polish_input.fasta  bowtie2 --local --very-sensitive-local --threads 8 -I 263 -X 450 -x 2_polish_input.fasta -S 2_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/97/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/97/working/fq2.fastq.gz  samtools sort -@ 8 -o 2_paired_alignments.bam -O bam -T temp 2_paired_alignments.sam  samtools index 2_paired_alignments.bam  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 2_polish_input.fasta --changes --output 2_pilon --outdir /galaxy/server/database/jobs_directory/000/97/working/pilon_polish --fix all --frags 2_paired_alignments.bamNo Pilon changesSaving /galaxy/server/database/jobs_directory/000/97/working/005_polished.gfaRotating completed replicons (2024-07-16 13:20:20)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2024-07-16 13:20:30)Saving /galaxy/server/database/jobs_directory/000/97/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/97/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #3)" name="2" time="153.08979535102844">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-07-16 13:21:03)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only short reads, Unicycler will essentially function as a SPAdes-optimiser. It will try many k-mer sizes, choose the best based on contig lengthand graph connectivity, and scaffold the graph using SPAdes repeat resolution.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --no_pilon --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2Unicycler version: v0.4.8Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/100/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program         Version   Status     Path                        spades.py       3.14.1    good       /usr/local/bin/spades.py    racon                     not used                               makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb  tblastn         2.12.0+   good       /usr/local/bin/tblastn      bowtie2-build             not used                               bowtie2                   not used                               samtools                  not used                               java                      not used                               pilon                     not used                               bcftools                  not used                             Choosing k-mer range for assembly (2024-07-16 13:21:04)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2024-07-16 13:21:05)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 8 --only-assembler -1 /galaxy/server/database/jobs_directory/000/100/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/100/working/fq2.fastqSystem information:  SPAdes version: 3.14.1  Python version: 3.9.9  OS: Linux-6.1.85+-x86_64-with-glibc2.28Output dir: /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Standard mode  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/100/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/100/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFFOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/tmp  Threads: 8  Memory limit (in Gb): 78======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/spades.log/galaxy/server/database/jobs_directory/000/100/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/100/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K27/configs/config.infoWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K27/configs/config.info  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 78 Gb  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/dataset.info) with K=27  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion  0:00:00.008     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)  0:00:00.008     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads  0:00:00.119    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written  0:00:00.120    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads  0:00:00.123    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written  0:00:00.123    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads  0:00:00.125    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written  0:00:00.171    25M / 28M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction  0:00:00.192    25M / 28M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.192    25M / 28M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.192    25M / 28M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting  0:00:00.194    25M / 28M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 8 threads. This might take a while.  0:00:00.196    25M / 28M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:00.196    25M / 28M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24997 Gb  0:00:00.196    25M / 28M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576  0:00:01.022    45M / 56M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads  0:00:01.022    45M / 56M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:01.292    45M / 56M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.  0:00:01.293    45M / 56M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:01.494    40M / 56M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction  0:00:01.495    40M / 56M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:01.496    40M / 56M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 128 files using 8 threads. This might take a while.  0:00:01.497    40M / 56M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576  0:00:01.497    40M / 56M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24991 Gb  0:00:01.497    40M / 56M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288  0:00:03.083     6G / 6G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers  0:00:03.083     6G / 6G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.  0:00:03.096   135M / 135M  INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.  0:00:03.605   135M / 135M  INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.  0:00:03.605   135M / 135M  INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.  0:00:03.971   135M / 135M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:04.005   126M / 126M  INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.  0:00:04.049   126M / 126M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).  0:00:04.050   126M / 126M  INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers  0:00:04.057   126M / 126M  INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.  0:00:04.058   126M / 126M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping  0:00:04.059   126M / 126M  INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)  0:00:04.059   126M / 126M  INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping  0:00:04.067   126M / 126M  INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404  0:00:04.068   126M / 126M  INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413  0:00:04.068   126M / 126M  INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper  0:00:04.068   126M / 126M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph  0:00:04.073   126M / 126M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths  0:00:04.076   126M / 126M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted  0:00:04.078   126M / 126M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops  0:00:04.084   126M / 126M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected  0:00:04.087   126M / 126M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)  0:00:04.088   126M / 126M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index  0:00:04.088   126M / 126M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices  0:00:04.108   126M / 126M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 20768 bytes occupied (4.71344 bits per kmer).  0:00:04.108   126M / 126M  INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.  0:00:04.174   126M / 126M  INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM  0:00:04.175   126M / 126M  INFO    General                 (construction.cpp          : 505)   Processed 4110 edges  0:00:04.183   126M / 126M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding  0:00:04.183   126M / 126M  INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7  0:00:04.183   126M / 126M  INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695  0:00:04.183   126M / 126M  INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:04.184   126M / 126M  INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model  0:00:04.265   126M / 126M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2  0:00:04.469   126M / 126M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4  0:00:04.951   126M / 126M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8  0:00:05.507   126M / 126M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16  0:00:06.468   126M / 126M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32  0:00:06.468   126M / 126M  INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:06.469   126M / 126M  INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1  0:00:06.470   126M / 126M  INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275  0:00:06.470   126M / 126M  INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275  0:00:06.470   126M / 126M  INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132  0:00:06.470   126M / 126M  INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577  0:00:06.470   126M / 126M  INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275  0:00:06.471   126M / 126M  INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0  0:00:06.471   126M / 126M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification  0:00:06.471   126M / 126M  INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning  0:00:06.471   126M / 126M  INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled  0:00:06.471   126M / 126M  INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover  0:00:06.472   126M / 126M  INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge rem..overlaps  0:00:11.104    34M / 169M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:11.104    34M / 169M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:11.104    34M / 169M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:11.105    34M / 169M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:11.105    34M / 169M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:11.105    34M / 169M  INFO    General                 (launcher.cpp              : 267)   Paths finalized  0:00:11.105    34M / 169M  INFO    General                 (launcher.cpp              : 439)   Closing gaps in paths  0:00:11.105    34M / 169M  INFO    General                 (launcher.cpp              : 467)   Gap closing completed  0:00:11.105    34M / 169M  INFO    General                 (launcher.cpp              : 296)   Traversing tandem repeats  0:00:11.106    34M / 169M  INFO    General                 (launcher.cpp              : 306)   Traversed 0 loops  0:00:11.106    34M / 169M  INFO    General                 (launcher.cpp              : 244)   Finalizing paths  0:00:11.106    34M / 169M  INFO    General                 (launcher.cpp              : 246)   Deduplicating paths  0:00:11.106    34M / 169M  INFO    General                 (launcher.cpp              : 250)   Paths deduplicated  0:00:11.107    34M / 169M  INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps  0:00:11.107    34M / 169M  INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths  0:00:11.107    34M / 169M  INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps  0:00:11.108    34M / 169M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps  0:00:11.108    34M / 169M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps  0:00:11.108    34M / 169M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths  0:00:11.109    34M / 169M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths  0:00:11.109    34M / 169M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed  0:00:11.109    34M / 169M  INFO    General                 (launcher.cpp              : 267)   Paths finalized  0:00:11.110    34M / 169M  INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished  0:00:11.110    34M / 169M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output  0:00:11.110    34M / 169M  INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K127/before_rr.fasta  0:00:11.119    34M / 169M  INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa  0:00:11.120    34M / 169M  INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K127/assembly_graph.fastg  0:00:11.126    34M / 169M  INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds  0:00:11.126    34M / 169M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K127/final_contigs.fasta  0:00:11.133    34M / 169M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K127/final_contigs.paths  0:00:11.139    34M / 169M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K127/scaffolds.fasta  0:00:11.145    34M / 169M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K127/scaffolds.paths  0:00:11.151    34M / 169M  INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths  0:00:11.162    34M / 169M  INFO    General                 (pipeline.cpp              : 259)   SPAdes finished  0:00:11.167    36M / 169M  INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 11 seconds===== K127 finished.===== Copy files started.== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/contigs.paths===== Copy files finished.===== Assembling finished.===== Breaking scaffolds started.== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3===== Breaking scaffolds finished.===== Terminate started.===== Terminate finished. * Assembled contigs are in /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished WITH WARNINGS!=== Error correction and assembling warnings: * 0:00:11.101    34M / 169M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.======= Warnings saved to /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/warnings.logSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/assembly/spades.logThank you for using SPAdes!Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k127 graphRepair multi way junctions  (2024-07-16 13:22:53)Filter by read depth        (2024-07-16 13:22:53)Filter homopolymer loops    (2024-07-16 13:22:53)Merge all possible          (2024-07-16 13:22:53)Normalise read depths       (2024-07-16 13:22:53)Remove zero length segments (2024-07-16 13:22:53)Sort link order             (2024-07-16 13:22:53)Graph cleaning finished     (2024-07-16 13:22:53)Saving /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2024-07-16 13:22:53)Filter by read depth        (2024-07-16 13:22:53)Filter homopolymer loops    (2024-07-16 13:22:53)Merge all possible          (2024-07-16 13:22:53)Normalise read depths       (2024-07-16 13:22:53)Remove zero length segments (2024-07-16 13:22:53)Sort link order             (2024-07-16 13:22:53)Graph cleaning finished     (2024-07-16 13:22:53)Saving /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/k127_assembly_graph.gfaSPAdes assembly graph summary (2024-07-16 13:22:53)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27                                                                                    47                                                                                    63                                                                                    77                                                                                    89                                                                                    99                                                                                   107                                                                                   115                                                                                   121                                                                                   127         1       1          5,513   5,513            5,513           0   5.00e-01 <-bestRead depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/100/working/spades_assembly/Determining graph multiplicity (2024-07-16 13:22:54)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Saving /galaxy/server/database/jobs_directory/000/100/working/001_best_spades_graph.gfaCleaning graph (2024-07-16 13:22:54)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        63        64Graph overlaps removedSaving /galaxy/server/database/jobs_directory/000/100/working/002_overlaps_removed.gfa    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2024-07-16 13:22:54)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2024-07-16 13:22:54)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundApplying bridges (2024-07-16 13:22:54)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultSaving /galaxy/server/database/jobs_directory/000/100/working/003_bridges_applied.gfaCleaning up leftover segments (2024-07-16 13:22:54)Segments eligible for deletion:Bridged assembly graph (2024-07-16 13:22:54)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e a complete assembly). If there are more contigs, thenthe assembly is not complete.Saving /galaxy/server/database/jobs_directory/000/100/working/004_final_clean.gfaComponent   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2024-07-16 13:22:54)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2024-07-16 13:23:04)Saving /galaxy/server/database/jobs_directory/000/100/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/100/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #4)" name="3" time="30.596105098724365">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-07-16 13:23:32)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only long reads, Unicycler will assemble the reads with miniasm andthen run repeated polishing rounds using Racon.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2Unicycler version: v0.4.8Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/102/workingDependencies:  Program         Version   Status     Path                        spades.py                 not used                               racon           1.4.20    good       /usr/local/bin/racon        makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb  tblastn         2.12.0+   good       /usr/local/bin/tblastn      bowtie2-build             not used                               bowtie2                   not used                               samtools                  not used                               java                      not used                               pilon                     not used                               bcftools                  not used                             Loading reads (2024-07-16 13:23:33)0 / 40 (0.0%)1 / 40 (2.5%) - 412 bp2 / 40 (5.0%) - 4,847 bp3 / 40 (7.5%) - 8,974 bp4 / 40 (10.0%) - 13,249 bp5 / 40 (12.5%) - 14,258 bp6 / 40 (15.0%) - 14,806 bp7 / 40 (17.5%) - 19,262 bp8 / 40 (20.0%) - 19,737 bp9 / 40 (22.5%) - 20,395 bp10 / 40 (25.0%) - 32,024 bp11 / 40 (27.5%) - 32,698 bp12 / 40 (30.0%) - 34,509 bp13 / 40 (32.5%) - 39,018 bp14 / 40 (35.0%) - 43,351 bp15 / 40 (37.5%) - 44,224 bp16 / 40 (40.0%) - 45,978 bp17 / 40 (42.5%) - 46,402 bp18 / 40 (45.0%) - 61,596 bp19 / 40 (47.5%) - 62,279 bp20 / 40 (50.0%) - 63,700 bp21 / 40 (52.5%) - 66,412 bp22 / 40 (55.0%) - 66,845 bp23 / 40 (57.5%) - 67,316 bp24 / 40 (60.0%) - 69,428 bp25 / 40 (62.5%) - 73,964 bp26 / 40 (65.0%) - 75,608 bp27 / 40 (67.5%) - 80,223 bp28 / 40 (70.0%) - 84,810 bp29 / 40 (72.5%) - 92,076 bp30 / 40 (75.0%) - 92,832 bp31 / 40 (77.5%) - 92,939 bp32 / 40 (80.0%) - 93,532 bp33 / 40 (82.5%) - 96,370 bp34 / 40 (85.0%) - 100,656 bp35 / 40 (87.5%) - 119,222 bp36 / 40 (90.0%) - 123,827 bp37 / 40 (92.5%) - 155,106 bp38 / 40 (95.0%) - 156,254 bp39 / 40 (97.5%) - 157,993 bp40 / 40 (100.0%) - 162,406 bp40 / 40 (100.0%) - 162,406 bpAssembling contigs and long reads with miniasm (2024-07-16 13:23:33)Saving to /galaxy/server/database/jobs_directory/000/102/working/miniasm_assembly/01_assembly_reads.fastq:  40 long readsFinding overlaps with minimap... success  120 overlapsAssembling reads with miniasm... success  7 segments, 6 links    Unicycler removes any links from the string graph which create branches.I.e. if any segment has two or more links connected to one end, those links areremoved. This will result in a graph with only simple linear paths that issuitable for creating unambiguous bridges.No links needed removalSaving /galaxy/server/database/jobs_directory/000/102/working/miniasm_assembly/11_branching_paths_removed.gfaMerging segments into unitigs:Linear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-  1 linear unitig  total size = 5,836 bpSaving /galaxy/server/database/jobs_directory/000/102/working/miniasm_assembly/12_unitig_graph.gfaSaving /galaxy/server/database/jobs_directory/000/102/working/002_unitig_graph.gfaPolishing miniasm assembly with Racon (2024-07-16 13:23:33)    Unicycler now uses Racon to polish the miniasm assembly. It does multiplerounds of polishing to get the best consensus. Circular unitigs are rotatedbetween rounds such that all parts (including the ends) are polished well.Saving to /galaxy/server/database/jobs_directory/000/102/working/miniasm_assembly/racon_polish/polishing_reads.fastq:  40 long readsPolish       Assembly          Mappinground            size          quality0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42862104010+158361061460311473800255cm:i:2000237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1583652215833179612255cm:i:27054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-158362376583334573457255cm:i:1153054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262525-158363023147872399255cm:i:1443708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46052804284-158364393614814004255cm:i:2463708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194286-15836421558335461618255cm:i:884850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271704027+158361680583310324153255cm:i:1744850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934082+15836416022201598255cm:i:30598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713344566-158362699578612813232255cm:i:243598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-158365026637722680255cm:i:129771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-158362657583314693386255cm:i:268771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template4615972786-158363026369052689255cm:i:1579780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331434271-15836338425418344128255cm:i:4709780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330924330-15836450357984301295255cm:i:779e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45365444408-1583669392712083864255cm:i:2379e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630084472-15836421557483511533255cm:i:53a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1583629093222131313255cm:i:22a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template44563354397+158361321525713514062255cm:i:280a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374349+1583623961238938255cm:i:40a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445686537+1583653345798154464255cm:i:26b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351114359-158361673579820624248255cm:i:487b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351091619-158363015254721510255cm:i:68bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template4275934048+158361733583313034100255cm:i:230bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+15836416903111712255cm:i:43f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894205+1583623393910393916255cm:i:166f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092961782+15836424257983671556255cm:i:63begin           5,836             5.330237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162901009505424314045255cm:i:5290237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1629056706287297617255cm:i:630237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162904404122400255cm:i:19054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162902540628722493747255cm:i:527054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1629051247412762423255cm:i:2453708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162904431623224312255cm:i:4863708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16290435462879431933255cm:i:1944850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271164027+162901774628721454513255cm:i:4264850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16290417414211737255cm:i:61598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162902854622622573372255cm:i:501598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1629051283114592780255cm:i:289771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162902825628722683462255cm:i:513771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template4615972745-1629074280515012731255cm:i:2899780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16290354469920224345255cm:i:3779780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694304-16290498462716141287255cm:i:1179e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1629072453419214462255cm:i:3379e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16290459762065801609255cm:i:103a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1629030833386169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162901126570823684582255cm:i:487a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374392+162902310393621016255cm:i:59a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445686539+1629057856254217469255cm:i:45b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162901806625827774452255cm:i:600b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162907416037611529255cm:i:150bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122795+1629052095912149703255cm:i:24bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421149847+162905851307155722255cm:i:17bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template4275934048+162901886628720704401255cm:i:456bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16290418386561834255cm:i:109c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1629020602358156298255cm:i:35f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1629023443621064413255cm:i:421f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16290448862737441785255cm:i:1311               6,290             7.820237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162421016500924603993255cm:i:5300237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1624256266239283613255cm:i:610237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162424408117404255cm:i:18054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162422535623922343704255cm:i:514054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1624251246913872418255cm:i:2713708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162424427623804272255cm:i:4943708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16242431462399551925255cm:i:1964850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271084027+162421759623921944480255cm:i:4404850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16242417354501731255cm:i:67598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162422848617822843330255cm:i:509598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1624251282515042774255cm:i:295771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162422819623922353420255cm:i:510771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template46151092745-1624274278715172713255cm:i:3049780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16242358465920514301255cm:i:3919780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694304-16242493962236181284255cm:i:1149e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1624272449319414421255cm:i:3459e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16242455661585791602255cm:i:105a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1624230773380169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162421133566424054531255cm:i:507a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374397+162422310513531028255cm:i:59a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456107539+1624257596206204447255cm:i:40b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162421799621027494411255cm:i:591b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162427416017951527255cm:i:165bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122847+1624251665916224750255cm:i:35bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421160847+162426021310144708255cm:i:16bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template42751244048+162421908623920614331255cm:i:454bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16242418316671827255cm:i:111c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1624220532352157299255cm:i:37f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1624223439521304372255cm:i:425f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16242444762257621778255cm:i:1382               6,242             8.020237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162651028502524363997255cm:i:5270237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1626556426262281620255cm:i:590237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162654408105404255cm:i:17054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162652544626222283718255cm:i:507054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1626551247813532427255cm:i:2603708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162654429323774289255cm:i:4923708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16265433162629671931255cm:i:1944850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271084027+162651772626221904490255cm:i:4364850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16265417484481744255cm:i:62598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162652857620122703344255cm:i:503598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1626551283414632783255cm:i:284771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162652828626222513434255cm:i:515771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template46151022745-1626574280415112730255cm:i:3059780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16265358467620634318255cm:i:3929780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694328-16265493062466231316255cm:i:1139e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1626572451019874438255cm:i:3509e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16265457361815691608255cm:i:102a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1626530893392169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162651145568024234535255cm:i:509a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374397+162652310633371040255cm:i:56a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456107539+1626557796229223450255cm:i:45b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162651812623327694421255cm:i:601b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162657416157641541255cm:i:156bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122847+1626551825936236754255cm:i:36bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421149847+162655891322155733255cm:i:17bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template42751244048+162651921626220624341255cm:i:449bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16265418446601840255cm:i:111c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1626520632361157298255cm:i:37f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1626523441221824389255cm:i:436f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16265446462487871784255cm:i:1413               6,265             8.04Best polish: /galaxy/server/database/jobs_directory/000/102/working/miniasm_assembly/racon_polish/016_rotated.fastaSaving /galaxy/server/database/jobs_directory/000/102/working/miniasm_assembly/13_racon_polished.gfaSaving /galaxy/server/database/jobs_directory/000/102/working/003_racon_polished.gfaAssembly complete (2024-07-16 13:23:34)Saving /galaxy/server/database/jobs_directory/000/102/working/assembly.gfa
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="vcfgenotypes (Test #1)" name="0" time="10.267192840576172">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 0, "time_seconds": 10.267192840576172, "tool_id": "vcfgenotypes", "tool_version": "1.0.0_rc3+galaxy0"}
            ]]></error>
        
    </testcase>
    
</testsuite>