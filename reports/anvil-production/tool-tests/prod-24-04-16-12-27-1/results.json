{"version": "0.1", "suitename": "Galaxy Tool Tests", "results": {"total": 68, "errors": 7, "failures": 5, "skips": 2}, "tests": [{"id": "bamtools/2.4.0.0-0", "has_data": true, "data": {"tool_id": "bamtools", "tool_version": "2.4.0.0", "test_index": 0, "time_seconds": 29.418089389801025, "inputs": {"input_bams": {"src": "hda", "id": "a2bb28772d28f7c4"}, "analysis_type|format_type|reference_source|ref_file": {"src": "hda", "id": "b68700b0082fd357"}, "analysis_type|format_type|reference_source|reference_source_selector": "history", "analysis_type|format_type|mapqual": true, "analysis_type|format_type|format_type_selector": "pileup", "analysis_type|analysis_type_selector": "convert"}, "job": {"model_class": "Job", "id": "6fe967e93cb65340", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:51:28.425557", "create_time": "2024-04-16T12:51:14.865611", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/2.4.0.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-c2jdn", "command_line": "ln -s '/galaxy/server/database/objects/0/1/3/dataset_013c42aa-7d52-4a88-af11-4b1c67062e01.dat' localbam.bam && ln -s '/galaxy/server/database/objects/_metadata_files/3/3/2/metadata_3324de91-7495-4a4d-812a-838591df96ee.dat' localbam.bam.bai && ln -s '/galaxy/server/database/objects/a/8/f/dataset_a8f93c15-c568-4e81-ae42-73c6cebb7f08.dat' 'localref.fa' && samtools faidx 'localref.fa' 2>&1 || echo 'Error running samtools faidx for bamtools convert' >&2 && bamtools convert -format pileup -mapqual -fasta 'localref.fa' -out '/galaxy/server/database/objects/6/4/c/dataset_64cf1606-b839-42d6-b538-c7d86d7b2e4d.dat' -in localbam.bam", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"convert\", \"format_type\": {\"__current_case__\": 5, \"format_type_selector\": \"pileup\", \"mapqual\": true, \"reference_source\": {\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 86, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}}}"}, "inputs": {"analysis_type|format_type|reference_source|ref_file": {"id": "b68700b0082fd357", "src": "hda", "uuid": "a8f93c15-c568-4e81-ae42-73c6cebb7f08"}, "input_bams": {"id": "a2bb28772d28f7c4", "src": "hda", "uuid": "013c42aa-7d52-4a88-af11-4b1c67062e01"}}, "outputs": {"out_file1": {"id": "a88c403ee28998f5", "src": "hda", "uuid": "64cf1606-b839-42d6-b538-c7d86d7b2e4d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Pileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\n", "job_stdout": "", "job_stderr": "", "stderr": "Pileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 12:51:20", "plugin": "core", "name": "end_epoch", "raw_value": "1713271880.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:51:20", "plugin": "core", "name": "start_epoch", "raw_value": "1713271880.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bamtools/2.4.0.0-1", "has_data": true, "data": {"tool_id": "bamtools", "tool_version": "2.4.0.0", "test_index": 1, "time_seconds": 24.564371824264526, "inputs": {"input_bams": {"src": "hda", "id": "2bab0f32ef4b2ec8"}, "analysis_type|analysis_type_selector": "count"}, "job": {"model_class": "Job", "id": "eb2a3ad300e83a8f", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:51:53.047917", "create_time": "2024-04-16T12:51:44.036740", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/2.4.0.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-kvwwl", "command_line": "ln -s '/galaxy/server/database/objects/8/8/d/dataset_88d8d75e-8010-4a4a-a409-82e471bb04d6.dat' localbam.bam && ln -s '/galaxy/server/database/objects/_metadata_files/6/6/1/metadata_661828d0-b1aa-4d76-b03b-a269bb18fdb9.dat' localbam.bam.bai && bamtools count > '/galaxy/server/database/objects/f/9/5/dataset_f953c673-dd59-41ad-8066-b168b057bd75.dat' -in localbam.bam", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 1, \"analysis_type_selector\": \"count\"}"}, "inputs": {"input_bams": {"id": "2bab0f32ef4b2ec8", "src": "hda", "uuid": "88d8d75e-8010-4a4a-a409-82e471bb04d6"}}, "outputs": {"out_file1": {"id": "39c7146642e2f59a", "src": "hda", "uuid": "f953c673-dd59-41ad-8066-b168b057bd75"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:51:45", "plugin": "core", "name": "start_epoch", "raw_value": "1713271905.0000000"}, {"title": "Job End Time", "value": "2024-04-16 12:51:45", "plugin": "core", "name": "end_epoch", "raw_value": "1713271905.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "bamtools/2.4.0.0-2", "has_data": true, "data": {"tool_id": "bamtools", "tool_version": "2.4.0.0", "test_index": 2, "time_seconds": 25.486583471298218, "inputs": {"input_bams": {"src": "hda", "id": "efb0707dfc95b226"}, "analysis_type|analysis_type_selector": "coverage"}, "job": {"model_class": "Job", "id": "ae4036d2c67fca0c", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:52:18.421979", "create_time": "2024-04-16T12:52:08.893154", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/2.4.0.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-rg6th", "command_line": "ln -s '/galaxy/server/database/objects/5/f/9/dataset_5f976d92-e931-44ec-afab-e5859b007bcc.dat' localbam.bam && ln -s '/galaxy/server/database/objects/_metadata_files/5/8/7/metadata_587957e9-4367-46f3-86ae-cdcbdd757262.dat' localbam.bam.bai && bamtools coverage -out '/galaxy/server/database/objects/c/e/9/dataset_ce977cdb-66a5-495c-b926-8201dfc53d68.dat' -in localbam.bam", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 2, \"analysis_type_selector\": \"coverage\"}"}, "inputs": {"input_bams": {"id": "efb0707dfc95b226", "src": "hda", "uuid": "5f976d92-e931-44ec-afab-e5859b007bcc"}}, "outputs": {"out_file1": {"id": "50ea07f9ff6c1668", "src": "hda", "uuid": "ce977cdb-66a5-495c-b926-8201dfc53d68"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Pileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\n", "job_stdout": "", "job_stderr": "", "stderr": "Pileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:52:10", "plugin": "core", "name": "start_epoch", "raw_value": "1713271930.0000000"}, {"title": "Job End Time", "value": "2024-04-16 12:52:10", "plugin": "core", "name": "end_epoch", "raw_value": "1713271930.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "bamtools/2.4.0.0-3", "has_data": true, "data": {"tool_id": "bamtools", "tool_version": "2.4.0.0", "test_index": 3, "time_seconds": 20.35511565208435, "inputs": {"input_bams": {"src": "hda", "id": "2aa8515227b3c0a4"}, "analysis_type|analysis_type_selector": "header"}, "job": {"model_class": "Job", "id": "49f1068c6cd6785a", "state": "error", "exit_code": null, "update_time": "2024-04-16T12:52:39.072564", "create_time": "2024-04-16T12:52:33.950367", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/2.4.0.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-n46zs", "command_line": "ln -s '/galaxy/server/database/objects/b/7/b/dataset_b7b116cc-c81b-4e40-a9ec-31cfd85553b4.dat' localbam.bam && ln -s '/galaxy/server/database/objects/_metadata_files/d/b/2/metadata_db27b6fa-f5cf-4194-9dee-edad3e203a15.dat' localbam.bam.bai && bamtools header > '/galaxy/server/database/objects/1/d/8/dataset_1d82f610-8280-48d9-86d6-1a4f8724de99.dat' -in localbam.bam", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 3, \"analysis_type_selector\": \"header\"}"}, "inputs": {"input_bams": {"id": "2aa8515227b3c0a4", "src": "hda", "uuid": "b7b116cc-c81b-4e40-a9ec-31cfd85553b4"}}, "outputs": {"out_file1": {"id": "596345bcaa3e9066", "src": "hda", "uuid": "1d82f610-8280-48d9-86d6-1a4f8724de99"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": null, "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/2.4.0.0, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/2.4.0.0, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "bcftools_gtcheck/1.10-0", "has_data": true, "data": {"tool_id": "bcftools_gtcheck", "tool_version": "1.10", "test_index": 0, "time_seconds": 31.298400402069092, "inputs": {"input_file": {"src": "hda", "id": "48009657026a964f"}, "sec_default|GTs_only": "99"}, "job": {"model_class": "Job", "id": "edbbc270303ff5be", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:54:05.915344", "create_time": "2024-04-16T12:53:50.161109", "galaxy_version": "23.1", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_gtcheck/bcftools_gtcheck/1.10", "history_id": "92339b0b40a5ec99", "external_id": "gxy-n88d7", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/f/8/a/dataset_f8af119a-64f9-4696-9458-c52b0278b4e5.dat' > input.vcf.gz && bcftools index input.vcf.gz &&            bcftools gtcheck       --GTs-only '99'                  input.vcf.gz  > '/galaxy/server/database/objects/6/1/8/dataset_618daf9f-5bae-422f-ac5d-96b565d8f05d.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "sec_default": "{\"GTs_only\": \"99\", \"all_sites\": false, \"genotypes\": null, \"homs_only\": false, \"plot\": null, \"query_sample\": null, \"target_sample\": null}", "sec_restrict": "{\"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}}"}, "inputs": {"input_file": {"id": "48009657026a964f", "src": "hda", "uuid": "f8af119a-64f9-4696-9458-c52b0278b4e5"}}, "outputs": {"output_file": {"id": "ee3df0607ba52c67", "src": "hda", "uuid": "618daf9f-5bae-422f-ac5d-96b565d8f05d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:53:55", "plugin": "core", "name": "start_epoch", "raw_value": "1713272035.0000000"}, {"title": "Job End Time", "value": "2024-04-16 12:53:55", "plugin": "core", "name": "end_epoch", "raw_value": "1713272035.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "bcftools_plugin_tag2tag/1.10-0", "has_data": true, "data": {"tool_id": "bcftools_plugin_tag2tag", "tool_version": "1.10", "test_index": 0, "time_seconds": 25.352290391921997, "inputs": {"input_file": {"src": "hda", "id": "bd1152f97a7230b1"}, "sec_plugin|conversion": "--gl-to-pl", "sec_plugin|replace": true, "output_type": "v"}, "job": {"model_class": "Job", "id": "bc8ea395c594a6ae", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:55:51.054643", "create_time": "2024-04-16T12:55:40.448137", "galaxy_version": "23.1", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_plugin_tag2tag/bcftools_plugin_tag2tag/1.10", "history_id": "92339b0b40a5ec99", "external_id": "gxy-mj9vx", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/d/e/d/dataset_ded42ee3-249c-4fb9-b460-33f30db165e1.dat' > input.vcf.gz && bcftools index input.vcf.gz &&            bcftools plugin tag2tag                --output-type 'v'   --threads ${GALAXY_SLOTS:-4}    input.vcf.gz   -- --gl-to-pl --replace > '/galaxy/server/database/objects/0/1/a/dataset_01a08154-8c6b-4a01-823c-9962e362f851.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_plugin": "{\"\": \"0.1\", \"conversion\": \"--gl-to-pl\", \"replace\": true}", "sec_restrict": "{\"exclude\": null, \"include\": null, \"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}}"}, "inputs": {"input_file": {"id": "bd1152f97a7230b1", "src": "hda", "uuid": "ded42ee3-249c-4fb9-b460-33f30db165e1"}}, "outputs": {"output_file": {"id": "d806ca8e9906d911", "src": "hda", "uuid": "01a08154-8c6b-4a01-823c-9962e362f851"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 12:55:42", "plugin": "core", "name": "end_epoch", "raw_value": "1713272142.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:55:42", "plugin": "core", "name": "start_epoch", "raw_value": "1713272142.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_reheader/1.10-0", "has_data": true, "data": {"tool_id": "bcftools_reheader", "tool_version": "1.10", "test_index": 0, "time_seconds": 25.85543990135193, "inputs": {"input_file": {"src": "hda", "id": "6aa530acb33cb882"}, "sec_default|header": {"src": "hda", "id": "595e7f9971905431"}, "output_type": "v"}, "job": {"model_class": "Job", "id": "ed3ade5b07b6c8e4", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:54:32.648361", "create_time": "2024-04-16T12:54:23.133621", "galaxy_version": "23.1", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_reheader/bcftools_reheader/1.10", "history_id": "92339b0b40a5ec99", "external_id": "gxy-d7qvp", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/5/5/f/dataset_55f93d17-4ac1-4334-a474-b836a05117f2.dat' > input.vcf.gz && bcftools index input.vcf.gz &&   bcftools reheader   --header \"/galaxy/server/database/objects/f/b/a/dataset_fbae21f5-0a56-4da0-af32-e1e1defe5f4f.dat\"    input.vcf.gz  | bcftools view  --output-type 'v'  > '/galaxy/server/database/objects/b/f/c/dataset_bfc5addc-1c82-4469-8a0f-25caf778f243.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_default": "{\"header\": {\"values\": [{\"id\": 101, \"src\": \"hda\"}]}, \"rename_samples\": {\"__current_case__\": 0, \"samples_src\": \"none\"}}"}, "inputs": {"input_file": {"id": "6aa530acb33cb882", "src": "hda", "uuid": "55f93d17-4ac1-4334-a474-b836a05117f2"}, "sec_default|header": {"id": "595e7f9971905431", "src": "hda", "uuid": "fbae21f5-0a56-4da0-af32-e1e1defe5f4f"}}, "outputs": {"output_file": {"id": "ab8a238ea76dab21", "src": "hda", "uuid": "bfc5addc-1c82-4469-8a0f-25caf778f243"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-04-16 12:54:25", "plugin": "core", "name": "end_epoch", "raw_value": "1713272065.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:54:24", "plugin": "core", "name": "start_epoch", "raw_value": "1713272064.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_reheader/1.10-1", "has_data": true, "data": {"tool_id": "bcftools_reheader", "tool_version": "1.10", "test_index": 1, "time_seconds": 26.04130506515503, "inputs": {"input_file": {"src": "hda", "id": "f444ed75713c105a"}, "sec_default|rename_samples|sample_file": {"src": "hda", "id": "1ecd7ea8147d6cbd"}, "sec_default|rename_samples|samples_src": "history", "output_type": "v"}, "job": {"model_class": "Job", "id": "384c5b99e4e2acfd", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:54:58.953324", "create_time": "2024-04-16T12:54:49.336666", "galaxy_version": "23.1", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_reheader/bcftools_reheader/1.10", "history_id": "92339b0b40a5ec99", "external_id": "gxy-76629", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/7/c/0/dataset_7c0677c9-f725-4aa3-843d-97a03a06db75.dat' > input.vcf.gz && bcftools index input.vcf.gz &&   bcftools reheader    --samples \"/galaxy/server/database/objects/a/e/4/dataset_ae46ebc7-e663-4d21-b1b1-c0ce8d9aa75f.dat\"   input.vcf.gz  | bcftools view  --output-type 'v'  > '/galaxy/server/database/objects/5/0/0/dataset_500f1cdf-b4d6-45fc-bcb1-72ad38202e0f.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_default": "{\"header\": null, \"rename_samples\": {\"__current_case__\": 1, \"sample_file\": {\"values\": [{\"id\": 104, \"src\": \"hda\"}]}, \"samples_src\": \"history\"}}"}, "inputs": {"input_file": {"id": "f444ed75713c105a", "src": "hda", "uuid": "7c0677c9-f725-4aa3-843d-97a03a06db75"}, "sec_default|rename_samples|sample_file": {"id": "1ecd7ea8147d6cbd", "src": "hda", "uuid": "ae46ebc7-e663-4d21-b1b1-c0ce8d9aa75f"}}, "outputs": {"output_file": {"id": "937fece563fc0809", "src": "hda", "uuid": "500f1cdf-b4d6-45fc-bcb1-72ad38202e0f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 12:54:50", "plugin": "core", "name": "end_epoch", "raw_value": "1713272090.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:54:50", "plugin": "core", "name": "start_epoch", "raw_value": "1713272090.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_reheader/1.10-2", "has_data": true, "data": {"tool_id": "bcftools_reheader", "tool_version": "1.10", "test_index": 2, "time_seconds": 25.789405584335327, "inputs": {"input_file": {"src": "hda", "id": "2327b3efb1b89ce3"}, "sec_default|rename_samples|sample_file": {"src": "hda", "id": "0d364b43c8fab680"}, "sec_default|rename_samples|samples_src": "history", "output_type": "v"}, "job": {"model_class": "Job", "id": "41e94d8d7634b3e0", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:55:24.614333", "create_time": "2024-04-16T12:55:14.434688", "galaxy_version": "23.1", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_reheader/bcftools_reheader/1.10", "history_id": "92339b0b40a5ec99", "external_id": "gxy-6mjp9", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/0/1/2/dataset_012470a1-9b98-4d3b-afed-d4f68cf06f4f.dat' > input.vcf.gz && bcftools index input.vcf.gz &&   bcftools reheader    --samples \"/galaxy/server/database/objects/5/2/7/dataset_527f1abe-c668-4cb1-8f11-9220fccb7460.dat\"   input.vcf.gz  | bcftools view  --output-type 'v'  > '/galaxy/server/database/objects/5/4/e/dataset_54e742b8-fdeb-4648-910b-9b3618b8f6cc.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_default": "{\"header\": null, \"rename_samples\": {\"__current_case__\": 1, \"sample_file\": {\"values\": [{\"id\": 107, \"src\": \"hda\"}]}, \"samples_src\": \"history\"}}"}, "inputs": {"input_file": {"id": "2327b3efb1b89ce3", "src": "hda", "uuid": "012470a1-9b98-4d3b-afed-d4f68cf06f4f"}, "sec_default|rename_samples|sample_file": {"id": "0d364b43c8fab680", "src": "hda", "uuid": "527f1abe-c668-4cb1-8f11-9220fccb7460"}}, "outputs": {"output_file": {"id": "b49509f87dcfd0f4", "src": "hda", "uuid": "54e742b8-fdeb-4648-910b-9b3618b8f6cc"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 12:55:16", "plugin": "core", "name": "end_epoch", "raw_value": "1713272116.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:55:16", "plugin": "core", "name": "start_epoch", "raw_value": "1713272116.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deeptools_multi_bigwig_summary/3.3.2.0.0-0", "has_data": true, "data": {"tool_id": "deeptools_multi_bigwig_summary", "tool_version": "3.3.2.0.0", "test_index": 0, "time_seconds": 51.97666072845459, "inputs": {"multibigwig_conditional|bigwigfiles": [{"src": "hda", "id": "af7871bc2eb674a3"}, {"src": "hda", "id": "af7871bc2eb674a3"}], "mode|binSize": "10", "mode|modeOpt": "bins"}, "job": {"model_class": "Job", "id": "39c7146642e2f59a", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:06:58.235118", "create_time": "2024-04-16T13:06:22.670862", "galaxy_version": "23.1", "command_version": "multiBigwigSummary 3.3.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/deeptools_multi_bigwig_summary/deeptools_multi_bigwig_summary/3.3.2.0.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-45bgn", "command_line": "ln -f -s '/galaxy/server/database/objects/c/1/6/dataset_c1638d95-ffc7-4505-ad3b-61acfb95874b.dat' 'test.bw_0.bw' && ln -f -s '/galaxy/server/database/objects/c/1/6/dataset_c1638d95-ffc7-4505-ad3b-61acfb95874b.dat' 'test.bw_1.bw' &&    multiBigwigSummary bins  --numberOfProcessors \"${GALAXY_SLOTS:-4}\"  --outFileName /galaxy/server/database/objects/e/8/1/dataset_e81b26c6-4bf1-463b-8f4d-c08aa0c37be6.dat  --bwfiles 'test.bw_0.bw' 'test.bw_1.bw' --labels 'test.bw' 'test.bw'   --binSize '10' --distanceBetweenBins '0'", "traceback": null, "params": {"__input_ext": "\"bigwig\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advancedOpt": "{\"__current_case__\": 0, \"showAdvancedOpt\": \"no\"}", "outRawCounts": "false", "region": "\"\"", "mode": "{\"__current_case__\": 0, \"binSize\": \"10\", \"distanceBetweenBins\": \"0\", \"modeOpt\": \"bins\"}", "custom_sample_labels_conditional": "{\"__current_case__\": 0, \"custom_labels_select\": \"No\"}", "multibigwig_conditional": "{\"__current_case__\": 0, \"bigwigfiles\": {\"values\": [{\"id\": 147, \"src\": \"hda\"}, {\"id\": 147, \"src\": \"hda\"}]}, \"orderMatters\": \"No\"}"}, "inputs": {"multibigwig_conditional|bigwigfiles2": {"id": "af7871bc2eb674a3", "src": "hda", "uuid": "c1638d95-ffc7-4505-ad3b-61acfb95874b"}, "multibigwig_conditional|bigwigfiles1": {"id": "af7871bc2eb674a3", "src": "hda", "uuid": "c1638d95-ffc7-4505-ad3b-61acfb95874b"}, "multibigwig_conditional|bigwigfiles": {"id": "af7871bc2eb674a3", "src": "hda", "uuid": "c1638d95-ffc7-4505-ad3b-61acfb95874b"}}, "outputs": {"outFile": {"id": "a310ade7779c7ad8", "src": "hda", "uuid": "e81b26c6-4bf1-463b-8f4d-c08aa0c37be6"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Number of bins found: 120\n", "job_stdout": "", "job_stderr": "", "stderr": "Number of bins found: 120\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-04-16 13:06:42", "plugin": "core", "name": "end_epoch", "raw_value": "1713272802.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:06:41", "plugin": "core", "name": "start_epoch", "raw_value": "1713272801.0000000"}, {"title": "Memory Allocated (MB)", "value": "42949", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "42949.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "fasta_compute_length/1.0.3-0", "has_data": true, "data": {"tool_id": "fasta_compute_length", "tool_version": "1.0.3", "test_index": 0, "time_seconds": 28.84439969062805, "inputs": {"ref|input": {"src": "hda", "id": "0f96a559d9972b90"}, "ref|keep_first": "0", "ref|keep_first_word": false}, "job": {"model_class": "Job", "id": "d153eab2366010d4", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:50:09.317118", "create_time": "2024-04-16T12:49:55.395149", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/fasta_compute_length/fasta_compute_length/1.0.3", "history_id": "92339b0b40a5ec99", "external_id": "gxy-m7hpd", "command_line": "python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/devteam/fasta_compute_length/7d37cfda8e00/fasta_compute_length/fasta_compute_length.py' '/galaxy/server/database/objects/1/6/1/dataset_161cb3df-8938-4513-8631-dac18f90f798.dat' '/galaxy/server/database/objects/0/4/e/dataset_04e8d3c1-603b-44e6-ad7f-563bd368ef71.dat' 0 id_and_desc", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "ref": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 79, \"src\": \"hda\"}]}, \"keep_first\": \"0\", \"keep_first_word\": false, \"ref_source\": \"history\"}"}, "inputs": {"ref|input": {"id": "0f96a559d9972b90", "src": "hda", "uuid": "161cb3df-8938-4513-8631-dac18f90f798"}}, "outputs": {"output": {"id": "d09bd146364175a2", "src": "hda", "uuid": "04e8d3c1-603b-44e6-ad7f-563bd368ef71"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-04-16 12:50:01", "plugin": "core", "name": "end_epoch", "raw_value": "1713271801.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:50:00", "plugin": "core", "name": "start_epoch", "raw_value": "1713271800.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "fasta_compute_length/1.0.3-1", "has_data": true, "data": {"tool_id": "fasta_compute_length", "tool_version": "1.0.3", "test_index": 1, "time_seconds": 24.272615671157837, "inputs": {"ref|input": {"src": "hda", "id": "2f9cf426a56347b9"}, "ref|keep_first": "0", "ref|keep_first_word": false}, "job": {"model_class": "Job", "id": "3b9a027f06b83816", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:50:33.592366", "create_time": "2024-04-16T12:50:23.924755", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/fasta_compute_length/fasta_compute_length/1.0.3", "history_id": "92339b0b40a5ec99", "external_id": "gxy-bvt8t", "command_line": "python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/devteam/fasta_compute_length/7d37cfda8e00/fasta_compute_length/fasta_compute_length.py' '/galaxy/server/database/objects/0/9/a/dataset_09aeb704-c1b0-424d-a0a1-0d8df11b5dc5.dat' '/galaxy/server/database/objects/0/9/8/dataset_098ee6d3-e347-440d-92b9-3b2f8250beee.dat' 0 id_and_desc", "traceback": null, "params": {"ref": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 81, \"src\": \"hda\"}]}, \"keep_first\": \"0\", \"keep_first_word\": false, \"ref_source\": \"history\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"ref|input": {"id": "2f9cf426a56347b9", "src": "hda", "uuid": "09aeb704-c1b0-424d-a0a1-0d8df11b5dc5"}}, "outputs": {"output": {"id": "0d6cc3409d544259", "src": "hda", "uuid": "098ee6d3-e347-440d-92b9-3b2f8250beee"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 12:50:25", "plugin": "core", "name": "end_epoch", "raw_value": "1713271825.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:50:25", "plugin": "core", "name": "start_epoch", "raw_value": "1713271825.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "fasta_compute_length/1.0.3-2", "has_data": true, "data": {"tool_id": "fasta_compute_length", "tool_version": "1.0.3", "test_index": 2, "time_seconds": 24.26137137413025, "inputs": {"ref|input": {"src": "hda", "id": "4dfc27855872ae3f"}, "ref|keep_first": "14", "ref|keep_first_word": false}, "job": {"model_class": "Job", "id": "7f5ed008e48a3055", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:50:57.830385", "create_time": "2024-04-16T12:50:48.275367", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/fasta_compute_length/fasta_compute_length/1.0.3", "history_id": "92339b0b40a5ec99", "external_id": "gxy-8x5kj", "command_line": "python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/devteam/fasta_compute_length/7d37cfda8e00/fasta_compute_length/fasta_compute_length.py' '/galaxy/server/database/objects/7/5/d/dataset_75dcd59d-32c7-4378-bbdc-8008b45e9b45.dat' '/galaxy/server/database/objects/8/6/a/dataset_86a92cf1-32d3-44d0-81f8-b39722a4a919.dat' 14 id_and_desc", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "ref": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 83, \"src\": \"hda\"}]}, \"keep_first\": \"14\", \"keep_first_word\": false, \"ref_source\": \"history\"}"}, "inputs": {"ref|input": {"id": "4dfc27855872ae3f", "src": "hda", "uuid": "75dcd59d-32c7-4378-bbdc-8008b45e9b45"}}, "outputs": {"output": {"id": "83c806fa93f0cdc0", "src": "hda", "uuid": "86a92cf1-32d3-44d0-81f8-b39722a4a919"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 12:50:49", "plugin": "core", "name": "end_epoch", "raw_value": "1713271849.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:50:49", "plugin": "core", "name": "start_epoch", "raw_value": "1713271849.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "fasta_compute_length/1.0.3-3", "has_data": true, "data": {"tool_id": "fasta_compute_length", "tool_version": "1.0.3", "test_index": 3, "status": "skip"}}, {"id": "fasta_compute_length/1.0.3-4", "has_data": true, "data": {"tool_id": "fasta_compute_length", "tool_version": "1.0.3", "test_index": 4, "status": "skip"}}, {"id": "flye/2.6-0", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.6", "test_index": 0, "time_seconds": 108.05686402320862, "inputs": {"inputs": {"src": "hda", "id": "e54204b21ac79a00"}, "mode": "--pacbio-raw", "g": "10000"}, "job": {"model_class": "Job", "id": "bdb506192279643c", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:58:09.696496", "create_time": "2024-04-16T12:56:37.845973", "galaxy_version": "23.1", "command_version": "2.6-release", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.6", "history_id": "92339b0b40a5ec99", "external_id": "gxy-qbpcv", "command_line": "ln -s '/galaxy/server/database/objects/7/d/2/dataset_7d2c8fb0-df94-49fd-a0df-9095e5f7f55f.dat' ./input_0.fasta &&  flye --pacbio-raw ./input_0.fasta  -o out_dir -g '10000' -t ${GALAXY_SLOTS:-4} -i 1    2>&1", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "no_trestle": "false", "meta": "false", "plasmids": "false", "asm": "\"\"", "m": "\"\"", "i": "\"1\"", "g": "\"10000\"", "mode": "\"--pacbio-raw\""}, "inputs": {"inputs": {"id": "e54204b21ac79a00", "src": "hda", "uuid": "7d2c8fb0-df94-49fd-a0df-9095e5f7f55f"}, "inputs1": {"id": "e54204b21ac79a00", "src": "hda", "uuid": "7d2c8fb0-df94-49fd-a0df-9095e5f7f55f"}}, "outputs": {"consensus": {"id": "309acd470a009fa2", "src": "hda", "uuid": "c3d4df30-0343-4c39-ac4d-5f04a1cc7767"}, "assembly_graph": {"id": "14f4838d2c72024e", "src": "hda", "uuid": "6bd35ec9-9070-4d83-b391-07113b480191"}, "assembly_gfa": {"id": "db6048663ac19a6d", "src": "hda", "uuid": "b4000191-f38e-496b-b1e5-f851432a2ab8"}, "assembly_info": {"id": "4a2813ba43996077", "src": "hda", "uuid": "df63bd15-6ef2-4997-b5c3-2ba1a42d96cd"}, "flye_log": {"id": "5c8e89903bb3de30", "src": "hda", "uuid": "4dca5f2f-a6da-45fc-a307-0aa632d74afb"}}, "output_collections": {}, "tool_stdout": "[2024-04-16 12:56:45] INFO: Starting Flye 2.6-release\n[2024-04-16 12:56:45] INFO: >>>STAGE: configure\n[2024-04-16 12:56:45] INFO: Configuring run\n[2024-04-16 12:56:45] INFO: Total read length: 1466260\n[2024-04-16 12:56:45] INFO: Input genome size: 10000\n[2024-04-16 12:56:45] INFO: Estimated coverage: 146\n[2024-04-16 12:56:45] INFO: Reads N50/N90: 9054 / 4697\n[2024-04-16 12:56:45] INFO: Minimum overlap set to 5000\n[2024-04-16 12:56:45] INFO: Selected k-mer size: 15\n[2024-04-16 12:56:45] INFO: >>>STAGE: assembly\n[2024-04-16 12:56:45] INFO: Assembling disjointigs\n[2024-04-16 12:56:45] INFO: Reading sequences\n[2024-04-16 12:56:45] INFO: Generating solid k-mer index\n[2024-04-16 12:57:06] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:57:06] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:57:06] INFO: Filling index table\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:57:10] INFO: Extending reads\n[2024-04-16 12:57:13] INFO: Overlap-based coverage: 25\n[2024-04-16 12:57:13] INFO: Median overlap divergence: 0.169052\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:57:13] INFO: Assembled 1 disjointigs\n[2024-04-16 12:57:13] INFO: Generating sequence\n10% 20% 40% 50% 70% 80% 100% \n[2024-04-16 12:57:13] INFO: >>>STAGE: consensus\n[2024-04-16 12:57:13] INFO: Running Minimap2\n[2024-04-16 12:57:14] INFO: Computing consensus\n[2024-04-16 12:57:14] INFO: Alignment error rate: 0.158711\n[2024-04-16 12:57:14] INFO: >>>STAGE: repeat\n[2024-04-16 12:57:14] INFO: Building and resolving repeat graph\n[2024-04-16 12:57:14] INFO: Reading sequences\n[2024-04-16 12:57:14] INFO: Building repeat graph\n50% 100% \n[2024-04-16 12:57:36] INFO: Median overlap divergence: 0\n[2024-04-16 12:57:36] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:57:58] INFO: Aligned read sequence: 1184568 / 1313105 (0.902112)\n[2024-04-16 12:57:58] INFO: Median overlap divergence: 0.0607255\n[2024-04-16 12:57:58] INFO: Mean edge coverage: 29\n[2024-04-16 12:57:58] INFO: Resolving repeats\n[2024-04-16 12:57:58] INFO: >>>STAGE: trestle\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c654c00000004d'\n[2024-04-16 12:57:58] INFO: Simple unbridged repeats: 0\n[2024-04-16 12:57:58] INFO: Resolved: 0\n[2024-04-16 12:57:58] INFO: >>>STAGE: contigger\n[2024-04-16 12:57:58] INFO: Generating contigs\n[2024-04-16 12:57:58] INFO: Reading sequences\n[2024-04-16 12:57:58] INFO: Generated 1 contigs\n[2024-04-16 12:57:58] INFO: Added 0 scaffold connections\n[2024-04-16 12:57:58] INFO: >>>STAGE: polishing\n[2024-04-16 12:57:58] INFO: Polishing genome (1/1)\n[2024-04-16 12:57:58] INFO: Running minimap2\n[2024-04-16 12:57:59] INFO: Separating alignment into bubbles\n[2024-04-16 12:58:00] INFO: Alignment error rate: 0.101562\n[2024-04-16 12:58:00] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c654d70000004e'\n[2024-04-16 12:58:00] INFO: >>>STAGE: finalize\n[2024-04-16 12:58:01] INFO: Assembly statistics:\n\n\tTotal length:\t39948\n\tFragments:\t1\n\tFragments N50:\t39948\n\tLargest frg:\t39948\n\tScaffolds:\t0\n\tMean coverage:\t28\n\n[2024-04-16 12:58:01] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/71/working/out_dir/assembly.fasta\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[2024-04-16 12:56:45] INFO: Starting Flye 2.6-release\n[2024-04-16 12:56:45] INFO: >>>STAGE: configure\n[2024-04-16 12:56:45] INFO: Configuring run\n[2024-04-16 12:56:45] INFO: Total read length: 1466260\n[2024-04-16 12:56:45] INFO: Input genome size: 10000\n[2024-04-16 12:56:45] INFO: Estimated coverage: 146\n[2024-04-16 12:56:45] INFO: Reads N50/N90: 9054 / 4697\n[2024-04-16 12:56:45] INFO: Minimum overlap set to 5000\n[2024-04-16 12:56:45] INFO: Selected k-mer size: 15\n[2024-04-16 12:56:45] INFO: >>>STAGE: assembly\n[2024-04-16 12:56:45] INFO: Assembling disjointigs\n[2024-04-16 12:56:45] INFO: Reading sequences\n[2024-04-16 12:56:45] INFO: Generating solid k-mer index\n[2024-04-16 12:57:06] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:57:06] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:57:06] INFO: Filling index table\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:57:10] INFO: Extending reads\n[2024-04-16 12:57:13] INFO: Overlap-based coverage: 25\n[2024-04-16 12:57:13] INFO: Median overlap divergence: 0.169052\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:57:13] INFO: Assembled 1 disjointigs\n[2024-04-16 12:57:13] INFO: Generating sequence\n10% 20% 40% 50% 70% 80% 100% \n[2024-04-16 12:57:13] INFO: >>>STAGE: consensus\n[2024-04-16 12:57:13] INFO: Running Minimap2\n[2024-04-16 12:57:14] INFO: Computing consensus\n[2024-04-16 12:57:14] INFO: Alignment error rate: 0.158711\n[2024-04-16 12:57:14] INFO: >>>STAGE: repeat\n[2024-04-16 12:57:14] INFO: Building and resolving repeat graph\n[2024-04-16 12:57:14] INFO: Reading sequences\n[2024-04-16 12:57:14] INFO: Building repeat graph\n50% 100% \n[2024-04-16 12:57:36] INFO: Median overlap divergence: 0\n[2024-04-16 12:57:36] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:57:58] INFO: Aligned read sequence: 1184568 / 1313105 (0.902112)\n[2024-04-16 12:57:58] INFO: Median overlap divergence: 0.0607255\n[2024-04-16 12:57:58] INFO: Mean edge coverage: 29\n[2024-04-16 12:57:58] INFO: Resolving repeats\n[2024-04-16 12:57:58] INFO: >>>STAGE: trestle\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c654c00000004d'\n[2024-04-16 12:57:58] INFO: Simple unbridged repeats: 0\n[2024-04-16 12:57:58] INFO: Resolved: 0\n[2024-04-16 12:57:58] INFO: >>>STAGE: contigger\n[2024-04-16 12:57:58] INFO: Generating contigs\n[2024-04-16 12:57:58] INFO: Reading sequences\n[2024-04-16 12:57:58] INFO: Generated 1 contigs\n[2024-04-16 12:57:58] INFO: Added 0 scaffold connections\n[2024-04-16 12:57:58] INFO: >>>STAGE: polishing\n[2024-04-16 12:57:58] INFO: Polishing genome (1/1)\n[2024-04-16 12:57:58] INFO: Running minimap2\n[2024-04-16 12:57:59] INFO: Separating alignment into bubbles\n[2024-04-16 12:58:00] INFO: Alignment error rate: 0.101562\n[2024-04-16 12:58:00] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c654d70000004e'\n[2024-04-16 12:58:00] INFO: >>>STAGE: finalize\n[2024-04-16 12:58:01] INFO: Assembly statistics:\n\n\tTotal length:\t39948\n\tFragments:\t1\n\tFragments N50:\t39948\n\tLargest frg:\t39948\n\tScaffolds:\t0\n\tMean coverage:\t28\n\n[2024-04-16 12:58:01] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/71/working/out_dir/assembly.fasta\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "77.0000000"}, {"title": "Job End Time", "value": "2024-04-16 12:58:01", "plugin": "core", "name": "end_epoch", "raw_value": "1713272281.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:56:44", "plugin": "core", "name": "start_epoch", "raw_value": "1713272204.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "flye/2.6-1", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.6", "test_index": 1, "time_seconds": 102.88740754127502, "inputs": {"inputs": {"src": "hda", "id": "ad38ad7059c02086"}, "mode": "--nano-raw", "g": "10000"}, "job": {"model_class": "Job", "id": "5ff62276200360ba", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:59:52.801031", "create_time": "2024-04-16T12:58:26.912546", "galaxy_version": "23.1", "command_version": "2.6-release", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.6", "history_id": "92339b0b40a5ec99", "external_id": "gxy-qsv6j", "command_line": "ln -s '/galaxy/server/database/objects/c/0/d/dataset_c0d9cd92-78e4-4dd1-a255-12cdf8785b9a.dat' ./input_0.fasta &&  flye --nano-raw ./input_0.fasta  -o out_dir -g '10000' -t ${GALAXY_SLOTS:-4} -i 1    2>&1", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "no_trestle": "false", "meta": "false", "plasmids": "false", "asm": "\"\"", "m": "\"\"", "i": "\"1\"", "g": "\"10000\"", "mode": "\"--nano-raw\""}, "inputs": {"inputs": {"id": "ad38ad7059c02086", "src": "hda", "uuid": "c0d9cd92-78e4-4dd1-a255-12cdf8785b9a"}, "inputs1": {"id": "ad38ad7059c02086", "src": "hda", "uuid": "c0d9cd92-78e4-4dd1-a255-12cdf8785b9a"}}, "outputs": {"consensus": {"id": "cfdd485d4d2c7002", "src": "hda", "uuid": "0096798e-83ed-4b3a-8c9d-c007a4c302d6"}, "assembly_graph": {"id": "379dedc0c2c26495", "src": "hda", "uuid": "5f81c592-0b2c-4767-bece-fc737f9f258c"}, "assembly_gfa": {"id": "2a8753f14ef36ffe", "src": "hda", "uuid": "1dcbca33-1458-466f-8efa-3d7bad6e1ddc"}, "assembly_info": {"id": "d5c7c8c80b686988", "src": "hda", "uuid": "40c228a1-b70e-4efa-a590-967c06edfb5f"}, "flye_log": {"id": "48a1c72085dcce39", "src": "hda", "uuid": "430f0a35-38d6-4b6a-a99c-e7d704ae1522"}}, "output_collections": {}, "tool_stdout": "[2024-04-16 12:58:29] INFO: Starting Flye 2.6-release\n[2024-04-16 12:58:29] INFO: >>>STAGE: configure\n[2024-04-16 12:58:29] INFO: Configuring run\n[2024-04-16 12:58:29] INFO: Total read length: 1466260\n[2024-04-16 12:58:29] INFO: Input genome size: 10000\n[2024-04-16 12:58:29] INFO: Estimated coverage: 146\n[2024-04-16 12:58:29] INFO: Reads N50/N90: 9054 / 4697\n[2024-04-16 12:58:29] INFO: Minimum overlap set to 5000\n[2024-04-16 12:58:29] INFO: Selected k-mer size: 15\n[2024-04-16 12:58:29] INFO: >>>STAGE: assembly\n[2024-04-16 12:58:29] INFO: Assembling disjointigs\n[2024-04-16 12:58:29] INFO: Reading sequences\n[2024-04-16 12:58:29] INFO: Generating solid k-mer index\n[2024-04-16 12:58:50] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:58:50] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:58:50] INFO: Filling index table\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:58:54] INFO: Extending reads\n[2024-04-16 12:58:57] INFO: Overlap-based coverage: 25\n[2024-04-16 12:58:57] INFO: Median overlap divergence: 0.169063\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:58:57] INFO: Assembled 1 disjointigs\n[2024-04-16 12:58:57] INFO: Generating sequence\n10% 20% 40% 50% 70% 80% 100% \n[2024-04-16 12:58:57] INFO: >>>STAGE: consensus\n[2024-04-16 12:58:57] INFO: Running Minimap2\n[2024-04-16 12:58:57] INFO: Computing consensus\n[2024-04-16 12:58:58] INFO: Alignment error rate: 0.156815\n[2024-04-16 12:58:58] INFO: >>>STAGE: repeat\n[2024-04-16 12:58:58] INFO: Building and resolving repeat graph\n[2024-04-16 12:58:58] INFO: Reading sequences\n[2024-04-16 12:58:58] INFO: Building repeat graph\n50% 100% \n[2024-04-16 12:59:20] INFO: Median overlap divergence: 0\n[2024-04-16 12:59:20] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:59:42] INFO: Aligned read sequence: 1184563 / 1313105 (0.902108)\n[2024-04-16 12:59:42] INFO: Median overlap divergence: 0.0610287\n[2024-04-16 12:59:42] INFO: Mean edge coverage: 29\n[2024-04-16 12:59:42] INFO: Resolving repeats\n[2024-04-16 12:59:42] INFO: >>>STAGE: trestle\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c6553300000050'\n[2024-04-16 12:59:42] INFO: Simple unbridged repeats: 0\n[2024-04-16 12:59:42] INFO: Resolved: 0\n[2024-04-16 12:59:42] INFO: >>>STAGE: contigger\n[2024-04-16 12:59:42] INFO: Generating contigs\n[2024-04-16 12:59:42] INFO: Reading sequences\n[2024-04-16 12:59:42] INFO: Generated 1 contigs\n[2024-04-16 12:59:42] INFO: Added 0 scaffold connections\n[2024-04-16 12:59:42] INFO: >>>STAGE: polishing\n[2024-04-16 12:59:42] INFO: Polishing genome (1/1)\n[2024-04-16 12:59:42] INFO: Running minimap2\n[2024-04-16 12:59:42] INFO: Separating alignment into bubbles\n[2024-04-16 12:59:43] INFO: Alignment error rate: 0.101979\n[2024-04-16 12:59:43] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c6554a00000051'\n[2024-04-16 12:59:44] INFO: >>>STAGE: finalize\n[2024-04-16 12:59:44] INFO: Assembly statistics:\n\n\tTotal length:\t40422\n\tFragments:\t1\n\tFragments N50:\t40422\n\tLargest frg:\t40422\n\tScaffolds:\t0\n\tMean coverage:\t27\n\n[2024-04-16 12:59:44] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/73/working/out_dir/assembly.fasta\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[2024-04-16 12:58:29] INFO: Starting Flye 2.6-release\n[2024-04-16 12:58:29] INFO: >>>STAGE: configure\n[2024-04-16 12:58:29] INFO: Configuring run\n[2024-04-16 12:58:29] INFO: Total read length: 1466260\n[2024-04-16 12:58:29] INFO: Input genome size: 10000\n[2024-04-16 12:58:29] INFO: Estimated coverage: 146\n[2024-04-16 12:58:29] INFO: Reads N50/N90: 9054 / 4697\n[2024-04-16 12:58:29] INFO: Minimum overlap set to 5000\n[2024-04-16 12:58:29] INFO: Selected k-mer size: 15\n[2024-04-16 12:58:29] INFO: >>>STAGE: assembly\n[2024-04-16 12:58:29] INFO: Assembling disjointigs\n[2024-04-16 12:58:29] INFO: Reading sequences\n[2024-04-16 12:58:29] INFO: Generating solid k-mer index\n[2024-04-16 12:58:50] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:58:50] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:58:50] INFO: Filling index table\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:58:54] INFO: Extending reads\n[2024-04-16 12:58:57] INFO: Overlap-based coverage: 25\n[2024-04-16 12:58:57] INFO: Median overlap divergence: 0.169063\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:58:57] INFO: Assembled 1 disjointigs\n[2024-04-16 12:58:57] INFO: Generating sequence\n10% 20% 40% 50% 70% 80% 100% \n[2024-04-16 12:58:57] INFO: >>>STAGE: consensus\n[2024-04-16 12:58:57] INFO: Running Minimap2\n[2024-04-16 12:58:57] INFO: Computing consensus\n[2024-04-16 12:58:58] INFO: Alignment error rate: 0.156815\n[2024-04-16 12:58:58] INFO: >>>STAGE: repeat\n[2024-04-16 12:58:58] INFO: Building and resolving repeat graph\n[2024-04-16 12:58:58] INFO: Reading sequences\n[2024-04-16 12:58:58] INFO: Building repeat graph\n50% 100% \n[2024-04-16 12:59:20] INFO: Median overlap divergence: 0\n[2024-04-16 12:59:20] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 12:59:42] INFO: Aligned read sequence: 1184563 / 1313105 (0.902108)\n[2024-04-16 12:59:42] INFO: Median overlap divergence: 0.0610287\n[2024-04-16 12:59:42] INFO: Mean edge coverage: 29\n[2024-04-16 12:59:42] INFO: Resolving repeats\n[2024-04-16 12:59:42] INFO: >>>STAGE: trestle\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c6553300000050'\n[2024-04-16 12:59:42] INFO: Simple unbridged repeats: 0\n[2024-04-16 12:59:42] INFO: Resolved: 0\n[2024-04-16 12:59:42] INFO: >>>STAGE: contigger\n[2024-04-16 12:59:42] INFO: Generating contigs\n[2024-04-16 12:59:42] INFO: Reading sequences\n[2024-04-16 12:59:42] INFO: Generated 1 contigs\n[2024-04-16 12:59:42] INFO: Added 0 scaffold connections\n[2024-04-16 12:59:42] INFO: >>>STAGE: polishing\n[2024-04-16 12:59:42] INFO: Polishing genome (1/1)\n[2024-04-16 12:59:42] INFO: Running minimap2\n[2024-04-16 12:59:42] INFO: Separating alignment into bubbles\n[2024-04-16 12:59:43] INFO: Alignment error rate: 0.101979\n[2024-04-16 12:59:43] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c6554a00000051'\n[2024-04-16 12:59:44] INFO: >>>STAGE: finalize\n[2024-04-16 12:59:44] INFO: Assembly statistics:\n\n\tTotal length:\t40422\n\tFragments:\t1\n\tFragments N50:\t40422\n\tLargest frg:\t40422\n\tScaffolds:\t0\n\tMean coverage:\t27\n\n[2024-04-16 12:59:44] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/73/working/out_dir/assembly.fasta\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "76.0000000"}, {"title": "Job End Time", "value": "2024-04-16 12:59:44", "plugin": "core", "name": "end_epoch", "raw_value": "1713272384.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:58:28", "plugin": "core", "name": "start_epoch", "raw_value": "1713272308.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "flye/2.6-2", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.6", "test_index": 2, "time_seconds": 102.82538509368896, "inputs": {"inputs": {"src": "hda", "id": "818bb54439c80c18"}, "mode": "--nano-corr", "g": "10000", "i": "2", "asm": "40"}, "job": {"model_class": "Job", "id": "b29039e8e2cbb920", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:01:35.502725", "create_time": "2024-04-16T13:00:10.193899", "galaxy_version": "23.1", "command_version": "2.6-release", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.6", "history_id": "92339b0b40a5ec99", "external_id": "gxy-4qmnm", "command_line": "ln -s '/galaxy/server/database/objects/d/7/7/dataset_d774183c-38fe-4497-bbe1-c0ccd554be50.dat' ./input_0.fasta &&  flye --nano-corr ./input_0.fasta  -o out_dir -g '10000' -t ${GALAXY_SLOTS:-4} -i 2 --asm-coverage '40'    2>&1", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "no_trestle": "false", "meta": "false", "plasmids": "false", "asm": "\"40\"", "m": "\"\"", "i": "\"2\"", "g": "\"10000\"", "mode": "\"--nano-corr\""}, "inputs": {"inputs": {"id": "818bb54439c80c18", "src": "hda", "uuid": "d774183c-38fe-4497-bbe1-c0ccd554be50"}, "inputs1": {"id": "818bb54439c80c18", "src": "hda", "uuid": "d774183c-38fe-4497-bbe1-c0ccd554be50"}}, "outputs": {"consensus": {"id": "8e1ea45578d6c4de", "src": "hda", "uuid": "6b49894d-e990-48db-abb4-20581dba6a9c"}, "assembly_graph": {"id": "f7a320d5b7b411a9", "src": "hda", "uuid": "d72d3463-6dff-4626-aca8-3648847a6216"}, "assembly_gfa": {"id": "4f3ea1fc26f3e5f1", "src": "hda", "uuid": "9822b3bb-a084-47d9-bc73-e3b79e23d5b6"}, "assembly_info": {"id": "72c154df652f3fa2", "src": "hda", "uuid": "f8771292-bd00-405c-9cce-3e1c568f4813"}, "flye_log": {"id": "920b8a8584a3c041", "src": "hda", "uuid": "98b9ab66-0c75-4286-84aa-f9facaf4a9a3"}}, "output_collections": {}, "tool_stdout": "[2024-04-16 13:00:12] INFO: Starting Flye 2.6-release\n[2024-04-16 13:00:12] INFO: >>>STAGE: configure\n[2024-04-16 13:00:12] INFO: Configuring run\n[2024-04-16 13:00:12] INFO: Total read length: 1466260\n[2024-04-16 13:00:12] INFO: Input genome size: 10000\n[2024-04-16 13:00:12] INFO: Estimated coverage: 146\n[2024-04-16 13:00:12] INFO: Reads N50/N90: 9054 / 4697\n[2024-04-16 13:00:12] INFO: Minimum overlap set to 5000\n[2024-04-16 13:00:12] INFO: Selected k-mer size: 17\n[2024-04-16 13:00:12] INFO: Using longest 40x reads for contig assembly\n[2024-04-16 13:00:12] INFO: >>>STAGE: assembly\n[2024-04-16 13:00:12] INFO: Assembling disjointigs\n[2024-04-16 13:00:12] INFO: Reading sequences\n[2024-04-16 13:00:12] INFO: Generating solid k-mer index\n[2024-04-16 13:00:33] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:00:33] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:00:34] INFO: Filling index table\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:00:36] INFO: Extending reads\n[2024-04-16 13:00:37] INFO: Overlap-based coverage: 3\n[2024-04-16 13:00:37] INFO: Median overlap divergence: 0.173468\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:00:37] INFO: Assembled 1 disjointigs\n[2024-04-16 13:00:37] INFO: Generating sequence\n10% 20% 40% 50% 70% 80% 100% \n[2024-04-16 13:00:37] INFO: >>>STAGE: consensus\n[2024-04-16 13:00:37] INFO: Running Minimap2\n[2024-04-16 13:00:37] INFO: Computing consensus\n[2024-04-16 13:00:38] INFO: Alignment error rate: 0.146313\n[2024-04-16 13:00:38] INFO: >>>STAGE: repeat\n[2024-04-16 13:00:38] INFO: Building and resolving repeat graph\n[2024-04-16 13:00:38] INFO: Reading sequences\n[2024-04-16 13:00:38] INFO: Building repeat graph\n50% 100% \n[2024-04-16 13:01:00] INFO: Median overlap divergence: 0\n[2024-04-16 13:01:00] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:01:22] INFO: Aligned read sequence: 1174263 / 1313105 (0.894264)\n[2024-04-16 13:01:22] INFO: Median overlap divergence: 0.0589391\n[2024-04-16 13:01:22] INFO: Mean edge coverage: 29\n[2024-04-16 13:01:22] INFO: Resolving repeats\n[2024-04-16 13:01:22] INFO: >>>STAGE: contigger\n[2024-04-16 13:01:22] INFO: Generating contigs\n[2024-04-16 13:01:22] INFO: Reading sequences\n[2024-04-16 13:01:22] INFO: Generated 1 contigs\n[2024-04-16 13:01:22] INFO: Added 0 scaffold connections\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c655a300000053'\n[2024-04-16 13:01:22] INFO: >>>STAGE: polishing\n[2024-04-16 13:01:22] INFO: Polishing genome (1/2)\n[2024-04-16 13:01:22] INFO: Running minimap2\n[2024-04-16 13:01:22] INFO: Separating alignment into bubbles\n[2024-04-16 13:01:23] INFO: Alignment error rate: 0.099017\n[2024-04-16 13:01:23] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c655b400000054'\n[2024-04-16 13:01:24] INFO: Polishing genome (2/2)\n[2024-04-16 13:01:24] INFO: Running minimap2\n[2024-04-16 13:01:24] INFO: Separating alignment into bubbles\n[2024-04-16 13:01:25] INFO: Alignment error rate: 0.094400\n[2024-04-16 13:01:25] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:01:26] INFO: >>>STAGE: finalize\n[2024-04-16 13:01:26] INFO: Assembly statistics:\n\n\tTotal length:\t40414\n\tFragments:\t1\n\tFragments N50:\t40414\n\tLargest frg:\t40414\n\tScaffolds:\t0\n\tMean coverage:\t27\n\n[2024-04-16 13:01:26] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/75/working/out_dir/assembly.fasta\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c655b600000056'\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[2024-04-16 13:00:12] INFO: Starting Flye 2.6-release\n[2024-04-16 13:00:12] INFO: >>>STAGE: configure\n[2024-04-16 13:00:12] INFO: Configuring run\n[2024-04-16 13:00:12] INFO: Total read length: 1466260\n[2024-04-16 13:00:12] INFO: Input genome size: 10000\n[2024-04-16 13:00:12] INFO: Estimated coverage: 146\n[2024-04-16 13:00:12] INFO: Reads N50/N90: 9054 / 4697\n[2024-04-16 13:00:12] INFO: Minimum overlap set to 5000\n[2024-04-16 13:00:12] INFO: Selected k-mer size: 17\n[2024-04-16 13:00:12] INFO: Using longest 40x reads for contig assembly\n[2024-04-16 13:00:12] INFO: >>>STAGE: assembly\n[2024-04-16 13:00:12] INFO: Assembling disjointigs\n[2024-04-16 13:00:12] INFO: Reading sequences\n[2024-04-16 13:00:12] INFO: Generating solid k-mer index\n[2024-04-16 13:00:33] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:00:33] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:00:34] INFO: Filling index table\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:00:36] INFO: Extending reads\n[2024-04-16 13:00:37] INFO: Overlap-based coverage: 3\n[2024-04-16 13:00:37] INFO: Median overlap divergence: 0.173468\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:00:37] INFO: Assembled 1 disjointigs\n[2024-04-16 13:00:37] INFO: Generating sequence\n10% 20% 40% 50% 70% 80% 100% \n[2024-04-16 13:00:37] INFO: >>>STAGE: consensus\n[2024-04-16 13:00:37] INFO: Running Minimap2\n[2024-04-16 13:00:37] INFO: Computing consensus\n[2024-04-16 13:00:38] INFO: Alignment error rate: 0.146313\n[2024-04-16 13:00:38] INFO: >>>STAGE: repeat\n[2024-04-16 13:00:38] INFO: Building and resolving repeat graph\n[2024-04-16 13:00:38] INFO: Reading sequences\n[2024-04-16 13:00:38] INFO: Building repeat graph\n50% 100% \n[2024-04-16 13:01:00] INFO: Median overlap divergence: 0\n[2024-04-16 13:01:00] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:01:22] INFO: Aligned read sequence: 1174263 / 1313105 (0.894264)\n[2024-04-16 13:01:22] INFO: Median overlap divergence: 0.0589391\n[2024-04-16 13:01:22] INFO: Mean edge coverage: 29\n[2024-04-16 13:01:22] INFO: Resolving repeats\n[2024-04-16 13:01:22] INFO: >>>STAGE: contigger\n[2024-04-16 13:01:22] INFO: Generating contigs\n[2024-04-16 13:01:22] INFO: Reading sequences\n[2024-04-16 13:01:22] INFO: Generated 1 contigs\n[2024-04-16 13:01:22] INFO: Added 0 scaffold connections\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c655a300000053'\n[2024-04-16 13:01:22] INFO: >>>STAGE: polishing\n[2024-04-16 13:01:22] INFO: Polishing genome (1/2)\n[2024-04-16 13:01:22] INFO: Running minimap2\n[2024-04-16 13:01:22] INFO: Separating alignment into bubbles\n[2024-04-16 13:01:23] INFO: Alignment error rate: 0.099017\n[2024-04-16 13:01:23] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c655b400000054'\n[2024-04-16 13:01:24] INFO: Polishing genome (2/2)\n[2024-04-16 13:01:24] INFO: Running minimap2\n[2024-04-16 13:01:24] INFO: Separating alignment into bubbles\n[2024-04-16 13:01:25] INFO: Alignment error rate: 0.094400\n[2024-04-16 13:01:25] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:01:26] INFO: >>>STAGE: finalize\n[2024-04-16 13:01:26] INFO: Assembly statistics:\n\n\tTotal length:\t40414\n\tFragments:\t1\n\tFragments N50:\t40414\n\tLargest frg:\t40414\n\tScaffolds:\t0\n\tMean coverage:\t27\n\n[2024-04-16 13:01:26] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/75/working/out_dir/assembly.fasta\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c655b600000056'\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "75.0000000"}, {"title": "Job End Time", "value": "2024-04-16 13:01:26", "plugin": "core", "name": "end_epoch", "raw_value": "1713272486.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:00:11", "plugin": "core", "name": "start_epoch", "raw_value": "1713272411.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "flye/2.6-3", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.6", "test_index": 3, "time_seconds": 104.06900072097778, "inputs": {"inputs": {"src": "hda", "id": "1def216db3ab0276"}, "mode": "--pacbio-raw", "g": "10000", "i": "1", "plasmids": true, "meta": true}, "job": {"model_class": "Job", "id": "c2703e7cad6a086e", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:03:19.674760", "create_time": "2024-04-16T13:01:51.924112", "galaxy_version": "23.1", "command_version": "2.6-release", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.6", "history_id": "92339b0b40a5ec99", "external_id": "gxy-7xnbl", "command_line": "ln -s '/galaxy/server/database/objects/4/3/e/dataset_43e3e42a-b95e-4e41-88e5-67d15cf9128b.dat' ./input_0.fasta &&  flye --pacbio-raw ./input_0.fasta  -o out_dir -g '10000' -t ${GALAXY_SLOTS:-4} -i 1 --plasmids --meta  2>&1", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "no_trestle": "false", "meta": "true", "plasmids": "true", "asm": "\"\"", "m": "\"\"", "i": "\"1\"", "g": "\"10000\"", "mode": "\"--pacbio-raw\""}, "inputs": {"inputs": {"id": "1def216db3ab0276", "src": "hda", "uuid": "43e3e42a-b95e-4e41-88e5-67d15cf9128b"}, "inputs1": {"id": "1def216db3ab0276", "src": "hda", "uuid": "43e3e42a-b95e-4e41-88e5-67d15cf9128b"}}, "outputs": {"consensus": {"id": "ad53c86a13597c0c", "src": "hda", "uuid": "0083dee1-2d03-4444-bd69-ae0fb43f3b56"}, "assembly_graph": {"id": "5a1cee76c1411534", "src": "hda", "uuid": "ce392679-6cfd-4544-8065-c12d4da2eca5"}, "assembly_gfa": {"id": "c0f2f710a6498b68", "src": "hda", "uuid": "9abcc278-ea92-4cc7-9b21-1b6a76f0e8fe"}, "assembly_info": {"id": "1c1bb16fb5499b62", "src": "hda", "uuid": "398507f9-5494-4f8b-adcc-31256398608c"}, "flye_log": {"id": "4e21a277b72ae18f", "src": "hda", "uuid": "9b56293e-4ecc-4420-a932-eb342f092edc"}}, "output_collections": {}, "tool_stdout": "[2024-04-16 13:01:53] INFO: Starting Flye 2.6-release\n[2024-04-16 13:01:53] INFO: >>>STAGE: configure\n[2024-04-16 13:01:53] INFO: Configuring run\n[2024-04-16 13:01:53] INFO: Total read length: 1466260\n[2024-04-16 13:01:53] INFO: Input genome size: 10000\n[2024-04-16 13:01:53] INFO: Estimated coverage: 146\n[2024-04-16 13:01:53] INFO: Reads N50/N90: 9054 / 4697\n[2024-04-16 13:01:53] INFO: Minimum overlap set to 5000\n[2024-04-16 13:01:53] INFO: Selected k-mer size: 15\n[2024-04-16 13:01:53] INFO: >>>STAGE: assembly\n[2024-04-16 13:01:53] INFO: Assembling disjointigs\n[2024-04-16 13:01:53] INFO: Reading sequences\n[2024-04-16 13:01:53] INFO: Generating solid k-mer index\n[2024-04-16 13:02:15] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:02:15] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:02:15] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:02:15] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:02:19] INFO: Extending reads\n[2024-04-16 13:02:22] INFO: Overlap-based coverage: 24\n[2024-04-16 13:02:22] INFO: Median overlap divergence: 0.184289\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:02:22] INFO: Assembled 1 disjointigs\n[2024-04-16 13:02:22] INFO: Generating sequence\n10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2024-04-16 13:02:22] INFO: >>>STAGE: consensus\n[2024-04-16 13:02:22] INFO: Running Minimap2\n[2024-04-16 13:02:22] INFO: Computing consensus\n[2024-04-16 13:02:23] INFO: Alignment error rate: 0.182990\n[2024-04-16 13:02:24] INFO: >>>STAGE: repeat\n[2024-04-16 13:02:24] INFO: Building and resolving repeat graph\n[2024-04-16 13:02:24] INFO: Reading sequences\n[2024-04-16 13:02:24] INFO: Building repeat graph\n50% 100% \n[2024-04-16 13:02:45] INFO: Median overlap divergence: 0\n[2024-04-16 13:02:45] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:03:07] INFO: Aligned read sequence: 1158758 / 1313105 (0.882456)\n[2024-04-16 13:03:07] INFO: Median overlap divergence: 0.0639983\n[2024-04-16 13:03:08] INFO: Mean edge coverage: 32\n[2024-04-16 13:03:08] INFO: Resolving repeats\n[2024-04-16 13:03:08] INFO: >>>STAGE: plasmids\n[2024-04-16 13:03:08] INFO: Recovering short unassembled sequences\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c6560f00000058'\n[2024-04-16 13:03:08] INFO: Added 0 extra contigs\n[2024-04-16 13:03:08] INFO: >>>STAGE: contigger\n[2024-04-16 13:03:08] INFO: Generating contigs\n[2024-04-16 13:03:08] INFO: Reading sequences\n[2024-04-16 13:03:08] INFO: Generated 1 contigs\n[2024-04-16 13:03:08] INFO: Added 0 scaffold connections\n[2024-04-16 13:03:08] INFO: >>>STAGE: polishing\n[2024-04-16 13:03:08] INFO: Polishing genome (1/1)\n[2024-04-16 13:03:08] INFO: Running minimap2\n[2024-04-16 13:03:08] INFO: Separating alignment into bubbles\n[2024-04-16 13:03:09] INFO: Alignment error rate: 0.115118\n[2024-04-16 13:03:09] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c6561f00000059'\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c6562b0000005a'\n[2024-04-16 13:03:10] INFO: >>>STAGE: finalize\n[2024-04-16 13:03:10] INFO: Assembly statistics:\n\n\tTotal length:\t35687\n\tFragments:\t1\n\tFragments N50:\t35687\n\tLargest frg:\t35687\n\tScaffolds:\t0\n\tMean coverage:\t35\n\n[2024-04-16 13:03:10] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/77/working/out_dir/assembly.fasta\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[2024-04-16 13:01:53] INFO: Starting Flye 2.6-release\n[2024-04-16 13:01:53] INFO: >>>STAGE: configure\n[2024-04-16 13:01:53] INFO: Configuring run\n[2024-04-16 13:01:53] INFO: Total read length: 1466260\n[2024-04-16 13:01:53] INFO: Input genome size: 10000\n[2024-04-16 13:01:53] INFO: Estimated coverage: 146\n[2024-04-16 13:01:53] INFO: Reads N50/N90: 9054 / 4697\n[2024-04-16 13:01:53] INFO: Minimum overlap set to 5000\n[2024-04-16 13:01:53] INFO: Selected k-mer size: 15\n[2024-04-16 13:01:53] INFO: >>>STAGE: assembly\n[2024-04-16 13:01:53] INFO: Assembling disjointigs\n[2024-04-16 13:01:53] INFO: Reading sequences\n[2024-04-16 13:01:53] INFO: Generating solid k-mer index\n[2024-04-16 13:02:15] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:02:15] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:02:15] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:02:15] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:02:19] INFO: Extending reads\n[2024-04-16 13:02:22] INFO: Overlap-based coverage: 24\n[2024-04-16 13:02:22] INFO: Median overlap divergence: 0.184289\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:02:22] INFO: Assembled 1 disjointigs\n[2024-04-16 13:02:22] INFO: Generating sequence\n10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2024-04-16 13:02:22] INFO: >>>STAGE: consensus\n[2024-04-16 13:02:22] INFO: Running Minimap2\n[2024-04-16 13:02:22] INFO: Computing consensus\n[2024-04-16 13:02:23] INFO: Alignment error rate: 0.182990\n[2024-04-16 13:02:24] INFO: >>>STAGE: repeat\n[2024-04-16 13:02:24] INFO: Building and resolving repeat graph\n[2024-04-16 13:02:24] INFO: Reading sequences\n[2024-04-16 13:02:24] INFO: Building repeat graph\n50% 100% \n[2024-04-16 13:02:45] INFO: Median overlap divergence: 0\n[2024-04-16 13:02:45] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-04-16 13:03:07] INFO: Aligned read sequence: 1158758 / 1313105 (0.882456)\n[2024-04-16 13:03:07] INFO: Median overlap divergence: 0.0639983\n[2024-04-16 13:03:08] INFO: Mean edge coverage: 32\n[2024-04-16 13:03:08] INFO: Resolving repeats\n[2024-04-16 13:03:08] INFO: >>>STAGE: plasmids\n[2024-04-16 13:03:08] INFO: Recovering short unassembled sequences\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c6560f00000058'\n[2024-04-16 13:03:08] INFO: Added 0 extra contigs\n[2024-04-16 13:03:08] INFO: >>>STAGE: contigger\n[2024-04-16 13:03:08] INFO: Generating contigs\n[2024-04-16 13:03:08] INFO: Reading sequences\n[2024-04-16 13:03:08] INFO: Generated 1 contigs\n[2024-04-16 13:03:08] INFO: Added 0 scaffold connections\n[2024-04-16 13:03:08] INFO: >>>STAGE: polishing\n[2024-04-16 13:03:08] INFO: Polishing genome (1/1)\n[2024-04-16 13:03:08] INFO: Running minimap2\n[2024-04-16 13:03:08] INFO: Separating alignment into bubbles\n[2024-04-16 13:03:09] INFO: Alignment error rate: 0.115118\n[2024-04-16 13:03:09] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c6561f00000059'\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs0000000000c6562b0000005a'\n[2024-04-16 13:03:10] INFO: >>>STAGE: finalize\n[2024-04-16 13:03:10] INFO: Assembly statistics:\n\n\tTotal length:\t35687\n\tFragments:\t1\n\tFragments N50:\t35687\n\tLargest frg:\t35687\n\tScaffolds:\t0\n\tMean coverage:\t35\n\n[2024-04-16 13:03:10] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/77/working/out_dir/assembly.fasta\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "77.0000000"}, {"title": "Job End Time", "value": "2024-04-16 13:03:10", "plugin": "core", "name": "end_epoch", "raw_value": "1713272590.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:01:53", "plugin": "core", "name": "start_epoch", "raw_value": "1713272513.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-0", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 0, "time_seconds": 14.912364959716797, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "hisat2/2.2.1+galaxy1-1", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 1, "time_seconds": 38.46277332305908, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "a9719cc2ddd333d1"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "3f088ec900e9d7ef"}, "library|input_2": {"src": "hda", "id": "8b2fc55150e990ca"}, "library|type": "paired"}, "job": {"model_class": "Job", "id": "47a2a1661f117bc6", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:16:05.020449", "create_time": "2024-04-16T13:15:46.346836", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "92339b0b40a5ec99", "external_id": "gxy-5z5qm", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/6/7/a/dataset_67a34f1c-7a23-48cf-a8a4-55f5a36de493.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/d/9/8/dataset_d9876267-81f9-487d-9cce-91b8ca2ebae9.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/2/c/a/dataset_2ca07156-b212-4148-844e-bf3297e44308.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/4/0/d/dataset_40d3a4ba-fc09-4e22-94b8-2decbc16a8cb.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 173, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 174, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 172, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "a9719cc2ddd333d1", "src": "hda", "uuid": "67a34f1c-7a23-48cf-a8a4-55f5a36de493"}, "library|input_1": {"id": "3f088ec900e9d7ef", "src": "hda", "uuid": "d9876267-81f9-487d-9cce-91b8ca2ebae9"}, "library|input_2": {"id": "8b2fc55150e990ca", "src": "hda", "uuid": "2ca07156-b212-4148-844e-bf3297e44308"}}, "outputs": {"output_alignments": {"id": "3fec2c5bdf5c2d90", "src": "hda", "uuid": "40d3a4ba-fc09-4e22-94b8-2decbc16a8cb"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 3\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 3\n  bucket 1: 10%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 3:\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 20%\nGetting block 7 of 60\n  bucket 2: 20%\n  bucket 4: 10%\n  Reserving size (126) for bucket 6\n  bucket 2: 30%\n  Calculating Z arrays for bucket 6\n  bucket 4: 20%\n  bucket 2: 40%\n  Calculating Z arrays for bucket 5\n  bucket 4: 30%\n  bucket 2: 50%\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 3: 10%\n  Calculating Z arrays for bucket 8\n  bucket 4: 40%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 50%\n  bucket 3: 20%\n  bucket 2: 60%\n  bucket 5: 10%\n  bucket 4: 60%\n  bucket 1: 40%\n  Reserving size (126) for bucket 7\n  bucket 6: 10%\n  bucket 4: 70%\n  bucket 3: 30%\n  bucket 6: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 4: 80%\n  bucket 5: 20%\n  bucket 1: 50%\n  bucket 6: 30%\n  bucket 2: 70%\n  bucket 4: 90%\n  bucket 6: 40%\n  bucket 2: 80%\n  bucket 1: 60%\n  bucket 5: 30%\n  bucket 8: 10%\n  bucket 2: 90%\n  bucket 3: 40%\n  bucket 6: 50%\n  bucket 5: 40%\n  bucket 8: 20%\n  bucket 2: 100%\n  bucket 3: 50%\n  bucket 5: 50%\n  bucket 1: 70%\n  Calculating Z arrays for bucket 7\n  bucket 3: 60%\n  bucket 6: 60%\n  bucket 5: 60%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 8: 30%\n  bucket 6: 70%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 8: 40%\n  bucket 4: 100%\n  bucket 5: 80%\n  bucket 1: 90%\n  bucket 8: 50%\n  bucket 5: 90%\n  bucket 6: 90%\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 80%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 5: 100%\n  bucket 6: 100%\n  bucket 3: 90%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 1: 100%\n  bucket 7: 10%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 7: 20%\n  bucket 3: 100%\n  bucket 8: 90%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  bucket 9: 100%\n  Sorting block of length 89 for bucket 10\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  (Using difference cover)\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  Sorting block time: 00:00:00\n  bucket 11: 50%\nReturning block of 90 for bucket 10\n  bucket 11: 60%\n  bucket 11: 70%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Reserving size (126) for bucket 12\nGetting block 14 of 60\n  Calculating Z arrays for bucket 12\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 13\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Entering block accumulator loop for bucket 14:\n  bucket 12: 10%\n  Calculating Z arrays for bucket 15\n  bucket 13: 10%\n  bucket 12: 20%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 12: 30%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 12: 40%\n  bucket 14: 30%\n  bucket 12: 50%\n  bucket 14: 40%\n  bucket 13: 40%\n  Entering block accumulator loop for bucket 15:\n  bucket 12: 60%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 15: 10%\n  bucket 12: 70%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 15: 20%\n  bucket 12: 80%\n  bucket 13: 70%\n  bucket 12: 90%\n  bucket 15: 30%\n  bucket 13: 80%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 15: 40%\n  bucket 13: 90%\n  bucket 15: 50%\n  bucket 13: 100%\n  bucket 14: 80%\n  Sorting block of length 85 for bucket 13\n  bucket 15: 60%\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  bucket 15: 80%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Entering block accumulator loop for bucket 16:\n  Calculating Z arrays for bucket 17\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  bucket 16: 30%\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 17: 40%\n  Entering block accumulator loop for bucket 18:\n  bucket 16: 60%\n  bucket 17: 50%\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 17: 60%\n  bucket 16: 70%\n  bucket 18: 10%\n  bucket 17: 70%\n  bucket 16: 80%\n  Entering block accumulator loop for bucket 19:\n  bucket 17: 80%\n  bucket 18: 20%\n  bucket 16: 90%\n  bucket 17: 90%\n  bucket 19: 10%\n  bucket 18: 30%\n  bucket 16: 100%\n  bucket 17: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 19: 40%\n  bucket 18: 70%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 18: 90%\n  bucket 19: 80%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 21\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 20:\n  bucket 21: 10%\n  bucket 20: 10%\n  bucket 21: 20%\n  bucket 20: 20%\n  bucket 21: 30%\n  bucket 20: 30%\n  bucket 21: 40%\n  bucket 20: 40%\n  bucket 21: 50%\n  bucket 20: 50%\n  bucket 21: 60%\n  bucket 20: 60%\n  bucket 21: 70%\n  bucket 20: 70%\n  bucket 21: 80%\n  bucket 20: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  bucket 20: 90%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\nGetting block 23 of 60\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  bucket 24: 10%\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  bucket 24: 20%\n  Entering block accumulator loop for bucket 25:\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 24: 30%\n  bucket 24: 40%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 24: 50%\n  bucket 26: 10%\n  bucket 24: 60%\n  bucket 25: 20%\n  bucket 24: 70%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 24: 80%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 24: 90%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 24: 100%\n  bucket 25: 60%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 26: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  bucket 27: 20%\n  bucket 28: 10%\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 28: 20%\n  bucket 27: 30%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 27: 40%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 10%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 29: 30%\n  bucket 27: 80%\n  bucket 30: 20%\n  bucket 27: 90%\n  bucket 28: 60%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 30: 30%\n  bucket 28: 70%\n  bucket 29: 40%\n  bucket 30: 40%\n  bucket 28: 80%\n  bucket 29: 50%\n  bucket 30: 50%\n  bucket 29: 60%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 30: 60%\n  bucket 28: 100%\n  bucket 29: 80%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 30: 70%\n  bucket 29: 90%\n  bucket 30: 80%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 90%\nGetting block 31 of 60\n  Sorting block time: 00:00:00\n  bucket 30: 100%\nReturning block of 120 for bucket 27\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\nGetting block 33 of 60\n  bucket 32: 10%\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 33: 10%\n  bucket 32: 70%\n  bucket 33: 20%\n  bucket 32: 80%\n  bucket 33: 30%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 35: 10%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 10%\n  bucket 36: 20%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 30%\n  bucket 37: 10%\n  bucket 36: 40%\n  bucket 37: 20%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 37: 30%\n  bucket 36: 70%\n  bucket 37: 40%\n  bucket 36: 80%\n  bucket 37: 50%\n  bucket 36: 90%\n  bucket 37: 60%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  bucket 38: 50%\n  Calculating Z arrays for bucket 39\n  bucket 38: 60%\n  bucket 38: 70%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 39: 10%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  bucket 42: 10%\n  bucket 41: 20%\n  bucket 42: 20%\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  bucket 42: 30%\n  bucket 41: 30%\n  bucket 42: 40%\n  bucket 41: 40%\n  bucket 42: 50%\n  bucket 41: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 41: 60%\n  bucket 42: 80%\n  bucket 41: 70%\n  bucket 42: 90%\n  bucket 42: 100%\n  bucket 41: 80%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Entering block accumulator loop for bucket 43:\n  Calculating Z arrays for bucket 44\n  bucket 43: 10%\n  bucket 43: 20%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 30%\n  bucket 44: 10%\n  bucket 43: 40%\n  bucket 44: 20%\n  bucket 43: 50%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 43: 60%\n  bucket 44: 50%\n  bucket 43: 70%\n  bucket 44: 60%\n  bucket 43: 80%\n  bucket 44: 70%\n  bucket 43: 90%\n  bucket 44: 80%\n  bucket 43: 100%\n  bucket 44: 90%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 10%\n  bucket 47: 10%\n  bucket 46: 20%\n  bucket 47: 20%\n  bucket 46: 30%\n  bucket 47: 30%\n  bucket 46: 40%\n  bucket 47: 40%\n  bucket 46: 50%\n  bucket 47: 50%\n  bucket 46: 60%\n  bucket 47: 60%\n  bucket 46: 70%\n  bucket 47: 70%\n  bucket 46: 80%\n  bucket 47: 80%\n  bucket 46: 90%\n  bucket 47: 90%\n  bucket 46: 100%\n  bucket 47: 100%\n  Sorting block of length 69 for bucket 46\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 20%\n  bucket 50: 30%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 40%\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 50: 50%\n  bucket 51: 30%\n  bucket 50: 60%\n  bucket 51: 40%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 50: 80%\n  bucket 51: 60%\n  bucket 50: 90%\n  bucket 51: 70%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  bucket 51: 80%\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 52:\n  Reserving size (126) for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 53: 10%\n  Calculating Z arrays for bucket 54\n  bucket 52: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  Entering block accumulator loop for bucket 55:\n  bucket 52: 20%\n  bucket 53: 40%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 50%\n  bucket 52: 30%\n  bucket 55: 10%\n  bucket 53: 60%\n  bucket 54: 10%\n  bucket 55: 20%\n  bucket 53: 70%\n  bucket 52: 40%\n  bucket 54: 20%\n  bucket 53: 80%\n  bucket 55: 30%\n  bucket 52: 50%\n  bucket 54: 30%\n  bucket 53: 90%\n  bucket 55: 40%\n  bucket 53: 100%\n  bucket 54: 40%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 52: 60%\n  bucket 55: 50%\n  bucket 54: 50%\n  bucket 52: 70%\n  bucket 55: 60%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 55: 70%\n  bucket 52: 80%\n  bucket 54: 80%\n  bucket 55: 80%\n  bucket 52: 90%\n  bucket 54: 90%\n  bucket 55: 90%\n  bucket 52: 100%\n  Sorting block time: 00:00:00\n  bucket 55: 100%\nReturning block of 79 for bucket 53\n  Sorting block of length 106 for bucket 52\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\nGetting block 57 of 60\n  Entering block accumulator loop for bucket 56:\n  Reserving size (126) for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  bucket 56: 10%\n  Calculating Z arrays for bucket 57\n  Calculating Z arrays for bucket 58\n  bucket 56: 20%\n  bucket 56: 30%\n  Entering block accumulator loop for bucket 58:\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 40%\n  bucket 58: 10%\n  bucket 56: 50%\n  bucket 57: 10%\n  bucket 56: 60%\n  bucket 58: 20%\n  bucket 56: 70%\n  bucket 57: 20%\n  bucket 58: 30%\n  bucket 56: 80%\n  bucket 58: 40%\n  bucket 56: 90%\n  bucket 57: 30%\n  bucket 58: 50%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 40%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 57: 50%\n  bucket 58: 80%\n  bucket 57: 60%\n  bucket 58: 90%\n  bucket 57: 70%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 57: 80%\n  Sorting block time: 00:00:00\n  bucket 57: 90%\nReturning block of 56 for bucket 56\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  bucket 59: 70%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 80%\n  bucket 60: 10%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 3\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 3\n  bucket 1: 10%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 3:\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 20%\nGetting block 7 of 60\n  bucket 2: 20%\n  bucket 4: 10%\n  Reserving size (126) for bucket 6\n  bucket 2: 30%\n  Calculating Z arrays for bucket 6\n  bucket 4: 20%\n  bucket 2: 40%\n  Calculating Z arrays for bucket 5\n  bucket 4: 30%\n  bucket 2: 50%\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 3: 10%\n  Calculating Z arrays for bucket 8\n  bucket 4: 40%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 50%\n  bucket 3: 20%\n  bucket 2: 60%\n  bucket 5: 10%\n  bucket 4: 60%\n  bucket 1: 40%\n  Reserving size (126) for bucket 7\n  bucket 6: 10%\n  bucket 4: 70%\n  bucket 3: 30%\n  bucket 6: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 4: 80%\n  bucket 5: 20%\n  bucket 1: 50%\n  bucket 6: 30%\n  bucket 2: 70%\n  bucket 4: 90%\n  bucket 6: 40%\n  bucket 2: 80%\n  bucket 1: 60%\n  bucket 5: 30%\n  bucket 8: 10%\n  bucket 2: 90%\n  bucket 3: 40%\n  bucket 6: 50%\n  bucket 5: 40%\n  bucket 8: 20%\n  bucket 2: 100%\n  bucket 3: 50%\n  bucket 5: 50%\n  bucket 1: 70%\n  Calculating Z arrays for bucket 7\n  bucket 3: 60%\n  bucket 6: 60%\n  bucket 5: 60%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 8: 30%\n  bucket 6: 70%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 8: 40%\n  bucket 4: 100%\n  bucket 5: 80%\n  bucket 1: 90%\n  bucket 8: 50%\n  bucket 5: 90%\n  bucket 6: 90%\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 80%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 5: 100%\n  bucket 6: 100%\n  bucket 3: 90%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 1: 100%\n  bucket 7: 10%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 7: 20%\n  bucket 3: 100%\n  bucket 8: 90%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  bucket 9: 100%\n  Sorting block of length 89 for bucket 10\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  (Using difference cover)\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  Sorting block time: 00:00:00\n  bucket 11: 50%\nReturning block of 90 for bucket 10\n  bucket 11: 60%\n  bucket 11: 70%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Reserving size (126) for bucket 12\nGetting block 14 of 60\n  Calculating Z arrays for bucket 12\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 13\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Entering block accumulator loop for bucket 14:\n  bucket 12: 10%\n  Calculating Z arrays for bucket 15\n  bucket 13: 10%\n  bucket 12: 20%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 12: 30%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 12: 40%\n  bucket 14: 30%\n  bucket 12: 50%\n  bucket 14: 40%\n  bucket 13: 40%\n  Entering block accumulator loop for bucket 15:\n  bucket 12: 60%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 15: 10%\n  bucket 12: 70%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 15: 20%\n  bucket 12: 80%\n  bucket 13: 70%\n  bucket 12: 90%\n  bucket 15: 30%\n  bucket 13: 80%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 15: 40%\n  bucket 13: 90%\n  bucket 15: 50%\n  bucket 13: 100%\n  bucket 14: 80%\n  Sorting block of length 85 for bucket 13\n  bucket 15: 60%\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  bucket 15: 80%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Entering block accumulator loop for bucket 16:\n  Calculating Z arrays for bucket 17\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  bucket 16: 30%\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 17: 40%\n  Entering block accumulator loop for bucket 18:\n  bucket 16: 60%\n  bucket 17: 50%\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 17: 60%\n  bucket 16: 70%\n  bucket 18: 10%\n  bucket 17: 70%\n  bucket 16: 80%\n  Entering block accumulator loop for bucket 19:\n  bucket 17: 80%\n  bucket 18: 20%\n  bucket 16: 90%\n  bucket 17: 90%\n  bucket 19: 10%\n  bucket 18: 30%\n  bucket 16: 100%\n  bucket 17: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 19: 40%\n  bucket 18: 70%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 18: 90%\n  bucket 19: 80%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 21\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 20:\n  bucket 21: 10%\n  bucket 20: 10%\n  bucket 21: 20%\n  bucket 20: 20%\n  bucket 21: 30%\n  bucket 20: 30%\n  bucket 21: 40%\n  bucket 20: 40%\n  bucket 21: 50%\n  bucket 20: 50%\n  bucket 21: 60%\n  bucket 20: 60%\n  bucket 21: 70%\n  bucket 20: 70%\n  bucket 21: 80%\n  bucket 20: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  bucket 20: 90%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\nGetting block 23 of 60\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  bucket 24: 10%\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  bucket 24: 20%\n  Entering block accumulator loop for bucket 25:\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 24: 30%\n  bucket 24: 40%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 24: 50%\n  bucket 26: 10%\n  bucket 24: 60%\n  bucket 25: 20%\n  bucket 24: 70%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 24: 80%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 24: 90%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 24: 100%\n  bucket 25: 60%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 26: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  bucket 27: 20%\n  bucket 28: 10%\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 28: 20%\n  bucket 27: 30%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 27: 40%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 10%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 29: 30%\n  bucket 27: 80%\n  bucket 30: 20%\n  bucket 27: 90%\n  bucket 28: 60%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 30: 30%\n  bucket 28: 70%\n  bucket 29: 40%\n  bucket 30: 40%\n  bucket 28: 80%\n  bucket 29: 50%\n  bucket 30: 50%\n  bucket 29: 60%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 30: 60%\n  bucket 28: 100%\n  bucket 29: 80%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 30: 70%\n  bucket 29: 90%\n  bucket 30: 80%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 90%\nGetting block 31 of 60\n  Sorting block time: 00:00:00\n  bucket 30: 100%\nReturning block of 120 for bucket 27\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\nGetting block 33 of 60\n  bucket 32: 10%\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 33: 10%\n  bucket 32: 70%\n  bucket 33: 20%\n  bucket 32: 80%\n  bucket 33: 30%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 35: 10%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 10%\n  bucket 36: 20%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 30%\n  bucket 37: 10%\n  bucket 36: 40%\n  bucket 37: 20%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 37: 30%\n  bucket 36: 70%\n  bucket 37: 40%\n  bucket 36: 80%\n  bucket 37: 50%\n  bucket 36: 90%\n  bucket 37: 60%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  bucket 38: 50%\n  Calculating Z arrays for bucket 39\n  bucket 38: 60%\n  bucket 38: 70%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 39: 10%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  bucket 42: 10%\n  bucket 41: 20%\n  bucket 42: 20%\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  bucket 42: 30%\n  bucket 41: 30%\n  bucket 42: 40%\n  bucket 41: 40%\n  bucket 42: 50%\n  bucket 41: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 41: 60%\n  bucket 42: 80%\n  bucket 41: 70%\n  bucket 42: 90%\n  bucket 42: 100%\n  bucket 41: 80%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Entering block accumulator loop for bucket 43:\n  Calculating Z arrays for bucket 44\n  bucket 43: 10%\n  bucket 43: 20%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 30%\n  bucket 44: 10%\n  bucket 43: 40%\n  bucket 44: 20%\n  bucket 43: 50%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 43: 60%\n  bucket 44: 50%\n  bucket 43: 70%\n  bucket 44: 60%\n  bucket 43: 80%\n  bucket 44: 70%\n  bucket 43: 90%\n  bucket 44: 80%\n  bucket 43: 100%\n  bucket 44: 90%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 10%\n  bucket 47: 10%\n  bucket 46: 20%\n  bucket 47: 20%\n  bucket 46: 30%\n  bucket 47: 30%\n  bucket 46: 40%\n  bucket 47: 40%\n  bucket 46: 50%\n  bucket 47: 50%\n  bucket 46: 60%\n  bucket 47: 60%\n  bucket 46: 70%\n  bucket 47: 70%\n  bucket 46: 80%\n  bucket 47: 80%\n  bucket 46: 90%\n  bucket 47: 90%\n  bucket 46: 100%\n  bucket 47: 100%\n  Sorting block of length 69 for bucket 46\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 20%\n  bucket 50: 30%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 40%\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 50: 50%\n  bucket 51: 30%\n  bucket 50: 60%\n  bucket 51: 40%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 50: 80%\n  bucket 51: 60%\n  bucket 50: 90%\n  bucket 51: 70%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  bucket 51: 80%\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 52:\n  Reserving size (126) for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 53: 10%\n  Calculating Z arrays for bucket 54\n  bucket 52: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  Entering block accumulator loop for bucket 55:\n  bucket 52: 20%\n  bucket 53: 40%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 50%\n  bucket 52: 30%\n  bucket 55: 10%\n  bucket 53: 60%\n  bucket 54: 10%\n  bucket 55: 20%\n  bucket 53: 70%\n  bucket 52: 40%\n  bucket 54: 20%\n  bucket 53: 80%\n  bucket 55: 30%\n  bucket 52: 50%\n  bucket 54: 30%\n  bucket 53: 90%\n  bucket 55: 40%\n  bucket 53: 100%\n  bucket 54: 40%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 52: 60%\n  bucket 55: 50%\n  bucket 54: 50%\n  bucket 52: 70%\n  bucket 55: 60%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 55: 70%\n  bucket 52: 80%\n  bucket 54: 80%\n  bucket 55: 80%\n  bucket 52: 90%\n  bucket 54: 90%\n  bucket 55: 90%\n  bucket 52: 100%\n  Sorting block time: 00:00:00\n  bucket 55: 100%\nReturning block of 79 for bucket 53\n  Sorting block of length 106 for bucket 52\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\nGetting block 57 of 60\n  Entering block accumulator loop for bucket 56:\n  Reserving size (126) for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  bucket 56: 10%\n  Calculating Z arrays for bucket 57\n  Calculating Z arrays for bucket 58\n  bucket 56: 20%\n  bucket 56: 30%\n  Entering block accumulator loop for bucket 58:\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 40%\n  bucket 58: 10%\n  bucket 56: 50%\n  bucket 57: 10%\n  bucket 56: 60%\n  bucket 58: 20%\n  bucket 56: 70%\n  bucket 57: 20%\n  bucket 58: 30%\n  bucket 56: 80%\n  bucket 58: 40%\n  bucket 56: 90%\n  bucket 57: 30%\n  bucket 58: 50%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 40%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 57: 50%\n  bucket 58: 80%\n  bucket 57: 60%\n  bucket 58: 90%\n  bucket 57: 70%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 57: 80%\n  Sorting block time: 00:00:00\n  bucket 57: 90%\nReturning block of 56 for bucket 56\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  bucket 59: 70%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 80%\n  bucket 60: 10%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-04-16 13:15:55", "plugin": "core", "name": "end_epoch", "raw_value": "1713273355.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:15:54", "plugin": "core", "name": "start_epoch", "raw_value": "1713273354.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-10", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 10, "time_seconds": 19.77422332763672, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "5e6bac49cd5997b4"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "a0240ae21a040df3"}, "library|rna_strandness": "R", "library|type": "single", "sum|new_summary": true, "sum|summary_file": true}, "job": {"model_class": "Job", "id": "de5b68344433eaa7", "state": "error", "exit_code": null, "update_time": "2024-04-16T13:20:11.137095", "create_time": "2024-04-16T13:20:06.832621", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "92339b0b40a5ec99", "external_id": "gxy-h47xx", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/1/f/1/dataset_1f130f17-da09-431d-9d00-053ab46536fa.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/c/d/9/dataset_cd99dc1b-a96d-4c29-870c-55a69f496b8c.dat' input_f.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'     -U 'input_f.fastq'      --rna-strandness R                        --new-summary  --summary-file summary.txt   | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/e/c/f/dataset_ecfe5911-7863-448e-b9f5-645d04fd4a49.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": true, \"summary_file\": true}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 209, \"src\": \"hda\"}]}, \"rna_strandness\": \"R\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 208, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "5e6bac49cd5997b4", "src": "hda", "uuid": "1f130f17-da09-431d-9d00-053ab46536fa"}, "library|input_1": {"id": "a0240ae21a040df3", "src": "hda", "uuid": "cd99dc1b-a96d-4c29-870c-55a69f496b8c"}}, "outputs": {"output_alignments": {"id": "84836df4e6cff58e", "src": "hda", "uuid": "ecfe5911-7863-448e-b9f5-645d04fd4a49"}, "summary_file": {"id": "bf3a34b95e759218", "src": "hda", "uuid": "95f9aba6-e605-4053-adff-a23eadc3ab4f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": null, "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "hisat2/2.2.1+galaxy1-11", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 11, "time_seconds": 28.030512809753418, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "cd6d69b4aec6bf4b"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "933b03242c48f555"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "9e3199d4bd3e41af", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:20:38.881195", "create_time": "2024-04-16T13:20:27.799738", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "92339b0b40a5ec99", "external_id": "gxy-8xqcm", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/f/0/1/dataset_f011a800-0572-43de-b361-06b0b17def83.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        seqtk seq -1 '/galaxy/server/database/objects/3/7/2/dataset_37222433-8617-412f-9d57-af534e1c7b76.dat' > input_f.fastq && seqtk seq -2 '/galaxy/server/database/objects/3/7/2/dataset_37222433-8617-412f-9d57-af534e1c7b76.dat' > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/5/2/5/dataset_525a757b-dd44-4867-bb71-1168a41a13e0.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 213, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 212, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "cd6d69b4aec6bf4b", "src": "hda", "uuid": "f011a800-0572-43de-b361-06b0b17def83"}, "library|input_1": {"id": "933b03242c48f555", "src": "hda", "uuid": "37222433-8617-412f-9d57-af534e1c7b76"}}, "outputs": {"output_alignments": {"id": "e6e5fbc471fa3b1e", "src": "hda", "uuid": "525a757b-dd44-4867-bb71-1168a41a13e0"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 20%\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  bucket 3: 10%\n  bucket 1: 40%\n  bucket 2: 30%\n  Calculating Z arrays for bucket 4\n  bucket 3: 20%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 3: 30%\nGetting block 5 of 60\n  bucket 2: 50%\n  bucket 3: 40%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 60%\n  Reserving size (126) for bucket 5\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  bucket 2: 60%\n  Calculating Z arrays for bucket 5\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 1: 70%\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 5:\nGetting block 8 of 60\n  bucket 1: 80%\n  bucket 4: 20%\n  bucket 2: 70%\n  Reserving size (126) for bucket 8\n  bucket 3: 50%\n  bucket 2: 80%\n  Calculating Z arrays for bucket 7\n  bucket 1: 90%\n  bucket 4: 30%\n  bucket 5: 10%\n  bucket 1: 100%\n  Calculating Z arrays for bucket 6\n  Sorting block of length 42 for bucket 1\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 40%\n  bucket 2: 90%\n  bucket 5: 30%\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 5: 40%\n  bucket 2: 100%\n  bucket 7: 10%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 50%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 5: 60%\n  bucket 7: 20%\n  bucket 3: 80%\n  bucket 6: 10%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 5: 70%\n  bucket 7: 30%\n  Calculating Z arrays for bucket 8\n  bucket 4: 70%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 3: 100%\n  bucket 6: 20%\n  bucket 4: 80%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 4: 90%\n  bucket 7: 60%\n  bucket 5: 100%\n  bucket 6: 30%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 7: 70%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 7: 80%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 90%\n  bucket 6: 60%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 6: 70%\n  Sorting block time: 00:00:00\n  bucket 8: 10%\nReturning block of 43 for bucket 1\n  bucket 6: 80%\n  bucket 8: 20%\n  bucket 6: 90%\n  bucket 8: 30%\n  bucket 6: 100%\n  bucket 8: 40%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Entering block accumulator loop for bucket 10:\n  Calculating Z arrays for bucket 11\n  bucket 10: 10%\n  bucket 10: 20%\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 30%\n  bucket 11: 10%\n  bucket 9: 10%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 9: 20%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 9: 30%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 9: 40%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 9: 50%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 9: 60%\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 11: 80%\n  bucket 10: 100%\n  bucket 9: 80%\n  bucket 11: 90%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\nGetting block 13 of 60\n  bucket 12: 40%\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 50%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  bucket 12: 60%\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 70%\n  bucket 13: 10%\n  bucket 12: 80%\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 12: 90%\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\nGetting block 16 of 60\n  bucket 15: 80%\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 90%\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  bucket 15: 100%\n  Calculating Z arrays for bucket 17\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 40%\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 16: 50%\n  bucket 17: 70%\n  bucket 16: 60%\n  bucket 17: 80%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  bucket 16: 70%\n  bucket 17: 90%\n  bucket 16: 80%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  bucket 18: 40%\n  Calculating Z arrays for bucket 19\n  bucket 18: 50%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 60%\n  bucket 19: 10%\n  bucket 18: 70%\n  bucket 19: 20%\n  bucket 18: 80%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 18: 90%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 18: 100%\n  bucket 19: 80%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  bucket 20: 50%\n  Calculating Z arrays for bucket 21\n  bucket 20: 60%\n  bucket 20: 70%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 80%\n  bucket 21: 10%\n  bucket 20: 90%\n  bucket 21: 20%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 22: 60%\n  bucket 23: 60%\n  bucket 22: 70%\n  bucket 23: 70%\n  bucket 22: 80%\n  bucket 23: 80%\n  bucket 22: 90%\n  bucket 23: 90%\n  bucket 22: 100%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 80%\n  bucket 24: 90%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 30%\n  bucket 26: 40%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 50%\n  bucket 27: 10%\n  bucket 26: 60%\n  bucket 27: 20%\n  bucket 26: 70%\n  bucket 27: 30%\n  bucket 26: 80%\n  bucket 27: 40%\n  bucket 26: 90%\n  bucket 27: 50%\n  bucket 26: 100%\n  bucket 27: 60%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 60\n  Entering block accumulator loop for bucket 30:\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 10%\n  bucket 30: 20%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 31: 10%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 31: 20%\n  bucket 30: 70%\n  bucket 31: 30%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 31: 40%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\nGetting block 35 of 60\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 35:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 35: 10%\n  Sorting block time: 00:00:00\n  bucket 36: 30%\nReturning block of 123 for bucket 34\n  bucket 35: 20%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 35: 30%\n  bucket 36: 60%\n  bucket 35: 40%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 35: 50%\n  bucket 36: 90%\n  bucket 35: 60%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  bucket 37: 50%\n  Calculating Z arrays for bucket 38\n  bucket 37: 60%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 70%\n  bucket 38: 10%\n  bucket 37: 80%\n  bucket 38: 20%\n  bucket 37: 90%\n  bucket 38: 30%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 39:\n  bucket 40: 10%\n  bucket 39: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 39: 20%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 39: 30%\n  bucket 40: 60%\n  bucket 39: 40%\n  bucket 40: 70%\n  bucket 39: 50%\n  bucket 40: 80%\n  bucket 39: 60%\n  bucket 40: 90%\n  bucket 39: 70%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  bucket 41: 30%\n  bucket 41: 40%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 42: 10%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 42: 20%\n  bucket 41: 90%\n  bucket 42: 30%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 20%\n  bucket 44: 10%\n  bucket 43: 30%\n  bucket 44: 20%\n  bucket 43: 40%\n  bucket 44: 30%\n  bucket 43: 50%\n  bucket 44: 40%\n  bucket 43: 60%\n  bucket 44: 50%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 44: 60%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 30%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 10%\n  bucket 45: 40%\n  bucket 47: 10%\n  bucket 46: 20%\n  bucket 45: 50%\n  bucket 46: 30%\n  bucket 47: 20%\n  bucket 45: 60%\n  bucket 46: 40%\n  bucket 47: 30%\n  bucket 45: 70%\n  bucket 46: 50%\n  bucket 47: 40%\n  bucket 45: 80%\n  bucket 46: 60%\n  bucket 47: 50%\n  bucket 45: 90%\n  bucket 46: 70%\n  bucket 47: 60%\n  bucket 45: 100%\n  bucket 46: 80%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 47: 70%\n  bucket 46: 90%\n  bucket 46: 100%\n  bucket 47: 80%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 20%\n  bucket 49: 10%\n  bucket 48: 30%\n  bucket 49: 20%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 49: 30%\n  bucket 48: 60%\n  bucket 49: 40%\n  bucket 48: 70%\n  bucket 49: 50%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 49: 60%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 50:\n  bucket 51: 10%\n  bucket 50: 10%\n  bucket 51: 20%\n  bucket 50: 20%\n  bucket 51: 30%\n  bucket 50: 30%\n  bucket 51: 40%\n  bucket 50: 40%\n  bucket 51: 50%\n  bucket 50: 50%\n  bucket 51: 60%\n  bucket 50: 60%\n  bucket 51: 70%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 51: 80%\n  bucket 50: 90%\n  bucket 51: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 53\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 54: 10%\n  bucket 53: 30%\n  bucket 54: 20%\n  bucket 53: 40%\n  bucket 54: 30%\n  bucket 53: 50%\n  bucket 54: 40%\n  bucket 53: 60%\n  bucket 54: 50%\n  bucket 53: 70%\n  bucket 54: 60%\n  bucket 53: 80%\n  bucket 54: 70%\n  bucket 53: 90%\n  bucket 54: 80%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 40%\n  bucket 58: 10%\n  bucket 57: 50%\n  bucket 58: 20%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 58: 30%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 58: 40%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  bucket 59: 50%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 60%\n  bucket 60: 10%\n  bucket 59: 70%\n  bucket 60: 20%\n  bucket 59: 80%\n  bucket 60: 30%\n  bucket 59: 90%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 59: 100%\n  bucket 60: 60%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 20%\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  bucket 3: 10%\n  bucket 1: 40%\n  bucket 2: 30%\n  Calculating Z arrays for bucket 4\n  bucket 3: 20%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 3: 30%\nGetting block 5 of 60\n  bucket 2: 50%\n  bucket 3: 40%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 60%\n  Reserving size (126) for bucket 5\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  bucket 2: 60%\n  Calculating Z arrays for bucket 5\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 1: 70%\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 5:\nGetting block 8 of 60\n  bucket 1: 80%\n  bucket 4: 20%\n  bucket 2: 70%\n  Reserving size (126) for bucket 8\n  bucket 3: 50%\n  bucket 2: 80%\n  Calculating Z arrays for bucket 7\n  bucket 1: 90%\n  bucket 4: 30%\n  bucket 5: 10%\n  bucket 1: 100%\n  Calculating Z arrays for bucket 6\n  Sorting block of length 42 for bucket 1\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 40%\n  bucket 2: 90%\n  bucket 5: 30%\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 5: 40%\n  bucket 2: 100%\n  bucket 7: 10%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 50%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 5: 60%\n  bucket 7: 20%\n  bucket 3: 80%\n  bucket 6: 10%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 5: 70%\n  bucket 7: 30%\n  Calculating Z arrays for bucket 8\n  bucket 4: 70%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 3: 100%\n  bucket 6: 20%\n  bucket 4: 80%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 4: 90%\n  bucket 7: 60%\n  bucket 5: 100%\n  bucket 6: 30%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 7: 70%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 7: 80%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 90%\n  bucket 6: 60%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 6: 70%\n  Sorting block time: 00:00:00\n  bucket 8: 10%\nReturning block of 43 for bucket 1\n  bucket 6: 80%\n  bucket 8: 20%\n  bucket 6: 90%\n  bucket 8: 30%\n  bucket 6: 100%\n  bucket 8: 40%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Entering block accumulator loop for bucket 10:\n  Calculating Z arrays for bucket 11\n  bucket 10: 10%\n  bucket 10: 20%\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 30%\n  bucket 11: 10%\n  bucket 9: 10%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 9: 20%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 9: 30%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 9: 40%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 9: 50%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 9: 60%\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 11: 80%\n  bucket 10: 100%\n  bucket 9: 80%\n  bucket 11: 90%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\nGetting block 13 of 60\n  bucket 12: 40%\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 50%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  bucket 12: 60%\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 70%\n  bucket 13: 10%\n  bucket 12: 80%\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 12: 90%\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\nGetting block 16 of 60\n  bucket 15: 80%\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 90%\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  bucket 15: 100%\n  Calculating Z arrays for bucket 17\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 40%\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 16: 50%\n  bucket 17: 70%\n  bucket 16: 60%\n  bucket 17: 80%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  bucket 16: 70%\n  bucket 17: 90%\n  bucket 16: 80%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  bucket 18: 40%\n  Calculating Z arrays for bucket 19\n  bucket 18: 50%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 60%\n  bucket 19: 10%\n  bucket 18: 70%\n  bucket 19: 20%\n  bucket 18: 80%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 18: 90%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 18: 100%\n  bucket 19: 80%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  bucket 20: 50%\n  Calculating Z arrays for bucket 21\n  bucket 20: 60%\n  bucket 20: 70%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 80%\n  bucket 21: 10%\n  bucket 20: 90%\n  bucket 21: 20%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 22: 60%\n  bucket 23: 60%\n  bucket 22: 70%\n  bucket 23: 70%\n  bucket 22: 80%\n  bucket 23: 80%\n  bucket 22: 90%\n  bucket 23: 90%\n  bucket 22: 100%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 80%\n  bucket 24: 90%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 30%\n  bucket 26: 40%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 50%\n  bucket 27: 10%\n  bucket 26: 60%\n  bucket 27: 20%\n  bucket 26: 70%\n  bucket 27: 30%\n  bucket 26: 80%\n  bucket 27: 40%\n  bucket 26: 90%\n  bucket 27: 50%\n  bucket 26: 100%\n  bucket 27: 60%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 60\n  Entering block accumulator loop for bucket 30:\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 10%\n  bucket 30: 20%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 31: 10%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 31: 20%\n  bucket 30: 70%\n  bucket 31: 30%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 31: 40%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\nGetting block 35 of 60\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 35:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 35: 10%\n  Sorting block time: 00:00:00\n  bucket 36: 30%\nReturning block of 123 for bucket 34\n  bucket 35: 20%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 35: 30%\n  bucket 36: 60%\n  bucket 35: 40%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 35: 50%\n  bucket 36: 90%\n  bucket 35: 60%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  bucket 37: 50%\n  Calculating Z arrays for bucket 38\n  bucket 37: 60%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 70%\n  bucket 38: 10%\n  bucket 37: 80%\n  bucket 38: 20%\n  bucket 37: 90%\n  bucket 38: 30%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 39:\n  bucket 40: 10%\n  bucket 39: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 39: 20%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 39: 30%\n  bucket 40: 60%\n  bucket 39: 40%\n  bucket 40: 70%\n  bucket 39: 50%\n  bucket 40: 80%\n  bucket 39: 60%\n  bucket 40: 90%\n  bucket 39: 70%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  bucket 41: 30%\n  bucket 41: 40%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 42: 10%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 42: 20%\n  bucket 41: 90%\n  bucket 42: 30%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 20%\n  bucket 44: 10%\n  bucket 43: 30%\n  bucket 44: 20%\n  bucket 43: 40%\n  bucket 44: 30%\n  bucket 43: 50%\n  bucket 44: 40%\n  bucket 43: 60%\n  bucket 44: 50%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 44: 60%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 30%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 10%\n  bucket 45: 40%\n  bucket 47: 10%\n  bucket 46: 20%\n  bucket 45: 50%\n  bucket 46: 30%\n  bucket 47: 20%\n  bucket 45: 60%\n  bucket 46: 40%\n  bucket 47: 30%\n  bucket 45: 70%\n  bucket 46: 50%\n  bucket 47: 40%\n  bucket 45: 80%\n  bucket 46: 60%\n  bucket 47: 50%\n  bucket 45: 90%\n  bucket 46: 70%\n  bucket 47: 60%\n  bucket 45: 100%\n  bucket 46: 80%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 47: 70%\n  bucket 46: 90%\n  bucket 46: 100%\n  bucket 47: 80%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 20%\n  bucket 49: 10%\n  bucket 48: 30%\n  bucket 49: 20%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 49: 30%\n  bucket 48: 60%\n  bucket 49: 40%\n  bucket 48: 70%\n  bucket 49: 50%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 49: 60%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 50:\n  bucket 51: 10%\n  bucket 50: 10%\n  bucket 51: 20%\n  bucket 50: 20%\n  bucket 51: 30%\n  bucket 50: 30%\n  bucket 51: 40%\n  bucket 50: 40%\n  bucket 51: 50%\n  bucket 50: 50%\n  bucket 51: 60%\n  bucket 50: 60%\n  bucket 51: 70%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 51: 80%\n  bucket 50: 90%\n  bucket 51: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 53\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 54: 10%\n  bucket 53: 30%\n  bucket 54: 20%\n  bucket 53: 40%\n  bucket 54: 30%\n  bucket 53: 50%\n  bucket 54: 40%\n  bucket 53: 60%\n  bucket 54: 50%\n  bucket 53: 70%\n  bucket 54: 60%\n  bucket 53: 80%\n  bucket 54: 70%\n  bucket 53: 90%\n  bucket 54: 80%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 40%\n  bucket 58: 10%\n  bucket 57: 50%\n  bucket 58: 20%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 58: 30%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 58: 40%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  bucket 59: 50%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 60%\n  bucket 60: 10%\n  bucket 59: 70%\n  bucket 60: 20%\n  bucket 59: 80%\n  bucket 60: 30%\n  bucket 59: 90%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 59: 100%\n  bucket 60: 60%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 13:20:29", "plugin": "core", "name": "end_epoch", "raw_value": "1713273629.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:20:29", "plugin": "core", "name": "start_epoch", "raw_value": "1713273629.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-12", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 12, "time_seconds": 26.37067174911499, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "b98cfd32e45fcedf"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "fcb5ff4e07a562b4"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "a310ade7779c7ad8", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:21:05.392734", "create_time": "2024-04-16T13:20:54.946700", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "92339b0b40a5ec99", "external_id": "gxy-dlt6z", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/b/2/0/dataset_b205f260-58aa-44f9-8317-83f142aa7e09.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        bzcat '/galaxy/server/database/objects/4/c/1/dataset_4c14d71f-079a-4302-b517-a2a2bf0ac819.dat' | seqtk seq -1 /dev/stdin > input_f.fastq && bzcat '/galaxy/server/database/objects/4/c/1/dataset_4c14d71f-079a-4302-b517-a2a2bf0ac819.dat' | seqtk seq -2 /dev/stdin > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/5/7/4/dataset_57413b98-a47f-4d47-9c3d-f44e05387e2b.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 216, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 215, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "b98cfd32e45fcedf", "src": "hda", "uuid": "b205f260-58aa-44f9-8317-83f142aa7e09"}, "library|input_1": {"id": "fcb5ff4e07a562b4", "src": "hda", "uuid": "4c14d71f-079a-4302-b517-a2a2bf0ac819"}}, "outputs": {"output_alignments": {"id": "f9f24e63b0499eca", "src": "hda", "uuid": "57413b98-a47f-4d47-9c3d-f44e05387e2b"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Calculating Z arrays for bucket 2\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\nGetting block 6 of 60\n  Calculating Z arrays for bucket 5\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 1: 10%\n  Calculating Z arrays for bucket 7\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 4\n  bucket 2: 10%\n  bucket 3: 10%\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 8\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 7: 10%\n  bucket 2: 30%\n  bucket 7: 20%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 3: 40%\n  bucket 7: 40%\n  bucket 1: 70%\n  Entering block accumulator loop for bucket 5:\n  bucket 4: 30%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 3: 50%\n  Entering block accumulator loop for bucket 6:\n  bucket 8: 20%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 5: 10%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 7: 60%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 7: 70%\n  bucket 1: 80%\n  bucket 8: 30%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 6: 20%\n  bucket 4: 70%\n  bucket 1: 90%\n  bucket 7: 90%\n  bucket 2: 60%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 2: 70%\n  bucket 8: 50%\n  bucket 1: 100%\n  bucket 7: 100%\n  bucket 4: 100%\n  bucket 3: 100%\n  Sorting block of length 75 for bucket 7\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  (Using difference cover)\n  bucket 6: 30%\n  bucket 8: 60%\n  Sorting block of length 106 for bucket 3\n  Sorting block of length 68 for bucket 4\n  bucket 5: 30%\n  bucket 6: 40%\n  (Using difference cover)\n  bucket 5: 40%\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 2: 80%\n  bucket 8: 80%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 2: 90%\n  bucket 8: 90%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 2: 100%\n  bucket 8: 100%\n  bucket 5: 70%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  bucket 10: 80%\n  Calculating Z arrays for bucket 11\n  bucket 9: 70%\n  bucket 10: 90%\n  bucket 9: 80%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 13: 10%\n  bucket 12: 20%\n  bucket 13: 20%\n  bucket 12: 30%\n  bucket 13: 30%\n  bucket 12: 40%\n  bucket 13: 40%\n  bucket 12: 50%\n  bucket 13: 50%\n  bucket 12: 60%\n  bucket 13: 60%\n  bucket 12: 70%\n  bucket 13: 70%\n  bucket 12: 80%\n  bucket 13: 80%\n  bucket 12: 90%\n  bucket 13: 90%\n  bucket 12: 100%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 15: 30%\n  bucket 14: 40%\n  bucket 15: 40%\n  bucket 14: 50%\n  bucket 15: 50%\n  bucket 14: 60%\n  bucket 15: 60%\n  bucket 14: 70%\n  bucket 15: 70%\n  bucket 14: 80%\n  bucket 15: 80%\n  bucket 14: 90%\n  bucket 15: 90%\n  bucket 14: 100%\n  bucket 15: 100%\n  Sorting block of length 82 for bucket 14\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\nGetting block 17 of 60\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\nGetting block 23 of 60\n  bucket 22: 60%\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 70%\n  bucket 22: 80%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 70%\n  bucket 24: 80%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 90%\n  bucket 25: 10%\n  bucket 24: 100%\n  bucket 25: 20%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\nGetting block 30 of 60\n  bucket 28: 40%\n  Reserving size (126) for bucket 30\n  bucket 29: 30%\n  Calculating Z arrays for bucket 30\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 30: 10%\n  bucket 28: 80%\n  bucket 29: 60%\n  bucket 30: 20%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 30: 30%\n  bucket 28: 100%\n  bucket 30: 40%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 90%\n  bucket 30: 70%\n  bucket 29: 100%\n  bucket 30: 80%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 10%\n  bucket 32: 10%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 20%\n  bucket 31: 20%\n  bucket 32: 30%\n  bucket 33: 10%\n  bucket 31: 30%\n  bucket 32: 40%\n  bucket 33: 20%\n  bucket 31: 40%\n  bucket 32: 50%\n  bucket 33: 30%\n  bucket 32: 60%\n  bucket 31: 50%\n  bucket 33: 40%\n  bucket 32: 70%\n  bucket 31: 60%\n  bucket 32: 80%\n  bucket 33: 50%\n  bucket 32: 90%\n  bucket 31: 70%\n  bucket 33: 60%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 31: 80%\n  bucket 33: 70%\n  bucket 31: 90%\n  bucket 33: 80%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 20%\n  bucket 35: 10%\n  bucket 34: 30%\n  bucket 35: 20%\n  bucket 34: 40%\n  bucket 35: 30%\n  bucket 34: 50%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 35: 40%\n  bucket 34: 80%\n  Entering block accumulator loop for bucket 36:\n  bucket 34: 90%\n  bucket 36: 10%\n  bucket 35: 50%\n  bucket 34: 100%\n  bucket 36: 20%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 60%\n  bucket 36: 30%\n  bucket 35: 70%\n  bucket 36: 40%\n  bucket 35: 80%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 35: 90%\n  bucket 36: 70%\n  bucket 35: 100%\n  bucket 36: 80%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 90%\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 20%\n  bucket 38: 10%\n  bucket 37: 30%\n  bucket 38: 20%\n  bucket 37: 40%\n  bucket 38: 30%\n  bucket 37: 50%\n  bucket 38: 40%\n  bucket 37: 60%\n  bucket 38: 50%\n  bucket 37: 70%\n  bucket 38: 60%\n  bucket 37: 80%\n  bucket 38: 70%\n  bucket 37: 90%\n  bucket 38: 80%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  bucket 39: 70%\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 39: 80%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 90%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 10%\n  bucket 39: 100%\n  bucket 40: 20%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 41: 10%\n  bucket 40: 30%\n  bucket 41: 20%\n  bucket 40: 40%\n  bucket 41: 30%\n  bucket 40: 50%\n  bucket 41: 40%\n  bucket 40: 60%\n  bucket 41: 50%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 41: 60%\n  Sorting block time: 00:00:00\n  bucket 40: 90%\nReturning block of 126 for bucket 39\n  bucket 41: 70%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\nGetting block 43 of 60\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Entering block accumulator loop for bucket 42:\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 44\n  Calculating Z arrays for bucket 43\n  bucket 42: 10%\n  Entering block accumulator loop for bucket 44:\n  bucket 42: 20%\n  Entering block accumulator loop for bucket 43:\n  bucket 44: 10%\n  bucket 42: 30%\n  bucket 43: 10%\n  bucket 42: 40%\n  bucket 43: 20%\n  bucket 44: 20%\n  bucket 43: 30%\n  bucket 42: 50%\n  bucket 44: 30%\n  bucket 43: 40%\n  bucket 42: 60%\n  bucket 43: 50%\n  bucket 42: 70%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 42: 80%\n  bucket 43: 80%\n  bucket 42: 90%\n  bucket 43: 90%\n  bucket 44: 40%\n  bucket 43: 100%\n  bucket 42: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 50%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\nGetting block 46 of 60\n  bucket 45: 70%\n  Reserving size (126) for bucket 46\n  bucket 45: 80%\n  Calculating Z arrays for bucket 46\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 20%\n  bucket 48: 10%\n  bucket 47: 30%\n  bucket 48: 20%\n  bucket 47: 40%\n  bucket 48: 30%\n  bucket 47: 50%\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  bucket 48: 40%\n  Calculating Z arrays for bucket 49\n  bucket 47: 60%\n  bucket 48: 50%\n  bucket 47: 70%\n  Entering block accumulator loop for bucket 49:\n  bucket 47: 80%\n  bucket 48: 60%\n  bucket 47: 90%\n  bucket 48: 70%\n  bucket 49: 10%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 80%\n  bucket 49: 20%\n  bucket 48: 90%\n  bucket 48: 100%\n  bucket 49: 30%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 51\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 50:\n  bucket 51: 10%\n  bucket 50: 10%\n  bucket 51: 20%\n  bucket 50: 20%\n  bucket 51: 30%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 51: 40%\n  bucket 50: 50%\n  bucket 51: 50%\n  bucket 50: 60%\n  bucket 51: 60%\n  bucket 50: 70%\n  bucket 51: 70%\n  bucket 50: 80%\n  bucket 51: 80%\n  bucket 50: 90%\n  bucket 51: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  bucket 52: 60%\n  bucket 52: 70%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 53: 10%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\nGetting block 57 of 60\n  bucket 56: 90%\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\nGetting block 59 of 60\n  bucket 58: 20%\n  Reserving size (126) for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  bucket 58: 30%\n  Calculating Z arrays for bucket 60\n  Calculating Z arrays for bucket 59\n  bucket 58: 40%\n  Entering block accumulator loop for bucket 60:\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 50%\n  bucket 60: 10%\n  bucket 59: 10%\n  bucket 60: 20%\n  bucket 58: 60%\n  bucket 59: 20%\n  bucket 60: 30%\n  bucket 58: 70%\n  bucket 60: 40%\n  bucket 59: 30%\n  bucket 60: 50%\n  bucket 58: 80%\n  bucket 59: 40%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 59: 50%\n  bucket 58: 90%\n  bucket 60: 80%\n  bucket 59: 60%\n  bucket 58: 100%\n  bucket 59: 70%\n  Sorting block of length 113 for bucket 58\n  bucket 60: 90%\n  (Using difference cover)\n  bucket 59: 80%\n  bucket 60: 100%\n  bucket 59: 90%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Calculating Z arrays for bucket 2\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\nGetting block 6 of 60\n  Calculating Z arrays for bucket 5\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 1: 10%\n  Calculating Z arrays for bucket 7\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 4\n  bucket 2: 10%\n  bucket 3: 10%\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 8\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 7: 10%\n  bucket 2: 30%\n  bucket 7: 20%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 3: 40%\n  bucket 7: 40%\n  bucket 1: 70%\n  Entering block accumulator loop for bucket 5:\n  bucket 4: 30%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 3: 50%\n  Entering block accumulator loop for bucket 6:\n  bucket 8: 20%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 5: 10%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 7: 60%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 7: 70%\n  bucket 1: 80%\n  bucket 8: 30%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 6: 20%\n  bucket 4: 70%\n  bucket 1: 90%\n  bucket 7: 90%\n  bucket 2: 60%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 2: 70%\n  bucket 8: 50%\n  bucket 1: 100%\n  bucket 7: 100%\n  bucket 4: 100%\n  bucket 3: 100%\n  Sorting block of length 75 for bucket 7\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  (Using difference cover)\n  bucket 6: 30%\n  bucket 8: 60%\n  Sorting block of length 106 for bucket 3\n  Sorting block of length 68 for bucket 4\n  bucket 5: 30%\n  bucket 6: 40%\n  (Using difference cover)\n  bucket 5: 40%\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 2: 80%\n  bucket 8: 80%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 2: 90%\n  bucket 8: 90%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 2: 100%\n  bucket 8: 100%\n  bucket 5: 70%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  bucket 10: 80%\n  Calculating Z arrays for bucket 11\n  bucket 9: 70%\n  bucket 10: 90%\n  bucket 9: 80%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 13: 10%\n  bucket 12: 20%\n  bucket 13: 20%\n  bucket 12: 30%\n  bucket 13: 30%\n  bucket 12: 40%\n  bucket 13: 40%\n  bucket 12: 50%\n  bucket 13: 50%\n  bucket 12: 60%\n  bucket 13: 60%\n  bucket 12: 70%\n  bucket 13: 70%\n  bucket 12: 80%\n  bucket 13: 80%\n  bucket 12: 90%\n  bucket 13: 90%\n  bucket 12: 100%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 15: 30%\n  bucket 14: 40%\n  bucket 15: 40%\n  bucket 14: 50%\n  bucket 15: 50%\n  bucket 14: 60%\n  bucket 15: 60%\n  bucket 14: 70%\n  bucket 15: 70%\n  bucket 14: 80%\n  bucket 15: 80%\n  bucket 14: 90%\n  bucket 15: 90%\n  bucket 14: 100%\n  bucket 15: 100%\n  Sorting block of length 82 for bucket 14\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\nGetting block 17 of 60\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\nGetting block 23 of 60\n  bucket 22: 60%\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 70%\n  bucket 22: 80%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 70%\n  bucket 24: 80%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 90%\n  bucket 25: 10%\n  bucket 24: 100%\n  bucket 25: 20%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\nGetting block 30 of 60\n  bucket 28: 40%\n  Reserving size (126) for bucket 30\n  bucket 29: 30%\n  Calculating Z arrays for bucket 30\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 30: 10%\n  bucket 28: 80%\n  bucket 29: 60%\n  bucket 30: 20%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 30: 30%\n  bucket 28: 100%\n  bucket 30: 40%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 90%\n  bucket 30: 70%\n  bucket 29: 100%\n  bucket 30: 80%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 10%\n  bucket 32: 10%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 20%\n  bucket 31: 20%\n  bucket 32: 30%\n  bucket 33: 10%\n  bucket 31: 30%\n  bucket 32: 40%\n  bucket 33: 20%\n  bucket 31: 40%\n  bucket 32: 50%\n  bucket 33: 30%\n  bucket 32: 60%\n  bucket 31: 50%\n  bucket 33: 40%\n  bucket 32: 70%\n  bucket 31: 60%\n  bucket 32: 80%\n  bucket 33: 50%\n  bucket 32: 90%\n  bucket 31: 70%\n  bucket 33: 60%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 31: 80%\n  bucket 33: 70%\n  bucket 31: 90%\n  bucket 33: 80%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 20%\n  bucket 35: 10%\n  bucket 34: 30%\n  bucket 35: 20%\n  bucket 34: 40%\n  bucket 35: 30%\n  bucket 34: 50%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 35: 40%\n  bucket 34: 80%\n  Entering block accumulator loop for bucket 36:\n  bucket 34: 90%\n  bucket 36: 10%\n  bucket 35: 50%\n  bucket 34: 100%\n  bucket 36: 20%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 60%\n  bucket 36: 30%\n  bucket 35: 70%\n  bucket 36: 40%\n  bucket 35: 80%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 35: 90%\n  bucket 36: 70%\n  bucket 35: 100%\n  bucket 36: 80%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 90%\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 20%\n  bucket 38: 10%\n  bucket 37: 30%\n  bucket 38: 20%\n  bucket 37: 40%\n  bucket 38: 30%\n  bucket 37: 50%\n  bucket 38: 40%\n  bucket 37: 60%\n  bucket 38: 50%\n  bucket 37: 70%\n  bucket 38: 60%\n  bucket 37: 80%\n  bucket 38: 70%\n  bucket 37: 90%\n  bucket 38: 80%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  bucket 39: 70%\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 39: 80%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 90%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 10%\n  bucket 39: 100%\n  bucket 40: 20%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 41: 10%\n  bucket 40: 30%\n  bucket 41: 20%\n  bucket 40: 40%\n  bucket 41: 30%\n  bucket 40: 50%\n  bucket 41: 40%\n  bucket 40: 60%\n  bucket 41: 50%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 41: 60%\n  Sorting block time: 00:00:00\n  bucket 40: 90%\nReturning block of 126 for bucket 39\n  bucket 41: 70%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\nGetting block 43 of 60\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Entering block accumulator loop for bucket 42:\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 44\n  Calculating Z arrays for bucket 43\n  bucket 42: 10%\n  Entering block accumulator loop for bucket 44:\n  bucket 42: 20%\n  Entering block accumulator loop for bucket 43:\n  bucket 44: 10%\n  bucket 42: 30%\n  bucket 43: 10%\n  bucket 42: 40%\n  bucket 43: 20%\n  bucket 44: 20%\n  bucket 43: 30%\n  bucket 42: 50%\n  bucket 44: 30%\n  bucket 43: 40%\n  bucket 42: 60%\n  bucket 43: 50%\n  bucket 42: 70%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 42: 80%\n  bucket 43: 80%\n  bucket 42: 90%\n  bucket 43: 90%\n  bucket 44: 40%\n  bucket 43: 100%\n  bucket 42: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 50%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\nGetting block 46 of 60\n  bucket 45: 70%\n  Reserving size (126) for bucket 46\n  bucket 45: 80%\n  Calculating Z arrays for bucket 46\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 20%\n  bucket 48: 10%\n  bucket 47: 30%\n  bucket 48: 20%\n  bucket 47: 40%\n  bucket 48: 30%\n  bucket 47: 50%\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  bucket 48: 40%\n  Calculating Z arrays for bucket 49\n  bucket 47: 60%\n  bucket 48: 50%\n  bucket 47: 70%\n  Entering block accumulator loop for bucket 49:\n  bucket 47: 80%\n  bucket 48: 60%\n  bucket 47: 90%\n  bucket 48: 70%\n  bucket 49: 10%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 80%\n  bucket 49: 20%\n  bucket 48: 90%\n  bucket 48: 100%\n  bucket 49: 30%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 51\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 50:\n  bucket 51: 10%\n  bucket 50: 10%\n  bucket 51: 20%\n  bucket 50: 20%\n  bucket 51: 30%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 51: 40%\n  bucket 50: 50%\n  bucket 51: 50%\n  bucket 50: 60%\n  bucket 51: 60%\n  bucket 50: 70%\n  bucket 51: 70%\n  bucket 50: 80%\n  bucket 51: 80%\n  bucket 50: 90%\n  bucket 51: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  bucket 52: 60%\n  bucket 52: 70%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 53: 10%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\nGetting block 57 of 60\n  bucket 56: 90%\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\nGetting block 59 of 60\n  bucket 58: 20%\n  Reserving size (126) for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  bucket 58: 30%\n  Calculating Z arrays for bucket 60\n  Calculating Z arrays for bucket 59\n  bucket 58: 40%\n  Entering block accumulator loop for bucket 60:\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 50%\n  bucket 60: 10%\n  bucket 59: 10%\n  bucket 60: 20%\n  bucket 58: 60%\n  bucket 59: 20%\n  bucket 60: 30%\n  bucket 58: 70%\n  bucket 60: 40%\n  bucket 59: 30%\n  bucket 60: 50%\n  bucket 58: 80%\n  bucket 59: 40%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 59: 50%\n  bucket 58: 90%\n  bucket 60: 80%\n  bucket 59: 60%\n  bucket 58: 100%\n  bucket 59: 70%\n  Sorting block of length 113 for bucket 58\n  bucket 60: 90%\n  (Using difference cover)\n  bucket 59: 80%\n  bucket 60: 100%\n  bucket 59: 90%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 13:20:56", "plugin": "core", "name": "end_epoch", "raw_value": "1713273656.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:20:56", "plugin": "core", "name": "start_epoch", "raw_value": "1713273656.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-13", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 13, "time_seconds": 29.257306814193726, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "6d2bb1a39b496acd"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "099a8cbdc96c490f"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "9943c834d2bab90d", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:21:34.419947", "create_time": "2024-04-16T13:21:23.037684", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "92339b0b40a5ec99", "external_id": "gxy-2xmqs", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/9/7/6/dataset_9766ac3c-0212-443c-8626-73ee65aff278.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        seqtk seq -1 '/galaxy/server/database/objects/0/e/5/dataset_0e5a683a-f3ba-48a3-bffc-34419c81f560.dat' > input_f.fastq && seqtk seq -2 '/galaxy/server/database/objects/0/e/5/dataset_0e5a683a-f3ba-48a3-bffc-34419c81f560.dat' > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/e/b/3/dataset_eb3100f7-2993-47b8-af1d-faaf155a68b8.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 219, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 218, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "6d2bb1a39b496acd", "src": "hda", "uuid": "9766ac3c-0212-443c-8626-73ee65aff278"}, "library|input_1": {"id": "099a8cbdc96c490f", "src": "hda", "uuid": "0e5a683a-f3ba-48a3-bffc-34419c81f560"}}, "outputs": {"output_alignments": {"id": "3a04ed5338d1d08e", "src": "hda", "uuid": "eb3100f7-2993-47b8-af1d-faaf155a68b8"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\nGetting block 4 of 60\nGetting block 6 of 60\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Reserving size (126) for bucket 6\nGetting block 7 of 60\n  Entering block accumulator loop for bucket 3:\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 6\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 5\n  bucket 1: 10%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 6:\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 8\n  bucket 6: 10%\n  Calculating Z arrays for bucket 7\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 20%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 40%\n  bucket 5: 20%\n  bucket 8: 10%\n  bucket 6: 30%\n  bucket 2: 30%\n  bucket 3: 50%\n  bucket 6: 40%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 6: 50%\n  bucket 2: 40%\n  bucket 3: 70%\n  bucket 4: 40%\n  bucket 1: 80%\n  bucket 8: 30%\n  bucket 3: 80%\n  bucket 1: 90%\n  bucket 5: 30%\n  bucket 8: 40%\n  bucket 1: 100%\n  bucket 6: 60%\n  bucket 3: 90%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 5: 40%\n  bucket 3: 100%\n  bucket 8: 50%\n  Sorting block of length 106 for bucket 3\n  bucket 4: 50%\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 6: 70%\n  bucket 7: 20%\n  bucket 6: 80%\n  bucket 8: 60%\n  bucket 4: 60%\n  bucket 5: 50%\n  bucket 8: 70%\n  bucket 2: 60%\n  bucket 6: 90%\n  bucket 4: 70%\n  bucket 5: 60%\n  bucket 4: 80%\n  bucket 8: 80%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 4: 90%\n  bucket 8: 90%\n  bucket 7: 40%\n  bucket 2: 70%\n  bucket 5: 80%\n  bucket 4: 100%\n  bucket 8: 100%\n  bucket 6: 100%\n  bucket 7: 50%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 5: 90%\n  bucket 7: 60%\n  bucket 2: 90%\n  bucket 5: 100%\n  bucket 7: 70%\n  bucket 2: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 7: 80%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  bucket 10: 80%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  Entering block accumulator loop for bucket 11:\n  bucket 12: 30%\n  bucket 11: 10%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 11: 20%\n  bucket 12: 80%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 90%\n  bucket 11: 70%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  bucket 13: 50%\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  bucket 13: 60%\n  Calculating Z arrays for bucket 15\n  Calculating Z arrays for bucket 14\n  bucket 13: 70%\n  bucket 13: 80%\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 90%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 100%\n  bucket 15: 10%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 15: 20%\n  bucket 14: 10%\n  bucket 15: 30%\n  bucket 14: 20%\n  bucket 15: 40%\n  bucket 14: 30%\n  bucket 15: 50%\n  bucket 14: 40%\n  bucket 15: 60%\n  bucket 14: 50%\n  bucket 15: 70%\n  bucket 14: 60%\n  bucket 15: 80%\n  bucket 14: 70%\n  bucket 15: 90%\n  bucket 14: 80%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 14: 90%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 80%\n  bucket 16: 90%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 100%\n  bucket 17: 10%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  bucket 17: 30%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  Sorting block time: 00:00:00\n  bucket 18: 50%\nReturning block of 101 for bucket 16\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 60%\n  bucket 24: 70%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 80%\n  bucket 25: 10%\n  bucket 24: 90%\n  bucket 25: 20%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  bucket 26: 80%\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 90%\n  bucket 26: 100%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  bucket 28: 90%\n  bucket 27: 90%\n  bucket 28: 100%\n  bucket 27: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\nGetting block 31 of 60\n  bucket 30: 40%\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 50%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 60%\n  bucket 31: 10%\n  bucket 30: 70%\n  bucket 31: 20%\n  bucket 30: 80%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 30: 90%\n  bucket 31: 50%\n  bucket 30: 100%\n  bucket 31: 60%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 10%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 20%\n  bucket 33: 10%\n  bucket 32: 30%\n  bucket 33: 20%\n  bucket 32: 40%\n  bucket 33: 30%\n  bucket 32: 50%\n  bucket 33: 40%\n  bucket 32: 60%\n  bucket 33: 50%\n  bucket 32: 70%\n  bucket 33: 60%\n  bucket 32: 80%\n  bucket 33: 70%\n  bucket 32: 90%\n  bucket 33: 80%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Entering block accumulator loop for bucket 34:\n  Calculating Z arrays for bucket 35\n  bucket 34: 10%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 20%\n  bucket 35: 10%\n  bucket 34: 30%\n  bucket 35: 20%\n  bucket 34: 40%\n  bucket 35: 30%\n  bucket 34: 50%\n  bucket 35: 40%\n  bucket 34: 60%\n  bucket 35: 50%\n  bucket 34: 70%\n  bucket 35: 60%\n  bucket 34: 80%\n  bucket 35: 70%\n  bucket 34: 90%\n  bucket 35: 80%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 36\nReturning block of 123 for bucket 34\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 10%\n  bucket 38: 10%\n  bucket 37: 20%\n  bucket 38: 20%\n  bucket 37: 30%\n  bucket 38: 30%\n  bucket 37: 40%\n  bucket 38: 40%\n  bucket 37: 50%\n  bucket 38: 50%\nGetting block 39 of 60\n  bucket 38: 60%\n  Reserving size (126) for bucket 39\n  bucket 37: 60%\n  Calculating Z arrays for bucket 39\n  bucket 38: 70%\n  bucket 37: 70%\n  bucket 38: 80%\n  Entering block accumulator loop for bucket 39:\n  bucket 37: 80%\n  bucket 38: 90%\n  bucket 39: 10%\n  bucket 37: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  bucket 39: 20%\n  bucket 37: 100%\n  (Using difference cover)\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  bucket 40: 60%\n  Calculating Z arrays for bucket 41\n  bucket 40: 70%\n  bucket 40: 80%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  bucket 41: 10%\n  (Using difference cover)\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 10%\n  bucket 43: 10%\n  bucket 42: 20%\n  bucket 43: 20%\n  bucket 42: 30%\n  bucket 43: 30%\n  bucket 42: 40%\n  bucket 43: 40%\n  bucket 42: 50%\n  bucket 43: 50%\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 60%\n  bucket 42: 60%\n  bucket 43: 70%\n  bucket 42: 70%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 80%\n  bucket 42: 80%\n  bucket 44: 10%\n  bucket 43: 90%\n  bucket 42: 90%\n  bucket 44: 20%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 30%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  bucket 44: 40%\n  (Using difference cover)\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  bucket 45: 20%\n  Calculating Z arrays for bucket 46\n  bucket 45: 30%\n  bucket 45: 40%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 50%\n  bucket 46: 10%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 46: 20%\n  bucket 45: 80%\n  bucket 46: 30%\n  bucket 45: 90%\n  bucket 46: 40%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\nGetting block 51 of 60\n  Calculating Z arrays for bucket 50\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 50:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 50: 10%\n  bucket 51: 30%\n  bucket 50: 20%\n  bucket 51: 40%\n  bucket 50: 30%\nGetting block 52 of 60\n  bucket 50: 40%\n  Reserving size (126) for bucket 52\n  bucket 51: 50%\n  Calculating Z arrays for bucket 52\n  bucket 50: 50%\n  bucket 51: 60%\n  bucket 50: 60%\n  bucket 51: 70%\n  bucket 50: 70%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 80%\n  bucket 50: 80%\n  bucket 51: 90%\n  bucket 50: 90%\n  bucket 52: 10%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 100%\n  bucket 52: 20%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 54: 10%\n  bucket 53: 40%\n  bucket 54: 20%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 54: 30%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 54: 40%\n  bucket 53: 90%\n  bucket 53: 100%\n  bucket 54: 50%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Entering block accumulator loop for bucket 55:\n  Reserving size (126) for bucket 56\nGetting block 57 of 60\n  bucket 55: 10%\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 56\n  Calculating Z arrays for bucket 57\n  bucket 55: 20%\n  bucket 55: 30%\n  Entering block accumulator loop for bucket 56:\n  Entering block accumulator loop for bucket 57:\n  bucket 55: 40%\n  bucket 56: 10%\n  bucket 57: 10%\n  bucket 55: 50%\n  bucket 56: 20%\n  bucket 55: 60%\n  bucket 57: 20%\n  bucket 56: 30%\n  bucket 55: 70%\n  bucket 57: 30%\n  bucket 56: 40%\n  bucket 55: 80%\n  bucket 56: 50%\n  bucket 57: 40%\n  bucket 55: 90%\n  bucket 56: 60%\n  bucket 55: 100%\n  bucket 57: 50%\n  Sorting block of length 79 for bucket 55\n  bucket 56: 70%\n  (Using difference cover)\n  bucket 57: 60%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 57: 70%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Entering block accumulator loop for bucket 58:\n  Calculating Z arrays for bucket 59\n  bucket 58: 10%\n  bucket 58: 20%\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 30%\n  bucket 59: 10%\n  bucket 58: 40%\n  bucket 59: 20%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 59: 30%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 59: 40%\n  bucket 58: 90%\n  bucket 59: 50%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\nGetting block 4 of 60\nGetting block 6 of 60\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Reserving size (126) for bucket 6\nGetting block 7 of 60\n  Entering block accumulator loop for bucket 3:\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 6\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 5\n  bucket 1: 10%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 6:\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 8\n  bucket 6: 10%\n  Calculating Z arrays for bucket 7\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 20%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 40%\n  bucket 5: 20%\n  bucket 8: 10%\n  bucket 6: 30%\n  bucket 2: 30%\n  bucket 3: 50%\n  bucket 6: 40%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 6: 50%\n  bucket 2: 40%\n  bucket 3: 70%\n  bucket 4: 40%\n  bucket 1: 80%\n  bucket 8: 30%\n  bucket 3: 80%\n  bucket 1: 90%\n  bucket 5: 30%\n  bucket 8: 40%\n  bucket 1: 100%\n  bucket 6: 60%\n  bucket 3: 90%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 5: 40%\n  bucket 3: 100%\n  bucket 8: 50%\n  Sorting block of length 106 for bucket 3\n  bucket 4: 50%\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 6: 70%\n  bucket 7: 20%\n  bucket 6: 80%\n  bucket 8: 60%\n  bucket 4: 60%\n  bucket 5: 50%\n  bucket 8: 70%\n  bucket 2: 60%\n  bucket 6: 90%\n  bucket 4: 70%\n  bucket 5: 60%\n  bucket 4: 80%\n  bucket 8: 80%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 4: 90%\n  bucket 8: 90%\n  bucket 7: 40%\n  bucket 2: 70%\n  bucket 5: 80%\n  bucket 4: 100%\n  bucket 8: 100%\n  bucket 6: 100%\n  bucket 7: 50%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 5: 90%\n  bucket 7: 60%\n  bucket 2: 90%\n  bucket 5: 100%\n  bucket 7: 70%\n  bucket 2: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 7: 80%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  bucket 10: 80%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  Entering block accumulator loop for bucket 11:\n  bucket 12: 30%\n  bucket 11: 10%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 11: 20%\n  bucket 12: 80%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 90%\n  bucket 11: 70%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  bucket 13: 50%\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  bucket 13: 60%\n  Calculating Z arrays for bucket 15\n  Calculating Z arrays for bucket 14\n  bucket 13: 70%\n  bucket 13: 80%\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 90%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 100%\n  bucket 15: 10%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 15: 20%\n  bucket 14: 10%\n  bucket 15: 30%\n  bucket 14: 20%\n  bucket 15: 40%\n  bucket 14: 30%\n  bucket 15: 50%\n  bucket 14: 40%\n  bucket 15: 60%\n  bucket 14: 50%\n  bucket 15: 70%\n  bucket 14: 60%\n  bucket 15: 80%\n  bucket 14: 70%\n  bucket 15: 90%\n  bucket 14: 80%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 14: 90%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 80%\n  bucket 16: 90%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 100%\n  bucket 17: 10%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  bucket 17: 30%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  Sorting block time: 00:00:00\n  bucket 18: 50%\nReturning block of 101 for bucket 16\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 60%\n  bucket 24: 70%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 80%\n  bucket 25: 10%\n  bucket 24: 90%\n  bucket 25: 20%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  bucket 26: 80%\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 90%\n  bucket 26: 100%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  bucket 28: 90%\n  bucket 27: 90%\n  bucket 28: 100%\n  bucket 27: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\nGetting block 31 of 60\n  bucket 30: 40%\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 50%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 60%\n  bucket 31: 10%\n  bucket 30: 70%\n  bucket 31: 20%\n  bucket 30: 80%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 30: 90%\n  bucket 31: 50%\n  bucket 30: 100%\n  bucket 31: 60%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 10%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 20%\n  bucket 33: 10%\n  bucket 32: 30%\n  bucket 33: 20%\n  bucket 32: 40%\n  bucket 33: 30%\n  bucket 32: 50%\n  bucket 33: 40%\n  bucket 32: 60%\n  bucket 33: 50%\n  bucket 32: 70%\n  bucket 33: 60%\n  bucket 32: 80%\n  bucket 33: 70%\n  bucket 32: 90%\n  bucket 33: 80%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Entering block accumulator loop for bucket 34:\n  Calculating Z arrays for bucket 35\n  bucket 34: 10%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 20%\n  bucket 35: 10%\n  bucket 34: 30%\n  bucket 35: 20%\n  bucket 34: 40%\n  bucket 35: 30%\n  bucket 34: 50%\n  bucket 35: 40%\n  bucket 34: 60%\n  bucket 35: 50%\n  bucket 34: 70%\n  bucket 35: 60%\n  bucket 34: 80%\n  bucket 35: 70%\n  bucket 34: 90%\n  bucket 35: 80%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 36\nReturning block of 123 for bucket 34\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 10%\n  bucket 38: 10%\n  bucket 37: 20%\n  bucket 38: 20%\n  bucket 37: 30%\n  bucket 38: 30%\n  bucket 37: 40%\n  bucket 38: 40%\n  bucket 37: 50%\n  bucket 38: 50%\nGetting block 39 of 60\n  bucket 38: 60%\n  Reserving size (126) for bucket 39\n  bucket 37: 60%\n  Calculating Z arrays for bucket 39\n  bucket 38: 70%\n  bucket 37: 70%\n  bucket 38: 80%\n  Entering block accumulator loop for bucket 39:\n  bucket 37: 80%\n  bucket 38: 90%\n  bucket 39: 10%\n  bucket 37: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  bucket 39: 20%\n  bucket 37: 100%\n  (Using difference cover)\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  bucket 40: 60%\n  Calculating Z arrays for bucket 41\n  bucket 40: 70%\n  bucket 40: 80%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  bucket 41: 10%\n  (Using difference cover)\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 10%\n  bucket 43: 10%\n  bucket 42: 20%\n  bucket 43: 20%\n  bucket 42: 30%\n  bucket 43: 30%\n  bucket 42: 40%\n  bucket 43: 40%\n  bucket 42: 50%\n  bucket 43: 50%\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 60%\n  bucket 42: 60%\n  bucket 43: 70%\n  bucket 42: 70%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 80%\n  bucket 42: 80%\n  bucket 44: 10%\n  bucket 43: 90%\n  bucket 42: 90%\n  bucket 44: 20%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 30%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  bucket 44: 40%\n  (Using difference cover)\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  bucket 45: 20%\n  Calculating Z arrays for bucket 46\n  bucket 45: 30%\n  bucket 45: 40%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 50%\n  bucket 46: 10%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 46: 20%\n  bucket 45: 80%\n  bucket 46: 30%\n  bucket 45: 90%\n  bucket 46: 40%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\nGetting block 51 of 60\n  Calculating Z arrays for bucket 50\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 50:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 50: 10%\n  bucket 51: 30%\n  bucket 50: 20%\n  bucket 51: 40%\n  bucket 50: 30%\nGetting block 52 of 60\n  bucket 50: 40%\n  Reserving size (126) for bucket 52\n  bucket 51: 50%\n  Calculating Z arrays for bucket 52\n  bucket 50: 50%\n  bucket 51: 60%\n  bucket 50: 60%\n  bucket 51: 70%\n  bucket 50: 70%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 80%\n  bucket 50: 80%\n  bucket 51: 90%\n  bucket 50: 90%\n  bucket 52: 10%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 100%\n  bucket 52: 20%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 54: 10%\n  bucket 53: 40%\n  bucket 54: 20%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 54: 30%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 54: 40%\n  bucket 53: 90%\n  bucket 53: 100%\n  bucket 54: 50%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Entering block accumulator loop for bucket 55:\n  Reserving size (126) for bucket 56\nGetting block 57 of 60\n  bucket 55: 10%\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 56\n  Calculating Z arrays for bucket 57\n  bucket 55: 20%\n  bucket 55: 30%\n  Entering block accumulator loop for bucket 56:\n  Entering block accumulator loop for bucket 57:\n  bucket 55: 40%\n  bucket 56: 10%\n  bucket 57: 10%\n  bucket 55: 50%\n  bucket 56: 20%\n  bucket 55: 60%\n  bucket 57: 20%\n  bucket 56: 30%\n  bucket 55: 70%\n  bucket 57: 30%\n  bucket 56: 40%\n  bucket 55: 80%\n  bucket 56: 50%\n  bucket 57: 40%\n  bucket 55: 90%\n  bucket 56: 60%\n  bucket 55: 100%\n  bucket 57: 50%\n  Sorting block of length 79 for bucket 55\n  bucket 56: 70%\n  (Using difference cover)\n  bucket 57: 60%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 57: 70%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Entering block accumulator loop for bucket 58:\n  Calculating Z arrays for bucket 59\n  bucket 58: 10%\n  bucket 58: 20%\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 30%\n  bucket 59: 10%\n  bucket 58: 40%\n  bucket 59: 20%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 59: 30%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 59: 40%\n  bucket 58: 90%\n  bucket 59: 50%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 13:21:24", "plugin": "core", "name": "end_epoch", "raw_value": "1713273684.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:21:24", "plugin": "core", "name": "start_epoch", "raw_value": "1713273684.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-14", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 14, "time_seconds": 28.10475516319275, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "ccc64fc93e175b64"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "b0d44d69b5a68a0b"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "b2bb5f3fc4517aff", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:22:02.952825", "create_time": "2024-04-16T13:21:51.628586", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "92339b0b40a5ec99", "external_id": "gxy-sg4fj", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/a/d/d/dataset_add0d3c8-20ee-4451-a10b-95c18ee60ed9.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        seqtk seq -1 '/galaxy/server/database/objects/e/9/d/dataset_e9d7e53a-441e-4611-b3d4-27f743d139e7.dat' > input_f.fasta && seqtk seq -2 '/galaxy/server/database/objects/e/9/d/dataset_e9d7e53a-441e-4611-b3d4-27f743d139e7.dat' > input_r.fasta &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f   -1 input_f.fasta -2 input_r.fasta                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/9/c/8/dataset_9c8fcf5f-4353-4743-8ebb-544e9ddd7ac4.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 222, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 221, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "ccc64fc93e175b64", "src": "hda", "uuid": "add0d3c8-20ee-4451-a10b-95c18ee60ed9"}, "library|input_1": {"id": "b0d44d69b5a68a0b", "src": "hda", "uuid": "e9d7e53a-441e-4611-b3d4-27f743d139e7"}}, "outputs": {"output_alignments": {"id": "5c49cb3bf7f6cebe", "src": "hda", "uuid": "9c8fcf5f-4353-4743-8ebb-544e9ddd7ac4"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 2:\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 1:\n  bucket 2: 20%\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  bucket 2: 30%\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  bucket 2: 40%\nGetting block 4 of 60\n  bucket 2: 50%\n  bucket 1: 20%\n  Reserving size (126) for bucket 4\n  bucket 2: 60%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  bucket 2: 70%\n  bucket 1: 40%\nGetting block 5 of 60\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 50%\n  bucket 2: 80%\n  bucket 3: 20%\n  bucket 1: 60%\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  bucket 2: 90%\n  bucket 3: 30%\n  bucket 4: 10%\n  Reserving size (126) for bucket 5\n  Calculating Z arrays for bucket 6\n  bucket 2: 100%\n  bucket 4: 20%\n  Calculating Z arrays for bucket 5\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 30%\n  Sorting block of length 84 for bucket 2\n  Calculating Z arrays for bucket 8\n  (Using difference cover)\n  bucket 3: 40%\n  bucket 1: 70%\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 1: 80%\n  bucket 4: 40%\n  Calculating Z arrays for bucket 7\n  bucket 1: 90%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 10%\n  bucket 3: 50%\n  Sorting block time: 00:00:00\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 20%\n  bucket 6: 20%\nReturning block of 85 for bucket 2\n  bucket 5: 30%\n  bucket 1: 100%\n  bucket 3: 60%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 3: 80%\n  bucket 8: 10%\n  bucket 5: 50%\n  bucket 4: 60%\n  bucket 6: 40%\n  bucket 8: 20%\n  bucket 5: 60%\n  bucket 4: 70%\n  bucket 6: 50%\n  bucket 7: 10%\n  bucket 3: 90%\n  bucket 5: 70%\n  bucket 8: 30%\n  bucket 3: 100%\n  bucket 4: 80%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 7: 20%\n  bucket 5: 80%\n  bucket 4: 90%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 8: 40%\n  Sorting block time: 00:00:00\n  bucket 7: 30%\n  bucket 6: 80%\nReturning block of 43 for bucket 1\n  bucket 7: 40%\n  bucket 4: 100%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 7: 50%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 63 for bucket 5\n  bucket 7: 60%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Entering block accumulator loop for bucket 9:\n  Calculating Z arrays for bucket 11\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 10:\n  bucket 11: 10%\n  bucket 10: 10%\n  bucket 11: 20%\n  bucket 10: 20%\n  bucket 11: 30%\n  bucket 10: 30%\n  bucket 11: 40%\n  bucket 10: 40%\n  bucket 11: 50%\n  bucket 10: 50%\n  bucket 11: 60%\n  bucket 10: 60%\n  bucket 11: 70%\n  bucket 9: 10%\n  bucket 11: 80%\n  bucket 10: 70%\n  bucket 11: 90%\n  bucket 9: 20%\n  bucket 10: 80%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  bucket 9: 30%\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 9: 40%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Calculating Z arrays for bucket 13\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 40%\n  bucket 13: 10%\n  bucket 12: 50%\n  bucket 13: 20%\n  bucket 12: 60%\n  bucket 13: 30%\n  bucket 12: 70%\n  bucket 13: 40%\n  bucket 12: 80%\n  bucket 13: 50%\n  bucket 12: 90%\n  bucket 13: 60%\n  bucket 12: 100%\n  bucket 13: 70%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 15: 30%\n  bucket 14: 60%\n  bucket 15: 40%\n  bucket 14: 70%\n  bucket 15: 50%\n  bucket 14: 80%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\nGetting block 16 of 60\n  bucket 15: 100%\n  Reserving size (126) for bucket 16\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  Sorting block time: 00:00:00\n  bucket 16: 90%\nReturning block of 69 for bucket 15\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  Sorting block time: 00:00:00\n  bucket 18: 30%\nReturning block of 40 for bucket 17\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Entering block accumulator loop for bucket 19:\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 10%\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 20: 10%\n  bucket 19: 50%\n  bucket 20: 20%\n  bucket 19: 60%\n  bucket 20: 30%\n  bucket 19: 70%\n  bucket 20: 40%\n  bucket 19: 80%\n  bucket 20: 50%\n  bucket 19: 90%\n  bucket 20: 60%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 21: 60%\n  bucket 22: 70%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 21: 80%\n  bucket 22: 90%\n  bucket 21: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  bucket 23: 10%\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\nGetting block 25 of 60\n  bucket 24: 90%\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Entering block accumulator loop for bucket 26:\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  bucket 26: 20%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 26: 40%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 27: 30%\n  bucket 28: 40%\n  bucket 26: 60%\n  bucket 28: 50%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 28: 60%\n  bucket 26: 80%\n  bucket 27: 50%\n  bucket 28: 70%\n  bucket 26: 90%\n  bucket 28: 80%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 60%\n  bucket 28: 90%\n  bucket 28: 100%\n  bucket 27: 70%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 10%\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  bucket 30: 40%\n  Calculating Z arrays for bucket 31\n  bucket 29: 40%\n  bucket 30: 50%\n  Entering block accumulator loop for bucket 31:\n  bucket 29: 50%\n  bucket 30: 60%\n  bucket 31: 10%\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 31: 20%\n  bucket 29: 70%\n  bucket 31: 30%\n  bucket 30: 80%\n  bucket 31: 40%\n  bucket 29: 80%\n  bucket 31: 50%\n  bucket 30: 90%\n  bucket 29: 90%\n  bucket 30: 100%\n  bucket 31: 60%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 29: 100%\n  bucket 31: 70%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 60%\n  bucket 32: 70%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 33: 10%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 30%\nGetting block 36 of 60\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 40%\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 34: 50%\n  bucket 35: 10%\n  Entering block accumulator loop for bucket 36:\n  bucket 34: 60%\n  bucket 35: 20%\n  bucket 36: 10%\n  bucket 35: 30%\n  bucket 34: 70%\n  bucket 35: 40%\n  bucket 36: 20%\n  bucket 34: 80%\n  bucket 35: 50%\n  bucket 36: 30%\n  bucket 34: 90%\n  bucket 35: 60%\n  bucket 36: 40%\n  bucket 35: 70%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  bucket 36: 50%\n  (Using difference cover)\n  bucket 35: 80%\n  bucket 36: 60%\n  bucket 35: 90%\n  bucket 36: 70%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\nGetting block 38 of 60\n  Calculating Z arrays for bucket 37\nGetting block 39 of 60\n  Reserving size (126) for bucket 38\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 39:\n  bucket 37: 10%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 20%\n  bucket 39: 10%\n  bucket 38: 10%\n  bucket 37: 30%\n  bucket 39: 20%\n  bucket 38: 20%\n  bucket 37: 40%\n  bucket 39: 30%\n  bucket 38: 30%\n  bucket 37: 50%\n  bucket 39: 40%\n  bucket 38: 40%\n  bucket 37: 60%\n  bucket 39: 50%\n  bucket 38: 50%\n  bucket 37: 70%\n  bucket 38: 60%\n  bucket 39: 60%\n  bucket 37: 80%\n  bucket 39: 70%\n  bucket 38: 70%\n  bucket 39: 80%\n  bucket 38: 80%\n  bucket 37: 90%\n  bucket 39: 90%\n  bucket 38: 90%\n  bucket 37: 100%\n  bucket 38: 100%\n  bucket 39: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Calculating Z arrays for bucket 41\n  bucket 40: 10%\n  bucket 40: 20%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 30%\n  bucket 41: 10%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 41: 20%\n  bucket 40: 60%\n  bucket 41: 30%\n  bucket 40: 70%\n  bucket 41: 40%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 41: 50%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\nGetting block 43 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 10%\nGetting block 44 of 60\n  bucket 43: 10%\n  bucket 42: 20%\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 42: 30%\n  bucket 43: 20%\n  bucket 42: 40%\n  bucket 43: 30%\n  Entering block accumulator loop for bucket 44:\n  bucket 42: 50%\n  bucket 43: 40%\n  bucket 42: 60%\n  bucket 44: 10%\n  bucket 43: 50%\n  bucket 42: 70%\n  bucket 44: 20%\n  bucket 42: 80%\n  bucket 43: 60%\n  bucket 44: 30%\n  bucket 42: 90%\n  bucket 43: 70%\n  bucket 44: 40%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 80%\n  bucket 44: 50%\n  bucket 43: 90%\n  bucket 44: 60%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 46: 10%\n  bucket 45: 20%\n  bucket 46: 20%\n  bucket 45: 30%\n  bucket 46: 30%\n  bucket 45: 40%\n  bucket 46: 40%\n  bucket 45: 50%\n  bucket 46: 50%\n  bucket 45: 60%\n  bucket 46: 60%\n  bucket 45: 70%\n  bucket 46: 70%\n  bucket 45: 80%\n  bucket 46: 80%\n  bucket 45: 90%\n  bucket 46: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 10%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 20%\n  bucket 48: 10%\n  bucket 47: 30%\n  bucket 48: 20%\n  bucket 47: 40%\n  bucket 48: 30%\n  bucket 47: 50%\n  bucket 48: 40%\n  bucket 47: 60%\n  bucket 48: 50%\n  bucket 47: 70%\n  bucket 48: 60%\n  bucket 47: 80%\n  bucket 48: 70%\n  bucket 47: 90%\n  bucket 48: 80%\n  bucket 47: 100%\n  bucket 48: 90%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Entering block accumulator loop for bucket 50:\n  Calculating Z arrays for bucket 51\n  bucket 50: 10%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 20%\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 50: 30%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 50: 40%\n  bucket 51: 50%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 51: 60%\n  bucket 50: 70%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 50: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  bucket 50: 90%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Entering block accumulator loop for bucket 52:\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 10%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 52: 20%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 52: 30%\n  bucket 54: 30%\n  bucket 53: 30%\n  bucket 54: 40%\n  bucket 52: 40%\n  bucket 54: 50%\n  bucket 53: 40%\n  bucket 54: 60%\n  bucket 52: 50%\n  bucket 54: 70%\n  bucket 53: 50%\n  bucket 54: 80%\n  bucket 52: 60%\n  bucket 54: 90%\n  bucket 53: 60%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  bucket 52: 70%\n  (Using difference cover)\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 52: 80%\n  bucket 53: 100%\n  bucket 52: 90%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 20%\n  bucket 55: 30%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 40%\n  bucket 56: 10%\n  bucket 55: 50%\n  bucket 56: 20%\n  bucket 55: 60%\n  bucket 56: 30%\n  bucket 55: 70%\n  bucket 56: 40%\n  bucket 55: 80%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 55: 90%\n  bucket 56: 70%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  bucket 56: 80%\n  (Using difference cover)\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\nGetting block 58 of 60\n  bucket 57: 70%\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 80%\n  bucket 57: 90%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 100%\n  bucket 58: 10%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Entering block accumulator loop for bucket 59:\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 10%\n  bucket 60: 10%\n  bucket 59: 20%\n  bucket 60: 20%\n  bucket 59: 30%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 59: 40%\n  bucket 60: 50%\n  bucket 59: 50%\n  bucket 60: 60%\n  bucket 59: 60%\n  bucket 60: 70%\n  bucket 59: 70%\n  bucket 60: 80%\n  bucket 59: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  bucket 59: 90%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    3 (30.00%) aligned concordantly 0 times\n    7 (70.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        3 (50.00%) aligned 0 times\n        3 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n85.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    3 (30.00%) aligned concordantly 0 times\n    7 (70.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        3 (50.00%) aligned 0 times\n        3 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n85.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 2:\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 1:\n  bucket 2: 20%\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  bucket 2: 30%\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  bucket 2: 40%\nGetting block 4 of 60\n  bucket 2: 50%\n  bucket 1: 20%\n  Reserving size (126) for bucket 4\n  bucket 2: 60%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  bucket 2: 70%\n  bucket 1: 40%\nGetting block 5 of 60\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 50%\n  bucket 2: 80%\n  bucket 3: 20%\n  bucket 1: 60%\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  bucket 2: 90%\n  bucket 3: 30%\n  bucket 4: 10%\n  Reserving size (126) for bucket 5\n  Calculating Z arrays for bucket 6\n  bucket 2: 100%\n  bucket 4: 20%\n  Calculating Z arrays for bucket 5\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 30%\n  Sorting block of length 84 for bucket 2\n  Calculating Z arrays for bucket 8\n  (Using difference cover)\n  bucket 3: 40%\n  bucket 1: 70%\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 1: 80%\n  bucket 4: 40%\n  Calculating Z arrays for bucket 7\n  bucket 1: 90%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 10%\n  bucket 3: 50%\n  Sorting block time: 00:00:00\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 20%\n  bucket 6: 20%\nReturning block of 85 for bucket 2\n  bucket 5: 30%\n  bucket 1: 100%\n  bucket 3: 60%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 3: 80%\n  bucket 8: 10%\n  bucket 5: 50%\n  bucket 4: 60%\n  bucket 6: 40%\n  bucket 8: 20%\n  bucket 5: 60%\n  bucket 4: 70%\n  bucket 6: 50%\n  bucket 7: 10%\n  bucket 3: 90%\n  bucket 5: 70%\n  bucket 8: 30%\n  bucket 3: 100%\n  bucket 4: 80%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 7: 20%\n  bucket 5: 80%\n  bucket 4: 90%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 8: 40%\n  Sorting block time: 00:00:00\n  bucket 7: 30%\n  bucket 6: 80%\nReturning block of 43 for bucket 1\n  bucket 7: 40%\n  bucket 4: 100%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 7: 50%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 63 for bucket 5\n  bucket 7: 60%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Entering block accumulator loop for bucket 9:\n  Calculating Z arrays for bucket 11\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 10:\n  bucket 11: 10%\n  bucket 10: 10%\n  bucket 11: 20%\n  bucket 10: 20%\n  bucket 11: 30%\n  bucket 10: 30%\n  bucket 11: 40%\n  bucket 10: 40%\n  bucket 11: 50%\n  bucket 10: 50%\n  bucket 11: 60%\n  bucket 10: 60%\n  bucket 11: 70%\n  bucket 9: 10%\n  bucket 11: 80%\n  bucket 10: 70%\n  bucket 11: 90%\n  bucket 9: 20%\n  bucket 10: 80%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  bucket 9: 30%\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 9: 40%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Calculating Z arrays for bucket 13\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 40%\n  bucket 13: 10%\n  bucket 12: 50%\n  bucket 13: 20%\n  bucket 12: 60%\n  bucket 13: 30%\n  bucket 12: 70%\n  bucket 13: 40%\n  bucket 12: 80%\n  bucket 13: 50%\n  bucket 12: 90%\n  bucket 13: 60%\n  bucket 12: 100%\n  bucket 13: 70%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 15: 30%\n  bucket 14: 60%\n  bucket 15: 40%\n  bucket 14: 70%\n  bucket 15: 50%\n  bucket 14: 80%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\nGetting block 16 of 60\n  bucket 15: 100%\n  Reserving size (126) for bucket 16\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  Sorting block time: 00:00:00\n  bucket 16: 90%\nReturning block of 69 for bucket 15\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  Sorting block time: 00:00:00\n  bucket 18: 30%\nReturning block of 40 for bucket 17\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Entering block accumulator loop for bucket 19:\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 10%\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 20: 10%\n  bucket 19: 50%\n  bucket 20: 20%\n  bucket 19: 60%\n  bucket 20: 30%\n  bucket 19: 70%\n  bucket 20: 40%\n  bucket 19: 80%\n  bucket 20: 50%\n  bucket 19: 90%\n  bucket 20: 60%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 21: 60%\n  bucket 22: 70%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 21: 80%\n  bucket 22: 90%\n  bucket 21: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  bucket 23: 10%\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\nGetting block 25 of 60\n  bucket 24: 90%\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Entering block accumulator loop for bucket 26:\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  bucket 26: 20%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 26: 40%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 27: 30%\n  bucket 28: 40%\n  bucket 26: 60%\n  bucket 28: 50%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 28: 60%\n  bucket 26: 80%\n  bucket 27: 50%\n  bucket 28: 70%\n  bucket 26: 90%\n  bucket 28: 80%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 60%\n  bucket 28: 90%\n  bucket 28: 100%\n  bucket 27: 70%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 10%\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  bucket 30: 40%\n  Calculating Z arrays for bucket 31\n  bucket 29: 40%\n  bucket 30: 50%\n  Entering block accumulator loop for bucket 31:\n  bucket 29: 50%\n  bucket 30: 60%\n  bucket 31: 10%\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 31: 20%\n  bucket 29: 70%\n  bucket 31: 30%\n  bucket 30: 80%\n  bucket 31: 40%\n  bucket 29: 80%\n  bucket 31: 50%\n  bucket 30: 90%\n  bucket 29: 90%\n  bucket 30: 100%\n  bucket 31: 60%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 29: 100%\n  bucket 31: 70%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 60%\n  bucket 32: 70%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 33: 10%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 30%\nGetting block 36 of 60\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 40%\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 34: 50%\n  bucket 35: 10%\n  Entering block accumulator loop for bucket 36:\n  bucket 34: 60%\n  bucket 35: 20%\n  bucket 36: 10%\n  bucket 35: 30%\n  bucket 34: 70%\n  bucket 35: 40%\n  bucket 36: 20%\n  bucket 34: 80%\n  bucket 35: 50%\n  bucket 36: 30%\n  bucket 34: 90%\n  bucket 35: 60%\n  bucket 36: 40%\n  bucket 35: 70%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  bucket 36: 50%\n  (Using difference cover)\n  bucket 35: 80%\n  bucket 36: 60%\n  bucket 35: 90%\n  bucket 36: 70%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\nGetting block 38 of 60\n  Calculating Z arrays for bucket 37\nGetting block 39 of 60\n  Reserving size (126) for bucket 38\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 39:\n  bucket 37: 10%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 20%\n  bucket 39: 10%\n  bucket 38: 10%\n  bucket 37: 30%\n  bucket 39: 20%\n  bucket 38: 20%\n  bucket 37: 40%\n  bucket 39: 30%\n  bucket 38: 30%\n  bucket 37: 50%\n  bucket 39: 40%\n  bucket 38: 40%\n  bucket 37: 60%\n  bucket 39: 50%\n  bucket 38: 50%\n  bucket 37: 70%\n  bucket 38: 60%\n  bucket 39: 60%\n  bucket 37: 80%\n  bucket 39: 70%\n  bucket 38: 70%\n  bucket 39: 80%\n  bucket 38: 80%\n  bucket 37: 90%\n  bucket 39: 90%\n  bucket 38: 90%\n  bucket 37: 100%\n  bucket 38: 100%\n  bucket 39: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Calculating Z arrays for bucket 41\n  bucket 40: 10%\n  bucket 40: 20%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 30%\n  bucket 41: 10%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 41: 20%\n  bucket 40: 60%\n  bucket 41: 30%\n  bucket 40: 70%\n  bucket 41: 40%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 41: 50%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\nGetting block 43 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 10%\nGetting block 44 of 60\n  bucket 43: 10%\n  bucket 42: 20%\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 42: 30%\n  bucket 43: 20%\n  bucket 42: 40%\n  bucket 43: 30%\n  Entering block accumulator loop for bucket 44:\n  bucket 42: 50%\n  bucket 43: 40%\n  bucket 42: 60%\n  bucket 44: 10%\n  bucket 43: 50%\n  bucket 42: 70%\n  bucket 44: 20%\n  bucket 42: 80%\n  bucket 43: 60%\n  bucket 44: 30%\n  bucket 42: 90%\n  bucket 43: 70%\n  bucket 44: 40%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 80%\n  bucket 44: 50%\n  bucket 43: 90%\n  bucket 44: 60%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 46: 10%\n  bucket 45: 20%\n  bucket 46: 20%\n  bucket 45: 30%\n  bucket 46: 30%\n  bucket 45: 40%\n  bucket 46: 40%\n  bucket 45: 50%\n  bucket 46: 50%\n  bucket 45: 60%\n  bucket 46: 60%\n  bucket 45: 70%\n  bucket 46: 70%\n  bucket 45: 80%\n  bucket 46: 80%\n  bucket 45: 90%\n  bucket 46: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 10%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 20%\n  bucket 48: 10%\n  bucket 47: 30%\n  bucket 48: 20%\n  bucket 47: 40%\n  bucket 48: 30%\n  bucket 47: 50%\n  bucket 48: 40%\n  bucket 47: 60%\n  bucket 48: 50%\n  bucket 47: 70%\n  bucket 48: 60%\n  bucket 47: 80%\n  bucket 48: 70%\n  bucket 47: 90%\n  bucket 48: 80%\n  bucket 47: 100%\n  bucket 48: 90%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Entering block accumulator loop for bucket 50:\n  Calculating Z arrays for bucket 51\n  bucket 50: 10%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 20%\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 50: 30%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 50: 40%\n  bucket 51: 50%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 51: 60%\n  bucket 50: 70%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 50: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  bucket 50: 90%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Entering block accumulator loop for bucket 52:\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 10%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 52: 20%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 52: 30%\n  bucket 54: 30%\n  bucket 53: 30%\n  bucket 54: 40%\n  bucket 52: 40%\n  bucket 54: 50%\n  bucket 53: 40%\n  bucket 54: 60%\n  bucket 52: 50%\n  bucket 54: 70%\n  bucket 53: 50%\n  bucket 54: 80%\n  bucket 52: 60%\n  bucket 54: 90%\n  bucket 53: 60%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  bucket 52: 70%\n  (Using difference cover)\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 52: 80%\n  bucket 53: 100%\n  bucket 52: 90%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 20%\n  bucket 55: 30%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 40%\n  bucket 56: 10%\n  bucket 55: 50%\n  bucket 56: 20%\n  bucket 55: 60%\n  bucket 56: 30%\n  bucket 55: 70%\n  bucket 56: 40%\n  bucket 55: 80%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 55: 90%\n  bucket 56: 70%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  bucket 56: 80%\n  (Using difference cover)\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\nGetting block 58 of 60\n  bucket 57: 70%\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 80%\n  bucket 57: 90%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 100%\n  bucket 58: 10%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Entering block accumulator loop for bucket 59:\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 10%\n  bucket 60: 10%\n  bucket 59: 20%\n  bucket 60: 20%\n  bucket 59: 30%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 59: 40%\n  bucket 60: 50%\n  bucket 59: 50%\n  bucket 60: 60%\n  bucket 59: 60%\n  bucket 60: 70%\n  bucket 59: 70%\n  bucket 60: 80%\n  bucket 59: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  bucket 59: 90%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 13:21:53", "plugin": "core", "name": "end_epoch", "raw_value": "1713273713.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:21:53", "plugin": "core", "name": "start_epoch", "raw_value": "1713273713.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-15", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 15, "time_seconds": 22.554466247558594, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "9ac9fe5e81581ac0"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "712ea73aebf30079"}, "library|rna_strandness": "R", "library|type": "single", "adv|spliced_options|novel_splicesite_outfile": true, "adv|spliced_options|spliced_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "56605ffd3e375e05", "state": "error", "exit_code": null, "update_time": "2024-04-16T13:22:25.445506", "create_time": "2024-04-16T13:22:19.188183", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "92339b0b40a5ec99", "external_id": "gxy-nqp9f", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/e/b/6/dataset_eb64f701-d2d8-49e1-a939-260ce38656ca.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/5/2/4/dataset_5246d7aa-9011-48f5-9f24-f6e7e7065f80.dat' input_f.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'     -U 'input_f.fastq'      --rna-strandness R             --pen-cansplice 0 --pen-noncansplice 12 --pen-canintronlen G,-8.0,1.0 --pen-noncanintronlen G,-8.0,1.0  --min-intronlen 20 --max-intronlen 500000   --novel-splicesite-outfile '/galaxy/server/database/objects/4/6/6/dataset_466105e6-0411-4c52-baf8-361d0f230e19.dat'                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/b/b/8/dataset_bb8f7279-40bc-472d-807f-c5a973dfd821.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 1, \"canonical_penalty\": \"0\", \"coefficient\": \"1.0\", \"constant_term\": \"-8.0\", \"function_type\": \"G\", \"known_splice_gtf\": null, \"max_intron\": \"500000\", \"min_intron\": \"20\", \"nc_coefficient\": \"1.0\", \"nc_constant_term\": \"-8.0\", \"nc_function_type\": \"G\", \"no_spliced_alignment_options\": {\"__current_case__\": 1, \"no_spliced_alignment\": \"\"}, \"noncanonical_penalty\": \"12\", \"notmplen\": false, \"novel_splicesite_outfile\": true, \"spliced_options_selector\": \"advanced\", \"tma\": \"\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 225, \"src\": \"hda\"}]}, \"rna_strandness\": \"R\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 224, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "9ac9fe5e81581ac0", "src": "hda", "uuid": "eb64f701-d2d8-49e1-a939-260ce38656ca"}, "library|input_1": {"id": "712ea73aebf30079", "src": "hda", "uuid": "5246d7aa-9011-48f5-9f24-f6e7e7065f80"}}, "outputs": {"output_alignments": {"id": "8c358207b40d736f", "src": "hda", "uuid": "bb8f7279-40bc-472d-807f-c5a973dfd821"}, "novel_splicesite_output": {"id": "05e755c954fb6b52", "src": "hda", "uuid": "466105e6-0411-4c52-baf8-361d0f230e19"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": null, "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "hisat2/2.2.1+galaxy1-16", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 16, "time_seconds": 27.44893741607666, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "446d278b8b2e4702"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "6eae8d56d0d3210b"}, "library|type": "paired_interleaved", "adv|sam_options|no_unal": true, "adv|sam_options|read_groups|read_groups_0|rg": "BC:test1", "adv|sam_options|read_groups|read_groups_1|rg": "CN:test2", "adv|sam_options|read_groups|rg_labels": "Yes", "adv|sam_options|chr_text": "--add-chrname", "adv|sam_options|omit_sec_seq": true, "adv|sam_options|sam_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "f8b199757bbe4dcf", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:22:52.736099", "create_time": "2024-04-16T13:22:42.104629", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "92339b0b40a5ec99", "external_id": "gxy-gxr77", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/2/5/4/dataset_2545d98c-029d-43ca-bde8-d2adcb5aeae0.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        bzcat '/galaxy/server/database/objects/8/c/3/dataset_8c3ef47c-a2f7-4f30-bcec-b08d8faec078.dat' | seqtk seq -1 /dev/stdin > input_f.fastq && bzcat '/galaxy/server/database/objects/8/c/3/dataset_8c3ef47c-a2f7-4f30-bcec-b08d8faec078.dat' | seqtk seq -2 /dev/stdin > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                        --no-unal --rg-id 'read_group' --rg 'BC:test1' --rg 'CN:test2' --add-chrname --omit-sec-seq         | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/d/0/0/dataset_d00b3297-75a7-44d6-96c4-37a4bb2cb1d8.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 1, \"chr_text\": \"--add-chrname\", \"no_unal\": true, \"omit_sec_seq\": true, \"read_groups\": {\"__current_case__\": 1, \"read_groups\": [{\"__index__\": 0, \"rg\": \"BC:test1\"}, {\"__index__\": 1, \"rg\": \"CN:test2\"}], \"rg_id\": \"read_group\", \"rg_labels\": \"Yes\"}, \"sam_options_selector\": \"advanced\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 229, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 228, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "446d278b8b2e4702", "src": "hda", "uuid": "2545d98c-029d-43ca-bde8-d2adcb5aeae0"}, "library|input_1": {"id": "6eae8d56d0d3210b", "src": "hda", "uuid": "8c3ef47c-a2f7-4f30-bcec-b08d8faec078"}}, "outputs": {"output_alignments": {"id": "f19bf50ae46c141c", "src": "hda", "uuid": "d00b3297-75a7-44d6-96c4-37a4bb2cb1d8"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 3\nGetting block 4 of 60\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\nGetting block 6 of 60\n  bucket 1: 10%\n  Reserving size (126) for bucket 4\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 6\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  bucket 1: 30%\n  Calculating Z arrays for bucket 4\n  bucket 2: 10%\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 6:\nGetting block 7 of 60\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 20%\n  bucket 2: 30%\n  bucket 1: 50%\n  Reserving size (126) for bucket 7\n  bucket 3: 20%\n  bucket 6: 30%\n  Calculating Z arrays for bucket 7\n  bucket 2: 40%\n  bucket 5: 10%\n  bucket 6: 40%\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 4:\n  bucket 5: 20%\n  Calculating Z arrays for bucket 8\n  bucket 2: 50%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 3: 30%\n  bucket 6: 60%\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 4: 10%\n  bucket 1: 70%\n  bucket 6: 70%\n  bucket 5: 40%\n  bucket 7: 10%\n  bucket 2: 70%\n  bucket 3: 40%\n  bucket 6: 80%\n  bucket 5: 50%\n  bucket 8: 10%\n  bucket 4: 20%\n  bucket 2: 80%\n  bucket 6: 90%\n  bucket 1: 80%\n  bucket 5: 60%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 2: 90%\n  bucket 3: 50%\n  bucket 5: 70%\n  bucket 6: 100%\n  bucket 4: 30%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 5: 80%\n  bucket 2: 100%\n  bucket 3: 60%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 4: 40%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 1: 90%\n  bucket 5: 100%\n  bucket 8: 50%\n  bucket 4: 60%\n  bucket 3: 80%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 1: 100%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 8: 60%\n  bucket 7: 60%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 8: 70%\n  bucket 3: 100%\n  bucket 7: 70%\n  bucket 4: 90%\n  bucket 8: 80%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 4: 100%\n  bucket 8: 90%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Entering block accumulator loop for bucket 10:\n  Calculating Z arrays for bucket 11\n  bucket 10: 10%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 11: 10%\n  bucket 10: 40%\n  bucket 11: 20%\n  bucket 10: 50%\n  bucket 11: 30%\n  bucket 10: 60%\n  bucket 11: 40%\n  bucket 10: 70%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 11: 50%\n  bucket 10: 80%\n  bucket 11: 60%\n  bucket 10: 90%\n  bucket 11: 70%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 20%\n  bucket 12: 30%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 40%\n  bucket 13: 10%\n  bucket 12: 50%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 12: 60%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 12: 70%\n  bucket 13: 60%\n  bucket 12: 80%\n  bucket 13: 70%\n  bucket 12: 90%\n  bucket 13: 80%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Entering block accumulator loop for bucket 14:\n  Calculating Z arrays for bucket 15\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 40%\n  bucket 15: 10%\n  bucket 14: 50%\n  bucket 15: 20%\n  bucket 14: 60%\n  bucket 15: 30%\n  bucket 14: 70%\n  bucket 15: 40%\n  bucket 14: 80%\n  bucket 15: 50%\n  bucket 14: 90%\n  bucket 15: 60%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 16:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 16: 10%\n  bucket 17: 30%\n  bucket 16: 20%\n  bucket 17: 40%\n  bucket 16: 30%\n  bucket 17: 50%\n  bucket 16: 40%\n  bucket 17: 60%\n  bucket 16: 50%\n  bucket 17: 70%\n  bucket 16: 60%\n  bucket 17: 80%\n  bucket 16: 70%\n  bucket 17: 90%\n  bucket 16: 80%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  bucket 18: 10%\n  Calculating Z arrays for bucket 19\n  bucket 18: 20%\n  bucket 18: 30%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 40%\n  bucket 19: 10%\n  bucket 18: 50%\n  bucket 19: 20%\n  bucket 18: 60%\n  bucket 19: 30%\n  bucket 18: 70%\n  bucket 19: 40%\n  bucket 18: 80%\n  bucket 19: 50%\n  bucket 18: 90%\n  bucket 19: 60%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\nGetting block 21 of 60\n  bucket 20: 70%\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  Entering block accumulator loop for bucket 21:\n  (Using difference cover)\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Entering block accumulator loop for bucket 22:\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 22: 70%\n  bucket 23: 90%\n  bucket 22: 80%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  bucket 22: 90%\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 24: 50%\n  bucket 25: 60%\n  bucket 24: 60%\n  bucket 25: 70%\n  bucket 24: 70%\n  bucket 25: 80%\n  bucket 24: 80%\n  bucket 25: 90%\n  bucket 24: 90%\n  bucket 25: 100%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 26: 40%\n  bucket 27: 30%\n  bucket 26: 50%\n  bucket 27: 40%\n  bucket 26: 60%\n  bucket 27: 50%\n  bucket 26: 70%\n  bucket 27: 60%\n  bucket 26: 80%\n  bucket 27: 70%\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\nGetting block 29 of 60\n  Calculating Z arrays for bucket 28\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 29: 40%\n  bucket 28: 80%\n  bucket 29: 50%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  bucket 30: 70%\n  Calculating Z arrays for bucket 31\n  bucket 30: 80%\n  bucket 30: 90%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 32:\n  bucket 33: 10%\n  bucket 32: 10%\n  bucket 33: 20%\n  bucket 32: 20%\n  bucket 33: 30%\n  bucket 32: 30%\n  bucket 33: 40%\n  bucket 32: 40%\n  bucket 33: 50%\n  bucket 32: 50%\n  bucket 33: 60%\nGetting block 34 of 60\n  bucket 32: 60%\n  Reserving size (126) for bucket 34\n  bucket 33: 70%\n  Calculating Z arrays for bucket 34\n  bucket 32: 70%\n  bucket 33: 80%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 90%\n  bucket 32: 80%\n  bucket 33: 100%\n  bucket 34: 10%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 32: 90%\n  bucket 34: 20%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  bucket 34: 30%\n  (Using difference cover)\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 10%\n  bucket 36: 10%\n  bucket 35: 20%\n  bucket 36: 20%\n  bucket 35: 30%\n  bucket 36: 30%\n  bucket 35: 40%\n  bucket 36: 40%\n  bucket 35: 50%\n  bucket 36: 50%\n  bucket 35: 60%\n  bucket 36: 60%\n  bucket 35: 70%\n  bucket 36: 70%\n  bucket 35: 80%\n  bucket 36: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  bucket 37: 90%\n  Calculating Z arrays for bucket 38\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  Sorting block time: 00:00:00\n  bucket 38: 80%\nReturning block of 60 for bucket 37\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 39:\n  bucket 40: 10%\n  bucket 39: 10%\n  bucket 40: 20%\n  bucket 39: 20%\n  bucket 40: 30%\n  bucket 39: 30%\n  bucket 40: 40%\n  bucket 39: 40%\n  bucket 40: 50%\n  bucket 39: 50%\n  bucket 40: 60%\n  bucket 39: 60%\n  bucket 40: 70%\n  bucket 39: 70%\n  bucket 40: 80%\n  bucket 39: 80%\n  bucket 40: 90%\n  bucket 39: 90%\n  bucket 40: 100%\n  bucket 39: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\nGetting block 42 of 60\n  Calculating Z arrays for bucket 41\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  bucket 42: 10%\n  bucket 41: 20%\n  bucket 42: 20%\n  bucket 41: 30%\n  bucket 42: 30%\n  bucket 41: 40%\n  bucket 42: 40%\n  bucket 41: 50%\n  bucket 42: 50%\n  bucket 41: 60%\n  bucket 42: 60%\n  bucket 41: 70%\n  bucket 42: 70%\n  bucket 41: 80%\n  bucket 42: 80%\n  bucket 41: 90%\n  bucket 42: 90%\n  bucket 41: 100%\n  bucket 42: 100%\n  Sorting block of length 88 for bucket 41\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 44:\n  Entering block accumulator loop for bucket 43:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 43: 10%\n  bucket 44: 30%\n  bucket 43: 20%\n  bucket 44: 40%\n  bucket 43: 30%\n  bucket 44: 50%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 44: 60%\n  bucket 43: 60%\n  bucket 44: 70%\n  bucket 43: 70%\n  bucket 44: 80%\n  bucket 43: 80%\n  bucket 44: 90%\n  bucket 43: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\nGetting block 46 of 60\n  bucket 45: 20%\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 30%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 46: 10%\n  bucket 45: 90%\n  bucket 45: 100%\n  bucket 46: 20%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\nGetting block 48 of 60\n  Calculating Z arrays for bucket 47\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 48: 10%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 48: 20%\n  bucket 47: 50%\n  bucket 48: 30%\n  bucket 47: 60%\n  bucket 48: 40%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 48: 50%\n  bucket 47: 90%\n  bucket 48: 60%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  bucket 49: 50%\n  Calculating Z arrays for bucket 50\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 90%\n  bucket 49: 100%\n  bucket 50: 10%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  Sorting block time: 00:00:00\n  bucket 50: 70%\nReturning block of 75 for bucket 49\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 52\nReturning block of 92 for bucket 51\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  bucket 54: 50%\n  Calculating Z arrays for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  bucket 54: 60%\n  bucket 54: 70%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 80%\n  bucket 55: 10%\n  bucket 54: 90%\n  bucket 55: 20%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\nGetting block 57 of 60\n  Calculating Z arrays for bucket 56\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 56:\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 10%\n  bucket 57: 10%\n  bucket 56: 20%\n  bucket 57: 20%\n  bucket 56: 30%\n  bucket 57: 30%\n  bucket 56: 40%\n  bucket 57: 40%\n  bucket 56: 50%\n  bucket 57: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 57: 60%\n  bucket 56: 80%\n  bucket 57: 70%\n  bucket 56: 90%\n  bucket 57: 80%\n  bucket 56: 100%\n  bucket 57: 90%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\nGetting block 60 of 60\n  bucket 59: 40%\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  bucket 59: 50%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 60%\n  bucket 60: 10%\n  bucket 59: 70%\n  bucket 60: 20%\n  bucket 59: 80%\n  bucket 60: 30%\n  bucket 59: 90%\n  bucket 60: 40%\n  bucket 59: 100%\n  bucket 60: 50%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 3\nGetting block 4 of 60\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\nGetting block 6 of 60\n  bucket 1: 10%\n  Reserving size (126) for bucket 4\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 6\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  bucket 1: 30%\n  Calculating Z arrays for bucket 4\n  bucket 2: 10%\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 6:\nGetting block 7 of 60\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 20%\n  bucket 2: 30%\n  bucket 1: 50%\n  Reserving size (126) for bucket 7\n  bucket 3: 20%\n  bucket 6: 30%\n  Calculating Z arrays for bucket 7\n  bucket 2: 40%\n  bucket 5: 10%\n  bucket 6: 40%\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 4:\n  bucket 5: 20%\n  Calculating Z arrays for bucket 8\n  bucket 2: 50%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 50%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 3: 30%\n  bucket 6: 60%\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 4: 10%\n  bucket 1: 70%\n  bucket 6: 70%\n  bucket 5: 40%\n  bucket 7: 10%\n  bucket 2: 70%\n  bucket 3: 40%\n  bucket 6: 80%\n  bucket 5: 50%\n  bucket 8: 10%\n  bucket 4: 20%\n  bucket 2: 80%\n  bucket 6: 90%\n  bucket 1: 80%\n  bucket 5: 60%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 2: 90%\n  bucket 3: 50%\n  bucket 5: 70%\n  bucket 6: 100%\n  bucket 4: 30%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 5: 80%\n  bucket 2: 100%\n  bucket 3: 60%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 4: 40%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 7: 40%\n  bucket 8: 40%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 1: 90%\n  bucket 5: 100%\n  bucket 8: 50%\n  bucket 4: 60%\n  bucket 3: 80%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 1: 100%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 8: 60%\n  bucket 7: 60%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 8: 70%\n  bucket 3: 100%\n  bucket 7: 70%\n  bucket 4: 90%\n  bucket 8: 80%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 4: 100%\n  bucket 8: 90%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Entering block accumulator loop for bucket 10:\n  Calculating Z arrays for bucket 11\n  bucket 10: 10%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 11: 10%\n  bucket 10: 40%\n  bucket 11: 20%\n  bucket 10: 50%\n  bucket 11: 30%\n  bucket 10: 60%\n  bucket 11: 40%\n  bucket 10: 70%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 11: 50%\n  bucket 10: 80%\n  bucket 11: 60%\n  bucket 10: 90%\n  bucket 11: 70%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 20%\n  bucket 12: 30%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 40%\n  bucket 13: 10%\n  bucket 12: 50%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 12: 60%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 12: 70%\n  bucket 13: 60%\n  bucket 12: 80%\n  bucket 13: 70%\n  bucket 12: 90%\n  bucket 13: 80%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Entering block accumulator loop for bucket 14:\n  Calculating Z arrays for bucket 15\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 40%\n  bucket 15: 10%\n  bucket 14: 50%\n  bucket 15: 20%\n  bucket 14: 60%\n  bucket 15: 30%\n  bucket 14: 70%\n  bucket 15: 40%\n  bucket 14: 80%\n  bucket 15: 50%\n  bucket 14: 90%\n  bucket 15: 60%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 16:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 16: 10%\n  bucket 17: 30%\n  bucket 16: 20%\n  bucket 17: 40%\n  bucket 16: 30%\n  bucket 17: 50%\n  bucket 16: 40%\n  bucket 17: 60%\n  bucket 16: 50%\n  bucket 17: 70%\n  bucket 16: 60%\n  bucket 17: 80%\n  bucket 16: 70%\n  bucket 17: 90%\n  bucket 16: 80%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  bucket 18: 10%\n  Calculating Z arrays for bucket 19\n  bucket 18: 20%\n  bucket 18: 30%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 40%\n  bucket 19: 10%\n  bucket 18: 50%\n  bucket 19: 20%\n  bucket 18: 60%\n  bucket 19: 30%\n  bucket 18: 70%\n  bucket 19: 40%\n  bucket 18: 80%\n  bucket 19: 50%\n  bucket 18: 90%\n  bucket 19: 60%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\nGetting block 21 of 60\n  bucket 20: 70%\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  Entering block accumulator loop for bucket 21:\n  (Using difference cover)\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Entering block accumulator loop for bucket 22:\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 22: 70%\n  bucket 23: 90%\n  bucket 22: 80%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  bucket 22: 90%\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 24: 50%\n  bucket 25: 60%\n  bucket 24: 60%\n  bucket 25: 70%\n  bucket 24: 70%\n  bucket 25: 80%\n  bucket 24: 80%\n  bucket 25: 90%\n  bucket 24: 90%\n  bucket 25: 100%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 26: 40%\n  bucket 27: 30%\n  bucket 26: 50%\n  bucket 27: 40%\n  bucket 26: 60%\n  bucket 27: 50%\n  bucket 26: 70%\n  bucket 27: 60%\n  bucket 26: 80%\n  bucket 27: 70%\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\nGetting block 29 of 60\n  Calculating Z arrays for bucket 28\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 29: 40%\n  bucket 28: 80%\n  bucket 29: 50%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  bucket 30: 70%\n  Calculating Z arrays for bucket 31\n  bucket 30: 80%\n  bucket 30: 90%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 32:\n  bucket 33: 10%\n  bucket 32: 10%\n  bucket 33: 20%\n  bucket 32: 20%\n  bucket 33: 30%\n  bucket 32: 30%\n  bucket 33: 40%\n  bucket 32: 40%\n  bucket 33: 50%\n  bucket 32: 50%\n  bucket 33: 60%\nGetting block 34 of 60\n  bucket 32: 60%\n  Reserving size (126) for bucket 34\n  bucket 33: 70%\n  Calculating Z arrays for bucket 34\n  bucket 32: 70%\n  bucket 33: 80%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 90%\n  bucket 32: 80%\n  bucket 33: 100%\n  bucket 34: 10%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 32: 90%\n  bucket 34: 20%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  bucket 34: 30%\n  (Using difference cover)\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 10%\n  bucket 36: 10%\n  bucket 35: 20%\n  bucket 36: 20%\n  bucket 35: 30%\n  bucket 36: 30%\n  bucket 35: 40%\n  bucket 36: 40%\n  bucket 35: 50%\n  bucket 36: 50%\n  bucket 35: 60%\n  bucket 36: 60%\n  bucket 35: 70%\n  bucket 36: 70%\n  bucket 35: 80%\n  bucket 36: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  bucket 37: 90%\n  Calculating Z arrays for bucket 38\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  Sorting block time: 00:00:00\n  bucket 38: 80%\nReturning block of 60 for bucket 37\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 39:\n  bucket 40: 10%\n  bucket 39: 10%\n  bucket 40: 20%\n  bucket 39: 20%\n  bucket 40: 30%\n  bucket 39: 30%\n  bucket 40: 40%\n  bucket 39: 40%\n  bucket 40: 50%\n  bucket 39: 50%\n  bucket 40: 60%\n  bucket 39: 60%\n  bucket 40: 70%\n  bucket 39: 70%\n  bucket 40: 80%\n  bucket 39: 80%\n  bucket 40: 90%\n  bucket 39: 90%\n  bucket 40: 100%\n  bucket 39: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\nGetting block 42 of 60\n  Calculating Z arrays for bucket 41\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  bucket 42: 10%\n  bucket 41: 20%\n  bucket 42: 20%\n  bucket 41: 30%\n  bucket 42: 30%\n  bucket 41: 40%\n  bucket 42: 40%\n  bucket 41: 50%\n  bucket 42: 50%\n  bucket 41: 60%\n  bucket 42: 60%\n  bucket 41: 70%\n  bucket 42: 70%\n  bucket 41: 80%\n  bucket 42: 80%\n  bucket 41: 90%\n  bucket 42: 90%\n  bucket 41: 100%\n  bucket 42: 100%\n  Sorting block of length 88 for bucket 41\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 44:\n  Entering block accumulator loop for bucket 43:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 43: 10%\n  bucket 44: 30%\n  bucket 43: 20%\n  bucket 44: 40%\n  bucket 43: 30%\n  bucket 44: 50%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 44: 60%\n  bucket 43: 60%\n  bucket 44: 70%\n  bucket 43: 70%\n  bucket 44: 80%\n  bucket 43: 80%\n  bucket 44: 90%\n  bucket 43: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\nGetting block 46 of 60\n  bucket 45: 20%\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 30%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 46: 10%\n  bucket 45: 90%\n  bucket 45: 100%\n  bucket 46: 20%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\nGetting block 48 of 60\n  Calculating Z arrays for bucket 47\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 48: 10%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 48: 20%\n  bucket 47: 50%\n  bucket 48: 30%\n  bucket 47: 60%\n  bucket 48: 40%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 48: 50%\n  bucket 47: 90%\n  bucket 48: 60%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  bucket 49: 50%\n  Calculating Z arrays for bucket 50\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 90%\n  bucket 49: 100%\n  bucket 50: 10%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  Sorting block time: 00:00:00\n  bucket 50: 70%\nReturning block of 75 for bucket 49\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 52\nReturning block of 92 for bucket 51\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  bucket 54: 50%\n  Calculating Z arrays for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  bucket 54: 60%\n  bucket 54: 70%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 80%\n  bucket 55: 10%\n  bucket 54: 90%\n  bucket 55: 20%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\nGetting block 57 of 60\n  Calculating Z arrays for bucket 56\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 56:\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 10%\n  bucket 57: 10%\n  bucket 56: 20%\n  bucket 57: 20%\n  bucket 56: 30%\n  bucket 57: 30%\n  bucket 56: 40%\n  bucket 57: 40%\n  bucket 56: 50%\n  bucket 57: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 57: 60%\n  bucket 56: 80%\n  bucket 57: 70%\n  bucket 56: 90%\n  bucket 57: 80%\n  bucket 56: 100%\n  bucket 57: 90%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\nGetting block 60 of 60\n  bucket 59: 40%\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  bucket 59: 50%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 60%\n  bucket 60: 10%\n  bucket 59: 70%\n  bucket 60: 20%\n  bucket 59: 80%\n  bucket 60: 30%\n  bucket 59: 90%\n  bucket 60: 40%\n  bucket 59: 100%\n  bucket 60: 50%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 13:22:44", "plugin": "core", "name": "end_epoch", "raw_value": "1713273764.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:22:44", "plugin": "core", "name": "start_epoch", "raw_value": "1713273764.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-2", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 2, "time_seconds": 56.7815523147583, "inputs": {"reference_genome|source": "indexed", "library|input_1": {"src": "hda", "id": "46c0fa6f42f309f6"}, "library|input_2": {"src": "hda", "id": "da04c6e1d19ccea2"}, "library|type": "paired"}, "job": {"model_class": "Job", "id": "14f4838d2c72024e", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:17:02.253174", "create_time": "2024-04-16T13:16:22.444058", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "92339b0b40a5ec99", "external_id": "gxy-z5hvl", "command_line": "set -o pipefail;         ln -f -s '/galaxy/server/database/objects/a/8/b/dataset_a8bffe93-8935-41d6-9d41-ba1cb3a29560.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/1/b/4/dataset_1b463819-5586-485a-a21b-1473ba982c91.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x '/cvmfs/data.galaxyproject.org/managed/hisat2_index/apiMel4/apiMel4'    -1 'input_f.fastq' -2 'input_r.fastq'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/9/5/0/dataset_95034bb2-60bc-4c2d-8a42-629aa0fabeeb.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"phiX\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/phiX.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 176, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 177, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 0, \"index\": \"apiMel4\", \"source\": \"indexed\"}"}, "inputs": {"library|input_1": {"id": "46c0fa6f42f309f6", "src": "hda", "uuid": "a8bffe93-8935-41d6-9d41-ba1cb3a29560"}, "library|input_2": {"id": "da04c6e1d19ccea2", "src": "hda", "uuid": "1b463819-5586-485a-a21b-1473ba982c91"}}, "outputs": {"output_alignments": {"id": "a239065138a335ca", "src": "hda", "uuid": "95034bb2-60bc-4c2d-8a42-629aa0fabeeb"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "29 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "29.0000000"}, {"title": "Job End Time", "value": "2024-04-16 13:16:53", "plugin": "core", "name": "end_epoch", "raw_value": "1713273413.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:16:24", "plugin": "core", "name": "start_epoch", "raw_value": "1713273384.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_k9t0i2z0.sam v. /tmp/history_bam_converted_to_sam_awtrnv5g.sam )\n--- local_file\n+++ history_data\n@@ -1,23 +1,5343 @@\n @HD\tVN:1.0\tSO:coordinate\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n-@SQ\tSN:phiX174\tLN:5386\n-phiX174_1141_1609_1:0:0_1:0:0_4\t147\tphiX174\t1540\t60\t70M\t=\t1141\t-469\tTTCTAGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tZS:i:-5\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:4C65\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1141_1609_1:0:0_1:0:0_4\t99\tphiX174\t1141\t60\t70M\t=\t1540\t469\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:24G45\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1363_1914_3:0:0_0:0:0_6\t133\tphiX174\t1845\t0\t*\t=\t1845\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_1363_1914_3:0:0_0:0:0_6\t89\tphiX174\t1845\t60\t70M\t=\t1845\t0\tGCACTATGTTTACTCTTGCGCTTGTTCGTTTTCCGCCTACTGCGACTAAAGAGATTCAGTACCTTAACGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYT:Z:UP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t147\tphiX174\t1896\t60\t70M\t=\t1542\t-424\tAGATTCAGTACCTTAACGCTAAAGGTGCTTTGACTTATACCGATATTGCTGGCGACCCTGTTTTGTATGG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t99\tphiX174\t1542\t60\t70M\t=\t1896\t424\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t147\tphiX174\t639\t60\t70M\t=\t185\t-524\tTATTATGTTCATCCCGTCAACATTCAAACGGCCTGTCGCATCATGGAAGGCGCTGAATTTACGGAAAACA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:37T32\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t163\tphiX174\t1980\t60\t70M\t=\t2432\t522\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:12T57\tYS:i:-9\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t83\tphiX174\t2432\t60\t70M\t=\t1980\t-522\tTTTTTTCTGATAAGCTGGTTCTCAATTCTGTTAATCCAGCTTCTTCGGCACCTGTTTTACACACACCTAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-9\tXN:i:0\tXM:i:3\tXO:i:0\tXG:i:0\tNM:i:3\tMD:Z:24C8C27G8\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t147\tphiX174\t2508\t60\t70M\t=\t2128\t-450\tATCGTCAACGTTATATTTTGATAGTTTGAAGGTTAATGCTGGTATTGGTGGTTTTCTTAATTCCATTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-12\tXN:i:0\tXM:i:4\tXO:i:0\tXG:i:0\tNM:i:4\tMD:Z:29C14A13C3G7\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t99\tphiX174\t2128\t60\t70M\t=\t2508\t450\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-12\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t147\tphiX174\t2670\t60\t70M\t=\t2259\t-481\tTCGCTTTGAGTCTTCGTCGGTTCCGACTACCCTCCCGACTGCCTATGATGTTTATCCTTTGAATGGTCGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:15T54\tYS:i:-2\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t99\tphiX174\t2259\t60\t68M2S\t=\t2670\t481\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-2\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:68\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t163\tphiX174\t2950\t60\t70M\t=\t3308\t428\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-6\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t83\tphiX174\t3308\t60\t70M\t=\t2950\t-428\tTGAGATTAATGCTTGGGAGCGTGCTGGTGCTGATGCTTCCTATGCTGGTATGGTTGACGCCGGATTTGAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-6\tZS:i:-8\tXN:i:0\tXM:i:2\tXO:i:0\tXG:i:0\tNM:i:2\tMD:Z:4C36C28\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t147\tphiX174\t3663\t60\t70M\t=\t3199\t-534\tAATGACCAAATCAATGAAATGACTCGCAAGGTTAGTGCTGAGGTTGACTTAGTTCATCAGCAAACGCAGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:14A55\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t99\tphiX174\t3199\t60\t70M\t=\t3663\t534\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n********\n*SNIP *\n********\n+@SQ\tSN:Group6\tLN:18472937\n+@SQ\tSN:Group7\tLN:13219345\n+@SQ\tSN:Group8\tLN:13546544\n+@SQ\tSN:Group9\tLN:11120453\n+@SQ\tSN:chrM\tLN:16343\n+phiX174_1141_1609_1:0:0_1:0:0_4\t141\t*\t0\t0\t*\t*\t0\t0\tCAAATTAGCATAAGCAGCTTGCAGACCCATAATGTCAATAGATGTGGTAGAAGTCGTCATTTGGCTAGAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1141_1609_1:0:0_1:0:0_4\t77\t*\t0\t0\t*\t*\t0\t0\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t141\t*\t0\t0\t*\t*\t0\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t77\t*\t0\t0\t*\t*\t0\t0\tGCGTTAAGGTACTGAATCTCTTTAGTCGCAGTAGGCGGAAAACGAACAAGCGCAAGAGTAAACATAGTGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t141\t*\t0\t0\t*\t*\t0\t0\tCCATACAAAACAGGGTCGCCAGCAATATCGGTATAAGTCAAAGCACCTTTAGCGTTAAGGTACTGAATCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t141\t*\t0\t0\t*\t*\t0\t0\tTGTTTTCCGTAAATTCAGCGCCTTCCATGATGCGACAGGCCGTTTGAATGTTGACGGGATGAACATAATA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t77\t*\t0\t0\t*\t*\t0\t0\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t141\t*\t0\t0\t*\t*\t0\t0\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGGTGTGTGTAAAACAGGTGCCGAAGAAGCTGGATTAACAGAATTGAGAACCAGCTTATCAGAAAAAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t141\t*\t0\t0\t*\t*\t0\t0\tCTGAATGGAATTAAGAAAACCACCAATACCAGCATTAACCTTCAAACTATCAAAATATAACGTTGACGAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t77\t*\t0\t0\t*\t*\t0\t0\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t141\t*\t0\t0\t*\t*\t0\t0\tGCGACCATTCAAAGGATAAACATCATAGGCAGTCGGGAGGGTAGTCGGAACCGACGAAGACTCAAAGCGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t141\t*\t0\t0\t*\t*\t0\t0\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t77\t*\t0\t0\t*\t*\t0\t0\tCTCAAATCCGGCGTCAACCATACCAGCATAGGAAGCATCAGCACCAGCACGCTCCCAAGCATTAATCTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t141\t*\t0\t0\t*\t*\t0\t0\tTCTGCGTTTGCTGATGAACTAAGTCAACCTCAGCACTAACCTTGCGAGTCATTTCATTGATTTGGTCATT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t77\t*\t0\t0\t*\t*\t0\t0\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t141\t*\t0\t0\t*\t*\t0\t0\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t77\t*\t0\t0\t*\t*\t0\t0\tACCATAAACGCAAGCCTCAACGCAGCGACGAGCACGAGAGCGGTCAGTAGCAATCCAAACTTTGTTACTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n"], "status": "failure"}}, {"id": "hisat2/2.2.1+galaxy1-3", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 3, "time_seconds": 30.147074460983276, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "88290ca40760852e"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "ee09c6b3a3696df4"}, "library|input_2": {"src": "hda", "id": "ad2fcd7808e03e5f"}, "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "ad38ad7059c02086", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:17:31.990730", "create_time": "2024-04-16T13:17:21.391106", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "92339b0b40a5ec99", "external_id": "gxy-gkrpk", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/3/c/d/dataset_3cda9507-c777-40ee-95ed-c68763f59633.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/8/3/b/dataset_83b2bf33-1c03-4939-b480-e515426cb83e.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/e/f/3/dataset_ef38a056-f0e7-4dca-a5b4-df1f626195ef.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'         --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/4/d/4/dataset_4d435446-48ff-4f4f-a85e-dc976b98e3d3.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 180, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 181, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 179, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "88290ca40760852e", "src": "hda", "uuid": "3cda9507-c777-40ee-95ed-c68763f59633"}, "library|input_1": {"id": "ee09c6b3a3696df4", "src": "hda", "uuid": "83b2bf33-1c03-4939-b480-e515426cb83e"}, "library|input_2": {"id": "ad2fcd7808e03e5f", "src": "hda", "uuid": "ef38a056-f0e7-4dca-a5b4-df1f626195ef"}}, "outputs": {"output_alignments": {"id": "671afb8180a7bd6d", "src": "hda", "uuid": "4d435446-48ff-4f4f-a85e-dc976b98e3d3"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 3\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 6\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 2: 10%\n  Calculating Z arrays for bucket 6\n  bucket 1: 10%\n  Calculating Z arrays for bucket 5\n  bucket 2: 20%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 20%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 30%\n  bucket 2: 40%\nGetting block 7 of 60\n  bucket 2: 50%\n  bucket 6: 10%\n  bucket 1: 40%\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 5: 20%\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 3\nGetting block 8 of 60\n  bucket 6: 20%\n  bucket 5: 30%\n  Calculating Z arrays for bucket 7\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 1: 50%\n  Reserving size (126) for bucket 8\n  bucket 4: 10%\n  bucket 5: 50%\n  Calculating Z arrays for bucket 8\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 1: 60%\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 3:\n  bucket 7: 10%\n  bucket 2: 70%\n  bucket 6: 60%\n  Entering block accumulator loop for bucket 8:\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 2: 80%\n  bucket 3: 10%\n  bucket 8: 10%\n  bucket 6: 70%\n  bucket 2: 90%\n  bucket 1: 80%\n  bucket 4: 60%\n  bucket 8: 20%\n  bucket 3: 20%\n  bucket 5: 80%\n  bucket 4: 70%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 2: 100%\n  bucket 1: 90%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 6: 80%\n  bucket 1: 100%\n  bucket 8: 40%\n  bucket 5: 90%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 4: 80%\n  bucket 8: 50%\n  bucket 5: 100%\n  bucket 4: 90%\n  bucket 6: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 60%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 7: 40%\n  bucket 3: 30%\n  bucket 7: 50%\n  bucket 8: 70%\n  bucket 4: 100%\n  bucket 3: 40%\n  bucket 8: 80%\n  Sorting block of length 68 for bucket 4\n  bucket 7: 60%\n  bucket 8: 90%\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 3: 50%\n  bucket 8: 100%\n  bucket 7: 80%\n  bucket 3: 60%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 3: 70%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  bucket 11: 30%\n  Calculating Z arrays for bucket 12\n  bucket 11: 40%\n  bucket 11: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 12: 10%\n  bucket 11: 80%\n  bucket 12: 20%\n  bucket 11: 90%\n  bucket 12: 30%\n  bucket 11: 100%\nGetting block 13 of 60\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 40%\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 90%\n  bucket 13: 10%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 14 of 60\n  Entering block accumulator loop for bucket 15:\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  Entering block accumulator loop for bucket 14:\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 14: 10%\n  bucket 15: 70%\n  bucket 14: 20%\n  bucket 15: 80%\n  bucket 14: 30%\n  bucket 15: 90%\n  bucket 14: 40%\n  bucket 15: 100%\n  bucket 14: 50%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 16: 20%\n  bucket 17: 20%\n  bucket 16: 30%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 16: 40%\n  bucket 17: 50%\n  bucket 16: 50%\n  bucket 17: 60%\n  bucket 16: 60%\n  bucket 17: 70%\n  bucket 16: 70%\n  bucket 17: 80%\n  bucket 16: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 50%\n  bucket 18: 60%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 70%\n  bucket 19: 10%\n  bucket 18: 80%\n  bucket 19: 20%\n  bucket 18: 90%\n  bucket 19: 30%\n  bucket 18: 100%\n  bucket 19: 40%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  bucket 20: 40%\n  Calculating Z arrays for bucket 21\n  bucket 20: 50%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 60%\n  bucket 21: 10%\n  bucket 20: 70%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 21: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  bucket 21: 100%\n  (Using difference cover)\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 23\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 22:\n  bucket 23: 10%\n  bucket 22: 10%\n  bucket 23: 20%\n  bucket 22: 20%\n  bucket 23: 30%\n  bucket 22: 30%\n  bucket 23: 40%\n  bucket 22: 40%\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 22: 70%\n  bucket 23: 90%\n  bucket 22: 80%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  bucket 24: 40%\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 50%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 24: 60%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 24: 70%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 24: 80%\n  bucket 26: 40%\n  bucket 24: 90%\n  bucket 26: 50%\n  bucket 25: 40%\n  bucket 24: 100%\n  bucket 26: 60%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 50%\n  bucket 26: 70%\n  bucket 25: 60%\n  bucket 26: 80%\n  bucket 25: 70%\n  bucket 26: 90%\n  bucket 25: 80%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Entering block accumulator loop for bucket 28:\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 10%\n  bucket 28: 20%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 29: 10%\n  bucket 28: 50%\n  bucket 29: 20%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 29: 30%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 29: 40%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\nReturning block of 125 for bucket 30\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 34:\n  bucket 35: 10%\n  bucket 34: 10%\n  bucket 35: 20%\n  bucket 34: 20%\n  bucket 35: 30%\n  bucket 34: 30%\n  bucket 35: 40%\n  bucket 34: 40%\n  bucket 35: 50%\n  bucket 34: 50%\n  bucket 35: 60%\n  bucket 34: 60%\n  bucket 35: 70%\n  bucket 34: 70%\n  bucket 35: 80%\n  bucket 34: 80%\n  bucket 35: 90%\n  bucket 34: 90%\n  bucket 34: 100%\n  bucket 35: 100%\n  Sorting block of length 122 for bucket 34\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\nGetting block 40 of 60\n  Calculating Z arrays for bucket 39\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 39:\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 39: 10%\n  bucket 40: 20%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 40: 30%\n  bucket 39: 70%\n  bucket 40: 40%\n  bucket 39: 80%\n  bucket 40: 50%\n  bucket 39: 90%\n  bucket 40: 60%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  bucket 42: 40%\n  Calculating Z arrays for bucket 43\n  bucket 42: 50%\n  bucket 42: 60%\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 70%\n  bucket 43: 10%\n  bucket 42: 80%\n  bucket 43: 20%\n  bucket 42: 90%\n  bucket 43: 30%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Entering block accumulator loop for bucket 44:\n  Calculating Z arrays for bucket 45\n  bucket 44: 10%\n  bucket 44: 20%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 30%\n  bucket 45: 10%\n  bucket 44: 40%\n  bucket 45: 20%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  bucket 45: 30%\n  Calculating Z arrays for bucket 46\n  bucket 44: 50%\n  bucket 45: 40%\n  bucket 44: 60%\n  bucket 45: 50%\n  bucket 44: 70%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 60%\n  bucket 44: 80%\n  bucket 46: 10%\n  bucket 44: 90%\n  bucket 45: 70%\n  bucket 44: 100%\n  bucket 46: 20%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 80%\n  bucket 46: 30%\n  bucket 45: 90%\n  bucket 46: 40%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  bucket 48: 10%\n  bucket 47: 20%\n  bucket 48: 20%\n  bucket 47: 30%\n  bucket 48: 30%\n  bucket 47: 40%\n  bucket 48: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 48: 50%\n  bucket 47: 70%\n  bucket 48: 60%\n  bucket 47: 80%\n  bucket 48: 70%\n  bucket 47: 90%\n  bucket 48: 80%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 20%\n  bucket 49: 30%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 40%\n  bucket 50: 10%\n  bucket 49: 50%\n  bucket 50: 20%\n  bucket 49: 60%\n  bucket 50: 30%\n  bucket 49: 70%\n  bucket 50: 40%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 50: 50%\n  bucket 49: 100%\n  bucket 50: 60%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 51: 50%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 60%\n  bucket 52: 10%\n  bucket 51: 70%\n  bucket 52: 20%\n  bucket 51: 80%\n  bucket 52: 30%\n  bucket 51: 90%\n  bucket 52: 40%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  bucket 52: 50%\n  (Using difference cover)\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 53\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  bucket 54: 10%\n  bucket 53: 10%\n  Calculating Z arrays for bucket 55\n  bucket 54: 20%\n  bucket 53: 20%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 30%\nGetting block 56 of 60\n  bucket 55: 10%\n  bucket 53: 30%\n  Reserving size (126) for bucket 56\n  bucket 54: 40%\n  Calculating Z arrays for bucket 56\n  bucket 55: 20%\n  bucket 54: 50%\n  bucket 55: 30%\n  bucket 54: 60%\n  bucket 55: 40%\n  bucket 54: 70%\n  bucket 55: 50%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 60%\n  bucket 54: 80%\n  bucket 53: 40%\n  bucket 56: 10%\n  bucket 55: 70%\n  bucket 54: 90%\n  bucket 53: 50%\n  bucket 56: 20%\n  bucket 55: 80%\n  bucket 54: 100%\n  bucket 53: 60%\n  bucket 56: 30%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 90%\n  bucket 56: 40%\n  bucket 53: 70%\n  bucket 55: 100%\n  bucket 56: 50%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 53: 80%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 53: 90%\n  bucket 56: 80%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 58:\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 57: 20%\n  bucket 58: 30%\n  bucket 57: 30%\n  bucket 58: 40%\n  bucket 57: 40%\n  bucket 58: 50%\n  bucket 57: 50%\n  bucket 58: 60%\n  bucket 57: 60%\n  bucket 58: 70%\n  bucket 57: 70%\n  bucket 58: 80%\n  bucket 57: 80%\n  bucket 58: 90%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Entering block accumulator loop for bucket 59:\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    71 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    71 pairs aligned 0 times concordantly or discordantly; of these:\n      142 mates make up the pairs; of these:\n        74 (52.11%) aligned 0 times\n        68 (47.89%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n92.60% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    71 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    71 pairs aligned 0 times concordantly or discordantly; of these:\n      142 mates make up the pairs; of these:\n        74 (52.11%) aligned 0 times\n        68 (47.89%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n92.60% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 3\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 6\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 2: 10%\n  Calculating Z arrays for bucket 6\n  bucket 1: 10%\n  Calculating Z arrays for bucket 5\n  bucket 2: 20%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 20%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 30%\n  bucket 2: 40%\nGetting block 7 of 60\n  bucket 2: 50%\n  bucket 6: 10%\n  bucket 1: 40%\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 5: 20%\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 3\nGetting block 8 of 60\n  bucket 6: 20%\n  bucket 5: 30%\n  Calculating Z arrays for bucket 7\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 1: 50%\n  Reserving size (126) for bucket 8\n  bucket 4: 10%\n  bucket 5: 50%\n  Calculating Z arrays for bucket 8\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 1: 60%\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 3:\n  bucket 7: 10%\n  bucket 2: 70%\n  bucket 6: 60%\n  Entering block accumulator loop for bucket 8:\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 2: 80%\n  bucket 3: 10%\n  bucket 8: 10%\n  bucket 6: 70%\n  bucket 2: 90%\n  bucket 1: 80%\n  bucket 4: 60%\n  bucket 8: 20%\n  bucket 3: 20%\n  bucket 5: 80%\n  bucket 4: 70%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 2: 100%\n  bucket 1: 90%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 6: 80%\n  bucket 1: 100%\n  bucket 8: 40%\n  bucket 5: 90%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 4: 80%\n  bucket 8: 50%\n  bucket 5: 100%\n  bucket 4: 90%\n  bucket 6: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 60%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 7: 40%\n  bucket 3: 30%\n  bucket 7: 50%\n  bucket 8: 70%\n  bucket 4: 100%\n  bucket 3: 40%\n  bucket 8: 80%\n  Sorting block of length 68 for bucket 4\n  bucket 7: 60%\n  bucket 8: 90%\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 3: 50%\n  bucket 8: 100%\n  bucket 7: 80%\n  bucket 3: 60%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 3: 70%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  bucket 11: 30%\n  Calculating Z arrays for bucket 12\n  bucket 11: 40%\n  bucket 11: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 12: 10%\n  bucket 11: 80%\n  bucket 12: 20%\n  bucket 11: 90%\n  bucket 12: 30%\n  bucket 11: 100%\nGetting block 13 of 60\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 40%\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 90%\n  bucket 13: 10%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 14 of 60\n  Entering block accumulator loop for bucket 15:\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  Entering block accumulator loop for bucket 14:\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 14: 10%\n  bucket 15: 70%\n  bucket 14: 20%\n  bucket 15: 80%\n  bucket 14: 30%\n  bucket 15: 90%\n  bucket 14: 40%\n  bucket 15: 100%\n  bucket 14: 50%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 16: 20%\n  bucket 17: 20%\n  bucket 16: 30%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 16: 40%\n  bucket 17: 50%\n  bucket 16: 50%\n  bucket 17: 60%\n  bucket 16: 60%\n  bucket 17: 70%\n  bucket 16: 70%\n  bucket 17: 80%\n  bucket 16: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 50%\n  bucket 18: 60%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 70%\n  bucket 19: 10%\n  bucket 18: 80%\n  bucket 19: 20%\n  bucket 18: 90%\n  bucket 19: 30%\n  bucket 18: 100%\n  bucket 19: 40%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  bucket 20: 40%\n  Calculating Z arrays for bucket 21\n  bucket 20: 50%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 60%\n  bucket 21: 10%\n  bucket 20: 70%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 21: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  bucket 21: 100%\n  (Using difference cover)\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 23\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 22:\n  bucket 23: 10%\n  bucket 22: 10%\n  bucket 23: 20%\n  bucket 22: 20%\n  bucket 23: 30%\n  bucket 22: 30%\n  bucket 23: 40%\n  bucket 22: 40%\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 22: 70%\n  bucket 23: 90%\n  bucket 22: 80%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  bucket 24: 40%\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 50%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 24: 60%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 24: 70%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 24: 80%\n  bucket 26: 40%\n  bucket 24: 90%\n  bucket 26: 50%\n  bucket 25: 40%\n  bucket 24: 100%\n  bucket 26: 60%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 50%\n  bucket 26: 70%\n  bucket 25: 60%\n  bucket 26: 80%\n  bucket 25: 70%\n  bucket 26: 90%\n  bucket 25: 80%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Entering block accumulator loop for bucket 28:\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 10%\n  bucket 28: 20%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 29: 10%\n  bucket 28: 50%\n  bucket 29: 20%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 29: 30%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 29: 40%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\nReturning block of 125 for bucket 30\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 34:\n  bucket 35: 10%\n  bucket 34: 10%\n  bucket 35: 20%\n  bucket 34: 20%\n  bucket 35: 30%\n  bucket 34: 30%\n  bucket 35: 40%\n  bucket 34: 40%\n  bucket 35: 50%\n  bucket 34: 50%\n  bucket 35: 60%\n  bucket 34: 60%\n  bucket 35: 70%\n  bucket 34: 70%\n  bucket 35: 80%\n  bucket 34: 80%\n  bucket 35: 90%\n  bucket 34: 90%\n  bucket 34: 100%\n  bucket 35: 100%\n  Sorting block of length 122 for bucket 34\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\nGetting block 40 of 60\n  Calculating Z arrays for bucket 39\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 39:\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 39: 10%\n  bucket 40: 20%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 40: 30%\n  bucket 39: 70%\n  bucket 40: 40%\n  bucket 39: 80%\n  bucket 40: 50%\n  bucket 39: 90%\n  bucket 40: 60%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  bucket 42: 40%\n  Calculating Z arrays for bucket 43\n  bucket 42: 50%\n  bucket 42: 60%\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 70%\n  bucket 43: 10%\n  bucket 42: 80%\n  bucket 43: 20%\n  bucket 42: 90%\n  bucket 43: 30%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Entering block accumulator loop for bucket 44:\n  Calculating Z arrays for bucket 45\n  bucket 44: 10%\n  bucket 44: 20%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 30%\n  bucket 45: 10%\n  bucket 44: 40%\n  bucket 45: 20%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  bucket 45: 30%\n  Calculating Z arrays for bucket 46\n  bucket 44: 50%\n  bucket 45: 40%\n  bucket 44: 60%\n  bucket 45: 50%\n  bucket 44: 70%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 60%\n  bucket 44: 80%\n  bucket 46: 10%\n  bucket 44: 90%\n  bucket 45: 70%\n  bucket 44: 100%\n  bucket 46: 20%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 80%\n  bucket 46: 30%\n  bucket 45: 90%\n  bucket 46: 40%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  bucket 48: 10%\n  bucket 47: 20%\n  bucket 48: 20%\n  bucket 47: 30%\n  bucket 48: 30%\n  bucket 47: 40%\n  bucket 48: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 48: 50%\n  bucket 47: 70%\n  bucket 48: 60%\n  bucket 47: 80%\n  bucket 48: 70%\n  bucket 47: 90%\n  bucket 48: 80%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 20%\n  bucket 49: 30%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 40%\n  bucket 50: 10%\n  bucket 49: 50%\n  bucket 50: 20%\n  bucket 49: 60%\n  bucket 50: 30%\n  bucket 49: 70%\n  bucket 50: 40%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 50: 50%\n  bucket 49: 100%\n  bucket 50: 60%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 51: 50%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 60%\n  bucket 52: 10%\n  bucket 51: 70%\n  bucket 52: 20%\n  bucket 51: 80%\n  bucket 52: 30%\n  bucket 51: 90%\n  bucket 52: 40%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  bucket 52: 50%\n  (Using difference cover)\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 53\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  bucket 54: 10%\n  bucket 53: 10%\n  Calculating Z arrays for bucket 55\n  bucket 54: 20%\n  bucket 53: 20%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 30%\nGetting block 56 of 60\n  bucket 55: 10%\n  bucket 53: 30%\n  Reserving size (126) for bucket 56\n  bucket 54: 40%\n  Calculating Z arrays for bucket 56\n  bucket 55: 20%\n  bucket 54: 50%\n  bucket 55: 30%\n  bucket 54: 60%\n  bucket 55: 40%\n  bucket 54: 70%\n  bucket 55: 50%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 60%\n  bucket 54: 80%\n  bucket 53: 40%\n  bucket 56: 10%\n  bucket 55: 70%\n  bucket 54: 90%\n  bucket 53: 50%\n  bucket 56: 20%\n  bucket 55: 80%\n  bucket 54: 100%\n  bucket 53: 60%\n  bucket 56: 30%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 90%\n  bucket 56: 40%\n  bucket 53: 70%\n  bucket 55: 100%\n  bucket 56: 50%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 53: 80%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 53: 90%\n  bucket 56: 80%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 58:\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 57: 20%\n  bucket 58: 30%\n  bucket 57: 30%\n  bucket 58: 40%\n  bucket 57: 40%\n  bucket 58: 50%\n  bucket 57: 50%\n  bucket 58: 60%\n  bucket 57: 60%\n  bucket 58: 70%\n  bucket 57: 70%\n  bucket 58: 80%\n  bucket 57: 80%\n  bucket 58: 90%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Entering block accumulator loop for bucket 59:\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-04-16 13:17:23", "plugin": "core", "name": "end_epoch", "raw_value": "1713273443.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:17:22", "plugin": "core", "name": "start_epoch", "raw_value": "1713273442.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-4", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 4, "time_seconds": 29.457024574279785, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "d1855db2eb8373f1"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "6cbc281cc604fc9d"}, "library|input_2": {"src": "hda", "id": "adab12916d0a5adc"}, "library|paired_options|no_mixed": true, "library|paired_options|no_discordant": true, "library|paired_options|paired_options_selector": "advanced", "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "d5c7c8c80b686988", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:18:01.764362", "create_time": "2024-04-16T13:17:51.592711", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "92339b0b40a5ec99", "external_id": "gxy-5v6hs", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/6/1/1/dataset_61186a1f-698d-42d0-8c0d-1f4f23f988e3.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/9/a/e/dataset_9ae04164-5bbd-4a51-87ce-cfdd415d4f19.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/3/2/4/dataset_3248dd35-56ff-4924-92f5-caf2cb49e30b.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'  --fr --no-mixed --no-discordant        --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/8/b/3/dataset_8b392170-acd4-4553-85d8-e4fda8688ee8.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 184, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 185, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": true, \"no_mixed\": true, \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 183, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "d1855db2eb8373f1", "src": "hda", "uuid": "61186a1f-698d-42d0-8c0d-1f4f23f988e3"}, "library|input_1": {"id": "6cbc281cc604fc9d", "src": "hda", "uuid": "9ae04164-5bbd-4a51-87ce-cfdd415d4f19"}, "library|input_2": {"id": "adab12916d0a5adc", "src": "hda", "uuid": "3248dd35-56ff-4924-92f5-caf2cb49e30b"}}, "outputs": {"output_alignments": {"id": "1d93083b7aeed49b", "src": "hda", "uuid": "8b392170-acd4-4553-85d8-e4fda8688ee8"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\nGetting block 3 of 60\n  bucket 1: 30%\n  bucket 2: 20%\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 3\n  bucket 1: 40%\n  bucket 2: 30%\nGetting block 4 of 60\n  bucket 2: 40%\n  Reserving size (126) for bucket 4\n  bucket 1: 50%\n  Calculating Z arrays for bucket 4\nGetting block 5 of 60\n  bucket 2: 50%\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 60%\n  bucket 2: 60%\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 70%\n  bucket 2: 70%\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  bucket 1: 80%\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 6\nGetting block 7 of 60\n  bucket 1: 90%\n  Reserving size (126) for bucket 7\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 7\n  bucket 1: 100%\n  bucket 4: 10%\n  Sorting block of length 42 for bucket 1\n  bucket 2: 80%\n  bucket 4: 20%\n  bucket 6: 10%\n  bucket 3: 20%\n  (Using difference cover)\nGetting block 8 of 60\n  bucket 5: 10%\n  bucket 6: 20%\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 20%\n  Calculating Z arrays for bucket 8\n  bucket 4: 30%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 7: 10%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 6: 40%\n  bucket 7: 20%\n  bucket 3: 40%\n  bucket 5: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 4: 50%\n  bucket 7: 30%\n  bucket 5: 50%\n  bucket 3: 50%\n  bucket 2: 90%\n  bucket 6: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 7: 40%\n  bucket 5: 60%\n  bucket 3: 70%\n  Sorting block time: 00:00:00\n  bucket 6: 60%\n  bucket 4: 70%\n  bucket 7: 50%\n  bucket 3: 80%\nReturning block of 43 for bucket 1\n  bucket 2: 100%\n  bucket 3: 90%\n  bucket 7: 60%\n  bucket 6: 70%\n  bucket 3: 100%\n  Sorting block of length 84 for bucket 2\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 8: 10%\n  bucket 6: 80%\n  bucket 7: 70%\n  bucket 4: 80%\n  bucket 8: 20%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 4: 90%\n  bucket 8: 30%\n  bucket 7: 80%\n  bucket 4: 100%\n  bucket 6: 100%\n  bucket 5: 90%\n  Sorting block of length 90 for bucket 6\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  bucket 5: 100%\n  bucket 7: 90%\n  bucket 8: 40%\n  Sorting block of length 63 for bucket 5\n  bucket 7: 100%\n  (Using difference cover)\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  Calculating Z arrays for bucket 11\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 11: 10%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 11: 20%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 11: 30%\n  bucket 10: 70%\n  bucket 11: 40%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 11: 50%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 11: 60%\n  bucket 9: 100%\n  bucket 11: 70%\n  Sorting block of length 124 for bucket 9\n  bucket 10: 100%\n  (Using difference cover)\n  bucket 11: 80%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 30%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 13: 10%\n  bucket 12: 60%\n  bucket 13: 20%\n  bucket 12: 70%\n  bucket 13: 30%\n  bucket 12: 80%\n  bucket 13: 40%\n  bucket 12: 90%\n  bucket 13: 50%\n  bucket 12: 100%\n  bucket 13: 60%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 15: 30%\n  bucket 14: 60%\n  bucket 15: 40%\n  bucket 14: 70%\n  bucket 15: 50%\n  bucket 14: 80%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  bucket 15: 80%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 10%\n  bucket 17: 10%\n  bucket 16: 20%\n  bucket 17: 20%\n  bucket 16: 30%\n  bucket 17: 30%\n  bucket 16: 40%\n  bucket 17: 40%\n  bucket 16: 50%\n  bucket 17: 50%\n  bucket 16: 60%\n  bucket 17: 60%\n  bucket 16: 70%\n  bucket 17: 70%\n  bucket 16: 80%\n  bucket 17: 80%\n  bucket 16: 90%\n  bucket 17: 90%\n  bucket 16: 100%\n  bucket 17: 100%\n  Sorting block of length 100 for bucket 16\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 10%\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 30%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 19: 40%\n  bucket 18: 70%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 19: 60%\n  bucket 18: 90%\n  bucket 19: 70%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  bucket 19: 80%\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\nGetting block 23 of 60\n  bucket 22: 20%\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 30%\n  bucket 22: 40%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 50%\n  bucket 23: 10%\n  bucket 22: 60%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  bucket 23: 20%\n  bucket 22: 70%\n  Calculating Z arrays for bucket 24\n  bucket 22: 80%\n  bucket 23: 30%\n  bucket 22: 90%\n  bucket 23: 40%\n  Entering block accumulator loop for bucket 24:\n  bucket 22: 100%\n  bucket 23: 50%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 24: 10%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 24: 30%\n  bucket 23: 80%\n  bucket 24: 40%\n  bucket 23: 90%\n  bucket 24: 50%\n  bucket 23: 100%\n  bucket 24: 60%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  Sorting block time: 00:00:00\n  bucket 24: 100%\nReturning block of 81 for bucket 22\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  Sorting block time: 00:00:00\n  bucket 26: 60%\nReturning block of 67 for bucket 25\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  Sorting block time: 00:00:00\n  bucket 28: 10%\nReturning block of 120 for bucket 27\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 40%\n  bucket 30: 50%\n  bucket 29: 50%\n  bucket 30: 60%\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 29: 70%\n  bucket 30: 80%\n  bucket 29: 80%\n  bucket 30: 90%\n  bucket 29: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 20%\n  bucket 32: 10%\n  bucket 31: 30%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 31: 40%\n  bucket 32: 40%\n  bucket 31: 50%\n  bucket 32: 50%\n  bucket 31: 60%\n  bucket 32: 60%\n  bucket 31: 70%\n  bucket 32: 70%\n  bucket 31: 80%\n  bucket 32: 80%\n  bucket 31: 90%\n  bucket 32: 90%\n  bucket 31: 100%\n  bucket 32: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  bucket 33: 30%\n  Calculating Z arrays for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Entering block accumulator loop for bucket 34:\n  Calculating Z arrays for bucket 35\n  bucket 33: 40%\n  bucket 34: 10%\n  bucket 33: 50%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 20%\n  bucket 33: 60%\n  bucket 35: 10%\n  bucket 33: 70%\n  bucket 34: 30%\n  bucket 35: 20%\n  bucket 33: 80%\n  bucket 34: 40%\n  bucket 35: 30%\n  bucket 34: 50%\n  bucket 33: 90%\n  bucket 35: 40%\n  bucket 33: 100%\n  bucket 34: 60%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 35: 50%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 35: 60%\n  bucket 34: 90%\n  bucket 35: 70%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  bucket 35: 80%\n  bucket 35: 90%\n  (Using difference cover)\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Entering block accumulator loop for bucket 36:\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 10%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 37: 10%\n  bucket 36: 40%\n  bucket 37: 20%\n  bucket 36: 50%\n  bucket 37: 30%\n  bucket 36: 60%\n  bucket 37: 40%\n  bucket 36: 70%\n  bucket 37: 50%\n  bucket 36: 80%\n  bucket 37: 60%\n  bucket 36: 90%\n  bucket 37: 70%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  bucket 38: 10%\n  bucket 38: 20%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 39: 10%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 39: 20%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 39: 30%\n  bucket 38: 90%\n  bucket 39: 40%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  bucket 41: 20%\n  Calculating Z arrays for bucket 42\n  bucket 41: 30%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 42: 10%\n  bucket 41: 60%\n  bucket 42: 20%\n  bucket 41: 70%\n  bucket 42: 30%\n  bucket 41: 80%\n  bucket 42: 40%\n  bucket 41: 90%\n  bucket 42: 50%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  bucket 42: 60%\n  (Using difference cover)\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Entering block accumulator loop for bucket 43:\n  Calculating Z arrays for bucket 44\n  bucket 43: 10%\n  bucket 43: 20%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 30%\n  bucket 44: 10%\n  bucket 43: 40%\n  bucket 44: 20%\n  bucket 43: 50%\n  bucket 44: 30%\n  bucket 43: 60%\n  bucket 44: 40%\n  bucket 43: 70%\n  bucket 44: 50%\n  bucket 43: 80%\n  bucket 44: 60%\n  bucket 43: 90%\n  bucket 44: 70%\n  bucket 43: 100%\n  bucket 44: 80%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 20%\n  bucket 46: 30%\nGetting block 48 of 60\n  Entering block accumulator loop for bucket 47:\n  Reserving size (126) for bucket 48\n  bucket 46: 40%\n  Calculating Z arrays for bucket 48\n  bucket 47: 10%\n  bucket 46: 50%\n  bucket 47: 20%\n  Entering block accumulator loop for bucket 48:\n  bucket 46: 60%\n  bucket 47: 30%\n  bucket 48: 10%\n  bucket 46: 70%\n  bucket 47: 40%\n  bucket 48: 20%\n  bucket 47: 50%\n  bucket 46: 80%\n  bucket 48: 30%\n  bucket 47: 60%\n  bucket 46: 90%\n  bucket 47: 70%\n  bucket 48: 40%\n  bucket 46: 100%\n  bucket 47: 80%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 48: 50%\n  bucket 47: 90%\n  bucket 47: 100%\n  bucket 48: 60%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Entering block accumulator loop for bucket 49:\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 40%\n  bucket 50: 10%\n  bucket 49: 50%\n  bucket 50: 20%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 50: 30%\n  bucket 49: 80%\n  bucket 50: 40%\n  bucket 49: 90%\n  bucket 50: 50%\n  bucket 49: 100%\n  bucket 50: 60%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  bucket 51: 20%\n  Calculating Z arrays for bucket 52\n  bucket 51: 30%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 40%\n  bucket 52: 10%\n  bucket 51: 50%\n  bucket 52: 20%\n  bucket 51: 60%\n  bucket 52: 30%\n  bucket 51: 70%\n  bucket 52: 40%\n  bucket 51: 80%\n  bucket 52: 50%\n  bucket 51: 90%\n  bucket 52: 60%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\nReturning block of 79 for bucket 53\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\nGetting block 57 of 60\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Reserving size (126) for bucket 57\n  Entering block accumulator loop for bucket 58:\n  Calculating Z arrays for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  bucket 58: 10%\n  Entering block accumulator loop for bucket 57:\n  bucket 58: 20%\n  bucket 57: 10%\n  bucket 58: 30%\n  bucket 57: 20%\n  bucket 58: 40%\n  bucket 57: 30%\n  bucket 58: 50%\n  bucket 57: 40%\n  bucket 58: 60%\n  bucket 57: 50%\n  bucket 58: 70%\n  bucket 57: 60%\n  bucket 58: 80%\n  bucket 57: 70%\n  bucket 58: 90%\n  bucket 57: 80%\n  bucket 58: 100%\n  bucket 57: 90%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 2: 10%\nGetting block 3 of 60\n  bucket 1: 30%\n  bucket 2: 20%\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 3\n  bucket 1: 40%\n  bucket 2: 30%\nGetting block 4 of 60\n  bucket 2: 40%\n  Reserving size (126) for bucket 4\n  bucket 1: 50%\n  Calculating Z arrays for bucket 4\nGetting block 5 of 60\n  bucket 2: 50%\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 60%\n  bucket 2: 60%\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 70%\n  bucket 2: 70%\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  bucket 1: 80%\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 6\nGetting block 7 of 60\n  bucket 1: 90%\n  Reserving size (126) for bucket 7\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 7\n  bucket 1: 100%\n  bucket 4: 10%\n  Sorting block of length 42 for bucket 1\n  bucket 2: 80%\n  bucket 4: 20%\n  bucket 6: 10%\n  bucket 3: 20%\n  (Using difference cover)\nGetting block 8 of 60\n  bucket 5: 10%\n  bucket 6: 20%\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 20%\n  Calculating Z arrays for bucket 8\n  bucket 4: 30%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 7: 10%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 6: 40%\n  bucket 7: 20%\n  bucket 3: 40%\n  bucket 5: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 4: 50%\n  bucket 7: 30%\n  bucket 5: 50%\n  bucket 3: 50%\n  bucket 2: 90%\n  bucket 6: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 7: 40%\n  bucket 5: 60%\n  bucket 3: 70%\n  Sorting block time: 00:00:00\n  bucket 6: 60%\n  bucket 4: 70%\n  bucket 7: 50%\n  bucket 3: 80%\nReturning block of 43 for bucket 1\n  bucket 2: 100%\n  bucket 3: 90%\n  bucket 7: 60%\n  bucket 6: 70%\n  bucket 3: 100%\n  Sorting block of length 84 for bucket 2\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 8: 10%\n  bucket 6: 80%\n  bucket 7: 70%\n  bucket 4: 80%\n  bucket 8: 20%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 4: 90%\n  bucket 8: 30%\n  bucket 7: 80%\n  bucket 4: 100%\n  bucket 6: 100%\n  bucket 5: 90%\n  Sorting block of length 90 for bucket 6\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  bucket 5: 100%\n  bucket 7: 90%\n  bucket 8: 40%\n  Sorting block of length 63 for bucket 5\n  bucket 7: 100%\n  (Using difference cover)\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  Calculating Z arrays for bucket 11\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 11: 10%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 11: 20%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 11: 30%\n  bucket 10: 70%\n  bucket 11: 40%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 11: 50%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 11: 60%\n  bucket 9: 100%\n  bucket 11: 70%\n  Sorting block of length 124 for bucket 9\n  bucket 10: 100%\n  (Using difference cover)\n  bucket 11: 80%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 30%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 13: 10%\n  bucket 12: 60%\n  bucket 13: 20%\n  bucket 12: 70%\n  bucket 13: 30%\n  bucket 12: 80%\n  bucket 13: 40%\n  bucket 12: 90%\n  bucket 13: 50%\n  bucket 12: 100%\n  bucket 13: 60%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 15: 30%\n  bucket 14: 60%\n  bucket 15: 40%\n  bucket 14: 70%\n  bucket 15: 50%\n  bucket 14: 80%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  bucket 15: 80%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 10%\n  bucket 17: 10%\n  bucket 16: 20%\n  bucket 17: 20%\n  bucket 16: 30%\n  bucket 17: 30%\n  bucket 16: 40%\n  bucket 17: 40%\n  bucket 16: 50%\n  bucket 17: 50%\n  bucket 16: 60%\n  bucket 17: 60%\n  bucket 16: 70%\n  bucket 17: 70%\n  bucket 16: 80%\n  bucket 17: 80%\n  bucket 16: 90%\n  bucket 17: 90%\n  bucket 16: 100%\n  bucket 17: 100%\n  Sorting block of length 100 for bucket 16\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 10%\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 30%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 19: 40%\n  bucket 18: 70%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 19: 60%\n  bucket 18: 90%\n  bucket 19: 70%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  bucket 19: 80%\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\nGetting block 23 of 60\n  bucket 22: 20%\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 30%\n  bucket 22: 40%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 50%\n  bucket 23: 10%\n  bucket 22: 60%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  bucket 23: 20%\n  bucket 22: 70%\n  Calculating Z arrays for bucket 24\n  bucket 22: 80%\n  bucket 23: 30%\n  bucket 22: 90%\n  bucket 23: 40%\n  Entering block accumulator loop for bucket 24:\n  bucket 22: 100%\n  bucket 23: 50%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 24: 10%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 24: 30%\n  bucket 23: 80%\n  bucket 24: 40%\n  bucket 23: 90%\n  bucket 24: 50%\n  bucket 23: 100%\n  bucket 24: 60%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  Sorting block time: 00:00:00\n  bucket 24: 100%\nReturning block of 81 for bucket 22\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  Sorting block time: 00:00:00\n  bucket 26: 60%\nReturning block of 67 for bucket 25\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  Sorting block time: 00:00:00\n  bucket 28: 10%\nReturning block of 120 for bucket 27\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 40%\n  bucket 30: 50%\n  bucket 29: 50%\n  bucket 30: 60%\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 29: 70%\n  bucket 30: 80%\n  bucket 29: 80%\n  bucket 30: 90%\n  bucket 29: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 20%\n  bucket 32: 10%\n  bucket 31: 30%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 31: 40%\n  bucket 32: 40%\n  bucket 31: 50%\n  bucket 32: 50%\n  bucket 31: 60%\n  bucket 32: 60%\n  bucket 31: 70%\n  bucket 32: 70%\n  bucket 31: 80%\n  bucket 32: 80%\n  bucket 31: 90%\n  bucket 32: 90%\n  bucket 31: 100%\n  bucket 32: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  bucket 33: 30%\n  Calculating Z arrays for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Entering block accumulator loop for bucket 34:\n  Calculating Z arrays for bucket 35\n  bucket 33: 40%\n  bucket 34: 10%\n  bucket 33: 50%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 20%\n  bucket 33: 60%\n  bucket 35: 10%\n  bucket 33: 70%\n  bucket 34: 30%\n  bucket 35: 20%\n  bucket 33: 80%\n  bucket 34: 40%\n  bucket 35: 30%\n  bucket 34: 50%\n  bucket 33: 90%\n  bucket 35: 40%\n  bucket 33: 100%\n  bucket 34: 60%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 35: 50%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 35: 60%\n  bucket 34: 90%\n  bucket 35: 70%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  bucket 35: 80%\n  bucket 35: 90%\n  (Using difference cover)\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Entering block accumulator loop for bucket 36:\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 10%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 37: 10%\n  bucket 36: 40%\n  bucket 37: 20%\n  bucket 36: 50%\n  bucket 37: 30%\n  bucket 36: 60%\n  bucket 37: 40%\n  bucket 36: 70%\n  bucket 37: 50%\n  bucket 36: 80%\n  bucket 37: 60%\n  bucket 36: 90%\n  bucket 37: 70%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  bucket 38: 10%\n  bucket 38: 20%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 39: 10%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 39: 20%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 39: 30%\n  bucket 38: 90%\n  bucket 39: 40%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  bucket 41: 20%\n  Calculating Z arrays for bucket 42\n  bucket 41: 30%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 42: 10%\n  bucket 41: 60%\n  bucket 42: 20%\n  bucket 41: 70%\n  bucket 42: 30%\n  bucket 41: 80%\n  bucket 42: 40%\n  bucket 41: 90%\n  bucket 42: 50%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  bucket 42: 60%\n  (Using difference cover)\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Entering block accumulator loop for bucket 43:\n  Calculating Z arrays for bucket 44\n  bucket 43: 10%\n  bucket 43: 20%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 30%\n  bucket 44: 10%\n  bucket 43: 40%\n  bucket 44: 20%\n  bucket 43: 50%\n  bucket 44: 30%\n  bucket 43: 60%\n  bucket 44: 40%\n  bucket 43: 70%\n  bucket 44: 50%\n  bucket 43: 80%\n  bucket 44: 60%\n  bucket 43: 90%\n  bucket 44: 70%\n  bucket 43: 100%\n  bucket 44: 80%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 20%\n  bucket 46: 30%\nGetting block 48 of 60\n  Entering block accumulator loop for bucket 47:\n  Reserving size (126) for bucket 48\n  bucket 46: 40%\n  Calculating Z arrays for bucket 48\n  bucket 47: 10%\n  bucket 46: 50%\n  bucket 47: 20%\n  Entering block accumulator loop for bucket 48:\n  bucket 46: 60%\n  bucket 47: 30%\n  bucket 48: 10%\n  bucket 46: 70%\n  bucket 47: 40%\n  bucket 48: 20%\n  bucket 47: 50%\n  bucket 46: 80%\n  bucket 48: 30%\n  bucket 47: 60%\n  bucket 46: 90%\n  bucket 47: 70%\n  bucket 48: 40%\n  bucket 46: 100%\n  bucket 47: 80%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 48: 50%\n  bucket 47: 90%\n  bucket 47: 100%\n  bucket 48: 60%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Entering block accumulator loop for bucket 49:\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 40%\n  bucket 50: 10%\n  bucket 49: 50%\n  bucket 50: 20%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 50: 30%\n  bucket 49: 80%\n  bucket 50: 40%\n  bucket 49: 90%\n  bucket 50: 50%\n  bucket 49: 100%\n  bucket 50: 60%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  bucket 51: 20%\n  Calculating Z arrays for bucket 52\n  bucket 51: 30%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 40%\n  bucket 52: 10%\n  bucket 51: 50%\n  bucket 52: 20%\n  bucket 51: 60%\n  bucket 52: 30%\n  bucket 51: 70%\n  bucket 52: 40%\n  bucket 51: 80%\n  bucket 52: 50%\n  bucket 51: 90%\n  bucket 52: 60%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\nReturning block of 79 for bucket 53\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\nGetting block 57 of 60\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Reserving size (126) for bucket 57\n  Entering block accumulator loop for bucket 58:\n  Calculating Z arrays for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  bucket 58: 10%\n  Entering block accumulator loop for bucket 57:\n  bucket 58: 20%\n  bucket 57: 10%\n  bucket 58: 30%\n  bucket 57: 20%\n  bucket 58: 40%\n  bucket 57: 30%\n  bucket 58: 50%\n  bucket 57: 40%\n  bucket 58: 60%\n  bucket 57: 50%\n  bucket 58: 70%\n  bucket 57: 60%\n  bucket 58: 80%\n  bucket 57: 70%\n  bucket 58: 90%\n  bucket 57: 80%\n  bucket 58: 100%\n  bucket 57: 90%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 13:17:53", "plugin": "core", "name": "end_epoch", "raw_value": "1713273473.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:17:53", "plugin": "core", "name": "start_epoch", "raw_value": "1713273473.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-5", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 5, "time_seconds": 26.232476234436035, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "555c2ed3ac723e68"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "a6b9ad3056847473"}, "library|type": "single", "adv|output_options|unaligned_file": true, "adv|output_options|output_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "8e1ea45578d6c4de", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:18:28.233120", "create_time": "2024-04-16T13:18:18.822526", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "92339b0b40a5ec99", "external_id": "gxy-dmmqk", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/6/3/5/dataset_6352f2b1-b9d5-42cc-ace3-235ef08e0e27.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/f/2/6/dataset_f26d7a70-b554-440e-aebf-a717105e0b14.dat' input_f.fasta &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f    -U 'input_f.fasta'  --un '/galaxy/server/database/objects/b/3/e/dataset_b3e623ec-6040-4368-a18b-81ffd880fbee.dat'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/1/f/9/dataset_1f9cc772-6dcf-44e2-9023-2730b016e076.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 1, \"aligned_file\": false, \"output_options_selector\": \"advanced\", \"unaligned_file\": true}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 188, \"src\": \"hda\"}]}, \"rna_strandness\": \"\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 187, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "555c2ed3ac723e68", "src": "hda", "uuid": "6352f2b1-b9d5-42cc-ace3-235ef08e0e27"}, "library|input_1": {"id": "a6b9ad3056847473", "src": "hda", "uuid": "f26d7a70-b554-440e-aebf-a717105e0b14"}}, "outputs": {"output_alignments": {"id": "8266d0716a389ec9", "src": "hda", "uuid": "1f9cc772-6dcf-44e2-9023-2730b016e076"}, "output_unaligned_reads_l": {"id": "4e783aa346fbf383", "src": "hda", "uuid": "b3e623ec-6040-4368-a18b-81ffd880fbee"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  bucket 1: 10%\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\n  bucket 1: 20%\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 2: 10%\nGetting block 5 of 60\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\nGetting block 6 of 60\n  Reserving size (126) for bucket 5\n  bucket 1: 40%\n  Reserving size (126) for bucket 6\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 6\nGetting block 7 of 60\n  Calculating Z arrays for bucket 8\n  Reserving size (126) for bucket 7\n  bucket 2: 20%\n  Calculating Z arrays for bucket 5\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 50%\n  bucket 3: 10%\n  bucket 5: 10%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 8:\n  bucket 2: 40%\n  bucket 5: 20%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 1: 60%\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 8: 10%\n  bucket 1: 70%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 30%\n  bucket 8: 20%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 7: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 2: 60%\n  bucket 8: 30%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 2: 70%\n  bucket 7: 20%\n  bucket 1: 90%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 2: 80%\n  bucket 5: 70%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 5: 90%\n  bucket 2: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  bucket 8: 60%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 1: 100%\n  bucket 7: 50%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Sorting block of length 42 for bucket 1\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 7: 60%\n  (Using difference cover)\n  bucket 3: 40%\n  bucket 7: 70%\n  bucket 6: 70%\n  bucket 3: 50%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 4: 50%\n  bucket 6: 80%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 8: 90%\n  bucket 7: 100%\n  bucket 4: 80%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 8: 100%\n  bucket 6: 90%\n  Sorting block of length 94 for bucket 8\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 6: 100%\n  (Using difference cover)\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  bucket 10: 80%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 11:\n  bucket 12: 20%\n  bucket 11: 10%\n  bucket 12: 30%\n  bucket 11: 20%\n  bucket 12: 40%\n  bucket 11: 30%\n  bucket 12: 50%\n  bucket 11: 40%\n  bucket 12: 60%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 12: 90%\n  bucket 11: 90%\n  bucket 12: 100%\n  bucket 11: 100%\n  Sorting block of length 82 for bucket 12\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 13\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 100%\n  bucket 13: 50%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 13: 60%\n  bucket 13: 70%\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 80%\n  bucket 15: 10%\n  bucket 13: 90%\n  bucket 15: 20%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  bucket 16: 80%\n  Calculating Z arrays for bucket 17\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  Sorting block time: 00:00:00\n  bucket 17: 50%\nReturning block of 101 for bucket 16\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 50%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  bucket 19: 60%\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 70%\n  bucket 20: 10%\n  Entering block accumulator loop for bucket 21:\n  bucket 19: 80%\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 19: 90%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 19: 100%\n  bucket 20: 40%\n  Sorting block of length 107 for bucket 19\n  bucket 21: 30%\n  (Using difference cover)\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 20: 90%\n  bucket 21: 80%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  bucket 21: 90%\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 80%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 90%\n  bucket 23: 10%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 20%\n  bucket 25: 10%\n  bucket 24: 30%\n  bucket 25: 20%\n  bucket 24: 40%\n  bucket 25: 30%\n  bucket 24: 50%\n  bucket 25: 40%\n  bucket 24: 60%\n  bucket 25: 50%\n  bucket 24: 70%\n  bucket 25: 60%\n  bucket 24: 80%\n  bucket 25: 70%\n  bucket 24: 90%\n  bucket 25: 80%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 26\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  bucket 27: 80%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 30%\n  bucket 30: 40%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 50%\n  bucket 31: 10%\n  bucket 30: 60%\n  bucket 31: 20%\n  bucket 30: 70%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 30: 80%\n  bucket 31: 50%\n  bucket 30: 90%\n  bucket 31: 60%\n  bucket 30: 100%\n  bucket 31: 70%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 32:\n  bucket 33: 10%\n  bucket 32: 10%\n  bucket 33: 20%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 33: 30%\n  bucket 32: 40%\n  bucket 33: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 33: 50%\n  bucket 32: 70%\n  bucket 33: 60%\n  bucket 32: 80%\n  bucket 33: 70%\n  bucket 32: 90%\n  bucket 33: 80%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\nGetting block 35 of 60\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Calculating Z arrays for bucket 34\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 10%\n  bucket 36: 10%\n  bucket 35: 10%\n  bucket 34: 20%\n  bucket 36: 20%\n  bucket 35: 20%\n  bucket 34: 30%\n  bucket 36: 30%\n  bucket 35: 30%\n  bucket 36: 40%\n  bucket 34: 40%\n  bucket 35: 40%\n  bucket 36: 50%\n  bucket 34: 50%\n  bucket 35: 50%\n  bucket 36: 60%\n  bucket 34: 60%\n  bucket 35: 60%\n  bucket 36: 70%\n  bucket 34: 70%\n  bucket 35: 70%\n  bucket 36: 80%\n  bucket 34: 80%\n  bucket 35: 80%\n  bucket 36: 90%\n  bucket 35: 90%\n  bucket 34: 90%\n  bucket 36: 100%\n  bucket 35: 100%\n  Sorting block of length 120 for bucket 36\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  (Using difference cover)\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  Sorting block time: 00:00:00\n  bucket 38: 40%\nReturning block of 60 for bucket 37\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  bucket 39: 80%\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  bucket 39: 90%\n  Entering block accumulator loop for bucket 40:\n  Calculating Z arrays for bucket 41\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 10%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 20%\n  bucket 41: 10%\n  bucket 40: 30%\n  bucket 41: 20%\n  bucket 40: 40%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 40: 50%\n  bucket 41: 50%\n  bucket 40: 60%\n  bucket 41: 60%\n  bucket 40: 70%\n  bucket 41: 70%\n  Sorting block time: 00:00:00\n  bucket 40: 80%\nReturning block of 126 for bucket 39\n  bucket 40: 90%\n  bucket 41: 80%\n  bucket 40: 100%\n  bucket 41: 90%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 42: 70%\n  bucket 42: 80%\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 90%\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 46: 10%\n  bucket 45: 20%\n  bucket 46: 20%\n  bucket 45: 30%\n  bucket 46: 30%\n  bucket 45: 40%\n  bucket 46: 40%\n  bucket 45: 50%\n  bucket 46: 50%\n  bucket 45: 60%\n  bucket 46: 60%\n  bucket 45: 70%\n  bucket 46: 70%\nGetting block 47 of 60\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  bucket 46: 80%\n  Calculating Z arrays for bucket 48\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 45: 80%\n  bucket 46: 90%\n  Entering block accumulator loop for bucket 48:\n  bucket 45: 90%\n  bucket 46: 100%\n  Entering block accumulator loop for bucket 47:\n  bucket 48: 10%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 45: 100%\n  bucket 48: 20%\n  bucket 47: 10%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 48: 30%\n  bucket 47: 20%\n  bucket 48: 40%\n  bucket 47: 30%\n  bucket 48: 50%\n  bucket 47: 40%\n  bucket 48: 60%\n  bucket 47: 50%\n  bucket 48: 70%\n  bucket 47: 60%\n  bucket 48: 80%\n  bucket 47: 70%\n  bucket 48: 90%\n  bucket 47: 80%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  bucket 47: 90%\n  (Using difference cover)\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Calculating Z arrays for bucket 53\nGetting block 55 of 60\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 53: 10%\n  bucket 54: 10%\n  Entering block accumulator loop for bucket 55:\n  bucket 53: 20%\n  bucket 55: 10%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 55: 20%\n  bucket 53: 40%\n  bucket 54: 30%\n  bucket 55: 30%\n  bucket 53: 50%\n  bucket 55: 40%\n  bucket 54: 40%\n  bucket 55: 50%\n  bucket 53: 60%\n  bucket 55: 60%\n  bucket 54: 50%\n  bucket 55: 70%\n  bucket 53: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 54: 60%\n  bucket 53: 80%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  bucket 54: 70%\n  bucket 53: 90%\n  (Using difference cover)\n  bucket 54: 80%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 50%\n  bucket 56: 60%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 70%\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 56: 80%\n  bucket 57: 30%\n  bucket 56: 90%\n  bucket 57: 40%\n  bucket 56: 100%\n  bucket 57: 50%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Entering block accumulator loop for bucket 58:\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  bucket 58: 10%\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 59: 10%\n  bucket 58: 40%\n  bucket 59: 20%\n  bucket 58: 50%\n  bucket 59: 30%\n  bucket 58: 60%\n  bucket 59: 40%\n  bucket 58: 70%\n  bucket 59: 50%\n  bucket 58: 80%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 58: 90%\n  bucket 59: 80%\n  bucket 58: 100%\n  bucket 59: 90%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were unpaired; of these:\n    3 (100.00%) aligned 0 times\n    0 (0.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were unpaired; of these:\n    3 (100.00%) aligned 0 times\n    0 (0.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  bucket 1: 10%\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\n  bucket 1: 20%\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 2: 10%\nGetting block 5 of 60\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\nGetting block 6 of 60\n  Reserving size (126) for bucket 5\n  bucket 1: 40%\n  Reserving size (126) for bucket 6\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 6\nGetting block 7 of 60\n  Calculating Z arrays for bucket 8\n  Reserving size (126) for bucket 7\n  bucket 2: 20%\n  Calculating Z arrays for bucket 5\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 50%\n  bucket 3: 10%\n  bucket 5: 10%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 8:\n  bucket 2: 40%\n  bucket 5: 20%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 1: 60%\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 8: 10%\n  bucket 1: 70%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 30%\n  bucket 8: 20%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 7: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 2: 60%\n  bucket 8: 30%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 2: 70%\n  bucket 7: 20%\n  bucket 1: 90%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 2: 80%\n  bucket 5: 70%\n  bucket 7: 30%\n  bucket 8: 40%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 7: 40%\n  bucket 8: 50%\n  bucket 5: 90%\n  bucket 2: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  bucket 8: 60%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 1: 100%\n  bucket 7: 50%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Sorting block of length 42 for bucket 1\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 7: 60%\n  (Using difference cover)\n  bucket 3: 40%\n  bucket 7: 70%\n  bucket 6: 70%\n  bucket 3: 50%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 4: 50%\n  bucket 6: 80%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 8: 90%\n  bucket 7: 100%\n  bucket 4: 80%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 8: 100%\n  bucket 6: 90%\n  Sorting block of length 94 for bucket 8\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 6: 100%\n  (Using difference cover)\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  bucket 10: 80%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 11:\n  bucket 12: 20%\n  bucket 11: 10%\n  bucket 12: 30%\n  bucket 11: 20%\n  bucket 12: 40%\n  bucket 11: 30%\n  bucket 12: 50%\n  bucket 11: 40%\n  bucket 12: 60%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 12: 90%\n  bucket 11: 90%\n  bucket 12: 100%\n  bucket 11: 100%\n  Sorting block of length 82 for bucket 12\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 13\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 100%\n  bucket 13: 50%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 13: 60%\n  bucket 13: 70%\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 80%\n  bucket 15: 10%\n  bucket 13: 90%\n  bucket 15: 20%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  bucket 16: 80%\n  Calculating Z arrays for bucket 17\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  Sorting block time: 00:00:00\n  bucket 17: 50%\nReturning block of 101 for bucket 16\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 50%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  bucket 19: 60%\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 70%\n  bucket 20: 10%\n  Entering block accumulator loop for bucket 21:\n  bucket 19: 80%\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 19: 90%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 19: 100%\n  bucket 20: 40%\n  Sorting block of length 107 for bucket 19\n  bucket 21: 30%\n  (Using difference cover)\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 20: 90%\n  bucket 21: 80%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  bucket 21: 90%\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 80%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 90%\n  bucket 23: 10%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 20%\n  bucket 25: 10%\n  bucket 24: 30%\n  bucket 25: 20%\n  bucket 24: 40%\n  bucket 25: 30%\n  bucket 24: 50%\n  bucket 25: 40%\n  bucket 24: 60%\n  bucket 25: 50%\n  bucket 24: 70%\n  bucket 25: 60%\n  bucket 24: 80%\n  bucket 25: 70%\n  bucket 24: 90%\n  bucket 25: 80%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 26\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  bucket 27: 80%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 30%\n  bucket 30: 40%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 50%\n  bucket 31: 10%\n  bucket 30: 60%\n  bucket 31: 20%\n  bucket 30: 70%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 30: 80%\n  bucket 31: 50%\n  bucket 30: 90%\n  bucket 31: 60%\n  bucket 30: 100%\n  bucket 31: 70%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 32:\n  bucket 33: 10%\n  bucket 32: 10%\n  bucket 33: 20%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 33: 30%\n  bucket 32: 40%\n  bucket 33: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 33: 50%\n  bucket 32: 70%\n  bucket 33: 60%\n  bucket 32: 80%\n  bucket 33: 70%\n  bucket 32: 90%\n  bucket 33: 80%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\nGetting block 35 of 60\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Calculating Z arrays for bucket 34\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 10%\n  bucket 36: 10%\n  bucket 35: 10%\n  bucket 34: 20%\n  bucket 36: 20%\n  bucket 35: 20%\n  bucket 34: 30%\n  bucket 36: 30%\n  bucket 35: 30%\n  bucket 36: 40%\n  bucket 34: 40%\n  bucket 35: 40%\n  bucket 36: 50%\n  bucket 34: 50%\n  bucket 35: 50%\n  bucket 36: 60%\n  bucket 34: 60%\n  bucket 35: 60%\n  bucket 36: 70%\n  bucket 34: 70%\n  bucket 35: 70%\n  bucket 36: 80%\n  bucket 34: 80%\n  bucket 35: 80%\n  bucket 36: 90%\n  bucket 35: 90%\n  bucket 34: 90%\n  bucket 36: 100%\n  bucket 35: 100%\n  Sorting block of length 120 for bucket 36\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  (Using difference cover)\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  Sorting block time: 00:00:00\n  bucket 38: 40%\nReturning block of 60 for bucket 37\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  bucket 39: 80%\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  bucket 39: 90%\n  Entering block accumulator loop for bucket 40:\n  Calculating Z arrays for bucket 41\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 10%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 20%\n  bucket 41: 10%\n  bucket 40: 30%\n  bucket 41: 20%\n  bucket 40: 40%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 40: 50%\n  bucket 41: 50%\n  bucket 40: 60%\n  bucket 41: 60%\n  bucket 40: 70%\n  bucket 41: 70%\n  Sorting block time: 00:00:00\n  bucket 40: 80%\nReturning block of 126 for bucket 39\n  bucket 40: 90%\n  bucket 41: 80%\n  bucket 40: 100%\n  bucket 41: 90%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 42: 70%\n  bucket 42: 80%\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 90%\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 46: 10%\n  bucket 45: 20%\n  bucket 46: 20%\n  bucket 45: 30%\n  bucket 46: 30%\n  bucket 45: 40%\n  bucket 46: 40%\n  bucket 45: 50%\n  bucket 46: 50%\n  bucket 45: 60%\n  bucket 46: 60%\n  bucket 45: 70%\n  bucket 46: 70%\nGetting block 47 of 60\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  bucket 46: 80%\n  Calculating Z arrays for bucket 48\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 45: 80%\n  bucket 46: 90%\n  Entering block accumulator loop for bucket 48:\n  bucket 45: 90%\n  bucket 46: 100%\n  Entering block accumulator loop for bucket 47:\n  bucket 48: 10%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 45: 100%\n  bucket 48: 20%\n  bucket 47: 10%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 48: 30%\n  bucket 47: 20%\n  bucket 48: 40%\n  bucket 47: 30%\n  bucket 48: 50%\n  bucket 47: 40%\n  bucket 48: 60%\n  bucket 47: 50%\n  bucket 48: 70%\n  bucket 47: 60%\n  bucket 48: 80%\n  bucket 47: 70%\n  bucket 48: 90%\n  bucket 47: 80%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  bucket 47: 90%\n  (Using difference cover)\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Calculating Z arrays for bucket 53\nGetting block 55 of 60\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 53: 10%\n  bucket 54: 10%\n  Entering block accumulator loop for bucket 55:\n  bucket 53: 20%\n  bucket 55: 10%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 55: 20%\n  bucket 53: 40%\n  bucket 54: 30%\n  bucket 55: 30%\n  bucket 53: 50%\n  bucket 55: 40%\n  bucket 54: 40%\n  bucket 55: 50%\n  bucket 53: 60%\n  bucket 55: 60%\n  bucket 54: 50%\n  bucket 55: 70%\n  bucket 53: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 54: 60%\n  bucket 53: 80%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  bucket 54: 70%\n  bucket 53: 90%\n  (Using difference cover)\n  bucket 54: 80%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 50%\n  bucket 56: 60%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 70%\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 56: 80%\n  bucket 57: 30%\n  bucket 56: 90%\n  bucket 57: 40%\n  bucket 56: 100%\n  bucket 57: 50%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Entering block accumulator loop for bucket 58:\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  bucket 58: 10%\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 59: 10%\n  bucket 58: 40%\n  bucket 59: 20%\n  bucket 58: 50%\n  bucket 59: 30%\n  bucket 58: 60%\n  bucket 59: 40%\n  bucket 58: 70%\n  bucket 59: 50%\n  bucket 58: 80%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 58: 90%\n  bucket 59: 80%\n  bucket 58: 100%\n  bucket 59: 90%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-04-16 13:18:20", "plugin": "core", "name": "end_epoch", "raw_value": "1713273500.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:18:19", "plugin": "core", "name": "start_epoch", "raw_value": "1713273499.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-6", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 6, "time_seconds": 27.31179642677307, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "309930c31a285755"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "9f28fd28f861268d"}, "library|input_2": {"src": "hda", "id": "9f28fd28f861268d"}, "library|type": "paired", "adv|output_options|unaligned_file": true, "adv|output_options|aligned_file": true, "adv|output_options|output_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "72c154df652f3fa2", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:18:55.304774", "create_time": "2024-04-16T13:18:44.308583", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "92339b0b40a5ec99", "external_id": "gxy-t4twv", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/e/4/e/dataset_e4e1e293-1901-4dc3-9369-d3cf08c1e0b3.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/a/b/1/dataset_ab1b71aa-0253-4c62-b098-4e2673ee9dc6.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/a/b/1/dataset_ab1b71aa-0253-4c62-b098-4e2673ee9dc6.dat' input_r.fasta &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f   -1 'input_f.fasta' -2 'input_r.fasta' --un-conc '/galaxy/server/database/objects/4/a/a/dataset_4aaf8b29-b73d-4331-805c-fc4249fbefae.dat'  --al-conc '/galaxy/server/database/objects/1/7/a/dataset_17a777b2-2519-43aa-80e7-813850759b3e.dat'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/2/2/4/dataset_22438955-512b-4499-be4d-a1a2c558ae75.dat'   && mv '/galaxy/server/database/objects/4/a/a/dataset_4aaf8b29-b73d-4331-805c-fc4249fbefae.1.dat' '/galaxy/server/database/objects/4/a/a/dataset_4aaf8b29-b73d-4331-805c-fc4249fbefae.dat' && mv '/galaxy/server/database/objects/4/a/a/dataset_4aaf8b29-b73d-4331-805c-fc4249fbefae.2.dat' '/galaxy/server/database/objects/2/5/e/dataset_25e3aa18-c1f6-49a3-b511-ebb45ab221e8.dat' && mv '/galaxy/server/database/objects/1/7/a/dataset_17a777b2-2519-43aa-80e7-813850759b3e.1.dat' '/galaxy/server/database/objects/1/7/a/dataset_17a777b2-2519-43aa-80e7-813850759b3e.dat' && mv '/galaxy/server/database/objects/1/7/a/dataset_17a777b2-2519-43aa-80e7-813850759b3e.2.dat' '/galaxy/server/database/objects/0/e/e/dataset_0eeba601-dc75-4c32-9bac-b71bd562f58b.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 1, \"aligned_file\": true, \"output_options_selector\": \"advanced\", \"unaligned_file\": true}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 192, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 192, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 191, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "309930c31a285755", "src": "hda", "uuid": "e4e1e293-1901-4dc3-9369-d3cf08c1e0b3"}, "library|input_1": {"id": "9f28fd28f861268d", "src": "hda", "uuid": "ab1b71aa-0253-4c62-b098-4e2673ee9dc6"}, "library|input_2": {"id": "9f28fd28f861268d", "src": "hda", "uuid": "ab1b71aa-0253-4c62-b098-4e2673ee9dc6"}}, "outputs": {"output_alignments": {"id": "328decea8a9a6337", "src": "hda", "uuid": "22438955-512b-4499-be4d-a1a2c558ae75"}, "output_unaligned_reads_l": {"id": "a41490c2ea7e5aae", "src": "hda", "uuid": "4aaf8b29-b73d-4331-805c-fc4249fbefae"}, "output_aligned_reads_l": {"id": "129f807993ab27bc", "src": "hda", "uuid": "17a777b2-2519-43aa-80e7-813850759b3e"}, "output_unaligned_reads_r": {"id": "7f33b2b2205d648a", "src": "hda", "uuid": "25e3aa18-c1f6-49a3-b511-ebb45ab221e8"}, "output_aligned_reads_r": {"id": "c9742b520172548a", "src": "hda", "uuid": "0eeba601-dc75-4c32-9bac-b71bd562f58b"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Reserving size (126) for bucket 1\nGetting block 3 of 60\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 3\nGetting block 4 of 60\n  Calculating Z arrays for bucket 3\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 1:\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 1: 10%\nGetting block 6 of 60\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 4\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  Reserving size (126) for bucket 6\n  bucket 3: 10%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 5:\n  bucket 4: 10%\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 4: 20%\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 4: 30%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 8: 10%\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 4: 60%\n  bucket 3: 30%\n  bucket 6: 10%\n  bucket 2: 80%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 3: 40%\n  bucket 6: 30%\n  bucket 8: 20%\n  bucket 4: 70%\n  bucket 6: 40%\n  bucket 1: 90%\n  bucket 3: 50%\n  bucket 7: 10%\n  bucket 8: 30%\n  bucket 4: 80%\n  bucket 6: 50%\n  bucket 1: 100%\n  bucket 2: 90%\n  bucket 3: 60%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 5: 30%\n  bucket 4: 90%\n  bucket 8: 40%\n  bucket 3: 70%\n  bucket 6: 60%\n  bucket 7: 20%\n  bucket 4: 100%\n  bucket 3: 80%\n  bucket 8: 50%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 5: 40%\n  bucket 7: 30%\n  bucket 2: 100%\n  bucket 6: 70%\n  bucket 7: 40%\n  bucket 5: 50%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 3: 90%\n  bucket 5: 60%\n  bucket 7: 60%\n  bucket 3: 100%\n  bucket 6: 90%\n  bucket 8: 70%\n  bucket 7: 70%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 8: 80%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 8: 90%\n  bucket 5: 80%\n  bucket 7: 80%\n  bucket 5: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 9: 60%\n  bucket 10: 30%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  bucket 10: 70%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 60\n  Entering block accumulator loop for bucket 11:\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 12: 10%\n  bucket 11: 60%\n  bucket 12: 20%\n  bucket 11: 70%\n  bucket 12: 30%\n  bucket 11: 80%\n  bucket 12: 40%\n  bucket 11: 90%\n  bucket 12: 50%\n  bucket 11: 100%\n  bucket 12: 60%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 70%\n  bucket 12: 80%\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 90%\n  bucket 12: 100%\n  Entering block accumulator loop for bucket 13:\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 10%\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 60\n  bucket 14: 10%\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 20%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 15: 20%\n  bucket 14: 50%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 30%\n  bucket 14: 60%\n  bucket 15: 40%\n  bucket 16: 10%\n  bucket 14: 70%\n  bucket 15: 50%\n  bucket 16: 20%\n  bucket 14: 80%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 16: 40%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 16: 50%\n  bucket 15: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  bucket 16: 70%\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 40%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 50%\n  bucket 18: 10%\n  bucket 17: 60%\n  bucket 18: 20%\n  bucket 17: 70%\n  bucket 18: 30%\n  bucket 17: 80%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Calculating Z arrays for bucket 20\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 40%\n  bucket 21: 50%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 60%\n  bucket 22: 10%\n  bucket 21: 70%\n  bucket 22: 20%\n  bucket 21: 80%\n  bucket 22: 30%\n  bucket 21: 90%\n  bucket 22: 40%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 60\n  bucket 23: 10%\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 30%\n  bucket 24: 10%\n  bucket 23: 40%\n  bucket 24: 20%\n  bucket 23: 50%\n  bucket 24: 30%\n  bucket 23: 60%\n  bucket 24: 40%\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 23: 90%\n  bucket 24: 70%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  Entering block accumulator loop for bucket 25:\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 26: 10%\n  bucket 25: 40%\n  bucket 26: 20%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\nGetting block 29 of 60\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 27: 50%\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 28\n  bucket 27: 60%\n  Entering block accumulator loop for bucket 30:\n  Calculating Z arrays for bucket 29\n  bucket 27: 70%\n  Entering block accumulator loop for bucket 28:\n  bucket 30: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 30: 20%\n  bucket 27: 80%\n  bucket 30: 30%\n  bucket 28: 20%\n  bucket 27: 90%\n  bucket 28: 30%\n  bucket 30: 40%\n  bucket 29: 10%\n  bucket 27: 100%\n  bucket 30: 50%\n  Sorting block of length 119 for bucket 27\n  bucket 29: 20%\n  (Using difference cover)\n  bucket 28: 40%\n  bucket 30: 60%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 30: 70%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 30: 80%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 30: 90%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 30: 100%\n  bucket 28: 90%\n  Sorting block of length 124 for bucket 30\n  bucket 29: 70%\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 31\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 10%\n  bucket 32: 10%\n  bucket 31: 20%\n  bucket 32: 20%\n  bucket 31: 30%\n  bucket 32: 30%\n  bucket 31: 40%\n  bucket 32: 40%\n  bucket 31: 50%\n  bucket 32: 50%\n  bucket 31: 60%\n  bucket 32: 60%\n  bucket 31: 70%\n  bucket 32: 70%\n  bucket 31: 80%\n  bucket 32: 80%\n  bucket 31: 90%\n  bucket 32: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 34: 10%\n  bucket 33: 90%\n  bucket 33: 100%\n  bucket 34: 20%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  bucket 35: 20%\n  Calculating Z arrays for bucket 36\n  bucket 35: 30%\n  bucket 35: 40%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 50%\n  bucket 36: 10%\n  bucket 35: 60%\n  bucket 36: 20%\n  bucket 35: 70%\n  bucket 36: 30%\n  bucket 35: 80%\n  bucket 36: 40%\n  bucket 35: 90%\n  bucket 36: 50%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 20%\n  bucket 38: 10%\n  bucket 37: 30%\n  bucket 38: 20%\n  bucket 37: 40%\n  bucket 38: 30%\n  bucket 37: 50%\n  bucket 38: 40%\n  bucket 37: 60%\n  bucket 38: 50%\n  bucket 37: 70%\n  bucket 38: 60%\n  bucket 37: 80%\n  bucket 38: 70%\n  bucket 37: 90%\n  bucket 38: 80%\n  bucket 37: 100%\n  bucket 38: 90%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 39:\n  bucket 40: 10%\n  bucket 39: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 39: 20%\n  bucket 40: 40%\n  bucket 39: 30%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 39: 40%\n  bucket 40: 70%\n  bucket 39: 50%\n  bucket 40: 80%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 40: 90%\n  bucket 39: 80%\n  bucket 40: 100%\n  bucket 39: 90%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  bucket 41: 20%\n  Calculating Z arrays for bucket 42\n  bucket 41: 30%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 42: 10%\n  bucket 41: 60%\n  bucket 42: 20%\n  bucket 41: 70%\n  bucket 42: 30%\n  bucket 41: 80%\n  bucket 42: 40%\n  bucket 41: 90%\n  bucket 42: 50%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 20%\n  bucket 44: 10%\n  bucket 43: 30%\n  bucket 44: 20%\n  bucket 43: 40%\n  bucket 44: 30%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 44: 40%\n  bucket 43: 70%\n  bucket 44: 50%\n  bucket 43: 80%\n  bucket 44: 60%\n  bucket 43: 90%\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  bucket 43: 100%\n  Calculating Z arrays for bucket 45\n  bucket 44: 70%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 80%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 90%\n  bucket 45: 10%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Reserving size (126) for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 47\n  Calculating Z arrays for bucket 48\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 48: 20%\n  bucket 49: 10%\n  bucket 47: 40%\n  bucket 48: 30%\n  bucket 47: 50%\n  bucket 49: 20%\n  bucket 48: 40%\n  bucket 47: 60%\n  bucket 49: 30%\n  bucket 47: 70%\n  bucket 48: 50%\n  bucket 47: 80%\n  bucket 49: 40%\n  bucket 48: 60%\n  bucket 47: 90%\n  bucket 48: 70%\n  bucket 47: 100%\n  bucket 49: 50%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 80%\n  bucket 49: 60%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 10%\n  bucket 51: 10%\n  bucket 50: 20%\n  bucket 51: 20%\n  bucket 50: 30%\n  bucket 51: 30%\n  bucket 50: 40%\n  bucket 51: 40%\n  bucket 50: 50%\n  bucket 51: 50%\n  bucket 50: 60%\n  bucket 51: 60%\n  bucket 50: 70%\n  bucket 51: 70%\n  bucket 50: 80%\n  bucket 51: 80%\n  bucket 50: 90%\n  bucket 51: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\nGetting block 53 of 60\nGetting block 54 of 60\n  Reserving size (126) for bucket 53\n  Reserving size (126) for bucket 52\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Calculating Z arrays for bucket 52\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 54:\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 53:\n  bucket 54: 10%\n  bucket 52: 10%\n  bucket 53: 10%\n  bucket 54: 20%\n  bucket 52: 20%\n  bucket 53: 20%\n  bucket 54: 30%\n  bucket 52: 30%\n  bucket 53: 30%\n  bucket 52: 40%\n  bucket 54: 40%\n  bucket 52: 50%\n  bucket 53: 40%\n  bucket 54: 50%\n  bucket 52: 60%\n  bucket 53: 50%\n  bucket 54: 60%\n  bucket 52: 70%\n  bucket 54: 70%\n  bucket 53: 60%\n  bucket 52: 80%\n  bucket 54: 80%\n  bucket 53: 70%\n  bucket 52: 90%\n  bucket 54: 90%\n  bucket 53: 80%\n  bucket 52: 100%\n  bucket 54: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 90%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Calculating Z arrays for bucket 56\n  bucket 55: 10%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 20%\n  bucket 56: 10%\n  bucket 55: 30%\n  bucket 56: 20%\n  bucket 55: 40%\n  bucket 56: 30%\n  bucket 55: 50%\n  bucket 56: 40%\n  bucket 55: 60%\n  bucket 56: 50%\n  bucket 55: 70%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 55: 80%\n  bucket 56: 80%\n  bucket 55: 90%\n  bucket 56: 90%\n  bucket 55: 100%\n  bucket 56: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 20%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 30%\n  bucket 58: 10%\n  bucket 57: 40%\n  bucket 58: 20%\n  bucket 57: 50%\n  bucket 58: 30%\n  bucket 57: 60%\n  bucket 58: 40%\n  bucket 57: 70%\n  bucket 58: 50%\n  bucket 57: 80%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 57: 90%\n  bucket 58: 80%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    3 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        6 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    3 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        6 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Reserving size (126) for bucket 1\nGetting block 3 of 60\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 3\nGetting block 4 of 60\n  Calculating Z arrays for bucket 3\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 1:\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 1: 10%\nGetting block 6 of 60\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 4\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  Reserving size (126) for bucket 6\n  bucket 3: 10%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 5:\n  bucket 4: 10%\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 4: 20%\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 4: 30%\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 8: 10%\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 2: 70%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 4: 60%\n  bucket 3: 30%\n  bucket 6: 10%\n  bucket 2: 80%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 3: 40%\n  bucket 6: 30%\n  bucket 8: 20%\n  bucket 4: 70%\n  bucket 6: 40%\n  bucket 1: 90%\n  bucket 3: 50%\n  bucket 7: 10%\n  bucket 8: 30%\n  bucket 4: 80%\n  bucket 6: 50%\n  bucket 1: 100%\n  bucket 2: 90%\n  bucket 3: 60%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 5: 30%\n  bucket 4: 90%\n  bucket 8: 40%\n  bucket 3: 70%\n  bucket 6: 60%\n  bucket 7: 20%\n  bucket 4: 100%\n  bucket 3: 80%\n  bucket 8: 50%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 5: 40%\n  bucket 7: 30%\n  bucket 2: 100%\n  bucket 6: 70%\n  bucket 7: 40%\n  bucket 5: 50%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 3: 90%\n  bucket 5: 60%\n  bucket 7: 60%\n  bucket 3: 100%\n  bucket 6: 90%\n  bucket 8: 70%\n  bucket 7: 70%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 8: 80%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 8: 90%\n  bucket 5: 80%\n  bucket 7: 80%\n  bucket 5: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 9: 60%\n  bucket 10: 30%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  bucket 10: 70%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 60\n  Entering block accumulator loop for bucket 11:\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 12: 10%\n  bucket 11: 60%\n  bucket 12: 20%\n  bucket 11: 70%\n  bucket 12: 30%\n  bucket 11: 80%\n  bucket 12: 40%\n  bucket 11: 90%\n  bucket 12: 50%\n  bucket 11: 100%\n  bucket 12: 60%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 70%\n  bucket 12: 80%\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 90%\n  bucket 12: 100%\n  Entering block accumulator loop for bucket 13:\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 10%\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 60\n  bucket 14: 10%\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 20%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 15: 20%\n  bucket 14: 50%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 30%\n  bucket 14: 60%\n  bucket 15: 40%\n  bucket 16: 10%\n  bucket 14: 70%\n  bucket 15: 50%\n  bucket 16: 20%\n  bucket 14: 80%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 16: 40%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 16: 50%\n  bucket 15: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  bucket 16: 70%\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 40%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 50%\n  bucket 18: 10%\n  bucket 17: 60%\n  bucket 18: 20%\n  bucket 17: 70%\n  bucket 18: 30%\n  bucket 17: 80%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Calculating Z arrays for bucket 20\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 40%\n  bucket 21: 50%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 60%\n  bucket 22: 10%\n  bucket 21: 70%\n  bucket 22: 20%\n  bucket 21: 80%\n  bucket 22: 30%\n  bucket 21: 90%\n  bucket 22: 40%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 60\n  bucket 23: 10%\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 30%\n  bucket 24: 10%\n  bucket 23: 40%\n  bucket 24: 20%\n  bucket 23: 50%\n  bucket 24: 30%\n  bucket 23: 60%\n  bucket 24: 40%\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 23: 90%\n  bucket 24: 70%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  Entering block accumulator loop for bucket 25:\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 26: 10%\n  bucket 25: 40%\n  bucket 26: 20%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\nGetting block 29 of 60\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 27: 50%\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 28\n  bucket 27: 60%\n  Entering block accumulator loop for bucket 30:\n  Calculating Z arrays for bucket 29\n  bucket 27: 70%\n  Entering block accumulator loop for bucket 28:\n  bucket 30: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 30: 20%\n  bucket 27: 80%\n  bucket 30: 30%\n  bucket 28: 20%\n  bucket 27: 90%\n  bucket 28: 30%\n  bucket 30: 40%\n  bucket 29: 10%\n  bucket 27: 100%\n  bucket 30: 50%\n  Sorting block of length 119 for bucket 27\n  bucket 29: 20%\n  (Using difference cover)\n  bucket 28: 40%\n  bucket 30: 60%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 30: 70%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 30: 80%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 30: 90%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 30: 100%\n  bucket 28: 90%\n  Sorting block of length 124 for bucket 30\n  bucket 29: 70%\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 31\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 10%\n  bucket 32: 10%\n  bucket 31: 20%\n  bucket 32: 20%\n  bucket 31: 30%\n  bucket 32: 30%\n  bucket 31: 40%\n  bucket 32: 40%\n  bucket 31: 50%\n  bucket 32: 50%\n  bucket 31: 60%\n  bucket 32: 60%\n  bucket 31: 70%\n  bucket 32: 70%\n  bucket 31: 80%\n  bucket 32: 80%\n  bucket 31: 90%\n  bucket 32: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 34: 10%\n  bucket 33: 90%\n  bucket 33: 100%\n  bucket 34: 20%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  bucket 35: 20%\n  Calculating Z arrays for bucket 36\n  bucket 35: 30%\n  bucket 35: 40%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 50%\n  bucket 36: 10%\n  bucket 35: 60%\n  bucket 36: 20%\n  bucket 35: 70%\n  bucket 36: 30%\n  bucket 35: 80%\n  bucket 36: 40%\n  bucket 35: 90%\n  bucket 36: 50%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 20%\n  bucket 38: 10%\n  bucket 37: 30%\n  bucket 38: 20%\n  bucket 37: 40%\n  bucket 38: 30%\n  bucket 37: 50%\n  bucket 38: 40%\n  bucket 37: 60%\n  bucket 38: 50%\n  bucket 37: 70%\n  bucket 38: 60%\n  bucket 37: 80%\n  bucket 38: 70%\n  bucket 37: 90%\n  bucket 38: 80%\n  bucket 37: 100%\n  bucket 38: 90%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 39:\n  bucket 40: 10%\n  bucket 39: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 39: 20%\n  bucket 40: 40%\n  bucket 39: 30%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 39: 40%\n  bucket 40: 70%\n  bucket 39: 50%\n  bucket 40: 80%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 40: 90%\n  bucket 39: 80%\n  bucket 40: 100%\n  bucket 39: 90%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  bucket 41: 20%\n  Calculating Z arrays for bucket 42\n  bucket 41: 30%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 42: 10%\n  bucket 41: 60%\n  bucket 42: 20%\n  bucket 41: 70%\n  bucket 42: 30%\n  bucket 41: 80%\n  bucket 42: 40%\n  bucket 41: 90%\n  bucket 42: 50%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 20%\n  bucket 44: 10%\n  bucket 43: 30%\n  bucket 44: 20%\n  bucket 43: 40%\n  bucket 44: 30%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 44: 40%\n  bucket 43: 70%\n  bucket 44: 50%\n  bucket 43: 80%\n  bucket 44: 60%\n  bucket 43: 90%\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  bucket 43: 100%\n  Calculating Z arrays for bucket 45\n  bucket 44: 70%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 80%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 90%\n  bucket 45: 10%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Reserving size (126) for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 47\n  Calculating Z arrays for bucket 48\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 48: 20%\n  bucket 49: 10%\n  bucket 47: 40%\n  bucket 48: 30%\n  bucket 47: 50%\n  bucket 49: 20%\n  bucket 48: 40%\n  bucket 47: 60%\n  bucket 49: 30%\n  bucket 47: 70%\n  bucket 48: 50%\n  bucket 47: 80%\n  bucket 49: 40%\n  bucket 48: 60%\n  bucket 47: 90%\n  bucket 48: 70%\n  bucket 47: 100%\n  bucket 49: 50%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 80%\n  bucket 49: 60%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 10%\n  bucket 51: 10%\n  bucket 50: 20%\n  bucket 51: 20%\n  bucket 50: 30%\n  bucket 51: 30%\n  bucket 50: 40%\n  bucket 51: 40%\n  bucket 50: 50%\n  bucket 51: 50%\n  bucket 50: 60%\n  bucket 51: 60%\n  bucket 50: 70%\n  bucket 51: 70%\n  bucket 50: 80%\n  bucket 51: 80%\n  bucket 50: 90%\n  bucket 51: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\nGetting block 53 of 60\nGetting block 54 of 60\n  Reserving size (126) for bucket 53\n  Reserving size (126) for bucket 52\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Calculating Z arrays for bucket 52\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 54:\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 53:\n  bucket 54: 10%\n  bucket 52: 10%\n  bucket 53: 10%\n  bucket 54: 20%\n  bucket 52: 20%\n  bucket 53: 20%\n  bucket 54: 30%\n  bucket 52: 30%\n  bucket 53: 30%\n  bucket 52: 40%\n  bucket 54: 40%\n  bucket 52: 50%\n  bucket 53: 40%\n  bucket 54: 50%\n  bucket 52: 60%\n  bucket 53: 50%\n  bucket 54: 60%\n  bucket 52: 70%\n  bucket 54: 70%\n  bucket 53: 60%\n  bucket 52: 80%\n  bucket 54: 80%\n  bucket 53: 70%\n  bucket 52: 90%\n  bucket 54: 90%\n  bucket 53: 80%\n  bucket 52: 100%\n  bucket 54: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 90%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Calculating Z arrays for bucket 56\n  bucket 55: 10%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 20%\n  bucket 56: 10%\n  bucket 55: 30%\n  bucket 56: 20%\n  bucket 55: 40%\n  bucket 56: 30%\n  bucket 55: 50%\n  bucket 56: 40%\n  bucket 55: 60%\n  bucket 56: 50%\n  bucket 55: 70%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 55: 80%\n  bucket 56: 80%\n  bucket 55: 90%\n  bucket 56: 90%\n  bucket 55: 100%\n  bucket 56: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 20%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 30%\n  bucket 58: 10%\n  bucket 57: 40%\n  bucket 58: 20%\n  bucket 57: 50%\n  bucket 58: 30%\n  bucket 57: 60%\n  bucket 58: 40%\n  bucket 57: 70%\n  bucket 58: 50%\n  bucket 57: 80%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 57: 90%\n  bucket 58: 80%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 13:18:46", "plugin": "core", "name": "end_epoch", "raw_value": "1713273526.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:18:46", "plugin": "core", "name": "start_epoch", "raw_value": "1713273526.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-7", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 7, "time_seconds": 9.821026086807251, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "hisat2/2.2.1+galaxy1-8", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 8, "time_seconds": 15.090616464614868, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "hisat2/2.2.1+galaxy1-9", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 9, "time_seconds": 30.310402870178223, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "aaa55cd999c67744"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "02ba6a23e7981128"}, "library|input_2": {"src": "hda", "id": "5db10db5c21ff977"}, "library|rna_strandness": "FR", "library|type": "paired"}, "job": {"model_class": "Job", "id": "c6d051bdf752e32d", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:19:50.873473", "create_time": "2024-04-16T13:19:40.398982", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "92339b0b40a5ec99", "external_id": "gxy-m6ww6", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/a/1/3/dataset_a13fb223-f1c2-44e8-9040-7f65c5a372e3.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/e/d/a/dataset_edac8923-49d3-4d95-9a28-c909e44a7d38.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/b/7/b/dataset_b7bd94a8-559b-4c68-82e1-a2bc3550d941.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'      --rna-strandness FR                           | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/0/f/0/dataset_0f0013fa-b780-4d1b-afe1-c0e262ca9ef2.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 205, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 206, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"FR\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 204, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "aaa55cd999c67744", "src": "hda", "uuid": "a13fb223-f1c2-44e8-9040-7f65c5a372e3"}, "library|input_1": {"id": "02ba6a23e7981128", "src": "hda", "uuid": "edac8923-49d3-4d95-9a28-c909e44a7d38"}, "library|input_2": {"id": "5db10db5c21ff977", "src": "hda", "uuid": "b7bd94a8-559b-4c68-82e1-a2bc3550d941"}}, "outputs": {"output_alignments": {"id": "cc5058d2c11669b2", "src": "hda", "uuid": "0f0013fa-b780-4d1b-afe1-c0e262ca9ef2"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 60\n  bucket 1: 10%\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  bucket 1: 20%\n  Calculating Z arrays for bucket 2\nGetting block 4 of 60\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 30%\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 1: 40%\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 5\n  bucket 1: 50%\n  Reserving size (126) for bucket 4\nGetting block 7 of 60\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 60%\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 6\n  Reserving size (126) for bucket 3\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 5: 10%\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 8\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 10%\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 3:\n  bucket 5: 30%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 40%\n  Calculating Z arrays for bucket 7\n  bucket 6: 10%\n  bucket 5: 50%\n  bucket 3: 10%\n  bucket 1: 70%\n  bucket 5: 60%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 8: 10%\n  bucket 1: 80%\n  bucket 2: 40%\n  bucket 5: 70%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 20%\n  bucket 3: 30%\n  bucket 5: 80%\n  bucket 6: 30%\n  bucket 8: 20%\n  bucket 1: 90%\n  bucket 8: 30%\n  bucket 7: 10%\n  bucket 2: 50%\n  bucket 7: 20%\n  bucket 5: 90%\n  bucket 1: 100%\n  bucket 2: 60%\n  bucket 6: 40%\n  bucket 7: 30%\n  Sorting block of length 42 for bucket 1\n  bucket 8: 40%\n  (Using difference cover)\n  bucket 3: 40%\n  bucket 2: 70%\n  bucket 5: 100%\n  bucket 4: 10%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 8: 50%\n  bucket 7: 50%\n  Sorting block of length 63 for bucket 5\n  bucket 3: 50%\n  bucket 2: 80%\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 2: 90%\n  bucket 7: 60%\n  bucket 2: 100%\n  bucket 8: 60%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 3: 60%\n  bucket 6: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 3: 70%\n  bucket 7: 90%\n  bucket 4: 20%\n  bucket 3: 80%\n  bucket 8: 80%\n  bucket 6: 90%\n  bucket 7: 100%\n  bucket 3: 90%\n  bucket 8: 90%\n  Sorting block of length 75 for bucket 7\n  bucket 3: 100%\n  bucket 8: 100%\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 4: 30%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 4: 40%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\nGetting block 10 of 60\n  bucket 9: 90%\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 11\nReturning block of 125 for bucket 9\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 11: 10%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 11: 20%\n  bucket 10: 90%\n  bucket 11: 30%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  Sorting block time: 00:00:00\n  bucket 11: 90%\nReturning block of 90 for bucket 10\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Entering block accumulator loop for bucket 12:\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  bucket 13: 10%\n  bucket 12: 30%\n  bucket 13: 20%\n  bucket 12: 40%\n  bucket 13: 30%\n  bucket 12: 50%\n  bucket 13: 40%\n  bucket 12: 60%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 12: 70%\n  bucket 13: 70%\n  bucket 12: 80%\n  bucket 13: 80%\n  bucket 12: 90%\n  bucket 13: 90%\n  bucket 12: 100%\n  bucket 13: 100%\n  Sorting block of length 82 for bucket 12\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  bucket 14: 40%\n  Calculating Z arrays for bucket 15\n  bucket 14: 50%\n  bucket 14: 60%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 15: 10%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  Sorting block time: 00:00:00\n  bucket 15: 90%\nReturning block of 83 for bucket 14\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 10%\n  bucket 16: 20%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 30%\n  bucket 17: 10%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  bucket 16: 40%\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  bucket 16: 50%\n  Entering block accumulator loop for bucket 18:\n  bucket 16: 60%\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 16: 70%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 16: 80%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 16: 90%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 16: 100%\n  bucket 17: 70%\n  bucket 18: 50%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  bucket 20: 50%\n  Calculating Z arrays for bucket 21\n  bucket 20: 60%\n  bucket 20: 70%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  bucket 21: 10%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\nGetting block 23 of 60\n  bucket 22: 40%\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 50%\n  bucket 22: 60%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 70%\n  bucket 23: 10%\n  bucket 22: 80%\n  bucket 23: 20%\n  bucket 22: 90%\n  bucket 23: 30%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  bucket 23: 40%\n  (Using difference cover)\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Calculating Z arrays for bucket 25\n  bucket 24: 10%\n  bucket 24: 20%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 25: 10%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 25: 20%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 25: 30%\n  bucket 24: 90%\n  bucket 25: 40%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\nGetting block 27 of 60\n  Calculating Z arrays for bucket 26\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  bucket 26: 60%\n  Calculating Z arrays for bucket 28\n  bucket 27: 50%\n  bucket 26: 70%\n  bucket 26: 80%\n  Entering block accumulator loop for bucket 28:\n  bucket 26: 90%\n  bucket 28: 10%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 50%\n  bucket 29: 60%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 30: 10%\n  bucket 29: 90%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 100%\n  bucket 30: 60%\n  Sorting block of length 51 for bucket 29\n  bucket 30: 70%\n  (Using difference cover)\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  Sorting block time: 00:00:00\n  bucket 32: 20%\nReturning block of 111 for bucket 31\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\nGetting block 34 of 60\n  Calculating Z arrays for bucket 33\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 34: 10%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 34: 20%\n  bucket 33: 50%\n  bucket 34: 30%\n  bucket 33: 60%\n  bucket 34: 40%\n  bucket 33: 70%\n  bucket 34: 50%\n  bucket 33: 80%\n  bucket 34: 60%\n  bucket 33: 90%\n  bucket 34: 70%\n  bucket 33: 100%\n  bucket 34: 80%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\nGetting block 36 of 60\n  Calculating Z arrays for bucket 35\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 36: 10%\n  bucket 35: 30%\n  bucket 36: 20%\n  bucket 35: 40%\n  bucket 36: 30%\n  bucket 35: 50%\n  bucket 36: 40%\n  bucket 35: 60%\n  bucket 36: 50%\n  bucket 35: 70%\n  bucket 36: 60%\n  bucket 35: 80%\n  bucket 36: 70%\n  bucket 35: 90%\n  bucket 36: 80%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 37 of 60\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 10%\n  bucket 38: 10%\n  bucket 37: 20%\n  bucket 38: 20%\n  bucket 37: 30%\n  bucket 38: 30%\n  bucket 37: 40%\n  bucket 38: 40%\n  bucket 37: 50%\n  bucket 38: 50%\n  bucket 37: 60%\n  bucket 38: 60%\n  bucket 37: 70%\n  bucket 38: 70%\n  bucket 37: 80%\n  bucket 38: 80%\n  bucket 37: 90%\n  bucket 38: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\nGetting block 40 of 60\n  Reserving size (126) for bucket 39\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 39\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 39:\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 10%\n  bucket 40: 10%\n  bucket 39: 20%\n  bucket 40: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 40: 30%\n  bucket 39: 50%\n  bucket 40: 40%\n  bucket 39: 60%\n  bucket 40: 50%\n  bucket 39: 70%\n  bucket 40: 60%\n  bucket 39: 80%\n  bucket 40: 70%\n  bucket 39: 90%\n  bucket 40: 80%\n  bucket 39: 100%\n  bucket 40: 90%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  bucket 42: 10%\n  bucket 41: 20%\n  bucket 42: 20%\n  bucket 41: 30%\n  bucket 42: 30%\n  bucket 41: 40%\n  bucket 42: 40%\n  bucket 41: 50%\n  bucket 42: 50%\n  bucket 41: 60%\n  bucket 42: 60%\n  bucket 41: 70%\n  bucket 42: 70%\n  bucket 41: 80%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 44:\n  Entering block accumulator loop for bucket 43:\n  bucket 44: 10%\n  bucket 43: 10%\n  bucket 44: 20%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 44: 30%\n  bucket 43: 40%\n  bucket 44: 40%\n  bucket 43: 50%\n  bucket 44: 50%\n  bucket 43: 60%\n  bucket 44: 60%\n  bucket 43: 70%\n  bucket 44: 70%\n  bucket 43: 80%\n  bucket 44: 80%\n  bucket 43: 90%\n  bucket 44: 90%\n  bucket 43: 100%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  bucket 45: 50%\n  Calculating Z arrays for bucket 46\n  bucket 45: 60%\n  bucket 45: 70%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 80%\n  bucket 46: 10%\n  bucket 45: 90%\n  bucket 46: 20%\n  bucket 45: 100%\n  bucket 46: 30%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\nGetting block 48 of 60\n  bucket 47: 10%\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 20%\n  bucket 47: 30%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 48: 10%\n  bucket 47: 60%\n  bucket 48: 20%\n  bucket 47: 70%\n  bucket 48: 30%\n  bucket 47: 80%\n  bucket 48: 40%\n  bucket 47: 90%\n  bucket 48: 50%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  bucket 48: 60%\n  (Using difference cover)\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\nGetting block 50 of 60\n  bucket 49: 40%\n  Reserving size (126) for bucket 50\n  bucket 49: 50%\n  Calculating Z arrays for bucket 50\n  bucket 49: 60%\n  bucket 49: 70%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 50: 10%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 51: 60%\n  bucket 51: 70%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 80%\n  bucket 52: 10%\n  bucket 51: 90%\n  bucket 52: 20%\n  bucket 51: 100%\n  bucket 52: 30%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Entering block accumulator loop for bucket 53:\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  bucket 53: 10%\nGetting block 55 of 60\n  Entering block accumulator loop for bucket 54:\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 53: 20%\n  bucket 54: 10%\n  bucket 53: 30%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 20%\n  bucket 53: 40%\n  bucket 54: 30%\n  bucket 53: 50%\n  bucket 55: 10%\n  bucket 54: 40%\n  bucket 53: 60%\n  bucket 55: 20%\n  bucket 53: 70%\n  bucket 54: 50%\n  bucket 53: 80%\n  bucket 55: 30%\n  bucket 53: 90%\n  bucket 54: 60%\n  bucket 55: 40%\n  bucket 53: 100%\n  bucket 55: 50%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 70%\n  bucket 55: 60%\n  bucket 54: 80%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  bucket 55: 90%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Entering block accumulator loop for bucket 59:\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  bucket 59: 10%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 20%\n  bucket 60: 10%\n  bucket 59: 30%\n  bucket 60: 20%\n  bucket 59: 40%\n  bucket 60: 30%\n  bucket 59: 50%\n  bucket 60: 40%\n  bucket 59: 60%\n  bucket 60: 50%\n  bucket 59: 70%\n  bucket 60: 60%\n  bucket 59: 80%\n  bucket 60: 70%\n  bucket 59: 90%\n  bucket 60: 80%\n  bucket 59: 100%\n  bucket 60: 90%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 60\n  bucket 1: 10%\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  bucket 1: 20%\n  Calculating Z arrays for bucket 2\nGetting block 4 of 60\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 30%\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 1: 40%\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 5\n  bucket 1: 50%\n  Reserving size (126) for bucket 4\nGetting block 7 of 60\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 60%\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 6\n  Reserving size (126) for bucket 3\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 5: 10%\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 8\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 10%\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 3:\n  bucket 5: 30%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 40%\n  Calculating Z arrays for bucket 7\n  bucket 6: 10%\n  bucket 5: 50%\n  bucket 3: 10%\n  bucket 1: 70%\n  bucket 5: 60%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 8: 10%\n  bucket 1: 80%\n  bucket 2: 40%\n  bucket 5: 70%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 20%\n  bucket 3: 30%\n  bucket 5: 80%\n  bucket 6: 30%\n  bucket 8: 20%\n  bucket 1: 90%\n  bucket 8: 30%\n  bucket 7: 10%\n  bucket 2: 50%\n  bucket 7: 20%\n  bucket 5: 90%\n  bucket 1: 100%\n  bucket 2: 60%\n  bucket 6: 40%\n  bucket 7: 30%\n  Sorting block of length 42 for bucket 1\n  bucket 8: 40%\n  (Using difference cover)\n  bucket 3: 40%\n  bucket 2: 70%\n  bucket 5: 100%\n  bucket 4: 10%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 8: 50%\n  bucket 7: 50%\n  Sorting block of length 63 for bucket 5\n  bucket 3: 50%\n  bucket 2: 80%\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 2: 90%\n  bucket 7: 60%\n  bucket 2: 100%\n  bucket 8: 60%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 3: 60%\n  bucket 6: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 3: 70%\n  bucket 7: 90%\n  bucket 4: 20%\n  bucket 3: 80%\n  bucket 8: 80%\n  bucket 6: 90%\n  bucket 7: 100%\n  bucket 3: 90%\n  bucket 8: 90%\n  Sorting block of length 75 for bucket 7\n  bucket 3: 100%\n  bucket 8: 100%\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 4: 30%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 4: 40%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\nGetting block 10 of 60\n  bucket 9: 90%\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 11\nReturning block of 125 for bucket 9\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 11: 10%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 11: 20%\n  bucket 10: 90%\n  bucket 11: 30%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  Sorting block time: 00:00:00\n  bucket 11: 90%\nReturning block of 90 for bucket 10\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Entering block accumulator loop for bucket 12:\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  bucket 13: 10%\n  bucket 12: 30%\n  bucket 13: 20%\n  bucket 12: 40%\n  bucket 13: 30%\n  bucket 12: 50%\n  bucket 13: 40%\n  bucket 12: 60%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 12: 70%\n  bucket 13: 70%\n  bucket 12: 80%\n  bucket 13: 80%\n  bucket 12: 90%\n  bucket 13: 90%\n  bucket 12: 100%\n  bucket 13: 100%\n  Sorting block of length 82 for bucket 12\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  bucket 14: 40%\n  Calculating Z arrays for bucket 15\n  bucket 14: 50%\n  bucket 14: 60%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 15: 10%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  Sorting block time: 00:00:00\n  bucket 15: 90%\nReturning block of 83 for bucket 14\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 10%\n  bucket 16: 20%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 30%\n  bucket 17: 10%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  bucket 16: 40%\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  bucket 16: 50%\n  Entering block accumulator loop for bucket 18:\n  bucket 16: 60%\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 16: 70%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 16: 80%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 16: 90%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 16: 100%\n  bucket 17: 70%\n  bucket 18: 50%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  bucket 20: 50%\n  Calculating Z arrays for bucket 21\n  bucket 20: 60%\n  bucket 20: 70%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  bucket 21: 10%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\nGetting block 23 of 60\n  bucket 22: 40%\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 50%\n  bucket 22: 60%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 70%\n  bucket 23: 10%\n  bucket 22: 80%\n  bucket 23: 20%\n  bucket 22: 90%\n  bucket 23: 30%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  bucket 23: 40%\n  (Using difference cover)\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Calculating Z arrays for bucket 25\n  bucket 24: 10%\n  bucket 24: 20%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 25: 10%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 25: 20%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 25: 30%\n  bucket 24: 90%\n  bucket 25: 40%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\nGetting block 27 of 60\n  Calculating Z arrays for bucket 26\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  bucket 26: 60%\n  Calculating Z arrays for bucket 28\n  bucket 27: 50%\n  bucket 26: 70%\n  bucket 26: 80%\n  Entering block accumulator loop for bucket 28:\n  bucket 26: 90%\n  bucket 28: 10%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 50%\n  bucket 29: 60%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 30: 10%\n  bucket 29: 90%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 100%\n  bucket 30: 60%\n  Sorting block of length 51 for bucket 29\n  bucket 30: 70%\n  (Using difference cover)\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  Sorting block time: 00:00:00\n  bucket 32: 20%\nReturning block of 111 for bucket 31\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\nGetting block 34 of 60\n  Calculating Z arrays for bucket 33\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 34: 10%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 34: 20%\n  bucket 33: 50%\n  bucket 34: 30%\n  bucket 33: 60%\n  bucket 34: 40%\n  bucket 33: 70%\n  bucket 34: 50%\n  bucket 33: 80%\n  bucket 34: 60%\n  bucket 33: 90%\n  bucket 34: 70%\n  bucket 33: 100%\n  bucket 34: 80%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\nGetting block 36 of 60\n  Calculating Z arrays for bucket 35\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 36: 10%\n  bucket 35: 30%\n  bucket 36: 20%\n  bucket 35: 40%\n  bucket 36: 30%\n  bucket 35: 50%\n  bucket 36: 40%\n  bucket 35: 60%\n  bucket 36: 50%\n  bucket 35: 70%\n  bucket 36: 60%\n  bucket 35: 80%\n  bucket 36: 70%\n  bucket 35: 90%\n  bucket 36: 80%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 37 of 60\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 10%\n  bucket 38: 10%\n  bucket 37: 20%\n  bucket 38: 20%\n  bucket 37: 30%\n  bucket 38: 30%\n  bucket 37: 40%\n  bucket 38: 40%\n  bucket 37: 50%\n  bucket 38: 50%\n  bucket 37: 60%\n  bucket 38: 60%\n  bucket 37: 70%\n  bucket 38: 70%\n  bucket 37: 80%\n  bucket 38: 80%\n  bucket 37: 90%\n  bucket 38: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\nGetting block 40 of 60\n  Reserving size (126) for bucket 39\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 39\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 39:\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 10%\n  bucket 40: 10%\n  bucket 39: 20%\n  bucket 40: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 40: 30%\n  bucket 39: 50%\n  bucket 40: 40%\n  bucket 39: 60%\n  bucket 40: 50%\n  bucket 39: 70%\n  bucket 40: 60%\n  bucket 39: 80%\n  bucket 40: 70%\n  bucket 39: 90%\n  bucket 40: 80%\n  bucket 39: 100%\n  bucket 40: 90%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  bucket 42: 10%\n  bucket 41: 20%\n  bucket 42: 20%\n  bucket 41: 30%\n  bucket 42: 30%\n  bucket 41: 40%\n  bucket 42: 40%\n  bucket 41: 50%\n  bucket 42: 50%\n  bucket 41: 60%\n  bucket 42: 60%\n  bucket 41: 70%\n  bucket 42: 70%\n  bucket 41: 80%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 44:\n  Entering block accumulator loop for bucket 43:\n  bucket 44: 10%\n  bucket 43: 10%\n  bucket 44: 20%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 44: 30%\n  bucket 43: 40%\n  bucket 44: 40%\n  bucket 43: 50%\n  bucket 44: 50%\n  bucket 43: 60%\n  bucket 44: 60%\n  bucket 43: 70%\n  bucket 44: 70%\n  bucket 43: 80%\n  bucket 44: 80%\n  bucket 43: 90%\n  bucket 44: 90%\n  bucket 43: 100%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  bucket 45: 50%\n  Calculating Z arrays for bucket 46\n  bucket 45: 60%\n  bucket 45: 70%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 80%\n  bucket 46: 10%\n  bucket 45: 90%\n  bucket 46: 20%\n  bucket 45: 100%\n  bucket 46: 30%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\nGetting block 48 of 60\n  bucket 47: 10%\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 20%\n  bucket 47: 30%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 48: 10%\n  bucket 47: 60%\n  bucket 48: 20%\n  bucket 47: 70%\n  bucket 48: 30%\n  bucket 47: 80%\n  bucket 48: 40%\n  bucket 47: 90%\n  bucket 48: 50%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  bucket 48: 60%\n  (Using difference cover)\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\nGetting block 50 of 60\n  bucket 49: 40%\n  Reserving size (126) for bucket 50\n  bucket 49: 50%\n  Calculating Z arrays for bucket 50\n  bucket 49: 60%\n  bucket 49: 70%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 50: 10%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 51: 60%\n  bucket 51: 70%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 80%\n  bucket 52: 10%\n  bucket 51: 90%\n  bucket 52: 20%\n  bucket 51: 100%\n  bucket 52: 30%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Entering block accumulator loop for bucket 53:\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  bucket 53: 10%\nGetting block 55 of 60\n  Entering block accumulator loop for bucket 54:\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 53: 20%\n  bucket 54: 10%\n  bucket 53: 30%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 20%\n  bucket 53: 40%\n  bucket 54: 30%\n  bucket 53: 50%\n  bucket 55: 10%\n  bucket 54: 40%\n  bucket 53: 60%\n  bucket 55: 20%\n  bucket 53: 70%\n  bucket 54: 50%\n  bucket 53: 80%\n  bucket 55: 30%\n  bucket 53: 90%\n  bucket 54: 60%\n  bucket 55: 40%\n  bucket 53: 100%\n  bucket 55: 50%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 70%\n  bucket 55: 60%\n  bucket 54: 80%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  bucket 55: 90%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Entering block accumulator loop for bucket 59:\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  bucket 59: 10%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 20%\n  bucket 60: 10%\n  bucket 59: 30%\n  bucket 60: 20%\n  bucket 59: 40%\n  bucket 60: 30%\n  bucket 59: 50%\n  bucket 60: 40%\n  bucket 59: 60%\n  bucket 60: 50%\n  bucket 59: 70%\n  bucket 60: 60%\n  bucket 59: 80%\n  bucket 60: 70%\n  bucket 59: 90%\n  bucket 60: 80%\n  bucket 59: 100%\n  bucket 60: 90%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-04-16 13:19:42", "plugin": "core", "name": "end_epoch", "raw_value": "1713273582.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:19:41", "plugin": "core", "name": "start_epoch", "raw_value": "1713273581.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "ivar_removereads/1.2.2+galaxy1-0", "has_data": true, "data": {"tool_id": "ivar_removereads", "tool_version": "1.2.2+galaxy1", "test_index": 0, "time_seconds": 18.188485860824585, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "poretools_tabular/0.6.1a1.0-0", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 0, "time_seconds": 52.3189742565155, "inputs": {"input": {"src": "hda", "id": "f723aae2fc86850d"}}, "job": {"model_class": "Job", "id": "0f96a559d9972b90", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:04:14.542611", "create_time": "2024-04-16T13:03:38.890208", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-htzdt", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/5/b/6/dataset_5b6a0e52-0a28-475b-9644-b0d3aaf4cc54.dat' > '/galaxy/server/database/objects/9/8/3/dataset_9838b89e-7efa-493a-b525-c635bca5e221.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "f723aae2fc86850d", "src": "hda", "uuid": "5b6a0e52-0a28-475b-9644-b0d3aaf4cc54"}}, "outputs": {"output": {"id": "ce4894c2de579820", "src": "hda", "uuid": "9838b89e-7efa-493a-b525-c635bca5e221"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-04-16 13:03:58", "plugin": "core", "name": "end_epoch", "raw_value": "1713272638.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:03:57", "plugin": "core", "name": "start_epoch", "raw_value": "1713272637.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-1", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 1, "time_seconds": 27.49369525909424, "inputs": {"input": {"src": "hda", "id": "c6d051bdf752e32d"}}, "job": {"model_class": "Job", "id": "2f9cf426a56347b9", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:04:41.999668", "create_time": "2024-04-16T13:04:31.281836", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-h97rm", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/d/5/6/dataset_d5649ebf-0163-4fbc-8503-a926c5dd9655.dat' > '/galaxy/server/database/objects/d/e/9/dataset_de9dfbe3-5b96-4bb1-b6f9-48e58612a1c4.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "c6d051bdf752e32d", "src": "hda", "uuid": "d5649ebf-0163-4fbc-8503-a926c5dd9655"}}, "outputs": {"output": {"id": "3e419dc5c47b67fb", "src": "hda", "uuid": "de9dfbe3-5b96-4bb1-b6f9-48e58612a1c4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-04-16 13:04:33", "plugin": "core", "name": "end_epoch", "raw_value": "1713272673.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:04:32", "plugin": "core", "name": "start_epoch", "raw_value": "1713272672.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-2", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 2, "time_seconds": 28.103560209274292, "inputs": {"input": {"src": "hda", "id": "a0c02ca46aa5a108"}}, "job": {"model_class": "Job", "id": "4dfc27855872ae3f", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:05:10.395275", "create_time": "2024-04-16T13:04:58.438398", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-xkb8b", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/f/1/8/dataset_f18600ff-c48b-4fc9-b1ce-8b44d3f7f535.dat' > '/galaxy/server/database/objects/e/a/c/dataset_eacb38d1-c9ba-4922-bc45-90babdf0dd97.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "a0c02ca46aa5a108", "src": "hda", "uuid": "f18600ff-c48b-4fc9-b1ce-8b44d3f7f535"}}, "outputs": {"output": {"id": "de5b68344433eaa7", "src": "hda", "uuid": "eacb38d1-c9ba-4922-bc45-90babdf0dd97"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-04-16 13:05:01", "plugin": "core", "name": "end_epoch", "raw_value": "1713272701.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:05:00", "plugin": "core", "name": "start_epoch", "raw_value": "1713272700.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-3", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 3, "time_seconds": 28.065241813659668, "inputs": {"input": {"src": "hda", "id": "4979102d3d8d0764"}}, "job": {"model_class": "Job", "id": "a2bb28772d28f7c4", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:05:38.656132", "create_time": "2024-04-16T13:05:27.387761", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-tmklr", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/b/4/b/dataset_b4bf5588-6cce-417d-81b7-79f1706b66cd.dat' > '/galaxy/server/database/objects/9/2/f/dataset_92f6e638-43e3-45a3-bc0f-a58c800db8f4.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "4979102d3d8d0764", "src": "hda", "uuid": "b4bf5588-6cce-417d-81b7-79f1706b66cd"}}, "outputs": {"output": {"id": "1a9b15081838252d", "src": "hda", "uuid": "92f6e638-43e3-45a3-bc0f-a58c800db8f4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-04-16 13:05:30", "plugin": "core", "name": "end_epoch", "raw_value": "1713272730.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:05:29", "plugin": "core", "name": "start_epoch", "raw_value": "1713272729.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-4", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 4, "time_seconds": 26.948575019836426, "inputs": {"input": {"src": "hda", "id": "9e3199d4bd3e41af"}}, "job": {"model_class": "Job", "id": "a88c403ee28998f5", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:06:05.304620", "create_time": "2024-04-16T13:05:54.650519", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-7z4v8", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/4/a/3/dataset_4a35b277-32bc-4b16-a030-24fb3cc7ce89.dat' > '/galaxy/server/database/objects/d/6/a/dataset_d6adf9cd-b4ae-465a-a693-5282bb138b76.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "9e3199d4bd3e41af", "src": "hda", "uuid": "4a35b277-32bc-4b16-a030-24fb3cc7ce89"}}, "outputs": {"output": {"id": "85d2cbaf3fcb8da2", "src": "hda", "uuid": "d6adf9cd-b4ae-465a-a693-5282bb138b76"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 13:05:56", "plugin": "core", "name": "end_epoch", "raw_value": "1713272756.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:05:56", "plugin": "core", "name": "start_epoch", "raw_value": "1713272756.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_idxstats/2.0.4-0", "has_data": true, "data": {"tool_id": "samtools_idxstats", "tool_version": "2.0.4", "test_index": 0, "time_seconds": 28.52119207382202, "inputs": {"input": {"src": "hda", "id": "0438fe1a3128048e"}}, "job": {"model_class": "Job", "id": "4cad4bb913f228dc", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:53:08.184232", "create_time": "2024-04-16T12:52:55.197406", "galaxy_version": "23.1", "command_version": "Version: 1.13 (using htslib 1.13)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_idxstats/samtools_idxstats/2.0.4", "history_id": "92339b0b40a5ec99", "external_id": "gxy-hprdj", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/9/7/8/dataset_978bfe7c-a687-40ef-aded-01c3475cbe11.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/2/d/9/metadata_2d9bba65-d429-4184-a0f7-76b59f7d15bc.dat' infile.bai &&  samtools idxstats -@ $addthreads infile  > '/galaxy/server/database/objects/e/d/6/dataset_ed6b4483-ae85-441c-be71-66461166a279.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input": {"id": "0438fe1a3128048e", "src": "hda", "uuid": "978bfe7c-a687-40ef-aded-01c3475cbe11"}}, "outputs": {"output": {"id": "3f362dd59eb71351", "src": "hda", "uuid": "ed6b4483-ae85-441c-be71-66461166a279"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:52:59", "plugin": "core", "name": "start_epoch", "raw_value": "1713271979.0000000"}, {"title": "Job End Time", "value": "2024-04-16 12:52:59", "plugin": "core", "name": "end_epoch", "raw_value": "1713271979.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "samtools_idxstats/2.0.4-1", "has_data": true, "data": {"tool_id": "samtools_idxstats", "tool_version": "2.0.4", "test_index": 1, "time_seconds": 25.277437925338745, "inputs": {"input": {"src": "hda", "id": "54ab22cbe4d58194"}}, "job": {"model_class": "Job", "id": "b2cff6943530c90a", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:53:33.548669", "create_time": "2024-04-16T12:53:23.689727", "galaxy_version": "23.1", "command_version": "Version: 1.13 (using htslib 1.13)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_idxstats/samtools_idxstats/2.0.4", "history_id": "92339b0b40a5ec99", "external_id": "gxy-rlbkn", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/b/d/b/dataset_bdbdafd8-f17d-467b-b934-1838164cfc47.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/3/d/b/metadata_3db1cde6-4303-49dc-85bb-b6abc0671c78.dat' infile.bai &&  samtools idxstats -@ $addthreads infile  > '/galaxy/server/database/objects/7/f/4/dataset_7f4c1ad2-6720-4b7d-b124-296b45c8a4db.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input": {"id": "54ab22cbe4d58194", "src": "hda", "uuid": "bdbdafd8-f17d-467b-b934-1838164cfc47"}}, "outputs": {"output": {"id": "5db723670d8ad26a", "src": "hda", "uuid": "7f4c1ad2-6720-4b7d-b124-296b45c8a4db"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:53:25", "plugin": "core", "name": "start_epoch", "raw_value": "1713272005.0000000"}, {"title": "Job End Time", "value": "2024-04-16 12:53:25", "plugin": "core", "name": "end_epoch", "raw_value": "1713272005.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-0", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 0, "time_seconds": 18.531152725219727, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "split_file_to_collection/0.5.0-1", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 1, "time_seconds": 52.735300064086914, "inputs": {"split_parms|input": {"src": "hda", "id": "9448e86ed138cc1c"}, "split_parms|top": "2", "split_parms|split_by|select_mode|numnew": "2", "split_parms|split_by|select_mode|mode": "numnew", "split_parms|split_by|newfilenames": "test", "split_parms|split_by|select_split_by": "row", "split_parms|select_ftype": "tabular"}, "job": {"model_class": "Job", "id": "16beb5f73f581694", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:43:00.728435", "create_time": "2024-04-16T12:42:22.695833", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-blzv7", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/c/d/b/dataset_cdba02cf-d58b-4a44-91d3-693d77497d63.dat' --ftype 'tabular' --top '2' --by 'row' --numnew '2' --file_names 'test' --file_ext 'tabular'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 2, \"src\": \"hda\"}]}, \"select_ftype\": \"tabular\", \"split_by\": {\"__current_case__\": 1, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}, \"select_split_by\": \"row\"}, \"top\": \"2\"}"}, "inputs": {"split_parms|input": {"id": "9448e86ed138cc1c", "src": "hda", "uuid": "cdba02cf-d58b-4a44-91d3-693d77497d63"}}, "outputs": {"__new_primary_file_list_output_tab|test_000001.tabular__": {"id": "60bded20a6838da9", "src": "hda", "uuid": "d74e43eb-9334-4e7a-a761-88b2ae861d41"}, "__new_primary_file_list_output_tab|test_000000.tabular__": {"id": "16beb5f73f581694", "src": "hda", "uuid": "97586cf6-6c0c-4c07-a222-0b4b38ec7d06"}}, "output_collections": {"list_output_tab": {"id": "92339b0b40a5ec99", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 12:42:52", "plugin": "core", "name": "end_epoch", "raw_value": "1713271372.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:42:52", "plugin": "core", "name": "start_epoch", "raw_value": "1713271372.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-10", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 10, "time_seconds": 9.167682647705078, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "split_file_to_collection/0.5.0-11", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 11, "time_seconds": 24.44866371154785, "inputs": {"split_parms|input": {"src": "hda", "id": "2de1f5eb23ca377b"}, "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "rand", "split_parms|select_allocate|seed": "1010", "split_parms|select_allocate|allocate": "random", "split_parms|select_ftype": "fasta"}, "job": {"model_class": "Job", "id": "f1df197e5d674bbd", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:46:59.818710", "create_time": "2024-04-16T12:46:50.091713", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-5zzqx", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/8/0/a/dataset_80aa6772-23ff-4357-9513-23d2d1d0cfe6.dat' --ftype 'fasta' --numnew '2' --rand --seed '1010' --file_names 'rand' --file_ext 'fasta'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 3, \"input\": {\"values\": [{\"id\": 55, \"src\": \"hda\"}]}, \"newfilenames\": \"rand\", \"select_allocate\": {\"__current_case__\": 0, \"allocate\": \"random\", \"seed\": \"1010\"}, \"select_ftype\": \"fasta\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fasta\""}, "inputs": {"split_parms|input": {"id": "2de1f5eb23ca377b", "src": "hda", "uuid": "80aa6772-23ff-4357-9513-23d2d1d0cfe6"}}, "outputs": {"__new_primary_file_list_output_fasta|rand_000001.fasta__": {"id": "5ed97979cb3281f1", "src": "hda", "uuid": "9dae5aad-2156-4ea1-af57-9f4042da9333"}, "__new_primary_file_list_output_fasta|rand_000000.fasta__": {"id": "edbbc270303ff5be", "src": "hda", "uuid": "6b96f88c-ba11-4b42-94fa-f66d2fe3078d"}}, "output_collections": {"list_output_fasta": {"id": "43204d2261a505c7", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:46:51", "plugin": "core", "name": "start_epoch", "raw_value": "1713271611.0000000"}, {"title": "Job End Time", "value": "2024-04-16 12:46:51", "plugin": "core", "name": "end_epoch", "raw_value": "1713271611.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-12", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 12, "time_seconds": 25.611883878707886, "inputs": {"split_parms|input": {"src": "hda", "id": "f1722ee1bb38a2f2"}, "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "fasta_batch", "split_parms|select_allocate|allocate": "batch", "split_parms|select_ftype": "fasta"}, "job": {"model_class": "Job", "id": "f7ff215ec91bfee5", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:47:25.427958", "create_time": "2024-04-16T12:47:15.355169", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-2ncfc", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/1/d/4/dataset_1d4da5f0-a06b-4912-8b89-d80b0890867d.dat' --ftype 'fasta' --numnew '2' --batch --file_names 'fasta_batch' --file_ext 'fasta'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 3, \"input\": {\"values\": [{\"id\": 58, \"src\": \"hda\"}]}, \"newfilenames\": \"fasta_batch\", \"select_allocate\": {\"__current_case__\": 1, \"allocate\": \"batch\"}, \"select_ftype\": \"fasta\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fasta\""}, "inputs": {"split_parms|input": {"id": "f1722ee1bb38a2f2", "src": "hda", "uuid": "1d4da5f0-a06b-4912-8b89-d80b0890867d"}}, "outputs": {"__new_primary_file_list_output_fasta|fasta_batch_000000.fasta__": {"id": "ed3ade5b07b6c8e4", "src": "hda", "uuid": "2105e973-447f-4fdb-b5d2-5fdade0d7082"}, "__new_primary_file_list_output_fasta|fasta_batch_000001.fasta__": {"id": "82c33046a0389415", "src": "hda", "uuid": "7ad1f31b-f8d9-424c-81f2-d917c7b1473a"}}, "output_collections": {"list_output_fasta": {"id": "b2075c5a48de8d87", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:47:17", "plugin": "core", "name": "start_epoch", "raw_value": "1713271637.0000000"}, {"title": "Job End Time", "value": "2024-04-16 12:47:17", "plugin": "core", "name": "end_epoch", "raw_value": "1713271637.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-13", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 13, "time_seconds": 24.27387261390686, "inputs": {"split_parms|input": {"src": "hda", "id": "4e70d6902b0d8b01"}, "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "test", "split_parms|select_ftype": "txt"}, "job": {"model_class": "Job", "id": "9b98cbeca60843be", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:47:49.869055", "create_time": "2024-04-16T12:47:40.079095", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-w2tll", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/c/2/d/dataset_c2ddc2f6-a303-472b-a825-a9e9a43ee6fd.dat' --ftype 'txt' --numnew '2' --file_names 'test' --file_ext 'txt'", "traceback": null, "params": {"__input_ext": "\"txt\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 5, \"input\": {\"values\": [{\"id\": 61, \"src\": \"hda\"}]}, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"txt\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}}"}, "inputs": {"split_parms|input": {"id": "4e70d6902b0d8b01", "src": "hda", "uuid": "c2ddc2f6-a303-472b-a825-a9e9a43ee6fd"}}, "outputs": {"__new_primary_file_list_output_txt|test_000000.txt__": {"id": "384c5b99e4e2acfd", "src": "hda", "uuid": "0c1161d4-c94a-40b1-8729-2a8b6e57c90a"}, "__new_primary_file_list_output_txt|test_000001.txt__": {"id": "245185de11480003", "src": "hda", "uuid": "ecc788fd-50f9-4967-b87c-83dcbc2575f8"}}, "output_collections": {"list_output_txt": {"id": "e3a6e873ae3d518b", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:47:42", "plugin": "core", "name": "start_epoch", "raw_value": "1713271662.0000000"}, {"title": "Job End Time", "value": "2024-04-16 12:47:42", "plugin": "core", "name": "end_epoch", "raw_value": "1713271662.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-14", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 14, "time_seconds": 24.11852264404297, "inputs": {"split_parms|input": {"src": "hda", "id": "9c92bd448d68776f"}, "split_parms|split_method|generic_regex": "^.*", "split_parms|split_method|select_split_method": "regex", "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "test", "split_parms|select_ftype": "generic"}, "job": {"model_class": "Job", "id": "80f5610d2fd803b3", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:48:14.079230", "create_time": "2024-04-16T12:48:04.331663", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-rnfh8", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/9/1/9/dataset_919284fd-dc60-4fd3-a030-1d48cf909a9d.dat' --ftype 'generic' --generic_re '^.*' --numnew '2' --file_names 'test' --file_ext 'txt'", "traceback": null, "params": {"__input_ext": "\"txt\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 6, \"input\": {\"values\": [{\"id\": 64, \"src\": \"hda\"}]}, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"generic\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}, \"split_method\": {\"__current_case__\": 0, \"generic_regex\": \"^.*\", \"select_split_method\": \"regex\", \"split_after\": \"false\"}}"}, "inputs": {"split_parms|input": {"id": "9c92bd448d68776f", "src": "hda", "uuid": "919284fd-dc60-4fd3-a030-1d48cf909a9d"}}, "outputs": {"__new_primary_file_list_output_generic|test_000000__": {"id": "41e94d8d7634b3e0", "src": "hda", "uuid": "221383e0-eaa3-4943-9ab7-e96de63f679e"}, "__new_primary_file_list_output_generic|test_000001__": {"id": "61f5500d396e9d69", "src": "hda", "uuid": "37177485-14de-4ffd-beb4-6f4c44ec8118"}}, "output_collections": {"list_output_generic": {"id": "1709bb913d8e492a", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:48:06", "plugin": "core", "name": "start_epoch", "raw_value": "1713271686.0000000"}, {"title": "Job End Time", "value": "2024-04-16 12:48:06", "plugin": "core", "name": "end_epoch", "raw_value": "1713271686.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-15", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 15, "time_seconds": 25.540879011154175, "inputs": {"split_parms|input": {"src": "hda", "id": "bc8ea395c594a6ae"}, "split_parms|split_method|generic_regex": "^>.*", "split_parms|split_method|select_split_method": "regex", "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "rand", "split_parms|select_allocate|seed": "1010", "split_parms|select_allocate|allocate": "random", "split_parms|select_ftype": "generic"}, "job": {"model_class": "Job", "id": "e5524355f404be56", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:48:39.678335", "create_time": "2024-04-16T12:48:29.940160", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-k85j7", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/0/1/d/dataset_01dc2800-8cbc-4c00-bd41-4e7cdc7da356.dat' --ftype 'generic' --generic_re '^>.*' --numnew '2' --rand --seed '1010' --file_names 'rand' --file_ext 'fasta'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 6, \"input\": {\"values\": [{\"id\": 67, \"src\": \"hda\"}]}, \"newfilenames\": \"rand\", \"select_allocate\": {\"__current_case__\": 0, \"allocate\": \"random\", \"seed\": \"1010\"}, \"select_ftype\": \"generic\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}, \"split_method\": {\"__current_case__\": 0, \"generic_regex\": \"^>.*\", \"select_split_method\": \"regex\", \"split_after\": \"false\"}}"}, "inputs": {"split_parms|input": {"id": "bc8ea395c594a6ae", "src": "hda", "uuid": "01dc2800-8cbc-4c00-bd41-4e7cdc7da356"}}, "outputs": {"__new_primary_file_list_output_generic|rand_000000__": {"id": "b4b329d3ef5ee332", "src": "hda", "uuid": "eb6cb1f4-5a4b-484d-beb9-ecf019eca94f"}, "__new_primary_file_list_output_generic|rand_000001__": {"id": "c63ad3981653a13f", "src": "hda", "uuid": "1a9749a8-9d59-44bf-8e16-19ca58db855d"}}, "output_collections": {"list_output_generic": {"id": "aff039ecf87bf72e", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 12:48:31", "plugin": "core", "name": "end_epoch", "raw_value": "1713271711.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:48:31", "plugin": "core", "name": "start_epoch", "raw_value": "1713271711.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-16", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 16, "time_seconds": 24.39220690727234, "inputs": {"split_parms|input": {"src": "hda", "id": "ab93115cf282bdb8"}, "split_parms|select_mode|numnew": "10", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "mol", "split_parms|select_allocate|allocate": "batch", "split_parms|select_ftype": "sdf"}, "job": {"model_class": "Job", "id": "56cddeb88b38ae6e", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:49:03.887552", "create_time": "2024-04-16T12:48:54.132095", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-2tf2f", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/0/9/2/dataset_09244e97-aa72-4107-85df-09564987af5b.dat' --ftype 'sdf' --numnew '10' --batch --file_names 'mol' --file_ext 'sdf'", "traceback": null, "params": {"__input_ext": "\"sdf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 4, \"input\": {\"values\": [{\"id\": 70, \"src\": \"hda\"}]}, \"newfilenames\": \"mol\", \"select_allocate\": {\"__current_case__\": 1, \"allocate\": \"batch\"}, \"select_ftype\": \"sdf\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"10\"}}"}, "inputs": {"split_parms|input": {"id": "ab93115cf282bdb8", "src": "hda", "uuid": "09244e97-aa72-4107-85df-09564987af5b"}}, "outputs": {"__new_primary_file_list_output_sdf|mol_000000.sdf__": {"id": "bdb506192279643c", "src": "hda", "uuid": "9ab6848c-5ee2-48a9-a212-f2f41fd68427"}, "__new_primary_file_list_output_sdf|mol_000001.sdf__": {"id": "ec8f8791b7480d87", "src": "hda", "uuid": "42053b41-46fb-40c6-b533-c4e36ee768d2"}, "__new_primary_file_list_output_sdf|mol_000002.sdf__": {"id": "5ff62276200360ba", "src": "hda", "uuid": "2578ca54-a794-4d8e-868c-8373b458d0d1"}}, "output_collections": {"list_output_sdf": {"id": "100930700b6c3a5d", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-04-16 12:48:56", "plugin": "core", "name": "end_epoch", "raw_value": "1713271736.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:48:55", "plugin": "core", "name": "start_epoch", "raw_value": "1713271735.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-17", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 17, "time_seconds": 25.791961669921875, "inputs": {"split_parms|input": {"src": "hda", "id": "addc072de59da1b6"}, "split_parms|select_mode|chunksize": "1", "split_parms|select_mode|mode": "chunk", "split_parms|newfilenames": "mol", "split_parms|select_allocate|allocate": "batch", "split_parms|select_ftype": "sdf"}, "job": {"model_class": "Job", "id": "a96772248ce1817c", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:49:29.718141", "create_time": "2024-04-16T12:49:20.000056", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-bfq2q", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/0/7/9/dataset_07953288-5314-4f06-84f0-a2b0bb70708d.dat' --ftype 'sdf' --chunksize 1 --batch --file_names 'mol' --file_ext 'sdf'", "traceback": null, "params": {"__input_ext": "\"sdf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 4, \"input\": {\"values\": [{\"id\": 74, \"src\": \"hda\"}]}, \"newfilenames\": \"mol\", \"select_allocate\": {\"__current_case__\": 1, \"allocate\": \"batch\"}, \"select_ftype\": \"sdf\", \"select_mode\": {\"__current_case__\": 0, \"chunksize\": \"1\", \"mode\": \"chunk\"}}"}, "inputs": {"split_parms|input": {"id": "addc072de59da1b6", "src": "hda", "uuid": "07953288-5314-4f06-84f0-a2b0bb70708d"}}, "outputs": {"__new_primary_file_list_output_sdf|mol_000000.sdf__": {"id": "b29039e8e2cbb920", "src": "hda", "uuid": "7cd4c26b-da27-4820-82a7-538737f407b9"}, "__new_primary_file_list_output_sdf|mol_000001.sdf__": {"id": "3aa46220a5b786ef", "src": "hda", "uuid": "af243e15-9213-42bd-b283-c307ddc564f2"}, "__new_primary_file_list_output_sdf|mol_000002.sdf__": {"id": "c2703e7cad6a086e", "src": "hda", "uuid": "930f4534-e233-4715-852c-0bfdee2c3233"}}, "output_collections": {"list_output_sdf": {"id": "48a4c35edffdc82f", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 12:49:21", "plugin": "core", "name": "end_epoch", "raw_value": "1713271761.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:49:21", "plugin": "core", "name": "start_epoch", "raw_value": "1713271761.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-18", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 18, "time_seconds": 8.501272439956665, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "split_file_to_collection/0.5.0-2", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 2, "time_seconds": 24.432387828826904, "inputs": {"split_parms|input": {"src": "hda", "id": "b08932695de14286"}, "split_parms|top": "2", "split_parms|split_by|select_mode|numnew": "2", "split_parms|split_by|select_mode|mode": "numnew", "split_parms|split_by|newfilenames": "batch_tab", "split_parms|split_by|select_allocate|allocate": "batch", "split_parms|split_by|select_split_by": "row", "split_parms|select_ftype": "tabular"}, "job": {"model_class": "Job", "id": "b08932695de14286", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:43:25.070089", "create_time": "2024-04-16T12:43:15.165104", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-ql86g", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/0/e/7/dataset_0e76bbb2-6b50-4349-9b54-9dd3bdffd24e.dat' --ftype 'tabular' --top '2' --by 'row' --numnew '2' --batch --file_names 'batch_tab' --file_ext 'tabular'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 5, \"src\": \"hda\"}]}, \"select_ftype\": \"tabular\", \"split_by\": {\"__current_case__\": 1, \"newfilenames\": \"batch_tab\", \"select_allocate\": {\"__current_case__\": 1, \"allocate\": \"batch\"}, \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}, \"select_split_by\": \"row\"}, \"top\": \"2\"}"}, "inputs": {"split_parms|input": {"id": "b08932695de14286", "src": "hda", "uuid": "0e76bbb2-6b50-4349-9b54-9dd3bdffd24e"}}, "outputs": {"__new_primary_file_list_output_tab|batch_tab_000001.tabular__": {"id": "e0a7c170aa1cda1d", "src": "hda", "uuid": "b05f8d0b-9b28-49f3-bc4a-3afb692ba535"}, "__new_primary_file_list_output_tab|batch_tab_000000.tabular__": {"id": "cae5fa060c6124c4", "src": "hda", "uuid": "cb08b232-2166-406d-8a51-4ba51e025a9f"}}, "output_collections": {"list_output_tab": {"id": "9448e86ed138cc1c", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 12:43:16", "plugin": "core", "name": "end_epoch", "raw_value": "1713271396.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:43:16", "plugin": "core", "name": "start_epoch", "raw_value": "1713271396.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-3", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 3, "time_seconds": 25.089309215545654, "inputs": {"split_parms|input": {"src": "hda", "id": "d971837d045fc946"}, "split_parms|top": "2", "split_parms|split_by|select_mode|chunksize": "2", "split_parms|split_by|select_mode|mode": "chunk", "split_parms|split_by|newfilenames": "batch_tab", "split_parms|split_by|select_allocate|allocate": "batch", "split_parms|split_by|select_split_by": "row", "split_parms|select_ftype": "tabular"}, "job": {"model_class": "Job", "id": "e0a7c170aa1cda1d", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:43:50.464829", "create_time": "2024-04-16T12:43:40.751231", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-ph56t", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/e/2/6/dataset_e26bdd08-6745-4502-a828-112804cf7cfd.dat' --ftype 'tabular' --top '2' --by 'row' --chunksize 2 --batch --file_names 'batch_tab' --file_ext 'tabular'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 8, \"src\": \"hda\"}]}, \"select_ftype\": \"tabular\", \"split_by\": {\"__current_case__\": 1, \"newfilenames\": \"batch_tab\", \"select_allocate\": {\"__current_case__\": 1, \"allocate\": \"batch\"}, \"select_mode\": {\"__current_case__\": 0, \"chunksize\": \"2\", \"mode\": \"chunk\"}, \"select_split_by\": \"row\"}, \"top\": \"2\"}"}, "inputs": {"split_parms|input": {"id": "d971837d045fc946", "src": "hda", "uuid": "e26bdd08-6745-4502-a828-112804cf7cfd"}}, "outputs": {"__new_primary_file_list_output_tab|batch_tab_000001.tabular__": {"id": "43204d2261a505c7", "src": "hda", "uuid": "4dab9171-e1f7-4882-b0e2-6096a7e9527d"}, "__new_primary_file_list_output_tab|batch_tab_000000.tabular__": {"id": "04381d47391843b3", "src": "hda", "uuid": "0a8a75b7-b475-4cda-94af-eeb4529a1f42"}}, "output_collections": {"list_output_tab": {"id": "16beb5f73f581694", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 12:43:42", "plugin": "core", "name": "end_epoch", "raw_value": "1713271422.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:43:42", "plugin": "core", "name": "start_epoch", "raw_value": "1713271422.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-4", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 4, "time_seconds": 29.390856981277466, "inputs": {"split_parms|input": {"src": "hda", "id": "b2075c5a48de8d87"}, "split_parms|select_mode|numnew": "24", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "chr", "split_parms|select_allocate|allocate": "batch", "split_parms|select_ftype": "txt"}, "job": {"model_class": "Job", "id": "04381d47391843b3", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:44:14.052193", "create_time": "2024-04-16T12:44:03.840247", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-zfmw6", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/4/e/a/dataset_4ead14b2-1734-41fa-8ade-35f3e87c32c1.dat' --ftype 'txt' --numnew '24' --batch --file_names 'chr' --file_ext 'txt'", "traceback": null, "params": {"__input_ext": "\"txt\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 5, \"input\": {\"values\": [{\"id\": 11, \"src\": \"hda\"}]}, \"newfilenames\": \"chr\", \"select_allocate\": {\"__current_case__\": 1, \"allocate\": \"batch\"}, \"select_ftype\": \"txt\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"24\"}}"}, "inputs": {"split_parms|input": {"id": "b2075c5a48de8d87", "src": "hda", "uuid": "4ead14b2-1734-41fa-8ade-35f3e87c32c1"}}, "outputs": {"__new_primary_file_list_output_txt|chr_000023.txt__": {"id": "ce4363e47d71e2d8", "src": "hda", "uuid": "80c48825-7159-4af6-bbb3-a3d7b2090cec"}, "__new_primary_file_list_output_txt|chr_000022.txt__": {"id": "a96772248ce1817c", "src": "hda", "uuid": "3890ea36-43a4-4b30-b442-3e926337d483"}, "__new_primary_file_list_output_txt|chr_000021.txt__": {"id": "cacaf4b45390afc7", "src": "hda", "uuid": "1cefb867-2c8f-49ea-bfc7-c6352d966575"}, "__new_primary_file_list_output_txt|chr_000020.txt__": {"id": "56cddeb88b38ae6e", "src": "hda", "uuid": "10da69d8-9fb9-4614-8e30-dc32944d22d5"}, "__new_primary_file_list_output_txt|chr_000019.txt__": {"id": "2a83907de3c3d20b", "src": "hda", "uuid": "5e128d55-0600-4219-b41c-ae6891942941"}, "__new_primary_file_list_output_txt|chr_000018.txt__": {"id": "e5524355f404be56", "src": "hda", "uuid": "991f12af-5ded-49ec-b478-44ad420055b0"}, "__new_primary_file_list_output_txt|chr_000017.txt__": {"id": "de1207a80193017b", "src": "hda", "uuid": "b4fe2c2b-7e9d-40d2-9263-3072b4e5683e"}, "__new_primary_file_list_output_txt|chr_000016.txt__": {"id": "80f5610d2fd803b3", "src": "hda", "uuid": "49cf2afb-179f-45cd-b38e-d6ea2bc38eec"}, "__new_primary_file_list_output_txt|chr_000015.txt__": {"id": "c9cb2d09b047439c", "src": "hda", "uuid": "0d89bf47-14f2-4b8c-93dc-6bcd9007d752"}, "__new_primary_file_list_output_txt|chr_000014.txt__": {"id": "9b98cbeca60843be", "src": "hda", "uuid": "6863dc9b-f89c-4d12-ba6a-c8ea2a3b9d34"}, "__new_primary_file_list_output_txt|chr_000013.txt__": {"id": "fc688701fc7e84d3", "src": "hda", "uuid": "918b6c14-75ab-49ec-9b75-7f1a27c7ca1c"}, "__new_primary_file_list_output_txt|chr_000012.txt__": {"id": "f7ff215ec91bfee5", "src": "hda", "uuid": "a76e19b5-d58d-4f6a-b5fc-e5d7a95c440d"}, "__new_primary_file_list_output_txt|chr_000011.txt__": {"id": "8ff06bc3c263a721", "src": "hda", "uuid": "521a2336-adab-4b47-a7ba-57a9cd664a12"}, "__new_primary_file_list_output_txt|chr_000010.txt__": {"id": "f1df197e5d674bbd", "src": "hda", "uuid": "dcbc9c19-bbb4-406d-8575-6fcc5b80f610"}, "__new_primary_file_list_output_txt|chr_000009.txt__": {"id": "5701a21937f98788", "src": "hda", "uuid": "560a750d-6440-4313-8571-dc09eec37952"}, "__new_primary_file_list_output_txt|chr_000008.txt__": {"id": "c7d4edc074a3ce7e", "src": "hda", "uuid": "55198d21-1de4-4199-bedf-9e687e128c0b"}, "__new_primary_file_list_output_txt|chr_000007.txt__": {"id": "efbeae86552e433b", "src": "hda", "uuid": "f86b4676-11b4-4862-b21d-7bab59b2f06f"}, "__new_primary_file_list_output_txt|chr_000006.txt__": {"id": "812fcf3aaebb979f", "src": "hda", "uuid": "25a663ac-bad9-4699-93f1-1cd20a838805"}, "__new_primary_file_list_output_txt|chr_000005.txt__": {"id": "2cc83067a59933fa", "src": "hda", "uuid": "bbdccb3f-332c-4ca3-91b7-bb721759f96e"}, "__new_primary_file_list_output_txt|chr_000004.txt__": {"id": "48a4c35edffdc82f", "src": "hda", "uuid": "ce56c107-c3a6-4bdb-bfff-73bebfd3ce99"}, "__new_primary_file_list_output_txt|chr_000003.txt__": {"id": "100930700b6c3a5d", "src": "hda", "uuid": "ad15df40-1601-4b88-92c4-e55fa4aea0d5"}, "__new_primary_file_list_output_txt|chr_000002.txt__": {"id": "aff039ecf87bf72e", "src": "hda", "uuid": "08382bd4-0aa3-4e5d-ae7f-03caba68f696"}, "__new_primary_file_list_output_txt|chr_000001.txt__": {"id": "1709bb913d8e492a", "src": "hda", "uuid": "ff746b15-59f3-4d64-ab23-d8e712645b53"}, "__new_primary_file_list_output_txt|chr_000000.txt__": {"id": "e3a6e873ae3d518b", "src": "hda", "uuid": "a9fdfd97-2ceb-4d1a-a1b1-70fb30521799"}}, "output_collections": {"list_output_txt": {"id": "60bded20a6838da9", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 12:44:05", "plugin": "core", "name": "end_epoch", "raw_value": "1713271445.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:44:05", "plugin": "core", "name": "start_epoch", "raw_value": "1713271445.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-5", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 5, "time_seconds": 25.71040654182434, "inputs": {"split_parms|input": {"src": "hda", "id": "ea5731c6f492cccb"}, "split_parms|top": "1", "split_parms|split_by|id_col": "10", "split_parms|split_by|match_regex": "(.*)\\.mgf", "split_parms|split_by|sub_regex": "\\1.tab", "split_parms|split_by|select_split_by": "col", "split_parms|select_ftype": "tabular"}, "job": {"model_class": "Job", "id": "b2075c5a48de8d87", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:44:45.128643", "create_time": "2024-04-16T12:44:34.061288", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-zkgsf", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/7/5/1/dataset_751b0308-d757-4e0d-b1ba-879a60d9e235.dat' --ftype 'tabular' --top '1' --by 'col' --id_column '10' --match '(.*)__backslash__.mgf' --sub '__backslash__1.tab'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 36, \"src\": \"hda\"}]}, \"select_ftype\": \"tabular\", \"split_by\": {\"__current_case__\": 0, \"id_col\": \"10\", \"match_regex\": \"(.*)\\\\.mgf\", \"select_split_by\": \"col\", \"sub_regex\": \"\\\\1.tab\"}, \"top\": \"1\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"tabular\""}, "inputs": {"split_parms|input": {"id": "ea5731c6f492cccb", "src": "hda", "uuid": "751b0308-d757-4e0d-b1ba-879a60d9e235"}}, "outputs": {"__new_primary_file_list_output_tab|file1.tab__": {"id": "d153eab2366010d4", "src": "hda", "uuid": "85e4c613-ecf1-4905-af4f-095e9a374556"}, "__new_primary_file_list_output_tab|file2.tab__": {"id": "39fd6c63a0583a0d", "src": "hda", "uuid": "dd35322e-6f99-44f5-930f-75720f672166"}, "__new_primary_file_list_output_tab|file3.tab__": {"id": "3b9a027f06b83816", "src": "hda", "uuid": "1efb498f-e60f-4603-a606-0fb93b439f1c"}, "__new_primary_file_list_output_tab|file4.tab__": {"id": "466c6ea8d0266f09", "src": "hda", "uuid": "6267a317-ec20-42b1-993e-abd3a82f54fb"}}, "output_collections": {"list_output_tab": {"id": "b08932695de14286", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-04-16 12:44:37", "plugin": "core", "name": "end_epoch", "raw_value": "1713271477.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:44:36", "plugin": "core", "name": "start_epoch", "raw_value": "1713271476.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-6", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 6, "time_seconds": 25.28925848007202, "inputs": {"split_parms|input": {"src": "hda", "id": "7f5ed008e48a3055"}, "split_parms|select_mode|numnew": "3", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "demo", "split_parms|select_ftype": "mgf"}, "job": {"model_class": "Job", "id": "1709bb913d8e492a", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:45:10.758105", "create_time": "2024-04-16T12:45:00.804209", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-dc2v4", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/5/2/4/dataset_524dd16a-2784-4239-a1a1-3605c83322a2.dat' --ftype 'mgf' --numnew '3' --file_names 'demo' --file_ext 'mgf'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 1, \"input\": {\"values\": [{\"id\": 41, \"src\": \"hda\"}]}, \"newfilenames\": \"demo\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"mgf\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"3\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"mgf\""}, "inputs": {"split_parms|input": {"id": "7f5ed008e48a3055", "src": "hda", "uuid": "524dd16a-2784-4239-a1a1-3605c83322a2"}}, "outputs": {"__new_primary_file_list_output_mgf|demo_000000.mgf__": {"id": "1615470755cc0476", "src": "hda", "uuid": "50727e21-0370-4803-89e8-8830b3e70b59"}, "__new_primary_file_list_output_mgf|demo_000001.mgf__": {"id": "8cd705bf5a730e2a", "src": "hda", "uuid": "6ae24358-c646-4a9c-822d-9b62bf6e797f"}, "__new_primary_file_list_output_mgf|demo_000002.mgf__": {"id": "6fe967e93cb65340", "src": "hda", "uuid": "bdb6a07b-4744-46a3-9c0f-b940d276a796"}}, "output_collections": {"list_output_mgf": {"id": "cae5fa060c6124c4", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 12:45:02", "plugin": "core", "name": "end_epoch", "raw_value": "1713271502.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:45:02", "plugin": "core", "name": "start_epoch", "raw_value": "1713271502.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-7", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 7, "time_seconds": 25.214635848999023, "inputs": {"split_parms|input": {"src": "hda", "id": "528285221a59d828"}, "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "test", "split_parms|select_ftype": "fasta"}, "job": {"model_class": "Job", "id": "100930700b6c3a5d", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:45:36.079397", "create_time": "2024-04-16T12:45:26.225030", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-wx7dg", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/e/0/b/dataset_e0b7a8df-93a1-4517-b8d1-783340b97718.dat' --ftype 'fasta' --numnew '2' --file_names 'test' --file_ext 'fasta'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 3, \"input\": {\"values\": [{\"id\": 45, \"src\": \"hda\"}]}, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"fasta\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fasta\""}, "inputs": {"split_parms|input": {"id": "528285221a59d828", "src": "hda", "uuid": "e0b7a8df-93a1-4517-b8d1-783340b97718"}}, "outputs": {"__new_primary_file_list_output_fasta|test_000000.fasta__": {"id": "eb2a3ad300e83a8f", "src": "hda", "uuid": "7cc904aa-15b6-49ec-8116-1daecff4fd74"}, "__new_primary_file_list_output_fasta|test_000001.fasta__": {"id": "a8abd925c2a90c4f", "src": "hda", "uuid": "2c932a8d-194b-4991-97ae-0c117b6968f9"}}, "output_collections": {"list_output_fasta": {"id": "e0a7c170aa1cda1d", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:45:27", "plugin": "core", "name": "start_epoch", "raw_value": "1713271527.0000000"}, {"title": "Job End Time", "value": "2024-04-16 12:45:27", "plugin": "core", "name": "end_epoch", "raw_value": "1713271527.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-8", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 8, "time_seconds": 24.47028112411499, "inputs": {"split_parms|input": {"src": "hda", "id": "ae4036d2c67fca0c"}, "split_parms|select_mode|chunksize": "3", "split_parms|select_mode|mode": "chunk", "split_parms|newfilenames": "test", "split_parms|select_ftype": "fasta"}, "job": {"model_class": "Job", "id": "2cc83067a59933fa", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:46:00.490507", "create_time": "2024-04-16T12:45:50.538631", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-2kx4h", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/7/8/2/dataset_782af3f3-6f19-4413-a0bd-79c600cd5753.dat' --ftype 'fasta' --chunksize 3 --file_names 'test' --file_ext 'fasta'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 3, \"input\": {\"values\": [{\"id\": 48, \"src\": \"hda\"}]}, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"fasta\", \"select_mode\": {\"__current_case__\": 0, \"chunksize\": \"3\", \"mode\": \"chunk\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fasta\""}, "inputs": {"split_parms|input": {"id": "ae4036d2c67fca0c", "src": "hda", "uuid": "782af3f3-6f19-4413-a0bd-79c600cd5753"}}, "outputs": {"__new_primary_file_list_output_fasta|test_000000.fasta__": {"id": "301afa011aeaaca5", "src": "hda", "uuid": "fc90fb14-561d-4c71-9514-b543a50cfba1"}, "__new_primary_file_list_output_fasta|test_000001.fasta__": {"id": "49f1068c6cd6785a", "src": "hda", "uuid": "fcfdb002-6dc6-475d-969e-ff5ca0d1030c"}}, "output_collections": {"list_output_fasta": {"id": "d971837d045fc946", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:45:52", "plugin": "core", "name": "start_epoch", "raw_value": "1713271552.0000000"}, {"title": "Job End Time", "value": "2024-04-16 12:45:52", "plugin": "core", "name": "end_epoch", "raw_value": "1713271552.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-9", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 9, "time_seconds": 25.126776933670044, "inputs": {"split_parms|input": {"src": "hda", "id": "dec720d351ed3b4d"}, "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "test", "split_parms|select_ftype": "fastq"}, "job": {"model_class": "Job", "id": "efbeae86552e433b", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:46:26.038941", "create_time": "2024-04-16T12:46:16.042371", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-jpghg", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/c/8/6/dataset_c8669702-7de2-4435-8916-4b5be33b4242.dat' --ftype 'fastq' --numnew '2' --file_names 'test' --file_ext 'fastq'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 2, \"input\": {\"values\": [{\"id\": 51, \"src\": \"hda\"}]}, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"fastq\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fastq\""}, "inputs": {"split_parms|input": {"id": "dec720d351ed3b4d", "src": "hda", "uuid": "c8669702-7de2-4435-8916-4b5be33b4242"}}, "outputs": {"__new_primary_file_list_output_fastq|test_000000.fastq__": {"id": "4cad4bb913f228dc", "src": "hda", "uuid": "b1db0851-1661-4ddb-a3c8-33ea09b84215"}, "__new_primary_file_list_output_fastq|test_000001.fastq__": {"id": "3a2bdfad62accc19", "src": "hda", "uuid": "0fbc6523-c16f-4b4e-8e25-95c99767231a"}}, "output_collections": {"list_output_fastq": {"id": "04381d47391843b3", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:46:17", "plugin": "core", "name": "start_epoch", "raw_value": "1713271577.0000000"}, {"title": "Job End Time", "value": "2024-04-16 12:46:17", "plugin": "core", "name": "end_epoch", "raw_value": "1713271577.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "unicycler/0.4.8.0-0", "has_data": true, "data": {"tool_id": "unicycler", "tool_version": "0.4.8.0", "test_index": 0, "time_seconds": 157.96237540245056, "inputs": {"paired_unpaired|fastq_input1": {"src": "hda", "id": "7a232ce02bda0ed5"}, "paired_unpaired|fastq_input2": {"src": "hda", "id": "89873b1da436111f"}, "paired_unpaired|fastq_input_selector": "paired", "mode": "normal", "min_fasta_length": "100", "linear_seqs": "0", "spades|no_correct": true, "spades|min_kmer_frac": "0.2", "spades|max_kmer_frac": "0.95", "spades|kmer_count": "10", "spades|depth_filter": "0.25", "rotation|no_rotate": false, "rotation|start_gene_id": "90", "rotation|start_gene_cov": "95", "pilon|no_pilon": false, "pilon|min_polish_size": "1000", "graph_clean|min_component_size": "1000", "graph_clean|min_dead_end_size": "1000", "lr_align|scores": "3,-6,-5,-2"}, "job": {"model_class": "Job", "id": "2aa8515227b3c0a4", "state": "error", "exit_code": null, "update_time": "2024-04-16T13:09:37.363763", "create_time": "2024-04-16T13:07:17.384866", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-fp9tj", "command_line": "ln -s '/galaxy/server/database/objects/5/9/4/dataset_594bd1e5-eaea-4816-8d5f-86b559f0c6e8.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/8/0/4/dataset_80426201-c7ed-42c9-b3f3-710c43efba48.dat' fq2.fastq && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -1 'fq1.fastq' -2 'fq2.fastq' --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --no_correct --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0'  --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": false}", "rotation": "{\"no_rotate\": false, \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": false, \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": true}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "long": null, "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 149, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 150, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}"}, "inputs": {"paired_unpaired|fastq_input1": {"id": "7a232ce02bda0ed5", "src": "hda", "uuid": "594bd1e5-eaea-4816-8d5f-86b559f0c6e8"}, "paired_unpaired|fastq_input2": {"id": "89873b1da436111f", "src": "hda", "uuid": "80426201-c7ed-42c9-b3f3-710c43efba48"}}, "outputs": {"assembly_graph": {"id": "9943c834d2bab90d", "src": "hda", "uuid": "273167b3-892c-4337-903e-1490229367df"}, "assembly": {"id": "2783b69caa5fc725", "src": "hda", "uuid": "5e2de9a6-53fa-4b8d-865f-ca7b2f6e51b1"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": null, "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "unicycler/0.4.8.0-1", "has_data": true, "data": {"tool_id": "unicycler", "tool_version": "0.4.8.0", "test_index": 1, "time_seconds": 151.99899673461914, "inputs": {"paired_unpaired|fastq_input1": {"src": "hda", "id": "66b624c46f0b3531"}, "paired_unpaired|fastq_input2": {"src": "hda", "id": "b2bb5f3fc4517aff"}, "paired_unpaired|fastq_input_selector": "paired", "long": {"src": "hda", "id": "78b53d24816921e0"}, "mode": "normal", "min_fasta_length": "100", "linear_seqs": "0", "spades|no_correct": true, "spades|min_kmer_frac": "0.2", "spades|max_kmer_frac": "0.95", "spades|kmer_count": "10", "spades|depth_filter": "0.25", "rotation|no_rotate": false, "rotation|start_gene_id": "90", "rotation|start_gene_cov": "95", "pilon|no_pilon": false, "pilon|min_polish_size": "1000", "graph_clean|min_component_size": "1000", "graph_clean|min_dead_end_size": "1000", "lr_align|scores": "3,-6,-5,-2"}, "job": {"model_class": "Job", "id": "54ab22cbe4d58194", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:12:08.874449", "create_time": "2024-04-16T13:09:57.275771", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-gczz8", "command_line": "ln -s '/galaxy/server/database/objects/1/8/f/dataset_18fdc670-5d87-48cb-8101-f14a07f28bbc.dat' fq1.fastq.gz && ln -s '/galaxy/server/database/objects/8/8/7/dataset_887f45dc-3bad-4ef0-8ab8-fdd4f06eb028.dat' fq2.fastq.gz && ln -s '/galaxy/server/database/objects/7/c/b/dataset_7cb75411-9384-437d-aee8-5735225dbe67.dat' 'lr.fasta' && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -1 'fq1.fastq.gz' -2 'fq2.fastq.gz' -l lr.fasta --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --no_correct --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0'  --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": false}", "rotation": "{\"no_rotate\": false, \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": false, \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": true}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 153, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 154, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}"}, "inputs": {"paired_unpaired|fastq_input1": {"id": "66b624c46f0b3531", "src": "hda", "uuid": "18fdc670-5d87-48cb-8101-f14a07f28bbc"}, "paired_unpaired|fastq_input2": {"id": "b2bb5f3fc4517aff", "src": "hda", "uuid": "887f45dc-3bad-4ef0-8ab8-fdd4f06eb028"}, "long": {"id": "78b53d24816921e0", "src": "hda", "uuid": "7cb75411-9384-437d-aee8-5735225dbe67"}}, "outputs": {"assembly_graph": {"id": "eb10cc772177724a", "src": "hda", "uuid": "07b18a7b-be25-4fe9-a964-4c3fd229fcf5"}, "assembly": {"id": "56605ffd3e375e05", "src": "hda", "uuid": "252d9151-dbf5-4eee-96a7-6b482e7220b3"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2024-04-16 13:09:59)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq.gz -2 fq2.fastq.gz -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/96/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version             Status     Path                                   \n  spades.py       3.14.1              good       /usr/local/bin/spades.py               \n  racon           1.4.20              good       /usr/local/bin/racon                   \n  makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb             \n  tblastn         2.12.0+             good       /usr/local/bin/tblastn                 \n  bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build           \n  bowtie2         2.4.4               good       /usr/local/bin/bowtie2                 \n  samtools        1.14                good       /usr/local/bin/samtools                \n  java            11.0.9.1-internal   good       /usr/local/bin/java                    \n  pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar\n  bcftools                            not used                                          \n\n\nChoosing k-mer range for assembly (2024-04-16 13:10:01)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2024-04-16 13:10:01)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 8 --only-assembler -1 /galaxy/server/database/jobs_directory/000/96/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/96/working/fq2.fastq.gz\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-6.1.58+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/96/working/fq1.fastq.gz']\n      right reads: ['/galaxy/server/database/jobs_directory/000/96/working/fq2.fastq.gz']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 78\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/96/working/fq1.fastq.gz: max reads length: 251\n/galaxy/server/database/jobs_directory/000/96/working/fq2.fastq.gz: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 78 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.006     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.127    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.127    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.130    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.130    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.132    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.165    25M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.184    25M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.184    25M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.184    25M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.185    25M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 8 threads. This might take a while.\n  0:00:00.186    25M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.186    25M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24997 Gb\n  0:00:00.186    25M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.914    43M / 56M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.914    43M / 56M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.137    43M / 56M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.137    43M / 56M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.292    43M / 56M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:01.293    43M / 56M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.293    43M / 56M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 128 files using 8 threads. This might take a while.\n  0:00:01.294    43M / 56M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.294    43M / 56M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24991 Gb\n  0:00:01.294    43M / 56M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:02.691     6G / 6G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:02.691     6G / 6G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:02.703   135M / 135M  INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.139   135M / 135M  INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:03.139   135M / 135M  INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:03.446   135M / 135M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:03.473   131M / 131M  INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:03.507   131M / 131M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:03.507   131M / 131M  INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:03.512   131M / 131M  INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:03.514   131M / 131M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:03.514   131M / 131M  INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:03.514   131M / 131M  INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:03.521   131M / 131M  INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:03.521   131M / 131M  INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:03.522   131M / 131M  INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:03.522   131M / 131M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:03.525   131M / 131M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:03.528   131M / 131M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:03.529   131M / 131M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:03.534   131M / 131M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:03.537   131M / 131M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:03.537   131M / 131M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:03.538   131M / 131M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:03.556   131M / 131M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 20768 bytes occupied (4.71344 bits per kmer).\n  0:00:03.556   131M / 131M  INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:03.622   131M / 131M  INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:03.624   131M / 131M  INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:03.630   131M / 131M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:03.630   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:03.630   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:03.631   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:03.631   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:03.713   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:03.916   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:04.401   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:04.965   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:05.928   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:05.928   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:05.929   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:05.929   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:05.929   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:05.929   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:05.930   131M / 131M  INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:05.930   131M / 131M  INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:05.930   131M / 131M  INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:05.930   131M / 131M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:05.930   131M / 131M  INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:05.930   131M / 131M  INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0\n..\nry/000/96/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:09.514    52M / 171M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2024-04-16 13:11:41)\nFilter by read depth        (2024-04-16 13:11:41)\nFilter homopolymer loops    (2024-04-16 13:11:41)\nMerge all possible          (2024-04-16 13:11:41)\nNormalise read depths       (2024-04-16 13:11:41)\nRemove zero length segments (2024-04-16 13:11:41)\nSort link order             (2024-04-16 13:11:41)\nGraph cleaning finished     (2024-04-16 13:11:41)\nSaving /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2024-04-16 13:11:41)\nFilter by read depth        (2024-04-16 13:11:41)\nFilter homopolymer loops    (2024-04-16 13:11:41)\nMerge all possible          (2024-04-16 13:11:41)\nNormalise read depths       (2024-04-16 13:11:41)\nRemove zero length segments (2024-04-16 13:11:41)\nSort link order             (2024-04-16 13:11:41)\nGraph cleaning finished     (2024-04-16 13:11:41)\nSaving /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2024-04-16 13:11:41)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/\n\n\nDetermining graph multiplicity (2024-04-16 13:11:41)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/96/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2024-04-16 13:11:41)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/96/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-04-16 13:11:41)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-04-16 13:11:41)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2024-04-16 13:11:41)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2024-04-16 13:11:41)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/96/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/96/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2024-04-16 13:11:41)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/96/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times\n(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2024-04-16 13:11:41)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2024-04-16 13:11:41)\n1\t5386\t5\t5077\t-\t1\t5386\t8\t5080\t5072\t5072\t255\tcm:i:945\n1\t5386\t5093\t5384\t-\t1\t5386\t5087\t5378\t291\t291\t255\tcm:i:52\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2024-04-16 13:11:41)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5077,-,1,8,5080\n    5093,5384,-,1,5087,5378\nReference ranges:\n    1-: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 5076 points, score=5074.000394 (good)\n    line 2: 292 points, score=290.006826 (good)\nAll Seqan alignments (time to align = 0.040 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\n\n\nRead alignment summary (2024-04-16 13:11:41)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nDeleting /galaxy/server/database/jobs_directory/000/96/working/read_alignment/\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2024-04-16 13:11:41)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2024-04-16 13:11:41)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/96/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2024-04-16 13:11:41)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-04-16 13:11:41)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/96/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nPolishing assembly with Pilon (2024-04-16 13:11:41)\n    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any\nremaining small-scale errors with the assembly.\n\nAligning reads to find appropriate insert size range...\n  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta\n  bowtie2 -1 /galaxy/server/database/jobs_directory/000/96/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/96/working/fq2.fastq.gz -x 0_insert_size_check.fasta --fast --threads 8 -I 0 -X 5000 -S 0_alignments.sam\nInsert size 1st percentile:  263\nInsert size 99th percentile: 450\n\nPilon polish round 1\n  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 8 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/96/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/96/working/fq2.fastq.gz\n  samtools sort -@ 8 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam\n  samtools index 1_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/96/working/pilon_polish --fix bases --frags 1_paired_alignments.bam\nNo Pilon changes\n\nPilon polish round 2\n  bowtie2-build 2_polish_input.fasta 2_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 8 -I 263 -X 450 -x 2_polish_input.fasta -S 2_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/96/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/96/working/fq2.fastq.gz\n  samtools sort -@ 8 -o 2_paired_alignments.bam -O bam -T temp 2_paired_alignments.sam\n  samtools index 2_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 2_polish_input.fasta --changes --output 2_pilon --outdir /galaxy/server/database/jobs_directory/000/96/working/pilon_polish --fix all --frags 2_paired_alignments.bam\nNo Pilon changes\n\nSaving /galaxy/server/database/jobs_directory/000/96/working/005_polished.gfa\n\n\nRotating completed replicons (2024-04-16 13:11:49)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-04-16 13:11:59)\nSaving /galaxy/server/database/jobs_directory/000/96/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/96/working/assembly.fasta\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "\nStarting Unicycler (2024-04-16 13:09:59)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq.gz -2 fq2.fastq.gz -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/96/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version             Status     Path                                   \n  spades.py       3.14.1              good       /usr/local/bin/spades.py               \n  racon           1.4.20              good       /usr/local/bin/racon                   \n  makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb             \n  tblastn         2.12.0+             good       /usr/local/bin/tblastn                 \n  bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build           \n  bowtie2         2.4.4               good       /usr/local/bin/bowtie2                 \n  samtools        1.14                good       /usr/local/bin/samtools                \n  java            11.0.9.1-internal   good       /usr/local/bin/java                    \n  pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar\n  bcftools                            not used                                          \n\n\nChoosing k-mer range for assembly (2024-04-16 13:10:01)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2024-04-16 13:10:01)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 8 --only-assembler -1 /galaxy/server/database/jobs_directory/000/96/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/96/working/fq2.fastq.gz\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-6.1.58+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/96/working/fq1.fastq.gz']\n      right reads: ['/galaxy/server/database/jobs_directory/000/96/working/fq2.fastq.gz']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 78\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/96/working/fq1.fastq.gz: max reads length: 251\n/galaxy/server/database/jobs_directory/000/96/working/fq2.fastq.gz: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 78 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.006     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.006     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.127    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.127    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.130    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.130    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.132    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.165    25M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.184    25M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.184    25M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.184    25M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.185    25M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 8 threads. This might take a while.\n  0:00:00.186    25M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.186    25M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24997 Gb\n  0:00:00.186    25M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.914    43M / 56M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.914    43M / 56M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.137    43M / 56M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.137    43M / 56M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.292    43M / 56M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:01.293    43M / 56M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.293    43M / 56M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 128 files using 8 threads. This might take a while.\n  0:00:01.294    43M / 56M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.294    43M / 56M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24991 Gb\n  0:00:01.294    43M / 56M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:02.691     6G / 6G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:02.691     6G / 6G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:02.703   135M / 135M  INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.139   135M / 135M  INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:03.139   135M / 135M  INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:03.446   135M / 135M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:03.473   131M / 131M  INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:03.507   131M / 131M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:03.507   131M / 131M  INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:03.512   131M / 131M  INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:03.514   131M / 131M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:03.514   131M / 131M  INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:03.514   131M / 131M  INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:03.521   131M / 131M  INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:03.521   131M / 131M  INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:03.522   131M / 131M  INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:03.522   131M / 131M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:03.525   131M / 131M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:03.528   131M / 131M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:03.529   131M / 131M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:03.534   131M / 131M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:03.537   131M / 131M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:03.537   131M / 131M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:03.538   131M / 131M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:03.556   131M / 131M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 20768 bytes occupied (4.71344 bits per kmer).\n  0:00:03.556   131M / 131M  INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:03.622   131M / 131M  INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:03.624   131M / 131M  INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:03.630   131M / 131M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:03.630   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:03.630   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:03.631   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:03.631   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:03.713   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:03.916   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:04.401   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:04.965   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:05.928   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:05.928   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:05.929   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:05.929   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:05.929   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:05.929   131M / 131M  INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:05.930   131M / 131M  INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:05.930   131M / 131M  INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:05.930   131M / 131M  INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:05.930   131M / 131M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:05.930   131M / 131M  INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:05.930   131M / 131M  INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0\n..\nry/000/96/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:09.514    52M / 171M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2024-04-16 13:11:41)\nFilter by read depth        (2024-04-16 13:11:41)\nFilter homopolymer loops    (2024-04-16 13:11:41)\nMerge all possible          (2024-04-16 13:11:41)\nNormalise read depths       (2024-04-16 13:11:41)\nRemove zero length segments (2024-04-16 13:11:41)\nSort link order             (2024-04-16 13:11:41)\nGraph cleaning finished     (2024-04-16 13:11:41)\nSaving /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2024-04-16 13:11:41)\nFilter by read depth        (2024-04-16 13:11:41)\nFilter homopolymer loops    (2024-04-16 13:11:41)\nMerge all possible          (2024-04-16 13:11:41)\nNormalise read depths       (2024-04-16 13:11:41)\nRemove zero length segments (2024-04-16 13:11:41)\nSort link order             (2024-04-16 13:11:41)\nGraph cleaning finished     (2024-04-16 13:11:41)\nSaving /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2024-04-16 13:11:41)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/96/working/spades_assembly/\n\n\nDetermining graph multiplicity (2024-04-16 13:11:41)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/96/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2024-04-16 13:11:41)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/96/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-04-16 13:11:41)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-04-16 13:11:41)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2024-04-16 13:11:41)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2024-04-16 13:11:41)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/96/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/96/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2024-04-16 13:11:41)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/96/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times\n(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2024-04-16 13:11:41)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2024-04-16 13:11:41)\n1\t5386\t5\t5077\t-\t1\t5386\t8\t5080\t5072\t5072\t255\tcm:i:945\n1\t5386\t5093\t5384\t-\t1\t5386\t5087\t5378\t291\t291\t255\tcm:i:52\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2024-04-16 13:11:41)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5077,-,1,8,5080\n    5093,5384,-,1,5087,5378\nReference ranges:\n    1-: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 5076 points, score=5074.000394 (good)\n    line 2: 292 points, score=290.006826 (good)\nAll Seqan alignments (time to align = 0.040 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\n\n\nRead alignment summary (2024-04-16 13:11:41)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nDeleting /galaxy/server/database/jobs_directory/000/96/working/read_alignment/\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2024-04-16 13:11:41)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2024-04-16 13:11:41)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/96/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2024-04-16 13:11:41)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-04-16 13:11:41)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/96/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nPolishing assembly with Pilon (2024-04-16 13:11:41)\n    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any\nremaining small-scale errors with the assembly.\n\nAligning reads to find appropriate insert size range...\n  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta\n  bowtie2 -1 /galaxy/server/database/jobs_directory/000/96/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/96/working/fq2.fastq.gz -x 0_insert_size_check.fasta --fast --threads 8 -I 0 -X 5000 -S 0_alignments.sam\nInsert size 1st percentile:  263\nInsert size 99th percentile: 450\n\nPilon polish round 1\n  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 8 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/96/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/96/working/fq2.fastq.gz\n  samtools sort -@ 8 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam\n  samtools index 1_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/96/working/pilon_polish --fix bases --frags 1_paired_alignments.bam\nNo Pilon changes\n\nPilon polish round 2\n  bowtie2-build 2_polish_input.fasta 2_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 8 -I 263 -X 450 -x 2_polish_input.fasta -S 2_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/96/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/96/working/fq2.fastq.gz\n  samtools sort -@ 8 -o 2_paired_alignments.bam -O bam -T temp 2_paired_alignments.sam\n  samtools index 2_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 2_polish_input.fasta --changes --output 2_pilon --outdir /galaxy/server/database/jobs_directory/000/96/working/pilon_polish --fix all --frags 2_paired_alignments.bam\nNo Pilon changes\n\nSaving /galaxy/server/database/jobs_directory/000/96/working/005_polished.gfa\n\n\nRotating completed replicons (2024-04-16 13:11:49)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-04-16 13:11:59)\nSaving /galaxy/server/database/jobs_directory/000/96/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/96/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 minutes", "plugin": "core", "name": "runtime_seconds", "raw_value": "120.0000000"}, {"title": "Job End Time", "value": "2024-04-16 13:11:59", "plugin": "core", "name": "end_epoch", "raw_value": "1713273119.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:09:59", "plugin": "core", "name": "start_epoch", "raw_value": "1713272999.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "unicycler/0.4.8.0-2", "has_data": true, "data": {"tool_id": "unicycler", "tool_version": "0.4.8.0", "test_index": 2, "time_seconds": 135.12882685661316, "inputs": {"paired_unpaired|fastq_input1": {"src": "hdca", "id": "2cc83067a59933fa"}, "paired_unpaired|fastq_input_selector": "paired_collection", "mode": "normal", "min_fasta_length": "100", "linear_seqs": "0", "spades|no_correct": true, "spades|min_kmer_frac": "0.2", "spades|max_kmer_frac": "0.95", "spades|kmer_count": "10", "spades|depth_filter": "0.25", "rotation|no_rotate": false, "rotation|start_gene_id": "90", "rotation|start_gene_cov": "95", "pilon|no_pilon": true, "pilon|min_polish_size": "1000", "graph_clean|min_component_size": "1000", "graph_clean|min_dead_end_size": "1000", "lr_align|scores": "3,-6,-5,-2"}, "job": {"model_class": "Job", "id": "ee3df0607ba52c67", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:14:24.028743", "create_time": "2024-04-16T13:12:26.170067", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-68mrk", "command_line": "ln -s '/galaxy/server/database/objects/7/1/d/dataset_71d4bff0-d918-463b-b5d3-5d7b814b27ce.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/8/5/f/dataset_85f76b86-78a9-49cb-b928-734ad42bfa3f.dat' fq2.fastq && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -1 'fq1.fastq' -2 'fq2.fastq' --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --no_correct --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0' --no_pilon --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": true}", "rotation": "{\"no_rotate\": false, \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": false, \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": true}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "long": null, "paired_unpaired": "{\"__current_case__\": 1, \"fastq_input1\": {\"values\": [{\"id\": 17, \"src\": \"hdca\"}]}, \"fastq_input_selector\": \"paired_collection\"}"}, "inputs": {"paired_unpaired|fastq_input11": {"id": "05dd2cc22105b3e4", "src": "hda", "uuid": "71d4bff0-d918-463b-b5d3-5d7b814b27ce"}, "paired_unpaired|fastq_input12": {"id": "7d2d60ffd30b5a51", "src": "hda", "uuid": "85f76b86-78a9-49cb-b928-734ad42bfa3f"}}, "outputs": {"assembly_graph": {"id": "f8b199757bbe4dcf", "src": "hda", "uuid": "426cd642-33c7-4536-87db-2740fbc5854c"}, "assembly": {"id": "b772a6b14c445684", "src": "hda", "uuid": "84cfa128-9abb-4cbe-b288-bb3626fd7b41"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2024-04-16 13:12:28)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --no_pilon --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/99/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py       3.14.1    good       /usr/local/bin/spades.py  \n  racon                     not used                             \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nChoosing k-mer range for assembly (2024-04-16 13:12:28)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2024-04-16 13:12:28)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 8 --only-assembler -1 /galaxy/server/database/jobs_directory/000/99/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/99/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-6.1.58+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/99/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/99/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 78\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/99/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/99/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 78 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.007     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.007     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.105    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.106    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.108    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.108    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.110    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.145    25M / 28M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.160    25M / 28M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.161    25M / 28M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.161    25M / 28M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.162    25M / 28M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 8 threads. This might take a while.\n  0:00:00.163    25M / 28M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.163    25M / 28M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24997 Gb\n  0:00:00.163    25M / 28M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.881    43M / 56M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.881    43M / 56M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.100    43M / 56M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.100    43M / 56M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.253    43M / 56M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:01.254    43M / 56M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.254    43M / 56M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 128 files using 8 threads. This might take a while.\n  0:00:01.255    43M / 56M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.255    43M / 56M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24991 Gb\n  0:00:01.256    43M / 56M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:02.682     6G / 6G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:02.682     6G / 6G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:02.694   135M / 135M  INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.139   135M / 135M  INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:03.139   135M / 135M  INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:03.447   135M / 135M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:03.475   136M / 136M  INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:03.513   136M / 136M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:03.513   136M / 136M  INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:03.519   136M / 136M  INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:03.520   136M / 136M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:03.521   136M / 136M  INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:03.521   136M / 136M  INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:03.529   136M / 136M  INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:03.530   136M / 136M  INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:03.530   136M / 136M  INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:03.531   136M / 136M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:03.535   136M / 136M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:03.538   136M / 136M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:03.540   136M / 136M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:03.545   136M / 136M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:03.548   136M / 136M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:03.548   136M / 136M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:03.548   136M / 136M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:03.567   137M / 137M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 20768 bytes occupied (4.71344 bits per kmer).\n  0:00:03.567   137M / 137M  INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:03.638   137M / 137M  INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:03.639   137M / 137M  INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:03.646   137M / 137M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:03.646   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:03.646   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:03.647   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:03.647   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:03.729   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:03.934   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:04.422   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:04.983   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:05.954   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:05.955   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:05.956   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:05.956   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:05.956   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:05.956   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:05.957   137M / 137M  INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:05.957   137M / 137M  INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:05.957   137M / 137M  INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:05.957   137M / 137M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:05.957   137M / 137M  INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:05.958   137M / 137M  INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:05.958   137M / 137M  INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:05.958   137M / 137M  INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge remover triggered\n..\n   (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.272    51M / 171M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.273    51M / 171M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.273    51M / 171M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.273    51M / 171M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.273    51M / 171M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.273    51M / 171M  INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:09.273    51M / 171M  INFO    General                 (launcher.cpp              : 439)   Closing gaps in paths\n  0:00:09.274    51M / 171M  INFO    General                 (launcher.cpp              : 467)   Gap closing completed\n  0:00:09.274    51M / 171M  INFO    General                 (launcher.cpp              : 296)   Traversing tandem repeats\n  0:00:09.274    51M / 171M  INFO    General                 (launcher.cpp              : 306)   Traversed 0 loops\n  0:00:09.274    51M / 171M  INFO    General                 (launcher.cpp              : 244)   Finalizing paths\n  0:00:09.274    51M / 171M  INFO    General                 (launcher.cpp              : 246)   Deduplicating paths\n  0:00:09.274    51M / 171M  INFO    General                 (launcher.cpp              : 250)   Paths deduplicated\n  0:00:09.275    51M / 171M  INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.275    51M / 171M  INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.275    51M / 171M  INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.275    51M / 171M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.275    51M / 171M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.276    51M / 171M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.276    51M / 171M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.276    51M / 171M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.276    51M / 171M  INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:09.276    51M / 171M  INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished\n  0:00:09.277    51M / 171M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output\n  0:00:09.277    51M / 171M  INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/before_rr.fasta\n  0:00:09.284    51M / 171M  INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa\n  0:00:09.284    51M / 171M  INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/assembly_graph.fastg\n  0:00:09.290    51M / 171M  INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds\n  0:00:09.290    51M / 171M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/final_contigs.fasta\n  0:00:09.296    51M / 171M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/final_contigs.paths\n  0:00:09.302    51M / 171M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/scaffolds.fasta\n  0:00:09.306    51M / 171M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/scaffolds.paths\n  0:00:09.311    51M / 171M  INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths\n  0:00:09.320    51M / 171M  INFO    General                 (pipeline.cpp              : 259)   SPAdes finished\n  0:00:09.324    51M / 171M  INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 9 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:09.268    56M / 171M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2024-04-16 13:14:04)\nFilter by read depth        (2024-04-16 13:14:04)\nFilter homopolymer loops    (2024-04-16 13:14:04)\nMerge all possible          (2024-04-16 13:14:04)\nNormalise read depths       (2024-04-16 13:14:04)\nRemove zero length segments (2024-04-16 13:14:04)\nSort link order             (2024-04-16 13:14:04)\nGraph cleaning finished     (2024-04-16 13:14:04)\nSaving /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2024-04-16 13:14:04)\nFilter by read depth        (2024-04-16 13:14:04)\nFilter homopolymer loops    (2024-04-16 13:14:04)\nMerge all possible          (2024-04-16 13:14:04)\nNormalise read depths       (2024-04-16 13:14:04)\nRemove zero length segments (2024-04-16 13:14:04)\nSort link order             (2024-04-16 13:14:04)\nGraph cleaning finished     (2024-04-16 13:14:04)\nSaving /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2024-04-16 13:14:04)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/\n\n\nDetermining graph multiplicity (2024-04-16 13:14:05)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/99/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2024-04-16 13:14:05)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/99/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-04-16 13:14:05)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-04-16 13:14:05)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2024-04-16 13:14:05)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/99/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2024-04-16 13:14:05)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-04-16 13:14:05)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/99/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2024-04-16 13:14:05)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-04-16 13:14:15)\nSaving /galaxy/server/database/jobs_directory/000/99/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/99/working/assembly.fasta\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "\nStarting Unicycler (2024-04-16 13:12:28)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --no_pilon --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/99/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py       3.14.1    good       /usr/local/bin/spades.py  \n  racon                     not used                             \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nChoosing k-mer range for assembly (2024-04-16 13:12:28)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2024-04-16 13:12:28)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 8 --only-assembler -1 /galaxy/server/database/jobs_directory/000/99/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/99/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-6.1.58+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/99/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/99/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 78\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/99/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/99/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 78 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.007     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.007     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.105    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.106    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.108    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.108    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.110    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.145    25M / 28M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.160    25M / 28M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.161    25M / 28M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.161    25M / 28M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.162    25M / 28M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 8 threads. This might take a while.\n  0:00:00.163    25M / 28M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.163    25M / 28M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24997 Gb\n  0:00:00.163    25M / 28M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.881    43M / 56M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.881    43M / 56M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.100    43M / 56M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.100    43M / 56M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.253    43M / 56M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:01.254    43M / 56M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.254    43M / 56M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 128 files using 8 threads. This might take a while.\n  0:00:01.255    43M / 56M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:01.255    43M / 56M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 3.24991 Gb\n  0:00:01.256    43M / 56M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 524288\n  0:00:02.682     6G / 6G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:02.682     6G / 6G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:02.694   135M / 135M  INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:03.139   135M / 135M  INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:03.139   135M / 135M  INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:03.447   135M / 135M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:03.475   136M / 136M  INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:03.513   136M / 136M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:03.513   136M / 136M  INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:03.519   136M / 136M  INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:03.520   136M / 136M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:03.521   136M / 136M  INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:03.521   136M / 136M  INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:03.529   136M / 136M  INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:03.530   136M / 136M  INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:03.530   136M / 136M  INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:03.531   136M / 136M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:03.535   136M / 136M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:03.538   136M / 136M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:03.540   136M / 136M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:03.545   136M / 136M  INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:03.548   136M / 136M  INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:03.548   136M / 136M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:03.548   136M / 136M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:03.567   137M / 137M  INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 20768 bytes occupied (4.71344 bits per kmer).\n  0:00:03.567   137M / 137M  INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:03.638   137M / 137M  INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:03.639   137M / 137M  INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:03.646   137M / 137M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:03.646   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:03.646   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:03.647   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:03.647   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:03.729   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:03.934   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:04.422   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:04.983   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:05.954   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:05.955   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:05.956   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:05.956   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:05.956   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:05.956   137M / 137M  INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:05.957   137M / 137M  INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:05.957   137M / 137M  INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:05.957   137M / 137M  INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:05.957   137M / 137M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:05.957   137M / 137M  INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:05.958   137M / 137M  INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:05.958   137M / 137M  INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:05.958   137M / 137M  INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge remover triggered\n..\n   (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.272    51M / 171M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.273    51M / 171M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.273    51M / 171M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.273    51M / 171M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.273    51M / 171M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.273    51M / 171M  INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:09.273    51M / 171M  INFO    General                 (launcher.cpp              : 439)   Closing gaps in paths\n  0:00:09.274    51M / 171M  INFO    General                 (launcher.cpp              : 467)   Gap closing completed\n  0:00:09.274    51M / 171M  INFO    General                 (launcher.cpp              : 296)   Traversing tandem repeats\n  0:00:09.274    51M / 171M  INFO    General                 (launcher.cpp              : 306)   Traversed 0 loops\n  0:00:09.274    51M / 171M  INFO    General                 (launcher.cpp              : 244)   Finalizing paths\n  0:00:09.274    51M / 171M  INFO    General                 (launcher.cpp              : 246)   Deduplicating paths\n  0:00:09.274    51M / 171M  INFO    General                 (launcher.cpp              : 250)   Paths deduplicated\n  0:00:09.275    51M / 171M  INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:09.275    51M / 171M  INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:09.275    51M / 171M  INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:09.275    51M / 171M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:09.275    51M / 171M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:09.276    51M / 171M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:09.276    51M / 171M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:09.276    51M / 171M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:09.276    51M / 171M  INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:09.276    51M / 171M  INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished\n  0:00:09.277    51M / 171M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output\n  0:00:09.277    51M / 171M  INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/before_rr.fasta\n  0:00:09.284    51M / 171M  INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa\n  0:00:09.284    51M / 171M  INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/assembly_graph.fastg\n  0:00:09.290    51M / 171M  INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds\n  0:00:09.290    51M / 171M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/final_contigs.fasta\n  0:00:09.296    51M / 171M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/final_contigs.paths\n  0:00:09.302    51M / 171M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/scaffolds.fasta\n  0:00:09.306    51M / 171M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/scaffolds.paths\n  0:00:09.311    51M / 171M  INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths\n  0:00:09.320    51M / 171M  INFO    General                 (pipeline.cpp              : 259)   SPAdes finished\n  0:00:09.324    51M / 171M  INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 9 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:09.268    56M / 171M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2024-04-16 13:14:04)\nFilter by read depth        (2024-04-16 13:14:04)\nFilter homopolymer loops    (2024-04-16 13:14:04)\nMerge all possible          (2024-04-16 13:14:04)\nNormalise read depths       (2024-04-16 13:14:04)\nRemove zero length segments (2024-04-16 13:14:04)\nSort link order             (2024-04-16 13:14:04)\nGraph cleaning finished     (2024-04-16 13:14:04)\nSaving /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2024-04-16 13:14:04)\nFilter by read depth        (2024-04-16 13:14:04)\nFilter homopolymer loops    (2024-04-16 13:14:04)\nMerge all possible          (2024-04-16 13:14:04)\nNormalise read depths       (2024-04-16 13:14:04)\nRemove zero length segments (2024-04-16 13:14:04)\nSort link order             (2024-04-16 13:14:04)\nGraph cleaning finished     (2024-04-16 13:14:04)\nSaving /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2024-04-16 13:14:04)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/\n\n\nDetermining graph multiplicity (2024-04-16 13:14:05)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/99/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2024-04-16 13:14:05)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/99/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-04-16 13:14:05)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-04-16 13:14:05)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2024-04-16 13:14:05)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/99/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2024-04-16 13:14:05)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-04-16 13:14:05)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/99/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2024-04-16 13:14:05)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-04-16 13:14:15)\nSaving /galaxy/server/database/jobs_directory/000/99/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/99/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "108.0000000"}, {"title": "Job End Time", "value": "2024-04-16 13:14:15", "plugin": "core", "name": "end_epoch", "raw_value": "1713273255.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:12:27", "plugin": "core", "name": "start_epoch", "raw_value": "1713273147.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "unicycler/0.4.8.0-3", "has_data": true, "data": {"tool_id": "unicycler", "tool_version": "0.4.8.0", "test_index": 3, "time_seconds": 27.033421516418457, "inputs": {"paired_unpaired|fastq_input_selector": "none", "long": {"src": "hda", "id": "24f8cf9af9ca7ceb"}, "min_anchor_seg_len": "10", "spades|kmers": "21,23"}, "job": {"model_class": "Job", "id": "595e7f9971905431", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T13:14:51.365188", "create_time": "2024-04-16T13:14:40.519032", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-97wr4", "command_line": "ln -s '/galaxy/server/database/objects/6/c/6/dataset_6c6a3252-b397-40fb-9318-1a93997fde86.dat' 'lr.fasta' && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -l lr.fasta --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --min_anchor_seg_len '10'  --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmers '21,23' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0'  --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": false}", "rotation": "{\"no_rotate\": false, \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"21,23\", \"largest_component\": false, \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": false}", "min_anchor_seg_len": "\"10\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "paired_unpaired": "{\"__current_case__\": 3, \"fastq_input_selector\": \"none\"}"}, "inputs": {"long": {"id": "24f8cf9af9ca7ceb", "src": "hda", "uuid": "6c6a3252-b397-40fb-9318-1a93997fde86"}}, "outputs": {"assembly_graph": {"id": "39a66e3ffbe1538b", "src": "hda", "uuid": "20500138-fe24-4966-a468-1328cb5d1916"}, "assembly": {"id": "ad58cf23d44ffde2", "src": "hda", "uuid": "68183416-df90-4a8a-9db2-61f13532d2be"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2024-04-16 13:14:41)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only long reads, Unicycler will assemble the reads with miniasm and\nthen run repeated polishing rounds using Racon.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/101/working\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py                 not used                             \n  racon           1.4.20    good       /usr/local/bin/racon      \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nLoading reads (2024-04-16 13:14:42)\n\r0 / 40 (0.0%)\r1 / 40 (2.5%) - 412 bp\r2 / 40 (5.0%) - 4,847 bp\r3 / 40 (7.5%) - 8,974 bp\r4 / 40 (10.0%) - 13,249 bp\r5 / 40 (12.5%) - 14,258 bp\r6 / 40 (15.0%) - 14,806 bp\r7 / 40 (17.5%) - 19,262 bp\r8 / 40 (20.0%) - 19,737 bp\r9 / 40 (22.5%) - 20,395 bp\r10 / 40 (25.0%) - 32,024 bp\r11 / 40 (27.5%) - 32,698 bp\r12 / 40 (30.0%) - 34,509 bp\r13 / 40 (32.5%) - 39,018 bp\r14 / 40 (35.0%) - 43,351 bp\r15 / 40 (37.5%) - 44,224 bp\r16 / 40 (40.0%) - 45,978 bp\r17 / 40 (42.5%) - 46,402 bp\r18 / 40 (45.0%) - 61,596 bp\r19 / 40 (47.5%) - 62,279 bp\r20 / 40 (50.0%) - 63,700 bp\r21 / 40 (52.5%) - 66,412 bp\r22 / 40 (55.0%) - 66,845 bp\r23 / 40 (57.5%) - 67,316 bp\r24 / 40 (60.0%) - 69,428 bp\r25 / 40 (62.5%) - 73,964 bp\r26 / 40 (65.0%) - 75,608 bp\r27 / 40 (67.5%) - 80,223 bp\r28 / 40 (70.0%) - 84,810 bp\r29 / 40 (72.5%) - 92,076 bp\r30 / 40 (75.0%) - 92,832 bp\r31 / 40 (77.5%) - 92,939 bp\r32 / 40 (80.0%) - 93,532 bp\r33 / 40 (82.5%) - 96,370 bp\r34 / 40 (85.0%) - 100,656 bp\r35 / 40 (87.5%) - 119,222 bp\r36 / 40 (90.0%) - 123,827 bp\r37 / 40 (92.5%) - 155,106 bp\r38 / 40 (95.0%) - 156,254 bp\r39 / 40 (97.5%) - 157,993 bp\r40 / 40 (100.0%) - 162,406 bp\r40 / 40 (100.0%) - 162,406 bp\n\n\nAssembling contigs and long reads with miniasm (2024-04-16 13:14:42)\nSaving to /galaxy/server/database/jobs_directory/000/101/working/miniasm_assembly/01_assembly_reads.fastq:\n  40 long reads\n\nFinding overlaps with minimap... success\n  120 overlaps\n\nAssembling reads with miniasm... success\n  7 segments, 6 links\n\n    Unicycler removes any links from the string graph which create branches.\nI.e. if any segment has two or more links connected to one end, those links are\nremoved. This will result in a graph with only simple linear paths that is\nsuitable for creating unambiguous bridges.\n\nNo links needed removal\nSaving /galaxy/server/database/jobs_directory/000/101/working/miniasm_assembly/11_branching_paths_removed.gfa\nMerging segments into unitigs:\n\nLinear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-\n\n  1 linear unitig\n  total size = 5,836 bp\nSaving /galaxy/server/database/jobs_directory/000/101/working/miniasm_assembly/12_unitig_graph.gfa\nSaving /galaxy/server/database/jobs_directory/000/101/working/002_unitig_graph.gfa\n\n\nPolishing miniasm assembly with Racon (2024-04-16 13:14:42)\n    Unicycler now uses Racon to polish the miniasm assembly. It does multiple\nrounds of polishing to get the best consensus. Circular unitigs are rotated\nbetween rounds such that all parts (including the ends) are polished well.\n\nSaving to /galaxy/server/database/jobs_directory/000/101/working/miniasm_assembly/racon_polish/polishing_reads.fastq:\n  40 long reads\n\nPolish       Assembly          Mapping\nround            size          quality\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t210\t4010\t+\t1\t5836\t1061\t4603\t1147\t3800\t255\tcm:i:200\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t5836\t5221\t5833\t179\t612\t255\tcm:i:27\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t5836\t2376\t5833\t3457\t3457\t255\tcm:i:1153\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2525\t-\t1\t5836\t30\t2314\t787\t2399\t255\tcm:i:144\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t280\t4284\t-\t1\t5836\t4\t3936\t1481\t4004\t255\tcm:i:246\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4286\t-\t1\t5836\t4215\t5833\t546\t1618\t255\tcm:i:88\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t170\t4027\t+\t1\t5836\t1680\t5833\t1032\t4153\t255\tcm:i:174\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4082\t+\t1\t5836\t4\t1602\t220\t1598\t255\tcm:i:30\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1334\t4566\t-\t1\t5836\t2699\t5786\t1281\t3232\t255\tcm:i:243\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t5836\t50\t2663\t772\t2680\t255\tcm:i:129\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t5836\t2657\t5833\t1469\t3386\t255\tcm:i:268\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2786\t-\t1\t5836\t30\t2636\t905\t2689\t255\tcm:i:157\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t143\t4271\t-\t1\t5836\t338\t4254\t1834\t4128\t255\tcm:i:470\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3092\t4330\t-\t1\t5836\t4503\t5798\t430\t1295\t255\tcm:i:77\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t544\t4408\t-\t1\t5836\t69\t3927\t1208\t3864\t255\tcm:i:237\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3008\t4472\t-\t1\t5836\t4215\t5748\t351\t1533\t255\tcm:i:53\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t5836\t2909\t3222\t131\t313\t255\tcm:i:22\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t335\t4397\t+\t1\t5836\t1321\t5257\t1351\t4062\t255\tcm:i:280\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4349\t+\t1\t5836\t23\t961\t238\t938\t255\tcm:i:40\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t537\t+\t1\t5836\t5334\t5798\t154\t464\t255\tcm:i:26\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t111\t4359\t-\t1\t5836\t1673\t5798\t2062\t4248\t255\tcm:i:487\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t109\t1619\t-\t1\t5836\t30\t1525\t472\t1510\t255\tcm:i:68\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t5836\t1733\t5833\t1303\t4100\t255\tcm:i:230\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t5836\t4\t1690\t311\t1712\t255\tcm:i:43\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4205\t+\t1\t5836\t23\t3939\t1039\t3916\t255\tcm:i:166\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t296\t1782\t+\t1\t5836\t4242\t5798\t367\t1556\t255\tcm:i:63\nbegin           5,836             5.33\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6290\t1009\t5054\t2431\t4045\t255\tcm:i:529\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6290\t5670\t6287\t297\t617\t255\tcm:i:63\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6290\t4\t404\t122\t400\t255\tcm:i:19\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6290\t2540\t6287\t2249\t3747\t255\tcm:i:527\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6290\t51\t2474\t1276\t2423\t255\tcm:i:245\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6290\t4\t4316\t2322\t4312\t255\tcm:i:486\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6290\t4354\t6287\t943\t1933\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t116\t4027\t+\t1\t6290\t1774\t6287\t2145\t4513\t255\tcm:i:426\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6290\t4\t1741\t421\t1737\t255\tcm:i:61\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6290\t2854\t6226\t2257\t3372\t255\tcm:i:501\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6290\t51\t2831\t1459\t2780\t255\tcm:i:289\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6290\t2825\t6287\t2268\t3462\t255\tcm:i:513\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2745\t-\t1\t6290\t74\t2805\t1501\t2731\t255\tcm:i:289\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6290\t354\t4699\t2022\t4345\t255\tcm:i:377\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6290\t4984\t6271\t614\t1287\t255\tcm:i:117\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6290\t72\t4534\t1921\t4462\t255\tcm:i:337\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6290\t4597\t6206\t580\t1609\t255\tcm:i:103\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6290\t3083\t3386\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6290\t1126\t5708\t2368\t4582\t255\tcm:i:487\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4392\t+\t1\t6290\t23\t1039\t362\t1016\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t539\t+\t1\t6290\t5785\t6254\t217\t469\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6290\t1806\t6258\t2777\t4452\t255\tcm:i:600\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6290\t74\t1603\t761\t1529\t255\tcm:i:150\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t795\t+\t1\t6290\t5209\t5912\t149\t703\t255\tcm:i:24\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6290\t585\t1307\t155\t722\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t6290\t1886\t6287\t2070\t4401\t255\tcm:i:456\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6290\t4\t1838\t656\t1834\t255\tcm:i:109\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6290\t2060\t2358\t156\t298\t255\tcm:i:35\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6290\t23\t4436\t2106\t4413\t255\tcm:i:421\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6290\t4488\t6273\t744\t1785\t255\tcm:i:131\n1               6,290             7.82\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6242\t1016\t5009\t2460\t3993\t255\tcm:i:530\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6242\t5626\t6239\t283\t613\t255\tcm:i:61\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6242\t4\t408\t117\t404\t255\tcm:i:18\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6242\t2535\t6239\t2234\t3704\t255\tcm:i:514\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6242\t51\t2469\t1387\t2418\t255\tcm:i:271\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6242\t4\t4276\t2380\t4272\t255\tcm:i:494\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6242\t4314\t6239\t955\t1925\t255\tcm:i:196\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6242\t1759\t6239\t2194\t4480\t255\tcm:i:440\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6242\t4\t1735\t450\t1731\t255\tcm:i:67\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6242\t2848\t6178\t2284\t3330\t255\tcm:i:509\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6242\t51\t2825\t1504\t2774\t255\tcm:i:295\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6242\t2819\t6239\t2235\t3420\t255\tcm:i:510\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t109\t2745\t-\t1\t6242\t74\t2787\t1517\t2713\t255\tcm:i:304\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6242\t358\t4659\t2051\t4301\t255\tcm:i:391\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6242\t4939\t6223\t618\t1284\t255\tcm:i:114\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6242\t72\t4493\t1941\t4421\t255\tcm:i:345\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6242\t4556\t6158\t579\t1602\t255\tcm:i:105\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6242\t3077\t3380\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6242\t1133\t5664\t2405\t4531\t255\tcm:i:507\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6242\t23\t1051\t353\t1028\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6242\t5759\t6206\t204\t447\t255\tcm:i:40\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6242\t1799\t6210\t2749\t4411\t255\tcm:i:591\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6242\t74\t1601\t795\t1527\t255\tcm:i:165\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6242\t5166\t5916\t224\t750\t255\tcm:i:35\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t160\t847\t+\t1\t6242\t602\t1310\t144\t708\t255\tcm:i:16\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6242\t1908\t6239\t2061\t4331\t255\tcm:i:454\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6242\t4\t1831\t667\t1827\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6242\t2053\t2352\t157\t299\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6242\t23\t4395\t2130\t4372\t255\tcm:i:425\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6242\t4447\t6225\t762\t1778\t255\tcm:i:138\n2               6,242             8.02\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6265\t1028\t5025\t2436\t3997\t255\tcm:i:527\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6265\t5642\t6262\t281\t620\t255\tcm:i:59\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6265\t4\t408\t105\t404\t255\tcm:i:17\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6265\t2544\t6262\t2228\t3718\t255\tcm:i:507\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6265\t51\t2478\t1353\t2427\t255\tcm:i:260\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6265\t4\t4293\t2377\t4289\t255\tcm:i:492\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6265\t4331\t6262\t967\t1931\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6265\t1772\t6262\t2190\t4490\t255\tcm:i:436\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6265\t4\t1748\t448\t1744\t255\tcm:i:62\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6265\t2857\t6201\t2270\t3344\t255\tcm:i:503\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6265\t51\t2834\t1463\t2783\t255\tcm:i:284\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6265\t2828\t6262\t2251\t3434\t255\tcm:i:515\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t102\t2745\t-\t1\t6265\t74\t2804\t1511\t2730\t255\tcm:i:305\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6265\t358\t4676\t2063\t4318\t255\tcm:i:392\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4328\t-\t1\t6265\t4930\t6246\t623\t1316\t255\tcm:i:113\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6265\t72\t4510\t1987\t4438\t255\tcm:i:350\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6265\t4573\t6181\t569\t1608\t255\tcm:i:102\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6265\t3089\t3392\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6265\t1145\t5680\t2423\t4535\t255\tcm:i:509\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6265\t23\t1063\t337\t1040\t255\tcm:i:56\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6265\t5779\t6229\t223\t450\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6265\t1812\t6233\t2769\t4421\t255\tcm:i:601\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6265\t74\t1615\t764\t1541\t255\tcm:i:156\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6265\t5182\t5936\t236\t754\t255\tcm:i:36\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6265\t589\t1322\t155\t733\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6265\t1921\t6262\t2062\t4341\t255\tcm:i:449\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6265\t4\t1844\t660\t1840\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6265\t2063\t2361\t157\t298\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6265\t23\t4412\t2182\t4389\t255\tcm:i:436\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6265\t4464\t6248\t787\t1784\t255\tcm:i:141\n3               6,265             8.04\n\nBest polish: /galaxy/server/database/jobs_directory/000/101/working/miniasm_assembly/racon_polish/016_rotated.fasta\nSaving /galaxy/server/database/jobs_directory/000/101/working/miniasm_assembly/13_racon_polished.gfa\nSaving /galaxy/server/database/jobs_directory/000/101/working/003_racon_polished.gfa\n\n\nAssembly complete (2024-04-16 13:14:42)\nSaving /galaxy/server/database/jobs_directory/000/101/working/assembly.gfa\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "\nStarting Unicycler (2024-04-16 13:14:41)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only long reads, Unicycler will assemble the reads with miniasm and\nthen run repeated polishing rounds using Racon.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/101/working\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py                 not used                             \n  racon           1.4.20    good       /usr/local/bin/racon      \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nLoading reads (2024-04-16 13:14:42)\n\r0 / 40 (0.0%)\r1 / 40 (2.5%) - 412 bp\r2 / 40 (5.0%) - 4,847 bp\r3 / 40 (7.5%) - 8,974 bp\r4 / 40 (10.0%) - 13,249 bp\r5 / 40 (12.5%) - 14,258 bp\r6 / 40 (15.0%) - 14,806 bp\r7 / 40 (17.5%) - 19,262 bp\r8 / 40 (20.0%) - 19,737 bp\r9 / 40 (22.5%) - 20,395 bp\r10 / 40 (25.0%) - 32,024 bp\r11 / 40 (27.5%) - 32,698 bp\r12 / 40 (30.0%) - 34,509 bp\r13 / 40 (32.5%) - 39,018 bp\r14 / 40 (35.0%) - 43,351 bp\r15 / 40 (37.5%) - 44,224 bp\r16 / 40 (40.0%) - 45,978 bp\r17 / 40 (42.5%) - 46,402 bp\r18 / 40 (45.0%) - 61,596 bp\r19 / 40 (47.5%) - 62,279 bp\r20 / 40 (50.0%) - 63,700 bp\r21 / 40 (52.5%) - 66,412 bp\r22 / 40 (55.0%) - 66,845 bp\r23 / 40 (57.5%) - 67,316 bp\r24 / 40 (60.0%) - 69,428 bp\r25 / 40 (62.5%) - 73,964 bp\r26 / 40 (65.0%) - 75,608 bp\r27 / 40 (67.5%) - 80,223 bp\r28 / 40 (70.0%) - 84,810 bp\r29 / 40 (72.5%) - 92,076 bp\r30 / 40 (75.0%) - 92,832 bp\r31 / 40 (77.5%) - 92,939 bp\r32 / 40 (80.0%) - 93,532 bp\r33 / 40 (82.5%) - 96,370 bp\r34 / 40 (85.0%) - 100,656 bp\r35 / 40 (87.5%) - 119,222 bp\r36 / 40 (90.0%) - 123,827 bp\r37 / 40 (92.5%) - 155,106 bp\r38 / 40 (95.0%) - 156,254 bp\r39 / 40 (97.5%) - 157,993 bp\r40 / 40 (100.0%) - 162,406 bp\r40 / 40 (100.0%) - 162,406 bp\n\n\nAssembling contigs and long reads with miniasm (2024-04-16 13:14:42)\nSaving to /galaxy/server/database/jobs_directory/000/101/working/miniasm_assembly/01_assembly_reads.fastq:\n  40 long reads\n\nFinding overlaps with minimap... success\n  120 overlaps\n\nAssembling reads with miniasm... success\n  7 segments, 6 links\n\n    Unicycler removes any links from the string graph which create branches.\nI.e. if any segment has two or more links connected to one end, those links are\nremoved. This will result in a graph with only simple linear paths that is\nsuitable for creating unambiguous bridges.\n\nNo links needed removal\nSaving /galaxy/server/database/jobs_directory/000/101/working/miniasm_assembly/11_branching_paths_removed.gfa\nMerging segments into unitigs:\n\nLinear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-\n\n  1 linear unitig\n  total size = 5,836 bp\nSaving /galaxy/server/database/jobs_directory/000/101/working/miniasm_assembly/12_unitig_graph.gfa\nSaving /galaxy/server/database/jobs_directory/000/101/working/002_unitig_graph.gfa\n\n\nPolishing miniasm assembly with Racon (2024-04-16 13:14:42)\n    Unicycler now uses Racon to polish the miniasm assembly. It does multiple\nrounds of polishing to get the best consensus. Circular unitigs are rotated\nbetween rounds such that all parts (including the ends) are polished well.\n\nSaving to /galaxy/server/database/jobs_directory/000/101/working/miniasm_assembly/racon_polish/polishing_reads.fastq:\n  40 long reads\n\nPolish       Assembly          Mapping\nround            size          quality\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t210\t4010\t+\t1\t5836\t1061\t4603\t1147\t3800\t255\tcm:i:200\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t5836\t5221\t5833\t179\t612\t255\tcm:i:27\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t5836\t2376\t5833\t3457\t3457\t255\tcm:i:1153\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2525\t-\t1\t5836\t30\t2314\t787\t2399\t255\tcm:i:144\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t280\t4284\t-\t1\t5836\t4\t3936\t1481\t4004\t255\tcm:i:246\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4286\t-\t1\t5836\t4215\t5833\t546\t1618\t255\tcm:i:88\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t170\t4027\t+\t1\t5836\t1680\t5833\t1032\t4153\t255\tcm:i:174\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4082\t+\t1\t5836\t4\t1602\t220\t1598\t255\tcm:i:30\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1334\t4566\t-\t1\t5836\t2699\t5786\t1281\t3232\t255\tcm:i:243\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t5836\t50\t2663\t772\t2680\t255\tcm:i:129\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t5836\t2657\t5833\t1469\t3386\t255\tcm:i:268\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2786\t-\t1\t5836\t30\t2636\t905\t2689\t255\tcm:i:157\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t143\t4271\t-\t1\t5836\t338\t4254\t1834\t4128\t255\tcm:i:470\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3092\t4330\t-\t1\t5836\t4503\t5798\t430\t1295\t255\tcm:i:77\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t544\t4408\t-\t1\t5836\t69\t3927\t1208\t3864\t255\tcm:i:237\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3008\t4472\t-\t1\t5836\t4215\t5748\t351\t1533\t255\tcm:i:53\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t5836\t2909\t3222\t131\t313\t255\tcm:i:22\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t335\t4397\t+\t1\t5836\t1321\t5257\t1351\t4062\t255\tcm:i:280\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4349\t+\t1\t5836\t23\t961\t238\t938\t255\tcm:i:40\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t537\t+\t1\t5836\t5334\t5798\t154\t464\t255\tcm:i:26\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t111\t4359\t-\t1\t5836\t1673\t5798\t2062\t4248\t255\tcm:i:487\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t109\t1619\t-\t1\t5836\t30\t1525\t472\t1510\t255\tcm:i:68\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t5836\t1733\t5833\t1303\t4100\t255\tcm:i:230\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t5836\t4\t1690\t311\t1712\t255\tcm:i:43\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4205\t+\t1\t5836\t23\t3939\t1039\t3916\t255\tcm:i:166\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t296\t1782\t+\t1\t5836\t4242\t5798\t367\t1556\t255\tcm:i:63\nbegin           5,836             5.33\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6290\t1009\t5054\t2431\t4045\t255\tcm:i:529\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6290\t5670\t6287\t297\t617\t255\tcm:i:63\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6290\t4\t404\t122\t400\t255\tcm:i:19\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6290\t2540\t6287\t2249\t3747\t255\tcm:i:527\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6290\t51\t2474\t1276\t2423\t255\tcm:i:245\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6290\t4\t4316\t2322\t4312\t255\tcm:i:486\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6290\t4354\t6287\t943\t1933\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t116\t4027\t+\t1\t6290\t1774\t6287\t2145\t4513\t255\tcm:i:426\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6290\t4\t1741\t421\t1737\t255\tcm:i:61\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6290\t2854\t6226\t2257\t3372\t255\tcm:i:501\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6290\t51\t2831\t1459\t2780\t255\tcm:i:289\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6290\t2825\t6287\t2268\t3462\t255\tcm:i:513\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2745\t-\t1\t6290\t74\t2805\t1501\t2731\t255\tcm:i:289\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6290\t354\t4699\t2022\t4345\t255\tcm:i:377\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6290\t4984\t6271\t614\t1287\t255\tcm:i:117\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6290\t72\t4534\t1921\t4462\t255\tcm:i:337\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6290\t4597\t6206\t580\t1609\t255\tcm:i:103\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6290\t3083\t3386\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6290\t1126\t5708\t2368\t4582\t255\tcm:i:487\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4392\t+\t1\t6290\t23\t1039\t362\t1016\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t539\t+\t1\t6290\t5785\t6254\t217\t469\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6290\t1806\t6258\t2777\t4452\t255\tcm:i:600\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6290\t74\t1603\t761\t1529\t255\tcm:i:150\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t795\t+\t1\t6290\t5209\t5912\t149\t703\t255\tcm:i:24\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6290\t585\t1307\t155\t722\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t6290\t1886\t6287\t2070\t4401\t255\tcm:i:456\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6290\t4\t1838\t656\t1834\t255\tcm:i:109\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6290\t2060\t2358\t156\t298\t255\tcm:i:35\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6290\t23\t4436\t2106\t4413\t255\tcm:i:421\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6290\t4488\t6273\t744\t1785\t255\tcm:i:131\n1               6,290             7.82\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6242\t1016\t5009\t2460\t3993\t255\tcm:i:530\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6242\t5626\t6239\t283\t613\t255\tcm:i:61\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6242\t4\t408\t117\t404\t255\tcm:i:18\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6242\t2535\t6239\t2234\t3704\t255\tcm:i:514\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6242\t51\t2469\t1387\t2418\t255\tcm:i:271\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6242\t4\t4276\t2380\t4272\t255\tcm:i:494\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6242\t4314\t6239\t955\t1925\t255\tcm:i:196\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6242\t1759\t6239\t2194\t4480\t255\tcm:i:440\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6242\t4\t1735\t450\t1731\t255\tcm:i:67\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6242\t2848\t6178\t2284\t3330\t255\tcm:i:509\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6242\t51\t2825\t1504\t2774\t255\tcm:i:295\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6242\t2819\t6239\t2235\t3420\t255\tcm:i:510\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t109\t2745\t-\t1\t6242\t74\t2787\t1517\t2713\t255\tcm:i:304\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6242\t358\t4659\t2051\t4301\t255\tcm:i:391\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6242\t4939\t6223\t618\t1284\t255\tcm:i:114\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6242\t72\t4493\t1941\t4421\t255\tcm:i:345\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6242\t4556\t6158\t579\t1602\t255\tcm:i:105\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6242\t3077\t3380\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6242\t1133\t5664\t2405\t4531\t255\tcm:i:507\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6242\t23\t1051\t353\t1028\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6242\t5759\t6206\t204\t447\t255\tcm:i:40\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6242\t1799\t6210\t2749\t4411\t255\tcm:i:591\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6242\t74\t1601\t795\t1527\t255\tcm:i:165\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6242\t5166\t5916\t224\t750\t255\tcm:i:35\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t160\t847\t+\t1\t6242\t602\t1310\t144\t708\t255\tcm:i:16\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6242\t1908\t6239\t2061\t4331\t255\tcm:i:454\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6242\t4\t1831\t667\t1827\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6242\t2053\t2352\t157\t299\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6242\t23\t4395\t2130\t4372\t255\tcm:i:425\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6242\t4447\t6225\t762\t1778\t255\tcm:i:138\n2               6,242             8.02\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6265\t1028\t5025\t2436\t3997\t255\tcm:i:527\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6265\t5642\t6262\t281\t620\t255\tcm:i:59\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6265\t4\t408\t105\t404\t255\tcm:i:17\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6265\t2544\t6262\t2228\t3718\t255\tcm:i:507\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6265\t51\t2478\t1353\t2427\t255\tcm:i:260\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6265\t4\t4293\t2377\t4289\t255\tcm:i:492\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6265\t4331\t6262\t967\t1931\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6265\t1772\t6262\t2190\t4490\t255\tcm:i:436\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6265\t4\t1748\t448\t1744\t255\tcm:i:62\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6265\t2857\t6201\t2270\t3344\t255\tcm:i:503\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6265\t51\t2834\t1463\t2783\t255\tcm:i:284\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6265\t2828\t6262\t2251\t3434\t255\tcm:i:515\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t102\t2745\t-\t1\t6265\t74\t2804\t1511\t2730\t255\tcm:i:305\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6265\t358\t4676\t2063\t4318\t255\tcm:i:392\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4328\t-\t1\t6265\t4930\t6246\t623\t1316\t255\tcm:i:113\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6265\t72\t4510\t1987\t4438\t255\tcm:i:350\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6265\t4573\t6181\t569\t1608\t255\tcm:i:102\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6265\t3089\t3392\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6265\t1145\t5680\t2423\t4535\t255\tcm:i:509\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6265\t23\t1063\t337\t1040\t255\tcm:i:56\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6265\t5779\t6229\t223\t450\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6265\t1812\t6233\t2769\t4421\t255\tcm:i:601\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6265\t74\t1615\t764\t1541\t255\tcm:i:156\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6265\t5182\t5936\t236\t754\t255\tcm:i:36\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6265\t589\t1322\t155\t733\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6265\t1921\t6262\t2062\t4341\t255\tcm:i:449\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6265\t4\t1844\t660\t1840\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6265\t2063\t2361\t157\t298\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6265\t23\t4412\t2182\t4389\t255\tcm:i:436\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6265\t4464\t6248\t787\t1784\t255\tcm:i:141\n3               6,265             8.04\n\nBest polish: /galaxy/server/database/jobs_directory/000/101/working/miniasm_assembly/racon_polish/016_rotated.fasta\nSaving /galaxy/server/database/jobs_directory/000/101/working/miniasm_assembly/13_racon_polished.gfa\nSaving /galaxy/server/database/jobs_directory/000/101/working/003_racon_polished.gfa\n\n\nAssembly complete (2024-04-16 13:14:42)\nSaving /galaxy/server/database/jobs_directory/000/101/working/assembly.gfa\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-04-16 13:14:42", "plugin": "core", "name": "end_epoch", "raw_value": "1713273282.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 13:14:41", "plugin": "core", "name": "start_epoch", "raw_value": "1713273281.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "vcfgenotypes/1.0.0_rc3+galaxy0-0", "has_data": true, "data": {"tool_id": "vcfgenotypes", "tool_version": "1.0.0_rc3+galaxy0", "test_index": 0, "time_seconds": 30.639923810958862, "inputs": {"vcf_input": {"src": "hda", "id": "00d71e9be77f7d59"}}, "job": {"model_class": "Job", "id": "c63ad3981653a13f", "state": "ok", "exit_code": 0, "update_time": "2024-04-16T12:56:22.498928", "create_time": "2024-04-16T12:56:07.722851", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/vcfgenotypes/vcfgenotypes/1.0.0_rc3+galaxy0", "history_id": "92339b0b40a5ec99", "external_id": "gxy-ltqb6", "command_line": "vcfgenotypes '/galaxy/server/database/objects/b/5/b/dataset_b5b784d2-c20d-4413-b9b5-97b05d6fa2db.dat' > '/galaxy/server/database/objects/1/d/1/dataset_1d153cf7-d205-48cc-8ee1-ffbf343d66c4.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"vcf_input": {"id": "00d71e9be77f7d59", "src": "hda", "uuid": "b5b784d2-c20d-4413-b9b5-97b05d6fa2db"}}, "outputs": {"out_file1": {"id": "47a2a1661f117bc6", "src": "hda", "uuid": "1d153cf7-d205-48cc-8ee1-ffbf343d66c4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-04-16 12:56:13", "plugin": "core", "name": "end_epoch", "raw_value": "1713272173.0000000"}, {"title": "Job Start Time", "value": "2024-04-16 12:56:13", "plugin": "core", "name": "start_epoch", "raw_value": "1713272173.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}], "galaxy_url": "http://35.229.56.209:8000/galaxy/"}