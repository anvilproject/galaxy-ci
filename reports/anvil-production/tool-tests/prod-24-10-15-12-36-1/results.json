{"version": "0.1", "suitename": "Galaxy Tool Tests", "results": {"total": 80, "errors": 10, "failures": 5, "skips": 2}, "tests": [{"id": "bamtools/2.5.2+galaxy2-0", "has_data": true, "data": {"tool_id": "bamtools", "tool_version": "2.5.2+galaxy2", "test_index": 0, "time_seconds": 34.22461819648743, "inputs": {"input_bams": {"src": "hda", "id": "d3191fdf8fd859e9"}, "analysis_type|format_type|reference_source|ref_file": {"src": "hda", "id": "34e8a671239dff47"}, "analysis_type|format_type|reference_source|reference_source_selector": "history", "analysis_type|format_type|mapqual": true, "analysis_type|format_type|format_type_selector": "pileup", "analysis_type|analysis_type_selector": "convert"}, "job": {"model_class": "Job", "id": "8e13b663e4913c23", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:05:34.954716", "create_time": "2024-10-15T13:05:20.534116", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/2.5.2+galaxy2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-chr6j", "command_line": "ln -s '/galaxy/server/database/objects/7/b/9/dataset_7b9fc8ef-07e8-4e2d-9a79-06ce8893f510.dat' localbam.bam && ln -s '/galaxy/server/database/objects/_metadata_files/2/3/8/metadata_23874635-8a5e-41d8-979e-5595db28697b.dat' localbam.bam.bai && ln -s '/galaxy/server/database/objects/8/8/c/dataset_88cd8af7-3631-4bd3-a76a-7561de132066.dat' 'localref.fa' && samtools faidx 'localref.fa' 2>&1 || echo 'Error running samtools faidx for bamtools convert' >&2 && bamtools convert -format pileup -mapqual -fasta 'localref.fa' -out '/galaxy/server/database/objects/2/2/8/dataset_228abe7b-8b40-4b06-a2fe-0623f72edb10.dat' -in localbam.bam", "traceback": null, "params": {"analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"convert\", \"format_type\": {\"__current_case__\": 5, \"format_type_selector\": \"pileup\", \"mapqual\": true, \"reference_source\": {\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 85, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bam\""}, "inputs": {"analysis_type|format_type|reference_source|ref_file": {"id": "34e8a671239dff47", "src": "hda", "uuid": "88cd8af7-3631-4bd3-a76a-7561de132066"}, "input_bams": {"id": "d3191fdf8fd859e9", "src": "hda", "uuid": "7b9fc8ef-07e8-4e2d-9a79-06ce8893f510"}}, "outputs": {"out_file1": {"id": "ffdfad3775870e8e", "src": "hda", "uuid": "228abe7b-8b40-4b06-a2fe-0623f72edb10"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Pileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\n", "job_stdout": "", "job_stderr": "", "stderr": "Pileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:05:25", "plugin": "core", "name": "start_epoch", "raw_value": "1728997525.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:05:25", "plugin": "core", "name": "end_epoch", "raw_value": "1728997525.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "bamtools/2.5.2+galaxy2-1", "has_data": true, "data": {"tool_id": "bamtools", "tool_version": "2.5.2+galaxy2", "test_index": 1, "time_seconds": 30.503968954086304, "inputs": {"input_bams": {"src": "hda", "id": "ca8ac93e6a6d1f3d"}, "analysis_type|analysis_type_selector": "count"}, "job": {"model_class": "Job", "id": "3031db389d08359d", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:06:05.525923", "create_time": "2024-10-15T13:05:53.644581", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/2.5.2+galaxy2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-bntnn", "command_line": "ln -s '/galaxy/server/database/objects/9/1/e/dataset_91ebcbd8-568b-40bc-947b-4baebe66ea5a.dat' localbam.bam && ln -s '/galaxy/server/database/objects/_metadata_files/a/2/b/metadata_a2b6a40c-6587-4316-b077-e1f72c025b3a.dat' localbam.bam.bai && bamtools count > '/galaxy/server/database/objects/c/7/9/dataset_c799cd8b-b8de-4e53-90a4-d070bbd18811.dat' -in localbam.bam", "traceback": null, "params": {"analysis_type": "{\"__current_case__\": 1, \"analysis_type_selector\": \"count\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"bam\""}, "inputs": {"input_bams": {"id": "ca8ac93e6a6d1f3d", "src": "hda", "uuid": "91ebcbd8-568b-40bc-947b-4baebe66ea5a"}}, "outputs": {"out_file1": {"id": "65867a4db335dae6", "src": "hda", "uuid": "c799cd8b-b8de-4e53-90a4-d070bbd18811"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-10-15 13:05:55", "plugin": "core", "name": "end_epoch", "raw_value": "1728997555.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:05:55", "plugin": "core", "name": "start_epoch", "raw_value": "1728997555.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bamtools/2.5.2+galaxy2-2", "has_data": true, "data": {"tool_id": "bamtools", "tool_version": "2.5.2+galaxy2", "test_index": 2, "time_seconds": 29.17440104484558, "inputs": {"input_bams": {"src": "hda", "id": "515bd1b5ae42b147"}, "analysis_type|analysis_type_selector": "coverage"}, "job": {"model_class": "Job", "id": "479654b97e474ff3", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:06:34.801900", "create_time": "2024-10-15T13:06:23.906838", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/2.5.2+galaxy2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-tqxpw", "command_line": "ln -s '/galaxy/server/database/objects/5/0/1/dataset_501df53e-946f-4032-a36f-48d9da7f518b.dat' localbam.bam && ln -s '/galaxy/server/database/objects/_metadata_files/8/1/1/metadata_8111c8fa-6760-47bc-943d-09b767794440.dat' localbam.bam.bai && bamtools coverage -out '/galaxy/server/database/objects/6/a/d/dataset_6ad64b02-875b-41dc-aba1-560f8b8d1bcb.dat' -in localbam.bam", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 2, \"analysis_type_selector\": \"coverage\"}"}, "inputs": {"input_bams": {"id": "515bd1b5ae42b147", "src": "hda", "uuid": "501df53e-946f-4032-a36f-48d9da7f518b"}}, "outputs": {"out_file1": {"id": "53ad062de4d1e1b2", "src": "hda", "uuid": "6ad64b02-875b-41dc-aba1-560f8b8d1bcb"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Pileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\n", "job_stdout": "", "job_stderr": "", "stderr": "Pileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-10-15 13:06:25", "plugin": "core", "name": "end_epoch", "raw_value": "1728997585.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:06:25", "plugin": "core", "name": "start_epoch", "raw_value": "1728997585.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bamtools/2.5.2+galaxy2-3", "has_data": true, "data": {"tool_id": "bamtools", "tool_version": "2.5.2+galaxy2", "test_index": 3, "time_seconds": 30.489988088607788, "inputs": {"input_bams": {"src": "hda", "id": "e95dbc110c240ee2"}, "analysis_type|analysis_type_selector": "header"}, "job": {"model_class": "Job", "id": "ca12cdaed4ddc787", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:07:05.200241", "create_time": "2024-10-15T13:06:53.701003", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/2.5.2+galaxy2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-ztck7", "command_line": "ln -s '/galaxy/server/database/objects/d/f/6/dataset_df6dabce-48b5-4672-9925-afa10913f70f.dat' localbam.bam && ln -s '/galaxy/server/database/objects/_metadata_files/3/7/5/metadata_375ccd13-df84-4a5e-aac1-881c30d7c520.dat' localbam.bam.bai && bamtools header > '/galaxy/server/database/objects/5/6/d/dataset_56ddc435-2ed3-4a2d-9a96-50718faa4af7.dat' -in localbam.bam", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 3, \"analysis_type_selector\": \"header\"}"}, "inputs": {"input_bams": {"id": "e95dbc110c240ee2", "src": "hda", "uuid": "df6dabce-48b5-4672-9925-afa10913f70f"}}, "outputs": {"out_file1": {"id": "90a09a7da5776910", "src": "hda", "uuid": "56ddc435-2ed3-4a2d-9a96-50718faa4af7"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-10-15 13:06:55", "plugin": "core", "name": "end_epoch", "raw_value": "1728997615.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:06:55", "plugin": "core", "name": "start_epoch", "raw_value": "1728997615.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_gtcheck/1.15.1+galaxy4-0", "has_data": true, "data": {"tool_id": "bcftools_gtcheck", "tool_version": "1.15.1+galaxy4", "test_index": 0, "time_seconds": 34.80790066719055, "inputs": {"input_file": {"src": "hda", "id": "ab24ae20d380fa4a"}}, "job": {"model_class": "Job", "id": "a63e8a155b947e05", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:08:46.635696", "create_time": "2024-10-15T13:08:29.707396", "galaxy_version": "23.1", "command_version": "Version: 1.15.1 (using htslib 1.15.1)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_gtcheck/bcftools_gtcheck/1.15.1+galaxy4", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-5t7bc", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/8/1/d/dataset_81d1e86a-46a0-410e-9e71-17f245dba2cd.dat' > input.vcf.gz && bcftools index input.vcf.gz &&            bcftools gtcheck                        input.vcf.gz  > '/galaxy/server/database/objects/6/0/e/dataset_60e99464-8bf0-4472-b0ba-ca919841f5e7.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "sec_default": "{\"all_sites\": false, \"genotypes\": null, \"homs_only\": false, \"plot\": null, \"query_sample\": null, \"target_sample\": null}", "sec_restrict": "{\"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"regions_overlap\": null, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}, \"targets_overlap\": null}"}, "inputs": {"input_file": {"id": "ab24ae20d380fa4a", "src": "hda", "uuid": "81d1e86a-46a0-410e-9e71-17f245dba2cd"}}, "outputs": {"output_file": {"id": "69c77aeac09e52a0", "src": "hda", "uuid": "60e99464-8bf0-4472-b0ba-ca919841f5e7"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "INFO: skipping 11:2343543, monoallelic site. (This is printed only once.)\nINFO:\tTime required to process one record .. 0.000005 seconds\nINFO: skipping 20:271225, not a biallelic site, run `bcftools norm -m -` first. (This is printed only once.)\nINFO: skipping Y:8657215, only diploid FORMAT/PL fields supported. (This is printed only once.)\n", "job_stdout": "", "job_stderr": "", "stderr": "INFO: skipping 11:2343543, monoallelic site. (This is printed only once.)\nINFO:\tTime required to process one record .. 0.000005 seconds\nINFO: skipping 20:271225, not a biallelic site, run `bcftools norm -m -` first. (This is printed only once.)\nINFO: skipping Y:8657215, only diploid FORMAT/PL fields supported. (This is printed only once.)\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-10-15 13:08:36", "plugin": "core", "name": "end_epoch", "raw_value": "1728997716.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:08:36", "plugin": "core", "name": "start_epoch", "raw_value": "1728997716.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_plugin_tag2tag/1.15.1+galaxy4-0", "has_data": true, "data": {"tool_id": "bcftools_plugin_tag2tag", "tool_version": "1.15.1+galaxy4", "test_index": 0, "time_seconds": 28.310686349868774, "inputs": {"input_file": {"src": "hda", "id": "95d169d8cb14bc71"}, "sec_plugin|conversion": "--gl-to-pl", "sec_plugin|replace": true, "output_type": "v"}, "job": {"model_class": "Job", "id": "401a856f2a6d3cb6", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:10:32.589233", "create_time": "2024-10-15T13:10:21.076886", "galaxy_version": "23.1", "command_version": "Version: 1.15.1 (using htslib 1.15.1)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_plugin_tag2tag/bcftools_plugin_tag2tag/1.15.1+galaxy4", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-rlmd9", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/5/b/e/dataset_5bef7b41-87e4-4f9d-8163-93e4415e66cc.dat' > input.vcf.gz && bcftools index input.vcf.gz &&            bcftools plugin tag2tag                 --output-type 'v'   --threads ${GALAXY_SLOTS:-4}    input.vcf.gz   -- --gl-to-pl --replace > '/galaxy/server/database/objects/c/1/8/dataset_c180c8e4-8553-4356-9ca3-b973ef27e969.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_plugin": "{\"conversion\": \"--gl-to-pl\", \"replace\": true, \"threshold\": \"0.1\"}", "sec_restrict": "{\"exclude\": null, \"include\": null, \"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"regions_overlap\": null, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}, \"targets_overlap\": null}"}, "inputs": {"input_file": {"id": "95d169d8cb14bc71", "src": "hda", "uuid": "5bef7b41-87e4-4f9d-8163-93e4415e66cc"}}, "outputs": {"output_file": {"id": "4f37e4a04a919dfc", "src": "hda", "uuid": "c180c8e4-8553-4356-9ca3-b973ef27e969"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-10-15 13:10:23", "plugin": "core", "name": "end_epoch", "raw_value": "1728997823.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:10:23", "plugin": "core", "name": "start_epoch", "raw_value": "1728997823.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_reheader/1.15.1+galaxy4-0", "has_data": true, "data": {"tool_id": "bcftools_reheader", "tool_version": "1.15.1+galaxy4", "test_index": 0, "time_seconds": 31.204540252685547, "inputs": {"input_file": {"src": "hda", "id": "be2aa380ca6e3b31"}, "sec_default|header": {"src": "hda", "id": "9adc03e6edc6af8d"}, "output_type": "v"}, "job": {"model_class": "Job", "id": "cb164c788ac17f5f", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:09:19.000691", "create_time": "2024-10-15T13:09:06.890834", "galaxy_version": "23.1", "command_version": "Version: 1.15.1 (using htslib 1.15.1)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_reheader/bcftools_reheader/1.15.1+galaxy4", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-gdclt", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/9/1/8/dataset_918bcf70-7e67-431a-8683-d5e7db721cec.dat' > input.vcf.gz && bcftools index input.vcf.gz &&   bcftools reheader   --header \"/galaxy/server/database/objects/e/a/e/dataset_eae33aac-6cc5-4774-be12-e1e31711e059.dat\"    input.vcf.gz  | bcftools view  --output-type 'v'  > '/galaxy/server/database/objects/0/3/a/dataset_03acaace-ddac-4388-a620-d2cd2cc19343.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_default": "{\"header\": {\"values\": [{\"id\": 100, \"src\": \"hda\"}]}, \"rename_samples\": {\"__current_case__\": 0, \"samples_src\": \"none\"}}"}, "inputs": {"input_file": {"id": "be2aa380ca6e3b31", "src": "hda", "uuid": "918bcf70-7e67-431a-8683-d5e7db721cec"}, "sec_default|header": {"id": "9adc03e6edc6af8d", "src": "hda", "uuid": "eae33aac-6cc5-4774-be12-e1e31711e059"}}, "outputs": {"output_file": {"id": "bfe6e792fda66918", "src": "hda", "uuid": "03acaace-ddac-4388-a620-d2cd2cc19343"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:09:09", "plugin": "core", "name": "end_epoch", "raw_value": "1728997749.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:09:08", "plugin": "core", "name": "start_epoch", "raw_value": "1728997748.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_reheader/1.15.1+galaxy4-1", "has_data": true, "data": {"tool_id": "bcftools_reheader", "tool_version": "1.15.1+galaxy4", "test_index": 1, "time_seconds": 11.533132791519165, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "bcftools_reheader/1.15.1+galaxy4-2", "has_data": true, "data": {"tool_id": "bcftools_reheader", "tool_version": "1.15.1+galaxy4", "test_index": 2, "time_seconds": 32.354217290878296, "inputs": {"input_file": {"src": "hda", "id": "c83b45bfe7d49f73"}, "sec_default|rename_samples|sample_file": {"src": "hda", "id": "354695c6885c819b"}, "sec_default|rename_samples|samples_src": "history", "output_type": "v"}, "job": {"model_class": "Job", "id": "2355e273cfefca13", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:10:03.308729", "create_time": "2024-10-15T13:09:49.780704", "galaxy_version": "23.1", "command_version": "Version: 1.15.1 (using htslib 1.15.1)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_reheader/bcftools_reheader/1.15.1+galaxy4", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-2hhkl", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/6/a/4/dataset_6a45388a-02a3-44ee-a06c-6f29030595fe.dat' > input.vcf.gz && bcftools index input.vcf.gz &&   bcftools reheader    --samples \"/galaxy/server/database/objects/5/9/6/dataset_5966251a-ba31-4cfb-810a-6b7da6636264.dat\"   input.vcf.gz  | bcftools view  --output-type 'v'  > '/galaxy/server/database/objects/b/b/5/dataset_bb518a34-b4a1-46c7-80b4-71bad16940bb.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_default": "{\"header\": null, \"rename_samples\": {\"__current_case__\": 1, \"sample_file\": {\"values\": [{\"id\": 105, \"src\": \"hda\"}]}, \"samples_src\": \"history\"}}"}, "inputs": {"input_file": {"id": "c83b45bfe7d49f73", "src": "hda", "uuid": "6a45388a-02a3-44ee-a06c-6f29030595fe"}, "sec_default|rename_samples|sample_file": {"id": "354695c6885c819b", "src": "hda", "uuid": "5966251a-ba31-4cfb-810a-6b7da6636264"}}, "outputs": {"output_file": {"id": "552d0132feb49722", "src": "hda", "uuid": "bb518a34-b4a1-46c7-80b4-71bad16940bb"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:09:52", "plugin": "core", "name": "end_epoch", "raw_value": "1728997792.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:09:51", "plugin": "core", "name": "start_epoch", "raw_value": "1728997791.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deeptools_multi_bigwig_summary/3.5.4+galaxy0-0", "has_data": true, "data": {"tool_id": "deeptools_multi_bigwig_summary", "tool_version": "3.5.4+galaxy0", "test_index": 0, "time_seconds": 45.271350145339966, "inputs": {"multibigwig_conditional|bigwigfiles": [{"src": "hda", "id": "c8338e2df933b60c"}, {"src": "hda", "id": "c8338e2df933b60c"}], "mode|binSize": "10", "mode|modeOpt": "bins"}, "job": {"model_class": "Job", "id": "f48d66777228cdd9", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:27:33.673824", "create_time": "2024-10-15T13:27:05.720537", "galaxy_version": "23.1", "command_version": "multiBigwigSummary 3.5.4", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/deeptools_multi_bigwig_summary/deeptools_multi_bigwig_summary/3.5.4+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-jgsn4", "command_line": "ln -f -s '/galaxy/server/database/objects/b/c/2/dataset_bc201ce7-ea6c-4f6b-ac6c-bca763c55632.dat' 'test.bw_0.bw' && ln -f -s '/galaxy/server/database/objects/b/c/2/dataset_bc201ce7-ea6c-4f6b-ac6c-bca763c55632.dat' 'test.bw_1.bw' &&   multiBigwigSummary bins  --numberOfProcessors \"${GALAXY_SLOTS:-4}\"  --outFileName /galaxy/server/database/objects/c/e/5/dataset_ce54ba14-7fe8-4f72-bccf-51f57cd3635f.dat  --bwfiles 'test.bw_0.bw' 'test.bw_1.bw'   --binSize '10' --distanceBetweenBins '0'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advancedOpt": "{\"__current_case__\": 0, \"showAdvancedOpt\": \"no\"}", "outRawCounts": "false", "region": "\"\"", "mode": "{\"__current_case__\": 0, \"binSize\": \"10\", \"distanceBetweenBins\": \"0\", \"modeOpt\": \"bins\"}", "custom_sample_labels_conditional": "{\"__current_case__\": 0, \"custom_labels_select\": \"No\"}", "multibigwig_conditional": "{\"__current_case__\": 0, \"bigwigfiles\": {\"values\": [{\"id\": 211, \"src\": \"hda\"}, {\"id\": 211, \"src\": \"hda\"}]}, \"orderMatters\": \"No\"}"}, "inputs": {"multibigwig_conditional|bigwigfiles": {"id": "c8338e2df933b60c", "src": "hda", "uuid": "bc201ce7-ea6c-4f6b-ac6c-bca763c55632"}, "multibigwig_conditional|bigwigfiles1": {"id": "c8338e2df933b60c", "src": "hda", "uuid": "bc201ce7-ea6c-4f6b-ac6c-bca763c55632"}, "multibigwig_conditional|bigwigfiles2": {"id": "c8338e2df933b60c", "src": "hda", "uuid": "bc201ce7-ea6c-4f6b-ac6c-bca763c55632"}}, "outputs": {"outFile": {"id": "792d74dc818bc7e0", "src": "hda", "uuid": "ce54ba14-7fe8-4f72-bccf-51f57cd3635f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Number of bins found: 120\n", "job_stdout": "", "job_stderr": "", "stderr": "Number of bins found: 120\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:27:20", "plugin": "core", "name": "end_epoch", "raw_value": "1728998840.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:27:19", "plugin": "core", "name": "start_epoch", "raw_value": "1728998839.0000000"}, {"title": "Memory Allocated (MB)", "value": "42949", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "42949.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "deeptools_multi_bigwig_summary/3.5.4+galaxy0-1", "has_data": true, "data": {"tool_id": "deeptools_multi_bigwig_summary", "tool_version": "3.5.4+galaxy0", "test_index": 1, "time_seconds": 9.744229793548584, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "fasta_compute_length/1.0.3-0", "has_data": true, "data": {"tool_id": "fasta_compute_length", "tool_version": "1.0.3", "test_index": 0, "time_seconds": 34.55479550361633, "inputs": {"ref|input": {"src": "hda", "id": "55a35fbe206de138"}, "ref|keep_first": "0", "ref|keep_first_word": false}, "job": {"model_class": "Job", "id": "5a924ac6c2092b00", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:03:58.468344", "create_time": "2024-10-15T13:03:41.609507", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/fasta_compute_length/fasta_compute_length/1.0.3", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-b94q2", "command_line": "python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/devteam/fasta_compute_length/7d37cfda8e00/fasta_compute_length/fasta_compute_length.py' '/galaxy/server/database/objects/9/a/f/dataset_9af2172e-c9c7-4d88-b534-47229e435132.dat' '/galaxy/server/database/objects/d/f/3/dataset_df3289bf-0b5a-4cc8-bf4e-0d14d26877b2.dat' 0 id_and_desc", "traceback": null, "params": {"ref": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 78, \"src\": \"hda\"}]}, \"keep_first\": \"0\", \"keep_first_word\": false, \"ref_source\": \"history\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"ref|input": {"id": "55a35fbe206de138", "src": "hda", "uuid": "9af2172e-c9c7-4d88-b534-47229e435132"}}, "outputs": {"output": {"id": "8b99fbbe5ce8be08", "src": "hda", "uuid": "df3289bf-0b5a-4cc8-bf4e-0d14d26877b2"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:03:47", "plugin": "core", "name": "start_epoch", "raw_value": "1728997427.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:03:47", "plugin": "core", "name": "end_epoch", "raw_value": "1728997427.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "fasta_compute_length/1.0.3-1", "has_data": true, "data": {"tool_id": "fasta_compute_length", "tool_version": "1.0.3", "test_index": 1, "time_seconds": 29.20979905128479, "inputs": {"ref|input": {"src": "hda", "id": "5368737e5072c03a"}, "ref|keep_first": "0", "ref|keep_first_word": false}, "job": {"model_class": "Job", "id": "fe33b4f1b621f035", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:04:27.721175", "create_time": "2024-10-15T13:04:16.092735", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/fasta_compute_length/fasta_compute_length/1.0.3", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-tgrhd", "command_line": "python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/devteam/fasta_compute_length/7d37cfda8e00/fasta_compute_length/fasta_compute_length.py' '/galaxy/server/database/objects/6/a/1/dataset_6a1e2dec-bbee-47ba-8924-2b5a902e7d4a.dat' '/galaxy/server/database/objects/8/d/3/dataset_8d3cf55f-5bad-4c2a-91e5-4f6ab5179a4c.dat' 0 id_and_desc", "traceback": null, "params": {"ref": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 80, \"src\": \"hda\"}]}, \"keep_first\": \"0\", \"keep_first_word\": false, \"ref_source\": \"history\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"ref|input": {"id": "5368737e5072c03a", "src": "hda", "uuid": "6a1e2dec-bbee-47ba-8924-2b5a902e7d4a"}}, "outputs": {"output": {"id": "f45f57a2e810d18b", "src": "hda", "uuid": "8d3cf55f-5bad-4c2a-91e5-4f6ab5179a4c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:04:17", "plugin": "core", "name": "start_epoch", "raw_value": "1728997457.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:04:17", "plugin": "core", "name": "end_epoch", "raw_value": "1728997457.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "fasta_compute_length/1.0.3-2", "has_data": true, "data": {"tool_id": "fasta_compute_length", "tool_version": "1.0.3", "test_index": 2, "time_seconds": 30.790016651153564, "inputs": {"ref|input": {"src": "hda", "id": "023f54cf01163d16"}, "ref|keep_first": "14", "ref|keep_first_word": false}, "job": {"model_class": "Job", "id": "a921f877f6ccbc6b", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:04:58.259746", "create_time": "2024-10-15T13:04:46.470708", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/fasta_compute_length/fasta_compute_length/1.0.3", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-s8bvj", "command_line": "python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/devteam/fasta_compute_length/7d37cfda8e00/fasta_compute_length/fasta_compute_length.py' '/galaxy/server/database/objects/4/6/0/dataset_4601e7b6-d176-47e6-9c7a-9ad141e7aa9f.dat' '/galaxy/server/database/objects/f/7/d/dataset_f7d6d389-c796-4714-ad3e-e15f4d2b6f90.dat' 14 id_and_desc", "traceback": null, "params": {"ref": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 82, \"src\": \"hda\"}]}, \"keep_first\": \"14\", \"keep_first_word\": false, \"ref_source\": \"history\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"ref|input": {"id": "023f54cf01163d16", "src": "hda", "uuid": "4601e7b6-d176-47e6-9c7a-9ad141e7aa9f"}}, "outputs": {"output": {"id": "59a0b189faef57d4", "src": "hda", "uuid": "f7d6d389-c796-4714-ad3e-e15f4d2b6f90"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:04:48", "plugin": "core", "name": "start_epoch", "raw_value": "1728997488.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:04:48", "plugin": "core", "name": "end_epoch", "raw_value": "1728997488.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "fasta_compute_length/1.0.3-3", "has_data": true, "data": {"tool_id": "fasta_compute_length", "tool_version": "1.0.3", "test_index": 3, "status": "skip"}}, {"id": "fasta_compute_length/1.0.3-4", "has_data": true, "data": {"tool_id": "fasta_compute_length", "tool_version": "1.0.3", "test_index": 4, "status": "skip"}}, {"id": "flye/2.9.4+galaxy0-0", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.9.4+galaxy0", "test_index": 0, "time_seconds": 133.43573832511902, "inputs": {"inputs": [{"src": "hda", "id": "8de5231b890090b4"}, {"src": "hda", "id": "b7f171112b944911"}, {"src": "hda", "id": "88fe62b05b00afdf"}, {"src": "hda", "id": "9f63c806315fcfc3"}, {"src": "hda", "id": "53e77ecdcf582a94"}, {"src": "hda", "id": "2aaec40837e91501"}, {"src": "hda", "id": "3f05f0be024786b9"}], "mode_conditional|mode": "--pacbio-raw", "iterations": "0", "generate_log": true}, "job": {"model_class": "Job", "id": "55a35fbe206de138", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:13:18.268786", "create_time": "2024-10-15T13:11:45.993622", "galaxy_version": "23.1", "command_version": "2.9.4-b1799", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.4+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-rdscp", "command_line": "ln -sf '/galaxy/server/database/objects/9/2/d/dataset_92d35548-437a-4b49-818b-10491ca8538d.dat' ./input_0.fastq.gz && ln -sf '/galaxy/server/database/objects/9/0/7/dataset_90767e14-80da-40a4-ba91-d53eb50906be.dat' ./input_1.fastq.gz && ln -sf '/galaxy/server/database/objects/e/3/1/dataset_e315724d-6593-40aa-84a1-2a2e8a167d9e.dat' ./input_2.fastq.gz && ln -sf '/galaxy/server/database/objects/f/3/5/dataset_f35cf1bd-aca6-4063-bae1-79d7315ac6ec.dat' ./input_3.fastq.gz && ln -sf '/galaxy/server/database/objects/d/b/6/dataset_db60be7e-369f-451e-ad3a-dbd0c930b2a4.dat' ./input_4.fastq.gz && ln -sf '/galaxy/server/database/objects/1/5/b/dataset_15b9ecd4-9e0c-4d5e-aefc-05bafd0249e1.dat' ./input_5.fastq.gz && ln -sf '/galaxy/server/database/objects/9/0/a/dataset_90a96a5c-7a6f-4c78-9b6f-22de67e70e1a.dat' ./input_6.fastq.gz && flye --pacbio-raw ./input_0.fastq.gz ./input_1.fastq.gz ./input_2.fastq.gz ./input_3.fastq.gz ./input_4.fastq.gz ./input_5.fastq.gz ./input_6.fastq.gz -o out_dir -t ${GALAXY_SLOTS:-4} -i 0", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "generate_log": "true", "no_alt_contigs": "false", "asm": "{\"__current_case__\": 1, \"asm_select\": \"false\"}", "meta": "false", "scaffold": "false", "keep_haplotypes": "false", "min_overlap": "\"\"", "iterations": "\"0\"", "mode_conditional": "{\"__current_case__\": 3, \"mode\": \"--pacbio-raw\"}"}, "inputs": {"inputs": {"id": "8de5231b890090b4", "src": "hda", "uuid": "92d35548-437a-4b49-818b-10491ca8538d"}, "inputs1": {"id": "8de5231b890090b4", "src": "hda", "uuid": "92d35548-437a-4b49-818b-10491ca8538d"}, "inputs2": {"id": "b7f171112b944911", "src": "hda", "uuid": "90767e14-80da-40a4-ba91-d53eb50906be"}, "inputs3": {"id": "88fe62b05b00afdf", "src": "hda", "uuid": "e315724d-6593-40aa-84a1-2a2e8a167d9e"}, "inputs4": {"id": "9f63c806315fcfc3", "src": "hda", "uuid": "f35cf1bd-aca6-4063-bae1-79d7315ac6ec"}, "inputs5": {"id": "53e77ecdcf582a94", "src": "hda", "uuid": "db60be7e-369f-451e-ad3a-dbd0c930b2a4"}, "inputs6": {"id": "2aaec40837e91501", "src": "hda", "uuid": "15b9ecd4-9e0c-4d5e-aefc-05bafd0249e1"}, "inputs7": {"id": "3f05f0be024786b9", "src": "hda", "uuid": "90a96a5c-7a6f-4c78-9b6f-22de67e70e1a"}}, "outputs": {"assembly_info": {"id": "2192676b472b862d", "src": "hda", "uuid": "7c3c7559-6d83-48d3-833d-06dbd569a555"}, "flye_log": {"id": "9edf53312985a37a", "src": "hda", "uuid": "1abc80f7-d84f-4f18-b3b6-1093073d1cdf"}, "consensus": {"id": "9d67fea082863e0b", "src": "hda", "uuid": "04c28e42-c2d5-4dc0-a02b-e071cbdae115"}, "assembly_graph": {"id": "1a6b0be2c43c0632", "src": "hda", "uuid": "74f95ccb-5364-4632-ac91-1aea13006611"}, "assembly_gfa": {"id": "68de405a99940246", "src": "hda", "uuid": "e2a5cef9-741d-4eea-ae90-414a33b48391"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[2024-10-15 13:11:55] INFO: Starting Flye 2.9.4-b1799\n[2024-10-15 13:11:55] INFO: >>>STAGE: configure\n[2024-10-15 13:11:55] INFO: Configuring run\n[2024-10-15 13:11:55] INFO: Total read length: 7249289\n[2024-10-15 13:11:55] INFO: Reads N50/N90: 11150 / 5790\n[2024-10-15 13:11:55] INFO: Minimum overlap set to 6000\n[2024-10-15 13:11:55] INFO: >>>STAGE: assembly\n[2024-10-15 13:11:55] INFO: Assembling disjointigs\n[2024-10-15 13:11:55] INFO: Reading sequences\n[2024-10-15 13:12:00] INFO: Counting k-mers:\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:12:52] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:12:52] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:12:55] INFO: Extending reads\n[2024-10-15 13:12:58] INFO: Overlap-based coverage: 10\n[2024-10-15 13:12:58] INFO: Median overlap divergence: 0.235584\n0% 80% 90% 100% \n[2024-10-15 13:12:58] INFO: Assembled 2 disjointigs\n[2024-10-15 13:12:58] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:12:58] INFO: Filtering contained disjointigs\n0% 50% 100% \n[2024-10-15 13:12:59] INFO: Contained seqs: 0\n[2024-10-15 13:12:59] INFO: >>>STAGE: consensus\n[2024-10-15 13:12:59] INFO: Running Minimap2\n[2024-10-15 13:13:00] INFO: Computing consensus\n[2024-10-15 13:13:05] INFO: Alignment error rate: 0.196585\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000026043c0000005f'\n[2024-10-15 13:13:05] INFO: >>>STAGE: repeat\n[2024-10-15 13:13:05] INFO: Building and resolving repeat graph\n[2024-10-15 13:13:05] INFO: Parsing disjointigs\n[2024-10-15 13:13:05] INFO: Building repeat graph\n0% 50% 100% \n[2024-10-15 13:13:07] INFO: Median overlap divergence: 0.083035\n[2024-10-15 13:13:07] INFO: Parsing reads\n[2024-10-15 13:13:07] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:13:08] INFO: Aligned read sequence: 6327031 / 6471580 (0.977664)\n[2024-10-15 13:13:08] INFO: Median overlap divergence: 0.129641\n[2024-10-15 13:13:08] INFO: Mean edge coverage: 13\n[2024-10-15 13:13:08] INFO: Simplifying the graph\n[2024-10-15 13:13:08] INFO: >>>STAGE: contigger\n[2024-10-15 13:13:08] INFO: Generating contigs\n[2024-10-15 13:13:08] INFO: Reading sequences\n[2024-10-15 13:13:08] INFO: Generated 3 contigs\n[2024-10-15 13:13:08] INFO: Added 0 scaffold connections\n[2024-10-15 13:13:08] INFO: >>>STAGE: finalize\n[2024-10-15 13:13:08] INFO: Assembly statistics:\n\n\tTotal length:\t467503\n\tFragments:\t3\n\tFragments N50:\t382438\n\tLargest frg:\t382438\n\tScaffolds:\t0\n\tMean coverage:\t14\n\n[2024-10-15 13:13:08] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/78/working/out_dir/assembly.fasta\n", "job_stdout": "", "job_stderr": "", "stderr": "[2024-10-15 13:11:55] INFO: Starting Flye 2.9.4-b1799\n[2024-10-15 13:11:55] INFO: >>>STAGE: configure\n[2024-10-15 13:11:55] INFO: Configuring run\n[2024-10-15 13:11:55] INFO: Total read length: 7249289\n[2024-10-15 13:11:55] INFO: Reads N50/N90: 11150 / 5790\n[2024-10-15 13:11:55] INFO: Minimum overlap set to 6000\n[2024-10-15 13:11:55] INFO: >>>STAGE: assembly\n[2024-10-15 13:11:55] INFO: Assembling disjointigs\n[2024-10-15 13:11:55] INFO: Reading sequences\n[2024-10-15 13:12:00] INFO: Counting k-mers:\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:12:52] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:12:52] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:12:55] INFO: Extending reads\n[2024-10-15 13:12:58] INFO: Overlap-based coverage: 10\n[2024-10-15 13:12:58] INFO: Median overlap divergence: 0.235584\n0% 80% 90% 100% \n[2024-10-15 13:12:58] INFO: Assembled 2 disjointigs\n[2024-10-15 13:12:58] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:12:58] INFO: Filtering contained disjointigs\n0% 50% 100% \n[2024-10-15 13:12:59] INFO: Contained seqs: 0\n[2024-10-15 13:12:59] INFO: >>>STAGE: consensus\n[2024-10-15 13:12:59] INFO: Running Minimap2\n[2024-10-15 13:13:00] INFO: Computing consensus\n[2024-10-15 13:13:05] INFO: Alignment error rate: 0.196585\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000026043c0000005f'\n[2024-10-15 13:13:05] INFO: >>>STAGE: repeat\n[2024-10-15 13:13:05] INFO: Building and resolving repeat graph\n[2024-10-15 13:13:05] INFO: Parsing disjointigs\n[2024-10-15 13:13:05] INFO: Building repeat graph\n0% 50% 100% \n[2024-10-15 13:13:07] INFO: Median overlap divergence: 0.083035\n[2024-10-15 13:13:07] INFO: Parsing reads\n[2024-10-15 13:13:07] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:13:08] INFO: Aligned read sequence: 6327031 / 6471580 (0.977664)\n[2024-10-15 13:13:08] INFO: Median overlap divergence: 0.129641\n[2024-10-15 13:13:08] INFO: Mean edge coverage: 13\n[2024-10-15 13:13:08] INFO: Simplifying the graph\n[2024-10-15 13:13:08] INFO: >>>STAGE: contigger\n[2024-10-15 13:13:08] INFO: Generating contigs\n[2024-10-15 13:13:08] INFO: Reading sequences\n[2024-10-15 13:13:08] INFO: Generated 3 contigs\n[2024-10-15 13:13:08] INFO: Added 0 scaffold connections\n[2024-10-15 13:13:08] INFO: >>>STAGE: finalize\n[2024-10-15 13:13:08] INFO: Assembly statistics:\n\n\tTotal length:\t467503\n\tFragments:\t3\n\tFragments N50:\t382438\n\tLargest frg:\t382438\n\tScaffolds:\t0\n\tMean coverage:\t14\n\n[2024-10-15 13:13:08] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/78/working/out_dir/assembly.fasta\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "74.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:13:08", "plugin": "core", "name": "end_epoch", "raw_value": "1728997988.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:11:54", "plugin": "core", "name": "start_epoch", "raw_value": "1728997914.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "flye/2.9.4+galaxy0-1", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.9.4+galaxy0", "test_index": 1, "time_seconds": 98.22383689880371, "inputs": {"inputs": {"src": "hda", "id": "42ac41cfc97df23f"}, "mode_conditional|mode": "--nano-raw", "iterations": "0"}, "job": {"model_class": "Job", "id": "5368737e5072c03a", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:14:58.831370", "create_time": "2024-10-15T13:13:41.735078", "galaxy_version": "23.1", "command_version": "2.9.4-b1799", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.4+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-wxvfh", "command_line": "ln -sf '/galaxy/server/database/objects/f/e/7/dataset_fe7f4266-2c63-4bb1-bd5c-93d550327073.dat' ./input_0.fasta.gz && flye --nano-raw ./input_0.fasta.gz -o out_dir -t ${GALAXY_SLOTS:-4} -i 0", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "generate_log": "false", "no_alt_contigs": "false", "asm": "{\"__current_case__\": 1, \"asm_select\": \"false\"}", "meta": "false", "scaffold": "false", "keep_haplotypes": "false", "min_overlap": "\"\"", "iterations": "\"0\"", "mode_conditional": "{\"__current_case__\": 0, \"mode\": \"--nano-raw\"}"}, "inputs": {"inputs": {"id": "42ac41cfc97df23f", "src": "hda", "uuid": "fe7f4266-2c63-4bb1-bd5c-93d550327073"}, "inputs1": {"id": "42ac41cfc97df23f", "src": "hda", "uuid": "fe7f4266-2c63-4bb1-bd5c-93d550327073"}}, "outputs": {"consensus": {"id": "4c64ccdd9bd78204", "src": "hda", "uuid": "60ed95c5-ed66-42f7-8728-770780e77ef5"}, "assembly_graph": {"id": "95fa21c0dde48854", "src": "hda", "uuid": "18cb9e1b-c632-4055-b2f4-687559516a95"}, "assembly_gfa": {"id": "ae40488f8ec44751", "src": "hda", "uuid": "18d43626-f237-4ad2-ab53-a9bbbf391bc3"}, "assembly_info": {"id": "b4e4680a68923d94", "src": "hda", "uuid": "878820b8-cd73-466b-81af-32e92dd888b0"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[2024-10-15 13:13:43] INFO: Starting Flye 2.9.4-b1799\n[2024-10-15 13:13:43] INFO: >>>STAGE: configure\n[2024-10-15 13:13:43] INFO: Configuring run\n[2024-10-15 13:13:43] INFO: Total read length: 1466260\n[2024-10-15 13:13:43] INFO: Reads N50/N90: 9054 / 4697\n[2024-10-15 13:13:43] INFO: Minimum overlap set to 5000\n[2024-10-15 13:13:43] INFO: >>>STAGE: assembly\n[2024-10-15 13:13:43] INFO: Assembling disjointigs\n[2024-10-15 13:13:43] INFO: Reading sequences\n[2024-10-15 13:13:47] INFO: Counting k-mers:\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:14:40] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:14:40] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:14:44] INFO: Extending reads\n[2024-10-15 13:14:48] INFO: Overlap-based coverage: 42\n[2024-10-15 13:14:48] INFO: Median overlap divergence: 0.105617\n0% 90% 100% \n[2024-10-15 13:14:48] INFO: Assembled 1 disjointigs\n[2024-10-15 13:14:48] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:14:48] INFO: Filtering contained disjointigs\n0% 100% \n[2024-10-15 13:14:48] INFO: Contained seqs: 0\n[2024-10-15 13:14:48] INFO: >>>STAGE: consensus\n[2024-10-15 13:14:48] INFO: Running Minimap2\n[2024-10-15 13:14:48] INFO: Computing consensus\n[2024-10-15 13:14:49] INFO: Alignment error rate: 0.175120\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000026049800000061'\n[2024-10-15 13:14:49] INFO: >>>STAGE: repeat\n[2024-10-15 13:14:49] INFO: Building and resolving repeat graph\n[2024-10-15 13:14:49] INFO: Parsing disjointigs\n[2024-10-15 13:14:49] INFO: Building repeat graph\n0% 100% \n[2024-10-15 13:14:50] INFO: Median overlap divergence: 0.0151003\n[2024-10-15 13:14:50] INFO: Parsing reads\n[2024-10-15 13:14:50] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:14:50] INFO: Aligned read sequence: 1166207 / 1313105 (0.888129)\n[2024-10-15 13:14:50] INFO: Median overlap divergence: 0.0550349\n[2024-10-15 13:14:50] INFO: Mean edge coverage: 33\n[2024-10-15 13:14:50] INFO: Simplifying the graph\n[2024-10-15 13:14:50] INFO: >>>STAGE: contigger\n[2024-10-15 13:14:50] INFO: Generating contigs\n[2024-10-15 13:14:50] INFO: Reading sequences\n[2024-10-15 13:14:50] INFO: Generated 3 contigs\n[2024-10-15 13:14:50] INFO: Added 0 scaffold connections\n[2024-10-15 13:14:50] INFO: >>>STAGE: finalize\n[2024-10-15 13:14:50] INFO: Assembly statistics:\n\n\tTotal length:\t34929\n\tFragments:\t3\n\tFragments N50:\t21816\n\tLargest frg:\t21816\n\tScaffolds:\t0\n\tMean coverage:\t34\n\n[2024-10-15 13:14:50] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/80/working/out_dir/assembly.fasta\n", "job_stdout": "", "job_stderr": "", "stderr": "[2024-10-15 13:13:43] INFO: Starting Flye 2.9.4-b1799\n[2024-10-15 13:13:43] INFO: >>>STAGE: configure\n[2024-10-15 13:13:43] INFO: Configuring run\n[2024-10-15 13:13:43] INFO: Total read length: 1466260\n[2024-10-15 13:13:43] INFO: Reads N50/N90: 9054 / 4697\n[2024-10-15 13:13:43] INFO: Minimum overlap set to 5000\n[2024-10-15 13:13:43] INFO: >>>STAGE: assembly\n[2024-10-15 13:13:43] INFO: Assembling disjointigs\n[2024-10-15 13:13:43] INFO: Reading sequences\n[2024-10-15 13:13:47] INFO: Counting k-mers:\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:14:40] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:14:40] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:14:44] INFO: Extending reads\n[2024-10-15 13:14:48] INFO: Overlap-based coverage: 42\n[2024-10-15 13:14:48] INFO: Median overlap divergence: 0.105617\n0% 90% 100% \n[2024-10-15 13:14:48] INFO: Assembled 1 disjointigs\n[2024-10-15 13:14:48] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:14:48] INFO: Filtering contained disjointigs\n0% 100% \n[2024-10-15 13:14:48] INFO: Contained seqs: 0\n[2024-10-15 13:14:48] INFO: >>>STAGE: consensus\n[2024-10-15 13:14:48] INFO: Running Minimap2\n[2024-10-15 13:14:48] INFO: Computing consensus\n[2024-10-15 13:14:49] INFO: Alignment error rate: 0.175120\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000026049800000061'\n[2024-10-15 13:14:49] INFO: >>>STAGE: repeat\n[2024-10-15 13:14:49] INFO: Building and resolving repeat graph\n[2024-10-15 13:14:49] INFO: Parsing disjointigs\n[2024-10-15 13:14:49] INFO: Building repeat graph\n0% 100% \n[2024-10-15 13:14:50] INFO: Median overlap divergence: 0.0151003\n[2024-10-15 13:14:50] INFO: Parsing reads\n[2024-10-15 13:14:50] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:14:50] INFO: Aligned read sequence: 1166207 / 1313105 (0.888129)\n[2024-10-15 13:14:50] INFO: Median overlap divergence: 0.0550349\n[2024-10-15 13:14:50] INFO: Mean edge coverage: 33\n[2024-10-15 13:14:50] INFO: Simplifying the graph\n[2024-10-15 13:14:50] INFO: >>>STAGE: contigger\n[2024-10-15 13:14:50] INFO: Generating contigs\n[2024-10-15 13:14:50] INFO: Reading sequences\n[2024-10-15 13:14:50] INFO: Generated 3 contigs\n[2024-10-15 13:14:50] INFO: Added 0 scaffold connections\n[2024-10-15 13:14:50] INFO: >>>STAGE: finalize\n[2024-10-15 13:14:50] INFO: Assembly statistics:\n\n\tTotal length:\t34929\n\tFragments:\t3\n\tFragments N50:\t21816\n\tLargest frg:\t21816\n\tScaffolds:\t0\n\tMean coverage:\t34\n\n[2024-10-15 13:14:50] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/80/working/out_dir/assembly.fasta\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "67.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:14:50", "plugin": "core", "name": "end_epoch", "raw_value": "1728998090.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:13:43", "plugin": "core", "name": "start_epoch", "raw_value": "1728998023.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "flye/2.9.4+galaxy0-2", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.9.4+galaxy0", "test_index": 2, "time_seconds": 29.178965091705322, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "flye/2.9.4+galaxy0-3", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.9.4+galaxy0", "test_index": 3, "time_seconds": 135.47838377952576, "inputs": {"inputs": [{"src": "hda", "id": "8dec8f551d82d08e"}, {"src": "hda", "id": "4e8ac70cdb8fe945"}, {"src": "hda", "id": "5f862bfdb1b151df"}, {"src": "hda", "id": "a932e91cc5d705e4"}, {"src": "hda", "id": "6dbe761e94a1f11b"}, {"src": "hda", "id": "960b8a8f5ba73aea"}, {"src": "hda", "id": "08795e3b5755e139"}], "mode_conditional|mode": "--pacbio-raw", "meta": true}, "job": {"model_class": "Job", "id": "ab24ae20d380fa4a", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:17:43.119931", "create_time": "2024-10-15T13:16:10.142696", "galaxy_version": "23.1", "command_version": "2.9.4-b1799", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.4+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-cz8q2", "command_line": "ln -sf '/galaxy/server/database/objects/6/2/4/dataset_6244a3bd-8abd-49ca-b2ff-68abec915ed2.dat' ./input_0.fastq.gz && ln -sf '/galaxy/server/database/objects/0/c/c/dataset_0ccedb8a-9ac6-4e6a-ab8e-5c2ce981a014.dat' ./input_1.fastq.gz && ln -sf '/galaxy/server/database/objects/c/a/a/dataset_caa54ec7-5f4c-403d-adca-9ffcd76893bc.dat' ./input_2.fastq.gz && ln -sf '/galaxy/server/database/objects/0/c/3/dataset_0c3e2d1b-e502-4b6e-a335-7db03ec6f876.dat' ./input_3.fastq.gz && ln -sf '/galaxy/server/database/objects/2/a/9/dataset_2a9a526e-ca26-456c-8798-f334ac92166b.dat' ./input_4.fastq.gz && ln -sf '/galaxy/server/database/objects/5/e/3/dataset_5e3d4b53-83e0-4efc-8da0-f4d69b5f6136.dat' ./input_5.fastq.gz && ln -sf '/galaxy/server/database/objects/d/9/6/dataset_d968ecb6-c3f4-4f6a-8acd-5bd57290b472.dat' ./input_6.fastq.gz && flye --pacbio-raw ./input_0.fastq.gz ./input_1.fastq.gz ./input_2.fastq.gz ./input_3.fastq.gz ./input_4.fastq.gz ./input_5.fastq.gz ./input_6.fastq.gz -o out_dir -t ${GALAXY_SLOTS:-4} -i 1 --meta", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "generate_log": "false", "no_alt_contigs": "false", "asm": "{\"__current_case__\": 1, \"asm_select\": \"false\"}", "meta": "true", "scaffold": "false", "keep_haplotypes": "false", "min_overlap": "\"\"", "iterations": "\"1\"", "mode_conditional": "{\"__current_case__\": 3, \"mode\": \"--pacbio-raw\"}"}, "inputs": {"inputs": {"id": "8dec8f551d82d08e", "src": "hda", "uuid": "6244a3bd-8abd-49ca-b2ff-68abec915ed2"}, "inputs1": {"id": "8dec8f551d82d08e", "src": "hda", "uuid": "6244a3bd-8abd-49ca-b2ff-68abec915ed2"}, "inputs2": {"id": "4e8ac70cdb8fe945", "src": "hda", "uuid": "0ccedb8a-9ac6-4e6a-ab8e-5c2ce981a014"}, "inputs3": {"id": "5f862bfdb1b151df", "src": "hda", "uuid": "caa54ec7-5f4c-403d-adca-9ffcd76893bc"}, "inputs4": {"id": "a932e91cc5d705e4", "src": "hda", "uuid": "0c3e2d1b-e502-4b6e-a335-7db03ec6f876"}, "inputs5": {"id": "6dbe761e94a1f11b", "src": "hda", "uuid": "2a9a526e-ca26-456c-8798-f334ac92166b"}, "inputs6": {"id": "960b8a8f5ba73aea", "src": "hda", "uuid": "5e3d4b53-83e0-4efc-8da0-f4d69b5f6136"}, "inputs7": {"id": "08795e3b5755e139", "src": "hda", "uuid": "d968ecb6-c3f4-4f6a-8acd-5bd57290b472"}}, "outputs": {"consensus": {"id": "10eb5f9c5fbaee4d", "src": "hda", "uuid": "e0914f1b-9e72-424c-9dcb-c1d4f236d8ff"}, "assembly_graph": {"id": "9e6f5f6f2db79b06", "src": "hda", "uuid": "92f08fcc-7ac5-4ebf-aa65-fed47b24000f"}, "assembly_gfa": {"id": "e9018d36b4c6a2d5", "src": "hda", "uuid": "2fce9597-9dca-4c6a-8514-0fd69a7f75ec"}, "assembly_info": {"id": "2350024547cb990d", "src": "hda", "uuid": "cbc4ff15-c670-4d11-8f23-2cabc35da106"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[2024-10-15 13:16:12] INFO: Starting Flye 2.9.4-b1799\n[2024-10-15 13:16:12] INFO: >>>STAGE: configure\n[2024-10-15 13:16:12] INFO: Configuring run\n[2024-10-15 13:16:12] INFO: Total read length: 7249289\n[2024-10-15 13:16:12] INFO: Reads N50/N90: 11150 / 5790\n[2024-10-15 13:16:12] INFO: Minimum overlap set to 6000\n[2024-10-15 13:16:13] INFO: >>>STAGE: assembly\n[2024-10-15 13:16:13] INFO: Assembling disjointigs\n[2024-10-15 13:16:13] INFO: Reading sequences\n[2024-10-15 13:16:17] INFO: Counting k-mers:\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:17:08] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:17:08] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:17:11] INFO: Extending reads\n[2024-10-15 13:17:14] INFO: Overlap-based coverage: 10\n[2024-10-15 13:17:14] INFO: Median overlap divergence: 0.235584\n0% 80% 100% \n[2024-10-15 13:17:14] INFO: Assembled 1 disjointigs\n[2024-10-15 13:17:14] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:17:14] INFO: Filtering contained disjointigs\n0% 100% \n[2024-10-15 13:17:15] INFO: Contained seqs: 0\n[2024-10-15 13:17:15] INFO: >>>STAGE: consensus\n[2024-10-15 13:17:15] INFO: Running Minimap2\n[2024-10-15 13:17:16] INFO: Computing consensus\n[2024-10-15 13:17:21] INFO: Alignment error rate: 0.196225\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000002604ff00000072'\n[2024-10-15 13:17:21] INFO: >>>STAGE: repeat\n[2024-10-15 13:17:21] INFO: Building and resolving repeat graph\n[2024-10-15 13:17:21] INFO: Parsing disjointigs\n[2024-10-15 13:17:21] INFO: Building repeat graph\n0% 100% \n[2024-10-15 13:17:22] INFO: Median overlap divergence: 0\n[2024-10-15 13:17:22] INFO: Parsing reads\n[2024-10-15 13:17:22] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:17:23] INFO: Aligned read sequence: 6339391 / 6471580 (0.979574)\n[2024-10-15 13:17:23] INFO: Median overlap divergence: 0.129526\n[2024-10-15 13:17:23] INFO: Mean edge coverage: 14\n[2024-10-15 13:17:23] INFO: Simplifying the graph\n[2024-10-15 13:17:23] INFO: >>>STAGE: contigger\n[2024-10-15 13:17:23] INFO: Generating contigs\n[2024-10-15 13:17:23] INFO: Reading sequences\n[2024-10-15 13:17:23] INFO: Generated 1 contigs\n[2024-10-15 13:17:23] INFO: Added 0 scaffold connections\n[2024-10-15 13:17:23] INFO: >>>STAGE: polishing\n[2024-10-15 13:17:23] INFO: Polishing genome (1/1)\n[2024-10-15 13:17:23] INFO: Running minimap2\n[2024-10-15 13:17:24] INFO: Separating alignment into bubbles\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000026051b00000073'\n[2024-10-15 13:17:29] INFO: Alignment error rate: 0.126685\n[2024-10-15 13:17:29] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000026052700000074'\n[2024-10-15 13:17:33] INFO: >>>STAGE: finalize\n[2024-10-15 13:17:33] INFO: Assembly statistics:\n\n\tTotal length:\t418704\n\tFragments:\t1\n\tFragments N50:\t418704\n\tLargest frg:\t418704\n\tScaffolds:\t0\n\tMean coverage:\t17\n\n[2024-10-15 13:17:33] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/97/working/out_dir/assembly.fasta\n", "job_stdout": "", "job_stderr": "", "stderr": "[2024-10-15 13:16:12] INFO: Starting Flye 2.9.4-b1799\n[2024-10-15 13:16:12] INFO: >>>STAGE: configure\n[2024-10-15 13:16:12] INFO: Configuring run\n[2024-10-15 13:16:12] INFO: Total read length: 7249289\n[2024-10-15 13:16:12] INFO: Reads N50/N90: 11150 / 5790\n[2024-10-15 13:16:12] INFO: Minimum overlap set to 6000\n[2024-10-15 13:16:13] INFO: >>>STAGE: assembly\n[2024-10-15 13:16:13] INFO: Assembling disjointigs\n[2024-10-15 13:16:13] INFO: Reading sequences\n[2024-10-15 13:16:17] INFO: Counting k-mers:\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:17:08] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:17:08] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:17:11] INFO: Extending reads\n[2024-10-15 13:17:14] INFO: Overlap-based coverage: 10\n[2024-10-15 13:17:14] INFO: Median overlap divergence: 0.235584\n0% 80% 100% \n[2024-10-15 13:17:14] INFO: Assembled 1 disjointigs\n[2024-10-15 13:17:14] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:17:14] INFO: Filtering contained disjointigs\n0% 100% \n[2024-10-15 13:17:15] INFO: Contained seqs: 0\n[2024-10-15 13:17:15] INFO: >>>STAGE: consensus\n[2024-10-15 13:17:15] INFO: Running Minimap2\n[2024-10-15 13:17:16] INFO: Computing consensus\n[2024-10-15 13:17:21] INFO: Alignment error rate: 0.196225\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000002604ff00000072'\n[2024-10-15 13:17:21] INFO: >>>STAGE: repeat\n[2024-10-15 13:17:21] INFO: Building and resolving repeat graph\n[2024-10-15 13:17:21] INFO: Parsing disjointigs\n[2024-10-15 13:17:21] INFO: Building repeat graph\n0% 100% \n[2024-10-15 13:17:22] INFO: Median overlap divergence: 0\n[2024-10-15 13:17:22] INFO: Parsing reads\n[2024-10-15 13:17:22] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:17:23] INFO: Aligned read sequence: 6339391 / 6471580 (0.979574)\n[2024-10-15 13:17:23] INFO: Median overlap divergence: 0.129526\n[2024-10-15 13:17:23] INFO: Mean edge coverage: 14\n[2024-10-15 13:17:23] INFO: Simplifying the graph\n[2024-10-15 13:17:23] INFO: >>>STAGE: contigger\n[2024-10-15 13:17:23] INFO: Generating contigs\n[2024-10-15 13:17:23] INFO: Reading sequences\n[2024-10-15 13:17:23] INFO: Generated 1 contigs\n[2024-10-15 13:17:23] INFO: Added 0 scaffold connections\n[2024-10-15 13:17:23] INFO: >>>STAGE: polishing\n[2024-10-15 13:17:23] INFO: Polishing genome (1/1)\n[2024-10-15 13:17:23] INFO: Running minimap2\n[2024-10-15 13:17:24] INFO: Separating alignment into bubbles\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000026051b00000073'\n[2024-10-15 13:17:29] INFO: Alignment error rate: 0.126685\n[2024-10-15 13:17:29] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000026052700000074'\n[2024-10-15 13:17:33] INFO: >>>STAGE: finalize\n[2024-10-15 13:17:33] INFO: Assembly statistics:\n\n\tTotal length:\t418704\n\tFragments:\t1\n\tFragments N50:\t418704\n\tLargest frg:\t418704\n\tScaffolds:\t0\n\tMean coverage:\t17\n\n[2024-10-15 13:17:33] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/97/working/out_dir/assembly.fasta\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "81.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:17:33", "plugin": "core", "name": "end_epoch", "raw_value": "1728998253.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:16:12", "plugin": "core", "name": "start_epoch", "raw_value": "1728998172.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "flye/2.9.4+galaxy0-4", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.9.4+galaxy0", "test_index": 4, "time_seconds": 28.689306497573853, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "flye/2.9.4+galaxy0-5", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.9.4+galaxy0", "test_index": 5, "time_seconds": 77.23968863487244, "inputs": {"inputs": [{"src": "hda", "id": "c51f22751b468b32"}, {"src": "hda", "id": "16ed1a760a194c14"}, {"src": "hda", "id": "3137c4d61ebdfe47"}, {"src": "hda", "id": "9bdea103c2309f90"}, {"src": "hda", "id": "00fe091caa8fd420"}, {"src": "hda", "id": "00913ddab7578da2"}, {"src": "hda", "id": "32eb92c04e93d428"}, {"src": "hda", "id": "1dfe883e10860714"}, {"src": "hda", "id": "4c19b19922bd2591"}], "mode_conditional|hifi_error": "0.21", "mode_conditional|mode": "--pacbio-hifi", "min_overlap": "1000"}, "job": {"model_class": "Job", "id": "2aaec40837e91501", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:19:29.571629", "create_time": "2024-10-15T13:19:02.059262", "galaxy_version": "23.1", "command_version": "2.9.4-b1799", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.4+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-p5j5p", "command_line": "ln -sf '/galaxy/server/database/objects/b/b/9/dataset_bb99eda3-70e8-418d-b817-68b2e08a5555.dat' ./input_0.fastq.gz && ln -sf '/galaxy/server/database/objects/f/6/d/dataset_f6df03a1-b022-4b75-adfb-e826fa9f6baa.dat' ./input_1.fastq.gz && ln -sf '/galaxy/server/database/objects/3/0/5/dataset_3056b90e-a7d8-47d1-a834-3c7adf3bc987.dat' ./input_2.fastq.gz && ln -sf '/galaxy/server/database/objects/2/e/5/dataset_2e5cf442-ed78-4729-b810-2d08f2e5d0c8.dat' ./input_3.fastq.gz && ln -sf '/galaxy/server/database/objects/c/5/a/dataset_c5a1e581-4274-42fa-b0b1-f1264280f228.dat' ./input_4.fastq.gz && ln -sf '/galaxy/server/database/objects/e/d/3/dataset_ed38d2ea-e764-401b-8442-6461398368a4.dat' ./input_5.fastq.gz && ln -sf '/galaxy/server/database/objects/4/f/9/dataset_4f97ade8-29bc-4549-a29a-d733a71562ec.dat' ./input_6.fastq.gz && ln -sf '/galaxy/server/database/objects/e/9/3/dataset_e93fe7d7-77d9-47bf-a286-24f80f5e5b7f.dat' ./input_7.fastq.gz && ln -sf '/galaxy/server/database/objects/7/e/1/dataset_7e1d8978-a804-47b5-8c03-aff838b1cfec.dat' ./input_8.fastq.gz && flye --pacbio-hifi ./input_0.fastq.gz ./input_1.fastq.gz ./input_2.fastq.gz ./input_3.fastq.gz ./input_4.fastq.gz ./input_5.fastq.gz ./input_6.fastq.gz ./input_7.fastq.gz ./input_8.fastq.gz -o out_dir -t ${GALAXY_SLOTS:-4} -i 1 --hifi-error 0.21 -m 1000", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "generate_log": "false", "no_alt_contigs": "false", "asm": "{\"__current_case__\": 1, \"asm_select\": \"false\"}", "meta": "false", "scaffold": "false", "keep_haplotypes": "false", "min_overlap": "\"1000\"", "iterations": "\"1\"", "mode_conditional": "{\"__current_case__\": 5, \"hifi_error\": \"0.21\", \"mode\": \"--pacbio-hifi\"}"}, "inputs": {"inputs3": {"id": "3137c4d61ebdfe47", "src": "hda", "uuid": "3056b90e-a7d8-47d1-a834-3c7adf3bc987"}, "inputs4": {"id": "9bdea103c2309f90", "src": "hda", "uuid": "2e5cf442-ed78-4729-b810-2d08f2e5d0c8"}, "inputs6": {"id": "00913ddab7578da2", "src": "hda", "uuid": "ed38d2ea-e764-401b-8442-6461398368a4"}, "inputs5": {"id": "00fe091caa8fd420", "src": "hda", "uuid": "c5a1e581-4274-42fa-b0b1-f1264280f228"}, "inputs8": {"id": "1dfe883e10860714", "src": "hda", "uuid": "e93fe7d7-77d9-47bf-a286-24f80f5e5b7f"}, "inputs9": {"id": "4c19b19922bd2591", "src": "hda", "uuid": "7e1d8978-a804-47b5-8c03-aff838b1cfec"}, "inputs1": {"id": "c51f22751b468b32", "src": "hda", "uuid": "bb99eda3-70e8-418d-b817-68b2e08a5555"}, "inputs": {"id": "c51f22751b468b32", "src": "hda", "uuid": "bb99eda3-70e8-418d-b817-68b2e08a5555"}, "inputs2": {"id": "16ed1a760a194c14", "src": "hda", "uuid": "f6df03a1-b022-4b75-adfb-e826fa9f6baa"}, "inputs7": {"id": "32eb92c04e93d428", "src": "hda", "uuid": "4f97ade8-29bc-4549-a29a-d733a71562ec"}}, "outputs": {"consensus": {"id": "66126f3d83b56095", "src": "hda", "uuid": "0ab9ed8f-db46-4461-a3e4-e73b900b01a8"}, "assembly_graph": {"id": "1bffd316ce81a1dc", "src": "hda", "uuid": "e7e7635c-117e-4734-b211-10f8c1f8dfe9"}, "assembly_gfa": {"id": "3ed4cb4ecc058aaa", "src": "hda", "uuid": "11ecbb7a-c8d6-41b8-88b9-83605c5fb704"}, "assembly_info": {"id": "b2befe636007dd5d", "src": "hda", "uuid": "6cbb7c71-6e18-4d1c-b6b8-8ab113e8aa1c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[2024-10-15 13:19:04] INFO: Starting Flye 2.9.4-b1799\n[2024-10-15 13:19:04] INFO: >>>STAGE: configure\n[2024-10-15 13:19:04] INFO: Configuring run\n[2024-10-15 13:19:04] INFO: Total read length: 6522170\n[2024-10-15 13:19:04] INFO: Reads N50/N90: 2706 / 1386\n[2024-10-15 13:19:04] INFO: Selected minimum overlap: 1000\n[2024-10-15 13:19:04] INFO: >>>STAGE: assembly\n[2024-10-15 13:19:04] INFO: Assembling disjointigs\n[2024-10-15 13:19:04] INFO: Reading sequences\n[2024-10-15 13:19:04] INFO: Building minimizer index\n[2024-10-15 13:19:04] INFO: Pre-calculating index storage\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:19:04] INFO: Filling index\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:19:05] INFO: Extending reads\n[2024-10-15 13:19:07] INFO: Overlap-based coverage: 12\n[2024-10-15 13:19:07] INFO: Median overlap divergence: 0.0135674\n0% 10% 20% 30% 40% 60% 90% 100% \n[2024-10-15 13:19:08] INFO: Assembled 11 disjointigs\n[2024-10-15 13:19:08] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:19:08] INFO: Filtering contained disjointigs\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:19:08] INFO: Contained seqs: 0\n[2024-10-15 13:19:08] INFO: >>>STAGE: consensus\n[2024-10-15 13:19:08] INFO: Running Minimap2\n[2024-10-15 13:19:08] INFO: Computing consensus\n[2024-10-15 13:19:09] INFO: Alignment error rate: 0.018196\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000026058500000087'\n[2024-10-15 13:19:10] INFO: >>>STAGE: repeat\n[2024-10-15 13:19:10] INFO: Building and resolving repeat graph\n[2024-10-15 13:19:10] INFO: Parsing disjointigs\n[2024-10-15 13:19:10] INFO: Building repeat graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:19:10] INFO: Median overlap divergence: 0.00310666\n[2024-10-15 13:19:10] INFO: Parsing reads\n[2024-10-15 13:19:10] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:19:10] INFO: Aligned read sequence: 6404547 / 6522170 (0.981966)\n[2024-10-15 13:19:10] INFO: Median overlap divergence: 0.00691444\n[2024-10-15 13:19:10] INFO: Mean edge coverage: 14\n[2024-10-15 13:19:10] INFO: Simplifying the graph\n[2024-10-15 13:19:11] INFO: >>>STAGE: contigger\n[2024-10-15 13:19:11] INFO: Generating contigs\n[2024-10-15 13:19:11] INFO: Reading sequences\n[2024-10-15 13:19:11] INFO: Generated 5 contigs\n[2024-10-15 13:19:11] INFO: Added 0 scaffold connections\n[2024-10-15 13:19:11] INFO: >>>STAGE: polishing\n[2024-10-15 13:19:11] INFO: Polishing genome (1/1)\n[2024-10-15 13:19:11] INFO: Running minimap2\n[2024-10-15 13:19:11] INFO: Separating alignment into bubbles\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000002605a000000088'\n[2024-10-15 13:19:13] INFO: Alignment error rate: 0.009923\n[2024-10-15 13:19:13] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000002605a800000089'\n[2024-10-15 13:19:20] INFO: >>>STAGE: finalize\n[2024-10-15 13:19:20] INFO: Assembly statistics:\n\n\tTotal length:\t418246\n\tFragments:\t5\n\tFragments N50:\t90299\n\tLargest frg:\t147965\n\tScaffolds:\t0\n\tMean coverage:\t16\n\n[2024-10-15 13:19:20] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/116/working/out_dir/assembly.fasta\n", "job_stdout": "", "job_stderr": "", "stderr": "[2024-10-15 13:19:04] INFO: Starting Flye 2.9.4-b1799\n[2024-10-15 13:19:04] INFO: >>>STAGE: configure\n[2024-10-15 13:19:04] INFO: Configuring run\n[2024-10-15 13:19:04] INFO: Total read length: 6522170\n[2024-10-15 13:19:04] INFO: Reads N50/N90: 2706 / 1386\n[2024-10-15 13:19:04] INFO: Selected minimum overlap: 1000\n[2024-10-15 13:19:04] INFO: >>>STAGE: assembly\n[2024-10-15 13:19:04] INFO: Assembling disjointigs\n[2024-10-15 13:19:04] INFO: Reading sequences\n[2024-10-15 13:19:04] INFO: Building minimizer index\n[2024-10-15 13:19:04] INFO: Pre-calculating index storage\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:19:04] INFO: Filling index\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:19:05] INFO: Extending reads\n[2024-10-15 13:19:07] INFO: Overlap-based coverage: 12\n[2024-10-15 13:19:07] INFO: Median overlap divergence: 0.0135674\n0% 10% 20% 30% 40% 60% 90% 100% \n[2024-10-15 13:19:08] INFO: Assembled 11 disjointigs\n[2024-10-15 13:19:08] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:19:08] INFO: Filtering contained disjointigs\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:19:08] INFO: Contained seqs: 0\n[2024-10-15 13:19:08] INFO: >>>STAGE: consensus\n[2024-10-15 13:19:08] INFO: Running Minimap2\n[2024-10-15 13:19:08] INFO: Computing consensus\n[2024-10-15 13:19:09] INFO: Alignment error rate: 0.018196\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000026058500000087'\n[2024-10-15 13:19:10] INFO: >>>STAGE: repeat\n[2024-10-15 13:19:10] INFO: Building and resolving repeat graph\n[2024-10-15 13:19:10] INFO: Parsing disjointigs\n[2024-10-15 13:19:10] INFO: Building repeat graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:19:10] INFO: Median overlap divergence: 0.00310666\n[2024-10-15 13:19:10] INFO: Parsing reads\n[2024-10-15 13:19:10] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:19:10] INFO: Aligned read sequence: 6404547 / 6522170 (0.981966)\n[2024-10-15 13:19:10] INFO: Median overlap divergence: 0.00691444\n[2024-10-15 13:19:10] INFO: Mean edge coverage: 14\n[2024-10-15 13:19:10] INFO: Simplifying the graph\n[2024-10-15 13:19:11] INFO: >>>STAGE: contigger\n[2024-10-15 13:19:11] INFO: Generating contigs\n[2024-10-15 13:19:11] INFO: Reading sequences\n[2024-10-15 13:19:11] INFO: Generated 5 contigs\n[2024-10-15 13:19:11] INFO: Added 0 scaffold connections\n[2024-10-15 13:19:11] INFO: >>>STAGE: polishing\n[2024-10-15 13:19:11] INFO: Polishing genome (1/1)\n[2024-10-15 13:19:11] INFO: Running minimap2\n[2024-10-15 13:19:11] INFO: Separating alignment into bubbles\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000002605a000000088'\n[2024-10-15 13:19:13] INFO: Alignment error rate: 0.009923\n[2024-10-15 13:19:13] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000002605a800000089'\n[2024-10-15 13:19:20] INFO: >>>STAGE: finalize\n[2024-10-15 13:19:20] INFO: Assembly statistics:\n\n\tTotal length:\t418246\n\tFragments:\t5\n\tFragments N50:\t90299\n\tLargest frg:\t147965\n\tScaffolds:\t0\n\tMean coverage:\t16\n\n[2024-10-15 13:19:20] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/116/working/out_dir/assembly.fasta\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "17 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "17.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:19:20", "plugin": "core", "name": "end_epoch", "raw_value": "1728998360.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:19:03", "plugin": "core", "name": "start_epoch", "raw_value": "1728998343.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "flye/2.9.4+galaxy0-6", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.9.4+galaxy0", "test_index": 6, "time_seconds": 72.62406587600708, "inputs": {"inputs": [{"src": "hda", "id": "1be022ac1d3fa641"}, {"src": "hda", "id": "67eafd9aa381ee3e"}, {"src": "hda", "id": "d7a95779eff2baa3"}, {"src": "hda", "id": "75e6d653eb149930"}, {"src": "hda", "id": "16a43039ed3d7e69"}, {"src": "hda", "id": "8b7e0a50dc24bf7f"}, {"src": "hda", "id": "5ea073fc562c8c0a"}, {"src": "hda", "id": "0e003744c4bdcf0e"}, {"src": "hda", "id": "92818ea27e08ad17"}], "mode_conditional|mode": "--pacbio-corr", "min_overlap": "1000"}, "job": {"model_class": "Job", "id": "ae40488f8ec44751", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:20:42.026033", "create_time": "2024-10-15T13:20:16.566697", "galaxy_version": "23.1", "command_version": "2.9.4-b1799", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.4+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-br7ql", "command_line": "ln -sf '/galaxy/server/database/objects/7/6/c/dataset_76cd2266-9707-4e87-9564-917f18443701.dat' ./input_0.fastq.gz && ln -sf '/galaxy/server/database/objects/b/2/3/dataset_b23e21c9-781b-43d2-8f59-ed60314c9e5e.dat' ./input_1.fastq.gz && ln -sf '/galaxy/server/database/objects/6/e/1/dataset_6e10606c-8ee3-4b4f-8eb3-ceefb254f7eb.dat' ./input_2.fastq.gz && ln -sf '/galaxy/server/database/objects/e/2/4/dataset_e24e0903-950c-49b8-a2fe-88b9ba5238da.dat' ./input_3.fastq.gz && ln -sf '/galaxy/server/database/objects/7/1/2/dataset_712fa5c6-8af4-4770-8def-bd9cd30f5d9d.dat' ./input_4.fastq.gz && ln -sf '/galaxy/server/database/objects/7/9/8/dataset_798be4eb-89c1-436c-a8d8-ed0e0d02173e.dat' ./input_5.fastq.gz && ln -sf '/galaxy/server/database/objects/7/1/c/dataset_71ce6da3-ff62-4c6e-8e3d-2179a7220edf.dat' ./input_6.fastq.gz && ln -sf '/galaxy/server/database/objects/e/e/e/dataset_eee89845-7f4b-4a11-98ec-6f74861e06b5.dat' ./input_7.fastq.gz && ln -sf '/galaxy/server/database/objects/4/7/8/dataset_47834c54-3bd0-4108-9938-75c991ca4dcf.dat' ./input_8.fastq.gz && flye --pacbio-corr ./input_0.fastq.gz ./input_1.fastq.gz ./input_2.fastq.gz ./input_3.fastq.gz ./input_4.fastq.gz ./input_5.fastq.gz ./input_6.fastq.gz ./input_7.fastq.gz ./input_8.fastq.gz -o out_dir -t ${GALAXY_SLOTS:-4} -i 1 -m 1000", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "generate_log": "false", "no_alt_contigs": "false", "asm": "{\"__current_case__\": 1, \"asm_select\": \"false\"}", "meta": "false", "scaffold": "false", "keep_haplotypes": "false", "min_overlap": "\"1000\"", "iterations": "\"1\"", "mode_conditional": "{\"__current_case__\": 4, \"mode\": \"--pacbio-corr\"}"}, "inputs": {"inputs": {"id": "1be022ac1d3fa641", "src": "hda", "uuid": "76cd2266-9707-4e87-9564-917f18443701"}, "inputs1": {"id": "1be022ac1d3fa641", "src": "hda", "uuid": "76cd2266-9707-4e87-9564-917f18443701"}, "inputs2": {"id": "67eafd9aa381ee3e", "src": "hda", "uuid": "b23e21c9-781b-43d2-8f59-ed60314c9e5e"}, "inputs3": {"id": "d7a95779eff2baa3", "src": "hda", "uuid": "6e10606c-8ee3-4b4f-8eb3-ceefb254f7eb"}, "inputs4": {"id": "75e6d653eb149930", "src": "hda", "uuid": "e24e0903-950c-49b8-a2fe-88b9ba5238da"}, "inputs5": {"id": "16a43039ed3d7e69", "src": "hda", "uuid": "712fa5c6-8af4-4770-8def-bd9cd30f5d9d"}, "inputs6": {"id": "8b7e0a50dc24bf7f", "src": "hda", "uuid": "798be4eb-89c1-436c-a8d8-ed0e0d02173e"}, "inputs7": {"id": "5ea073fc562c8c0a", "src": "hda", "uuid": "71ce6da3-ff62-4c6e-8e3d-2179a7220edf"}, "inputs8": {"id": "0e003744c4bdcf0e", "src": "hda", "uuid": "eee89845-7f4b-4a11-98ec-6f74861e06b5"}, "inputs9": {"id": "92818ea27e08ad17", "src": "hda", "uuid": "47834c54-3bd0-4108-9938-75c991ca4dcf"}}, "outputs": {"consensus": {"id": "98d52a5f18a6ad2f", "src": "hda", "uuid": "f0b5c5f0-3131-435b-9046-998dc1afd5bf"}, "assembly_graph": {"id": "b19408af018fa9db", "src": "hda", "uuid": "ee2b2281-e277-465c-b8d1-3a0edc2ad2c8"}, "assembly_gfa": {"id": "8aa7bb2c57670791", "src": "hda", "uuid": "67651d29-47a1-41bb-ae44-f52da4c00324"}, "assembly_info": {"id": "a3d86ff05044d8bb", "src": "hda", "uuid": "7328f717-d9b0-48d0-8ddb-d728742b23c9"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[2024-10-15 13:20:18] INFO: Starting Flye 2.9.4-b1799\n[2024-10-15 13:20:18] INFO: >>>STAGE: configure\n[2024-10-15 13:20:18] INFO: Configuring run\n[2024-10-15 13:20:18] INFO: Total read length: 6522170\n[2024-10-15 13:20:18] INFO: Reads N50/N90: 2706 / 1386\n[2024-10-15 13:20:18] INFO: Selected minimum overlap: 1000\n[2024-10-15 13:20:18] INFO: >>>STAGE: assembly\n[2024-10-15 13:20:18] INFO: Assembling disjointigs\n[2024-10-15 13:20:19] INFO: Reading sequences\n[2024-10-15 13:20:19] INFO: Building minimizer index\n[2024-10-15 13:20:19] INFO: Pre-calculating index storage\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:20:19] INFO: Filling index\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:20:19] INFO: Extending reads\n[2024-10-15 13:20:23] INFO: Overlap-based coverage: 12\n[2024-10-15 13:20:23] INFO: Median overlap divergence: 0.0135261\n0% 10% 20% 30% 40% 80% 90% 100% \n[2024-10-15 13:20:23] INFO: Assembled 9 disjointigs\n[2024-10-15 13:20:23] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:20:23] INFO: Filtering contained disjointigs\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2024-10-15 13:20:23] INFO: Contained seqs: 0\n[2024-10-15 13:20:23] INFO: >>>STAGE: consensus\n[2024-10-15 13:20:23] INFO: Running Minimap2\n[2024-10-15 13:20:24] INFO: Computing consensus\n[2024-10-15 13:20:25] INFO: Alignment error rate: 0.018038\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000002605fe00000093'\n[2024-10-15 13:20:25] INFO: >>>STAGE: repeat\n[2024-10-15 13:20:25] INFO: Building and resolving repeat graph\n[2024-10-15 13:20:25] INFO: Parsing disjointigs\n[2024-10-15 13:20:25] INFO: Building repeat graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2024-10-15 13:20:26] INFO: Median overlap divergence: 0.000647249\n[2024-10-15 13:20:26] INFO: Parsing reads\n[2024-10-15 13:20:26] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:20:26] INFO: Aligned read sequence: 6446322 / 6522170 (0.988371)\n[2024-10-15 13:20:26] INFO: Median overlap divergence: 0.00692594\n[2024-10-15 13:20:26] INFO: Mean edge coverage: 14\n[2024-10-15 13:20:26] INFO: Simplifying the graph\n[2024-10-15 13:20:27] INFO: >>>STAGE: contigger\n[2024-10-15 13:20:27] INFO: Generating contigs\n[2024-10-15 13:20:27] INFO: Reading sequences\n[2024-10-15 13:20:27] INFO: Generated 4 contigs\n[2024-10-15 13:20:27] INFO: Added 0 scaffold connections\n[2024-10-15 13:20:27] INFO: >>>STAGE: polishing\n[2024-10-15 13:20:27] INFO: Polishing genome (1/1)\n[2024-10-15 13:20:27] INFO: Running minimap2\n[2024-10-15 13:20:27] INFO: Separating alignment into bubbles\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000026061700000094'\n[2024-10-15 13:20:29] INFO: Alignment error rate: 0.009693\n[2024-10-15 13:20:29] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000026061f00000095'\n[2024-10-15 13:20:31] INFO: >>>STAGE: finalize\n[2024-10-15 13:20:31] INFO: Assembly statistics:\n\n\tTotal length:\t420087\n\tFragments:\t4\n\tFragments N50:\t147964\n\tLargest frg:\t151093\n\tScaffolds:\t0\n\tMean coverage:\t16\n\n[2024-10-15 13:20:31] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/126/working/out_dir/assembly.fasta\n", "job_stdout": "", "job_stderr": "", "stderr": "[2024-10-15 13:20:18] INFO: Starting Flye 2.9.4-b1799\n[2024-10-15 13:20:18] INFO: >>>STAGE: configure\n[2024-10-15 13:20:18] INFO: Configuring run\n[2024-10-15 13:20:18] INFO: Total read length: 6522170\n[2024-10-15 13:20:18] INFO: Reads N50/N90: 2706 / 1386\n[2024-10-15 13:20:18] INFO: Selected minimum overlap: 1000\n[2024-10-15 13:20:18] INFO: >>>STAGE: assembly\n[2024-10-15 13:20:18] INFO: Assembling disjointigs\n[2024-10-15 13:20:19] INFO: Reading sequences\n[2024-10-15 13:20:19] INFO: Building minimizer index\n[2024-10-15 13:20:19] INFO: Pre-calculating index storage\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:20:19] INFO: Filling index\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:20:19] INFO: Extending reads\n[2024-10-15 13:20:23] INFO: Overlap-based coverage: 12\n[2024-10-15 13:20:23] INFO: Median overlap divergence: 0.0135261\n0% 10% 20% 30% 40% 80% 90% 100% \n[2024-10-15 13:20:23] INFO: Assembled 9 disjointigs\n[2024-10-15 13:20:23] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:20:23] INFO: Filtering contained disjointigs\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2024-10-15 13:20:23] INFO: Contained seqs: 0\n[2024-10-15 13:20:23] INFO: >>>STAGE: consensus\n[2024-10-15 13:20:23] INFO: Running Minimap2\n[2024-10-15 13:20:24] INFO: Computing consensus\n[2024-10-15 13:20:25] INFO: Alignment error rate: 0.018038\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000002605fe00000093'\n[2024-10-15 13:20:25] INFO: >>>STAGE: repeat\n[2024-10-15 13:20:25] INFO: Building and resolving repeat graph\n[2024-10-15 13:20:25] INFO: Parsing disjointigs\n[2024-10-15 13:20:25] INFO: Building repeat graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2024-10-15 13:20:26] INFO: Median overlap divergence: 0.000647249\n[2024-10-15 13:20:26] INFO: Parsing reads\n[2024-10-15 13:20:26] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:20:26] INFO: Aligned read sequence: 6446322 / 6522170 (0.988371)\n[2024-10-15 13:20:26] INFO: Median overlap divergence: 0.00692594\n[2024-10-15 13:20:26] INFO: Mean edge coverage: 14\n[2024-10-15 13:20:26] INFO: Simplifying the graph\n[2024-10-15 13:20:27] INFO: >>>STAGE: contigger\n[2024-10-15 13:20:27] INFO: Generating contigs\n[2024-10-15 13:20:27] INFO: Reading sequences\n[2024-10-15 13:20:27] INFO: Generated 4 contigs\n[2024-10-15 13:20:27] INFO: Added 0 scaffold connections\n[2024-10-15 13:20:27] INFO: >>>STAGE: polishing\n[2024-10-15 13:20:27] INFO: Polishing genome (1/1)\n[2024-10-15 13:20:27] INFO: Running minimap2\n[2024-10-15 13:20:27] INFO: Separating alignment into bubbles\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000026061700000094'\n[2024-10-15 13:20:29] INFO: Alignment error rate: 0.009693\n[2024-10-15 13:20:29] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000026061f00000095'\n[2024-10-15 13:20:31] INFO: >>>STAGE: finalize\n[2024-10-15 13:20:31] INFO: Assembly statistics:\n\n\tTotal length:\t420087\n\tFragments:\t4\n\tFragments N50:\t147964\n\tLargest frg:\t151093\n\tScaffolds:\t0\n\tMean coverage:\t16\n\n[2024-10-15 13:20:31] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/126/working/out_dir/assembly.fasta\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "13 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "13.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:20:31", "plugin": "core", "name": "end_epoch", "raw_value": "1728998431.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:20:18", "plugin": "core", "name": "start_epoch", "raw_value": "1728998418.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "flye/2.9.4+galaxy0-7", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.9.4+galaxy0", "test_index": 7, "time_seconds": 73.55935907363892, "inputs": {"inputs": [{"src": "hda", "id": "bb6f7b42abade847"}, {"src": "hda", "id": "5c310a9480ece756"}, {"src": "hda", "id": "458988af3e7792cd"}, {"src": "hda", "id": "12a26ea74826e63f"}, {"src": "hda", "id": "4d54824c735b57b4"}, {"src": "hda", "id": "13c4e7828ccc58ce"}, {"src": "hda", "id": "2e9e482e69c8aeb2"}, {"src": "hda", "id": "7731b7cee7d44af9"}, {"src": "hda", "id": "469ddaea73cbf3ec"}], "mode_conditional|mode": "--nano-hq", "min_overlap": "1000", "scaffold": true}, "job": {"model_class": "Job", "id": "46681efbe29c065a", "state": "error", "exit_code": null, "update_time": "2024-10-15T13:21:58.188593", "create_time": "2024-10-15T13:21:31.136328", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.4+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-mbbvd", "command_line": "ln -sf '/galaxy/server/database/objects/6/2/8/dataset_6283ee97-319b-44c0-ab82-b5569de1109a.dat' ./input_0.fastq.gz && ln -sf '/galaxy/server/database/objects/3/4/7/dataset_34785ae1-3816-4230-8df5-a7cead808363.dat' ./input_1.fastq.gz && ln -sf '/galaxy/server/database/objects/7/4/a/dataset_74a69b8a-dc3c-4819-a217-4b47e09898d3.dat' ./input_2.fastq.gz && ln -sf '/galaxy/server/database/objects/4/6/a/dataset_46af7dbf-2749-4a82-a9a4-b41a8cd16303.dat' ./input_3.fastq.gz && ln -sf '/galaxy/server/database/objects/4/1/0/dataset_41054a97-ba14-4285-973d-5562f2b380f8.dat' ./input_4.fastq.gz && ln -sf '/galaxy/server/database/objects/a/3/1/dataset_a3143b0c-5c23-44a0-b516-da5669d28c43.dat' ./input_5.fastq.gz && ln -sf '/galaxy/server/database/objects/b/8/7/dataset_b879667b-6006-4fc3-989e-e950d6f2c7ab.dat' ./input_6.fastq.gz && ln -sf '/galaxy/server/database/objects/0/9/f/dataset_09f7162e-6e71-4e3d-8a2c-fff5659c0bd1.dat' ./input_7.fastq.gz && ln -sf '/galaxy/server/database/objects/7/c/b/dataset_7cb5dfa6-ed30-4ef8-9f2e-1c51a0c0470b.dat' ./input_8.fastq.gz && flye --nano-hq ./input_0.fastq.gz ./input_1.fastq.gz ./input_2.fastq.gz ./input_3.fastq.gz ./input_4.fastq.gz ./input_5.fastq.gz ./input_6.fastq.gz ./input_7.fastq.gz ./input_8.fastq.gz -o out_dir -t ${GALAXY_SLOTS:-4} -i 1 -m 1000  --scaffold", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "generate_log": "false", "no_alt_contigs": "false", "asm": "{\"__current_case__\": 1, \"asm_select\": \"false\"}", "meta": "false", "scaffold": "true", "keep_haplotypes": "false", "min_overlap": "\"1000\"", "iterations": "\"1\"", "mode_conditional": "{\"__current_case__\": 2, \"mode\": \"--nano-hq\"}"}, "inputs": {"inputs": {"id": "bb6f7b42abade847", "src": "hda", "uuid": "6283ee97-319b-44c0-ab82-b5569de1109a"}, "inputs1": {"id": "bb6f7b42abade847", "src": "hda", "uuid": "6283ee97-319b-44c0-ab82-b5569de1109a"}, "inputs2": {"id": "5c310a9480ece756", "src": "hda", "uuid": "34785ae1-3816-4230-8df5-a7cead808363"}, "inputs3": {"id": "458988af3e7792cd", "src": "hda", "uuid": "74a69b8a-dc3c-4819-a217-4b47e09898d3"}, "inputs4": {"id": "12a26ea74826e63f", "src": "hda", "uuid": "46af7dbf-2749-4a82-a9a4-b41a8cd16303"}, "inputs5": {"id": "4d54824c735b57b4", "src": "hda", "uuid": "41054a97-ba14-4285-973d-5562f2b380f8"}, "inputs6": {"id": "13c4e7828ccc58ce", "src": "hda", "uuid": "a3143b0c-5c23-44a0-b516-da5669d28c43"}, "inputs7": {"id": "2e9e482e69c8aeb2", "src": "hda", "uuid": "b879667b-6006-4fc3-989e-e950d6f2c7ab"}, "inputs8": {"id": "7731b7cee7d44af9", "src": "hda", "uuid": "09f7162e-6e71-4e3d-8a2c-fff5659c0bd1"}, "inputs9": {"id": "469ddaea73cbf3ec", "src": "hda", "uuid": "7cb5dfa6-ed30-4ef8-9f2e-1c51a0c0470b"}}, "outputs": {"consensus": {"id": "b8e9b5a45d100f34", "src": "hda", "uuid": "53c9ba26-b1a8-4e24-8ed2-8ee5097f83e8"}, "assembly_graph": {"id": "47e1154921cb0fb1", "src": "hda", "uuid": "0749d1c5-9b65-4feb-918c-507f06730349"}, "assembly_gfa": {"id": "f05b95b9bbe68602", "src": "hda", "uuid": "957d7310-092d-43cc-b72f-b71c8f292b84"}, "assembly_info": {"id": "cb26d098a9a788f8", "src": "hda", "uuid": "6394f13d-af7f-4411-92f4-39a253fb9364"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": null, "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.4+galaxy0, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.4+galaxy0, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.4+galaxy0, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.4+galaxy0, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.4+galaxy0, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "flye/2.9.4+galaxy0-8", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.9.4+galaxy0", "test_index": 8, "time_seconds": 101.75905799865723, "inputs": {"inputs": {"src": "hda", "id": "db79a5a7eadd3674"}, "mode_conditional|mode": "--nano-raw", "iterations": "0", "no_alt_contigs": true}, "job": {"model_class": "Job", "id": "4e8ac70cdb8fe945", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:23:38.503639", "create_time": "2024-10-15T13:22:18.374999", "galaxy_version": "23.1", "command_version": "2.9.4-b1799", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.4+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-cj2t9", "command_line": "ln -sf '/galaxy/server/database/objects/9/0/8/dataset_9089338d-2891-455d-b39f-80e727fc09fb.dat' ./input_0.fasta.gz && flye --nano-raw ./input_0.fasta.gz -o out_dir -t ${GALAXY_SLOTS:-4} -i 0   --no-alt-contigs", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "generate_log": "false", "no_alt_contigs": "true", "asm": "{\"__current_case__\": 1, \"asm_select\": \"false\"}", "meta": "false", "scaffold": "false", "keep_haplotypes": "false", "min_overlap": "\"\"", "iterations": "\"0\"", "mode_conditional": "{\"__current_case__\": 0, \"mode\": \"--nano-raw\"}"}, "inputs": {"inputs": {"id": "db79a5a7eadd3674", "src": "hda", "uuid": "9089338d-2891-455d-b39f-80e727fc09fb"}, "inputs1": {"id": "db79a5a7eadd3674", "src": "hda", "uuid": "9089338d-2891-455d-b39f-80e727fc09fb"}}, "outputs": {"consensus": {"id": "e99caefb1555140a", "src": "hda", "uuid": "d31245c3-a7b2-4532-b58b-c263208b431e"}, "assembly_graph": {"id": "cb9d42f0da8cba39", "src": "hda", "uuid": "d23ba826-0eaf-4bdc-bda2-ab9c21474d41"}, "assembly_gfa": {"id": "fd7817becb344c01", "src": "hda", "uuid": "cfd45f62-9866-43fd-a1c8-625a8278be14"}, "assembly_info": {"id": "940946fe82701627", "src": "hda", "uuid": "82e2be22-a5c8-4d46-aafa-84ed4e333724"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[2024-10-15 13:22:20] INFO: Starting Flye 2.9.4-b1799\n[2024-10-15 13:22:20] INFO: >>>STAGE: configure\n[2024-10-15 13:22:20] INFO: Configuring run\n[2024-10-15 13:22:20] INFO: Total read length: 1466260\n[2024-10-15 13:22:20] INFO: Reads N50/N90: 9054 / 4697\n[2024-10-15 13:22:20] INFO: Minimum overlap set to 5000\n[2024-10-15 13:22:20] INFO: >>>STAGE: assembly\n[2024-10-15 13:22:20] INFO: Assembling disjointigs\n[2024-10-15 13:22:20] INFO: Reading sequences\n[2024-10-15 13:22:24] INFO: Counting k-mers:\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:23:17] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:23:17] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:23:22] INFO: Extending reads\n[2024-10-15 13:23:25] INFO: Overlap-based coverage: 42\n[2024-10-15 13:23:25] INFO: Median overlap divergence: 0.105617\n0% 90% 100% \n[2024-10-15 13:23:25] INFO: Assembled 1 disjointigs\n[2024-10-15 13:23:25] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:23:25] INFO: Filtering contained disjointigs\n0% 100% \n[2024-10-15 13:23:25] INFO: Contained seqs: 0\n[2024-10-15 13:23:26] INFO: >>>STAGE: consensus\n[2024-10-15 13:23:26] INFO: Running Minimap2\n[2024-10-15 13:23:26] INFO: Computing consensus\n[2024-10-15 13:23:27] INFO: Alignment error rate: 0.175120\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000002606c2000000a3'\n[2024-10-15 13:23:27] INFO: >>>STAGE: repeat\n[2024-10-15 13:23:27] INFO: Building and resolving repeat graph\n[2024-10-15 13:23:27] INFO: Parsing disjointigs\n[2024-10-15 13:23:27] INFO: Building repeat graph\n0% 100% \n[2024-10-15 13:23:27] INFO: Median overlap divergence: 0.0151003\n[2024-10-15 13:23:27] INFO: Parsing reads\n[2024-10-15 13:23:27] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:23:27] INFO: Aligned read sequence: 1166207 / 1313105 (0.888129)\n[2024-10-15 13:23:27] INFO: Median overlap divergence: 0.0550349\n[2024-10-15 13:23:27] INFO: Mean edge coverage: 33\n[2024-10-15 13:23:27] INFO: Simplifying the graph\n[2024-10-15 13:23:27] INFO: >>>STAGE: contigger\n[2024-10-15 13:23:27] INFO: Generating contigs\n[2024-10-15 13:23:27] INFO: Reading sequences\n[2024-10-15 13:23:27] INFO: Generated 1 contigs\n[2024-10-15 13:23:27] INFO: Added 0 scaffold connections\n[2024-10-15 13:23:27] INFO: >>>STAGE: finalize\n[2024-10-15 13:23:27] INFO: Assembly statistics:\n\n\tTotal length:\t5027\n\tFragments:\t1\n\tFragments N50:\t5027\n\tLargest frg:\t5027\n\tScaffolds:\t0\n\tMean coverage:\t95\n\n[2024-10-15 13:23:27] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/138/working/out_dir/assembly.fasta\n", "job_stdout": "", "job_stderr": "", "stderr": "[2024-10-15 13:22:20] INFO: Starting Flye 2.9.4-b1799\n[2024-10-15 13:22:20] INFO: >>>STAGE: configure\n[2024-10-15 13:22:20] INFO: Configuring run\n[2024-10-15 13:22:20] INFO: Total read length: 1466260\n[2024-10-15 13:22:20] INFO: Reads N50/N90: 9054 / 4697\n[2024-10-15 13:22:20] INFO: Minimum overlap set to 5000\n[2024-10-15 13:22:20] INFO: >>>STAGE: assembly\n[2024-10-15 13:22:20] INFO: Assembling disjointigs\n[2024-10-15 13:22:20] INFO: Reading sequences\n[2024-10-15 13:22:24] INFO: Counting k-mers:\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:23:17] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:23:17] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:23:22] INFO: Extending reads\n[2024-10-15 13:23:25] INFO: Overlap-based coverage: 42\n[2024-10-15 13:23:25] INFO: Median overlap divergence: 0.105617\n0% 90% 100% \n[2024-10-15 13:23:25] INFO: Assembled 1 disjointigs\n[2024-10-15 13:23:25] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:23:25] INFO: Filtering contained disjointigs\n0% 100% \n[2024-10-15 13:23:25] INFO: Contained seqs: 0\n[2024-10-15 13:23:26] INFO: >>>STAGE: consensus\n[2024-10-15 13:23:26] INFO: Running Minimap2\n[2024-10-15 13:23:26] INFO: Computing consensus\n[2024-10-15 13:23:27] INFO: Alignment error rate: 0.175120\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.11/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 600, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.11/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 752, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.11/shutil.py\", line 703, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.11/shutil.py\", line 701, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000002606c2000000a3'\n[2024-10-15 13:23:27] INFO: >>>STAGE: repeat\n[2024-10-15 13:23:27] INFO: Building and resolving repeat graph\n[2024-10-15 13:23:27] INFO: Parsing disjointigs\n[2024-10-15 13:23:27] INFO: Building repeat graph\n0% 100% \n[2024-10-15 13:23:27] INFO: Median overlap divergence: 0.0151003\n[2024-10-15 13:23:27] INFO: Parsing reads\n[2024-10-15 13:23:27] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-10-15 13:23:27] INFO: Aligned read sequence: 1166207 / 1313105 (0.888129)\n[2024-10-15 13:23:27] INFO: Median overlap divergence: 0.0550349\n[2024-10-15 13:23:27] INFO: Mean edge coverage: 33\n[2024-10-15 13:23:27] INFO: Simplifying the graph\n[2024-10-15 13:23:27] INFO: >>>STAGE: contigger\n[2024-10-15 13:23:27] INFO: Generating contigs\n[2024-10-15 13:23:27] INFO: Reading sequences\n[2024-10-15 13:23:27] INFO: Generated 1 contigs\n[2024-10-15 13:23:27] INFO: Added 0 scaffold connections\n[2024-10-15 13:23:27] INFO: >>>STAGE: finalize\n[2024-10-15 13:23:27] INFO: Assembly statistics:\n\n\tTotal length:\t5027\n\tFragments:\t1\n\tFragments N50:\t5027\n\tLargest frg:\t5027\n\tScaffolds:\t0\n\tMean coverage:\t95\n\n[2024-10-15 13:23:27] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/138/working/out_dir/assembly.fasta\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "68.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:23:28", "plugin": "core", "name": "end_epoch", "raw_value": "1728998608.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:22:20", "plugin": "core", "name": "start_epoch", "raw_value": "1728998540.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-0", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 0, "time_seconds": 46.608916997909546, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "5e05113b30637fed"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "bee209aadb0b2af7"}, "library|input_2": {"src": "hda", "id": "3542f034461a533f"}, "library|type": "paired", "adv|reporting_options|reporting_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "b8e9b5a45d100f34", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:52:12.349305", "create_time": "2024-10-15T13:51:49.904196", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-b2jmc", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/6/1/a/dataset_61a0e7c8-d43c-457c-9127-558946516ccc.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/2/6/7/dataset_267e3582-eae5-4e55-bbc2-d9978dcc4e46.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/d/b/e/dataset_dbe8d341-ab25-4443-84e4-73135f139a43.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/7/5/0/dataset_7504a781-469b-4c7a-9ac6-cd160ef3d623.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 1, \"max_primary\": \"\", \"reporting_options_selector\": \"advanced\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 289, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 290, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 288, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "5e05113b30637fed", "src": "hda", "uuid": "61a0e7c8-d43c-457c-9127-558946516ccc"}, "library|input_1": {"id": "bee209aadb0b2af7", "src": "hda", "uuid": "267e3582-eae5-4e55-bbc2-d9978dcc4e46"}, "library|input_2": {"id": "3542f034461a533f", "src": "hda", "uuid": "dbe8d341-ab25-4443-84e4-73135f139a43"}}, "outputs": {"output_alignments": {"id": "35874d7b33016f4a", "src": "hda", "uuid": "7504a781-469b-4c7a-9ac6-cd160ef3d623"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 3\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Calculating Z arrays for bucket 2\nGetting block 5 of 60\n  Entering block accumulator loop for bucket 2:\n  bucket 3: 10%\n  Reserving size (126) for bucket 5\nGetting block 6 of 60\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 3: 20%\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 30%\n  Reserving size (126) for bucket 6\n  bucket 2: 10%\n  bucket 3: 40%\n  Calculating Z arrays for bucket 6\n  bucket 2: 20%\n  bucket 3: 50%\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 2: 30%\n  bucket 4: 10%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 3: 60%\n  bucket 8: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 5: 20%\n  bucket 8: 20%\n  bucket 1: 50%\n  bucket 2: 50%\n  Entering block accumulator loop for bucket 6:\n  bucket 7: 10%\n  bucket 5: 30%\n  bucket 2: 60%\n  bucket 8: 30%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 1: 60%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 8: 40%\n  bucket 1: 70%\n  bucket 4: 60%\n  bucket 7: 20%\n  bucket 8: 50%\n  bucket 6: 10%\n  bucket 1: 80%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 5: 40%\n  bucket 1: 90%\n  bucket 3: 90%\n  bucket 5: 50%\n  bucket 8: 60%\n  bucket 6: 20%\n  bucket 5: 60%\n  bucket 7: 30%\n  bucket 3: 100%\n  bucket 8: 70%\n  bucket 1: 100%\n  bucket 4: 80%\n  bucket 6: 30%\n  Sorting block of length 106 for bucket 3\n  bucket 8: 80%\n  Sorting block of length 42 for bucket 1\n  bucket 4: 90%\n  (Using difference cover)\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 8: 90%\n  bucket 7: 40%\n  bucket 2: 80%\n  bucket 8: 100%\n  bucket 4: 100%\n  bucket 2: 90%\n  bucket 5: 80%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 5: 90%\n  Sorting block of length 84 for bucket 2\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  (Using difference cover)\n  bucket 6: 40%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 6: 50%\n  bucket 7: 60%\n  bucket 6: 60%\n  bucket 7: 70%\n  bucket 6: 70%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 7: 100%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\nGetting block 12 of 60\n  bucket 11: 60%\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  bucket 12: 10%\n  bucket 12: 20%\n  (Using difference cover)\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 15:\n  Calculating Z arrays for bucket 16\n  bucket 15: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 15: 20%\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 16:\n  bucket 17: 20%\n  bucket 15: 30%\n  bucket 17: 30%\n  bucket 16: 10%\n  bucket 15: 40%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 16: 20%\n  bucket 15: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 16: 30%\n  bucket 17: 80%\n  bucket 15: 60%\n  bucket 17: 90%\n  bucket 16: 40%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 15: 70%\n  bucket 16: 50%\n  bucket 15: 80%\n  bucket 16: 60%\n  bucket 15: 90%\n  bucket 16: 70%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\nGetting block 19 of 60\n  Entering block accumulator loop for bucket 18:\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 10%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\n  bucket 19: 10%\n  bucket 18: 30%\n  bucket 19: 20%\n  bucket 18: 40%\n  bucket 19: 30%\n  bucket 18: 50%\n  bucket 19: 40%\n  bucket 18: 60%\n  bucket 19: 50%\n  bucket 18: 70%\n  bucket 19: 60%\n  bucket 18: 80%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 18: 100%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 60%\n  bucket 25: 70%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 80%\n  bucket 26: 10%\n  bucket 25: 90%\n  bucket 26: 20%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 30%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 40%\n  bucket 31: 10%\n  bucket 30: 50%\n  bucket 31: 20%\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  bucket 30: 60%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 30: 70%\n  bucket 31: 50%\n  bucket 30: 80%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 30: 90%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 37 of 60\n  Entering block accumulator loop for bucket 35:\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 10%\n  Entering block accumulator loop for bucket 37:\n  bucket 35: 20%\n  bucket 35: 30%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 40%\n  bucket 37: 10%\n  bucket 35: 50%\n  bucket 36: 10%\n  bucket 37: 20%\n  bucket 35: 60%\n  bucket 36: 20%\n  bucket 37: 30%\n  bucket 35: 70%\n  bucket 36: 30%\n  bucket 37: 40%\n  bucket 35: 80%\n  bucket 36: 40%\n  bucket 37: 50%\n  bucket 35: 90%\n  bucket 36: 50%\n  bucket 35: 100%\n  bucket 37: 60%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 36: 70%\n  bucket 37: 90%\n  bucket 36: 80%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  bucket 39: 20%\n  bucket 39: 30%\n  Entering block accumulator loop for bucket 40:\nGetting block 41 of 60\n  bucket 40: 10%\n  bucket 39: 40%\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 39: 50%\n  bucket 40: 20%\n  bucket 39: 60%\n  bucket 40: 30%\n  bucket 39: 70%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 40%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 41: 10%\n  bucket 40: 50%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 41: 20%\n  bucket 40: 60%\n  bucket 41: 30%\n  bucket 40: 70%\n  bucket 41: 40%\n  bucket 40: 80%\n  bucket 41: 50%\n  bucket 40: 90%\n  bucket 40: 100%\n  bucket 41: 60%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 43\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Entering block accumulator loop for bucket 44:\n  Entering block accumulator loop for bucket 43:\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  bucket 44: 10%\n  bucket 43: 10%\n  bucket 44: 20%\n  bucket 43: 20%\n  bucket 44: 30%\n  bucket 43: 30%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 40%\n  bucket 43: 40%\n  bucket 44: 50%\n  bucket 45: 10%\n  bucket 43: 50%\n  bucket 44: 60%\n  bucket 45: 20%\n  bucket 44: 70%\n  bucket 43: 60%\n  bucket 44: 80%\n  bucket 45: 30%\n  bucket 43: 70%\n  bucket 44: 90%\n  bucket 45: 40%\n  bucket 43: 80%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 50%\n  bucket 43: 90%\n  bucket 45: 60%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 47:\n  bucket 48: 10%\n  bucket 47: 10%\n  bucket 48: 20%\n  bucket 47: 20%\n  bucket 48: 30%\n  bucket 47: 30%\n  bucket 48: 40%\n  bucket 47: 40%\n  bucket 48: 50%\n  bucket 47: 50%\n  bucket 48: 60%\n  bucket 47: 60%\n  bucket 48: 70%\n  bucket 47: 70%\n  bucket 48: 80%\n  bucket 47: 80%\n  bucket 48: 90%\n  bucket 47: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 50%\n  bucket 49: 60%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 49: 90%\n  bucket 50: 40%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 51:\n  bucket 52: 10%\n  bucket 51: 10%\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  bucket 52: 20%\n  bucket 51: 20%\n  bucket 52: 30%\n  bucket 51: 30%\n  bucket 52: 40%\n  bucket 51: 40%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 50%\n  bucket 51: 50%\n  bucket 52: 60%\n  bucket 53: 10%\n  bucket 51: 60%\n  bucket 52: 70%\n  bucket 51: 70%\n  bucket 53: 20%\n  bucket 52: 80%\n  bucket 51: 80%\n  bucket 52: 90%\n  bucket 53: 30%\n  bucket 51: 90%\n  bucket 52: 100%\n  bucket 53: 40%\n  Sorting block of length 106 for bucket 52\n  bucket 51: 100%\n  (Using difference cover)\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 54:\n  bucket 55: 10%\n  bucket 54: 10%\n  bucket 55: 20%\n  bucket 54: 20%\n  Entering block accumulator loop for bucket 56:\n  bucket 54: 30%\n  bucket 55: 30%\n  bucket 54: 40%\n  bucket 56: 10%\n  bucket 54: 50%\n  bucket 55: 40%\n  bucket 56: 20%\n  bucket 54: 60%\n  bucket 55: 50%\n  bucket 56: 30%\n  bucket 54: 70%\n  bucket 55: 60%\n  bucket 56: 40%\n  bucket 55: 70%\n  bucket 54: 80%\n  bucket 56: 50%\n  bucket 55: 80%\n  bucket 54: 90%\n  bucket 56: 60%\n  bucket 55: 90%\n  bucket 54: 100%\n  bucket 56: 70%\n  Sorting block of length 64 for bucket 54\n  bucket 56: 80%\n  (Using difference cover)\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Entering block accumulator loop for bucket 57:\n  Calculating Z arrays for bucket 58\n  bucket 57: 10%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 58: 10%\n  bucket 57: 40%\n  bucket 58: 20%\n  bucket 57: 50%\n  bucket 58: 30%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 58: 40%\n  bucket 57: 90%\n  bucket 58: 50%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  bucket 58: 60%\n  (Using difference cover)\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  bucket 59: 90%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 3\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Calculating Z arrays for bucket 2\nGetting block 5 of 60\n  Entering block accumulator loop for bucket 2:\n  bucket 3: 10%\n  Reserving size (126) for bucket 5\nGetting block 6 of 60\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 3: 20%\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 30%\n  Reserving size (126) for bucket 6\n  bucket 2: 10%\n  bucket 3: 40%\n  Calculating Z arrays for bucket 6\n  bucket 2: 20%\n  bucket 3: 50%\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 2: 30%\n  bucket 4: 10%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 3: 60%\n  bucket 8: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 5: 20%\n  bucket 8: 20%\n  bucket 1: 50%\n  bucket 2: 50%\n  Entering block accumulator loop for bucket 6:\n  bucket 7: 10%\n  bucket 5: 30%\n  bucket 2: 60%\n  bucket 8: 30%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 1: 60%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 8: 40%\n  bucket 1: 70%\n  bucket 4: 60%\n  bucket 7: 20%\n  bucket 8: 50%\n  bucket 6: 10%\n  bucket 1: 80%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 5: 40%\n  bucket 1: 90%\n  bucket 3: 90%\n  bucket 5: 50%\n  bucket 8: 60%\n  bucket 6: 20%\n  bucket 5: 60%\n  bucket 7: 30%\n  bucket 3: 100%\n  bucket 8: 70%\n  bucket 1: 100%\n  bucket 4: 80%\n  bucket 6: 30%\n  Sorting block of length 106 for bucket 3\n  bucket 8: 80%\n  Sorting block of length 42 for bucket 1\n  bucket 4: 90%\n  (Using difference cover)\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 8: 90%\n  bucket 7: 40%\n  bucket 2: 80%\n  bucket 8: 100%\n  bucket 4: 100%\n  bucket 2: 90%\n  bucket 5: 80%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 5: 90%\n  Sorting block of length 84 for bucket 2\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  (Using difference cover)\n  bucket 6: 40%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 6: 50%\n  bucket 7: 60%\n  bucket 6: 60%\n  bucket 7: 70%\n  bucket 6: 70%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 7: 100%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\nGetting block 12 of 60\n  bucket 11: 60%\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  bucket 12: 10%\n  bucket 12: 20%\n  (Using difference cover)\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 15:\n  Calculating Z arrays for bucket 16\n  bucket 15: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 15: 20%\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 16:\n  bucket 17: 20%\n  bucket 15: 30%\n  bucket 17: 30%\n  bucket 16: 10%\n  bucket 15: 40%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 16: 20%\n  bucket 15: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 16: 30%\n  bucket 17: 80%\n  bucket 15: 60%\n  bucket 17: 90%\n  bucket 16: 40%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 15: 70%\n  bucket 16: 50%\n  bucket 15: 80%\n  bucket 16: 60%\n  bucket 15: 90%\n  bucket 16: 70%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\nGetting block 19 of 60\n  Entering block accumulator loop for bucket 18:\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 10%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\n  bucket 19: 10%\n  bucket 18: 30%\n  bucket 19: 20%\n  bucket 18: 40%\n  bucket 19: 30%\n  bucket 18: 50%\n  bucket 19: 40%\n  bucket 18: 60%\n  bucket 19: 50%\n  bucket 18: 70%\n  bucket 19: 60%\n  bucket 18: 80%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 18: 100%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 60%\n  bucket 25: 70%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 80%\n  bucket 26: 10%\n  bucket 25: 90%\n  bucket 26: 20%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 30%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 40%\n  bucket 31: 10%\n  bucket 30: 50%\n  bucket 31: 20%\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  bucket 30: 60%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 30: 70%\n  bucket 31: 50%\n  bucket 30: 80%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 30: 90%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 37 of 60\n  Entering block accumulator loop for bucket 35:\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 10%\n  Entering block accumulator loop for bucket 37:\n  bucket 35: 20%\n  bucket 35: 30%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 40%\n  bucket 37: 10%\n  bucket 35: 50%\n  bucket 36: 10%\n  bucket 37: 20%\n  bucket 35: 60%\n  bucket 36: 20%\n  bucket 37: 30%\n  bucket 35: 70%\n  bucket 36: 30%\n  bucket 37: 40%\n  bucket 35: 80%\n  bucket 36: 40%\n  bucket 37: 50%\n  bucket 35: 90%\n  bucket 36: 50%\n  bucket 35: 100%\n  bucket 37: 60%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 36: 70%\n  bucket 37: 90%\n  bucket 36: 80%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  bucket 39: 20%\n  bucket 39: 30%\n  Entering block accumulator loop for bucket 40:\nGetting block 41 of 60\n  bucket 40: 10%\n  bucket 39: 40%\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 39: 50%\n  bucket 40: 20%\n  bucket 39: 60%\n  bucket 40: 30%\n  bucket 39: 70%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 40%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 41: 10%\n  bucket 40: 50%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 41: 20%\n  bucket 40: 60%\n  bucket 41: 30%\n  bucket 40: 70%\n  bucket 41: 40%\n  bucket 40: 80%\n  bucket 41: 50%\n  bucket 40: 90%\n  bucket 40: 100%\n  bucket 41: 60%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 43\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Entering block accumulator loop for bucket 44:\n  Entering block accumulator loop for bucket 43:\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  bucket 44: 10%\n  bucket 43: 10%\n  bucket 44: 20%\n  bucket 43: 20%\n  bucket 44: 30%\n  bucket 43: 30%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 40%\n  bucket 43: 40%\n  bucket 44: 50%\n  bucket 45: 10%\n  bucket 43: 50%\n  bucket 44: 60%\n  bucket 45: 20%\n  bucket 44: 70%\n  bucket 43: 60%\n  bucket 44: 80%\n  bucket 45: 30%\n  bucket 43: 70%\n  bucket 44: 90%\n  bucket 45: 40%\n  bucket 43: 80%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 50%\n  bucket 43: 90%\n  bucket 45: 60%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 47:\n  bucket 48: 10%\n  bucket 47: 10%\n  bucket 48: 20%\n  bucket 47: 20%\n  bucket 48: 30%\n  bucket 47: 30%\n  bucket 48: 40%\n  bucket 47: 40%\n  bucket 48: 50%\n  bucket 47: 50%\n  bucket 48: 60%\n  bucket 47: 60%\n  bucket 48: 70%\n  bucket 47: 70%\n  bucket 48: 80%\n  bucket 47: 80%\n  bucket 48: 90%\n  bucket 47: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 50%\n  bucket 49: 60%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 49: 90%\n  bucket 50: 40%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 51:\n  bucket 52: 10%\n  bucket 51: 10%\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  bucket 52: 20%\n  bucket 51: 20%\n  bucket 52: 30%\n  bucket 51: 30%\n  bucket 52: 40%\n  bucket 51: 40%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 50%\n  bucket 51: 50%\n  bucket 52: 60%\n  bucket 53: 10%\n  bucket 51: 60%\n  bucket 52: 70%\n  bucket 51: 70%\n  bucket 53: 20%\n  bucket 52: 80%\n  bucket 51: 80%\n  bucket 52: 90%\n  bucket 53: 30%\n  bucket 51: 90%\n  bucket 52: 100%\n  bucket 53: 40%\n  Sorting block of length 106 for bucket 52\n  bucket 51: 100%\n  (Using difference cover)\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 54:\n  bucket 55: 10%\n  bucket 54: 10%\n  bucket 55: 20%\n  bucket 54: 20%\n  Entering block accumulator loop for bucket 56:\n  bucket 54: 30%\n  bucket 55: 30%\n  bucket 54: 40%\n  bucket 56: 10%\n  bucket 54: 50%\n  bucket 55: 40%\n  bucket 56: 20%\n  bucket 54: 60%\n  bucket 55: 50%\n  bucket 56: 30%\n  bucket 54: 70%\n  bucket 55: 60%\n  bucket 56: 40%\n  bucket 55: 70%\n  bucket 54: 80%\n  bucket 56: 50%\n  bucket 55: 80%\n  bucket 54: 90%\n  bucket 56: 60%\n  bucket 55: 90%\n  bucket 54: 100%\n  bucket 56: 70%\n  Sorting block of length 64 for bucket 54\n  bucket 56: 80%\n  (Using difference cover)\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Entering block accumulator loop for bucket 57:\n  Calculating Z arrays for bucket 58\n  bucket 57: 10%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 58: 10%\n  bucket 57: 40%\n  bucket 58: 20%\n  bucket 57: 50%\n  bucket 58: 30%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 58: 40%\n  bucket 57: 90%\n  bucket 58: 50%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  bucket 58: 60%\n  (Using difference cover)\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  bucket 59: 90%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-10-15 13:51:59", "plugin": "core", "name": "end_epoch", "raw_value": "1729000319.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:51:59", "plugin": "core", "name": "start_epoch", "raw_value": "1729000319.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-1", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 1, "time_seconds": 34.84978675842285, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "b3ff723014fb9037"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "ab47699c3cc89e04"}, "library|input_2": {"src": "hda", "id": "25a4fd3348a8e026"}, "library|type": "paired"}, "job": {"model_class": "Job", "id": "db79a5a7eadd3674", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:52:47.272421", "create_time": "2024-10-15T13:52:35.757629", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-fzkjv", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/2/e/4/dataset_2e482f87-c6c0-4104-823f-e18e2b9fa812.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/2/f/1/dataset_2f1dbcbd-04b1-47e3-9381-86d2a543d8e8.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/5/4/2/dataset_542d81f1-ecab-45b5-87de-bf60db6c83fc.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/c/4/6/dataset_c4691624-c938-4980-a27c-20503cdfdc70.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 293, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 294, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 292, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "b3ff723014fb9037", "src": "hda", "uuid": "2e482f87-c6c0-4104-823f-e18e2b9fa812"}, "library|input_1": {"id": "ab47699c3cc89e04", "src": "hda", "uuid": "2f1dbcbd-04b1-47e3-9381-86d2a543d8e8"}, "library|input_2": {"id": "25a4fd3348a8e026", "src": "hda", "uuid": "542d81f1-ecab-45b5-87de-bf60db6c83fc"}}, "outputs": {"output_alignments": {"id": "75577bd655249943", "src": "hda", "uuid": "c4691624-c938-4980-a27c-20503cdfdc70"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\nGetting block 3 of 60\n  bucket 2: 10%\n  bucket 1: 30%\nGetting block 4 of 60\n  bucket 2: 20%\n  Reserving size (126) for bucket 4\n  bucket 1: 40%\n  Reserving size (126) for bucket 3\n  bucket 2: 30%\n  bucket 1: 50%\n  Calculating Z arrays for bucket 3\n  bucket 2: 40%\nGetting block 5 of 60\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Reserving size (126) for bucket 5\n  bucket 1: 60%\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 1: 70%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 80%\nGetting block 6 of 60\n  Calculating Z arrays for bucket 8\n  bucket 1: 90%\n  Calculating Z arrays for bucket 4\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 5\n  bucket 3: 10%\n  bucket 2: 50%\n  Entering block accumulator loop for bucket 8:\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  bucket 3: 20%\n  bucket 1: 100%\n  Entering block accumulator loop for bucket 6:\n  Sorting block of length 42 for bucket 1\n  bucket 8: 10%\n  (Using difference cover)\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 8: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 60%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 20%\n  bucket 2: 70%\n  bucket 7: 10%\n  bucket 3: 30%\n  bucket 5: 10%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 4: 10%\n  bucket 6: 40%\n  bucket 3: 40%\n  bucket 5: 20%\n  bucket 2: 80%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 5: 30%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 4: 20%\n  bucket 2: 90%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 5: 40%\n  bucket 8: 50%\n  bucket 4: 30%\n  bucket 7: 60%\n  bucket 5: 50%\n  bucket 2: 100%\n  bucket 6: 60%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 3: 50%\n  bucket 6: 70%\n  bucket 4: 40%\n  bucket 7: 80%\n  Sorting block of length 84 for bucket 2\n  bucket 8: 70%\n  (Using difference cover)\n  bucket 4: 50%\n  Sorting block time: 00:00:00\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 5: 60%\nReturning block of 43 for bucket 1\n  bucket 6: 80%\n  bucket 3: 70%\n  bucket 7: 90%\n  bucket 5: 70%\n  bucket 3: 80%\n  bucket 6: 90%\n  bucket 7: 100%\n  bucket 5: 80%\n  bucket 8: 80%\n  bucket 3: 90%\n  bucket 8: 90%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 8: 100%\n  bucket 4: 70%\n  bucket 3: 100%\n  bucket 4: 80%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block of length 106 for bucket 3\n  bucket 5: 90%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 5: 100%\n  bucket 4: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  Calculating Z arrays for bucket 11\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 11: 10%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 11: 30%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 11: 40%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 11: 60%\n  bucket 9: 100%\n  bucket 10: 80%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 11: 80%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 12: 10%\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 12: 20%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 12: 30%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 12: 40%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 12: 50%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 12: 60%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 12: 70%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 12: 80%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 12: 90%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 12: 100%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\nGetting block 17 of 60\n  bucket 15: 60%\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Calculating Z arrays for bucket 16\n  bucket 15: 70%\n  bucket 15: 80%\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\n  bucket 15: 90%\n  bucket 16: 10%\n  bucket 17: 10%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  bucket 16: 20%\n  (Using difference cover)\n  bucket 17: 20%\n  bucket 16: 30%\n  bucket 17: 30%\n  bucket 16: 40%\n  bucket 17: 40%\n  bucket 16: 50%\n  bucket 17: 50%\n  bucket 16: 60%\n  bucket 17: 60%\n  bucket 16: 70%\n  bucket 17: 70%\n  bucket 16: 80%\n  bucket 17: 80%\n  bucket 16: 90%\n  bucket 17: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 69 for bucket 15\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\n  bucket 19: 10%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 19: 40%\n  bucket 18: 70%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 19: 60%\n  bucket 18: 90%\n  bucket 19: 70%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 10%\n  bucket 20: 20%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 20: 50%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 21: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 22 of 60\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 22:\n  bucket 23: 10%\n  bucket 22: 10%\n  bucket 23: 20%\n  bucket 22: 20%\n  bucket 23: 30%\n  bucket 22: 30%\n  bucket 23: 40%\n  bucket 22: 40%\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 22: 70%\n  bucket 23: 80%\n  bucket 22: 80%\n  bucket 23: 90%\n  bucket 22: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 24:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 24: 10%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 24: 20%\n  bucket 25: 50%\n  bucket 24: 30%\n  bucket 25: 60%\n  bucket 24: 40%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 24: 50%\n  bucket 25: 90%\n  bucket 24: 60%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  bucket 29: 10%\n  Calculating Z arrays for bucket 30\n  bucket 29: 20%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 29: 40%\n  bucket 30: 20%\n  bucket 29: 50%\n  bucket 30: 30%\n  bucket 29: 60%\n  bucket 30: 40%\n  bucket 29: 70%\n  bucket 30: 50%\n  bucket 29: 80%\n  bucket 30: 60%\n  bucket 29: 90%\n  bucket 30: 70%\n  bucket 29: 100%\n  bucket 30: 80%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\nGetting block 33 of 60\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  bucket 34: 10%\n  Calculating Z arrays for bucket 35\n  bucket 34: 20%\n  bucket 34: 30%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 40%\n  bucket 35: 10%\n  bucket 34: 50%\n  bucket 35: 20%\n  bucket 34: 60%\n  bucket 35: 30%\n  bucket 34: 70%\n  bucket 35: 40%\n  bucket 34: 80%\n  bucket 35: 50%\n  bucket 34: 90%\n  bucket 35: 60%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  bucket 35: 70%\n  (Using difference cover)\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\nGetting block 37 of 60\n  Reserving size (126) for bucket 36\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 36\n  Calculating Z arrays for bucket 37\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 38:\n  bucket 36: 10%\n  bucket 37: 10%\n  bucket 38: 10%\n  bucket 36: 20%\n  bucket 37: 20%\n  bucket 38: 20%\n  bucket 36: 30%\n  bucket 37: 30%\n  bucket 38: 30%\n  bucket 36: 40%\n  bucket 37: 40%\n  bucket 38: 40%\n  bucket 36: 50%\n  bucket 37: 50%\n  bucket 38: 50%\n  bucket 36: 60%\n  bucket 37: 60%\n  bucket 38: 60%\n  bucket 36: 70%\n  bucket 37: 70%\n  bucket 38: 70%\n  bucket 36: 80%\n  bucket 37: 80%\n  bucket 38: 80%\n  bucket 36: 90%\n  bucket 37: 90%\n  bucket 38: 90%\n  bucket 36: 100%\n  bucket 37: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  bucket 39: 30%\n  bucket 39: 40%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 40: 10%\n  bucket 39: 70%\n  bucket 40: 20%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 40: 30%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\nGetting block 43 of 60\n  bucket 42: 50%\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 42: 60%\n  bucket 42: 70%\n  Entering block accumulator loop for bucket 43:\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  bucket 43: 10%\n  bucket 42: 80%\n  Calculating Z arrays for bucket 44\n  bucket 43: 20%\n  bucket 42: 90%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  Entering block accumulator loop for bucket 44:\n  (Using difference cover)\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 44: 10%\n  bucket 43: 70%\n  bucket 44: 20%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 44: 30%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Entering block accumulator loop for bucket 45:\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 10%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 20%\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 45: 30%\n  bucket 46: 30%\n  bucket 45: 40%\n  bucket 46: 40%\n  bucket 45: 50%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 45: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 45: 70%\n  bucket 46: 90%\n  bucket 46: 100%\n  bucket 45: 80%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Entering block accumulator loop for bucket 48:\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  Entering block accumulator loop for bucket 50:\n  bucket 48: 20%\n  bucket 49: 10%\n  bucket 48: 30%\n  bucket 49: 20%\n  bucket 48: 40%\n  bucket 50: 10%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 50: 20%\n  bucket 48: 70%\n  bucket 50: 30%\n  bucket 48: 80%\n  bucket 49: 30%\n  bucket 48: 90%\n  bucket 50: 40%\n  bucket 49: 40%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 50: 50%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 50: 60%\n  bucket 49: 90%\n  bucket 50: 70%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 51: 20%\n  bucket 51: 30%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 40%\n  bucket 52: 10%\n  bucket 51: 50%\n  bucket 52: 20%\n  bucket 51: 60%\n  bucket 52: 30%\n  bucket 51: 70%\n  bucket 52: 40%\n  bucket 51: 80%\n  bucket 52: 50%\n  bucket 51: 90%\n  bucket 52: 60%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  bucket 53: 50%\n  Calculating Z arrays for bucket 54\n  bucket 53: 60%\n  bucket 53: 70%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 54: 10%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Reserving size (126) for bucket 55\n  Entering block accumulator loop for bucket 56:\n  Calculating Z arrays for bucket 55\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  Entering block accumulator loop for bucket 55:\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 55: 10%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 55: 20%\n  bucket 56: 80%\n  bucket 55: 30%\n  bucket 56: 90%\n  bucket 55: 40%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 58:\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 58: 10%\n  bucket 57: 20%\n  bucket 58: 20%\n  bucket 57: 30%\n  bucket 58: 30%\n  bucket 57: 40%\n  bucket 58: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 58: 50%\n  bucket 57: 70%\n  bucket 58: 60%\n  bucket 57: 80%\n  bucket 58: 70%\n  bucket 57: 90%\n  bucket 58: 80%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\nGetting block 60 of 60\n  bucket 59: 50%\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  bucket 59: 60%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 70%\n  bucket 60: 10%\n  bucket 59: 80%\n  bucket 60: 20%\n  bucket 59: 90%\n  bucket 60: 30%\n  bucket 59: 100%\n  bucket 60: 40%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\nGetting block 3 of 60\n  bucket 2: 10%\n  bucket 1: 30%\nGetting block 4 of 60\n  bucket 2: 20%\n  Reserving size (126) for bucket 4\n  bucket 1: 40%\n  Reserving size (126) for bucket 3\n  bucket 2: 30%\n  bucket 1: 50%\n  Calculating Z arrays for bucket 3\n  bucket 2: 40%\nGetting block 5 of 60\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Reserving size (126) for bucket 5\n  bucket 1: 60%\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 1: 70%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 80%\nGetting block 6 of 60\n  Calculating Z arrays for bucket 8\n  bucket 1: 90%\n  Calculating Z arrays for bucket 4\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 5\n  bucket 3: 10%\n  bucket 2: 50%\n  Entering block accumulator loop for bucket 8:\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  bucket 3: 20%\n  bucket 1: 100%\n  Entering block accumulator loop for bucket 6:\n  Sorting block of length 42 for bucket 1\n  bucket 8: 10%\n  (Using difference cover)\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 8: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 60%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 20%\n  bucket 2: 70%\n  bucket 7: 10%\n  bucket 3: 30%\n  bucket 5: 10%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 4: 10%\n  bucket 6: 40%\n  bucket 3: 40%\n  bucket 5: 20%\n  bucket 2: 80%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 5: 30%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 4: 20%\n  bucket 2: 90%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 5: 40%\n  bucket 8: 50%\n  bucket 4: 30%\n  bucket 7: 60%\n  bucket 5: 50%\n  bucket 2: 100%\n  bucket 6: 60%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 3: 50%\n  bucket 6: 70%\n  bucket 4: 40%\n  bucket 7: 80%\n  Sorting block of length 84 for bucket 2\n  bucket 8: 70%\n  (Using difference cover)\n  bucket 4: 50%\n  Sorting block time: 00:00:00\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 5: 60%\nReturning block of 43 for bucket 1\n  bucket 6: 80%\n  bucket 3: 70%\n  bucket 7: 90%\n  bucket 5: 70%\n  bucket 3: 80%\n  bucket 6: 90%\n  bucket 7: 100%\n  bucket 5: 80%\n  bucket 8: 80%\n  bucket 3: 90%\n  bucket 8: 90%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 8: 100%\n  bucket 4: 70%\n  bucket 3: 100%\n  bucket 4: 80%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block of length 106 for bucket 3\n  bucket 5: 90%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 5: 100%\n  bucket 4: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  Calculating Z arrays for bucket 11\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 11: 10%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 11: 30%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 11: 40%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 11: 60%\n  bucket 9: 100%\n  bucket 10: 80%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 11: 80%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 12: 10%\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 12: 20%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 12: 30%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 12: 40%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 12: 50%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 12: 60%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 12: 70%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 12: 80%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 12: 90%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 12: 100%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\nGetting block 17 of 60\n  bucket 15: 60%\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Calculating Z arrays for bucket 16\n  bucket 15: 70%\n  bucket 15: 80%\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\n  bucket 15: 90%\n  bucket 16: 10%\n  bucket 17: 10%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  bucket 16: 20%\n  (Using difference cover)\n  bucket 17: 20%\n  bucket 16: 30%\n  bucket 17: 30%\n  bucket 16: 40%\n  bucket 17: 40%\n  bucket 16: 50%\n  bucket 17: 50%\n  bucket 16: 60%\n  bucket 17: 60%\n  bucket 16: 70%\n  bucket 17: 70%\n  bucket 16: 80%\n  bucket 17: 80%\n  bucket 16: 90%\n  bucket 17: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 69 for bucket 15\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\n  bucket 19: 10%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 19: 40%\n  bucket 18: 70%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 19: 60%\n  bucket 18: 90%\n  bucket 19: 70%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 10%\n  bucket 20: 20%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 20: 50%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 21: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 22 of 60\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 22:\n  bucket 23: 10%\n  bucket 22: 10%\n  bucket 23: 20%\n  bucket 22: 20%\n  bucket 23: 30%\n  bucket 22: 30%\n  bucket 23: 40%\n  bucket 22: 40%\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 22: 70%\n  bucket 23: 80%\n  bucket 22: 80%\n  bucket 23: 90%\n  bucket 22: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 24:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 24: 10%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 24: 20%\n  bucket 25: 50%\n  bucket 24: 30%\n  bucket 25: 60%\n  bucket 24: 40%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 24: 50%\n  bucket 25: 90%\n  bucket 24: 60%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  bucket 29: 10%\n  Calculating Z arrays for bucket 30\n  bucket 29: 20%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 29: 40%\n  bucket 30: 20%\n  bucket 29: 50%\n  bucket 30: 30%\n  bucket 29: 60%\n  bucket 30: 40%\n  bucket 29: 70%\n  bucket 30: 50%\n  bucket 29: 80%\n  bucket 30: 60%\n  bucket 29: 90%\n  bucket 30: 70%\n  bucket 29: 100%\n  bucket 30: 80%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\nGetting block 33 of 60\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  bucket 34: 10%\n  Calculating Z arrays for bucket 35\n  bucket 34: 20%\n  bucket 34: 30%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 40%\n  bucket 35: 10%\n  bucket 34: 50%\n  bucket 35: 20%\n  bucket 34: 60%\n  bucket 35: 30%\n  bucket 34: 70%\n  bucket 35: 40%\n  bucket 34: 80%\n  bucket 35: 50%\n  bucket 34: 90%\n  bucket 35: 60%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  bucket 35: 70%\n  (Using difference cover)\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\nGetting block 37 of 60\n  Reserving size (126) for bucket 36\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 36\n  Calculating Z arrays for bucket 37\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 38:\n  bucket 36: 10%\n  bucket 37: 10%\n  bucket 38: 10%\n  bucket 36: 20%\n  bucket 37: 20%\n  bucket 38: 20%\n  bucket 36: 30%\n  bucket 37: 30%\n  bucket 38: 30%\n  bucket 36: 40%\n  bucket 37: 40%\n  bucket 38: 40%\n  bucket 36: 50%\n  bucket 37: 50%\n  bucket 38: 50%\n  bucket 36: 60%\n  bucket 37: 60%\n  bucket 38: 60%\n  bucket 36: 70%\n  bucket 37: 70%\n  bucket 38: 70%\n  bucket 36: 80%\n  bucket 37: 80%\n  bucket 38: 80%\n  bucket 36: 90%\n  bucket 37: 90%\n  bucket 38: 90%\n  bucket 36: 100%\n  bucket 37: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  bucket 39: 30%\n  bucket 39: 40%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 40: 10%\n  bucket 39: 70%\n  bucket 40: 20%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 40: 30%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\nGetting block 43 of 60\n  bucket 42: 50%\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 42: 60%\n  bucket 42: 70%\n  Entering block accumulator loop for bucket 43:\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  bucket 43: 10%\n  bucket 42: 80%\n  Calculating Z arrays for bucket 44\n  bucket 43: 20%\n  bucket 42: 90%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  Entering block accumulator loop for bucket 44:\n  (Using difference cover)\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 44: 10%\n  bucket 43: 70%\n  bucket 44: 20%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 44: 30%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Entering block accumulator loop for bucket 45:\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 10%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 20%\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 45: 30%\n  bucket 46: 30%\n  bucket 45: 40%\n  bucket 46: 40%\n  bucket 45: 50%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 45: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 45: 70%\n  bucket 46: 90%\n  bucket 46: 100%\n  bucket 45: 80%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Entering block accumulator loop for bucket 48:\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  Entering block accumulator loop for bucket 50:\n  bucket 48: 20%\n  bucket 49: 10%\n  bucket 48: 30%\n  bucket 49: 20%\n  bucket 48: 40%\n  bucket 50: 10%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 50: 20%\n  bucket 48: 70%\n  bucket 50: 30%\n  bucket 48: 80%\n  bucket 49: 30%\n  bucket 48: 90%\n  bucket 50: 40%\n  bucket 49: 40%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 50: 50%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 50: 60%\n  bucket 49: 90%\n  bucket 50: 70%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 51: 20%\n  bucket 51: 30%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 40%\n  bucket 52: 10%\n  bucket 51: 50%\n  bucket 52: 20%\n  bucket 51: 60%\n  bucket 52: 30%\n  bucket 51: 70%\n  bucket 52: 40%\n  bucket 51: 80%\n  bucket 52: 50%\n  bucket 51: 90%\n  bucket 52: 60%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  bucket 53: 50%\n  Calculating Z arrays for bucket 54\n  bucket 53: 60%\n  bucket 53: 70%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 54: 10%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Reserving size (126) for bucket 55\n  Entering block accumulator loop for bucket 56:\n  Calculating Z arrays for bucket 55\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  Entering block accumulator loop for bucket 55:\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 55: 10%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 55: 20%\n  bucket 56: 80%\n  bucket 55: 30%\n  bucket 56: 90%\n  bucket 55: 40%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 58:\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 58: 10%\n  bucket 57: 20%\n  bucket 58: 20%\n  bucket 57: 30%\n  bucket 58: 30%\n  bucket 57: 40%\n  bucket 58: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 58: 50%\n  bucket 57: 70%\n  bucket 58: 60%\n  bucket 57: 80%\n  bucket 58: 70%\n  bucket 57: 90%\n  bucket 58: 80%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\nGetting block 60 of 60\n  bucket 59: 50%\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  bucket 59: 60%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 70%\n  bucket 60: 10%\n  bucket 59: 80%\n  bucket 60: 20%\n  bucket 59: 90%\n  bucket 60: 30%\n  bucket 59: 100%\n  bucket 60: 40%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:52:38", "plugin": "core", "name": "end_epoch", "raw_value": "1729000358.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:52:37", "plugin": "core", "name": "start_epoch", "raw_value": "1729000357.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-10", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 10, "time_seconds": 31.70628070831299, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "2f21ef4be6132188"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "7b0554efd30f6f7a"}, "library|rna_strandness": "R", "library|type": "single", "sum|new_summary": true, "sum|summary_file": true}, "job": {"model_class": "Job", "id": "e1fe1c4eb8b9b559", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:59:24.264328", "create_time": "2024-10-15T13:59:11.746609", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-6zqsr", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/2/d/f/dataset_2df23663-6132-4c79-914d-ad14728b324c.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/6/6/5/dataset_6658475c-f1e1-49db-bb27-6fc45133e6b6.dat' input_f.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'     -U 'input_f.fastq'      --rna-strandness R                        --new-summary  --summary-file summary.txt   | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/e/e/3/dataset_ee3fb318-58d5-4454-9cc2-8a2130c7caf3.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": true, \"summary_file\": true}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 330, \"src\": \"hda\"}]}, \"rna_strandness\": \"R\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 329, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "2f21ef4be6132188", "src": "hda", "uuid": "2df23663-6132-4c79-914d-ad14728b324c"}, "library|input_1": {"id": "7b0554efd30f6f7a", "src": "hda", "uuid": "6658475c-f1e1-49db-bb27-6fc45133e6b6"}}, "outputs": {"summary_file": {"id": "4077647a010e7680", "src": "hda", "uuid": "06a20394-8e0c-4166-9a16-2dbe7d152bca"}, "output_alignments": {"id": "1257d79e30bb51e1", "src": "hda", "uuid": "ee3fb318-58d5-4454-9cc2-8a2130c7caf3"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Reserving size (126) for bucket 1\nGetting block 3 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\nGetting block 4 of 60\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 2\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 5:\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 8\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 4: 10%\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 4: 30%\n  bucket 1: 20%\n  bucket 6: 30%\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 10%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 4: 40%\n  bucket 7: 10%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 4: 50%\n  bucket 5: 50%\n  bucket 1: 30%\n  bucket 6: 60%\n  bucket 8: 10%\n  bucket 1: 40%\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 8: 20%\n  bucket 2: 20%\n  bucket 4: 60%\n  bucket 5: 60%\n  bucket 7: 30%\n  bucket 1: 50%\n  bucket 4: 70%\n  bucket 6: 70%\n  bucket 3: 10%\n  bucket 4: 80%\n  bucket 8: 30%\n  bucket 6: 80%\n  bucket 3: 20%\n  bucket 4: 90%\n  bucket 1: 60%\n  bucket 8: 40%\n  bucket 4: 100%\n  bucket 6: 90%\n  bucket 7: 40%\n  bucket 3: 30%\n  bucket 5: 70%\n  bucket 2: 30%\n  bucket 6: 100%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 3: 40%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 1: 70%\n  bucket 5: 80%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 3: 50%\n  Sorting block of length 90 for bucket 6\n  bucket 5: 90%\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 8: 80%\n  bucket 5: 100%\n  bucket 1: 90%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 8: 90%\n  bucket 1: 100%\n  bucket 3: 80%\n  bucket 7: 70%\n  Sorting block of length 42 for bucket 1\n  bucket 8: 100%\n  bucket 7: 80%\n  bucket 3: 90%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 3: 100%\n  bucket 2: 40%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  bucket 2: 50%\n  (Using difference cover)\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 13: 10%\n  bucket 12: 20%\n  bucket 13: 20%\n  bucket 12: 30%\n  bucket 13: 30%\n  bucket 12: 40%\n  bucket 13: 40%\n  Sorting block time: 00:00:00\n  bucket 12: 50%\nReturning block of 96 for bucket 11\n  bucket 13: 50%\n  bucket 12: 60%\n  bucket 13: 60%\n  bucket 12: 70%\n  bucket 13: 70%\n  bucket 12: 80%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\nGetting block 15 of 60\n  bucket 14: 60%\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\nGetting block 19 of 60\n  Entering block accumulator loop for bucket 18:\n  Reserving size (126) for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  bucket 18: 10%\n  Calculating Z arrays for bucket 20\n  Calculating Z arrays for bucket 19\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 18: 30%\n  Entering block accumulator loop for bucket 19:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 18: 70%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 18: 90%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 18: 100%\n  bucket 20: 80%\n  Sorting block of length 122 for bucket 18\n  bucket 19: 80%\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\nGetting block 22 of 60\n  bucket 21: 30%\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 40%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 50%\n  bucket 22: 10%\n  bucket 21: 60%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 22: 30%\n  bucket 21: 80%\n  bucket 22: 40%\n  bucket 21: 90%\n  bucket 22: 50%\n  bucket 21: 100%\n  bucket 22: 60%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  bucket 23: 80%\n  Calculating Z arrays for bucket 24\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 20%\n  bucket 24: 30%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 40%\n  bucket 25: 10%\n  bucket 24: 50%\n  bucket 25: 20%\n  bucket 24: 60%\n  bucket 25: 30%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  bucket 24: 70%\n  bucket 25: 40%\n  bucket 24: 80%\n  bucket 25: 50%\n  bucket 24: 90%\n  bucket 25: 60%\n  bucket 24: 100%\n  bucket 25: 70%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  bucket 28: 10%\n  Calculating Z arrays for bucket 29\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 29: 10%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 29: 60%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  bucket 29: 100%\n  (Using difference cover)\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Calculating Z arrays for bucket 31\n  bucket 30: 10%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 31: 10%\n  bucket 30: 40%\n  bucket 31: 20%\n  bucket 30: 50%\n  bucket 31: 30%\n  bucket 30: 60%\n  bucket 31: 40%\n  bucket 30: 70%\n  bucket 31: 50%\n  bucket 30: 80%\n  bucket 31: 60%\n  bucket 30: 90%\n  bucket 31: 70%\n  bucket 30: 100%\n  bucket 31: 80%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 40%\n  bucket 32: 50%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 33: 10%\n  bucket 32: 80%\n  bucket 33: 20%\n  bucket 32: 90%\n  bucket 32: 100%\n  bucket 33: 30%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Entering block accumulator loop for bucket 34:\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 10%\n  bucket 36: 10%\n  bucket 35: 20%\n  bucket 36: 20%\n  bucket 35: 30%\n  bucket 36: 30%\n  bucket 35: 40%\n  bucket 36: 40%\n  bucket 35: 50%\n  bucket 36: 50%\n  bucket 35: 60%\n  bucket 36: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 36: 70%\n  bucket 35: 90%\n  bucket 36: 80%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 37:\n  bucket 38: 10%\n  bucket 37: 10%\n  bucket 38: 20%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 38: 30%\n  bucket 37: 60%\n  bucket 38: 40%\n  bucket 37: 70%\n  bucket 38: 50%\n  bucket 37: 80%\n  bucket 38: 60%\n  bucket 37: 90%\n  bucket 38: 70%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  bucket 40: 80%\n  Calculating Z arrays for bucket 41\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 43:\n  Entering block accumulator loop for bucket 42:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 42: 10%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 42: 20%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 42: 30%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 42: 40%\n  bucket 43: 90%\n  bucket 43: 100%\n  bucket 42: 50%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 46: 10%\n  bucket 45: 20%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 45: 30%\n  bucket 46: 40%\n  bucket 45: 40%\n  bucket 46: 50%\n  bucket 45: 50%\n  bucket 46: 60%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 70%\n  bucket 45: 60%\n  bucket 46: 80%\n  Entering block accumulator loop for bucket 47:\n  bucket 45: 70%\n  bucket 46: 90%\n  bucket 47: 10%\n  bucket 45: 80%\n  bucket 47: 20%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  bucket 47: 30%\n  (Using difference cover)\n  bucket 45: 90%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  (Using difference cover)\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Entering block accumulator loop for bucket 48:\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  bucket 48: 10%\n  bucket 48: 20%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 30%\n  bucket 49: 10%\n  bucket 48: 40%\n  bucket 49: 20%\n  bucket 48: 50%\n  bucket 49: 30%\n  bucket 48: 60%\n  bucket 49: 40%\n  bucket 48: 70%\n  bucket 49: 50%\n  bucket 48: 80%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 48: 90%\n  bucket 49: 80%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\nGetting block 51 of 60\n  bucket 50: 10%\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 20%\n  bucket 50: 30%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 51: 10%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 51: 20%\n  bucket 50: 60%\n  bucket 51: 30%\n  bucket 50: 70%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 40%\n  bucket 50: 80%\n  bucket 52: 10%\n  bucket 51: 50%\n  bucket 50: 90%\n  bucket 52: 20%\n  bucket 51: 60%\n  bucket 50: 100%\n  bucket 52: 30%\n  bucket 51: 70%\n  bucket 52: 40%\n  bucket 51: 80%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 52: 50%\n  bucket 51: 90%\n  bucket 52: 60%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 20%\n  bucket 56: 10%\n  bucket 55: 30%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 55: 40%\n  bucket 56: 40%\n  bucket 55: 50%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 55: 60%\n  bucket 56: 70%\n  bucket 55: 70%\n  bucket 56: 80%\n  bucket 55: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  bucket 55: 90%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 20%\n  bucket 58: 10%\n  bucket 57: 30%\n  bucket 58: 20%\n  bucket 57: 40%\n  bucket 58: 30%\n  bucket 57: 50%\n  bucket 58: 40%\n  bucket 57: 60%\n  bucket 58: 50%\n  bucket 57: 70%\n  bucket 58: 60%\n  bucket 57: 80%\n  bucket 58: 70%\n  bucket 57: 90%\n  bucket 58: 80%\n  bucket 57: 100%\n  bucket 58: 90%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\nHISAT2 summary stats:\n\tTotal reads: 10\n\t\tAligned 0 time: 0 (0.00%)\n\t\tAligned 1 time: 10 (100.00%)\n\t\tAligned >1 times: 0 (0.00%)\n\tOverall alignment rate: 100.00%\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\nHISAT2 summary stats:\n\tTotal reads: 10\n\t\tAligned 0 time: 0 (0.00%)\n\t\tAligned 1 time: 10 (100.00%)\n\t\tAligned >1 times: 0 (0.00%)\n\tOverall alignment rate: 100.00%\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Reserving size (126) for bucket 1\nGetting block 3 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\nGetting block 4 of 60\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 2\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 5:\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 8\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 4: 10%\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 4: 30%\n  bucket 1: 20%\n  bucket 6: 30%\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 10%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 4: 40%\n  bucket 7: 10%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 4: 50%\n  bucket 5: 50%\n  bucket 1: 30%\n  bucket 6: 60%\n  bucket 8: 10%\n  bucket 1: 40%\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 8: 20%\n  bucket 2: 20%\n  bucket 4: 60%\n  bucket 5: 60%\n  bucket 7: 30%\n  bucket 1: 50%\n  bucket 4: 70%\n  bucket 6: 70%\n  bucket 3: 10%\n  bucket 4: 80%\n  bucket 8: 30%\n  bucket 6: 80%\n  bucket 3: 20%\n  bucket 4: 90%\n  bucket 1: 60%\n  bucket 8: 40%\n  bucket 4: 100%\n  bucket 6: 90%\n  bucket 7: 40%\n  bucket 3: 30%\n  bucket 5: 70%\n  bucket 2: 30%\n  bucket 6: 100%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 3: 40%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 1: 70%\n  bucket 5: 80%\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 3: 50%\n  Sorting block of length 90 for bucket 6\n  bucket 5: 90%\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 8: 80%\n  bucket 5: 100%\n  bucket 1: 90%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 8: 90%\n  bucket 1: 100%\n  bucket 3: 80%\n  bucket 7: 70%\n  Sorting block of length 42 for bucket 1\n  bucket 8: 100%\n  bucket 7: 80%\n  bucket 3: 90%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 3: 100%\n  bucket 2: 40%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  bucket 2: 50%\n  (Using difference cover)\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 13: 10%\n  bucket 12: 20%\n  bucket 13: 20%\n  bucket 12: 30%\n  bucket 13: 30%\n  bucket 12: 40%\n  bucket 13: 40%\n  Sorting block time: 00:00:00\n  bucket 12: 50%\nReturning block of 96 for bucket 11\n  bucket 13: 50%\n  bucket 12: 60%\n  bucket 13: 60%\n  bucket 12: 70%\n  bucket 13: 70%\n  bucket 12: 80%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\nGetting block 15 of 60\n  bucket 14: 60%\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\nGetting block 19 of 60\n  Entering block accumulator loop for bucket 18:\n  Reserving size (126) for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  bucket 18: 10%\n  Calculating Z arrays for bucket 20\n  Calculating Z arrays for bucket 19\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 18: 30%\n  Entering block accumulator loop for bucket 19:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 18: 70%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 18: 90%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 18: 100%\n  bucket 20: 80%\n  Sorting block of length 122 for bucket 18\n  bucket 19: 80%\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\nGetting block 22 of 60\n  bucket 21: 30%\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 40%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 50%\n  bucket 22: 10%\n  bucket 21: 60%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 22: 30%\n  bucket 21: 80%\n  bucket 22: 40%\n  bucket 21: 90%\n  bucket 22: 50%\n  bucket 21: 100%\n  bucket 22: 60%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  bucket 23: 80%\n  Calculating Z arrays for bucket 24\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 20%\n  bucket 24: 30%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 40%\n  bucket 25: 10%\n  bucket 24: 50%\n  bucket 25: 20%\n  bucket 24: 60%\n  bucket 25: 30%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  bucket 24: 70%\n  bucket 25: 40%\n  bucket 24: 80%\n  bucket 25: 50%\n  bucket 24: 90%\n  bucket 25: 60%\n  bucket 24: 100%\n  bucket 25: 70%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  bucket 28: 10%\n  Calculating Z arrays for bucket 29\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 29: 10%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 29: 60%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  bucket 29: 100%\n  (Using difference cover)\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Calculating Z arrays for bucket 31\n  bucket 30: 10%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 31: 10%\n  bucket 30: 40%\n  bucket 31: 20%\n  bucket 30: 50%\n  bucket 31: 30%\n  bucket 30: 60%\n  bucket 31: 40%\n  bucket 30: 70%\n  bucket 31: 50%\n  bucket 30: 80%\n  bucket 31: 60%\n  bucket 30: 90%\n  bucket 31: 70%\n  bucket 30: 100%\n  bucket 31: 80%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 40%\n  bucket 32: 50%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 33: 10%\n  bucket 32: 80%\n  bucket 33: 20%\n  bucket 32: 90%\n  bucket 32: 100%\n  bucket 33: 30%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Entering block accumulator loop for bucket 34:\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 10%\n  bucket 36: 10%\n  bucket 35: 20%\n  bucket 36: 20%\n  bucket 35: 30%\n  bucket 36: 30%\n  bucket 35: 40%\n  bucket 36: 40%\n  bucket 35: 50%\n  bucket 36: 50%\n  bucket 35: 60%\n  bucket 36: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 36: 70%\n  bucket 35: 90%\n  bucket 36: 80%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 37:\n  bucket 38: 10%\n  bucket 37: 10%\n  bucket 38: 20%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 38: 30%\n  bucket 37: 60%\n  bucket 38: 40%\n  bucket 37: 70%\n  bucket 38: 50%\n  bucket 37: 80%\n  bucket 38: 60%\n  bucket 37: 90%\n  bucket 38: 70%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  bucket 40: 80%\n  Calculating Z arrays for bucket 41\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 43:\n  Entering block accumulator loop for bucket 42:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 42: 10%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 42: 20%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 42: 30%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 42: 40%\n  bucket 43: 90%\n  bucket 43: 100%\n  bucket 42: 50%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 46: 10%\n  bucket 45: 20%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 45: 30%\n  bucket 46: 40%\n  bucket 45: 40%\n  bucket 46: 50%\n  bucket 45: 50%\n  bucket 46: 60%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 70%\n  bucket 45: 60%\n  bucket 46: 80%\n  Entering block accumulator loop for bucket 47:\n  bucket 45: 70%\n  bucket 46: 90%\n  bucket 47: 10%\n  bucket 45: 80%\n  bucket 47: 20%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  bucket 47: 30%\n  (Using difference cover)\n  bucket 45: 90%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  (Using difference cover)\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Entering block accumulator loop for bucket 48:\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  bucket 48: 10%\n  bucket 48: 20%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 30%\n  bucket 49: 10%\n  bucket 48: 40%\n  bucket 49: 20%\n  bucket 48: 50%\n  bucket 49: 30%\n  bucket 48: 60%\n  bucket 49: 40%\n  bucket 48: 70%\n  bucket 49: 50%\n  bucket 48: 80%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 48: 90%\n  bucket 49: 80%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\nGetting block 51 of 60\n  bucket 50: 10%\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 20%\n  bucket 50: 30%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 51: 10%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 51: 20%\n  bucket 50: 60%\n  bucket 51: 30%\n  bucket 50: 70%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 40%\n  bucket 50: 80%\n  bucket 52: 10%\n  bucket 51: 50%\n  bucket 50: 90%\n  bucket 52: 20%\n  bucket 51: 60%\n  bucket 50: 100%\n  bucket 52: 30%\n  bucket 51: 70%\n  bucket 52: 40%\n  bucket 51: 80%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 52: 50%\n  bucket 51: 90%\n  bucket 52: 60%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 20%\n  bucket 56: 10%\n  bucket 55: 30%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 55: 40%\n  bucket 56: 40%\n  bucket 55: 50%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 55: 60%\n  bucket 56: 70%\n  bucket 55: 70%\n  bucket 56: 80%\n  bucket 55: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  bucket 55: 90%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 20%\n  bucket 58: 10%\n  bucket 57: 30%\n  bucket 58: 20%\n  bucket 57: 40%\n  bucket 58: 30%\n  bucket 57: 50%\n  bucket 58: 40%\n  bucket 57: 60%\n  bucket 58: 50%\n  bucket 57: 70%\n  bucket 58: 60%\n  bucket 57: 80%\n  bucket 58: 70%\n  bucket 57: 90%\n  bucket 58: 80%\n  bucket 57: 100%\n  bucket 58: 90%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:59:14", "plugin": "core", "name": "end_epoch", "raw_value": "1729000754.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:59:13", "plugin": "core", "name": "start_epoch", "raw_value": "1729000753.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-11", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 11, "time_seconds": 32.589951276779175, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "129425a51482b451"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "0d4e60b93d3a8698"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "48967c5dbfc9d20c", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:59:56.973298", "create_time": "2024-10-15T13:59:45.056964", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-hdt6v", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/7/3/e/dataset_73eec041-8eea-44ac-a71d-d6a255aae8b9.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        seqtk seq -1 '/galaxy/server/database/objects/6/a/5/dataset_6a5f31a3-aa8a-4044-81d9-934c1b7b2d2c.dat' > input_f.fastq && seqtk seq -2 '/galaxy/server/database/objects/6/a/5/dataset_6a5f31a3-aa8a-4044-81d9-934c1b7b2d2c.dat' > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/f/9/7/dataset_f97ba8e6-7a97-4b48-8b7a-e1fcea564359.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 334, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 333, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "129425a51482b451", "src": "hda", "uuid": "73eec041-8eea-44ac-a71d-d6a255aae8b9"}, "library|input_1": {"id": "0d4e60b93d3a8698", "src": "hda", "uuid": "6a5f31a3-aa8a-4044-81d9-934c1b7b2d2c"}}, "outputs": {"output_alignments": {"id": "22b1654a3a0e923c", "src": "hda", "uuid": "f97ba8e6-7a97-4b48-8b7a-e1fcea564359"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 2:\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  bucket 2: 10%\n  Calculating Z arrays for bucket 4\n  bucket 1: 30%\n  Calculating Z arrays for bucket 3\n  bucket 2: 20%\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 4:\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 1: 50%\n  bucket 4: 10%\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\nGetting block 7 of 60\n  bucket 2: 30%\n  Calculating Z arrays for bucket 5\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 1: 60%\n  Calculating Z arrays for bucket 6\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 8\n  bucket 4: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 50%\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 5: 10%\n  bucket 4: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 2: 70%\n  bucket 5: 20%\n  bucket 4: 60%\n  bucket 6: 10%\n  bucket 1: 80%\n  bucket 8: 10%\n  bucket 6: 20%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 80%\n  bucket 8: 20%\n  bucket 5: 30%\n  bucket 4: 70%\n  bucket 3: 10%\n  bucket 2: 90%\n  bucket 4: 80%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 8: 30%\n  bucket 4: 90%\n  bucket 1: 90%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 8: 40%\n  bucket 1: 100%\n  bucket 2: 100%\n  bucket 5: 60%\n  Sorting block of length 84 for bucket 2\n  bucket 3: 20%\n  (Using difference cover)\n  Sorting block of length 42 for bucket 1\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 100%\n  bucket 8: 50%\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 7: 10%\n  bucket 6: 50%\n  bucket 8: 60%\n  bucket 5: 80%\n  bucket 6: 60%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 7: 20%\n  bucket 8: 70%\n  bucket 6: 70%\n  bucket 3: 30%\n  bucket 8: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 8: 90%\n  bucket 6: 90%\n  bucket 7: 30%\n  bucket 5: 100%\n  bucket 8: 100%\n  Sorting block of length 63 for bucket 5\n  Sorting block of length 94 for bucket 8\n  bucket 6: 100%\n  (Using difference cover)\n  bucket 7: 40%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 3: 40%\n  bucket 7: 50%\n  (Using difference cover)\n  bucket 3: 50%\n  bucket 7: 60%\n  bucket 3: 60%\n  bucket 7: 70%\n  bucket 3: 70%\n  bucket 7: 80%\n  bucket 3: 80%\n  bucket 7: 90%\n  bucket 3: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 10: 100%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  (Using difference cover)\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\nGetting block 13 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 13: 10%\n  bucket 12: 20%\n  bucket 13: 20%\n  bucket 12: 30%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 12: 40%\n  bucket 13: 50%\n  bucket 12: 50%\n  bucket 13: 60%\n  bucket 12: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 12: 70%\n  bucket 13: 90%\n  bucket 12: 80%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\n  Entering block accumulator loop for bucket 14:\n  Reserving size (126) for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 14: 10%\n  Calculating Z arrays for bucket 15\n  bucket 14: 20%\n  Entering block accumulator loop for bucket 16:\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 50%\n  bucket 16: 20%\n  bucket 14: 60%\n  bucket 15: 10%\n  bucket 16: 30%\n  bucket 14: 70%\n  bucket 15: 20%\n  bucket 14: 80%\n  bucket 16: 40%\n  bucket 14: 90%\n  bucket 15: 30%\n  bucket 16: 50%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 40%\n  bucket 16: 60%\n  bucket 15: 50%\n  bucket 16: 70%\n  bucket 15: 60%\n  bucket 16: 80%\n  bucket 15: 70%\n  bucket 16: 90%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  bucket 18: 80%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 21: 20%\n  bucket 20: 60%\n  bucket 21: 30%\n  bucket 20: 70%\n  bucket 21: 40%\n  bucket 20: 80%\n  bucket 21: 50%\n  bucket 20: 90%\n  bucket 21: 60%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 20%\n  bucket 24: 30%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 25: 10%\n  bucket 24: 60%\n  bucket 25: 20%\n  bucket 24: 70%\n  bucket 25: 30%\n  bucket 24: 80%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  bucket 25: 40%\n  Calculating Z arrays for bucket 26\n  bucket 24: 90%\n  bucket 25: 50%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 60%\n  bucket 26: 10%\n  bucket 25: 70%\n  bucket 26: 20%\n  bucket 25: 80%\n  bucket 26: 30%\n  bucket 25: 90%\n  bucket 26: 40%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\nGetting block 30 of 60\n  Reserving size (126) for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Calculating Z arrays for bucket 29\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 28: 10%\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 30: 10%\n  bucket 28: 30%\n  bucket 29: 10%\n  bucket 30: 20%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 30: 30%\n  bucket 28: 50%\n  bucket 30: 40%\n  bucket 29: 30%\n  bucket 30: 50%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 30: 60%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 30: 70%\n  bucket 28: 80%\n  bucket 30: 80%\n  bucket 29: 60%\n  bucket 30: 90%\n  bucket 28: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  bucket 32: 10%\n  Calculating Z arrays for bucket 33\n  bucket 32: 20%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 30%\n  bucket 33: 10%\n  bucket 32: 40%\n  bucket 33: 20%\n  bucket 32: 50%\n  bucket 33: 30%\n  bucket 32: 60%\n  bucket 33: 40%\n  bucket 32: 70%\n  bucket 33: 50%\n  bucket 32: 80%\n  bucket 33: 60%\n  bucket 32: 90%\n  bucket 33: 70%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 80%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 90%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  bucket 34: 90%\n  Sorting block time: 00:00:00\n  bucket 34: 100%\nReturning block of 45 for bucket 33\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 10%\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 36: 20%\n  bucket 37: 30%\n  bucket 36: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 36: 40%\n  bucket 37: 60%\n  bucket 36: 50%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 36: 60%\n  bucket 37: 90%\n  bucket 36: 70%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 38 of 60\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 39:\n  Entering block accumulator loop for bucket 38:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 38: 10%\n  bucket 39: 30%\n  bucket 38: 20%\n  bucket 39: 40%\n  bucket 38: 30%\n  bucket 39: 50%\n  bucket 38: 40%\n  bucket 39: 60%\n  bucket 38: 50%\n  bucket 39: 70%\n  bucket 38: 60%\n  bucket 39: 80%\n  bucket 38: 70%\n  bucket 39: 90%\n  bucket 38: 80%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Calculating Z arrays for bucket 41\n  bucket 40: 10%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 20%\n  bucket 40: 30%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  bucket 41: 10%\n  bucket 40: 40%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 20%\n  bucket 40: 50%\n  bucket 42: 10%\n  bucket 41: 30%\n  bucket 40: 60%\n  bucket 42: 20%\n  bucket 40: 70%\n  bucket 41: 40%\n  bucket 42: 30%\n  bucket 40: 80%\n  bucket 42: 40%\n  bucket 41: 50%\n  bucket 40: 90%\n  bucket 42: 50%\n  bucket 41: 60%\n  bucket 42: 60%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  bucket 42: 70%\n  bucket 41: 70%\n  bucket 42: 80%\n  (Using difference cover)\n  bucket 41: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 44 of 60\nReturning block of 122 for bucket 43\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 44:\n  bucket 45: 10%\n  bucket 44: 10%\n  bucket 45: 20%\n  bucket 44: 20%\n  bucket 45: 30%\n  bucket 44: 30%\n  bucket 45: 40%\n  bucket 44: 40%\n  bucket 45: 50%\n  bucket 44: 50%\n  bucket 45: 60%\n  bucket 44: 60%\n  bucket 45: 70%\n  bucket 44: 70%\n  bucket 45: 80%\n  bucket 44: 80%\n  bucket 45: 90%\n  bucket 44: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Calculating Z arrays for bucket 48\n  bucket 47: 10%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 20%\n  bucket 48: 10%\n  bucket 47: 30%\n  bucket 48: 20%\n  bucket 47: 40%\n  bucket 48: 30%\n  bucket 47: 50%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 47: 60%\n  bucket 48: 60%\n  bucket 47: 70%\n  bucket 48: 70%\n  bucket 47: 80%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 47: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\nGetting block 50 of 60\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 50\nReturning block of 75 for bucket 49\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 20%\n  bucket 52: 10%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 52: 20%\n  bucket 51: 50%\n  bucket 52: 30%\n  bucket 51: 60%\n  bucket 52: 40%\n  bucket 51: 70%\n  bucket 52: 50%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 52: 60%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  bucket 52: 70%\n  (Using difference cover)\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 54:\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 10%\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 54: 20%\n  bucket 55: 30%\n  bucket 54: 30%\n  bucket 55: 40%\nGetting block 56 of 60\n  bucket 54: 40%\n  bucket 55: 50%\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 60%\n  bucket 54: 50%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 54: 60%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 90%\n  bucket 54: 70%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 10%\n  bucket 54: 80%\n  bucket 56: 20%\n  bucket 54: 90%\n  bucket 56: 30%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 59:\n  Entering block accumulator loop for bucket 58:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 58: 10%\n  bucket 59: 30%\n  bucket 58: 20%\n  bucket 59: 40%\n  bucket 58: 30%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 58: 40%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 58: 50%\n  bucket 59: 90%\n  bucket 58: 60%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 2:\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  bucket 2: 10%\n  Calculating Z arrays for bucket 4\n  bucket 1: 30%\n  Calculating Z arrays for bucket 3\n  bucket 2: 20%\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 4:\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 1: 50%\n  bucket 4: 10%\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\nGetting block 7 of 60\n  bucket 2: 30%\n  Calculating Z arrays for bucket 5\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 1: 60%\n  Calculating Z arrays for bucket 6\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 8\n  bucket 4: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 50%\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 5: 10%\n  bucket 4: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 2: 70%\n  bucket 5: 20%\n  bucket 4: 60%\n  bucket 6: 10%\n  bucket 1: 80%\n  bucket 8: 10%\n  bucket 6: 20%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 80%\n  bucket 8: 20%\n  bucket 5: 30%\n  bucket 4: 70%\n  bucket 3: 10%\n  bucket 2: 90%\n  bucket 4: 80%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 8: 30%\n  bucket 4: 90%\n  bucket 1: 90%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 8: 40%\n  bucket 1: 100%\n  bucket 2: 100%\n  bucket 5: 60%\n  Sorting block of length 84 for bucket 2\n  bucket 3: 20%\n  (Using difference cover)\n  Sorting block of length 42 for bucket 1\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 100%\n  bucket 8: 50%\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 7: 10%\n  bucket 6: 50%\n  bucket 8: 60%\n  bucket 5: 80%\n  bucket 6: 60%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 7: 20%\n  bucket 8: 70%\n  bucket 6: 70%\n  bucket 3: 30%\n  bucket 8: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 8: 90%\n  bucket 6: 90%\n  bucket 7: 30%\n  bucket 5: 100%\n  bucket 8: 100%\n  Sorting block of length 63 for bucket 5\n  Sorting block of length 94 for bucket 8\n  bucket 6: 100%\n  (Using difference cover)\n  bucket 7: 40%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 3: 40%\n  bucket 7: 50%\n  (Using difference cover)\n  bucket 3: 50%\n  bucket 7: 60%\n  bucket 3: 60%\n  bucket 7: 70%\n  bucket 3: 70%\n  bucket 7: 80%\n  bucket 3: 80%\n  bucket 7: 90%\n  bucket 3: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 10: 100%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  (Using difference cover)\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\nGetting block 13 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 13: 10%\n  bucket 12: 20%\n  bucket 13: 20%\n  bucket 12: 30%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 12: 40%\n  bucket 13: 50%\n  bucket 12: 50%\n  bucket 13: 60%\n  bucket 12: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 12: 70%\n  bucket 13: 90%\n  bucket 12: 80%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\n  Entering block accumulator loop for bucket 14:\n  Reserving size (126) for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 14: 10%\n  Calculating Z arrays for bucket 15\n  bucket 14: 20%\n  Entering block accumulator loop for bucket 16:\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 50%\n  bucket 16: 20%\n  bucket 14: 60%\n  bucket 15: 10%\n  bucket 16: 30%\n  bucket 14: 70%\n  bucket 15: 20%\n  bucket 14: 80%\n  bucket 16: 40%\n  bucket 14: 90%\n  bucket 15: 30%\n  bucket 16: 50%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 40%\n  bucket 16: 60%\n  bucket 15: 50%\n  bucket 16: 70%\n  bucket 15: 60%\n  bucket 16: 80%\n  bucket 15: 70%\n  bucket 16: 90%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  bucket 18: 80%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 21: 20%\n  bucket 20: 60%\n  bucket 21: 30%\n  bucket 20: 70%\n  bucket 21: 40%\n  bucket 20: 80%\n  bucket 21: 50%\n  bucket 20: 90%\n  bucket 21: 60%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 20%\n  bucket 24: 30%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 25: 10%\n  bucket 24: 60%\n  bucket 25: 20%\n  bucket 24: 70%\n  bucket 25: 30%\n  bucket 24: 80%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  bucket 25: 40%\n  Calculating Z arrays for bucket 26\n  bucket 24: 90%\n  bucket 25: 50%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 60%\n  bucket 26: 10%\n  bucket 25: 70%\n  bucket 26: 20%\n  bucket 25: 80%\n  bucket 26: 30%\n  bucket 25: 90%\n  bucket 26: 40%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\nGetting block 30 of 60\n  Reserving size (126) for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Calculating Z arrays for bucket 29\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 28: 10%\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 30: 10%\n  bucket 28: 30%\n  bucket 29: 10%\n  bucket 30: 20%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 30: 30%\n  bucket 28: 50%\n  bucket 30: 40%\n  bucket 29: 30%\n  bucket 30: 50%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 30: 60%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 30: 70%\n  bucket 28: 80%\n  bucket 30: 80%\n  bucket 29: 60%\n  bucket 30: 90%\n  bucket 28: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  bucket 32: 10%\n  Calculating Z arrays for bucket 33\n  bucket 32: 20%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 30%\n  bucket 33: 10%\n  bucket 32: 40%\n  bucket 33: 20%\n  bucket 32: 50%\n  bucket 33: 30%\n  bucket 32: 60%\n  bucket 33: 40%\n  bucket 32: 70%\n  bucket 33: 50%\n  bucket 32: 80%\n  bucket 33: 60%\n  bucket 32: 90%\n  bucket 33: 70%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 80%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 90%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  bucket 34: 90%\n  Sorting block time: 00:00:00\n  bucket 34: 100%\nReturning block of 45 for bucket 33\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 10%\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 36: 20%\n  bucket 37: 30%\n  bucket 36: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 36: 40%\n  bucket 37: 60%\n  bucket 36: 50%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 36: 60%\n  bucket 37: 90%\n  bucket 36: 70%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 38 of 60\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 39:\n  Entering block accumulator loop for bucket 38:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 38: 10%\n  bucket 39: 30%\n  bucket 38: 20%\n  bucket 39: 40%\n  bucket 38: 30%\n  bucket 39: 50%\n  bucket 38: 40%\n  bucket 39: 60%\n  bucket 38: 50%\n  bucket 39: 70%\n  bucket 38: 60%\n  bucket 39: 80%\n  bucket 38: 70%\n  bucket 39: 90%\n  bucket 38: 80%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Calculating Z arrays for bucket 41\n  bucket 40: 10%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 20%\n  bucket 40: 30%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  bucket 41: 10%\n  bucket 40: 40%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 20%\n  bucket 40: 50%\n  bucket 42: 10%\n  bucket 41: 30%\n  bucket 40: 60%\n  bucket 42: 20%\n  bucket 40: 70%\n  bucket 41: 40%\n  bucket 42: 30%\n  bucket 40: 80%\n  bucket 42: 40%\n  bucket 41: 50%\n  bucket 40: 90%\n  bucket 42: 50%\n  bucket 41: 60%\n  bucket 42: 60%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  bucket 42: 70%\n  bucket 41: 70%\n  bucket 42: 80%\n  (Using difference cover)\n  bucket 41: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 44 of 60\nReturning block of 122 for bucket 43\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 44:\n  bucket 45: 10%\n  bucket 44: 10%\n  bucket 45: 20%\n  bucket 44: 20%\n  bucket 45: 30%\n  bucket 44: 30%\n  bucket 45: 40%\n  bucket 44: 40%\n  bucket 45: 50%\n  bucket 44: 50%\n  bucket 45: 60%\n  bucket 44: 60%\n  bucket 45: 70%\n  bucket 44: 70%\n  bucket 45: 80%\n  bucket 44: 80%\n  bucket 45: 90%\n  bucket 44: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Calculating Z arrays for bucket 48\n  bucket 47: 10%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 20%\n  bucket 48: 10%\n  bucket 47: 30%\n  bucket 48: 20%\n  bucket 47: 40%\n  bucket 48: 30%\n  bucket 47: 50%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 47: 60%\n  bucket 48: 60%\n  bucket 47: 70%\n  bucket 48: 70%\n  bucket 47: 80%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 47: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\nGetting block 50 of 60\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 50\nReturning block of 75 for bucket 49\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 20%\n  bucket 52: 10%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 52: 20%\n  bucket 51: 50%\n  bucket 52: 30%\n  bucket 51: 60%\n  bucket 52: 40%\n  bucket 51: 70%\n  bucket 52: 50%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 52: 60%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  bucket 52: 70%\n  (Using difference cover)\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 54:\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 10%\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 54: 20%\n  bucket 55: 30%\n  bucket 54: 30%\n  bucket 55: 40%\nGetting block 56 of 60\n  bucket 54: 40%\n  bucket 55: 50%\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 60%\n  bucket 54: 50%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 54: 60%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 90%\n  bucket 54: 70%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 10%\n  bucket 54: 80%\n  bucket 56: 20%\n  bucket 54: 90%\n  bucket 56: 30%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 59:\n  Entering block accumulator loop for bucket 58:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 58: 10%\n  bucket 59: 30%\n  bucket 58: 20%\n  bucket 59: 40%\n  bucket 58: 30%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 58: 40%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 58: 50%\n  bucket 59: 90%\n  bucket 58: 60%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-10-15 13:59:46", "plugin": "core", "name": "end_epoch", "raw_value": "1729000786.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:59:46", "plugin": "core", "name": "start_epoch", "raw_value": "1729000786.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-12", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 12, "time_seconds": 33.90537238121033, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "a46e9fcadb2a5410"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "f388f0653de0f30a"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "fda64571ed628197", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T14:00:31.129629", "create_time": "2024-10-15T14:00:18.877759", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-p7vwt", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/d/b/4/dataset_db4bdcc5-e61a-4423-bc58-95edf92ef2a5.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        bzcat '/galaxy/server/database/objects/6/9/a/dataset_69a07836-a311-4e71-aab0-4a85805819d4.dat' | seqtk seq -1 /dev/stdin > input_f.fastq && bzcat '/galaxy/server/database/objects/6/9/a/dataset_69a07836-a311-4e71-aab0-4a85805819d4.dat' | seqtk seq -2 /dev/stdin > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/e/6/0/dataset_e6032bdb-6613-4a24-a0c0-628dbaabb8d4.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 337, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 336, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "a46e9fcadb2a5410", "src": "hda", "uuid": "db4bdcc5-e61a-4423-bc58-95edf92ef2a5"}, "library|input_1": {"id": "f388f0653de0f30a", "src": "hda", "uuid": "69a07836-a311-4e71-aab0-4a85805819d4"}}, "outputs": {"output_alignments": {"id": "19f75ba17d34ea60", "src": "hda", "uuid": "e6032bdb-6613-4a24-a0c0-628dbaabb8d4"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\nGetting block 4 of 60\n  Entering block accumulator loop for bucket 2:\nGetting block 6 of 60\n  Reserving size (126) for bucket 3\nGetting block 5 of 60\n  Reserving size (126) for bucket 6\n  bucket 2: 10%\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 3\n  bucket 2: 20%\nGetting block 7 of 60\n  bucket 2: 30%\nGetting block 8 of 60\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 4\n  bucket 2: 40%\n  Reserving size (126) for bucket 7\n  bucket 1: 10%\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 20%\n  Calculating Z arrays for bucket 7\n  bucket 2: 50%\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 5\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 4:\n  bucket 6: 10%\n  bucket 1: 30%\n  bucket 3: 10%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 60%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 70%\n  bucket 7: 10%\n  bucket 4: 20%\n  bucket 3: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 10%\n  bucket 3: 40%\n  bucket 8: 10%\n  bucket 2: 80%\n  bucket 1: 50%\n  bucket 7: 30%\n  bucket 4: 30%\n  bucket 2: 90%\n  bucket 5: 20%\n  bucket 3: 50%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 1: 60%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 2: 100%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 3: 70%\n  bucket 8: 30%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 6: 40%\n  bucket 1: 70%\n  bucket 5: 40%\n  bucket 8: 40%\n  bucket 3: 80%\n  bucket 7: 60%\n  bucket 1: 80%\n  bucket 6: 50%\n  bucket 3: 90%\n  bucket 4: 50%\n  bucket 7: 70%\n  bucket 5: 50%\n  bucket 1: 90%\n  bucket 6: 60%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 3: 100%\n  bucket 5: 60%\n  bucket 1: 100%\n  bucket 8: 60%\n  bucket 6: 70%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 6: 80%\n  bucket 7: 90%\n  bucket 5: 70%\n  bucket 8: 70%\n  Sorting block of length 42 for bucket 1\n  bucket 4: 70%\n  bucket 5: 80%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 8: 80%\n  bucket 6: 100%\n  bucket 8: 90%\n  bucket 5: 100%\n  (Using difference cover)\n  bucket 4: 90%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 8: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nGetting block 9 of 60\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\nGetting block 13 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 13: 10%\n  bucket 12: 20%\n  bucket 13: 20%\n  bucket 12: 30%\n  bucket 13: 30%\n  bucket 12: 40%\n  bucket 13: 40%\n  bucket 12: 50%\n  bucket 13: 50%\n  bucket 12: 60%\n  bucket 13: 60%\n  bucket 12: 70%\n  bucket 13: 70%\n  bucket 12: 80%\n  bucket 13: 80%\n  bucket 12: 90%\n  bucket 13: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Entering block accumulator loop for bucket 14:\n  Calculating Z arrays for bucket 15\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 15: 10%\n  bucket 14: 60%\n  bucket 15: 20%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 15: 30%\n  bucket 14: 90%\n  bucket 15: 40%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  bucket 18: 60%\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 70%\n  bucket 19: 10%\n  bucket 18: 80%\n  bucket 19: 20%\n  bucket 18: 90%\n  bucket 19: 30%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 60\n  Entering block accumulator loop for bucket 20:\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 10%\n  bucket 20: 20%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 20: 50%\n  bucket 21: 30%\n  bucket 20: 60%\n  bucket 21: 40%\n  bucket 20: 70%\n  bucket 21: 50%\n  bucket 20: 80%\n  bucket 21: 60%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\nGetting block 25 of 60\n  bucket 24: 100%\n  Reserving size (126) for bucket 25\n  Sorting block of length 68 for bucket 24\n  Calculating Z arrays for bucket 25\n  (Using difference cover)\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Entering block accumulator loop for bucket 26:\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Entering block accumulator loop for bucket 29:\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 20%\n  bucket 30: 10%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 29: 40%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 50%\n  bucket 30: 60%\n  Entering block accumulator loop for bucket 31:\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 31: 10%\n  bucket 29: 70%\n  bucket 30: 80%\n  bucket 31: 20%\n  bucket 30: 90%\n  bucket 29: 80%\n  bucket 31: 30%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 31: 40%\n  bucket 29: 100%\n  bucket 31: 50%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\nGetting block 35 of 60\n  Entering block accumulator loop for bucket 34:\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 10%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 20%\n  bucket 35: 10%\n  bucket 34: 30%\n  bucket 35: 20%\n  bucket 34: 40%\n  bucket 35: 30%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 35: 40%\n  bucket 34: 70%\n  bucket 35: 50%\n  bucket 34: 80%\n  bucket 35: 60%\n  bucket 34: 90%\n  bucket 35: 70%\n  bucket 34: 100%\n  bucket 35: 80%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Entering block accumulator loop for bucket 38:\n  Calculating Z arrays for bucket 39\n  bucket 38: 10%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 20%\n  bucket 39: 10%\n  bucket 38: 30%\n  bucket 39: 20%\n  bucket 38: 40%\n  bucket 39: 30%\n  bucket 38: 50%\n  bucket 39: 40%\n  bucket 38: 60%\n  bucket 39: 50%\n  bucket 38: 70%\n  bucket 39: 60%\n  bucket 38: 80%\n  bucket 39: 70%\n  bucket 38: 90%\n  bucket 39: 80%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  bucket 42: 90%\n  Calculating Z arrays for bucket 43\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Entering block accumulator loop for bucket 44:\n  Calculating Z arrays for bucket 45\n  bucket 44: 10%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 20%\n  bucket 45: 10%\n  bucket 44: 30%\n  bucket 45: 20%\n  bucket 44: 40%\n  bucket 45: 30%\n  bucket 44: 50%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 44: 60%\n  bucket 45: 60%\n  bucket 44: 70%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 44: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 20%\n  bucket 47: 30%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 40%\n  bucket 48: 10%\n  bucket 47: 50%\n  bucket 48: 20%\n  bucket 47: 60%\n  bucket 48: 30%\n  bucket 47: 70%\n  bucket 48: 40%\n  bucket 47: 80%\n  bucket 48: 50%\n  bucket 47: 90%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  bucket 48: 80%\n  (Using difference cover)\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Entering block accumulator loop for bucket 49:\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 20%\n  bucket 50: 10%\n  bucket 49: 30%\n  bucket 50: 20%\n  bucket 49: 40%\n  bucket 50: 30%\n  bucket 49: 50%\n  bucket 50: 40%\n  bucket 49: 60%\n  bucket 50: 50%\n  bucket 49: 70%\n  bucket 50: 60%\n  bucket 49: 80%\n  bucket 50: 70%\n  bucket 49: 90%\n  bucket 50: 80%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 53\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 52: 10%\n  bucket 53: 40%\n  bucket 54: 40%\n  bucket 53: 50%\n  bucket 52: 20%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 52: 30%\n  bucket 53: 70%\n  bucket 54: 60%\n  bucket 52: 40%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 54: 70%\n  bucket 52: 50%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 80%\n  bucket 52: 60%\n  bucket 54: 90%\n  bucket 52: 70%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 57:\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 10%\n  bucket 58: 10%\n  bucket 57: 20%\n  bucket 58: 20%\n  bucket 57: 30%\n  bucket 58: 30%\n  bucket 57: 40%\n  bucket 58: 40%\n  bucket 57: 50%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 57: 60%\n  bucket 58: 70%\n  bucket 57: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 57: 80%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\nGetting block 60 of 60\n  bucket 59: 50%\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  bucket 59: 60%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 70%\n  bucket 60: 10%\n  bucket 59: 80%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 59: 90%\n  bucket 60: 40%\n  bucket 59: 100%\n  bucket 60: 50%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\nGetting block 4 of 60\n  Entering block accumulator loop for bucket 2:\nGetting block 6 of 60\n  Reserving size (126) for bucket 3\nGetting block 5 of 60\n  Reserving size (126) for bucket 6\n  bucket 2: 10%\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 3\n  bucket 2: 20%\nGetting block 7 of 60\n  bucket 2: 30%\nGetting block 8 of 60\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 4\n  bucket 2: 40%\n  Reserving size (126) for bucket 7\n  bucket 1: 10%\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 20%\n  Calculating Z arrays for bucket 7\n  bucket 2: 50%\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 5\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 4:\n  bucket 6: 10%\n  bucket 1: 30%\n  bucket 3: 10%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 60%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 70%\n  bucket 7: 10%\n  bucket 4: 20%\n  bucket 3: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 10%\n  bucket 3: 40%\n  bucket 8: 10%\n  bucket 2: 80%\n  bucket 1: 50%\n  bucket 7: 30%\n  bucket 4: 30%\n  bucket 2: 90%\n  bucket 5: 20%\n  bucket 3: 50%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 1: 60%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 2: 100%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 3: 70%\n  bucket 8: 30%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 6: 40%\n  bucket 1: 70%\n  bucket 5: 40%\n  bucket 8: 40%\n  bucket 3: 80%\n  bucket 7: 60%\n  bucket 1: 80%\n  bucket 6: 50%\n  bucket 3: 90%\n  bucket 4: 50%\n  bucket 7: 70%\n  bucket 5: 50%\n  bucket 1: 90%\n  bucket 6: 60%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 3: 100%\n  bucket 5: 60%\n  bucket 1: 100%\n  bucket 8: 60%\n  bucket 6: 70%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 6: 80%\n  bucket 7: 90%\n  bucket 5: 70%\n  bucket 8: 70%\n  Sorting block of length 42 for bucket 1\n  bucket 4: 70%\n  bucket 5: 80%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 8: 80%\n  bucket 6: 100%\n  bucket 8: 90%\n  bucket 5: 100%\n  (Using difference cover)\n  bucket 4: 90%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 8: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nGetting block 9 of 60\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\nGetting block 13 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 13: 10%\n  bucket 12: 20%\n  bucket 13: 20%\n  bucket 12: 30%\n  bucket 13: 30%\n  bucket 12: 40%\n  bucket 13: 40%\n  bucket 12: 50%\n  bucket 13: 50%\n  bucket 12: 60%\n  bucket 13: 60%\n  bucket 12: 70%\n  bucket 13: 70%\n  bucket 12: 80%\n  bucket 13: 80%\n  bucket 12: 90%\n  bucket 13: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Entering block accumulator loop for bucket 14:\n  Calculating Z arrays for bucket 15\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 15: 10%\n  bucket 14: 60%\n  bucket 15: 20%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 15: 30%\n  bucket 14: 90%\n  bucket 15: 40%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  bucket 18: 60%\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 70%\n  bucket 19: 10%\n  bucket 18: 80%\n  bucket 19: 20%\n  bucket 18: 90%\n  bucket 19: 30%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 60\n  Entering block accumulator loop for bucket 20:\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 10%\n  bucket 20: 20%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 20: 50%\n  bucket 21: 30%\n  bucket 20: 60%\n  bucket 21: 40%\n  bucket 20: 70%\n  bucket 21: 50%\n  bucket 20: 80%\n  bucket 21: 60%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\nGetting block 25 of 60\n  bucket 24: 100%\n  Reserving size (126) for bucket 25\n  Sorting block of length 68 for bucket 24\n  Calculating Z arrays for bucket 25\n  (Using difference cover)\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Entering block accumulator loop for bucket 26:\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Entering block accumulator loop for bucket 29:\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 20%\n  bucket 30: 10%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 29: 40%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 50%\n  bucket 30: 60%\n  Entering block accumulator loop for bucket 31:\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 31: 10%\n  bucket 29: 70%\n  bucket 30: 80%\n  bucket 31: 20%\n  bucket 30: 90%\n  bucket 29: 80%\n  bucket 31: 30%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 31: 40%\n  bucket 29: 100%\n  bucket 31: 50%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\nGetting block 35 of 60\n  Entering block accumulator loop for bucket 34:\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 10%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 20%\n  bucket 35: 10%\n  bucket 34: 30%\n  bucket 35: 20%\n  bucket 34: 40%\n  bucket 35: 30%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 35: 40%\n  bucket 34: 70%\n  bucket 35: 50%\n  bucket 34: 80%\n  bucket 35: 60%\n  bucket 34: 90%\n  bucket 35: 70%\n  bucket 34: 100%\n  bucket 35: 80%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Entering block accumulator loop for bucket 38:\n  Calculating Z arrays for bucket 39\n  bucket 38: 10%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 20%\n  bucket 39: 10%\n  bucket 38: 30%\n  bucket 39: 20%\n  bucket 38: 40%\n  bucket 39: 30%\n  bucket 38: 50%\n  bucket 39: 40%\n  bucket 38: 60%\n  bucket 39: 50%\n  bucket 38: 70%\n  bucket 39: 60%\n  bucket 38: 80%\n  bucket 39: 70%\n  bucket 38: 90%\n  bucket 39: 80%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  bucket 42: 90%\n  Calculating Z arrays for bucket 43\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Entering block accumulator loop for bucket 44:\n  Calculating Z arrays for bucket 45\n  bucket 44: 10%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 20%\n  bucket 45: 10%\n  bucket 44: 30%\n  bucket 45: 20%\n  bucket 44: 40%\n  bucket 45: 30%\n  bucket 44: 50%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 44: 60%\n  bucket 45: 60%\n  bucket 44: 70%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 44: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 20%\n  bucket 47: 30%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 40%\n  bucket 48: 10%\n  bucket 47: 50%\n  bucket 48: 20%\n  bucket 47: 60%\n  bucket 48: 30%\n  bucket 47: 70%\n  bucket 48: 40%\n  bucket 47: 80%\n  bucket 48: 50%\n  bucket 47: 90%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  bucket 48: 80%\n  (Using difference cover)\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Entering block accumulator loop for bucket 49:\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 20%\n  bucket 50: 10%\n  bucket 49: 30%\n  bucket 50: 20%\n  bucket 49: 40%\n  bucket 50: 30%\n  bucket 49: 50%\n  bucket 50: 40%\n  bucket 49: 60%\n  bucket 50: 50%\n  bucket 49: 70%\n  bucket 50: 60%\n  bucket 49: 80%\n  bucket 50: 70%\n  bucket 49: 90%\n  bucket 50: 80%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 53\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 52: 10%\n  bucket 53: 40%\n  bucket 54: 40%\n  bucket 53: 50%\n  bucket 52: 20%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 52: 30%\n  bucket 53: 70%\n  bucket 54: 60%\n  bucket 52: 40%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 54: 70%\n  bucket 52: 50%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 80%\n  bucket 52: 60%\n  bucket 54: 90%\n  bucket 52: 70%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 57:\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 10%\n  bucket 58: 10%\n  bucket 57: 20%\n  bucket 58: 20%\n  bucket 57: 30%\n  bucket 58: 30%\n  bucket 57: 40%\n  bucket 58: 40%\n  bucket 57: 50%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 57: 60%\n  bucket 58: 70%\n  bucket 57: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 57: 80%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\nGetting block 60 of 60\n  bucket 59: 50%\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  bucket 59: 60%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 70%\n  bucket 60: 10%\n  bucket 59: 80%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 59: 90%\n  bucket 60: 40%\n  bucket 59: 100%\n  bucket 60: 50%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 14:00:21", "plugin": "core", "name": "end_epoch", "raw_value": "1729000821.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 14:00:20", "plugin": "core", "name": "start_epoch", "raw_value": "1729000820.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-13", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 13, "time_seconds": 17.995367288589478, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "hisat2/2.2.1+galaxy1-14", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 14, "time_seconds": 33.61081027984619, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "502b4b879bb9cb47"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "3505d479bd735d30"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "1feb84cbc25dbf0d", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T14:01:23.202786", "create_time": "2024-10-15T14:01:09.959823", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-wwlq8", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/0/9/e/dataset_09e62564-f026-4a06-96ae-58acf27bb8b3.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        seqtk seq -1 '/galaxy/server/database/objects/e/9/d/dataset_e9d7431b-0751-4da3-8f07-267aacaea640.dat' > input_f.fasta && seqtk seq -2 '/galaxy/server/database/objects/e/9/d/dataset_e9d7431b-0751-4da3-8f07-267aacaea640.dat' > input_r.fasta &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f   -1 input_f.fasta -2 input_r.fasta                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/7/3/5/dataset_73576aa6-6a9d-4eee-893a-482e3652acf9.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 342, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 341, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "502b4b879bb9cb47", "src": "hda", "uuid": "09e62564-f026-4a06-96ae-58acf27bb8b3"}, "library|input_1": {"id": "3505d479bd735d30", "src": "hda", "uuid": "e9d7431b-0751-4da3-8f07-267aacaea640"}}, "outputs": {"output_alignments": {"id": "04e54d84d0512cbb", "src": "hda", "uuid": "73576aa6-6a9d-4eee-893a-482e3652acf9"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\nGetting block 3 of 60\n  bucket 2: 80%\n  bucket 1: 100%\nGetting block 4 of 60\n  Reserving size (126) for bucket 3\n  Sorting block of length 42 for bucket 1\n  Calculating Z arrays for bucket 3\n  (Using difference cover)\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 90%\n  bucket 3: 10%\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 2: 100%\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 5: 10%\n  bucket 4: 20%\n  bucket 3: 50%\n  Sorting block time: 00:00:00\n  bucket 4: 30%\nReturning block of 43 for bucket 1\n  bucket 5: 20%\n  bucket 3: 60%\n  bucket 4: 40%\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  bucket 4: 50%\n  bucket 5: 30%\n  Calculating Z arrays for bucket 6\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 5: 40%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 5: 50%\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 6: 10%\n  bucket 5: 60%\n  bucket 3: 100%\n  bucket 6: 20%\n  bucket 5: 70%\n  Sorting block of length 106 for bucket 3\n  bucket 6: 30%\n  bucket 5: 80%\n  bucket 6: 40%\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 5: 90%\n  bucket 6: 50%\n  bucket 4: 100%\n  bucket 5: 100%\n  Sorting block of length 68 for bucket 4\n  bucket 6: 60%\n  (Using difference cover)\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nGetting block 7 of 60\nReturning block of 69 for bucket 4\nReturning block of 64 for bucket 5\n  Reserving size (126) for bucket 7\nReturning block of 85 for bucket 2\nReturning block of 107 for bucket 3\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  Sorting block time: 00:00:00\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 7: 70%\nReturning block of 91 for bucket 6\n  Calculating Z arrays for bucket 8\n  bucket 7: 80%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 90%\n  bucket 8: 10%\n  bucket 7: 100%\n  bucket 8: 20%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 70%\n  bucket 10: 80%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 90%\n  bucket 11: 10%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  bucket 11: 20%\n  (Using difference cover)\nGetting block 12 of 60\n  bucket 11: 30%\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 40%\nGetting block 13 of 60\n  bucket 11: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 60%\n  bucket 12: 10%\n  Reserving size (126) for bucket 13\n  bucket 11: 70%\n  Calculating Z arrays for bucket 13\n  bucket 12: 20%\n  bucket 11: 80%\n  bucket 12: 30%\n  bucket 11: 90%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 40%\n  bucket 11: 100%\n  bucket 12: 50%\n  bucket 13: 10%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 60%\n  bucket 13: 20%\n  Sorting block time: 00:00:00\nGetting block 14 of 60\n  bucket 13: 30%\n  bucket 12: 70%\nReturning block of 90 for bucket 10\n  bucket 13: 40%\n  bucket 12: 80%\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 50%\n  bucket 12: 90%\n  Sorting block time: 00:00:00\n  bucket 13: 60%\n  bucket 12: 100%\nReturning block of 96 for bucket 11\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 70%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 15 of 60\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 80%\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 10%\n  bucket 13: 90%\n  bucket 14: 20%\n  bucket 13: 100%\n  Entering block accumulator loop for bucket 16:\n  Sorting block of length 85 for bucket 13\n  bucket 14: 30%\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 10%\n  bucket 14: 40%\n  bucket 15: 10%\n  (Using difference cover)\n  bucket 14: 50%\n  bucket 16: 20%\n  bucket 15: 20%\n  bucket 14: 60%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 14: 70%\n  bucket 16: 50%\n  bucket 15: 50%\n  bucket 14: 80%\n  bucket 16: 60%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 14: 100%\n  bucket 16: 80%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 16: 90%\n  bucket 15: 90%\n  Sorting block time: 00:00:00\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\nReturning block of 83 for bucket 12\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\nGetting block 19 of 60\n  bucket 18: 100%\n  Reserving size (126) for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Sorting block of length 122 for bucket 18\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\n  bucket 20: 10%\n  (Using difference cover)\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  bucket 19: 100%\n  Sorting block of length 97 for bucket 20\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  (Using difference cover)\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Sorting block time: 00:00:00\nGetting block 22 of 60\n  Entering block accumulator loop for bucket 21:\nReturning block of 123 for bucket 18\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 22: 10%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 22: 20%\n  bucket 21: 90%\n  bucket 22: 30%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\nGetting block 27 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 26: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 60%\n  bucket 28: 70%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 29: 10%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 30\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 31: 10%\n  bucket 30: 20%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 30: 30%\n  bucket 31: 40%\n  bucket 30: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 30: 50%\n  bucket 31: 70%\n  bucket 30: 60%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 30: 70%\n  bucket 31: 100%\n  bucket 30: 80%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\nGetting block 33 of 60\n  Entering block accumulator loop for bucket 32:\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 10%\n  bucket 32: 20%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 30%\n  bucket 33: 10%\n  bucket 32: 40%\n  bucket 33: 20%\n  bucket 32: 50%\n  bucket 33: 30%\n  bucket 32: 60%\n  bucket 33: 40%\n  bucket 32: 70%\n  bucket 33: 50%\n  bucket 32: 80%\n  bucket 33: 60%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\nGetting block 35 of 60\n  Calculating Z arrays for bucket 34\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 34: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 34: 20%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 34: 30%\n  bucket 35: 60%\n  bucket 34: 40%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 34: 50%\n  bucket 35: 90%\n  bucket 34: 60%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 36\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 37: 10%\n  bucket 36: 30%\n  bucket 37: 20%\n  bucket 36: 40%\n  bucket 37: 30%\n  bucket 36: 50%\n  bucket 37: 40%\n  bucket 36: 60%\n  bucket 37: 50%\n  bucket 36: 70%\n  bucket 37: 60%\n  bucket 36: 80%\n  bucket 37: 70%\n  bucket 36: 90%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  bucket 37: 100%\n  (Using difference cover)\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\nGetting block 39 of 60\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 10%\n  bucket 41: 10%\n  bucket 40: 20%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 40: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 40: 40%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 40: 50%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 40: 60%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\nGetting block 43 of 60\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  Reserving size (126) for bucket 43\n  bucket 42: 40%\n  Calculating Z arrays for bucket 43\n  bucket 42: 50%\n  bucket 42: 60%\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 70%\n  bucket 43: 10%\n  bucket 42: 80%\n  bucket 43: 20%\n  bucket 42: 90%\n  bucket 43: 30%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\nGetting block 49 of 60\n  Calculating Z arrays for bucket 48\n  Reserving size (126) for bucket 49\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 47:\n  bucket 48: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 20%\n  bucket 47: 10%\n  bucket 49: 10%\n  bucket 48: 30%\n  bucket 47: 20%\n  bucket 49: 20%\n  bucket 48: 40%\n  bucket 47: 30%\n  bucket 48: 50%\n  bucket 49: 30%\n  bucket 48: 60%\n  bucket 47: 40%\n  bucket 49: 40%\n  bucket 48: 70%\n  bucket 47: 50%\n  bucket 48: 80%\n  bucket 49: 50%\n  bucket 47: 60%\n  bucket 48: 90%\n  bucket 49: 60%\n  bucket 47: 70%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 70%\n  bucket 47: 80%\n  bucket 49: 80%\n  bucket 47: 90%\n  bucket 49: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 10%\n  bucket 51: 10%\n  bucket 50: 20%\n  bucket 51: 20%\n  bucket 50: 30%\n  bucket 51: 30%\n  bucket 50: 40%\n  bucket 51: 40%\n  bucket 50: 50%\n  bucket 51: 50%\n  bucket 50: 60%\n  bucket 51: 60%\n  bucket 50: 70%\n  bucket 51: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 51: 80%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\nGetting block 54 of 60\n  bucket 53: 90%\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\nGetting block 56 of 60\n  bucket 55: 70%\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 80%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 90%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  bucket 56: 10%\n  Calculating Z arrays for bucket 57\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 20%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 30%\n  bucket 57: 10%\n  bucket 56: 40%\n  bucket 57: 20%\n  bucket 56: 50%\n  bucket 57: 30%\n  bucket 56: 60%\n  bucket 57: 40%\n  bucket 56: 70%\n  bucket 57: 50%\n  bucket 56: 80%\n  bucket 57: 60%\n  bucket 56: 90%\n  bucket 57: 70%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 58:\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 10%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 10%\n  bucket 58: 20%\n  bucket 59: 20%\n  bucket 58: 30%\n  bucket 60: 10%\n  bucket 58: 40%\n  bucket 60: 20%\n  bucket 59: 30%\n  bucket 58: 50%\n  bucket 60: 30%\n  bucket 58: 60%\n  bucket 60: 40%\n  bucket 59: 40%\n  bucket 60: 50%\n  bucket 59: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 59: 60%\n  bucket 60: 80%\n  bucket 59: 70%\n  bucket 60: 90%\n  bucket 58: 70%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 80%\n  bucket 58: 80%\n  bucket 59: 90%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    3 (30.00%) aligned concordantly 0 times\n    7 (70.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        3 (50.00%) aligned 0 times\n        3 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n85.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    3 (30.00%) aligned concordantly 0 times\n    7 (70.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        3 (50.00%) aligned 0 times\n        3 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n85.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 2: 70%\nGetting block 3 of 60\n  bucket 2: 80%\n  bucket 1: 100%\nGetting block 4 of 60\n  Reserving size (126) for bucket 3\n  Sorting block of length 42 for bucket 1\n  Calculating Z arrays for bucket 3\n  (Using difference cover)\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 90%\n  bucket 3: 10%\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 2: 100%\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 4: 10%\n  bucket 3: 40%\n  bucket 5: 10%\n  bucket 4: 20%\n  bucket 3: 50%\n  Sorting block time: 00:00:00\n  bucket 4: 30%\nReturning block of 43 for bucket 1\n  bucket 5: 20%\n  bucket 3: 60%\n  bucket 4: 40%\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  bucket 4: 50%\n  bucket 5: 30%\n  Calculating Z arrays for bucket 6\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 5: 40%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 5: 50%\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 6: 10%\n  bucket 5: 60%\n  bucket 3: 100%\n  bucket 6: 20%\n  bucket 5: 70%\n  Sorting block of length 106 for bucket 3\n  bucket 6: 30%\n  bucket 5: 80%\n  bucket 6: 40%\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 5: 90%\n  bucket 6: 50%\n  bucket 4: 100%\n  bucket 5: 100%\n  Sorting block of length 68 for bucket 4\n  bucket 6: 60%\n  (Using difference cover)\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nGetting block 7 of 60\nReturning block of 69 for bucket 4\nReturning block of 64 for bucket 5\n  Reserving size (126) for bucket 7\nReturning block of 85 for bucket 2\nReturning block of 107 for bucket 3\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  Sorting block time: 00:00:00\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 7: 70%\nReturning block of 91 for bucket 6\n  Calculating Z arrays for bucket 8\n  bucket 7: 80%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 90%\n  bucket 8: 10%\n  bucket 7: 100%\n  bucket 8: 20%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 70%\n  bucket 10: 80%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 90%\n  bucket 11: 10%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  bucket 11: 20%\n  (Using difference cover)\nGetting block 12 of 60\n  bucket 11: 30%\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 40%\nGetting block 13 of 60\n  bucket 11: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 60%\n  bucket 12: 10%\n  Reserving size (126) for bucket 13\n  bucket 11: 70%\n  Calculating Z arrays for bucket 13\n  bucket 12: 20%\n  bucket 11: 80%\n  bucket 12: 30%\n  bucket 11: 90%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 40%\n  bucket 11: 100%\n  bucket 12: 50%\n  bucket 13: 10%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 60%\n  bucket 13: 20%\n  Sorting block time: 00:00:00\nGetting block 14 of 60\n  bucket 13: 30%\n  bucket 12: 70%\nReturning block of 90 for bucket 10\n  bucket 13: 40%\n  bucket 12: 80%\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 50%\n  bucket 12: 90%\n  Sorting block time: 00:00:00\n  bucket 13: 60%\n  bucket 12: 100%\nReturning block of 96 for bucket 11\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 70%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 15 of 60\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 80%\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 10%\n  bucket 13: 90%\n  bucket 14: 20%\n  bucket 13: 100%\n  Entering block accumulator loop for bucket 16:\n  Sorting block of length 85 for bucket 13\n  bucket 14: 30%\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 10%\n  bucket 14: 40%\n  bucket 15: 10%\n  (Using difference cover)\n  bucket 14: 50%\n  bucket 16: 20%\n  bucket 15: 20%\n  bucket 14: 60%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 14: 70%\n  bucket 16: 50%\n  bucket 15: 50%\n  bucket 14: 80%\n  bucket 16: 60%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 14: 100%\n  bucket 16: 80%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 16: 90%\n  bucket 15: 90%\n  Sorting block time: 00:00:00\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\nReturning block of 83 for bucket 12\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\nGetting block 19 of 60\n  bucket 18: 100%\n  Reserving size (126) for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Sorting block of length 122 for bucket 18\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\n  bucket 20: 10%\n  (Using difference cover)\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  bucket 19: 100%\n  Sorting block of length 97 for bucket 20\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  (Using difference cover)\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Sorting block time: 00:00:00\nGetting block 22 of 60\n  Entering block accumulator loop for bucket 21:\nReturning block of 123 for bucket 18\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 22: 10%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 22: 20%\n  bucket 21: 90%\n  bucket 22: 30%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\nGetting block 27 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 26: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 60%\n  bucket 28: 70%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 29: 10%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 30\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 31: 10%\n  bucket 30: 20%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 30: 30%\n  bucket 31: 40%\n  bucket 30: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 30: 50%\n  bucket 31: 70%\n  bucket 30: 60%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 30: 70%\n  bucket 31: 100%\n  bucket 30: 80%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\nGetting block 33 of 60\n  Entering block accumulator loop for bucket 32:\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 10%\n  bucket 32: 20%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 30%\n  bucket 33: 10%\n  bucket 32: 40%\n  bucket 33: 20%\n  bucket 32: 50%\n  bucket 33: 30%\n  bucket 32: 60%\n  bucket 33: 40%\n  bucket 32: 70%\n  bucket 33: 50%\n  bucket 32: 80%\n  bucket 33: 60%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\nGetting block 35 of 60\n  Calculating Z arrays for bucket 34\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 34: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 34: 20%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 34: 30%\n  bucket 35: 60%\n  bucket 34: 40%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 34: 50%\n  bucket 35: 90%\n  bucket 34: 60%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 36\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 37: 10%\n  bucket 36: 30%\n  bucket 37: 20%\n  bucket 36: 40%\n  bucket 37: 30%\n  bucket 36: 50%\n  bucket 37: 40%\n  bucket 36: 60%\n  bucket 37: 50%\n  bucket 36: 70%\n  bucket 37: 60%\n  bucket 36: 80%\n  bucket 37: 70%\n  bucket 36: 90%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  bucket 37: 100%\n  (Using difference cover)\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\nGetting block 39 of 60\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 10%\n  bucket 41: 10%\n  bucket 40: 20%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 40: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 40: 40%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 40: 50%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 40: 60%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\nGetting block 43 of 60\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  Reserving size (126) for bucket 43\n  bucket 42: 40%\n  Calculating Z arrays for bucket 43\n  bucket 42: 50%\n  bucket 42: 60%\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 70%\n  bucket 43: 10%\n  bucket 42: 80%\n  bucket 43: 20%\n  bucket 42: 90%\n  bucket 43: 30%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\nGetting block 49 of 60\n  Calculating Z arrays for bucket 48\n  Reserving size (126) for bucket 49\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 47:\n  bucket 48: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 20%\n  bucket 47: 10%\n  bucket 49: 10%\n  bucket 48: 30%\n  bucket 47: 20%\n  bucket 49: 20%\n  bucket 48: 40%\n  bucket 47: 30%\n  bucket 48: 50%\n  bucket 49: 30%\n  bucket 48: 60%\n  bucket 47: 40%\n  bucket 49: 40%\n  bucket 48: 70%\n  bucket 47: 50%\n  bucket 48: 80%\n  bucket 49: 50%\n  bucket 47: 60%\n  bucket 48: 90%\n  bucket 49: 60%\n  bucket 47: 70%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 70%\n  bucket 47: 80%\n  bucket 49: 80%\n  bucket 47: 90%\n  bucket 49: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 10%\n  bucket 51: 10%\n  bucket 50: 20%\n  bucket 51: 20%\n  bucket 50: 30%\n  bucket 51: 30%\n  bucket 50: 40%\n  bucket 51: 40%\n  bucket 50: 50%\n  bucket 51: 50%\n  bucket 50: 60%\n  bucket 51: 60%\n  bucket 50: 70%\n  bucket 51: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 51: 80%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\nGetting block 54 of 60\n  bucket 53: 90%\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\nGetting block 56 of 60\n  bucket 55: 70%\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 80%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 90%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  bucket 56: 10%\n  Calculating Z arrays for bucket 57\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 20%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 30%\n  bucket 57: 10%\n  bucket 56: 40%\n  bucket 57: 20%\n  bucket 56: 50%\n  bucket 57: 30%\n  bucket 56: 60%\n  bucket 57: 40%\n  bucket 56: 70%\n  bucket 57: 50%\n  bucket 56: 80%\n  bucket 57: 60%\n  bucket 56: 90%\n  bucket 57: 70%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 58:\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 10%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 10%\n  bucket 58: 20%\n  bucket 59: 20%\n  bucket 58: 30%\n  bucket 60: 10%\n  bucket 58: 40%\n  bucket 60: 20%\n  bucket 59: 30%\n  bucket 58: 50%\n  bucket 60: 30%\n  bucket 58: 60%\n  bucket 60: 40%\n  bucket 59: 40%\n  bucket 60: 50%\n  bucket 59: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 59: 60%\n  bucket 60: 80%\n  bucket 59: 70%\n  bucket 60: 90%\n  bucket 58: 70%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 80%\n  bucket 58: 80%\n  bucket 59: 90%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-10-15 14:01:12", "plugin": "core", "name": "end_epoch", "raw_value": "1729000872.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 14:01:12", "plugin": "core", "name": "start_epoch", "raw_value": "1729000872.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-15", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 15, "time_seconds": 18.9407639503479, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "hisat2/2.2.1+galaxy1-16", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 16, "time_seconds": 24.957731008529663, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "1b22e071e5377b3f"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "7a3896140516afc4"}, "library|type": "paired_interleaved", "adv|sam_options|no_unal": true, "adv|sam_options|read_groups|read_groups_0|rg": "BC:test1", "adv|sam_options|read_groups|read_groups_1|rg": "CN:test2", "adv|sam_options|read_groups|rg_labels": "Yes", "adv|sam_options|chr_text": "--add-chrname", "adv|sam_options|omit_sec_seq": true, "adv|sam_options|sam_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "ccbe16714562f871", "state": "error", "exit_code": null, "update_time": "2024-10-15T14:02:07.898263", "create_time": "2024-10-15T14:02:02.509654", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-wwf7w", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/9/1/9/dataset_919f0e23-c203-495d-86b3-391f89e83a07.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        bzcat '/galaxy/server/database/objects/9/4/5/dataset_945668af-f0d0-45b7-94a8-ac109fbc5a98.dat' | seqtk seq -1 /dev/stdin > input_f.fastq && bzcat '/galaxy/server/database/objects/9/4/5/dataset_945668af-f0d0-45b7-94a8-ac109fbc5a98.dat' | seqtk seq -2 /dev/stdin > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                        --no-unal --rg-id 'read_group' --rg 'BC:test1' --rg 'CN:test2' --add-chrname --omit-sec-seq         | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/9/5/e/dataset_95ebbc68-9309-48c8-a309-452884e6eb66.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 1, \"chr_text\": \"--add-chrname\", \"no_unal\": true, \"omit_sec_seq\": true, \"read_groups\": {\"__current_case__\": 1, \"read_groups\": [{\"__index__\": 0, \"rg\": \"BC:test1\"}, {\"__index__\": 1, \"rg\": \"CN:test2\"}], \"rg_id\": \"read_group\", \"rg_labels\": \"Yes\"}, \"sam_options_selector\": \"advanced\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 347, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 346, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "1b22e071e5377b3f", "src": "hda", "uuid": "919f0e23-c203-495d-86b3-391f89e83a07"}, "library|input_1": {"id": "7a3896140516afc4", "src": "hda", "uuid": "945668af-f0d0-45b7-94a8-ac109fbc5a98"}}, "outputs": {"output_alignments": {"id": "de32638cc493656f", "src": "hda", "uuid": "95ebbc68-9309-48c8-a309-452884e6eb66"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": null, "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "hisat2/2.2.1+galaxy1-2", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 2, "time_seconds": 108.85791873931885, "inputs": {"reference_genome|source": "indexed", "library|input_1": {"src": "hda", "id": "a18e68e33ee7ceab"}, "library|input_2": {"src": "hda", "id": "a967a094ddf9e36a"}, "library|type": "paired"}, "job": {"model_class": "Job", "id": "fd7817becb344c01", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:54:36.677669", "create_time": "2024-10-15T13:53:06.772970", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-fr84j", "command_line": "set -o pipefail;         ln -f -s '/galaxy/server/database/objects/d/f/c/dataset_dfc253bc-1321-4e33-8f29-86fec569125c.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/8/4/7/dataset_84772eeb-7ab5-40d5-aed3-85d7277232d1.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x '/cvmfs/data.galaxyproject.org/managed/hisat2_index/apiMel4/apiMel4'    -1 'input_f.fastq' -2 'input_r.fastq'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/6/e/a/dataset_6ea1aaac-2a97-42fd-ae87-6025187d2111.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"phiX\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/phiX.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 296, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 297, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 0, \"index\": \"apiMel4\", \"source\": \"indexed\"}"}, "inputs": {"library|input_1": {"id": "a18e68e33ee7ceab", "src": "hda", "uuid": "dfc253bc-1321-4e33-8f29-86fec569125c"}, "library|input_2": {"id": "a967a094ddf9e36a", "src": "hda", "uuid": "84772eeb-7ab5-40d5-aed3-85d7277232d1"}}, "outputs": {"output_alignments": {"id": "41cdf29a085f9c3c", "src": "hda", "uuid": "6ea1aaac-2a97-42fd-ae87-6025187d2111"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "78.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:54:26", "plugin": "core", "name": "end_epoch", "raw_value": "1729000466.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:53:08", "plugin": "core", "name": "start_epoch", "raw_value": "1729000388.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_g9pov08g.sam v. /tmp/history_bam_converted_to_sam_l1yz95lo.sam )\n--- local_file\n+++ history_data\n@@ -1,23 +1,5343 @@\n @HD\tVN:1.0\tSO:coordinate\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n-@SQ\tSN:phiX174\tLN:5386\n-phiX174_1141_1609_1:0:0_1:0:0_4\t147\tphiX174\t1540\t60\t70M\t=\t1141\t-469\tTTCTAGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tZS:i:-5\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:4C65\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1141_1609_1:0:0_1:0:0_4\t99\tphiX174\t1141\t60\t70M\t=\t1540\t469\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:24G45\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1363_1914_3:0:0_0:0:0_6\t133\tphiX174\t1845\t0\t*\t=\t1845\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_1363_1914_3:0:0_0:0:0_6\t89\tphiX174\t1845\t60\t70M\t=\t1845\t0\tGCACTATGTTTACTCTTGCGCTTGTTCGTTTTCCGCCTACTGCGACTAAAGAGATTCAGTACCTTAACGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYT:Z:UP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t147\tphiX174\t1896\t60\t70M\t=\t1542\t-424\tAGATTCAGTACCTTAACGCTAAAGGTGCTTTGACTTATACCGATATTGCTGGCGACCCTGTTTTGTATGG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t99\tphiX174\t1542\t60\t70M\t=\t1896\t424\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t147\tphiX174\t639\t60\t70M\t=\t185\t-524\tTATTATGTTCATCCCGTCAACATTCAAACGGCCTGTCGCATCATGGAAGGCGCTGAATTTACGGAAAACA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:37T32\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t163\tphiX174\t1980\t60\t70M\t=\t2432\t522\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:12T57\tYS:i:-9\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t83\tphiX174\t2432\t60\t70M\t=\t1980\t-522\tTTTTTTCTGATAAGCTGGTTCTCAATTCTGTTAATCCAGCTTCTTCGGCACCTGTTTTACACACACCTAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-9\tXN:i:0\tXM:i:3\tXO:i:0\tXG:i:0\tNM:i:3\tMD:Z:24C8C27G8\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t147\tphiX174\t2508\t60\t70M\t=\t2128\t-450\tATCGTCAACGTTATATTTTGATAGTTTGAAGGTTAATGCTGGTATTGGTGGTTTTCTTAATTCCATTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-12\tXN:i:0\tXM:i:4\tXO:i:0\tXG:i:0\tNM:i:4\tMD:Z:29C14A13C3G7\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t99\tphiX174\t2128\t60\t70M\t=\t2508\t450\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-12\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t147\tphiX174\t2670\t60\t70M\t=\t2259\t-481\tTCGCTTTGAGTCTTCGTCGGTTCCGACTACCCTCCCGACTGCCTATGATGTTTATCCTTTGAATGGTCGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:15T54\tYS:i:-2\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t99\tphiX174\t2259\t60\t68M2S\t=\t2670\t481\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-2\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:68\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t163\tphiX174\t2950\t60\t70M\t=\t3308\t428\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-6\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t83\tphiX174\t3308\t60\t70M\t=\t2950\t-428\tTGAGATTAATGCTTGGGAGCGTGCTGGTGCTGATGCTTCCTATGCTGGTATGGTTGACGCCGGATTTGAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-6\tZS:i:-8\tXN:i:0\tXM:i:2\tXO:i:0\tXG:i:0\tNM:i:2\tMD:Z:4C36C28\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t147\tphiX174\t3663\t60\t70M\t=\t3199\t-534\tAATGACCAAATCAATGAAATGACTCGCAAGGTTAGTGCTGAGGTTGACTTAGTTCATCAGCAAACGCAGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:14A55\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t99\tphiX174\t3199\t60\t70M\t=\t3663\t534\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n********\n*SNIP *\n********\n+@SQ\tSN:Group6\tLN:18472937\n+@SQ\tSN:Group7\tLN:13219345\n+@SQ\tSN:Group8\tLN:13546544\n+@SQ\tSN:Group9\tLN:11120453\n+@SQ\tSN:chrM\tLN:16343\n+phiX174_1141_1609_1:0:0_1:0:0_4\t141\t*\t0\t0\t*\t*\t0\t0\tCAAATTAGCATAAGCAGCTTGCAGACCCATAATGTCAATAGATGTGGTAGAAGTCGTCATTTGGCTAGAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1141_1609_1:0:0_1:0:0_4\t77\t*\t0\t0\t*\t*\t0\t0\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t141\t*\t0\t0\t*\t*\t0\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t77\t*\t0\t0\t*\t*\t0\t0\tGCGTTAAGGTACTGAATCTCTTTAGTCGCAGTAGGCGGAAAACGAACAAGCGCAAGAGTAAACATAGTGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t141\t*\t0\t0\t*\t*\t0\t0\tCCATACAAAACAGGGTCGCCAGCAATATCGGTATAAGTCAAAGCACCTTTAGCGTTAAGGTACTGAATCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t141\t*\t0\t0\t*\t*\t0\t0\tTGTTTTCCGTAAATTCAGCGCCTTCCATGATGCGACAGGCCGTTTGAATGTTGACGGGATGAACATAATA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t77\t*\t0\t0\t*\t*\t0\t0\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t141\t*\t0\t0\t*\t*\t0\t0\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGGTGTGTGTAAAACAGGTGCCGAAGAAGCTGGATTAACAGAATTGAGAACCAGCTTATCAGAAAAAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t141\t*\t0\t0\t*\t*\t0\t0\tCTGAATGGAATTAAGAAAACCACCAATACCAGCATTAACCTTCAAACTATCAAAATATAACGTTGACGAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t77\t*\t0\t0\t*\t*\t0\t0\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t141\t*\t0\t0\t*\t*\t0\t0\tGCGACCATTCAAAGGATAAACATCATAGGCAGTCGGGAGGGTAGTCGGAACCGACGAAGACTCAAAGCGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t141\t*\t0\t0\t*\t*\t0\t0\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t77\t*\t0\t0\t*\t*\t0\t0\tCTCAAATCCGGCGTCAACCATACCAGCATAGGAAGCATCAGCACCAGCACGCTCCCAAGCATTAATCTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t141\t*\t0\t0\t*\t*\t0\t0\tTCTGCGTTTGCTGATGAACTAAGTCAACCTCAGCACTAACCTTGCGAGTCATTTCATTGATTTGGTCATT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t77\t*\t0\t0\t*\t*\t0\t0\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t141\t*\t0\t0\t*\t*\t0\t0\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t77\t*\t0\t0\t*\t*\t0\t0\tACCATAAACGCAAGCCTCAACGCAGCGACGAGCACGAGAGCGGTCAGTAGCAATCCAAACTTTGTTACTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n"], "status": "failure"}}, {"id": "hisat2/2.2.1+galaxy1-3", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 3, "time_seconds": 60.56625318527222, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "1cee4d9d6f80630a"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "169baa93a8fc937b"}, "library|input_2": {"src": "hda", "id": "9a995b5e2e5490da"}, "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "1e7b5d4844e73c21", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:55:36.691235", "create_time": "2024-10-15T13:55:00.328720", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-cgp6n", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/a/a/c/dataset_aac4b5ef-bd22-4502-84dd-5ae8b9f9d1c1.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/3/6/9/dataset_369c087f-ba08-4a3a-8d37-3c3b6c017b61.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/1/4/9/dataset_14904efb-67bc-4e99-b690-8b506530a1e3.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'         --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/5/2/f/dataset_52fd331a-8334-4b2e-b78b-51af153994d3.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 300, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 301, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 299, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "1cee4d9d6f80630a", "src": "hda", "uuid": "aac4b5ef-bd22-4502-84dd-5ae8b9f9d1c1"}, "library|input_1": {"id": "169baa93a8fc937b", "src": "hda", "uuid": "369c087f-ba08-4a3a-8d37-3c3b6c017b61"}, "library|input_2": {"id": "9a995b5e2e5490da", "src": "hda", "uuid": "14904efb-67bc-4e99-b690-8b506530a1e3"}}, "outputs": {"output_alignments": {"id": "d22d6a6011190d80", "src": "hda", "uuid": "52fd331a-8334-4b2e-b78b-51af153994d3"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 4 of 60\nGetting block 3 of 60\nGetting block 5 of 60\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (126) for bucket 5\n  bucket 1: 10%\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 5\n  Reserving size (126) for bucket 3\nGetting block 7 of 60\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 3\nGetting block 8 of 60\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  Reserving size (126) for bucket 8\n  bucket 1: 30%\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 10%\n  bucket 1: 40%\n  Calculating Z arrays for bucket 6\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 2: 10%\n  bucket 5: 10%\n  bucket 1: 60%\n  bucket 8: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 1: 70%\n  bucket 8: 20%\n  bucket 2: 20%\n  bucket 8: 30%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 4: 10%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 8: 40%\n  Reserving size (126) for bucket 7\n  bucket 1: 80%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 2: 30%\n  bucket 5: 60%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 6: 40%\n  bucket 8: 50%\n  bucket 3: 40%\n  bucket 4: 40%\n  Calculating Z arrays for bucket 7\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 2: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 3: 60%\n  bucket 2: 50%\n  bucket 4: 60%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 60%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 4: 70%\n  bucket 8: 60%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 6: 70%\n  bucket 1: 100%\n  bucket 5: 90%\n  bucket 8: 70%\n  bucket 3: 80%\n  bucket 5: 100%\n  bucket 4: 80%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 7: 10%\n  bucket 4: 90%\n  bucket 2: 70%\n  bucket 6: 90%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 4: 100%\n  bucket 6: 100%\n  bucket 8: 80%\n  Sorting block of length 90 for bucket 6\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 7: 20%\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 3: 100%\n  bucket 2: 80%\n  bucket 8: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 2: 90%\n  bucket 7: 40%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  bucket 7: 50%\n  (Using difference cover)\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\nGetting block 11 of 60\n  bucket 9: 70%\n  Reserving size (126) for bucket 11\n  bucket 10: 50%\n  bucket 9: 80%\n  Calculating Z arrays for bucket 11\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 100%\n  bucket 10: 80%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 11: 10%\n  bucket 10: 90%\n  bucket 11: 20%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  bucket 11: 30%\n  bucket 11: 40%\n  (Using difference cover)\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\nGetting block 13 of 60\nGetting block 14 of 60\n  Reserving size (126) for bucket 13\n  bucket 12: 10%\n  Calculating Z arrays for bucket 13\n  Reserving size (126) for bucket 14\n  bucket 12: 20%\n  Calculating Z arrays for bucket 14\n  bucket 12: 30%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 40%\n  Entering block accumulator loop for bucket 14:\n  bucket 12: 50%\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 12: 60%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 12: 70%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 12: 80%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 12: 90%\n  bucket 14: 60%\n  bucket 13: 50%\n  bucket 12: 100%\n  bucket 13: 60%\n  Sorting block of length 82 for bucket 12\n  bucket 14: 70%\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 15: 10%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 15: 20%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 15: 30%\n  bucket 16: 90%\n  bucket 15: 40%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\nGetting block 18 of 60\n  bucket 17: 70%\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\nGetting block 20 of 60\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 19: 70%\n  Reserving size (126) for bucket 20\n  bucket 19: 80%\n  Entering block accumulator loop for bucket 21:\n  Calculating Z arrays for bucket 20\n  bucket 21: 10%\n  bucket 19: 90%\n  bucket 21: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 21: 30%\n  bucket 20: 10%\n  bucket 21: 40%\n  bucket 20: 20%\n  bucket 21: 50%\n  bucket 20: 30%\n  bucket 21: 60%\n  bucket 20: 40%\n  bucket 21: 70%\n  bucket 20: 50%\n  bucket 21: 80%\n  bucket 20: 60%\n  bucket 21: 90%\n  bucket 20: 70%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 20: 80%\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 24: 10%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 24: 30%\n  bucket 23: 90%\n  bucket 24: 40%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Sorting block time: 00:00:00\n  bucket 24: 90%\nReturning block of 65 for bucket 23\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\nGetting block 28 of 60\n  bucket 27: 80%\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  Sorting block time: 00:00:00\n  bucket 28: 90%\nReturning block of 120 for bucket 27\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  bucket 29: 90%\n  Calculating Z arrays for bucket 30\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Entering block accumulator loop for bucket 32:\n  Calculating Z arrays for bucket 33\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 33: 10%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 33: 20%\n  bucket 32: 90%\n  bucket 32: 100%\n  bucket 33: 30%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 20%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 30%\n  bucket 35: 10%\n  bucket 34: 40%\n  bucket 35: 20%\n  bucket 34: 50%\n  bucket 35: 30%\n  bucket 34: 60%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 34: 70%\n  bucket 35: 60%\n  bucket 34: 80%\n  bucket 35: 70%\n  bucket 34: 90%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Entering block accumulator loop for bucket 36:\n  Calculating Z arrays for bucket 37\n  bucket 36: 10%\n  bucket 36: 20%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 30%\n  bucket 37: 10%\n  bucket 36: 40%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 36: 50%\n  bucket 37: 40%\n  bucket 36: 60%\n  bucket 37: 50%\n  bucket 36: 70%\n  bucket 37: 60%\n  bucket 36: 80%\n  bucket 37: 70%\n  bucket 36: 90%\n  bucket 37: 80%\n  bucket 36: 100%\n  bucket 37: 90%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 10%\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 40: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 40: 30%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 40: 40%\n  bucket 41: 70%\n  bucket 40: 50%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 40: 60%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  bucket 40: 70%\n  (Using difference cover)\n  bucket 40: 80%\n  bucket 40: 90%\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 10%\n  bucket 42: 90%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 42: 100%\n  bucket 43: 40%\n  bucket 44: 10%\n  Sorting block of length 119 for bucket 42\n  bucket 43: 50%\n  bucket 44: 20%\n  bucket 43: 60%\n  (Using difference cover)\n  bucket 44: 30%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 44: 40%\n  bucket 43: 90%\n  bucket 44: 50%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 50%\n  bucket 45: 60%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 70%\n  bucket 46: 10%\n  bucket 45: 80%\n  bucket 46: 20%\n  bucket 45: 90%\n  bucket 46: 30%\n  bucket 45: 100%\n  bucket 46: 40%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 20%\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 49: 30%\n  bucket 50: 30%\n  bucket 49: 40%\n  bucket 50: 40%\n  bucket 49: 50%\n  bucket 50: 50%\n  bucket 49: 60%\n  bucket 50: 60%\n  bucket 49: 70%\n  bucket 50: 70%\n  bucket 49: 80%\n  bucket 50: 80%\n  bucket 49: 90%\n  bucket 50: 90%\n  bucket 49: 100%\n  bucket 50: 100%\n  Sorting block of length 74 for bucket 49\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\nGetting block 52 of 60\n  bucket 51: 90%\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 53 of 60\n  bucket 51: 100%\n  Reserving size (126) for bucket 53\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Entering block accumulator loop for bucket 54:\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 52:\n  bucket 54: 10%\n  bucket 52: 10%\n  Entering block accumulator loop for bucket 53:\n  bucket 54: 20%\n  bucket 52: 20%\n  bucket 53: 10%\n  bucket 54: 30%\n  bucket 52: 30%\n  bucket 53: 20%\n  bucket 54: 40%\n  bucket 52: 40%\n  bucket 53: 30%\n  bucket 54: 50%\n  bucket 52: 50%\n  bucket 54: 60%\n  bucket 53: 40%\n  bucket 52: 60%\n  bucket 54: 70%\n  bucket 53: 50%\n  bucket 54: 80%\n  bucket 52: 70%\n  bucket 53: 60%\n  bucket 52: 80%\n  Sorting block time: 00:00:00\n  bucket 54: 90%\nReturning block of 92 for bucket 51\n  bucket 53: 70%\n  bucket 52: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 20%\n  bucket 55: 30%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 40%\n  bucket 56: 10%\n  bucket 55: 50%\n  bucket 56: 20%\n  bucket 55: 60%\n  bucket 56: 30%\n  bucket 55: 70%\n  bucket 56: 40%\n  bucket 55: 80%\n  bucket 56: 50%\n  bucket 55: 90%\n  bucket 56: 60%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  bucket 59: 30%\n  Calculating Z arrays for bucket 60\n  bucket 59: 40%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 50%\n  bucket 60: 10%\n  bucket 59: 60%\n  bucket 60: 20%\n  bucket 59: 70%\n  bucket 60: 30%\n  bucket 59: 80%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 59: 90%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    71 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    71 pairs aligned 0 times concordantly or discordantly; of these:\n      142 mates make up the pairs; of these:\n        74 (52.11%) aligned 0 times\n        68 (47.89%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n92.60% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    71 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    71 pairs aligned 0 times concordantly or discordantly; of these:\n      142 mates make up the pairs; of these:\n        74 (52.11%) aligned 0 times\n        68 (47.89%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n92.60% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 4 of 60\nGetting block 3 of 60\nGetting block 5 of 60\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (126) for bucket 5\n  bucket 1: 10%\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 5\n  Reserving size (126) for bucket 3\nGetting block 7 of 60\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 3\nGetting block 8 of 60\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  Reserving size (126) for bucket 8\n  bucket 1: 30%\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 10%\n  bucket 1: 40%\n  Calculating Z arrays for bucket 6\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 2: 10%\n  bucket 5: 10%\n  bucket 1: 60%\n  bucket 8: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 1: 70%\n  bucket 8: 20%\n  bucket 2: 20%\n  bucket 8: 30%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 4: 10%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 8: 40%\n  Reserving size (126) for bucket 7\n  bucket 1: 80%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 2: 30%\n  bucket 5: 60%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 6: 40%\n  bucket 8: 50%\n  bucket 3: 40%\n  bucket 4: 40%\n  Calculating Z arrays for bucket 7\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 2: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 3: 60%\n  bucket 2: 50%\n  bucket 4: 60%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 60%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 4: 70%\n  bucket 8: 60%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 6: 70%\n  bucket 1: 100%\n  bucket 5: 90%\n  bucket 8: 70%\n  bucket 3: 80%\n  bucket 5: 100%\n  bucket 4: 80%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 7: 10%\n  bucket 4: 90%\n  bucket 2: 70%\n  bucket 6: 90%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 4: 100%\n  bucket 6: 100%\n  bucket 8: 80%\n  Sorting block of length 90 for bucket 6\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 7: 20%\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 3: 100%\n  bucket 2: 80%\n  bucket 8: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 2: 90%\n  bucket 7: 40%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  bucket 7: 50%\n  (Using difference cover)\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\nGetting block 11 of 60\n  bucket 9: 70%\n  Reserving size (126) for bucket 11\n  bucket 10: 50%\n  bucket 9: 80%\n  Calculating Z arrays for bucket 11\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 100%\n  bucket 10: 80%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 11: 10%\n  bucket 10: 90%\n  bucket 11: 20%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  bucket 11: 30%\n  bucket 11: 40%\n  (Using difference cover)\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\nGetting block 13 of 60\nGetting block 14 of 60\n  Reserving size (126) for bucket 13\n  bucket 12: 10%\n  Calculating Z arrays for bucket 13\n  Reserving size (126) for bucket 14\n  bucket 12: 20%\n  Calculating Z arrays for bucket 14\n  bucket 12: 30%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 40%\n  Entering block accumulator loop for bucket 14:\n  bucket 12: 50%\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 12: 60%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 12: 70%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 12: 80%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 12: 90%\n  bucket 14: 60%\n  bucket 13: 50%\n  bucket 12: 100%\n  bucket 13: 60%\n  Sorting block of length 82 for bucket 12\n  bucket 14: 70%\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 15: 10%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 15: 20%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 15: 30%\n  bucket 16: 90%\n  bucket 15: 40%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\nGetting block 18 of 60\n  bucket 17: 70%\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\nGetting block 20 of 60\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 19: 70%\n  Reserving size (126) for bucket 20\n  bucket 19: 80%\n  Entering block accumulator loop for bucket 21:\n  Calculating Z arrays for bucket 20\n  bucket 21: 10%\n  bucket 19: 90%\n  bucket 21: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 21: 30%\n  bucket 20: 10%\n  bucket 21: 40%\n  bucket 20: 20%\n  bucket 21: 50%\n  bucket 20: 30%\n  bucket 21: 60%\n  bucket 20: 40%\n  bucket 21: 70%\n  bucket 20: 50%\n  bucket 21: 80%\n  bucket 20: 60%\n  bucket 21: 90%\n  bucket 20: 70%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 20: 80%\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 24: 10%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 24: 30%\n  bucket 23: 90%\n  bucket 24: 40%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Sorting block time: 00:00:00\n  bucket 24: 90%\nReturning block of 65 for bucket 23\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\nGetting block 28 of 60\n  bucket 27: 80%\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  Sorting block time: 00:00:00\n  bucket 28: 90%\nReturning block of 120 for bucket 27\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  bucket 29: 90%\n  Calculating Z arrays for bucket 30\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Entering block accumulator loop for bucket 32:\n  Calculating Z arrays for bucket 33\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 33: 10%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 33: 20%\n  bucket 32: 90%\n  bucket 32: 100%\n  bucket 33: 30%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 20%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 30%\n  bucket 35: 10%\n  bucket 34: 40%\n  bucket 35: 20%\n  bucket 34: 50%\n  bucket 35: 30%\n  bucket 34: 60%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 34: 70%\n  bucket 35: 60%\n  bucket 34: 80%\n  bucket 35: 70%\n  bucket 34: 90%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Entering block accumulator loop for bucket 36:\n  Calculating Z arrays for bucket 37\n  bucket 36: 10%\n  bucket 36: 20%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 30%\n  bucket 37: 10%\n  bucket 36: 40%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 36: 50%\n  bucket 37: 40%\n  bucket 36: 60%\n  bucket 37: 50%\n  bucket 36: 70%\n  bucket 37: 60%\n  bucket 36: 80%\n  bucket 37: 70%\n  bucket 36: 90%\n  bucket 37: 80%\n  bucket 36: 100%\n  bucket 37: 90%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 10%\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 40: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 40: 30%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 40: 40%\n  bucket 41: 70%\n  bucket 40: 50%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 40: 60%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  bucket 40: 70%\n  (Using difference cover)\n  bucket 40: 80%\n  bucket 40: 90%\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 10%\n  bucket 42: 90%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 42: 100%\n  bucket 43: 40%\n  bucket 44: 10%\n  Sorting block of length 119 for bucket 42\n  bucket 43: 50%\n  bucket 44: 20%\n  bucket 43: 60%\n  (Using difference cover)\n  bucket 44: 30%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 44: 40%\n  bucket 43: 90%\n  bucket 44: 50%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 50%\n  bucket 45: 60%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 70%\n  bucket 46: 10%\n  bucket 45: 80%\n  bucket 46: 20%\n  bucket 45: 90%\n  bucket 46: 30%\n  bucket 45: 100%\n  bucket 46: 40%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 20%\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 49: 30%\n  bucket 50: 30%\n  bucket 49: 40%\n  bucket 50: 40%\n  bucket 49: 50%\n  bucket 50: 50%\n  bucket 49: 60%\n  bucket 50: 60%\n  bucket 49: 70%\n  bucket 50: 70%\n  bucket 49: 80%\n  bucket 50: 80%\n  bucket 49: 90%\n  bucket 50: 90%\n  bucket 49: 100%\n  bucket 50: 100%\n  Sorting block of length 74 for bucket 49\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\nGetting block 52 of 60\n  bucket 51: 90%\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 53 of 60\n  bucket 51: 100%\n  Reserving size (126) for bucket 53\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Entering block accumulator loop for bucket 54:\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 52:\n  bucket 54: 10%\n  bucket 52: 10%\n  Entering block accumulator loop for bucket 53:\n  bucket 54: 20%\n  bucket 52: 20%\n  bucket 53: 10%\n  bucket 54: 30%\n  bucket 52: 30%\n  bucket 53: 20%\n  bucket 54: 40%\n  bucket 52: 40%\n  bucket 53: 30%\n  bucket 54: 50%\n  bucket 52: 50%\n  bucket 54: 60%\n  bucket 53: 40%\n  bucket 52: 60%\n  bucket 54: 70%\n  bucket 53: 50%\n  bucket 54: 80%\n  bucket 52: 70%\n  bucket 53: 60%\n  bucket 52: 80%\n  Sorting block time: 00:00:00\n  bucket 54: 90%\nReturning block of 92 for bucket 51\n  bucket 53: 70%\n  bucket 52: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 20%\n  bucket 55: 30%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 40%\n  bucket 56: 10%\n  bucket 55: 50%\n  bucket 56: 20%\n  bucket 55: 60%\n  bucket 56: 30%\n  bucket 55: 70%\n  bucket 56: 40%\n  bucket 55: 80%\n  bucket 56: 50%\n  bucket 55: 90%\n  bucket 56: 60%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  bucket 59: 30%\n  Calculating Z arrays for bucket 60\n  bucket 59: 40%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 50%\n  bucket 60: 10%\n  bucket 59: 60%\n  bucket 60: 20%\n  bucket 59: 70%\n  bucket 60: 30%\n  bucket 59: 80%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 59: 90%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:55:26", "plugin": "core", "name": "end_epoch", "raw_value": "1729000526.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:55:25", "plugin": "core", "name": "start_epoch", "raw_value": "1729000525.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-4", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 4, "time_seconds": 36.38898181915283, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "0407b4fd04a7dd08"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "92de9b3d38fe093a"}, "library|input_2": {"src": "hda", "id": "1f9f0c1de29e27ba"}, "library|paired_options|no_mixed": true, "library|paired_options|no_discordant": true, "library|paired_options|paired_options_selector": "advanced", "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "7a27be88dcf282a7", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:56:13.528473", "create_time": "2024-10-15T13:56:00.184716", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-l28b9", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/9/8/8/dataset_98863d5d-241f-406d-947c-6b29ec469fe7.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/b/5/9/dataset_b59e6568-71ff-4c04-8843-851a49be2c6d.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/5/d/8/dataset_5d8a897a-c82f-4155-a864-c8ddb2f33584.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'  --fr --no-mixed --no-discordant        --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/4/f/f/dataset_4fff8e4b-bc51-4db1-9bdf-eee9bb87a6e2.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 304, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 305, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": true, \"no_mixed\": true, \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 303, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "0407b4fd04a7dd08", "src": "hda", "uuid": "98863d5d-241f-406d-947c-6b29ec469fe7"}, "library|input_1": {"id": "92de9b3d38fe093a", "src": "hda", "uuid": "b59e6568-71ff-4c04-8843-851a49be2c6d"}, "library|input_2": {"id": "1f9f0c1de29e27ba", "src": "hda", "uuid": "5d8a897a-c82f-4155-a864-c8ddb2f33584"}}, "outputs": {"output_alignments": {"id": "c6dfae86f72ac9bb", "src": "hda", "uuid": "4fff8e4b-bc51-4db1-9bdf-eee9bb87a6e2"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 2:\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 1: 20%\nGetting block 6 of 60\n  bucket 1: 30%\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 5\n  bucket 1: 40%\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 4\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Reserving size (126) for bucket 3\n  bucket 1: 50%\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 10%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 10%\n  bucket 1: 60%\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 5: 10%\n  Calculating Z arrays for bucket 8\n  bucket 3: 10%\n  bucket 7: 10%\n  bucket 6: 10%\n  bucket 2: 30%\n  bucket 7: 20%\n  bucket 5: 20%\n  bucket 4: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 30%\n  bucket 6: 20%\n  bucket 3: 20%\n  bucket 4: 40%\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 5: 30%\n  bucket 3: 30%\n  bucket 6: 30%\n  bucket 8: 20%\n  bucket 2: 40%\n  bucket 7: 50%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 5: 40%\n  bucket 2: 50%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 7: 70%\n  bucket 5: 50%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 8: 40%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 2: 70%\n  bucket 7: 80%\n  bucket 6: 50%\n  bucket 4: 80%\n  bucket 5: 70%\n  bucket 7: 90%\n  bucket 6: 60%\n  bucket 4: 90%\n  bucket 5: 80%\n  bucket 7: 100%\n  bucket 2: 80%\n  Sorting block of length 75 for bucket 7\n  bucket 5: 90%\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 5: 100%\n  bucket 6: 70%\n  bucket 2: 90%\n  bucket 1: 70%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 4: 100%\n  bucket 2: 100%\n  bucket 1: 80%\n  bucket 6: 80%\n  bucket 3: 80%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  bucket 1: 90%\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 3: 90%\n  bucket 1: 100%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 8: 50%\nReturning block of 76 for bucket 7\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 10:\nGetting block 12 of 60\n  bucket 10: 10%\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  Reserving size (126) for bucket 12\nReturning block of 125 for bucket 9\n  Calculating Z arrays for bucket 12\n  bucket 10: 30%\n  bucket 11: 10%\n  bucket 10: 40%\n  bucket 11: 20%\n  bucket 10: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 10: 60%\n  bucket 11: 30%\n  bucket 10: 70%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 10: 80%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 10: 90%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 10: 100%\n  bucket 11: 70%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  bucket 12: 80%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\nGetting block 17 of 60\n  bucket 15: 50%\n  Calculating Z arrays for bucket 16\n  Reserving size (126) for bucket 17\n  bucket 15: 60%\n  Calculating Z arrays for bucket 17\n  bucket 15: 70%\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\n  bucket 15: 80%\n  bucket 16: 10%\n  bucket 17: 10%\n  bucket 15: 90%\n  bucket 16: 20%\n  bucket 17: 20%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 30%\n  bucket 17: 30%\n  bucket 16: 40%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 16: 50%\n  bucket 17: 60%\n  bucket 16: 60%\n  bucket 17: 70%\n  bucket 16: 70%\n  bucket 17: 80%\n  bucket 16: 80%\n  bucket 17: 90%\n  bucket 16: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 20: 10%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 20: 20%\n  bucket 19: 70%\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  bucket 19: 80%\n  bucket 20: 30%\n  bucket 19: 90%\n  bucket 20: 40%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\nGetting block 22 of 60\nGetting block 23 of 60\n  bucket 21: 90%\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 23: 20%\n  bucket 22: 10%\n  bucket 23: 30%\n  bucket 22: 20%\n  bucket 23: 40%\n  bucket 22: 30%\n  bucket 23: 50%\n  bucket 22: 40%\n  bucket 23: 60%\n  bucket 22: 50%\n  bucket 23: 70%\n  bucket 22: 60%\n  bucket 23: 80%\n  bucket 22: 70%\n  bucket 23: 90%\n  bucket 22: 80%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 24:\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 10%\n  bucket 24: 10%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 25: 30%\n  Entering block accumulator loop for bucket 26:\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 26: 20%\n  bucket 24: 50%\n  bucket 25: 60%\n  bucket 24: 60%\n  bucket 25: 70%\n  bucket 26: 30%\n  bucket 24: 70%\n  bucket 25: 80%\n  bucket 24: 80%\n  bucket 25: 90%\n  bucket 26: 40%\n  bucket 25: 100%\n  bucket 24: 90%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 50%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Entering block accumulator loop for bucket 29:\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  bucket 29: 20%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 30: 10%\n  bucket 29: 50%\n  bucket 30: 20%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 30: 30%\n  bucket 29: 80%\n  bucket 30: 40%\n  bucket 29: 90%\n  bucket 29: 100%\n  bucket 30: 50%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 124 for bucket 30\nReturning block of 52 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 60\n  Entering block accumulator loop for bucket 31:\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 10%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 20%\n  bucket 32: 10%\n  bucket 31: 30%\n  bucket 32: 20%\n  bucket 31: 40%\n  bucket 32: 30%\n  bucket 31: 50%\n  bucket 32: 40%\n  bucket 31: 60%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 31: 70%\n  bucket 32: 70%\n  bucket 31: 80%\n  bucket 32: 80%\n  bucket 31: 90%\n  bucket 32: 90%\n  bucket 31: 100%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 34\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 34: 10%\n  bucket 33: 20%\n  bucket 34: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 34: 30%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 34: 40%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 34: 50%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  bucket 35: 80%\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 36\n  Calculating Z arrays for bucket 37\n  bucket 35: 90%\n  bucket 35: 100%\n  Entering block accumulator loop for bucket 37:\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Entering block accumulator loop for bucket 36:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 36: 10%\n  bucket 37: 30%\n  bucket 36: 20%\n  bucket 37: 40%\n  bucket 36: 30%\n  bucket 37: 50%\n  bucket 36: 40%\n  bucket 37: 60%\n  bucket 36: 50%\n  bucket 37: 70%\n  bucket 36: 60%\n  bucket 37: 80%\n  bucket 36: 70%\n  bucket 37: 90%\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  bucket 36: 80%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  bucket 38: 20%\n  Calculating Z arrays for bucket 39\n  bucket 38: 30%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 40%\n  bucket 39: 10%\n  bucket 38: 50%\n  bucket 39: 20%\n  bucket 38: 60%\n  bucket 39: 30%\n  bucket 38: 70%\n  bucket 39: 40%\n  bucket 38: 80%\n  bucket 39: 50%\n  bucket 38: 90%\n  bucket 39: 60%\n  bucket 38: 100%\n  bucket 39: 70%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 80%\n  bucket 40: 90%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  bucket 40: 100%\n  Calculating Z arrays for bucket 42\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 42: 10%\n  bucket 41: 30%\n  bucket 42: 20%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 42: 30%\n  bucket 41: 60%\n  bucket 42: 40%\n  bucket 41: 70%\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  bucket 42: 50%\n  bucket 41: 80%\n  bucket 42: 60%\n  bucket 41: 90%\n  bucket 42: 70%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 50\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 10%\n  bucket 51: 10%\n  bucket 50: 20%\n  bucket 51: 20%\n  bucket 50: 30%\n  bucket 51: 30%\n  bucket 50: 40%\n  bucket 51: 40%\n  bucket 50: 50%\n  bucket 51: 50%\n  bucket 50: 60%\n  bucket 51: 60%\n  bucket 50: 70%\n  bucket 51: 70%\n  bucket 50: 80%\n  bucket 51: 80%\n  bucket 50: 90%\n  bucket 51: 90%\n  bucket 50: 100%\n  bucket 51: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\nGetting block 53 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 10%\n  bucket 53: 10%\n  bucket 52: 20%\n  bucket 53: 20%\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  bucket 52: 30%\n  bucket 53: 30%\n  bucket 52: 40%\n  bucket 53: 40%\n  Entering block accumulator loop for bucket 54:\n  bucket 52: 50%\n  bucket 53: 50%\n  bucket 54: 10%\n  bucket 52: 60%\n  bucket 53: 60%\n  bucket 54: 20%\n  bucket 52: 70%\n  bucket 53: 70%\n  bucket 54: 30%\n  bucket 52: 80%\n  bucket 53: 80%\n  bucket 54: 40%\n  bucket 52: 90%\n  bucket 53: 90%\n  bucket 54: 50%\n  bucket 52: 100%\n  bucket 53: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block of length 78 for bucket 53\n  bucket 54: 60%\n  bucket 54: 70%\n  (Using difference cover)\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 80%\n  bucket 55: 90%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Entering block accumulator loop for bucket 57:\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 10%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 58: 10%\n  bucket 57: 40%\n  bucket 58: 20%\n  bucket 57: 50%\n  bucket 58: 30%\n  bucket 57: 60%\n  bucket 58: 40%\n  bucket 57: 70%\n  bucket 58: 50%\n  bucket 57: 80%\n  bucket 58: 60%\n  bucket 57: 90%\n  bucket 58: 70%\n  bucket 57: 100%\n  bucket 58: 80%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 2:\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 1: 20%\nGetting block 6 of 60\n  bucket 1: 30%\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 5\n  bucket 1: 40%\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 4\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Reserving size (126) for bucket 3\n  bucket 1: 50%\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 10%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 10%\n  bucket 1: 60%\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 5: 10%\n  Calculating Z arrays for bucket 8\n  bucket 3: 10%\n  bucket 7: 10%\n  bucket 6: 10%\n  bucket 2: 30%\n  bucket 7: 20%\n  bucket 5: 20%\n  bucket 4: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 30%\n  bucket 6: 20%\n  bucket 3: 20%\n  bucket 4: 40%\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 5: 30%\n  bucket 3: 30%\n  bucket 6: 30%\n  bucket 8: 20%\n  bucket 2: 40%\n  bucket 7: 50%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 5: 40%\n  bucket 2: 50%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 7: 70%\n  bucket 5: 50%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 8: 40%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 2: 70%\n  bucket 7: 80%\n  bucket 6: 50%\n  bucket 4: 80%\n  bucket 5: 70%\n  bucket 7: 90%\n  bucket 6: 60%\n  bucket 4: 90%\n  bucket 5: 80%\n  bucket 7: 100%\n  bucket 2: 80%\n  Sorting block of length 75 for bucket 7\n  bucket 5: 90%\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 5: 100%\n  bucket 6: 70%\n  bucket 2: 90%\n  bucket 1: 70%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 4: 100%\n  bucket 2: 100%\n  bucket 1: 80%\n  bucket 6: 80%\n  bucket 3: 80%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  bucket 1: 90%\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 3: 90%\n  bucket 1: 100%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 8: 50%\nReturning block of 76 for bucket 7\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 10:\nGetting block 12 of 60\n  bucket 10: 10%\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  Reserving size (126) for bucket 12\nReturning block of 125 for bucket 9\n  Calculating Z arrays for bucket 12\n  bucket 10: 30%\n  bucket 11: 10%\n  bucket 10: 40%\n  bucket 11: 20%\n  bucket 10: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 10: 60%\n  bucket 11: 30%\n  bucket 10: 70%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 10: 80%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 10: 90%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 10: 100%\n  bucket 11: 70%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  bucket 12: 80%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\nGetting block 17 of 60\n  bucket 15: 50%\n  Calculating Z arrays for bucket 16\n  Reserving size (126) for bucket 17\n  bucket 15: 60%\n  Calculating Z arrays for bucket 17\n  bucket 15: 70%\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\n  bucket 15: 80%\n  bucket 16: 10%\n  bucket 17: 10%\n  bucket 15: 90%\n  bucket 16: 20%\n  bucket 17: 20%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 30%\n  bucket 17: 30%\n  bucket 16: 40%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 16: 50%\n  bucket 17: 60%\n  bucket 16: 60%\n  bucket 17: 70%\n  bucket 16: 70%\n  bucket 17: 80%\n  bucket 16: 80%\n  bucket 17: 90%\n  bucket 16: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 20: 10%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 20: 20%\n  bucket 19: 70%\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  bucket 19: 80%\n  bucket 20: 30%\n  bucket 19: 90%\n  bucket 20: 40%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\nGetting block 22 of 60\nGetting block 23 of 60\n  bucket 21: 90%\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 23: 20%\n  bucket 22: 10%\n  bucket 23: 30%\n  bucket 22: 20%\n  bucket 23: 40%\n  bucket 22: 30%\n  bucket 23: 50%\n  bucket 22: 40%\n  bucket 23: 60%\n  bucket 22: 50%\n  bucket 23: 70%\n  bucket 22: 60%\n  bucket 23: 80%\n  bucket 22: 70%\n  bucket 23: 90%\n  bucket 22: 80%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 24:\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 10%\n  bucket 24: 10%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 25: 30%\n  Entering block accumulator loop for bucket 26:\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 26: 20%\n  bucket 24: 50%\n  bucket 25: 60%\n  bucket 24: 60%\n  bucket 25: 70%\n  bucket 26: 30%\n  bucket 24: 70%\n  bucket 25: 80%\n  bucket 24: 80%\n  bucket 25: 90%\n  bucket 26: 40%\n  bucket 25: 100%\n  bucket 24: 90%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 50%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Entering block accumulator loop for bucket 29:\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  bucket 29: 20%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 30: 10%\n  bucket 29: 50%\n  bucket 30: 20%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 30: 30%\n  bucket 29: 80%\n  bucket 30: 40%\n  bucket 29: 90%\n  bucket 29: 100%\n  bucket 30: 50%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 124 for bucket 30\nReturning block of 52 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 60\n  Entering block accumulator loop for bucket 31:\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 10%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 20%\n  bucket 32: 10%\n  bucket 31: 30%\n  bucket 32: 20%\n  bucket 31: 40%\n  bucket 32: 30%\n  bucket 31: 50%\n  bucket 32: 40%\n  bucket 31: 60%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 31: 70%\n  bucket 32: 70%\n  bucket 31: 80%\n  bucket 32: 80%\n  bucket 31: 90%\n  bucket 32: 90%\n  bucket 31: 100%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 34\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 34: 10%\n  bucket 33: 20%\n  bucket 34: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 34: 30%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 34: 40%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 34: 50%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  bucket 35: 80%\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 36\n  Calculating Z arrays for bucket 37\n  bucket 35: 90%\n  bucket 35: 100%\n  Entering block accumulator loop for bucket 37:\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Entering block accumulator loop for bucket 36:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 36: 10%\n  bucket 37: 30%\n  bucket 36: 20%\n  bucket 37: 40%\n  bucket 36: 30%\n  bucket 37: 50%\n  bucket 36: 40%\n  bucket 37: 60%\n  bucket 36: 50%\n  bucket 37: 70%\n  bucket 36: 60%\n  bucket 37: 80%\n  bucket 36: 70%\n  bucket 37: 90%\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  bucket 36: 80%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  bucket 38: 20%\n  Calculating Z arrays for bucket 39\n  bucket 38: 30%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 40%\n  bucket 39: 10%\n  bucket 38: 50%\n  bucket 39: 20%\n  bucket 38: 60%\n  bucket 39: 30%\n  bucket 38: 70%\n  bucket 39: 40%\n  bucket 38: 80%\n  bucket 39: 50%\n  bucket 38: 90%\n  bucket 39: 60%\n  bucket 38: 100%\n  bucket 39: 70%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 80%\n  bucket 40: 90%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  bucket 40: 100%\n  Calculating Z arrays for bucket 42\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 42: 10%\n  bucket 41: 30%\n  bucket 42: 20%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 42: 30%\n  bucket 41: 60%\n  bucket 42: 40%\n  bucket 41: 70%\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  bucket 42: 50%\n  bucket 41: 80%\n  bucket 42: 60%\n  bucket 41: 90%\n  bucket 42: 70%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 50\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 10%\n  bucket 51: 10%\n  bucket 50: 20%\n  bucket 51: 20%\n  bucket 50: 30%\n  bucket 51: 30%\n  bucket 50: 40%\n  bucket 51: 40%\n  bucket 50: 50%\n  bucket 51: 50%\n  bucket 50: 60%\n  bucket 51: 60%\n  bucket 50: 70%\n  bucket 51: 70%\n  bucket 50: 80%\n  bucket 51: 80%\n  bucket 50: 90%\n  bucket 51: 90%\n  bucket 50: 100%\n  bucket 51: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\nGetting block 53 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 10%\n  bucket 53: 10%\n  bucket 52: 20%\n  bucket 53: 20%\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  bucket 52: 30%\n  bucket 53: 30%\n  bucket 52: 40%\n  bucket 53: 40%\n  Entering block accumulator loop for bucket 54:\n  bucket 52: 50%\n  bucket 53: 50%\n  bucket 54: 10%\n  bucket 52: 60%\n  bucket 53: 60%\n  bucket 54: 20%\n  bucket 52: 70%\n  bucket 53: 70%\n  bucket 54: 30%\n  bucket 52: 80%\n  bucket 53: 80%\n  bucket 54: 40%\n  bucket 52: 90%\n  bucket 53: 90%\n  bucket 54: 50%\n  bucket 52: 100%\n  bucket 53: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block of length 78 for bucket 53\n  bucket 54: 60%\n  bucket 54: 70%\n  (Using difference cover)\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 80%\n  bucket 55: 90%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Entering block accumulator loop for bucket 57:\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 10%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 58: 10%\n  bucket 57: 40%\n  bucket 58: 20%\n  bucket 57: 50%\n  bucket 58: 30%\n  bucket 57: 60%\n  bucket 58: 40%\n  bucket 57: 70%\n  bucket 58: 50%\n  bucket 57: 80%\n  bucket 58: 60%\n  bucket 57: 90%\n  bucket 58: 70%\n  bucket 57: 100%\n  bucket 58: 80%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-10-15 13:56:02", "plugin": "core", "name": "end_epoch", "raw_value": "1729000562.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:56:02", "plugin": "core", "name": "start_epoch", "raw_value": "1729000562.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-5", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 5, "time_seconds": 32.38661766052246, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "abb2b01111b8d54a"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "0fd520bae052e2dd"}, "library|type": "single", "adv|output_options|unaligned_file": true, "adv|output_options|output_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "2f4f2605c1945838", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:56:46.432003", "create_time": "2024-10-15T13:56:33.992488", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-m2md8", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/5/0/4/dataset_5045ecdf-a273-48e8-8e90-a26386321d9a.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/8/7/8/dataset_87825e41-dba5-45ab-ba49-4860bb98bad9.dat' input_f.fasta &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f    -U 'input_f.fasta'  --un '/galaxy/server/database/objects/2/d/a/dataset_2daf7645-5f4a-4f12-b2da-a7d6c57d62b1.dat'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/6/b/4/dataset_6b419b6a-5af0-4fb7-9f48-ce3b550d09fe.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 1, \"aligned_file\": false, \"output_options_selector\": \"advanced\", \"unaligned_file\": true}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 308, \"src\": \"hda\"}]}, \"rna_strandness\": \"\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 307, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "abb2b01111b8d54a", "src": "hda", "uuid": "5045ecdf-a273-48e8-8e90-a26386321d9a"}, "library|input_1": {"id": "0fd520bae052e2dd", "src": "hda", "uuid": "87825e41-dba5-45ab-ba49-4860bb98bad9"}}, "outputs": {"output_unaligned_reads_l": {"id": "96760225707bdb2c", "src": "hda", "uuid": "2daf7645-5f4a-4f12-b2da-a7d6c57d62b1"}, "output_alignments": {"id": "bce3254644eb7766", "src": "hda", "uuid": "6b419b6a-5af0-4fb7-9f48-ce3b550d09fe"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 3: 40%\n  bucket 2: 50%\nGetting block 4 of 60\nGetting block 5 of 60\nGetting block 6 of 60\nGetting block 7 of 60\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Reserving size (126) for bucket 5\n  Calculating Z arrays for bucket 8\n  bucket 1: 60%\n  Reserving size (126) for bucket 4\n  bucket 3: 50%\n  bucket 2: 60%\n  Reserving size (126) for bucket 6\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 3: 70%\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 5\n  bucket 2: 80%\n  bucket 3: 80%\n  Entering block accumulator loop for bucket 8:\n  bucket 3: 90%\n  bucket 1: 70%\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 10%\n  bucket 1: 80%\n  bucket 3: 100%\n  bucket 6: 20%\n  bucket 8: 10%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 5: 10%\n  bucket 1: 100%\n  bucket 6: 30%\n  Sorting block of length 42 for bucket 1\n  bucket 5: 20%\n  bucket 6: 40%\n  bucket 8: 20%\n  bucket 5: 30%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Entering block accumulator loop for bucket 4:\n  bucket 5: 40%\n  (Using difference cover)\n  Reserving size (126) for bucket 7\n  bucket 4: 10%\n  bucket 6: 50%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 8: 30%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 8: 40%\n  bucket 4: 20%\n  bucket 6: 70%\n  bucket 5: 60%\n  bucket 8: 50%\n  bucket 6: 80%\n  Calculating Z arrays for bucket 7\n  bucket 8: 60%\n  bucket 5: 70%\n  bucket 6: 90%\n  bucket 4: 30%\n  bucket 8: 70%\n  bucket 6: 100%\n  bucket 5: 80%\n  bucket 8: 80%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 4: 40%\n  bucket 8: 90%\n  bucket 5: 90%\n  bucket 4: 50%\n  bucket 8: 100%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  bucket 10: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 100%\n  Entering block accumulator loop for bucket 12:\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 60\n  Entering block accumulator loop for bucket 13:\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 15: 30%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 15: 40%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 15: 50%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 15: 60%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 15: 70%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 15: 80%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 15: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 10%\n  bucket 17: 10%\n  bucket 16: 20%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 16: 30%\n  bucket 17: 40%\n  bucket 16: 40%\n  bucket 17: 50%\n  bucket 16: 50%\n  bucket 17: 60%\n  bucket 16: 60%\n  bucket 17: 70%\n  bucket 16: 70%\n  bucket 17: 80%\n  bucket 16: 80%\n  bucket 17: 90%\n  bucket 16: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\nGetting block 20 of 60\n  bucket 19: 100%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 21: 10%\n  bucket 20: 20%\n  bucket 21: 20%\n  bucket 20: 30%\n  bucket 21: 30%\n  bucket 20: 40%\n  bucket 21: 40%\n  bucket 20: 50%\n  bucket 21: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 21: 60%\n  bucket 20: 90%\n  bucket 21: 70%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 60%\n  bucket 22: 70%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 80%\n  bucket 23: 10%\n  bucket 22: 90%\n  bucket 23: 20%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 20%\nGetting block 31 of 60\n  bucket 29: 30%\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 10%\n  bucket 29: 40%\n  bucket 30: 20%\n  bucket 29: 50%\n  bucket 30: 30%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 40%\n  bucket 29: 60%\n  bucket 30: 50%\n  bucket 31: 10%\n  bucket 30: 60%\n  bucket 29: 70%\n  bucket 30: 70%\n  bucket 31: 20%\n  bucket 30: 80%\n  bucket 31: 30%\n  bucket 29: 80%\n  bucket 30: 90%\n  bucket 31: 40%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 31: 50%\n  bucket 29: 100%\n  bucket 31: 60%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 32:\n  bucket 33: 10%\n  bucket 32: 10%\n  bucket 33: 20%\n  bucket 32: 20%\n  bucket 33: 30%\n  bucket 32: 30%\n  bucket 33: 40%\n  bucket 32: 40%\n  bucket 33: 50%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 32: 50%\n  bucket 33: 60%\n  bucket 32: 60%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 70%\n  bucket 32: 70%\n  bucket 34: 10%\n  bucket 33: 80%\n  bucket 32: 80%\n  bucket 34: 20%\n  bucket 33: 90%\n  bucket 32: 90%\n  bucket 34: 30%\n  bucket 33: 100%\n  bucket 34: 40%\n  Sorting block of length 44 for bucket 33\n  bucket 32: 100%\n  (Using difference cover)\n  bucket 34: 50%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 35:\n  bucket 36: 10%\n  bucket 35: 10%\n  bucket 36: 20%\n  bucket 35: 20%\n  bucket 36: 30%\n  bucket 35: 30%\n  bucket 36: 40%\n  bucket 35: 40%\n  bucket 36: 50%\n  bucket 35: 50%\n  bucket 36: 60%\n  bucket 35: 60%\n  bucket 36: 70%\n  bucket 35: 70%\n  bucket 36: 80%\n  bucket 35: 80%\n  bucket 36: 90%\n  bucket 35: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\nGetting block 38 of 60\n  bucket 37: 20%\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  bucket 37: 30%\n  bucket 37: 40%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 38: 10%\n  bucket 37: 70%\n  bucket 38: 20%\n  bucket 37: 80%\n  bucket 38: 30%\n  bucket 37: 90%\n  bucket 38: 40%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\nGetting block 41 of 60\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 41\nReturning block of 42 for bucket 40\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 43:\n  Entering block accumulator loop for bucket 42:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 42: 10%\n  bucket 43: 30%\n  bucket 42: 20%\n  bucket 43: 40%\n  bucket 42: 30%\n  bucket 43: 50%\n  bucket 42: 40%\n  bucket 43: 60%\n  bucket 42: 50%\n  bucket 43: 70%\n  bucket 42: 60%\n  bucket 43: 80%\n  bucket 42: 70%\n  bucket 43: 90%\n  bucket 42: 80%\n  bucket 43: 100%\n  bucket 42: 90%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  Entering block accumulator loop for bucket 46:\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  bucket 46: 10%\n  bucket 45: 20%\n  Calculating Z arrays for bucket 47\n  bucket 46: 20%\n  bucket 45: 30%\n  bucket 46: 30%\n  Entering block accumulator loop for bucket 47:\n  bucket 45: 40%\n  bucket 46: 40%\n  bucket 45: 50%\n  bucket 46: 50%\n  bucket 47: 10%\n  bucket 45: 60%\n  bucket 46: 60%\n  bucket 47: 20%\n  bucket 45: 70%\n  bucket 46: 70%\n  bucket 47: 30%\n  bucket 45: 80%\n  bucket 46: 80%\n  bucket 47: 40%\n  bucket 45: 90%\n  bucket 46: 90%\n  bucket 47: 50%\n  bucket 45: 100%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Calculating Z arrays for bucket 49\n  bucket 48: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 20%\n  bucket 49: 10%\n  bucket 48: 30%\n  bucket 49: 20%\n  bucket 48: 40%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 48: 50%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 48: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 48: 70%\n  bucket 49: 90%\n  bucket 49: 100%\n  bucket 48: 80%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Entering block accumulator loop for bucket 50:\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 10%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 20%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 51: 10%\n  bucket 50: 30%\n  bucket 51: 20%\n  Entering block accumulator loop for bucket 52:\n  bucket 50: 40%\n  bucket 51: 30%\n  bucket 52: 10%\n  bucket 50: 50%\n  bucket 51: 40%\n  bucket 50: 60%\n  bucket 52: 20%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 52: 30%\n  bucket 50: 80%\n  bucket 51: 60%\n  bucket 50: 90%\n  bucket 52: 40%\n  bucket 51: 70%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 52: 50%\n  bucket 51: 80%\n  bucket 52: 60%\n  bucket 51: 90%\n  bucket 52: 70%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Entering block accumulator loop for bucket 53:\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 53: 10%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 20%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 10%\n  bucket 53: 30%\n  bucket 55: 10%\n  bucket 53: 40%\n  bucket 54: 20%\n  bucket 53: 50%\n  bucket 54: 30%\n  bucket 55: 20%\n  bucket 54: 40%\n  bucket 53: 60%\n  bucket 55: 30%\n  bucket 54: 50%\n  bucket 53: 70%\n  bucket 55: 40%\n  bucket 53: 80%\n  bucket 55: 50%\n  bucket 53: 90%\n  bucket 54: 60%\n  bucket 55: 60%\n  bucket 53: 100%\n  bucket 54: 70%\n  bucket 55: 70%\n  bucket 54: 80%\n  bucket 55: 80%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 55: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 70%\n  bucket 56: 80%\nGetting block 58 of 60\n  Entering block accumulator loop for bucket 57:\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 56: 90%\n  bucket 57: 10%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 58: 10%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 58: 20%\n  bucket 57: 60%\n  bucket 58: 30%\n  bucket 57: 70%\n  bucket 58: 40%\n  bucket 57: 80%\n  bucket 58: 50%\n  bucket 57: 90%\n  bucket 58: 60%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were unpaired; of these:\n    3 (100.00%) aligned 0 times\n    0 (0.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were unpaired; of these:\n    3 (100.00%) aligned 0 times\n    0 (0.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 3: 40%\n  bucket 2: 50%\nGetting block 4 of 60\nGetting block 5 of 60\nGetting block 6 of 60\nGetting block 7 of 60\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Reserving size (126) for bucket 5\n  Calculating Z arrays for bucket 8\n  bucket 1: 60%\n  Reserving size (126) for bucket 4\n  bucket 3: 50%\n  bucket 2: 60%\n  Reserving size (126) for bucket 6\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 3: 70%\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 5\n  bucket 2: 80%\n  bucket 3: 80%\n  Entering block accumulator loop for bucket 8:\n  bucket 3: 90%\n  bucket 1: 70%\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 10%\n  bucket 1: 80%\n  bucket 3: 100%\n  bucket 6: 20%\n  bucket 8: 10%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 5: 10%\n  bucket 1: 100%\n  bucket 6: 30%\n  Sorting block of length 42 for bucket 1\n  bucket 5: 20%\n  bucket 6: 40%\n  bucket 8: 20%\n  bucket 5: 30%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Entering block accumulator loop for bucket 4:\n  bucket 5: 40%\n  (Using difference cover)\n  Reserving size (126) for bucket 7\n  bucket 4: 10%\n  bucket 6: 50%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 8: 30%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 8: 40%\n  bucket 4: 20%\n  bucket 6: 70%\n  bucket 5: 60%\n  bucket 8: 50%\n  bucket 6: 80%\n  Calculating Z arrays for bucket 7\n  bucket 8: 60%\n  bucket 5: 70%\n  bucket 6: 90%\n  bucket 4: 30%\n  bucket 8: 70%\n  bucket 6: 100%\n  bucket 5: 80%\n  bucket 8: 80%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 4: 40%\n  bucket 8: 90%\n  bucket 5: 90%\n  bucket 4: 50%\n  bucket 8: 100%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  bucket 10: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 100%\n  Entering block accumulator loop for bucket 12:\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 60\n  Entering block accumulator loop for bucket 13:\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 15: 30%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 15: 40%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 15: 50%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 15: 60%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 15: 70%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 15: 80%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 15: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 10%\n  bucket 17: 10%\n  bucket 16: 20%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 16: 30%\n  bucket 17: 40%\n  bucket 16: 40%\n  bucket 17: 50%\n  bucket 16: 50%\n  bucket 17: 60%\n  bucket 16: 60%\n  bucket 17: 70%\n  bucket 16: 70%\n  bucket 17: 80%\n  bucket 16: 80%\n  bucket 17: 90%\n  bucket 16: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\nGetting block 20 of 60\n  bucket 19: 100%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 21: 10%\n  bucket 20: 20%\n  bucket 21: 20%\n  bucket 20: 30%\n  bucket 21: 30%\n  bucket 20: 40%\n  bucket 21: 40%\n  bucket 20: 50%\n  bucket 21: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 21: 60%\n  bucket 20: 90%\n  bucket 21: 70%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 60%\n  bucket 22: 70%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 80%\n  bucket 23: 10%\n  bucket 22: 90%\n  bucket 23: 20%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 20%\nGetting block 31 of 60\n  bucket 29: 30%\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 10%\n  bucket 29: 40%\n  bucket 30: 20%\n  bucket 29: 50%\n  bucket 30: 30%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 40%\n  bucket 29: 60%\n  bucket 30: 50%\n  bucket 31: 10%\n  bucket 30: 60%\n  bucket 29: 70%\n  bucket 30: 70%\n  bucket 31: 20%\n  bucket 30: 80%\n  bucket 31: 30%\n  bucket 29: 80%\n  bucket 30: 90%\n  bucket 31: 40%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 31: 50%\n  bucket 29: 100%\n  bucket 31: 60%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 32:\n  bucket 33: 10%\n  bucket 32: 10%\n  bucket 33: 20%\n  bucket 32: 20%\n  bucket 33: 30%\n  bucket 32: 30%\n  bucket 33: 40%\n  bucket 32: 40%\n  bucket 33: 50%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 32: 50%\n  bucket 33: 60%\n  bucket 32: 60%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 70%\n  bucket 32: 70%\n  bucket 34: 10%\n  bucket 33: 80%\n  bucket 32: 80%\n  bucket 34: 20%\n  bucket 33: 90%\n  bucket 32: 90%\n  bucket 34: 30%\n  bucket 33: 100%\n  bucket 34: 40%\n  Sorting block of length 44 for bucket 33\n  bucket 32: 100%\n  (Using difference cover)\n  bucket 34: 50%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 35:\n  bucket 36: 10%\n  bucket 35: 10%\n  bucket 36: 20%\n  bucket 35: 20%\n  bucket 36: 30%\n  bucket 35: 30%\n  bucket 36: 40%\n  bucket 35: 40%\n  bucket 36: 50%\n  bucket 35: 50%\n  bucket 36: 60%\n  bucket 35: 60%\n  bucket 36: 70%\n  bucket 35: 70%\n  bucket 36: 80%\n  bucket 35: 80%\n  bucket 36: 90%\n  bucket 35: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\nGetting block 38 of 60\n  bucket 37: 20%\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  bucket 37: 30%\n  bucket 37: 40%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 38: 10%\n  bucket 37: 70%\n  bucket 38: 20%\n  bucket 37: 80%\n  bucket 38: 30%\n  bucket 37: 90%\n  bucket 38: 40%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\nGetting block 41 of 60\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 41\nReturning block of 42 for bucket 40\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 43:\n  Entering block accumulator loop for bucket 42:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 42: 10%\n  bucket 43: 30%\n  bucket 42: 20%\n  bucket 43: 40%\n  bucket 42: 30%\n  bucket 43: 50%\n  bucket 42: 40%\n  bucket 43: 60%\n  bucket 42: 50%\n  bucket 43: 70%\n  bucket 42: 60%\n  bucket 43: 80%\n  bucket 42: 70%\n  bucket 43: 90%\n  bucket 42: 80%\n  bucket 43: 100%\n  bucket 42: 90%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  Entering block accumulator loop for bucket 46:\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  bucket 46: 10%\n  bucket 45: 20%\n  Calculating Z arrays for bucket 47\n  bucket 46: 20%\n  bucket 45: 30%\n  bucket 46: 30%\n  Entering block accumulator loop for bucket 47:\n  bucket 45: 40%\n  bucket 46: 40%\n  bucket 45: 50%\n  bucket 46: 50%\n  bucket 47: 10%\n  bucket 45: 60%\n  bucket 46: 60%\n  bucket 47: 20%\n  bucket 45: 70%\n  bucket 46: 70%\n  bucket 47: 30%\n  bucket 45: 80%\n  bucket 46: 80%\n  bucket 47: 40%\n  bucket 45: 90%\n  bucket 46: 90%\n  bucket 47: 50%\n  bucket 45: 100%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Calculating Z arrays for bucket 49\n  bucket 48: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 20%\n  bucket 49: 10%\n  bucket 48: 30%\n  bucket 49: 20%\n  bucket 48: 40%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 48: 50%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 48: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 48: 70%\n  bucket 49: 90%\n  bucket 49: 100%\n  bucket 48: 80%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Entering block accumulator loop for bucket 50:\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 10%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 20%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 51: 10%\n  bucket 50: 30%\n  bucket 51: 20%\n  Entering block accumulator loop for bucket 52:\n  bucket 50: 40%\n  bucket 51: 30%\n  bucket 52: 10%\n  bucket 50: 50%\n  bucket 51: 40%\n  bucket 50: 60%\n  bucket 52: 20%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 52: 30%\n  bucket 50: 80%\n  bucket 51: 60%\n  bucket 50: 90%\n  bucket 52: 40%\n  bucket 51: 70%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 52: 50%\n  bucket 51: 80%\n  bucket 52: 60%\n  bucket 51: 90%\n  bucket 52: 70%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Entering block accumulator loop for bucket 53:\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 53: 10%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 20%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 10%\n  bucket 53: 30%\n  bucket 55: 10%\n  bucket 53: 40%\n  bucket 54: 20%\n  bucket 53: 50%\n  bucket 54: 30%\n  bucket 55: 20%\n  bucket 54: 40%\n  bucket 53: 60%\n  bucket 55: 30%\n  bucket 54: 50%\n  bucket 53: 70%\n  bucket 55: 40%\n  bucket 53: 80%\n  bucket 55: 50%\n  bucket 53: 90%\n  bucket 54: 60%\n  bucket 55: 60%\n  bucket 53: 100%\n  bucket 54: 70%\n  bucket 55: 70%\n  bucket 54: 80%\n  bucket 55: 80%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 55: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 70%\n  bucket 56: 80%\nGetting block 58 of 60\n  Entering block accumulator loop for bucket 57:\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 56: 90%\n  bucket 57: 10%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 58: 10%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 58: 20%\n  bucket 57: 60%\n  bucket 58: 30%\n  bucket 57: 70%\n  bucket 58: 40%\n  bucket 57: 80%\n  bucket 58: 50%\n  bucket 57: 90%\n  bucket 58: 60%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-10-15 13:56:36", "plugin": "core", "name": "end_epoch", "raw_value": "1729000596.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:56:36", "plugin": "core", "name": "start_epoch", "raw_value": "1729000596.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-6", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 6, "time_seconds": 32.87823677062988, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "dc5d174ae13fb137"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "949d8e4e4e9ecc6b"}, "library|input_2": {"src": "hda", "id": "949d8e4e4e9ecc6b"}, "library|type": "paired", "adv|output_options|unaligned_file": true, "adv|output_options|aligned_file": true, "adv|output_options|output_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "265cb140895e7896", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:57:18.306310", "create_time": "2024-10-15T13:57:05.623687", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-724x8", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/6/6/3/dataset_663d8178-c1ff-4ec2-8d79-40f7ce399860.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/4/e/6/dataset_4e61c1f3-a47a-4072-81a7-125d032b265a.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/4/e/6/dataset_4e61c1f3-a47a-4072-81a7-125d032b265a.dat' input_r.fasta &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f   -1 'input_f.fasta' -2 'input_r.fasta' --un-conc '/galaxy/server/database/objects/e/4/6/dataset_e463fbe4-b9a0-49f9-a448-4a0da8862a52.dat'  --al-conc '/galaxy/server/database/objects/e/f/8/dataset_ef86a226-9812-489f-b5a4-d8518eefee36.dat'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/c/1/f/dataset_c1f0da67-d984-4774-b28d-40cc50d44e43.dat'   && mv '/galaxy/server/database/objects/e/4/6/dataset_e463fbe4-b9a0-49f9-a448-4a0da8862a52.1.dat' '/galaxy/server/database/objects/e/4/6/dataset_e463fbe4-b9a0-49f9-a448-4a0da8862a52.dat' && mv '/galaxy/server/database/objects/e/4/6/dataset_e463fbe4-b9a0-49f9-a448-4a0da8862a52.2.dat' '/galaxy/server/database/objects/4/1/3/dataset_413a26f9-8f5b-41e1-9dd5-49411115e0a4.dat' && mv '/galaxy/server/database/objects/e/f/8/dataset_ef86a226-9812-489f-b5a4-d8518eefee36.1.dat' '/galaxy/server/database/objects/e/f/8/dataset_ef86a226-9812-489f-b5a4-d8518eefee36.dat' && mv '/galaxy/server/database/objects/e/f/8/dataset_ef86a226-9812-489f-b5a4-d8518eefee36.2.dat' '/galaxy/server/database/objects/8/8/c/dataset_88cca5ad-a60e-47e8-a6a3-941cfcfd8933.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 1, \"aligned_file\": true, \"output_options_selector\": \"advanced\", \"unaligned_file\": true}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 312, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 312, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 311, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "dc5d174ae13fb137", "src": "hda", "uuid": "663d8178-c1ff-4ec2-8d79-40f7ce399860"}, "library|input_1": {"id": "949d8e4e4e9ecc6b", "src": "hda", "uuid": "4e61c1f3-a47a-4072-81a7-125d032b265a"}, "library|input_2": {"id": "949d8e4e4e9ecc6b", "src": "hda", "uuid": "4e61c1f3-a47a-4072-81a7-125d032b265a"}}, "outputs": {"output_aligned_reads_r": {"id": "54b53ba68f293e85", "src": "hda", "uuid": "88cca5ad-a60e-47e8-a6a3-941cfcfd8933"}, "output_unaligned_reads_r": {"id": "6baaf9b2180c0f9a", "src": "hda", "uuid": "413a26f9-8f5b-41e1-9dd5-49411115e0a4"}, "output_aligned_reads_l": {"id": "10fc1f4d7a2b861e", "src": "hda", "uuid": "ef86a226-9812-489f-b5a4-d8518eefee36"}, "output_unaligned_reads_l": {"id": "3d47daa858de7ae7", "src": "hda", "uuid": "e463fbe4-b9a0-49f9-a448-4a0da8862a52"}, "output_alignments": {"id": "551cf1ffb3858f93", "src": "hda", "uuid": "c1f0da67-d984-4774-b28d-40cc50d44e43"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  bucket 1: 20%\nGetting block 4 of 60\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 30%\n  bucket 3: 10%\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 3: 20%\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 4\n  bucket 1: 40%\n  bucket 2: 10%\n  bucket 3: 30%\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 20%\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 4:\n  bucket 5: 10%\n  bucket 2: 30%\n  bucket 3: 40%\n  bucket 4: 10%\n  bucket 1: 70%\n  bucket 5: 20%\n  bucket 3: 50%\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 2: 50%\n  bucket 5: 30%\n  bucket 4: 40%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 2: 60%\n  bucket 4: 50%\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 4: 60%\n  bucket 1: 100%\nGetting block 8 of 60\n  bucket 4: 70%\n  bucket 5: 40%\n  bucket 3: 80%\n  bucket 2: 70%\n  Calculating Z arrays for bucket 7\n  bucket 4: 80%\nGetting block 6 of 60\n  bucket 5: 50%\n  bucket 3: 90%\n  Reserving size (126) for bucket 6\n  Sorting block of length 42 for bucket 1\n  bucket 3: 100%\n  bucket 4: 90%\n  (Using difference cover)\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Calculating Z arrays for bucket 6\n  bucket 2: 80%\n  bucket 4: 100%\n  Entering block accumulator loop for bucket 7:\n  Reserving size (126) for bucket 8\n  bucket 2: 90%\n  bucket 7: 10%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 60%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 7: 20%\n  bucket 5: 70%\n  bucket 6: 10%\n  bucket 5: 80%\n  bucket 7: 30%\n  bucket 6: 20%\n  bucket 5: 90%\n  bucket 7: 40%\n  bucket 6: 30%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 6: 40%\n  bucket 7: 60%\n  bucket 6: 50%\n  bucket 7: 70%\n  bucket 6: 60%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 6: 70%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 6: 80%\n  Calculating Z arrays for bucket 8\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 8:\nReturning block of 43 for bucket 1\n  bucket 8: 10%\n  bucket 8: 20%\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  Sorting block time: 00:00:00\n  bucket 8: 90%\nReturning block of 107 for bucket 3\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 10%\n  bucket 13: 60%\n  bucket 14: 20%\n  bucket 13: 70%\n  bucket 14: 30%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 13: 90%\n  bucket 14: 50%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 40%\n  bucket 16: 50%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 60%\n  bucket 17: 10%\n  bucket 16: 70%\n  bucket 17: 20%\n  bucket 16: 80%\n  bucket 17: 30%\n  bucket 16: 90%\n  bucket 17: 40%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 18:\n  bucket 19: 10%\n  bucket 18: 10%\n  bucket 19: 20%\n  bucket 18: 20%\n  bucket 19: 30%\n  bucket 18: 30%\n  bucket 19: 40%\n  bucket 18: 40%\n  bucket 19: 50%\n  bucket 18: 50%\n  bucket 19: 60%\n  bucket 18: 60%\n  bucket 19: 70%\n  bucket 18: 70%\n  bucket 19: 80%\n  bucket 18: 80%\n  bucket 19: 90%\n  bucket 18: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  bucket 18: 100%\n  Calculating Z arrays for bucket 20\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\nGetting block 21 of 60\n  bucket 20: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 21\nReturning block of 123 for bucket 18\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 22: 40%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 22: 50%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 22: 60%\n  bucket 24: 30%\n  bucket 22: 70%\n  bucket 23: 40%\n  bucket 24: 40%\n  bucket 22: 80%\n  bucket 23: 50%\n  bucket 22: 90%\n  bucket 24: 50%\n  bucket 23: 60%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 23: 70%\n  bucket 24: 70%\n  bucket 23: 80%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 25: 40%\n  bucket 26: 50%\n  bucket 25: 50%\n  bucket 26: 60%\n  bucket 25: 60%\n  bucket 26: 70%\n  bucket 25: 70%\n  bucket 26: 80%\n  bucket 25: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 20%\nGetting block 29 of 60\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 27: 50%\n  bucket 28: 20%\n  bucket 27: 60%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 27: 70%\n  bucket 28: 40%\n  bucket 29: 10%\n  bucket 27: 80%\n  bucket 28: 50%\n  bucket 27: 90%\n  bucket 29: 20%\n  bucket 28: 60%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  bucket 28: 70%\n  bucket 29: 30%\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 29: 40%\n  bucket 28: 90%\n  bucket 29: 50%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 31: 10%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 31: 20%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 32: 60%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 70%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\n  bucket 32: 80%\n  bucket 34: 10%\n  bucket 33: 20%\n  bucket 32: 90%\n  bucket 34: 20%\n  bucket 33: 30%\n  bucket 32: 100%\n  bucket 34: 30%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 40%\n  bucket 34: 40%\n  bucket 33: 50%\n  bucket 34: 50%\n  bucket 33: 60%\n  bucket 34: 60%\n  bucket 33: 70%\n  bucket 34: 70%\n  bucket 33: 80%\n  bucket 34: 80%\n  bucket 33: 90%\n  bucket 34: 90%\n  bucket 33: 100%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 60%\n  bucket 35: 70%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 80%\n  bucket 36: 10%\n  bucket 35: 90%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  bucket 36: 40%\n  (Using difference cover)\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 38: 10%\n  bucket 37: 30%\n  bucket 38: 20%\n  bucket 37: 40%\n  bucket 38: 30%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 38: 40%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 38: 50%\n  bucket 37: 90%\n  bucket 38: 60%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\nGetting block 40 of 60\n  Entering block accumulator loop for bucket 39:\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  bucket 39: 10%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 20%\n  bucket 40: 10%\n  bucket 39: 30%\n  bucket 40: 20%\n  bucket 39: 40%\n  bucket 40: 30%\n  bucket 39: 50%\n  bucket 40: 40%\n  bucket 39: 60%\n  bucket 40: 50%\n  bucket 39: 70%\n  bucket 40: 60%\n  bucket 39: 80%\n  bucket 40: 70%\n  bucket 39: 90%\n  bucket 40: 80%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 43:\n  bucket 41: 10%\n  Entering block accumulator loop for bucket 42:\n  bucket 43: 10%\n  bucket 41: 20%\n  bucket 43: 20%\n  bucket 42: 10%\n  bucket 41: 30%\n  bucket 43: 30%\n  bucket 42: 20%\n  bucket 43: 40%\n  Sorting block time: 00:00:00\n  bucket 41: 40%\nReturning block of 126 for bucket 39\n  bucket 42: 30%\n  bucket 43: 50%\n  bucket 41: 50%\n  bucket 42: 40%\n  bucket 43: 60%\n  bucket 41: 60%\n  Sorting block time: 00:00:00\n  bucket 42: 50%\n  bucket 43: 70%\nReturning block of 42 for bucket 40\n  bucket 41: 70%\n  bucket 42: 60%\n  bucket 43: 80%\n  bucket 42: 70%\n  bucket 43: 90%\n  bucket 41: 80%\n  bucket 42: 80%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 41: 90%\n  bucket 42: 90%\n  bucket 41: 100%\n  bucket 42: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Entering block accumulator loop for bucket 47:\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 10%\n  bucket 47: 20%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 30%\n  bucket 48: 10%\n  bucket 47: 40%\n  bucket 48: 20%\n  bucket 47: 50%\n  bucket 48: 30%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 48: 40%\n  bucket 47: 80%\n  bucket 48: 50%\n  bucket 47: 90%\n  bucket 48: 60%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 50\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 49:\n  bucket 50: 10%\n  bucket 49: 10%\n  bucket 50: 20%\n  bucket 49: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 49: 30%\n  bucket 50: 60%\n  bucket 49: 40%\n  bucket 50: 70%\n  bucket 49: 50%\n  bucket 50: 80%\n  bucket 49: 60%\n  bucket 50: 90%\n  bucket 49: 70%\n  bucket 50: 100%\n  bucket 49: 80%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 10%\n  bucket 53: 10%\n  bucket 52: 20%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 52: 30%\n  bucket 53: 40%\n  bucket 52: 40%\n  bucket 53: 50%\n  bucket 52: 50%\n  bucket 53: 60%\n  bucket 52: 60%\n  bucket 53: 70%\n  bucket 52: 70%\n  bucket 53: 80%\n  bucket 52: 80%\n  bucket 53: 90%\n  bucket 52: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 54 of 60\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 54:\n  bucket 55: 10%\n  bucket 54: 10%\n  bucket 55: 20%\n  bucket 54: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 54: 30%\n  bucket 55: 50%\n  bucket 54: 40%\n  bucket 55: 60%\n  bucket 54: 50%\n  bucket 55: 70%\n  bucket 54: 60%\n  bucket 55: 80%\n  bucket 54: 70%\n  bucket 55: 90%\n  bucket 54: 80%\n  bucket 55: 100%\n  bucket 54: 90%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 58:\n  Entering block accumulator loop for bucket 59:\n  Sorting block time: 00:00:00\n  bucket 58: 10%\nReturning block of 86 for bucket 57\n  bucket 59: 10%\n  bucket 58: 20%\n  bucket 59: 20%\n  bucket 58: 30%\n  bucket 59: 30%\n  bucket 58: 40%\n  bucket 59: 40%\n  bucket 58: 50%\n  bucket 59: 50%\n  bucket 58: 60%\n  bucket 59: 60%\n  bucket 58: 70%\n  bucket 59: 70%\n  bucket 58: 80%\n  bucket 59: 80%\n  bucket 58: 90%\n  bucket 59: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    3 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        6 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    3 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        6 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  bucket 1: 20%\nGetting block 4 of 60\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 30%\n  bucket 3: 10%\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 3: 20%\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 4\n  bucket 1: 40%\n  bucket 2: 10%\n  bucket 3: 30%\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 20%\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 4:\n  bucket 5: 10%\n  bucket 2: 30%\n  bucket 3: 40%\n  bucket 4: 10%\n  bucket 1: 70%\n  bucket 5: 20%\n  bucket 3: 50%\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 2: 50%\n  bucket 5: 30%\n  bucket 4: 40%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 2: 60%\n  bucket 4: 50%\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 4: 60%\n  bucket 1: 100%\nGetting block 8 of 60\n  bucket 4: 70%\n  bucket 5: 40%\n  bucket 3: 80%\n  bucket 2: 70%\n  Calculating Z arrays for bucket 7\n  bucket 4: 80%\nGetting block 6 of 60\n  bucket 5: 50%\n  bucket 3: 90%\n  Reserving size (126) for bucket 6\n  Sorting block of length 42 for bucket 1\n  bucket 3: 100%\n  bucket 4: 90%\n  (Using difference cover)\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Calculating Z arrays for bucket 6\n  bucket 2: 80%\n  bucket 4: 100%\n  Entering block accumulator loop for bucket 7:\n  Reserving size (126) for bucket 8\n  bucket 2: 90%\n  bucket 7: 10%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 60%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 7: 20%\n  bucket 5: 70%\n  bucket 6: 10%\n  bucket 5: 80%\n  bucket 7: 30%\n  bucket 6: 20%\n  bucket 5: 90%\n  bucket 7: 40%\n  bucket 6: 30%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 6: 40%\n  bucket 7: 60%\n  bucket 6: 50%\n  bucket 7: 70%\n  bucket 6: 60%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 6: 70%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 6: 80%\n  Calculating Z arrays for bucket 8\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 8:\nReturning block of 43 for bucket 1\n  bucket 8: 10%\n  bucket 8: 20%\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  Sorting block time: 00:00:00\n  bucket 8: 90%\nReturning block of 107 for bucket 3\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 10%\n  bucket 13: 60%\n  bucket 14: 20%\n  bucket 13: 70%\n  bucket 14: 30%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 13: 90%\n  bucket 14: 50%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 40%\n  bucket 16: 50%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 60%\n  bucket 17: 10%\n  bucket 16: 70%\n  bucket 17: 20%\n  bucket 16: 80%\n  bucket 17: 30%\n  bucket 16: 90%\n  bucket 17: 40%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 18:\n  bucket 19: 10%\n  bucket 18: 10%\n  bucket 19: 20%\n  bucket 18: 20%\n  bucket 19: 30%\n  bucket 18: 30%\n  bucket 19: 40%\n  bucket 18: 40%\n  bucket 19: 50%\n  bucket 18: 50%\n  bucket 19: 60%\n  bucket 18: 60%\n  bucket 19: 70%\n  bucket 18: 70%\n  bucket 19: 80%\n  bucket 18: 80%\n  bucket 19: 90%\n  bucket 18: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  bucket 18: 100%\n  Calculating Z arrays for bucket 20\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\nGetting block 21 of 60\n  bucket 20: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 21\nReturning block of 123 for bucket 18\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 22: 40%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 22: 50%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 22: 60%\n  bucket 24: 30%\n  bucket 22: 70%\n  bucket 23: 40%\n  bucket 24: 40%\n  bucket 22: 80%\n  bucket 23: 50%\n  bucket 22: 90%\n  bucket 24: 50%\n  bucket 23: 60%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 23: 70%\n  bucket 24: 70%\n  bucket 23: 80%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 25: 40%\n  bucket 26: 50%\n  bucket 25: 50%\n  bucket 26: 60%\n  bucket 25: 60%\n  bucket 26: 70%\n  bucket 25: 70%\n  bucket 26: 80%\n  bucket 25: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 20%\nGetting block 29 of 60\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 27: 50%\n  bucket 28: 20%\n  bucket 27: 60%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 27: 70%\n  bucket 28: 40%\n  bucket 29: 10%\n  bucket 27: 80%\n  bucket 28: 50%\n  bucket 27: 90%\n  bucket 29: 20%\n  bucket 28: 60%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  bucket 28: 70%\n  bucket 29: 30%\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 29: 40%\n  bucket 28: 90%\n  bucket 29: 50%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 31: 10%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 31: 20%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 32: 60%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 70%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\n  bucket 32: 80%\n  bucket 34: 10%\n  bucket 33: 20%\n  bucket 32: 90%\n  bucket 34: 20%\n  bucket 33: 30%\n  bucket 32: 100%\n  bucket 34: 30%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 40%\n  bucket 34: 40%\n  bucket 33: 50%\n  bucket 34: 50%\n  bucket 33: 60%\n  bucket 34: 60%\n  bucket 33: 70%\n  bucket 34: 70%\n  bucket 33: 80%\n  bucket 34: 80%\n  bucket 33: 90%\n  bucket 34: 90%\n  bucket 33: 100%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 60%\n  bucket 35: 70%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 80%\n  bucket 36: 10%\n  bucket 35: 90%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  bucket 36: 40%\n  (Using difference cover)\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 38: 10%\n  bucket 37: 30%\n  bucket 38: 20%\n  bucket 37: 40%\n  bucket 38: 30%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 38: 40%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 38: 50%\n  bucket 37: 90%\n  bucket 38: 60%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\nGetting block 40 of 60\n  Entering block accumulator loop for bucket 39:\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  bucket 39: 10%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 20%\n  bucket 40: 10%\n  bucket 39: 30%\n  bucket 40: 20%\n  bucket 39: 40%\n  bucket 40: 30%\n  bucket 39: 50%\n  bucket 40: 40%\n  bucket 39: 60%\n  bucket 40: 50%\n  bucket 39: 70%\n  bucket 40: 60%\n  bucket 39: 80%\n  bucket 40: 70%\n  bucket 39: 90%\n  bucket 40: 80%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 43:\n  bucket 41: 10%\n  Entering block accumulator loop for bucket 42:\n  bucket 43: 10%\n  bucket 41: 20%\n  bucket 43: 20%\n  bucket 42: 10%\n  bucket 41: 30%\n  bucket 43: 30%\n  bucket 42: 20%\n  bucket 43: 40%\n  Sorting block time: 00:00:00\n  bucket 41: 40%\nReturning block of 126 for bucket 39\n  bucket 42: 30%\n  bucket 43: 50%\n  bucket 41: 50%\n  bucket 42: 40%\n  bucket 43: 60%\n  bucket 41: 60%\n  Sorting block time: 00:00:00\n  bucket 42: 50%\n  bucket 43: 70%\nReturning block of 42 for bucket 40\n  bucket 41: 70%\n  bucket 42: 60%\n  bucket 43: 80%\n  bucket 42: 70%\n  bucket 43: 90%\n  bucket 41: 80%\n  bucket 42: 80%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 41: 90%\n  bucket 42: 90%\n  bucket 41: 100%\n  bucket 42: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Entering block accumulator loop for bucket 47:\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 10%\n  bucket 47: 20%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 30%\n  bucket 48: 10%\n  bucket 47: 40%\n  bucket 48: 20%\n  bucket 47: 50%\n  bucket 48: 30%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 48: 40%\n  bucket 47: 80%\n  bucket 48: 50%\n  bucket 47: 90%\n  bucket 48: 60%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 50\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 49:\n  bucket 50: 10%\n  bucket 49: 10%\n  bucket 50: 20%\n  bucket 49: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 49: 30%\n  bucket 50: 60%\n  bucket 49: 40%\n  bucket 50: 70%\n  bucket 49: 50%\n  bucket 50: 80%\n  bucket 49: 60%\n  bucket 50: 90%\n  bucket 49: 70%\n  bucket 50: 100%\n  bucket 49: 80%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 10%\n  bucket 53: 10%\n  bucket 52: 20%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 52: 30%\n  bucket 53: 40%\n  bucket 52: 40%\n  bucket 53: 50%\n  bucket 52: 50%\n  bucket 53: 60%\n  bucket 52: 60%\n  bucket 53: 70%\n  bucket 52: 70%\n  bucket 53: 80%\n  bucket 52: 80%\n  bucket 53: 90%\n  bucket 52: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 54 of 60\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 54:\n  bucket 55: 10%\n  bucket 54: 10%\n  bucket 55: 20%\n  bucket 54: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 54: 30%\n  bucket 55: 50%\n  bucket 54: 40%\n  bucket 55: 60%\n  bucket 54: 50%\n  bucket 55: 70%\n  bucket 54: 60%\n  bucket 55: 80%\n  bucket 54: 70%\n  bucket 55: 90%\n  bucket 54: 80%\n  bucket 55: 100%\n  bucket 54: 90%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 58:\n  Entering block accumulator loop for bucket 59:\n  Sorting block time: 00:00:00\n  bucket 58: 10%\nReturning block of 86 for bucket 57\n  bucket 59: 10%\n  bucket 58: 20%\n  bucket 59: 20%\n  bucket 58: 30%\n  bucket 59: 30%\n  bucket 58: 40%\n  bucket 59: 40%\n  bucket 58: 50%\n  bucket 59: 50%\n  bucket 58: 60%\n  bucket 59: 60%\n  bucket 58: 70%\n  bucket 59: 70%\n  bucket 58: 80%\n  bucket 59: 80%\n  bucket 58: 90%\n  bucket 59: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:57:08", "plugin": "core", "name": "end_epoch", "raw_value": "1729000628.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:57:07", "plugin": "core", "name": "start_epoch", "raw_value": "1729000627.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-7", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 7, "time_seconds": 37.0362446308136, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "7d1077d4bd8ba69b"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "5eee286872594463"}, "library|input_2": {"src": "hda", "id": "804f4dc024f1ea10"}, "library|paired_options|no_mixed": true, "library|paired_options|no_discordant": true, "library|paired_options|paired_options_selector": "advanced", "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "8b1173b30996a89e", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:57:55.892896", "create_time": "2024-10-15T13:57:43.302940", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-25p7q", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/a/5/5/dataset_a5520a3b-b39a-486c-8e7a-2fda2c28dd4c.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/5/3/1/dataset_5313a20e-fed5-4c90-a02c-cde75a60856b.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/1/c/6/dataset_1c6866fe-e888-48c7-8631-f0d1d99dad10.dat' input_r.fastq.gz &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq.gz' -2 'input_r.fastq.gz'  --fr --no-mixed --no-discordant        --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/e/2/3/dataset_e2352c35-2ac5-45d6-9bee-d55052c8a914.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 319, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 320, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": true, \"no_mixed\": true, \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 318, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "7d1077d4bd8ba69b", "src": "hda", "uuid": "a5520a3b-b39a-486c-8e7a-2fda2c28dd4c"}, "library|input_1": {"id": "5eee286872594463", "src": "hda", "uuid": "5313a20e-fed5-4c90-a02c-cde75a60856b"}, "library|input_2": {"id": "804f4dc024f1ea10", "src": "hda", "uuid": "1c6866fe-e888-48c7-8631-f0d1d99dad10"}}, "outputs": {"output_alignments": {"id": "419a74ca85c33dc3", "src": "hda", "uuid": "e2352c35-2ac5-45d6-9bee-d55052c8a914"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\nGetting block 3 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 2\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\nGetting block 6 of 60\n  Calculating Z arrays for bucket 3\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 7\nGetting block 8 of 60\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 6: 10%\n  bucket 2: 10%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 7: 10%\n  bucket 1: 40%\n  Reserving size (126) for bucket 8\n  bucket 6: 20%\n  bucket 2: 20%\n  bucket 4: 10%\n  Calculating Z arrays for bucket 8\nGetting block 5 of 60\n  bucket 2: 30%\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 8:\n  Reserving size (126) for bucket 5\n  bucket 4: 30%\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 2: 40%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 1: 60%\n  bucket 4: 50%\n  bucket 8: 20%\n  bucket 1: 70%\n  Calculating Z arrays for bucket 5\n  bucket 8: 30%\n  bucket 6: 30%\n  bucket 2: 50%\n  bucket 4: 60%\n  bucket 6: 40%\n  bucket 8: 40%\n  bucket 4: 70%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 50%\n  bucket 4: 80%\n  bucket 8: 50%\n  bucket 1: 80%\n  bucket 5: 10%\n  bucket 8: 60%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 5: 20%\n  bucket 6: 60%\n  bucket 2: 70%\n  bucket 4: 90%\n  bucket 5: 30%\n  bucket 6: 70%\n  bucket 3: 10%\n  bucket 1: 100%\n  bucket 5: 40%\n  bucket 8: 70%\n  Sorting block of length 42 for bucket 1\n  bucket 3: 20%\n  bucket 8: 80%\n  bucket 5: 50%\n  bucket 2: 80%\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 3: 30%\n  bucket 2: 90%\n  bucket 6: 80%\n  bucket 8: 90%\n  bucket 2: 100%\n  bucket 5: 60%\n  bucket 4: 100%\n  bucket 8: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 7: 40%\n  Sorting block of length 68 for bucket 4\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 3: 40%\n  bucket 6: 90%\n  bucket 7: 50%\n  bucket 5: 70%\n  bucket 3: 50%\n  (Using difference cover)\n  bucket 7: 60%\n  bucket 6: 100%\n  bucket 5: 80%\n  Sorting block of length 90 for bucket 6\n  bucket 3: 60%\n  bucket 7: 70%\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 3: 70%\n  bucket 7: 80%\n  bucket 5: 100%\n  bucket 3: 80%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 3: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 80%\n  bucket 11: 90%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 50%\n  bucket 14: 10%\n  bucket 13: 60%\n  bucket 14: 20%\n  bucket 13: 70%\n  bucket 14: 30%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 13: 90%\n  bucket 14: 50%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  bucket 15: 50%\n  Calculating Z arrays for bucket 16\n  bucket 15: 60%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 70%\n  bucket 16: 10%\n  bucket 15: 80%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 15: 90%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 15: 100%\n  bucket 16: 60%\n  Sorting block of length 68 for bucket 15\n  bucket 16: 70%\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 17:\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 19:\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 19: 10%\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 19: 20%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 19: 30%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 19: 40%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 19: 50%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 19: 60%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 19: 70%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 18: 80%\n  bucket 19: 90%\n  bucket 18: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 21: 20%\n  bucket 22: 40%\n  Sorting block time: 00:00:00\n  bucket 21: 30%\nReturning block of 98 for bucket 20\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 21: 40%\n  bucket 22: 50%\n  bucket 21: 50%\n  bucket 22: 60%\n  Entering block accumulator loop for bucket 23:\n  bucket 21: 60%\n  bucket 22: 70%\n  bucket 23: 10%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 23: 20%\n  bucket 21: 80%\n  bucket 22: 90%\n  bucket 23: 30%\n  bucket 21: 90%\n  bucket 23: 40%\n  bucket 22: 100%\n  bucket 21: 100%\n  Sorting block of length 80 for bucket 22\n  bucket 23: 50%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  (Using difference cover)\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Entering block accumulator loop for bucket 26:\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 28:\n  bucket 29: 10%\n  bucket 28: 10%\n  bucket 29: 20%\n  bucket 28: 20%\n  bucket 29: 30%\n  bucket 28: 30%\n  bucket 29: 40%\n  bucket 28: 40%\n  bucket 29: 50%\n  bucket 28: 50%\n  bucket 29: 60%\nGetting block 30 of 60\n  bucket 29: 70%\n  bucket 28: 60%\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 80%\n  bucket 28: 70%\n  bucket 29: 90%\n  Entering block accumulator loop for bucket 30:\n  bucket 28: 80%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 30: 10%\n  bucket 28: 100%\n  bucket 30: 20%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 32: 10%\n  bucket 31: 60%\n  bucket 32: 20%\n  bucket 31: 70%\n  bucket 32: 30%\n  bucket 31: 80%\n  bucket 32: 40%\n  bucket 31: 90%\n  bucket 32: 50%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  bucket 40: 10%\n  Calculating Z arrays for bucket 41\n  bucket 40: 20%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 30%\n  bucket 41: 10%\n  bucket 40: 40%\n  bucket 41: 20%\n  bucket 40: 50%\n  bucket 41: 30%\n  bucket 40: 60%\n  bucket 41: 40%\n  bucket 40: 70%\n  bucket 41: 50%\n  bucket 40: 80%\n  bucket 41: 60%\n  bucket 40: 90%\n  bucket 41: 70%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  Entering block accumulator loop for bucket 47:\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  bucket 47: 10%\nGetting block 49 of 60\n  bucket 47: 20%\n  bucket 46: 20%\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  bucket 47: 30%\n  Calculating Z arrays for bucket 48\n  bucket 46: 30%\n  bucket 47: 40%\n  Entering block accumulator loop for bucket 49:\n  bucket 46: 40%\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 50%\n  bucket 49: 20%\n  bucket 46: 50%\n  bucket 48: 10%\n  bucket 49: 30%\n  bucket 47: 60%\n  bucket 46: 60%\n  bucket 49: 40%\n  bucket 47: 70%\n  bucket 48: 20%\n  bucket 47: 80%\n  bucket 49: 50%\n  bucket 48: 30%\n  bucket 46: 70%\n  bucket 47: 90%\n  bucket 49: 60%\n  bucket 48: 40%\n  bucket 47: 100%\n  bucket 49: 70%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 46: 80%\n  bucket 48: 50%\n  bucket 49: 80%\n  bucket 46: 90%\n  bucket 48: 60%\n  bucket 49: 90%\n  bucket 46: 100%\n  bucket 48: 70%\n  bucket 49: 100%\n  Sorting block of length 69 for bucket 46\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  (Using difference cover)\n  bucket 48: 80%\n  bucket 48: 90%\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\nGetting block 52 of 60\n  Calculating Z arrays for bucket 51\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 52\nReturning block of 109 for bucket 50\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 10%\n  bucket 52: 10%\n  bucket 51: 20%\n  bucket 52: 20%\n  bucket 51: 30%\n  bucket 52: 30%\n  bucket 51: 40%\n  bucket 52: 40%\n  bucket 51: 50%\n  bucket 52: 50%\n  bucket 51: 60%\n  bucket 52: 60%\n  bucket 51: 70%\n  bucket 52: 70%\n  bucket 51: 80%\n  bucket 52: 80%\n  bucket 51: 90%\n  bucket 52: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 20%\n  bucket 57: 10%\n  bucket 56: 30%\n  bucket 57: 20%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 57: 30%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 57: 40%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 57: 50%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 58:\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 10%\n  bucket 59: 10%\n  bucket 58: 20%\n  bucket 59: 20%\n  bucket 58: 30%\n  bucket 59: 30%\n  bucket 58: 40%\n  bucket 59: 40%\n  bucket 58: 50%\n  bucket 59: 50%\n  bucket 58: 60%\n  bucket 59: 60%\n  bucket 58: 70%\n  bucket 59: 70%\n  bucket 58: 80%\n  bucket 59: 80%\n  bucket 58: 90%\n  bucket 59: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\nGetting block 3 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 2\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\nGetting block 6 of 60\n  Calculating Z arrays for bucket 3\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 7\nGetting block 8 of 60\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 6: 10%\n  bucket 2: 10%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 7: 10%\n  bucket 1: 40%\n  Reserving size (126) for bucket 8\n  bucket 6: 20%\n  bucket 2: 20%\n  bucket 4: 10%\n  Calculating Z arrays for bucket 8\nGetting block 5 of 60\n  bucket 2: 30%\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 8:\n  Reserving size (126) for bucket 5\n  bucket 4: 30%\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 2: 40%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 1: 60%\n  bucket 4: 50%\n  bucket 8: 20%\n  bucket 1: 70%\n  Calculating Z arrays for bucket 5\n  bucket 8: 30%\n  bucket 6: 30%\n  bucket 2: 50%\n  bucket 4: 60%\n  bucket 6: 40%\n  bucket 8: 40%\n  bucket 4: 70%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 50%\n  bucket 4: 80%\n  bucket 8: 50%\n  bucket 1: 80%\n  bucket 5: 10%\n  bucket 8: 60%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 5: 20%\n  bucket 6: 60%\n  bucket 2: 70%\n  bucket 4: 90%\n  bucket 5: 30%\n  bucket 6: 70%\n  bucket 3: 10%\n  bucket 1: 100%\n  bucket 5: 40%\n  bucket 8: 70%\n  Sorting block of length 42 for bucket 1\n  bucket 3: 20%\n  bucket 8: 80%\n  bucket 5: 50%\n  bucket 2: 80%\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 3: 30%\n  bucket 2: 90%\n  bucket 6: 80%\n  bucket 8: 90%\n  bucket 2: 100%\n  bucket 5: 60%\n  bucket 4: 100%\n  bucket 8: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 7: 40%\n  Sorting block of length 68 for bucket 4\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 3: 40%\n  bucket 6: 90%\n  bucket 7: 50%\n  bucket 5: 70%\n  bucket 3: 50%\n  (Using difference cover)\n  bucket 7: 60%\n  bucket 6: 100%\n  bucket 5: 80%\n  Sorting block of length 90 for bucket 6\n  bucket 3: 60%\n  bucket 7: 70%\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 3: 70%\n  bucket 7: 80%\n  bucket 5: 100%\n  bucket 3: 80%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 3: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 80%\n  bucket 11: 90%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 50%\n  bucket 14: 10%\n  bucket 13: 60%\n  bucket 14: 20%\n  bucket 13: 70%\n  bucket 14: 30%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 13: 90%\n  bucket 14: 50%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  bucket 15: 50%\n  Calculating Z arrays for bucket 16\n  bucket 15: 60%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 70%\n  bucket 16: 10%\n  bucket 15: 80%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 15: 90%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 15: 100%\n  bucket 16: 60%\n  Sorting block of length 68 for bucket 15\n  bucket 16: 70%\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 17:\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 19:\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 19: 10%\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 19: 20%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 19: 30%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 19: 40%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 19: 50%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 19: 60%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 19: 70%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 18: 80%\n  bucket 19: 90%\n  bucket 18: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 21: 20%\n  bucket 22: 40%\n  Sorting block time: 00:00:00\n  bucket 21: 30%\nReturning block of 98 for bucket 20\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 21: 40%\n  bucket 22: 50%\n  bucket 21: 50%\n  bucket 22: 60%\n  Entering block accumulator loop for bucket 23:\n  bucket 21: 60%\n  bucket 22: 70%\n  bucket 23: 10%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 23: 20%\n  bucket 21: 80%\n  bucket 22: 90%\n  bucket 23: 30%\n  bucket 21: 90%\n  bucket 23: 40%\n  bucket 22: 100%\n  bucket 21: 100%\n  Sorting block of length 80 for bucket 22\n  bucket 23: 50%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  (Using difference cover)\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Entering block accumulator loop for bucket 26:\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 28:\n  bucket 29: 10%\n  bucket 28: 10%\n  bucket 29: 20%\n  bucket 28: 20%\n  bucket 29: 30%\n  bucket 28: 30%\n  bucket 29: 40%\n  bucket 28: 40%\n  bucket 29: 50%\n  bucket 28: 50%\n  bucket 29: 60%\nGetting block 30 of 60\n  bucket 29: 70%\n  bucket 28: 60%\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 80%\n  bucket 28: 70%\n  bucket 29: 90%\n  Entering block accumulator loop for bucket 30:\n  bucket 28: 80%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 30: 10%\n  bucket 28: 100%\n  bucket 30: 20%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 32: 10%\n  bucket 31: 60%\n  bucket 32: 20%\n  bucket 31: 70%\n  bucket 32: 30%\n  bucket 31: 80%\n  bucket 32: 40%\n  bucket 31: 90%\n  bucket 32: 50%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  bucket 40: 10%\n  Calculating Z arrays for bucket 41\n  bucket 40: 20%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 30%\n  bucket 41: 10%\n  bucket 40: 40%\n  bucket 41: 20%\n  bucket 40: 50%\n  bucket 41: 30%\n  bucket 40: 60%\n  bucket 41: 40%\n  bucket 40: 70%\n  bucket 41: 50%\n  bucket 40: 80%\n  bucket 41: 60%\n  bucket 40: 90%\n  bucket 41: 70%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  Entering block accumulator loop for bucket 47:\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  bucket 47: 10%\nGetting block 49 of 60\n  bucket 47: 20%\n  bucket 46: 20%\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  bucket 47: 30%\n  Calculating Z arrays for bucket 48\n  bucket 46: 30%\n  bucket 47: 40%\n  Entering block accumulator loop for bucket 49:\n  bucket 46: 40%\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 50%\n  bucket 49: 20%\n  bucket 46: 50%\n  bucket 48: 10%\n  bucket 49: 30%\n  bucket 47: 60%\n  bucket 46: 60%\n  bucket 49: 40%\n  bucket 47: 70%\n  bucket 48: 20%\n  bucket 47: 80%\n  bucket 49: 50%\n  bucket 48: 30%\n  bucket 46: 70%\n  bucket 47: 90%\n  bucket 49: 60%\n  bucket 48: 40%\n  bucket 47: 100%\n  bucket 49: 70%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 46: 80%\n  bucket 48: 50%\n  bucket 49: 80%\n  bucket 46: 90%\n  bucket 48: 60%\n  bucket 49: 90%\n  bucket 46: 100%\n  bucket 48: 70%\n  bucket 49: 100%\n  Sorting block of length 69 for bucket 46\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  (Using difference cover)\n  bucket 48: 80%\n  bucket 48: 90%\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\nGetting block 52 of 60\n  Calculating Z arrays for bucket 51\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 52\nReturning block of 109 for bucket 50\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 10%\n  bucket 52: 10%\n  bucket 51: 20%\n  bucket 52: 20%\n  bucket 51: 30%\n  bucket 52: 30%\n  bucket 51: 40%\n  bucket 52: 40%\n  bucket 51: 50%\n  bucket 52: 50%\n  bucket 51: 60%\n  bucket 52: 60%\n  bucket 51: 70%\n  bucket 52: 70%\n  bucket 51: 80%\n  bucket 52: 80%\n  bucket 51: 90%\n  bucket 52: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 20%\n  bucket 57: 10%\n  bucket 56: 30%\n  bucket 57: 20%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 57: 30%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 57: 40%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 57: 50%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 58:\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 10%\n  bucket 59: 10%\n  bucket 58: 20%\n  bucket 59: 20%\n  bucket 58: 30%\n  bucket 59: 30%\n  bucket 58: 40%\n  bucket 59: 40%\n  bucket 58: 50%\n  bucket 59: 50%\n  bucket 58: 60%\n  bucket 59: 60%\n  bucket 58: 70%\n  bucket 59: 70%\n  bucket 58: 80%\n  bucket 59: 80%\n  bucket 58: 90%\n  bucket 59: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-10-15 13:57:45", "plugin": "core", "name": "end_epoch", "raw_value": "1729000665.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:57:45", "plugin": "core", "name": "start_epoch", "raw_value": "1729000665.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-8", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 8, "time_seconds": 20.186801195144653, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "hisat2/2.2.1+galaxy1-9", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 9, "time_seconds": 35.80088233947754, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "f40035532353b94b"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "0746329e044a03bc"}, "library|input_2": {"src": "hda", "id": "110626d9928faae0"}, "library|rna_strandness": "FR", "library|type": "paired"}, "job": {"model_class": "Job", "id": "07608909a233e0c6", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:58:52.594224", "create_time": "2024-10-15T13:58:40.280528", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-7tcds", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/8/4/2/dataset_842132bd-68a7-477c-8d27-c7a887e09ce2.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/f/1/4/dataset_f14ff9e2-c9b1-4a65-b60f-da9c938e4daa.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/0/a/a/dataset_0aa4b0a8-93ad-4470-8473-3d1cf8a7f4b9.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'      --rna-strandness FR                           | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/2/8/0/dataset_2809c5b6-9adb-4134-9579-4949c9826c53.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 326, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 327, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"FR\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 325, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "f40035532353b94b", "src": "hda", "uuid": "842132bd-68a7-477c-8d27-c7a887e09ce2"}, "library|input_1": {"id": "0746329e044a03bc", "src": "hda", "uuid": "f14ff9e2-c9b1-4a65-b60f-da9c938e4daa"}, "library|input_2": {"id": "110626d9928faae0", "src": "hda", "uuid": "0aa4b0a8-93ad-4470-8473-3d1cf8a7f4b9"}}, "outputs": {"output_alignments": {"id": "62c5cbcf5863a6e2", "src": "hda", "uuid": "2809c5b6-9adb-4134-9579-4949c9826c53"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 40%\n  Calculating Z arrays for bucket 3\n  bucket 2: 10%\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 50%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 4: 10%\n  bucket 1: 70%\n  bucket 3: 20%\n  bucket 2: 50%\n  bucket 4: 20%\n  bucket 1: 80%\n  bucket 3: 30%\n  bucket 2: 60%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 1: 90%\nGetting block 5 of 60\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  bucket 4: 40%\n  Reserving size (126) for bucket 5\n  bucket 3: 50%\n  bucket 4: 50%\n  Calculating Z arrays for bucket 5\n  bucket 2: 70%\n  bucket 4: 60%\n  bucket 1: 100%\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\nGetting block 8 of 60\n  Calculating Z arrays for bucket 6\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 4: 70%\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 80%\n  bucket 4: 80%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 60%\n  Calculating Z arrays for bucket 7\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 2: 90%\n  bucket 4: 100%\n  bucket 5: 20%\n  bucket 3: 80%\n  Sorting block of length 68 for bucket 4\n  bucket 2: 100%\n  (Using difference cover)\n  bucket 6: 20%\n  bucket 5: 30%\n  Sorting block of length 84 for bucket 2\n  bucket 3: 90%\n  (Using difference cover)\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 40%\n  bucket 3: 100%\n  bucket 6: 30%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 8: 10%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 7: 10%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 6: 70%\n  bucket 5: 100%\n  bucket 7: 30%\n  bucket 6: 80%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 30%\n  bucket 6: 90%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 6: 100%\n  bucket 8: 50%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 7: 80%\n  bucket 8: 90%\n  bucket 7: 90%\n  bucket 8: 100%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 60\n  Entering block accumulator loop for bucket 9:\n  Reserving size (126) for bucket 11\n  bucket 10: 10%\n  Calculating Z arrays for bucket 11\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 11: 10%\n  bucket 10: 50%\n  bucket 9: 40%\n  bucket 11: 20%\n  bucket 10: 60%\n  bucket 11: 30%\n  bucket 10: 70%\n  bucket 9: 50%\n  bucket 11: 40%\n  bucket 10: 80%\n  bucket 9: 60%\n  bucket 10: 90%\n  bucket 11: 50%\n  bucket 10: 100%\n  bucket 9: 70%\n  bucket 11: 60%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 11: 70%\n  bucket 9: 90%\n  bucket 11: 80%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 12\n  bucket 13: 10%\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  Entering block accumulator loop for bucket 12:\n  bucket 13: 40%\n  bucket 14: 10%\n  bucket 13: 50%\n  bucket 12: 10%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 12: 20%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 12: 30%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 12: 40%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 12: 50%\n  bucket 14: 70%\n  bucket 13: 100%\n  bucket 12: 60%\n  Sorting block of length 85 for bucket 13\n  bucket 14: 80%\n  bucket 12: 70%\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 12: 80%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  bucket 15: 70%\n  Calculating Z arrays for bucket 16\n  bucket 15: 80%\n  bucket 15: 90%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 18:\n  Entering block accumulator loop for bucket 17:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 17: 10%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 20%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 17: 30%\n  bucket 18: 80%\n  bucket 17: 40%\n  bucket 18: 90%\n  bucket 18: 100%\n  bucket 17: 50%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  bucket 20: 90%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 70%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 80%\n  bucket 22: 10%\n  bucket 21: 90%\n  bucket 22: 20%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\nGetting block 24 of 60\n  bucket 23: 60%\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  Sorting block time: 00:00:00\n  bucket 24: 70%\nReturning block of 65 for bucket 23\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 20%\n  bucket 25: 30%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 26: 20%\n  bucket 25: 70%\n  bucket 26: 30%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 40%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 29\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 29:\n  bucket 30: 10%\n  bucket 29: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 20%\n  bucket 30: 40%\n  bucket 29: 30%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 40%\n  bucket 30: 70%\n  bucket 29: 50%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 60%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 10%\n  bucket 31: 20%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 32: 10%\n  bucket 31: 50%\n  bucket 32: 20%\n  bucket 31: 60%\n  bucket 32: 30%\n  bucket 31: 70%\n  bucket 32: 40%\n  bucket 31: 80%\n  bucket 32: 50%\n  bucket 31: 90%\n  bucket 32: 60%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  bucket 32: 70%\n  (Using difference cover)\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\n  bucket 34: 10%\n  bucket 33: 20%\n  bucket 34: 20%\n  bucket 33: 30%\n  bucket 34: 30%\n  bucket 33: 40%\n  bucket 34: 40%\n  bucket 33: 50%\n  bucket 34: 50%\n  bucket 33: 60%\n  bucket 34: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 34: 70%\n  bucket 33: 90%\n  bucket 34: 80%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 35:\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 35: 10%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 20%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 10%\n  bucket 35: 30%\n  bucket 37: 10%\n  bucket 36: 20%\n  bucket 35: 40%\n  bucket 37: 20%\n  bucket 36: 30%\n  bucket 35: 50%\n  bucket 37: 30%\n  bucket 36: 40%\n  bucket 35: 60%\n  bucket 36: 50%\n  bucket 37: 40%\n  bucket 35: 70%\n  bucket 36: 60%\n  bucket 37: 50%\n  bucket 35: 80%\n  bucket 37: 60%\n  bucket 36: 70%\n  bucket 35: 90%\n  bucket 37: 70%\n  bucket 36: 80%\n  bucket 35: 100%\n  bucket 36: 90%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 37: 80%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 39:\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 39: 10%\n  bucket 38: 20%\n  bucket 39: 20%\n  bucket 38: 30%\n  bucket 39: 30%\n  bucket 38: 40%\n  bucket 39: 40%\n  bucket 38: 50%\n  bucket 39: 50%\n  bucket 38: 60%\n  bucket 39: 60%\n  bucket 38: 70%\n  bucket 39: 70%\n  bucket 38: 80%\n  bucket 39: 80%\n  bucket 38: 90%\n  bucket 39: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\nGetting block 41 of 60\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 70%\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 80%\n  bucket 42: 10%\n  bucket 41: 10%\n  bucket 40: 90%\n  bucket 42: 20%\n  bucket 40: 100%\n  bucket 41: 20%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 42: 30%\n  bucket 41: 30%\n  bucket 42: 40%\n  bucket 41: 40%\n  bucket 42: 50%\n  bucket 41: 50%\n  bucket 42: 60%\n  bucket 41: 60%\n  bucket 42: 70%\n  bucket 41: 70%\n  bucket 42: 80%\n  bucket 41: 80%\n  bucket 42: 90%\n  bucket 41: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Entering block accumulator loop for bucket 44:\n  Calculating Z arrays for bucket 45\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  bucket 44: 10%\n  (Using difference cover)\n  bucket 44: 20%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 45: 10%\n  bucket 44: 50%\n  bucket 45: 20%\n  bucket 44: 60%\n  bucket 45: 30%\n  bucket 44: 70%\n  bucket 45: 40%\n  bucket 44: 80%\n  bucket 45: 50%\n  bucket 44: 90%\n  bucket 45: 60%\n  bucket 44: 100%\n  bucket 45: 70%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 20%\n  bucket 50: 10%\n  bucket 49: 30%\n  bucket 50: 20%\n  bucket 49: 40%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 49: 50%\n  bucket 50: 50%\n  bucket 49: 60%\n  bucket 50: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 50: 70%\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  bucket 49: 90%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Entering block accumulator loop for bucket 51:\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 51: 10%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 20%\n  bucket 52: 10%\n  bucket 51: 30%\n  bucket 52: 20%\n  bucket 51: 40%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 51: 50%\n  bucket 52: 50%\n  bucket 51: 60%\n  bucket 52: 60%\n  bucket 51: 70%\n  bucket 52: 70%\n  bucket 51: 80%\n  bucket 52: 80%\n  bucket 51: 90%\n  bucket 52: 90%\n  bucket 51: 100%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  bucket 53: 70%\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 53: 80%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 90%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 10%\n  bucket 55: 10%\n  bucket 53: 100%\n  bucket 54: 20%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 55: 20%\n  bucket 54: 30%\n  bucket 55: 30%\n  bucket 54: 40%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 54: 50%\n  bucket 55: 60%\n  bucket 54: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 54: 70%\n  bucket 55: 90%\n  bucket 54: 80%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 10%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 20%\n  bucket 57: 10%\n  bucket 56: 30%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 56: 40%\n  bucket 57: 40%\n  bucket 56: 50%\n  bucket 57: 50%\n  bucket 56: 60%\n  bucket 57: 60%\n  bucket 56: 70%\n  bucket 57: 70%\n  bucket 56: 80%\n  bucket 57: 80%\n  bucket 56: 90%\n  bucket 57: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Entering block accumulator loop for bucket 59:\n  Calculating Z arrays for bucket 60\n  bucket 59: 10%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 20%\n  bucket 60: 10%\n  bucket 59: 30%\n  bucket 60: 20%\n  bucket 59: 40%\n  bucket 60: 30%\n  bucket 59: 50%\n  bucket 60: 40%\n  bucket 59: 60%\n  bucket 60: 50%\n  bucket 59: 70%\n  bucket 60: 60%\n  bucket 59: 80%\n  bucket 60: 70%\n  bucket 59: 90%\n  bucket 60: 80%\n  bucket 59: 100%\n  bucket 60: 90%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 40%\n  Calculating Z arrays for bucket 3\n  bucket 2: 10%\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 50%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 4: 10%\n  bucket 1: 70%\n  bucket 3: 20%\n  bucket 2: 50%\n  bucket 4: 20%\n  bucket 1: 80%\n  bucket 3: 30%\n  bucket 2: 60%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 1: 90%\nGetting block 5 of 60\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  bucket 4: 40%\n  Reserving size (126) for bucket 5\n  bucket 3: 50%\n  bucket 4: 50%\n  Calculating Z arrays for bucket 5\n  bucket 2: 70%\n  bucket 4: 60%\n  bucket 1: 100%\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\nGetting block 8 of 60\n  Calculating Z arrays for bucket 6\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 4: 70%\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 80%\n  bucket 4: 80%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 60%\n  Calculating Z arrays for bucket 7\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 2: 90%\n  bucket 4: 100%\n  bucket 5: 20%\n  bucket 3: 80%\n  Sorting block of length 68 for bucket 4\n  bucket 2: 100%\n  (Using difference cover)\n  bucket 6: 20%\n  bucket 5: 30%\n  Sorting block of length 84 for bucket 2\n  bucket 3: 90%\n  (Using difference cover)\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 40%\n  bucket 3: 100%\n  bucket 6: 30%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 8: 10%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 7: 10%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 6: 70%\n  bucket 5: 100%\n  bucket 7: 30%\n  bucket 6: 80%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 30%\n  bucket 6: 90%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 6: 100%\n  bucket 8: 50%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 7: 80%\n  bucket 8: 90%\n  bucket 7: 90%\n  bucket 8: 100%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 60\n  Entering block accumulator loop for bucket 9:\n  Reserving size (126) for bucket 11\n  bucket 10: 10%\n  Calculating Z arrays for bucket 11\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 11: 10%\n  bucket 10: 50%\n  bucket 9: 40%\n  bucket 11: 20%\n  bucket 10: 60%\n  bucket 11: 30%\n  bucket 10: 70%\n  bucket 9: 50%\n  bucket 11: 40%\n  bucket 10: 80%\n  bucket 9: 60%\n  bucket 10: 90%\n  bucket 11: 50%\n  bucket 10: 100%\n  bucket 9: 70%\n  bucket 11: 60%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 11: 70%\n  bucket 9: 90%\n  bucket 11: 80%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 12\n  bucket 13: 10%\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  Entering block accumulator loop for bucket 12:\n  bucket 13: 40%\n  bucket 14: 10%\n  bucket 13: 50%\n  bucket 12: 10%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 12: 20%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 12: 30%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 12: 40%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 12: 50%\n  bucket 14: 70%\n  bucket 13: 100%\n  bucket 12: 60%\n  Sorting block of length 85 for bucket 13\n  bucket 14: 80%\n  bucket 12: 70%\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 12: 80%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  bucket 15: 70%\n  Calculating Z arrays for bucket 16\n  bucket 15: 80%\n  bucket 15: 90%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 18:\n  Entering block accumulator loop for bucket 17:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 17: 10%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 20%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 17: 30%\n  bucket 18: 80%\n  bucket 17: 40%\n  bucket 18: 90%\n  bucket 18: 100%\n  bucket 17: 50%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  bucket 20: 90%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 70%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 80%\n  bucket 22: 10%\n  bucket 21: 90%\n  bucket 22: 20%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\nGetting block 24 of 60\n  bucket 23: 60%\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  Sorting block time: 00:00:00\n  bucket 24: 70%\nReturning block of 65 for bucket 23\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 20%\n  bucket 25: 30%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 26: 20%\n  bucket 25: 70%\n  bucket 26: 30%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 40%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 29\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 29:\n  bucket 30: 10%\n  bucket 29: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 20%\n  bucket 30: 40%\n  bucket 29: 30%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 40%\n  bucket 30: 70%\n  bucket 29: 50%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 60%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 10%\n  bucket 31: 20%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 32: 10%\n  bucket 31: 50%\n  bucket 32: 20%\n  bucket 31: 60%\n  bucket 32: 30%\n  bucket 31: 70%\n  bucket 32: 40%\n  bucket 31: 80%\n  bucket 32: 50%\n  bucket 31: 90%\n  bucket 32: 60%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  bucket 32: 70%\n  (Using difference cover)\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\n  bucket 34: 10%\n  bucket 33: 20%\n  bucket 34: 20%\n  bucket 33: 30%\n  bucket 34: 30%\n  bucket 33: 40%\n  bucket 34: 40%\n  bucket 33: 50%\n  bucket 34: 50%\n  bucket 33: 60%\n  bucket 34: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 34: 70%\n  bucket 33: 90%\n  bucket 34: 80%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 35:\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 35: 10%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 20%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 10%\n  bucket 35: 30%\n  bucket 37: 10%\n  bucket 36: 20%\n  bucket 35: 40%\n  bucket 37: 20%\n  bucket 36: 30%\n  bucket 35: 50%\n  bucket 37: 30%\n  bucket 36: 40%\n  bucket 35: 60%\n  bucket 36: 50%\n  bucket 37: 40%\n  bucket 35: 70%\n  bucket 36: 60%\n  bucket 37: 50%\n  bucket 35: 80%\n  bucket 37: 60%\n  bucket 36: 70%\n  bucket 35: 90%\n  bucket 37: 70%\n  bucket 36: 80%\n  bucket 35: 100%\n  bucket 36: 90%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 37: 80%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 39:\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 39: 10%\n  bucket 38: 20%\n  bucket 39: 20%\n  bucket 38: 30%\n  bucket 39: 30%\n  bucket 38: 40%\n  bucket 39: 40%\n  bucket 38: 50%\n  bucket 39: 50%\n  bucket 38: 60%\n  bucket 39: 60%\n  bucket 38: 70%\n  bucket 39: 70%\n  bucket 38: 80%\n  bucket 39: 80%\n  bucket 38: 90%\n  bucket 39: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\nGetting block 41 of 60\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 70%\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 80%\n  bucket 42: 10%\n  bucket 41: 10%\n  bucket 40: 90%\n  bucket 42: 20%\n  bucket 40: 100%\n  bucket 41: 20%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 42: 30%\n  bucket 41: 30%\n  bucket 42: 40%\n  bucket 41: 40%\n  bucket 42: 50%\n  bucket 41: 50%\n  bucket 42: 60%\n  bucket 41: 60%\n  bucket 42: 70%\n  bucket 41: 70%\n  bucket 42: 80%\n  bucket 41: 80%\n  bucket 42: 90%\n  bucket 41: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Entering block accumulator loop for bucket 44:\n  Calculating Z arrays for bucket 45\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  bucket 44: 10%\n  (Using difference cover)\n  bucket 44: 20%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 45: 10%\n  bucket 44: 50%\n  bucket 45: 20%\n  bucket 44: 60%\n  bucket 45: 30%\n  bucket 44: 70%\n  bucket 45: 40%\n  bucket 44: 80%\n  bucket 45: 50%\n  bucket 44: 90%\n  bucket 45: 60%\n  bucket 44: 100%\n  bucket 45: 70%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 20%\n  bucket 50: 10%\n  bucket 49: 30%\n  bucket 50: 20%\n  bucket 49: 40%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 49: 50%\n  bucket 50: 50%\n  bucket 49: 60%\n  bucket 50: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 50: 70%\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  bucket 49: 90%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Entering block accumulator loop for bucket 51:\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 51: 10%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 20%\n  bucket 52: 10%\n  bucket 51: 30%\n  bucket 52: 20%\n  bucket 51: 40%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 51: 50%\n  bucket 52: 50%\n  bucket 51: 60%\n  bucket 52: 60%\n  bucket 51: 70%\n  bucket 52: 70%\n  bucket 51: 80%\n  bucket 52: 80%\n  bucket 51: 90%\n  bucket 52: 90%\n  bucket 51: 100%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  bucket 53: 70%\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 53: 80%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 90%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 10%\n  bucket 55: 10%\n  bucket 53: 100%\n  bucket 54: 20%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 55: 20%\n  bucket 54: 30%\n  bucket 55: 30%\n  bucket 54: 40%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 54: 50%\n  bucket 55: 60%\n  bucket 54: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 54: 70%\n  bucket 55: 90%\n  bucket 54: 80%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 10%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 20%\n  bucket 57: 10%\n  bucket 56: 30%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 56: 40%\n  bucket 57: 40%\n  bucket 56: 50%\n  bucket 57: 50%\n  bucket 56: 60%\n  bucket 57: 60%\n  bucket 56: 70%\n  bucket 57: 70%\n  bucket 56: 80%\n  bucket 57: 80%\n  bucket 56: 90%\n  bucket 57: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Entering block accumulator loop for bucket 59:\n  Calculating Z arrays for bucket 60\n  bucket 59: 10%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 20%\n  bucket 60: 10%\n  bucket 59: 30%\n  bucket 60: 20%\n  bucket 59: 40%\n  bucket 60: 30%\n  bucket 59: 50%\n  bucket 60: 40%\n  bucket 59: 60%\n  bucket 60: 50%\n  bucket 59: 70%\n  bucket 60: 60%\n  bucket 59: 80%\n  bucket 60: 70%\n  bucket 59: 90%\n  bucket 60: 80%\n  bucket 59: 100%\n  bucket 60: 90%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:58:42", "plugin": "core", "name": "end_epoch", "raw_value": "1729000722.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:58:41", "plugin": "core", "name": "start_epoch", "raw_value": "1729000721.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "ivar_removereads/1.4.3+galaxy0-0", "has_data": true, "data": {"tool_id": "ivar_removereads", "tool_version": "1.4.3+galaxy0", "test_index": 0, "time_seconds": 48.05827331542969, "inputs": {"input_bam": {"src": "hda", "id": "f667d046b5878f3d"}, "variants_tsv": {"src": "hda", "id": "c9565aaa820d2cca"}, "input_bed": {"src": "hda", "id": "db84287526c1801a"}, "amplicons|amplicon_info": {"src": "hda", "id": "41adabc733e93661"}, "amplicons|computed": "no"}, "job": {"model_class": "Job", "id": "5c310a9480ece756", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:50:44.132965", "create_time": "2024-10-15T13:50:25.101797", "galaxy_version": "23.1", "command_version": "iVar version 1.4.3", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/ivar_removereads/ivar_removereads/1.4.3+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-dxldb", "command_line": "cp '/galaxy/server/database/objects/e/6/d/dataset_e6d1053d-bdc0-4baf-a92d-774040e15ac1.dat' binding_sites.bed && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/ivar_removereads/5dc33613c288/ivar_removereads/sanitize_bed.py' binding_sites.bed && ln -s '/galaxy/server/database/objects/b/6/f/dataset_b6f7a62f-6e90-4c3f-8c90-9aaf97e0b92a.dat' amplicon_info.tsv && ivar getmasked -i '/galaxy/server/database/objects/4/c/b/dataset_4cbf0f5c-c57a-4dcc-b311-b4c2f66f1153.dat' -b binding_sites.bed -f amplicon_info.tsv -p masked_primers &&  python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/ivar_removereads/5dc33613c288/ivar_removereads/completemask.py' masked_primers.txt amplicon_info.tsv && ln -s '/galaxy/server/database/objects/a/a/0/dataset_aa0df21d-b19e-4ddb-8c9a-72c235b8fbc7.dat' sorted.bam && ln -s '/galaxy/server/database/objects/_metadata_files/b/3/4/metadata_b341badd-19aa-417d-b68d-dc3d60d0c410.dat' sorted.bam.bai &&  ivar removereads -i sorted.bam -b binding_sites.bed -p removed_reads.bam -t masked_primers.txt", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "amplicons": "{\"__current_case__\": 1, \"amplicon_info\": {\"values\": [{\"id\": 282, \"src\": \"hda\"}]}, \"computed\": \"no\"}"}, "inputs": {"input_bam": {"id": "f667d046b5878f3d", "src": "hda", "uuid": "aa0df21d-b19e-4ddb-8c9a-72c235b8fbc7"}, "variants_tsv": {"id": "c9565aaa820d2cca", "src": "hda", "uuid": "4cbf0f5c-c57a-4dcc-b311-b4c2f66f1153"}, "input_bed": {"id": "db84287526c1801a", "src": "hda", "uuid": "e6d1053d-bdc0-4baf-a92d-774040e15ac1"}, "amplicons|amplicon_info": {"id": "41adabc733e93661", "src": "hda", "uuid": "b6f7a62f-6e90-4c3f-8c90-9aaf97e0b92a"}}, "outputs": {"output_bam": {"id": "1f806b80de77e2f9", "src": "hda", "uuid": "b29ef540-a64b-4fbd-910b-fe4193f63b60"}}, "output_collections": {}, "tool_stdout": "400_18_out_L**\n400_23_out_R\n400_32_out_L\n400_18_out_L**\t400_18_out_R**\t400_23_out_R\t400_23_out_L\t400_32_out_L\t400_32_out_R\n\nRemoving reads primed with any of:\n400_18_out_L**\t400_18_out_R**\t400_23_out_L\t400_23_out_R\t400_32_out_L\t400_32_out_R\nWriting to removed_reads.bam\nNumber of references: 1\nReference Name: PRV\nReference Length: 10807\nUsing Region: PRV\nSorted By Coordinate\nResults:\n2035 reads were removed.\n", "tool_stderr": "Found 67 primers in BED file\nPrimer pair for 400_1_out_R not found in BED file.\nPrimer pair for 400_34_out_L* not found in BED file.\nPrimer pair for 400_35_out_L not found in BED file.\nFound 67 primers in BED file\n", "job_stdout": "", "job_stderr": "", "stderr": "Found 67 primers in BED file\nPrimer pair for 400_1_out_R not found in BED file.\nPrimer pair for 400_34_out_L* not found in BED file.\nPrimer pair for 400_35_out_L not found in BED file.\nFound 67 primers in BED file\n", "stdout": "400_18_out_L**\n400_23_out_R\n400_32_out_L\n400_18_out_L**\t400_18_out_R**\t400_23_out_R\t400_23_out_L\t400_32_out_L\t400_32_out_R\n\nRemoving reads primed with any of:\n400_18_out_L**\t400_18_out_R**\t400_23_out_L\t400_23_out_R\t400_32_out_L\t400_32_out_R\nWriting to removed_reads.bam\nNumber of references: 1\nReference Name: PRV\nReference Length: 10807\nUsing Region: PRV\nSorted By Coordinate\nResults:\n2035 reads were removed.\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:50:32", "plugin": "core", "name": "end_epoch", "raw_value": "1729000232.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:50:31", "plugin": "core", "name": "start_epoch", "raw_value": "1729000231.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "ivar_removereads/1.4.3+galaxy0-1", "has_data": true, "data": {"tool_id": "ivar_removereads", "tool_version": "1.4.3+galaxy0", "test_index": 1, "time_seconds": 39.49201512336731, "inputs": {"input_bam": {"src": "hda", "id": "a7b3aaffe4dbdce7"}, "variants_tsv": {"src": "hda", "id": "23ec02e24c817e57"}, "input_bed": {"src": "hda", "id": "1edbb61011b6070a"}, "amplicons|computed": "yes"}, "job": {"model_class": "Job", "id": "13c4e7828ccc58ce", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:51:23.805064", "create_time": "2024-10-15T13:51:10.458514", "galaxy_version": "23.1", "command_version": "iVar version 1.4.3", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/ivar_removereads/ivar_removereads/1.4.3+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-w42mx", "command_line": "cp '/galaxy/server/database/objects/2/6/0/dataset_26066401-4972-4999-94a9-25db7dc2b228.dat' binding_sites.bed && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/ivar_removereads/5dc33613c288/ivar_removereads/sanitize_bed.py' binding_sites.bed && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/ivar_removereads/5dc33613c288/ivar_removereads/write_amplicon_info_file.py' binding_sites.bed amplicon_info.tsv && ivar getmasked -i '/galaxy/server/database/objects/6/1/c/dataset_61c4995b-ca42-407a-af2b-bdd2b502e5b3.dat' -b binding_sites.bed -f amplicon_info.tsv -p masked_primers &&  python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/ivar_removereads/5dc33613c288/ivar_removereads/completemask.py' masked_primers.txt amplicon_info.tsv && ln -s '/galaxy/server/database/objects/6/8/d/dataset_68dcff48-9bbf-4cf9-84ad-0583f5163d85.dat' sorted.bam && ln -s '/galaxy/server/database/objects/_metadata_files/1/0/f/metadata_10f6dd65-074c-4262-b5ea-959449b89f38.dat' sorted.bam.bai &&  ivar removereads -i sorted.bam -b binding_sites.bed -p removed_reads.bam -t masked_primers.txt", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "amplicons": "{\"__current_case__\": 0, \"computed\": \"yes\"}"}, "inputs": {"input_bam": {"id": "a7b3aaffe4dbdce7", "src": "hda", "uuid": "68dcff48-9bbf-4cf9-84ad-0583f5163d85"}, "variants_tsv": {"id": "23ec02e24c817e57", "src": "hda", "uuid": "61c4995b-ca42-407a-af2b-bdd2b502e5b3"}, "input_bed": {"id": "1edbb61011b6070a", "src": "hda", "uuid": "26066401-4972-4999-94a9-25db7dc2b228"}}, "outputs": {"output_bam": {"id": "f576e7813b7552b9", "src": "hda", "uuid": "94366b1e-dbb1-43a5-9888-c1dd007b0e94"}}, "output_collections": {}, "tool_stdout": "400_18_out_L**\n400_23_out_R\n400_32_out_L\n400_18_out_L**\t400_18_out_R**\t400_23_out_R\t400_23_out_L\t400_32_out_L\t400_32_out_R\n\nRemoving reads primed with any of:\n400_18_out_L**\t400_18_out_R**\t400_23_out_L\t400_23_out_R\t400_32_out_L\t400_32_out_R\nWriting to removed_reads.bam\nNumber of references: 1\nReference Name: PRV\nReference Length: 10807\nUsing Region: PRV\nSorted By Coordinate\nResults:\n2035 reads were removed.\n", "tool_stderr": "Found 67 primers in BED file\nPrimer pair is empty.\nPrimer pair is empty.\nPrimer pair is empty.\nFound 67 primers in BED file\n", "job_stdout": "", "job_stderr": "", "stderr": "Found 67 primers in BED file\nPrimer pair is empty.\nPrimer pair is empty.\nPrimer pair is empty.\nFound 67 primers in BED file\n", "stdout": "400_18_out_L**\n400_23_out_R\n400_32_out_L\n400_18_out_L**\t400_18_out_R**\t400_23_out_R\t400_23_out_L\t400_32_out_L\t400_32_out_R\n\nRemoving reads primed with any of:\n400_18_out_L**\t400_18_out_R**\t400_23_out_L\t400_23_out_R\t400_32_out_L\t400_32_out_R\nWriting to removed_reads.bam\nNumber of references: 1\nReference Name: PRV\nReference Length: 10807\nUsing Region: PRV\nSorted By Coordinate\nResults:\n2035 reads were removed.\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:51:13", "plugin": "core", "name": "end_epoch", "raw_value": "1729000273.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:51:12", "plugin": "core", "name": "start_epoch", "raw_value": "1729000272.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-0", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 0, "time_seconds": 55.143736839294434, "inputs": {"input": {"src": "hda", "id": "5aa34637a74f24b9"}}, "job": {"model_class": "Job", "id": "a932e91cc5d705e4", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:24:37.346970", "create_time": "2024-10-15T13:24:01.180888", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-v45mg", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/b/d/b/dataset_bdb378f6-7451-4687-9ca4-20ba113ec56d.dat' > '/galaxy/server/database/objects/f/b/b/dataset_fbb82d49-f4ca-4d18-834f-0544e4aaa7e2.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "5aa34637a74f24b9", "src": "hda", "uuid": "bdb378f6-7451-4687-9ca4-20ba113ec56d"}}, "outputs": {"output": {"id": "a0a3b5a952bf237b", "src": "hda", "uuid": "fbb82d49-f4ca-4d18-834f-0544e4aaa7e2"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:24:20", "plugin": "core", "name": "end_epoch", "raw_value": "1728998660.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:24:19", "plugin": "core", "name": "start_epoch", "raw_value": "1728998659.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-1", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 1, "time_seconds": 29.451935291290283, "inputs": {"input": {"src": "hda", "id": "1e7b5d4844e73c21"}}, "job": {"model_class": "Job", "id": "960b8a8f5ba73aea", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:25:06.872402", "create_time": "2024-10-15T13:24:55.057761", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-z4c8h", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/1/f/0/dataset_1f07aa3c-797a-4253-acc1-beeeb4cc459c.dat' > '/galaxy/server/database/objects/0/1/1/dataset_01161686-18ea-4053-8499-3d0c6bca187e.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "1e7b5d4844e73c21", "src": "hda", "uuid": "1f07aa3c-797a-4253-acc1-beeeb4cc459c"}}, "outputs": {"output": {"id": "838f783b098a4fec", "src": "hda", "uuid": "01161686-18ea-4053-8499-3d0c6bca187e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:24:57", "plugin": "core", "name": "end_epoch", "raw_value": "1728998697.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:24:56", "plugin": "core", "name": "start_epoch", "raw_value": "1728998696.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-2", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 2, "time_seconds": 31.979584217071533, "inputs": {"input": {"src": "hda", "id": "685251b909d49e50"}}, "job": {"model_class": "Job", "id": "10eb5f9c5fbaee4d", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:25:38.956928", "create_time": "2024-10-15T13:25:27.331830", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-jb5wh", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/8/4/1/dataset_8410737c-03c4-478a-b392-793b26d80ebe.dat' > '/galaxy/server/database/objects/a/7/3/dataset_a73afd5a-398d-49fc-8b7b-ba627e972162.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "685251b909d49e50", "src": "hda", "uuid": "8410737c-03c4-478a-b392-793b26d80ebe"}}, "outputs": {"output": {"id": "804198c0a9709eda", "src": "hda", "uuid": "a73afd5a-398d-49fc-8b7b-ba627e972162"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:25:30", "plugin": "core", "name": "end_epoch", "raw_value": "1728998730.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:25:29", "plugin": "core", "name": "start_epoch", "raw_value": "1728998729.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-3", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 3, "time_seconds": 36.62621259689331, "inputs": {"input": {"src": "hda", "id": "7a27be88dcf282a7"}}, "job": {"model_class": "Job", "id": "e9018d36b4c6a2d5", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:26:15.589516", "create_time": "2024-10-15T13:26:04.084728", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-qqpwk", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/2/1/1/dataset_21108396-2961-49ef-80cc-7f6a16e6f600.dat' > '/galaxy/server/database/objects/4/4/1/dataset_441e7758-e435-4e14-b63e-76040da3f0ff.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "7a27be88dcf282a7", "src": "hda", "uuid": "21108396-2961-49ef-80cc-7f6a16e6f600"}}, "outputs": {"output": {"id": "b2f85d0e6c768520", "src": "hda", "uuid": "441e7758-e435-4e14-b63e-76040da3f0ff"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:26:06", "plugin": "core", "name": "end_epoch", "raw_value": "1728998766.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:26:05", "plugin": "core", "name": "start_epoch", "raw_value": "1728998765.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-4", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 4, "time_seconds": 31.152356147766113, "inputs": {"input": {"src": "hda", "id": "daa39a1a22e8d434"}}, "job": {"model_class": "Job", "id": "80c2c40c30baf438", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:26:46.854440", "create_time": "2024-10-15T13:26:34.480562", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-v8nlx", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/c/c/6/dataset_cc6762d4-1d0d-47f6-8033-0aa2b97e296b.dat' > '/galaxy/server/database/objects/c/c/e/dataset_cced00bb-cdc7-463b-8d00-18a5985325c4.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "daa39a1a22e8d434", "src": "hda", "uuid": "cc6762d4-1d0d-47f6-8033-0aa2b97e296b"}}, "outputs": {"output": {"id": "2f4f2605c1945838", "src": "hda", "uuid": "cced00bb-cdc7-463b-8d00-18a5985325c4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:26:36", "plugin": "core", "name": "end_epoch", "raw_value": "1728998796.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:26:35", "plugin": "core", "name": "start_epoch", "raw_value": "1728998795.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_idxstats/2.0.5-0", "has_data": true, "data": {"tool_id": "samtools_idxstats", "tool_version": "2.0.5", "test_index": 0, "time_seconds": 32.83596229553223, "inputs": {"input": {"src": "hda", "id": "849c4d80b8dc276b"}}, "job": {"model_class": "Job", "id": "13a8d545121d5746", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:07:39.303300", "create_time": "2024-10-15T13:07:24.676473", "galaxy_version": "23.1", "command_version": "Version: 1.15.1 (using htslib 1.16)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_idxstats/samtools_idxstats/2.0.5", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-b74h7", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/5/9/1/dataset_59186dab-fd8e-4ee4-8545-f531019f64cf.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/e/6/e/metadata_e6e6d277-6f11-4450-a9ff-dd5432a602ad.dat' infile.bai &&  samtools idxstats -@ $addthreads infile  > '/galaxy/server/database/objects/4/d/5/dataset_4d5d233b-2c68-4a19-b153-07ddce9bc6c8.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input": {"id": "849c4d80b8dc276b", "src": "hda", "uuid": "59186dab-fd8e-4ee4-8545-f531019f64cf"}}, "outputs": {"output": {"id": "4dd44a591823e02b", "src": "hda", "uuid": "4d5d233b-2c68-4a19-b153-07ddce9bc6c8"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-10-15 13:07:28", "plugin": "core", "name": "end_epoch", "raw_value": "1728997648.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:07:28", "plugin": "core", "name": "start_epoch", "raw_value": "1728997648.0000000"}, {"title": "Memory Allocated (MB)", "value": "8160", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8160.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "samtools_idxstats/2.0.5-1", "has_data": true, "data": {"tool_id": "samtools_idxstats", "tool_version": "2.0.5", "test_index": 1, "time_seconds": 30.755290269851685, "inputs": {"input": {"src": "hda", "id": "3f880346f1d0be5b"}}, "job": {"model_class": "Job", "id": "e67df1ab0db8579b", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:08:10.146602", "create_time": "2024-10-15T13:07:58.464149", "galaxy_version": "23.1", "command_version": "Version: 1.15.1 (using htslib 1.16)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_idxstats/samtools_idxstats/2.0.5", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-dpr4k", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/3/3/d/dataset_33d07de0-cecc-4d2f-afcc-663191fd8024.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/d/5/6/metadata_d56c5bde-8d56-4953-a210-d3776ff755d2.dat' infile.bai &&  samtools idxstats -@ $addthreads infile  > '/galaxy/server/database/objects/b/f/e/dataset_bfe69c27-32ec-4dd9-b5c2-fcf6965ba8fb.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input": {"id": "3f880346f1d0be5b", "src": "hda", "uuid": "33d07de0-cecc-4d2f-afcc-663191fd8024"}}, "outputs": {"output": {"id": "19e8d1e7e5276582", "src": "hda", "uuid": "bfe69c27-32ec-4dd9-b5c2-fcf6965ba8fb"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-10-15 13:08:00", "plugin": "core", "name": "end_epoch", "raw_value": "1728997680.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:08:00", "plugin": "core", "name": "start_epoch", "raw_value": "1728997680.0000000"}, {"title": "Memory Allocated (MB)", "value": "8160", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8160.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.2-0", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 0, "time_seconds": 76.00300121307373, "inputs": {"split_parms|input": {"src": "hda", "id": "e0b4a6d8c64e35cc"}, "split_parms|top": "2", "split_parms|split_by|id_col": "1", "split_parms|split_by|match_regex": "(.*)\\.mgf", "split_parms|split_by|sub_regex": "\\1.tab", "split_parms|split_by|select_split_by": "col", "split_parms|select_ftype": "tabular"}, "job": {"model_class": "Job", "id": "c2f85abad371aea4", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T12:54:43.721752", "create_time": "2024-10-15T12:54:02.769135", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-5trj9", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/2dae863c8f42/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/f/a/a/dataset_faa5ac73-1a29-4a63-823f-cb11b21274a4.dat' --ftype 'tabular' --top '2' --by 'col' --id_column '1' --match '(.*)__backslash__.mgf' --sub '__backslash__1.tab'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 1, \"src\": \"hda\"}]}, \"select_ftype\": \"tabular\", \"split_by\": {\"__current_case__\": 0, \"id_col\": \"1\", \"match_regex\": \"(.*)\\\\.mgf\", \"select_split_by\": \"col\", \"sub_regex\": \"\\\\1.tab\"}, \"top\": \"2\"}"}, "inputs": {"split_parms|input": {"id": "e0b4a6d8c64e35cc", "src": "hda", "uuid": "faa5ac73-1a29-4a63-823f-cb11b21274a4"}}, "outputs": {"__new_primary_file_list_output_tab|foo3.tab__": {"id": "e139f77f10d6a4b6", "src": "hda", "uuid": "1f66d1d5-eec9-45f4-97e9-1141c7938f3c"}, "__new_primary_file_list_output_tab|foo2.tab__": {"id": "0cc593a27539b78f", "src": "hda", "uuid": "c17c600a-4bc8-4c75-9fc6-ed42d144396d"}, "__new_primary_file_list_output_tab|foo.tab__": {"id": "c2f85abad371aea4", "src": "hda", "uuid": "21f22bd2-d360-45be-bd47-2812ac761860"}}, "output_collections": {"list_output_tab": {"id": "e0b4a6d8c64e35cc", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 12:54:32", "plugin": "core", "name": "end_epoch", "raw_value": "1728996872.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 12:54:31", "plugin": "core", "name": "start_epoch", "raw_value": "1728996871.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.2-1", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 1, "time_seconds": 31.561981201171875, "inputs": {"split_parms|input": {"src": "hda", "id": "de27acdece9d4081"}, "split_parms|top": "2", "split_parms|split_by|select_mode|numnew": "2", "split_parms|split_by|select_mode|mode": "numnew", "split_parms|split_by|newfilenames": "test", "split_parms|split_by|select_split_by": "row", "split_parms|select_ftype": "tabular"}, "job": {"model_class": "Job", "id": "e139f77f10d6a4b6", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T12:55:16.180241", "create_time": "2024-10-15T12:55:04.387535", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-8l6b5", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/2dae863c8f42/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/3/4/d/dataset_34d007c5-df95-4910-b4fa-fd53e56dda39.dat' --ftype 'tabular' --top '2' --by 'row' --numnew '2' --file_names 'test' --file_ext 'tabular'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 5, \"src\": \"hda\"}]}, \"select_ftype\": \"tabular\", \"split_by\": {\"__current_case__\": 1, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}, \"select_split_by\": \"row\"}, \"top\": \"2\"}"}, "inputs": {"split_parms|input": {"id": "de27acdece9d4081", "src": "hda", "uuid": "34d007c5-df95-4910-b4fa-fd53e56dda39"}}, "outputs": {"__new_primary_file_list_output_tab|test_000001.tabular__": {"id": "41793abde52ffe3c", "src": "hda", "uuid": "62c2936c-698f-4055-91d3-5bc95413f22d"}, "__new_primary_file_list_output_tab|test_000000.tabular__": {"id": "03e4f66537f0069e", "src": "hda", "uuid": "4bc4b93b-663c-46fe-af15-450c0a024751"}}, "output_collections": {"list_output_tab": {"id": "c2f85abad371aea4", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-10-15 12:55:06", "plugin": "core", "name": "end_epoch", "raw_value": "1728996906.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 12:55:06", "plugin": "core", "name": "start_epoch", "raw_value": "1728996906.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.2-10", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 10, "time_seconds": 29.097902297973633, "inputs": {"split_parms|input": {"src": "hda", "id": "479654b97e474ff3"}, "split_parms|split_method|record_length": "4", "split_parms|split_method|select_split_method": "number", "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "test", "split_parms|select_ftype": "generic"}, "job": {"model_class": "Job", "id": "fc62fa186fb3ad7b", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T12:59:13.074015", "create_time": "2024-10-15T12:59:01.225002", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-rb9tx", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/2dae863c8f42/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/0/6/5/dataset_0653cd67-806e-4bff-aa77-89030078ffe1.dat' --ftype 'generic' --generic_num 4 --numnew '2' --file_names 'test' --file_ext 'fastq'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 6, \"input\": {\"values\": [{\"id\": 50, \"src\": \"hda\"}]}, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"generic\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}, \"split_method\": {\"__current_case__\": 1, \"record_length\": \"4\", \"select_split_method\": \"number\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fastq\""}, "inputs": {"split_parms|input": {"id": "479654b97e474ff3", "src": "hda", "uuid": "0653cd67-806e-4bff-aa77-89030078ffe1"}}, "outputs": {"__new_primary_file_list_output_generic|test_000000__": {"id": "582b16c8b298afc4", "src": "hda", "uuid": "88b402ef-9963-4699-8645-d991d13182ab"}, "__new_primary_file_list_output_generic|test_000001__": {"id": "ca12cdaed4ddc787", "src": "hda", "uuid": "f8cb2152-3132-4c8b-8b64-c0736cf4343a"}}, "output_collections": {"list_output_generic": {"id": "0c92e0d0405fa15a", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 12:59:03", "plugin": "core", "name": "start_epoch", "raw_value": "1728997143.0000000"}, {"title": "Job End Time", "value": "2024-10-15 12:59:03", "plugin": "core", "name": "end_epoch", "raw_value": "1728997143.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.2-11", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 11, "time_seconds": 30.34747290611267, "inputs": {"split_parms|input": {"src": "hda", "id": "5adb112e2de75c19"}, "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "rand", "split_parms|select_allocate|seed": "1010", "split_parms|select_allocate|allocate": "random", "split_parms|select_ftype": "fasta"}, "job": {"model_class": "Job", "id": "b3357a146da94ea3", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T12:59:43.560252", "create_time": "2024-10-15T12:59:31.716559", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-5qbdt", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/2dae863c8f42/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/0/5/4/dataset_05453d75-f924-47da-9c2c-b70d7a73bf2e.dat' --ftype 'fasta' --numnew '2' --rand --seed '1010' --file_names 'rand' --file_ext 'fasta'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 3, \"input\": {\"values\": [{\"id\": 53, \"src\": \"hda\"}]}, \"newfilenames\": \"rand\", \"select_allocate\": {\"__current_case__\": 0, \"allocate\": \"random\", \"seed\": \"1010\"}, \"select_ftype\": \"fasta\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fasta\""}, "inputs": {"split_parms|input": {"id": "5adb112e2de75c19", "src": "hda", "uuid": "05453d75-f924-47da-9c2c-b70d7a73bf2e"}}, "outputs": {"__new_primary_file_list_output_fasta|rand_000000.fasta__": {"id": "13a8d545121d5746", "src": "hda", "uuid": "623e7848-b88e-4bfa-96d3-bad580da3b77"}, "__new_primary_file_list_output_fasta|rand_000001.fasta__": {"id": "22813c3c79070cd9", "src": "hda", "uuid": "634a3a4e-91b7-49bf-bfe1-c4ba1658efa0"}}, "output_collections": {"list_output_fasta": {"id": "82863ab3d50f5270", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 12:59:33", "plugin": "core", "name": "start_epoch", "raw_value": "1728997173.0000000"}, {"title": "Job End Time", "value": "2024-10-15 12:59:33", "plugin": "core", "name": "end_epoch", "raw_value": "1728997173.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.2-12", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 12, "time_seconds": 31.528817176818848, "inputs": {"split_parms|input": {"src": "hda", "id": "e67df1ab0db8579b"}, "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "fasta_batch", "split_parms|select_allocate|allocate": "batch", "split_parms|select_ftype": "fasta"}, "job": {"model_class": "Job", "id": "15d97c20c30cb3e2", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:00:15.476806", "create_time": "2024-10-15T13:00:02.979237", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-ddrks", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/2dae863c8f42/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/6/1/6/dataset_61621818-9de6-4c57-9a1e-4b3337da8214.dat' --ftype 'fasta' --numnew '2' --batch --file_names 'fasta_batch' --file_ext 'fasta'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 3, \"input\": {\"values\": [{\"id\": 56, \"src\": \"hda\"}]}, \"newfilenames\": \"fasta_batch\", \"select_allocate\": {\"__current_case__\": 1, \"allocate\": \"batch\"}, \"select_ftype\": \"fasta\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fasta\""}, "inputs": {"split_parms|input": {"id": "e67df1ab0db8579b", "src": "hda", "uuid": "61621818-9de6-4c57-9a1e-4b3337da8214"}}, "outputs": {"__new_primary_file_list_output_fasta|fasta_batch_000000.fasta__": {"id": "2f9442ca56412728", "src": "hda", "uuid": "a160ea98-42f5-4447-bb7f-c523dfc0ea0a"}, "__new_primary_file_list_output_fasta|fasta_batch_000001.fasta__": {"id": "a63e8a155b947e05", "src": "hda", "uuid": "50249acd-1ea1-4c6e-b856-c7dc84399e66"}}, "output_collections": {"list_output_fasta": {"id": "a5484858537dfaa0", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:00:04", "plugin": "core", "name": "start_epoch", "raw_value": "1728997204.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:00:04", "plugin": "core", "name": "end_epoch", "raw_value": "1728997204.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.2-13", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 13, "time_seconds": 23.756033897399902, "inputs": {"split_parms|input": {"src": "hda", "id": "8f7119cf7db41167"}, "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "test", "split_parms|select_ftype": "txt"}, "job": {"model_class": "Job", "id": "8ca80f83bc17b949", "state": "error", "exit_code": null, "update_time": "2024-10-15T13:00:40.145780", "create_time": "2024-10-15T13:00:35.020834", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-4cmpk", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/2dae863c8f42/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/6/f/9/dataset_6f961b8d-9628-4625-8031-6b769695a404.dat' --ftype 'txt' --numnew '2' --file_names 'test' --file_ext 'txt'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 5, \"input\": {\"values\": [{\"id\": 59, \"src\": \"hda\"}]}, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"txt\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"txt\""}, "inputs": {"split_parms|input": {"id": "8f7119cf7db41167", "src": "hda", "uuid": "6f961b8d-9628-4625-8031-6b769695a404"}}, "outputs": {}, "output_collections": {"list_output_txt": {"id": "667b17fe74af9e53", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": null, "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2, exit_code: None, stderr: .", "Output collection 'list_output_txt': failed to find identifier 'test_000000.txt' in the tool generated elements []"], "status": "failure"}}, {"id": "split_file_to_collection/0.5.2-14", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 14, "time_seconds": 30.471038341522217, "inputs": {"split_parms|input": {"src": "hda", "id": "d35b36da8718f1aa"}, "split_parms|split_method|generic_regex": "^.*", "split_parms|split_method|select_split_method": "regex", "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "test", "split_parms|select_ftype": "generic"}, "job": {"model_class": "Job", "id": "a079d02dd26f5ac6", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:01:10.012782", "create_time": "2024-10-15T13:00:58.267316", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-vtvbv", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/2dae863c8f42/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/6/e/c/dataset_6ecbca76-16de-4d0d-bd08-dc4503f1e6fa.dat' --ftype 'generic' --generic_re '^.*' --numnew '2' --file_names 'test' --file_ext 'txt'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 6, \"input\": {\"values\": [{\"id\": 60, \"src\": \"hda\"}]}, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"generic\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}, \"split_method\": {\"__current_case__\": 0, \"generic_regex\": \"^.*\", \"select_split_method\": \"regex\", \"split_after\": \"false\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"txt\""}, "inputs": {"split_parms|input": {"id": "d35b36da8718f1aa", "src": "hda", "uuid": "6ecbca76-16de-4d0d-bd08-dc4503f1e6fa"}}, "outputs": {"__new_primary_file_list_output_generic|test_000000__": {"id": "cb164c788ac17f5f", "src": "hda", "uuid": "c601dd3a-68b7-4f21-8671-7cf49b182f81"}, "__new_primary_file_list_output_generic|test_000001__": {"id": "8574be9b33236a98", "src": "hda", "uuid": "0c8a3d45-5ffb-4780-875e-434fb6d392df"}}, "output_collections": {"list_output_generic": {"id": "ec11460661f916c4", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:01:00", "plugin": "core", "name": "start_epoch", "raw_value": "1728997260.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:01:00", "plugin": "core", "name": "end_epoch", "raw_value": "1728997260.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.2-15", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 15, "time_seconds": 30.68200445175171, "inputs": {"split_parms|input": {"src": "hda", "id": "2fb0a410e565db47"}, "split_parms|split_method|generic_regex": "^>.*", "split_parms|split_method|select_split_method": "regex", "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "rand", "split_parms|select_allocate|seed": "1010", "split_parms|select_allocate|allocate": "random", "split_parms|select_ftype": "generic"}, "job": {"model_class": "Job", "id": "d472e69baf7104da", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:01:40.489210", "create_time": "2024-10-15T13:01:28.859303", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-5nmv2", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/2dae863c8f42/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/4/5/a/dataset_45aed9ca-4166-44d5-8b01-c8d7582e7315.dat' --ftype 'generic' --generic_re '^>.*' --numnew '2' --rand --seed '1010' --file_names 'rand' --file_ext 'fasta'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 6, \"input\": {\"values\": [{\"id\": 63, \"src\": \"hda\"}]}, \"newfilenames\": \"rand\", \"select_allocate\": {\"__current_case__\": 0, \"allocate\": \"random\", \"seed\": \"1010\"}, \"select_ftype\": \"generic\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}, \"split_method\": {\"__current_case__\": 0, \"generic_regex\": \"^>.*\", \"select_split_method\": \"regex\", \"split_after\": \"false\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fasta\""}, "inputs": {"split_parms|input": {"id": "2fb0a410e565db47", "src": "hda", "uuid": "45aed9ca-4166-44d5-8b01-c8d7582e7315"}}, "outputs": {"__new_primary_file_list_output_generic|rand_000000__": {"id": "bdfb7e5e39305633", "src": "hda", "uuid": "c42b2bd8-5038-4153-8e86-87dba57c6cc4"}, "__new_primary_file_list_output_generic|rand_000001__": {"id": "755c99a730c931e8", "src": "hda", "uuid": "b4f51b4b-459e-4152-8afc-49e0e4b5adbd"}}, "output_collections": {"list_output_generic": {"id": "16b40f9778f6d0ab", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:01:31", "plugin": "core", "name": "start_epoch", "raw_value": "1728997291.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:01:31", "plugin": "core", "name": "end_epoch", "raw_value": "1728997291.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.2-16", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 16, "time_seconds": 29.379159688949585, "inputs": {"split_parms|input": {"src": "hda", "id": "2355e273cfefca13"}, "split_parms|select_mode|numnew": "10", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "mol", "split_parms|select_allocate|allocate": "batch", "split_parms|select_ftype": "sdf"}, "job": {"model_class": "Job", "id": "5e2a71ba4583f767", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:02:09.868106", "create_time": "2024-10-15T13:01:57.948034", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-9qm92", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/2dae863c8f42/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/7/5/1/dataset_7512d642-0047-4a2d-9973-dd2545fdc93b.dat' --ftype 'sdf' --numnew '10' --batch --file_names 'mol' --file_ext 'sdf'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 4, \"input\": {\"values\": [{\"id\": 66, \"src\": \"hda\"}]}, \"newfilenames\": \"mol\", \"select_allocate\": {\"__current_case__\": 1, \"allocate\": \"batch\"}, \"select_ftype\": \"sdf\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"10\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"sdf\""}, "inputs": {"split_parms|input": {"id": "2355e273cfefca13", "src": "hda", "uuid": "7512d642-0047-4a2d-9973-dd2545fdc93b"}}, "outputs": {"__new_primary_file_list_output_sdf|mol_000000.sdf__": {"id": "e21bbe46a82a0f6b", "src": "hda", "uuid": "ddee2f01-b904-408e-868d-8882fb30c4e2"}, "__new_primary_file_list_output_sdf|mol_000001.sdf__": {"id": "401a856f2a6d3cb6", "src": "hda", "uuid": "ecbe4883-fe27-4f46-a1ba-635c1fe12af1"}, "__new_primary_file_list_output_sdf|mol_000002.sdf__": {"id": "167eb62ac211d5a7", "src": "hda", "uuid": "df80fac1-44eb-4ba2-8481-9829b4991822"}}, "output_collections": {"list_output_sdf": {"id": "dd92d2f308783c86", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:01:59", "plugin": "core", "name": "start_epoch", "raw_value": "1728997319.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:02:00", "plugin": "core", "name": "end_epoch", "raw_value": "1728997320.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.2-17", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 17, "time_seconds": 30.08527708053589, "inputs": {"split_parms|input": {"src": "hda", "id": "20bb8faeec0bbacb"}, "split_parms|select_mode|chunksize": "1", "split_parms|select_mode|mode": "chunk", "split_parms|newfilenames": "mol", "split_parms|select_allocate|allocate": "batch", "split_parms|select_ftype": "sdf"}, "job": {"model_class": "Job", "id": "fdb782dbab1ff0ed", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:02:40.036553", "create_time": "2024-10-15T13:02:28.260605", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-mps9z", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/2dae863c8f42/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/d/7/7/dataset_d775d518-e7b3-4f9b-b70b-172b37a09abc.dat' --ftype 'sdf' --chunksize 1 --batch --file_names 'mol' --file_ext 'sdf'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 4, \"input\": {\"values\": [{\"id\": 70, \"src\": \"hda\"}]}, \"newfilenames\": \"mol\", \"select_allocate\": {\"__current_case__\": 1, \"allocate\": \"batch\"}, \"select_ftype\": \"sdf\", \"select_mode\": {\"__current_case__\": 0, \"chunksize\": \"1\", \"mode\": \"chunk\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"sdf\""}, "inputs": {"split_parms|input": {"id": "20bb8faeec0bbacb", "src": "hda", "uuid": "d775d518-e7b3-4f9b-b70b-172b37a09abc"}}, "outputs": {"__new_primary_file_list_output_sdf|mol_000000.sdf__": {"id": "ef94a8f3b09aac79", "src": "hda", "uuid": "dc9c6917-47cb-48af-88ab-5e0b60a69399"}, "__new_primary_file_list_output_sdf|mol_000001.sdf__": {"id": "1438aa6a0f23f40c", "src": "hda", "uuid": "e522190c-1a2a-4a97-9a00-bda5df92f475"}, "__new_primary_file_list_output_sdf|mol_000002.sdf__": {"id": "9f2c253c279e2d20", "src": "hda", "uuid": "2611722f-527d-40c0-8fc3-efed308a4d9f"}}, "output_collections": {"list_output_sdf": {"id": "ec949b0c90392070", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:02:29", "plugin": "core", "name": "start_epoch", "raw_value": "1728997349.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:02:29", "plugin": "core", "name": "end_epoch", "raw_value": "1728997349.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.2-18", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 18, "time_seconds": 30.864986658096313, "inputs": {"split_parms|input": {"src": "hda", "id": "a01d4e846f153ab9"}, "split_parms|split_method|generic_regex": "^[^>].*", "split_parms|split_method|split_after": "true", "split_parms|split_method|select_split_method": "regex", "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "rand", "split_parms|select_allocate|seed": "1010", "split_parms|select_allocate|allocate": "random", "split_parms|select_ftype": "generic"}, "job": {"model_class": "Job", "id": "69aa0077f7562bfb", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:03:11.659079", "create_time": "2024-10-15T13:02:58.873728", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-j9nbt", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/2dae863c8f42/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/e/6/f/dataset_e6f6f887-62b2-46b7-ab3d-b3ecdf9fbb24.dat' --ftype 'generic' --generic_re '^[^>].*' --split_after --numnew '2' --rand --seed '1010' --file_names 'rand' --file_ext 'fasta'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 6, \"input\": {\"values\": [{\"id\": 74, \"src\": \"hda\"}]}, \"newfilenames\": \"rand\", \"select_allocate\": {\"__current_case__\": 0, \"allocate\": \"random\", \"seed\": \"1010\"}, \"select_ftype\": \"generic\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}, \"split_method\": {\"__current_case__\": 0, \"generic_regex\": \"^[^>].*\", \"select_split_method\": \"regex\", \"split_after\": \"true\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fasta\""}, "inputs": {"split_parms|input": {"id": "a01d4e846f153ab9", "src": "hda", "uuid": "e6f6f887-62b2-46b7-ab3d-b3ecdf9fbb24"}}, "outputs": {"__new_primary_file_list_output_generic|rand_000000__": {"id": "9e39febcc77bb103", "src": "hda", "uuid": "4f44da51-c3bc-4b81-8af1-efcdc8b44dd3"}, "__new_primary_file_list_output_generic|rand_000001__": {"id": "d309499fc11aa2bb", "src": "hda", "uuid": "ea71e930-0f6d-46f9-a1b4-eae7ead41fa5"}}, "output_collections": {"list_output_generic": {"id": "9f28a907052785aa", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:03:00", "plugin": "core", "name": "start_epoch", "raw_value": "1728997380.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:03:01", "plugin": "core", "name": "end_epoch", "raw_value": "1728997381.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.2-19", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 19, "time_seconds": 9.742902755737305, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "split_file_to_collection/0.5.2-2", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 2, "time_seconds": 11.190324068069458, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "split_file_to_collection/0.5.2-3", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 3, "time_seconds": 29.85484790802002, "inputs": {"split_parms|input": {"src": "hda", "id": "0c92e0d0405fa15a"}, "split_parms|top": "2", "split_parms|split_by|select_mode|chunksize": "2", "split_parms|split_by|select_mode|mode": "chunk", "split_parms|split_by|newfilenames": "batch_tab", "split_parms|split_by|select_allocate|allocate": "batch", "split_parms|split_by|select_split_by": "row", "split_parms|select_ftype": "tabular"}, "job": {"model_class": "Job", "id": "41793abde52ffe3c", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T12:55:57.407767", "create_time": "2024-10-15T12:55:45.926574", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-wwj4r", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/2dae863c8f42/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/e/7/4/dataset_e74f8b7f-84c9-49ce-932c-173103803962.dat' --ftype 'tabular' --top '2' --by 'row' --chunksize 2 --batch --file_names 'batch_tab' --file_ext 'tabular'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 9, \"src\": \"hda\"}]}, \"select_ftype\": \"tabular\", \"split_by\": {\"__current_case__\": 1, \"newfilenames\": \"batch_tab\", \"select_allocate\": {\"__current_case__\": 1, \"allocate\": \"batch\"}, \"select_mode\": {\"__current_case__\": 0, \"chunksize\": \"2\", \"mode\": \"chunk\"}, \"select_split_by\": \"row\"}, \"top\": \"2\"}"}, "inputs": {"split_parms|input": {"id": "0c92e0d0405fa15a", "src": "hda", "uuid": "e74f8b7f-84c9-49ce-932c-173103803962"}}, "outputs": {"__new_primary_file_list_output_tab|batch_tab_000001.tabular__": {"id": "a5484858537dfaa0", "src": "hda", "uuid": "f268fd52-ae9e-4a8a-bd32-86ce3da47619"}, "__new_primary_file_list_output_tab|batch_tab_000000.tabular__": {"id": "82863ab3d50f5270", "src": "hda", "uuid": "f14d4700-aabc-44a9-87c6-f0263bb0be2f"}}, "output_collections": {"list_output_tab": {"id": "0cc593a27539b78f", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-10-15 12:55:47", "plugin": "core", "name": "end_epoch", "raw_value": "1728996947.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 12:55:47", "plugin": "core", "name": "start_epoch", "raw_value": "1728996947.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.2-4", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 4, "time_seconds": 40.17529511451721, "inputs": {"split_parms|input": {"src": "hda", "id": "667b17fe74af9e53"}, "split_parms|select_mode|numnew": "24", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "chr", "split_parms|select_allocate|allocate": "batch", "split_parms|select_ftype": "txt"}, "job": {"model_class": "Job", "id": "0c92e0d0405fa15a", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T12:56:26.256916", "create_time": "2024-10-15T12:56:14.940825", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-r6r99", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/2dae863c8f42/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/b/6/4/dataset_b64d33df-e597-423e-bf3c-53492130c7c9.dat' --ftype 'txt' --numnew '24' --batch --file_names 'chr' --file_ext 'txt'", "traceback": null, "params": {"__input_ext": "\"txt\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 5, \"input\": {\"values\": [{\"id\": 12, \"src\": \"hda\"}]}, \"newfilenames\": \"chr\", \"select_allocate\": {\"__current_case__\": 1, \"allocate\": \"batch\"}, \"select_ftype\": \"txt\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"24\"}}"}, "inputs": {"split_parms|input": {"id": "667b17fe74af9e53", "src": "hda", "uuid": "b64d33df-e597-423e-bf3c-53492130c7c9"}}, "outputs": {"__new_primary_file_list_output_txt|chr_000023.txt__": {"id": "69aa0077f7562bfb", "src": "hda", "uuid": "494ce8b2-6d7e-401e-912c-0accf844c2fc"}, "__new_primary_file_list_output_txt|chr_000022.txt__": {"id": "9a3a134dd8a62b63", "src": "hda", "uuid": "fe0b4218-c91a-4c4b-8c6f-eabb0ccf4879"}, "__new_primary_file_list_output_txt|chr_000021.txt__": {"id": "fdb782dbab1ff0ed", "src": "hda", "uuid": "4319d15b-1111-4a0a-b29c-851fbc888d1d"}, "__new_primary_file_list_output_txt|chr_000020.txt__": {"id": "c6591ac7d6b9bd71", "src": "hda", "uuid": "2c2b4661-ca58-4da9-a7b4-48898bedea05"}, "__new_primary_file_list_output_txt|chr_000019.txt__": {"id": "5e2a71ba4583f767", "src": "hda", "uuid": "4e71995c-f6ef-4167-9a89-4f03d509d6d7"}, "__new_primary_file_list_output_txt|chr_000018.txt__": {"id": "348707a78a2e420e", "src": "hda", "uuid": "8bdbfc9b-8451-4c5d-b258-83e4fffa341e"}, "__new_primary_file_list_output_txt|chr_000017.txt__": {"id": "d472e69baf7104da", "src": "hda", "uuid": "2964c374-9d8d-48da-b6c9-2c0c6f69584c"}, "__new_primary_file_list_output_txt|chr_000016.txt__": {"id": "f0c1cc075c3f42c7", "src": "hda", "uuid": "0edbf1aa-4410-40dd-8f6b-0fb722ee8061"}, "__new_primary_file_list_output_txt|chr_000015.txt__": {"id": "a079d02dd26f5ac6", "src": "hda", "uuid": "5970de0a-6236-4afd-b826-d721d3e221bd"}, "__new_primary_file_list_output_txt|chr_000014.txt__": {"id": "5200b7af8ac85968", "src": "hda", "uuid": "a8fd3cb3-3829-4c69-8b9b-e58995072b6a"}, "__new_primary_file_list_output_txt|chr_000013.txt__": {"id": "8ca80f83bc17b949", "src": "hda", "uuid": "5b71b24b-ea2c-43ab-8488-f2e74cda4f85"}, "__new_primary_file_list_output_txt|chr_000012.txt__": {"id": "becaf0581e4db9c1", "src": "hda", "uuid": "30cefada-765f-4887-951b-9db287fd8dcf"}, "__new_primary_file_list_output_txt|chr_000011.txt__": {"id": "15d97c20c30cb3e2", "src": "hda", "uuid": "2908297b-32ad-4fb3-8d97-f37535ba70f4"}, "__new_primary_file_list_output_txt|chr_000010.txt__": {"id": "da3d6417997331b3", "src": "hda", "uuid": "ef671372-6b00-4807-b984-e3ee99a3089c"}, "__new_primary_file_list_output_txt|chr_000009.txt__": {"id": "b3357a146da94ea3", "src": "hda", "uuid": "90523110-79e5-4f13-93c9-411333f988a1"}, "__new_primary_file_list_output_txt|chr_000008.txt__": {"id": "24a90a8acf4bc8bd", "src": "hda", "uuid": "523ca5a0-9c9e-4074-956b-a6d799cac7c3"}, "__new_primary_file_list_output_txt|chr_000007.txt__": {"id": "fc62fa186fb3ad7b", "src": "hda", "uuid": "228be6df-ffd8-4165-83da-cafeb07b6d4b"}, "__new_primary_file_list_output_txt|chr_000006.txt__": {"id": "22c2f0ec128b17ba", "src": "hda", "uuid": "e1126494-6845-48e3-b03b-5139ea53cabf"}, "__new_primary_file_list_output_txt|chr_000005.txt__": {"id": "c447fbfab87b8018", "src": "hda", "uuid": "1b64ebd8-aed9-4353-bbc6-890ad8d09ec9"}, "__new_primary_file_list_output_txt|chr_000004.txt__": {"id": "9f28a907052785aa", "src": "hda", "uuid": "1afa7442-294e-4607-8a09-6cf2d1800585"}, "__new_primary_file_list_output_txt|chr_000003.txt__": {"id": "ec949b0c90392070", "src": "hda", "uuid": "71c8c87e-a897-436d-b41e-d76b4fca0728"}, "__new_primary_file_list_output_txt|chr_000002.txt__": {"id": "dd92d2f308783c86", "src": "hda", "uuid": "0d38ca1f-8a15-46ec-92cd-3f2e0a6c5e35"}, "__new_primary_file_list_output_txt|chr_000001.txt__": {"id": "16b40f9778f6d0ab", "src": "hda", "uuid": "cc8024d4-9f9d-4a01-bca1-162e11529693"}, "__new_primary_file_list_output_txt|chr_000000.txt__": {"id": "ec11460661f916c4", "src": "hda", "uuid": "51599ef1-2cc6-40f2-9f5e-a9065e2aa8ab"}}, "output_collections": {"list_output_txt": {"id": "e139f77f10d6a4b6", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-10-15 12:56:16", "plugin": "core", "name": "end_epoch", "raw_value": "1728996976.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 12:56:16", "plugin": "core", "name": "start_epoch", "raw_value": "1728996976.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.2-5", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 5, "time_seconds": 31.19040870666504, "inputs": {"split_parms|input": {"src": "hda", "id": "e56f136ba809b7a3"}, "split_parms|top": "1", "split_parms|split_by|id_col": "10", "split_parms|split_by|match_regex": "(.*)\\.mgf", "split_parms|split_by|sub_regex": "\\1.tab", "split_parms|split_by|select_split_by": "col", "split_parms|select_ftype": "tabular"}, "job": {"model_class": "Job", "id": "a5484858537dfaa0", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T12:57:08.032233", "create_time": "2024-10-15T12:56:55.331835", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-t9bln", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/2dae863c8f42/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/3/6/f/dataset_36f62ea4-5a40-440a-bc22-90812f31652f.dat' --ftype 'tabular' --top '1' --by 'col' --id_column '10' --match '(.*)__backslash__.mgf' --sub '__backslash__1.tab'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 37, \"src\": \"hda\"}]}, \"select_ftype\": \"tabular\", \"split_by\": {\"__current_case__\": 0, \"id_col\": \"10\", \"match_regex\": \"(.*)\\\\.mgf\", \"select_split_by\": \"col\", \"sub_regex\": \"\\\\1.tab\"}, \"top\": \"1\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"tabular\""}, "inputs": {"split_parms|input": {"id": "e56f136ba809b7a3", "src": "hda", "uuid": "36f62ea4-5a40-440a-bc22-90812f31652f"}}, "outputs": {"__new_primary_file_list_output_tab|file1.tab__": {"id": "adda588a09627e27", "src": "hda", "uuid": "abb09a98-8685-4721-8ca7-d4bd22142849"}, "__new_primary_file_list_output_tab|file2.tab__": {"id": "5a924ac6c2092b00", "src": "hda", "uuid": "b91a51b0-97b2-43c9-9a9a-1a805253daf1"}, "__new_primary_file_list_output_tab|file3.tab__": {"id": "4c29024472083008", "src": "hda", "uuid": "c37864a2-97df-4bf3-81fd-10ac2e2eed4b"}, "__new_primary_file_list_output_tab|file4.tab__": {"id": "fe33b4f1b621f035", "src": "hda", "uuid": "0fb1a213-5c0d-4592-9f16-1fdcffc876e3"}}, "output_collections": {"list_output_tab": {"id": "de27acdece9d4081", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 12:56:58", "plugin": "core", "name": "end_epoch", "raw_value": "1728997018.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 12:56:57", "plugin": "core", "name": "start_epoch", "raw_value": "1728997017.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.2-6", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 6, "time_seconds": 23.219810962677002, "inputs": {"split_parms|input": {"src": "hda", "id": "8fb8cbe09719c479"}, "split_parms|select_mode|numnew": "3", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "demo", "split_parms|select_ftype": "mgf"}, "job": {"model_class": "Job", "id": "ec11460661f916c4", "state": "error", "exit_code": null, "update_time": "2024-10-15T12:57:33.213182", "create_time": "2024-10-15T12:57:27.788869", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-l9jzp", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/2dae863c8f42/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/8/f/e/dataset_8fec74b4-a3af-4f2d-91c5-bf35349bf96b.dat' --ftype 'mgf' --numnew '3' --file_names 'demo' --file_ext 'mgf'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 1, \"input\": {\"values\": [{\"id\": 42, \"src\": \"hda\"}]}, \"newfilenames\": \"demo\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"mgf\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"3\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"mgf\""}, "inputs": {"split_parms|input": {"id": "8fb8cbe09719c479", "src": "hda", "uuid": "8fec74b4-a3af-4f2d-91c5-bf35349bf96b"}}, "outputs": {}, "output_collections": {"list_output_mgf": {"id": "03e4f66537f0069e", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": null, "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2, exit_code: None, stderr: .", "Output collection 'list_output_mgf': failed to find identifier 'demo_000000.mgf' in the tool generated elements []"], "status": "failure"}}, {"id": "split_file_to_collection/0.5.2-7", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 7, "time_seconds": 30.543756246566772, "inputs": {"split_parms|input": {"src": "hda", "id": "a921f877f6ccbc6b"}, "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "test", "split_parms|select_ftype": "fasta"}, "job": {"model_class": "Job", "id": "dd92d2f308783c86", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T12:58:03.155050", "create_time": "2024-10-15T12:57:51.168981", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-kwjpn", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/2dae863c8f42/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/b/8/7/dataset_b87eddd2-420b-4175-b976-784651b21b6a.dat' --ftype 'fasta' --numnew '2' --file_names 'test' --file_ext 'fasta'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 3, \"input\": {\"values\": [{\"id\": 43, \"src\": \"hda\"}]}, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"fasta\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fasta\""}, "inputs": {"split_parms|input": {"id": "a921f877f6ccbc6b", "src": "hda", "uuid": "b87eddd2-420b-4175-b976-784651b21b6a"}}, "outputs": {"__new_primary_file_list_output_fasta|test_000000.fasta__": {"id": "bb719d64f8bb9b20", "src": "hda", "uuid": "dc3f9a54-33ad-48b6-9374-1156cee6e68c"}, "__new_primary_file_list_output_fasta|test_000001.fasta__": {"id": "e5ef24c3e4d33f3b", "src": "hda", "uuid": "56807348-e513-4ca1-aaf7-b135d649ed52"}}, "output_collections": {"list_output_fasta": {"id": "41793abde52ffe3c", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 12:57:53", "plugin": "core", "name": "start_epoch", "raw_value": "1728997073.0000000"}, {"title": "Job End Time", "value": "2024-10-15 12:57:53", "plugin": "core", "name": "end_epoch", "raw_value": "1728997073.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.2-8", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 8, "time_seconds": 30.34884548187256, "inputs": {"split_parms|input": {"src": "hda", "id": "8e13b663e4913c23"}, "split_parms|select_mode|chunksize": "3", "split_parms|select_mode|mode": "chunk", "split_parms|newfilenames": "test", "split_parms|select_ftype": "fasta"}, "job": {"model_class": "Job", "id": "9f28a907052785aa", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T12:58:33.642059", "create_time": "2024-10-15T12:58:21.345695", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.2", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-jkl4z", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/2dae863c8f42/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/5/0/c/dataset_50ccc3d8-5d02-4c48-be6e-ed884c6f20c9.dat' --ftype 'fasta' --chunksize 3 --file_names 'test' --file_ext 'fasta'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 3, \"input\": {\"values\": [{\"id\": 46, \"src\": \"hda\"}]}, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"fasta\", \"select_mode\": {\"__current_case__\": 0, \"chunksize\": \"3\", \"mode\": \"chunk\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fasta\""}, "inputs": {"split_parms|input": {"id": "8e13b663e4913c23", "src": "hda", "uuid": "50ccc3d8-5d02-4c48-be6e-ed884c6f20c9"}}, "outputs": {"__new_primary_file_list_output_fasta|test_000000.fasta__": {"id": "4dee7cce94da337f", "src": "hda", "uuid": "180a0968-1b77-482d-900a-20d30f2a2d9c"}, "__new_primary_file_list_output_fasta|test_000001.fasta__": {"id": "3031db389d08359d", "src": "hda", "uuid": "20b7f1bb-7218-42fe-b1ae-5ced0edf227c"}}, "output_collections": {"list_output_fasta": {"id": "3a674c6ccad77d02", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 12:58:23", "plugin": "core", "name": "start_epoch", "raw_value": "1728997103.0000000"}, {"title": "Job End Time", "value": "2024-10-15 12:58:23", "plugin": "core", "name": "end_epoch", "raw_value": "1728997103.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.2-9", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.2", "test_index": 9, "time_seconds": 10.046590566635132, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "unicycler/0.5.1+galaxy0-0", "has_data": true, "data": {"tool_id": "unicycler", "tool_version": "0.5.1+galaxy0", "test_index": 0, "time_seconds": 219.07922458648682, "inputs": {"paired_unpaired|fastq_input1": {"src": "hda", "id": "caaeba0357a0cbea"}, "paired_unpaired|fastq_input2": {"src": "hda", "id": "287fcb8ea596187a"}, "paired_unpaired|fastq_input_selector": "paired", "mode": "normal", "min_fasta_length": "100", "linear_seqs": "0", "spades|min_kmer_frac": "0.2", "spades|max_kmer_frac": "0.95", "spades|kmer_count": "10", "spades|depth_filter": "0.25", "rotation|no_rotate": false, "rotation|start_gene_id": "90", "rotation|start_gene_cov": "95", "graph_clean|min_component_size": "1000", "graph_clean|min_dead_end_size": "1000", "lr_align|scores": "3,-6,-5,-2", "keep": "0"}, "job": {"model_class": "Job", "id": "d45ff3f0b71725fb", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:31:23.034246", "create_time": "2024-10-15T13:28:05.239551", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-hmfxv", "command_line": "ln -s '/galaxy/server/database/objects/d/4/5/dataset_d4562e97-45bd-45bf-9142-085c14955bb0.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/7/1/1/dataset_711a6a9a-4626-4219-bffc-a5c017616ca2.dat' fq2.fastq && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 -1 'fq1.fastq' -2 'fq2.fastq' --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'  --keep 0", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "reuse": "[]", "keep": "\"0\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"no_simple_bridges\": false, \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "rotation": "{\"no_rotate\": false, \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": false, \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "long": null, "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 214, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 215, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}"}, "inputs": {"paired_unpaired|fastq_input1": {"id": "caaeba0357a0cbea", "src": "hda", "uuid": "d4562e97-45bd-45bf-9142-085c14955bb0"}, "paired_unpaired|fastq_input2": {"id": "287fcb8ea596187a", "src": "hda", "uuid": "711a6a9a-4626-4219-bffc-a5c017616ca2"}}, "outputs": {"assembly_graph": {"id": "3c9987efa1ce0986", "src": "hda", "uuid": "42ec10b1-00b6-42b5-9908-74116204a9d1"}, "assembly": {"id": "8b1173b30996a89e", "src": "hda", "uuid": "b6e032a5-e00e-48b4-8165-742aa93b38c4"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2024-10-15 13:28:22)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/154/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status     Path                      \n  spades.py     4.0.0     good       /usr/local/bin/spades.py  \n  racon                   not used                             \n  makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good       /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2024-10-15 13:28:22)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2024-10-15 13:28:22)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/154/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/154/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/154/working/fq2.fastq -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/154/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/154/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/154/working/fq2.fastq -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.100+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/154/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/154/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/154/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/154/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/154/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.000     1M / 21M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/154/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.001     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.001     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.001     1M / 21M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.001     1M / 21M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.007     1M / 21M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.007     1M / 21M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.070    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.074    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.089    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.090    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.099    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.138     1M / 41M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.157     1M / 41M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.157     1M / 41M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.157     1M / 41M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.157     1M / 41M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.158     1M / 41M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.158     1M / 41M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.158     1M / 41M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.057     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:01.060     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.307     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.307     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:01.366     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:01.367     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:01.367     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:01.368     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:01.368     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:02.285  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:02.287  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:02.287     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:02.555     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:02.555     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.620     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:02.620     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:02.843     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:02.860     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:02.887     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:02.892     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:02.895     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:02.897     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:02.902     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:02.903     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:02.903     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:02.903     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:02.903     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:02.905     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:02.905     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:02.905     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:02.905     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:02.905     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:02.905     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:02.907     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:02.907     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.945     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:02.947     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:03.016     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:03.018     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:03.106     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:03.106     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:03.106     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:03.106     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:03.106     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:03.206     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:03.502     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:04.028     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:04.498     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:05.315     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:05.316     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:05.317     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:05.317     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:05.317     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:05.317     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:05.317     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:05.317     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:05.317     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:05.317     1M / 55M   INFO   StageManager             (stage.cpp                 : 189\n..\n               : 131)   Assembling time: 0 hours 0 minutes 6 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished.\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/spades.log\nThank you for using SPAdes! If you use it in your research, please cite:\n  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.\n  doi.org/10.1002/cpbi.102\n\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k27 graph\nRepair multi way junctions  (2024-10-15 13:31:03)\nFilter by read depth        (2024-10-15 13:31:03)\nFilter homopolymer loops    (2024-10-15 13:31:03)\nMerge all possible          (2024-10-15 13:31:03)\nNormalise read depths       (2024-10-15 13:31:03)\nRemove zero length segments (2024-10-15 13:31:03)\nSort link order             (2024-10-15 13:31:03)\nGraph cleaning finished     (2024-10-15 13:31:03)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k027_assembly_graph.gfa\n\nCleaning k47 graph\nRepair multi way junctions  (2024-10-15 13:31:03)\nFilter by read depth        (2024-10-15 13:31:03)\nFilter homopolymer loops    (2024-10-15 13:31:03)\nMerge all possible          (2024-10-15 13:31:03)\nNormalise read depths       (2024-10-15 13:31:03)\nRemove zero length segments (2024-10-15 13:31:03)\nSort link order             (2024-10-15 13:31:03)\nGraph cleaning finished     (2024-10-15 13:31:03)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k047_assembly_graph.gfa\n\nCleaning k63 graph\nRepair multi way junctions  (2024-10-15 13:31:04)\nFilter by read depth        (2024-10-15 13:31:04)\nFilter homopolymer loops    (2024-10-15 13:31:04)\nMerge all possible          (2024-10-15 13:31:04)\nNormalise read depths       (2024-10-15 13:31:04)\nRemove zero length segments (2024-10-15 13:31:04)\nSort link order             (2024-10-15 13:31:04)\nGraph cleaning finished     (2024-10-15 13:31:04)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k063_assembly_graph.gfa\n\nCleaning k77 graph\nRepair multi way junctions  (2024-10-15 13:31:04)\nFilter by read depth        (2024-10-15 13:31:04)\nFilter homopolymer loops    (2024-10-15 13:31:04)\nMerge all possible          (2024-10-15 13:31:04)\nNormalise read depths       (2024-10-15 13:31:04)\nRemove zero length segments (2024-10-15 13:31:04)\nSort link order             (2024-10-15 13:31:04)\nGraph cleaning finished     (2024-10-15 13:31:04)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2024-10-15 13:31:04)\nFilter by read depth        (2024-10-15 13:31:04)\nFilter homopolymer loops    (2024-10-15 13:31:04)\nMerge all possible          (2024-10-15 13:31:04)\nNormalise read depths       (2024-10-15 13:31:04)\nRemove zero length segments (2024-10-15 13:31:04)\nSort link order             (2024-10-15 13:31:04)\nGraph cleaning finished     (2024-10-15 13:31:04)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2024-10-15 13:31:04)\nFilter by read depth        (2024-10-15 13:31:04)\nFilter homopolymer loops    (2024-10-15 13:31:04)\nMerge all possible          (2024-10-15 13:31:04)\nNormalise read depths       (2024-10-15 13:31:04)\nRemove zero length segments (2024-10-15 13:31:04)\nSort link order             (2024-10-15 13:31:04)\nGraph cleaning finished     (2024-10-15 13:31:04)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2024-10-15 13:31:04)\nFilter by read depth        (2024-10-15 13:31:04)\nFilter homopolymer loops    (2024-10-15 13:31:04)\nMerge all possible          (2024-10-15 13:31:04)\nNormalise read depths       (2024-10-15 13:31:04)\nRemove zero length segments (2024-10-15 13:31:04)\nSort link order             (2024-10-15 13:31:04)\nGraph cleaning finished     (2024-10-15 13:31:04)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2024-10-15 13:31:04)\nFilter by read depth        (2024-10-15 13:31:04)\nFilter homopolymer loops    (2024-10-15 13:31:04)\nMerge all possible          (2024-10-15 13:31:04)\nNormalise read depths       (2024-10-15 13:31:04)\nRemove zero length segments (2024-10-15 13:31:04)\nSort link order             (2024-10-15 13:31:04)\nGraph cleaning finished     (2024-10-15 13:31:04)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2024-10-15 13:31:04)\nFilter by read depth        (2024-10-15 13:31:04)\nFilter homopolymer loops    (2024-10-15 13:31:04)\nMerge all possible          (2024-10-15 13:31:04)\nNormalise read depths       (2024-10-15 13:31:04)\nRemove zero length segments (2024-10-15 13:31:04)\nSort link order             (2024-10-15 13:31:04)\nGraph cleaning finished     (2024-10-15 13:31:04)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2024-10-15 13:31:04)\nFilter by read depth        (2024-10-15 13:31:04)\nFilter homopolymer loops    (2024-10-15 13:31:04)\nMerge all possible          (2024-10-15 13:31:04)\nNormalise read depths       (2024-10-15 13:31:04)\nRemove zero length segments (2024-10-15 13:31:04)\nSort link order             (2024-10-15 13:31:04)\nGraph cleaning finished     (2024-10-15 13:31:04)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2024-10-15 13:31:04)\nFilter by read depth        (2024-10-15 13:31:04)\nFilter homopolymer loops    (2024-10-15 13:31:04)\nMerge all possible          (2024-10-15 13:31:04)\nNormalise read depths       (2024-10-15 13:31:04)\nRemove zero length segments (2024-10-15 13:31:04)\nSort link order             (2024-10-15 13:31:04)\nGraph cleaning finished     (2024-10-15 13:31:04)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2024-10-15 13:31:04)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k027.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k047.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k063.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k077.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k089.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k099.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k107.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k115.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k121.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k127.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/\n\n\nDetermining graph multiplicity (2024-10-15 13:31:04)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\n\nCleaning graph (2024-10-15 13:31:04)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-10-15 13:31:04)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-10-15 13:31:04)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2024-10-15 13:31:04)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\n\nCleaning up leftover segments (2024-10-15 13:31:04)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-10-15 13:31:04)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2024-10-15 13:31:04)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-10-15 13:31:13)\nSaving /galaxy/server/database/jobs_directory/000/154/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/154/working/assembly.fasta\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "\nStarting Unicycler (2024-10-15 13:28:22)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/154/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status     Path                      \n  spades.py     4.0.0     good       /usr/local/bin/spades.py  \n  racon                   not used                             \n  makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good       /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2024-10-15 13:28:22)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2024-10-15 13:28:22)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/154/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/154/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/154/working/fq2.fastq -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/154/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/154/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/154/working/fq2.fastq -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.100+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/154/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/154/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/154/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/154/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/154/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.000     1M / 21M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/154/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.001     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.001     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.001     1M / 21M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.001     1M / 21M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.007     1M / 21M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.007     1M / 21M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.070    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.074    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.089    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.090    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.099    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.138     1M / 41M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.157     1M / 41M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.157     1M / 41M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.157     1M / 41M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.157     1M / 41M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.158     1M / 41M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.158     1M / 41M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.158     1M / 41M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.057     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:01.060     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.307     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.307     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:01.366     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:01.367     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:01.367     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:01.368     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:01.368     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:02.285  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:02.287  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:02.287     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:02.555     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:02.555     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.620     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:02.620     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:02.843     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:02.860     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:02.887     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:02.892     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:02.895     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:02.897     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:02.902     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:02.903     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:02.903     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:02.903     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:02.903     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:02.905     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:02.905     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:02.905     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:02.905     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:02.905     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:02.905     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:02.907     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:02.907     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.945     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:02.947     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:03.016     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:03.018     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:03.106     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:03.106     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:03.106     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:03.106     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:03.106     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:03.206     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:03.502     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:04.028     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:04.498     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:05.315     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:05.316     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:05.317     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:05.317     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:05.317     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:05.317     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:05.317     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:05.317     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:05.317     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:05.317     1M / 55M   INFO   StageManager             (stage.cpp                 : 189\n..\n               : 131)   Assembling time: 0 hours 0 minutes 6 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished.\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/spades.log\nThank you for using SPAdes! If you use it in your research, please cite:\n  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.\n  doi.org/10.1002/cpbi.102\n\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k27 graph\nRepair multi way junctions  (2024-10-15 13:31:03)\nFilter by read depth        (2024-10-15 13:31:03)\nFilter homopolymer loops    (2024-10-15 13:31:03)\nMerge all possible          (2024-10-15 13:31:03)\nNormalise read depths       (2024-10-15 13:31:03)\nRemove zero length segments (2024-10-15 13:31:03)\nSort link order             (2024-10-15 13:31:03)\nGraph cleaning finished     (2024-10-15 13:31:03)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k027_assembly_graph.gfa\n\nCleaning k47 graph\nRepair multi way junctions  (2024-10-15 13:31:03)\nFilter by read depth        (2024-10-15 13:31:03)\nFilter homopolymer loops    (2024-10-15 13:31:03)\nMerge all possible          (2024-10-15 13:31:03)\nNormalise read depths       (2024-10-15 13:31:03)\nRemove zero length segments (2024-10-15 13:31:03)\nSort link order             (2024-10-15 13:31:03)\nGraph cleaning finished     (2024-10-15 13:31:03)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k047_assembly_graph.gfa\n\nCleaning k63 graph\nRepair multi way junctions  (2024-10-15 13:31:04)\nFilter by read depth        (2024-10-15 13:31:04)\nFilter homopolymer loops    (2024-10-15 13:31:04)\nMerge all possible          (2024-10-15 13:31:04)\nNormalise read depths       (2024-10-15 13:31:04)\nRemove zero length segments (2024-10-15 13:31:04)\nSort link order             (2024-10-15 13:31:04)\nGraph cleaning finished     (2024-10-15 13:31:04)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k063_assembly_graph.gfa\n\nCleaning k77 graph\nRepair multi way junctions  (2024-10-15 13:31:04)\nFilter by read depth        (2024-10-15 13:31:04)\nFilter homopolymer loops    (2024-10-15 13:31:04)\nMerge all possible          (2024-10-15 13:31:04)\nNormalise read depths       (2024-10-15 13:31:04)\nRemove zero length segments (2024-10-15 13:31:04)\nSort link order             (2024-10-15 13:31:04)\nGraph cleaning finished     (2024-10-15 13:31:04)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2024-10-15 13:31:04)\nFilter by read depth        (2024-10-15 13:31:04)\nFilter homopolymer loops    (2024-10-15 13:31:04)\nMerge all possible          (2024-10-15 13:31:04)\nNormalise read depths       (2024-10-15 13:31:04)\nRemove zero length segments (2024-10-15 13:31:04)\nSort link order             (2024-10-15 13:31:04)\nGraph cleaning finished     (2024-10-15 13:31:04)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2024-10-15 13:31:04)\nFilter by read depth        (2024-10-15 13:31:04)\nFilter homopolymer loops    (2024-10-15 13:31:04)\nMerge all possible          (2024-10-15 13:31:04)\nNormalise read depths       (2024-10-15 13:31:04)\nRemove zero length segments (2024-10-15 13:31:04)\nSort link order             (2024-10-15 13:31:04)\nGraph cleaning finished     (2024-10-15 13:31:04)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2024-10-15 13:31:04)\nFilter by read depth        (2024-10-15 13:31:04)\nFilter homopolymer loops    (2024-10-15 13:31:04)\nMerge all possible          (2024-10-15 13:31:04)\nNormalise read depths       (2024-10-15 13:31:04)\nRemove zero length segments (2024-10-15 13:31:04)\nSort link order             (2024-10-15 13:31:04)\nGraph cleaning finished     (2024-10-15 13:31:04)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2024-10-15 13:31:04)\nFilter by read depth        (2024-10-15 13:31:04)\nFilter homopolymer loops    (2024-10-15 13:31:04)\nMerge all possible          (2024-10-15 13:31:04)\nNormalise read depths       (2024-10-15 13:31:04)\nRemove zero length segments (2024-10-15 13:31:04)\nSort link order             (2024-10-15 13:31:04)\nGraph cleaning finished     (2024-10-15 13:31:04)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2024-10-15 13:31:04)\nFilter by read depth        (2024-10-15 13:31:04)\nFilter homopolymer loops    (2024-10-15 13:31:04)\nMerge all possible          (2024-10-15 13:31:04)\nNormalise read depths       (2024-10-15 13:31:04)\nRemove zero length segments (2024-10-15 13:31:04)\nSort link order             (2024-10-15 13:31:04)\nGraph cleaning finished     (2024-10-15 13:31:04)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2024-10-15 13:31:04)\nFilter by read depth        (2024-10-15 13:31:04)\nFilter homopolymer loops    (2024-10-15 13:31:04)\nMerge all possible          (2024-10-15 13:31:04)\nNormalise read depths       (2024-10-15 13:31:04)\nRemove zero length segments (2024-10-15 13:31:04)\nSort link order             (2024-10-15 13:31:04)\nGraph cleaning finished     (2024-10-15 13:31:04)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2024-10-15 13:31:04)\nFilter by read depth        (2024-10-15 13:31:04)\nFilter homopolymer loops    (2024-10-15 13:31:04)\nMerge all possible          (2024-10-15 13:31:04)\nNormalise read depths       (2024-10-15 13:31:04)\nRemove zero length segments (2024-10-15 13:31:04)\nSort link order             (2024-10-15 13:31:04)\nGraph cleaning finished     (2024-10-15 13:31:04)\nSaving /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2024-10-15 13:31:04)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k027.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k047.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k063.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k077.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k089.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k099.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k107.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k115.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k121.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/001_spades_graph_k127.gfa\nDeleting /galaxy/server/database/jobs_directory/000/154/working/spades_assembly/\n\n\nDetermining graph multiplicity (2024-10-15 13:31:04)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\n\nCleaning graph (2024-10-15 13:31:04)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-10-15 13:31:04)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-10-15 13:31:04)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2024-10-15 13:31:04)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\n\nCleaning up leftover segments (2024-10-15 13:31:04)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-10-15 13:31:04)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2024-10-15 13:31:04)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-10-15 13:31:13)\nSaving /galaxy/server/database/jobs_directory/000/154/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/154/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 minutes", "plugin": "core", "name": "runtime_seconds", "raw_value": "172.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:31:13", "plugin": "core", "name": "end_epoch", "raw_value": "1728999073.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:28:21", "plugin": "core", "name": "start_epoch", "raw_value": "1728998901.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "unicycler/0.5.1+galaxy0-1", "has_data": true, "data": {"tool_id": "unicycler", "tool_version": "0.5.1+galaxy0", "test_index": 1, "time_seconds": 210.90263748168945, "inputs": {"paired_unpaired|fastq_input1": {"src": "hda", "id": "8d9d98d4371426f9"}, "paired_unpaired|fastq_input2": {"src": "hda", "id": "9d6c4a58818a2964"}, "paired_unpaired|fastq_input_selector": "paired", "long": {"src": "hda", "id": "d2509a1fa9f22dc9"}, "mode": "normal", "min_fasta_length": "100", "linear_seqs": "0", "spades|min_kmer_frac": "0.2", "spades|max_kmer_frac": "0.95", "spades|kmer_count": "10", "spades|depth_filter": "0.25", "rotation|no_rotate": false, "rotation|start_gene_id": "90", "rotation|start_gene_cov": "95", "graph_clean|min_component_size": "1000", "graph_clean|min_dead_end_size": "1000", "lr_align|scores": "3,-6,-5,-2", "keep": "0"}, "job": {"model_class": "Job", "id": "16ed1a760a194c14", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:34:53.888647", "create_time": "2024-10-15T13:31:48.113414", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-5pwz2", "command_line": "ln -s '/galaxy/server/database/objects/7/3/5/dataset_7354cce1-c288-477e-b43b-4eab4801ca9a.dat' fq1.fastq.gz && ln -s '/galaxy/server/database/objects/a/9/3/dataset_a9322854-1a21-49c9-a7e8-91895aa08166.dat' fq2.fastq.gz && ln -s '/galaxy/server/database/objects/f/0/0/dataset_f00de9c2-1952-4723-ab66-bafa2c3f79ca.dat' 'lr.fasta' && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 -1 'fq1.fastq.gz' -2 'fq2.fastq.gz' -l lr.fasta --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'  --keep 0", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "reuse": "[]", "keep": "\"0\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"no_simple_bridges\": false, \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "rotation": "{\"no_rotate\": false, \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": false, \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 218, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 219, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}"}, "inputs": {"paired_unpaired|fastq_input1": {"id": "8d9d98d4371426f9", "src": "hda", "uuid": "7354cce1-c288-477e-b43b-4eab4801ca9a"}, "paired_unpaired|fastq_input2": {"id": "9d6c4a58818a2964", "src": "hda", "uuid": "a9322854-1a21-49c9-a7e8-91895aa08166"}, "long": {"id": "d2509a1fa9f22dc9", "src": "hda", "uuid": "f00de9c2-1952-4723-ab66-bafa2c3f79ca"}}, "outputs": {"assembly_graph": {"id": "4468be1af4d68fce", "src": "hda", "uuid": "24ae3759-913e-4075-bb11-6bc125945733"}, "assembly": {"id": "1e0de495c2496b5f", "src": "hda", "uuid": "eb850bd9-89e8-41e9-895c-eed81d65001c"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2024-10-15 13:31:50)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq.gz -2 fq2.fastq.gz -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/158/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status   Path                      \n  spades.py     4.0.0     good     /usr/local/bin/spades.py  \n  racon         1.5.0     good     /usr/local/bin/racon      \n  makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good     /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2024-10-15 13:31:50)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2024-10-15 13:31:50)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/158/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/158/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.100+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/158/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz']\n      right reads: ['/galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz: max reads length: 251\n/galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/158/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.001     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.008     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.008     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.085    82M / 82M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.088    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.102    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.103    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.111    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.158     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.179     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.180     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.180     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.180     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.181     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.181     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.181     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.307     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:01.311     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.575     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.575     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:01.634     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:01.635     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:01.635     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:01.635     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:01.635     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:02.636  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:02.636  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:02.636     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:02.905     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:02.906     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.967     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:02.967     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:03.208     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:03.222     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:03.246     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:03.251     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:03.254     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:03.256     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:03.262     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:03.263     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:03.263     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:03.263     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:03.263     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:03.265     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:03.265     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:03.265     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:03.265     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:03.265     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:03.265     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:03.267     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:03.267     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:03.309     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:03.310     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:03.383     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:03.384     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:03.465     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:03.465     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:03.465     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:03.465     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:03.465     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:03.566     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:03.861     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:04.380     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:04.853     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:05.658     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:05.658     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:05.660     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:05.660     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:05.660     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:05.660     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:05.660     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:05.660     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:05.660     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:05.660     1M / 55M   INFO   StageManager             (stage.cpp    \n..\n34:34)\nSort link order             (2024-10-15 13:34:34)\nGraph cleaning finished     (2024-10-15 13:34:34)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2024-10-15 13:34:34)\nFilter by read depth        (2024-10-15 13:34:34)\nFilter homopolymer loops    (2024-10-15 13:34:34)\nMerge all possible          (2024-10-15 13:34:34)\nNormalise read depths       (2024-10-15 13:34:34)\nRemove zero length segments (2024-10-15 13:34:34)\nSort link order             (2024-10-15 13:34:34)\nGraph cleaning finished     (2024-10-15 13:34:34)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2024-10-15 13:34:34)\nFilter by read depth        (2024-10-15 13:34:34)\nFilter homopolymer loops    (2024-10-15 13:34:34)\nMerge all possible          (2024-10-15 13:34:34)\nNormalise read depths       (2024-10-15 13:34:34)\nRemove zero length segments (2024-10-15 13:34:34)\nSort link order             (2024-10-15 13:34:34)\nGraph cleaning finished     (2024-10-15 13:34:34)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2024-10-15 13:34:34)\nFilter by read depth        (2024-10-15 13:34:34)\nFilter homopolymer loops    (2024-10-15 13:34:34)\nMerge all possible          (2024-10-15 13:34:34)\nNormalise read depths       (2024-10-15 13:34:34)\nRemove zero length segments (2024-10-15 13:34:34)\nSort link order             (2024-10-15 13:34:34)\nGraph cleaning finished     (2024-10-15 13:34:34)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2024-10-15 13:34:34)\nFilter by read depth        (2024-10-15 13:34:34)\nFilter homopolymer loops    (2024-10-15 13:34:34)\nMerge all possible          (2024-10-15 13:34:34)\nNormalise read depths       (2024-10-15 13:34:34)\nRemove zero length segments (2024-10-15 13:34:34)\nSort link order             (2024-10-15 13:34:34)\nGraph cleaning finished     (2024-10-15 13:34:34)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2024-10-15 13:34:34)\nFilter by read depth        (2024-10-15 13:34:34)\nFilter homopolymer loops    (2024-10-15 13:34:34)\nMerge all possible          (2024-10-15 13:34:34)\nNormalise read depths       (2024-10-15 13:34:34)\nRemove zero length segments (2024-10-15 13:34:34)\nSort link order             (2024-10-15 13:34:34)\nGraph cleaning finished     (2024-10-15 13:34:34)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2024-10-15 13:34:34)\nFilter by read depth        (2024-10-15 13:34:34)\nFilter homopolymer loops    (2024-10-15 13:34:34)\nMerge all possible          (2024-10-15 13:34:34)\nNormalise read depths       (2024-10-15 13:34:34)\nRemove zero length segments (2024-10-15 13:34:34)\nSort link order             (2024-10-15 13:34:34)\nGraph cleaning finished     (2024-10-15 13:34:34)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2024-10-15 13:34:34)\nFilter by read depth        (2024-10-15 13:34:34)\nFilter homopolymer loops    (2024-10-15 13:34:34)\nMerge all possible          (2024-10-15 13:34:34)\nNormalise read depths       (2024-10-15 13:34:34)\nRemove zero length segments (2024-10-15 13:34:34)\nSort link order             (2024-10-15 13:34:34)\nGraph cleaning finished     (2024-10-15 13:34:34)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2024-10-15 13:34:34)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k027.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k047.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k063.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k077.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k089.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k099.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k107.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k115.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k121.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k127.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/\n\n\nDetermining graph multiplicity (2024-10-15 13:34:34)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\n\nCleaning graph (2024-10-15 13:34:34)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-10-15 13:34:34)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-10-15 13:34:34)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2024-10-15 13:34:34)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2024-10-15 13:34:34)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/158/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/158/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2024-10-15 13:34:34)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/158/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times\n(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2024-10-15 13:34:34)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2024-10-15 13:34:34)\n1\t5386\t5\t5161\t+\t1\t5386\t229\t5385\t5156\t5156\t255\tcm:i:959\n1\t5386\t5168\t5384\t+\t1\t5386\t6\t222\t216\t216\t255\tcm:i:39\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2024-10-15 13:34:34)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5161,+,1,229,5385\n    5168,5384,+,1,6,222\nReference ranges:\n    1+: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 215 points, score=213.009259 (good)\n    line 2: 5153 points, score=5151.000388 (good)\nAll Seqan alignments (time to align = 0.058 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0      224        5162      5386       +        672        100.00   100.00%\n         1        224     5386           0      5162       +      15486        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1        224     5386           0      5162       +      15486        100.00   100.00%\n         1          0      224        5162      5386       +        672        100.00   100.00%\n\n\nRead alignment summary (2024-10-15 13:34:35)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nDeleting /galaxy/server/database/jobs_directory/000/158/working/read_alignment/\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2024-10-15 13:34:35)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2024-10-15 13:34:35)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\n\nCleaning up leftover segments (2024-10-15 13:34:35)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-10-15 13:34:35)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2024-10-15 13:34:35)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-10-15 13:34:43)\nSaving /galaxy/server/database/jobs_directory/000/158/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/158/working/assembly.fasta\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "\nStarting Unicycler (2024-10-15 13:31:50)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq.gz -2 fq2.fastq.gz -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/158/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status   Path                      \n  spades.py     4.0.0     good     /usr/local/bin/spades.py  \n  racon         1.5.0     good     /usr/local/bin/racon      \n  makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good     /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2024-10-15 13:31:50)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2024-10-15 13:31:50)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/158/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/158/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.100+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/158/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz']\n      right reads: ['/galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/158/working/fq1.fastq.gz: max reads length: 251\n/galaxy/server/database/jobs_directory/000/158/working/fq2.fastq.gz: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/158/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/158/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.001     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.008     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.008     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.085    82M / 82M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.088    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.102    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.103    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.111    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.158     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.179     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.180     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.180     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.180     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.181     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.181     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.181     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.307     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:01.311     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.575     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.575     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:01.634     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:01.635     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:01.635     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:01.635     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:01.635     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:02.636  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:02.636  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:02.636     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:02.905     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:02.906     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.967     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:02.967     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:03.208     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:03.222     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:03.246     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:03.251     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:03.254     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:03.256     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:03.262     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:03.263     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:03.263     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:03.263     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:03.263     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:03.265     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:03.265     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:03.265     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:03.265     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:03.265     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:03.265     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:03.267     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:03.267     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:03.309     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:03.310     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:03.383     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:03.384     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:03.465     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:03.465     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:03.465     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:03.465     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:03.465     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:03.566     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:03.861     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:04.380     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:04.853     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:05.658     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:05.658     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:05.660     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:05.660     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:05.660     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:05.660     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:05.660     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:05.660     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:05.660     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:05.660     1M / 55M   INFO   StageManager             (stage.cpp    \n..\n34:34)\nSort link order             (2024-10-15 13:34:34)\nGraph cleaning finished     (2024-10-15 13:34:34)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2024-10-15 13:34:34)\nFilter by read depth        (2024-10-15 13:34:34)\nFilter homopolymer loops    (2024-10-15 13:34:34)\nMerge all possible          (2024-10-15 13:34:34)\nNormalise read depths       (2024-10-15 13:34:34)\nRemove zero length segments (2024-10-15 13:34:34)\nSort link order             (2024-10-15 13:34:34)\nGraph cleaning finished     (2024-10-15 13:34:34)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2024-10-15 13:34:34)\nFilter by read depth        (2024-10-15 13:34:34)\nFilter homopolymer loops    (2024-10-15 13:34:34)\nMerge all possible          (2024-10-15 13:34:34)\nNormalise read depths       (2024-10-15 13:34:34)\nRemove zero length segments (2024-10-15 13:34:34)\nSort link order             (2024-10-15 13:34:34)\nGraph cleaning finished     (2024-10-15 13:34:34)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2024-10-15 13:34:34)\nFilter by read depth        (2024-10-15 13:34:34)\nFilter homopolymer loops    (2024-10-15 13:34:34)\nMerge all possible          (2024-10-15 13:34:34)\nNormalise read depths       (2024-10-15 13:34:34)\nRemove zero length segments (2024-10-15 13:34:34)\nSort link order             (2024-10-15 13:34:34)\nGraph cleaning finished     (2024-10-15 13:34:34)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2024-10-15 13:34:34)\nFilter by read depth        (2024-10-15 13:34:34)\nFilter homopolymer loops    (2024-10-15 13:34:34)\nMerge all possible          (2024-10-15 13:34:34)\nNormalise read depths       (2024-10-15 13:34:34)\nRemove zero length segments (2024-10-15 13:34:34)\nSort link order             (2024-10-15 13:34:34)\nGraph cleaning finished     (2024-10-15 13:34:34)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2024-10-15 13:34:34)\nFilter by read depth        (2024-10-15 13:34:34)\nFilter homopolymer loops    (2024-10-15 13:34:34)\nMerge all possible          (2024-10-15 13:34:34)\nNormalise read depths       (2024-10-15 13:34:34)\nRemove zero length segments (2024-10-15 13:34:34)\nSort link order             (2024-10-15 13:34:34)\nGraph cleaning finished     (2024-10-15 13:34:34)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2024-10-15 13:34:34)\nFilter by read depth        (2024-10-15 13:34:34)\nFilter homopolymer loops    (2024-10-15 13:34:34)\nMerge all possible          (2024-10-15 13:34:34)\nNormalise read depths       (2024-10-15 13:34:34)\nRemove zero length segments (2024-10-15 13:34:34)\nSort link order             (2024-10-15 13:34:34)\nGraph cleaning finished     (2024-10-15 13:34:34)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2024-10-15 13:34:34)\nFilter by read depth        (2024-10-15 13:34:34)\nFilter homopolymer loops    (2024-10-15 13:34:34)\nMerge all possible          (2024-10-15 13:34:34)\nNormalise read depths       (2024-10-15 13:34:34)\nRemove zero length segments (2024-10-15 13:34:34)\nSort link order             (2024-10-15 13:34:34)\nGraph cleaning finished     (2024-10-15 13:34:34)\nSaving /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2024-10-15 13:34:34)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k027.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k047.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k063.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k077.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k089.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k099.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k107.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k115.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k121.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/001_spades_graph_k127.gfa\nDeleting /galaxy/server/database/jobs_directory/000/158/working/spades_assembly/\n\n\nDetermining graph multiplicity (2024-10-15 13:34:34)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\n\nCleaning graph (2024-10-15 13:34:34)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-10-15 13:34:34)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-10-15 13:34:34)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2024-10-15 13:34:34)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2024-10-15 13:34:34)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/158/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/158/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2024-10-15 13:34:34)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/158/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times\n(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2024-10-15 13:34:34)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2024-10-15 13:34:34)\n1\t5386\t5\t5161\t+\t1\t5386\t229\t5385\t5156\t5156\t255\tcm:i:959\n1\t5386\t5168\t5384\t+\t1\t5386\t6\t222\t216\t216\t255\tcm:i:39\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2024-10-15 13:34:34)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5161,+,1,229,5385\n    5168,5384,+,1,6,222\nReference ranges:\n    1+: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 215 points, score=213.009259 (good)\n    line 2: 5153 points, score=5151.000388 (good)\nAll Seqan alignments (time to align = 0.058 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0      224        5162      5386       +        672        100.00   100.00%\n         1        224     5386           0      5162       +      15486        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1        224     5386           0      5162       +      15486        100.00   100.00%\n         1          0      224        5162      5386       +        672        100.00   100.00%\n\n\nRead alignment summary (2024-10-15 13:34:35)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nDeleting /galaxy/server/database/jobs_directory/000/158/working/read_alignment/\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2024-10-15 13:34:35)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2024-10-15 13:34:35)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\n\nCleaning up leftover segments (2024-10-15 13:34:35)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-10-15 13:34:35)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2024-10-15 13:34:35)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-10-15 13:34:43)\nSaving /galaxy/server/database/jobs_directory/000/158/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/158/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 minutes", "plugin": "core", "name": "runtime_seconds", "raw_value": "173.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:34:43", "plugin": "core", "name": "end_epoch", "raw_value": "1728999283.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:31:50", "plugin": "core", "name": "start_epoch", "raw_value": "1728999110.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "unicycler/0.5.1+galaxy0-2", "has_data": true, "data": {"tool_id": "unicycler", "tool_version": "0.5.1+galaxy0", "test_index": 2, "time_seconds": 202.86111617088318, "inputs": {"paired_unpaired|fastq_input1": {"src": "hdca", "id": "c447fbfab87b8018"}, "paired_unpaired|fastq_input_selector": "paired_collection", "mode": "normal", "min_fasta_length": "100", "linear_seqs": "0", "spades|min_kmer_frac": "0.2", "spades|max_kmer_frac": "0.95", "spades|kmer_count": "10", "spades|depth_filter": "0.25", "rotation|no_rotate": false, "rotation|start_gene_id": "90", "rotation|start_gene_cov": "95", "graph_clean|min_component_size": "1000", "graph_clean|min_dead_end_size": "1000", "lr_align|scores": "3,-6,-5,-2", "keep": "0"}, "job": {"model_class": "Job", "id": "00fe091caa8fd420", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:38:17.005011", "create_time": "2024-10-15T13:35:17.565499", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-djqdt", "command_line": "ln -s '/galaxy/server/database/objects/d/b/7/dataset_db77156c-7830-4ea9-9317-acdee90f0615.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/f/8/5/dataset_f85332b4-3bd2-4a18-b901-dc856b14e5a5.dat' fq2.fastq && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 -1 'fq1.fastq' -2 'fq2.fastq' --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'  --keep 0", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "reuse": "[]", "keep": "\"0\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"no_simple_bridges\": false, \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "rotation": "{\"no_rotate\": false, \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": false, \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "long": null, "paired_unpaired": "{\"__current_case__\": 1, \"fastq_input1\": {\"values\": [{\"id\": 18, \"src\": \"hdca\"}]}, \"fastq_input_selector\": \"paired_collection\"}"}, "inputs": {"paired_unpaired|fastq_input11": {"id": "33957df168b33883", "src": "hda", "uuid": "db77156c-7830-4ea9-9317-acdee90f0615"}, "paired_unpaired|fastq_input12": {"id": "07608909a233e0c6", "src": "hda", "uuid": "f85332b4-3bd2-4a18-b901-dc856b14e5a5"}}, "outputs": {"assembly_graph": {"id": "4cc3a50d8b6bec22", "src": "hda", "uuid": "b8e3e545-cf92-40c8-9a4b-5c85f40794fb"}, "assembly": {"id": "4fe5954228a0d622", "src": "hda", "uuid": "fee56bfe-5830-409d-83b2-1760bafa51e4"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2024-10-15 13:35:19)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/161/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status     Path                      \n  spades.py     4.0.0     good       /usr/local/bin/spades.py  \n  racon                   not used                             \n  makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good       /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2024-10-15 13:35:19)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2024-10-15 13:35:19)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/161/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/161/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/161/working/fq2.fastq -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/161/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/161/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/161/working/fq2.fastq -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.100+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/161/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/161/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/161/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/161/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/161/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.000     1M / 21M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.001     1M / 21M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.001     1M / 21M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.001     1M / 21M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/161/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.001     1M / 21M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.001     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.001     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.001     1M / 21M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.001     1M / 21M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.008     1M / 21M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.008     1M / 21M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.079    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.083    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.103    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.104    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.114    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.156     1M / 41M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.178     1M / 41M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.178     1M / 41M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.178     1M / 41M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.178     1M / 41M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.179     1M / 41M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.179     1M / 41M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.179     1M / 41M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.085     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:01.088     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.333     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.333     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:01.393     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:01.394     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:01.395     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:01.395     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:01.395     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:02.278  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:02.278  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:02.279     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:02.526     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:02.526     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.587     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:02.587     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:02.789     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:02.802     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:02.828     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:02.833     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:02.835     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:02.837     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:02.842     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:02.843     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:02.843     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:02.843     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:02.843     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:02.845     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:02.845     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:02.845     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:02.845     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:02.845     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:02.845     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:02.847     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:02.847     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.895     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:02.896     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:02.966     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:02.967     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:03.056     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:03.056     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:03.056     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:03.056     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:03.056     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:03.156     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:03.451     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:03.967     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:04.435     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:05.239     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:05.240     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:05.241     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:05.241     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:05.241     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:05.241     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:05.241     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:05.241     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:05.241     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:05.241     1M / 55M   INFO   StageManager             (stage.cpp                 : 189\n..\n               : 131)   Assembling time: 0 hours 0 minutes 6 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished.\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/spades.log\nThank you for using SPAdes! If you use it in your research, please cite:\n  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.\n  doi.org/10.1002/cpbi.102\n\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k27 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k027_assembly_graph.gfa\n\nCleaning k47 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k047_assembly_graph.gfa\n\nCleaning k63 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k063_assembly_graph.gfa\n\nCleaning k77 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2024-10-15 13:37:58)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k027.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k047.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k063.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k077.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k089.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k099.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k107.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k115.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k121.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k127.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/\n\n\nDetermining graph multiplicity (2024-10-15 13:37:58)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\n\nCleaning graph (2024-10-15 13:37:58)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-10-15 13:37:58)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-10-15 13:37:58)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2024-10-15 13:37:58)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\n\nCleaning up leftover segments (2024-10-15 13:37:58)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-10-15 13:37:58)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2024-10-15 13:37:58)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-10-15 13:38:07)\nSaving /galaxy/server/database/jobs_directory/000/161/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/161/working/assembly.fasta\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "\nStarting Unicycler (2024-10-15 13:35:19)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/161/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status     Path                      \n  spades.py     4.0.0     good       /usr/local/bin/spades.py  \n  racon                   not used                             \n  makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good       /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2024-10-15 13:35:19)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2024-10-15 13:35:19)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/161/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/161/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/161/working/fq2.fastq -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/161/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/161/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/161/working/fq2.fastq -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.100+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/161/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/161/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/161/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/161/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/161/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.000     1M / 21M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.001     1M / 21M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.001     1M / 21M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.001     1M / 21M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/161/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.001     1M / 21M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.001     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.001     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.001     1M / 21M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.001     1M / 21M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.008     1M / 21M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.008     1M / 21M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.079    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.083    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.103    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.104    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.114    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.156     1M / 41M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.178     1M / 41M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.178     1M / 41M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.178     1M / 41M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.178     1M / 41M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.179     1M / 41M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.179     1M / 41M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.179     1M / 41M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.085     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:01.088     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.333     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.333     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:01.393     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:01.394     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:01.395     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:01.395     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:01.395     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:02.278  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:02.278  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:02.279     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:02.526     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:02.526     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.587     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:02.587     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:02.789     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:02.802     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:02.828     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:02.833     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:02.835     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:02.837     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:02.842     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:02.843     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:02.843     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:02.843     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:02.843     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:02.845     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:02.845     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:02.845     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:02.845     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:02.845     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:02.845     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:02.847     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:02.847     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.895     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:02.896     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:02.966     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:02.967     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:03.056     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:03.056     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:03.056     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:03.056     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:03.056     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:03.156     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:03.451     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:03.967     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:04.435     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:05.239     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:05.240     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:05.241     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:05.241     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:05.241     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:05.241     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:05.241     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:05.241     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:05.241     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:05.241     1M / 55M   INFO   StageManager             (stage.cpp                 : 189\n..\n               : 131)   Assembling time: 0 hours 0 minutes 6 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished.\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/spades.log\nThank you for using SPAdes! If you use it in your research, please cite:\n  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.\n  doi.org/10.1002/cpbi.102\n\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k27 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k027_assembly_graph.gfa\n\nCleaning k47 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k047_assembly_graph.gfa\n\nCleaning k63 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k063_assembly_graph.gfa\n\nCleaning k77 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2024-10-15 13:37:58)\nFilter by read depth        (2024-10-15 13:37:58)\nFilter homopolymer loops    (2024-10-15 13:37:58)\nMerge all possible          (2024-10-15 13:37:58)\nNormalise read depths       (2024-10-15 13:37:58)\nRemove zero length segments (2024-10-15 13:37:58)\nSort link order             (2024-10-15 13:37:58)\nGraph cleaning finished     (2024-10-15 13:37:58)\nSaving /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2024-10-15 13:37:58)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k027.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k047.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k063.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k077.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k089.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k099.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k107.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k115.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k121.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/001_spades_graph_k127.gfa\nDeleting /galaxy/server/database/jobs_directory/000/161/working/spades_assembly/\n\n\nDetermining graph multiplicity (2024-10-15 13:37:58)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\n\nCleaning graph (2024-10-15 13:37:58)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-10-15 13:37:58)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-10-15 13:37:58)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2024-10-15 13:37:58)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\n\nCleaning up leftover segments (2024-10-15 13:37:58)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-10-15 13:37:58)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2024-10-15 13:37:58)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-10-15 13:38:07)\nSaving /galaxy/server/database/jobs_directory/000/161/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/161/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 minutes", "plugin": "core", "name": "runtime_seconds", "raw_value": "168.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:38:07", "plugin": "core", "name": "end_epoch", "raw_value": "1728999487.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:35:19", "plugin": "core", "name": "start_epoch", "raw_value": "1728999319.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "unicycler/0.5.1+galaxy0-3", "has_data": true, "data": {"tool_id": "unicycler", "tool_version": "0.5.1+galaxy0", "test_index": 3, "time_seconds": 31.835760593414307, "inputs": {"paired_unpaired|fastq_input_selector": "none", "long": {"src": "hda", "id": "e1fe1c4eb8b9b559"}, "min_anchor_seg_len": "10", "spades|kmers": "21,23", "keep": "0"}, "job": {"model_class": "Job", "id": "32eb92c04e93d428", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:38:49.125188", "create_time": "2024-10-15T13:38:36.545297", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-htjvs", "command_line": "ln -s '/galaxy/server/database/objects/1/e/2/dataset_1e207a1e-2d79-40f0-99df-675d6c5ac10e.dat' 'lr.fasta' && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 -l lr.fasta --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --min_anchor_seg_len '10' --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmers '21,23' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'  --keep 0", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "reuse": "[]", "keep": "\"0\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"no_simple_bridges\": false, \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "rotation": "{\"no_rotate\": false, \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"21,23\", \"largest_component\": false, \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\"}", "min_anchor_seg_len": "\"10\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "paired_unpaired": "{\"__current_case__\": 3, \"fastq_input_selector\": \"none\"}"}, "inputs": {"long": {"id": "e1fe1c4eb8b9b559", "src": "hda", "uuid": "1e207a1e-2d79-40f0-99df-675d6c5ac10e"}}, "outputs": {"assembly_graph": {"id": "0928f05092df7af5", "src": "hda", "uuid": "d9b99083-5e14-45a0-b103-327093f6583e"}, "assembly": {"id": "bac12f73569df12f", "src": "hda", "uuid": "8893ba1a-461e-4098-bea4-95f85b705850"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2024-10-15 13:38:38)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only long reads, Unicycler will assemble the reads with miniasm and\nthen run repeated polishing rounds using Racon.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/163/working\n\nDependencies:\n  Program       Version   Status     Path                      \n  spades.py               not used                             \n  racon         1.5.0     good       /usr/local/bin/racon      \n  makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good       /usr/local/bin/tblastn    \n\n\nLoading reads (2024-10-15 13:38:39)\n\r0 / 40 (0.0%)\r1 / 40 (2.5%) - 412 bp\r2 / 40 (5.0%) - 4,847 bp\r3 / 40 (7.5%) - 8,974 bp\r4 / 40 (10.0%) - 13,249 bp\r5 / 40 (12.5%) - 14,258 bp\r6 / 40 (15.0%) - 14,806 bp\r7 / 40 (17.5%) - 19,262 bp\r8 / 40 (20.0%) - 19,737 bp\r9 / 40 (22.5%) - 20,395 bp\r10 / 40 (25.0%) - 32,024 bp\r11 / 40 (27.5%) - 32,698 bp\r12 / 40 (30.0%) - 34,509 bp\r13 / 40 (32.5%) - 39,018 bp\r14 / 40 (35.0%) - 43,351 bp\r15 / 40 (37.5%) - 44,224 bp\r16 / 40 (40.0%) - 45,978 bp\r17 / 40 (42.5%) - 46,402 bp\r18 / 40 (45.0%) - 61,596 bp\r19 / 40 (47.5%) - 62,279 bp\r20 / 40 (50.0%) - 63,700 bp\r21 / 40 (52.5%) - 66,412 bp\r22 / 40 (55.0%) - 66,845 bp\r23 / 40 (57.5%) - 67,316 bp\r24 / 40 (60.0%) - 69,428 bp\r25 / 40 (62.5%) - 73,964 bp\r26 / 40 (65.0%) - 75,608 bp\r27 / 40 (67.5%) - 80,223 bp\r28 / 40 (70.0%) - 84,810 bp\r29 / 40 (72.5%) - 92,076 bp\r30 / 40 (75.0%) - 92,832 bp\r31 / 40 (77.5%) - 92,939 bp\r32 / 40 (80.0%) - 93,532 bp\r33 / 40 (82.5%) - 96,370 bp\r34 / 40 (85.0%) - 100,656 bp\r35 / 40 (87.5%) - 119,222 bp\r36 / 40 (90.0%) - 123,827 bp\r37 / 40 (92.5%) - 155,106 bp\r38 / 40 (95.0%) - 156,254 bp\r39 / 40 (97.5%) - 157,993 bp\r40 / 40 (100.0%) - 162,406 bp\r40 / 40 (100.0%) - 162,406 bp\n\n\nAssembling contigs and long reads with miniasm (2024-10-15 13:38:39)\nSaving to /galaxy/server/database/jobs_directory/000/163/working/miniasm_assembly/01_assembly_reads.fastq:\n  40 long reads\n\nFinding overlaps with minimap... success\n  120 overlaps\n\nAssembling reads with miniasm... success\n  7 segments, 6 links\n\n    Unicycler removes any links from the string graph which create branches.\nI.e. if any segment has two or more links connected to one end, those links are\nremoved. This will result in a graph with only simple linear paths that is\nsuitable for creating unambiguous bridges.\n\nNo links needed removal\nSaving /galaxy/server/database/jobs_directory/000/163/working/miniasm_assembly/11_branching_paths_removed.gfa\nMerging segments into unitigs:\n\nLinear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-\n\n  1 linear unitig\n  total size = 5,836 bp\nSaving /galaxy/server/database/jobs_directory/000/163/working/miniasm_assembly/12_unitig_graph.gfa\n\n\nPolishing miniasm assembly with Racon (2024-10-15 13:38:39)\n    Unicycler now uses Racon to polish the miniasm assembly. It does multiple\nrounds of polishing to get the best consensus. Circular unitigs are rotated\nbetween rounds such that all parts (including the ends) are polished well.\n\nSaving to /galaxy/server/database/jobs_directory/000/163/working/miniasm_assembly/racon_polish/polishing_reads.fastq:\n  40 long reads\n\nPolish       Assembly          Mapping\nround            size          quality\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t210\t4010\t+\t1\t5836\t1061\t4603\t1147\t3800\t255\tcm:i:200\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t5836\t5221\t5833\t179\t612\t255\tcm:i:27\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t5836\t2376\t5833\t3457\t3457\t255\tcm:i:1153\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2525\t-\t1\t5836\t30\t2314\t787\t2399\t255\tcm:i:144\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t280\t4284\t-\t1\t5836\t4\t3936\t1481\t4004\t255\tcm:i:246\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4286\t-\t1\t5836\t4215\t5833\t546\t1618\t255\tcm:i:88\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t170\t4027\t+\t1\t5836\t1680\t5833\t1032\t4153\t255\tcm:i:174\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4082\t+\t1\t5836\t4\t1602\t220\t1598\t255\tcm:i:30\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1334\t4566\t-\t1\t5836\t2699\t5786\t1281\t3232\t255\tcm:i:243\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t5836\t50\t2663\t772\t2680\t255\tcm:i:129\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t5836\t2657\t5833\t1469\t3386\t255\tcm:i:268\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2786\t-\t1\t5836\t30\t2636\t905\t2689\t255\tcm:i:157\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t143\t4271\t-\t1\t5836\t338\t4254\t1834\t4128\t255\tcm:i:470\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3092\t4330\t-\t1\t5836\t4503\t5798\t430\t1295\t255\tcm:i:77\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t544\t4408\t-\t1\t5836\t69\t3927\t1208\t3864\t255\tcm:i:237\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3008\t4472\t-\t1\t5836\t4215\t5748\t351\t1533\t255\tcm:i:53\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t5836\t2909\t3222\t131\t313\t255\tcm:i:22\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t335\t4397\t+\t1\t5836\t1321\t5257\t1351\t4062\t255\tcm:i:280\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4349\t+\t1\t5836\t23\t961\t238\t938\t255\tcm:i:40\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t537\t+\t1\t5836\t5334\t5798\t154\t464\t255\tcm:i:26\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t111\t4359\t-\t1\t5836\t1673\t5798\t2062\t4248\t255\tcm:i:487\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t109\t1619\t-\t1\t5836\t30\t1525\t472\t1510\t255\tcm:i:68\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t5836\t1733\t5833\t1303\t4100\t255\tcm:i:230\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t5836\t4\t1690\t311\t1712\t255\tcm:i:43\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4205\t+\t1\t5836\t23\t3939\t1039\t3916\t255\tcm:i:166\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t296\t1782\t+\t1\t5836\t4242\t5798\t367\t1556\t255\tcm:i:63\nbegin           5,836             5.33\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6290\t1009\t5054\t2431\t4045\t255\tcm:i:529\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6290\t5670\t6287\t297\t617\t255\tcm:i:63\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6290\t4\t404\t122\t400\t255\tcm:i:19\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6290\t2540\t6287\t2249\t3747\t255\tcm:i:527\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6290\t51\t2474\t1276\t2423\t255\tcm:i:245\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6290\t4\t4316\t2322\t4312\t255\tcm:i:486\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6290\t4354\t6287\t943\t1933\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t116\t4027\t+\t1\t6290\t1774\t6287\t2145\t4513\t255\tcm:i:426\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6290\t4\t1741\t421\t1737\t255\tcm:i:61\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6290\t2854\t6226\t2257\t3372\t255\tcm:i:501\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6290\t51\t2831\t1459\t2780\t255\tcm:i:289\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6290\t2825\t6287\t2268\t3462\t255\tcm:i:513\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2745\t-\t1\t6290\t74\t2805\t1501\t2731\t255\tcm:i:289\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6290\t354\t4699\t2022\t4345\t255\tcm:i:377\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6290\t4984\t6271\t614\t1287\t255\tcm:i:117\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6290\t72\t4534\t1921\t4462\t255\tcm:i:337\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6290\t4597\t6206\t580\t1609\t255\tcm:i:103\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6290\t3083\t3386\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6290\t1126\t5708\t2368\t4582\t255\tcm:i:487\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4392\t+\t1\t6290\t23\t1039\t362\t1016\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t539\t+\t1\t6290\t5785\t6254\t217\t469\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6290\t1806\t6258\t2777\t4452\t255\tcm:i:600\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6290\t74\t1603\t761\t1529\t255\tcm:i:150\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t795\t+\t1\t6290\t5209\t5912\t149\t703\t255\tcm:i:24\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6290\t585\t1307\t155\t722\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t6290\t1886\t6287\t2070\t4401\t255\tcm:i:456\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6290\t4\t1838\t656\t1834\t255\tcm:i:109\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6290\t2060\t2358\t156\t298\t255\tcm:i:35\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6290\t23\t4436\t2106\t4413\t255\tcm:i:421\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6290\t4488\t6273\t744\t1785\t255\tcm:i:131\n1               6,290             7.82\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6242\t1016\t5009\t2460\t3993\t255\tcm:i:530\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6242\t5626\t6239\t283\t613\t255\tcm:i:61\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6242\t4\t408\t117\t404\t255\tcm:i:18\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6242\t2535\t6239\t2234\t3704\t255\tcm:i:514\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6242\t51\t2469\t1387\t2418\t255\tcm:i:271\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6242\t4\t4276\t2380\t4272\t255\tcm:i:494\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6242\t4314\t6239\t955\t1925\t255\tcm:i:196\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6242\t1759\t6239\t2194\t4480\t255\tcm:i:440\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6242\t4\t1735\t450\t1731\t255\tcm:i:67\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6242\t2848\t6178\t2284\t3330\t255\tcm:i:509\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6242\t51\t2825\t1504\t2774\t255\tcm:i:295\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6242\t2819\t6239\t2235\t3420\t255\tcm:i:510\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t109\t2745\t-\t1\t6242\t74\t2787\t1517\t2713\t255\tcm:i:304\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6242\t358\t4659\t2051\t4301\t255\tcm:i:391\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6242\t4939\t6223\t618\t1284\t255\tcm:i:114\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6242\t72\t4493\t1941\t4421\t255\tcm:i:345\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6242\t4556\t6158\t579\t1602\t255\tcm:i:105\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6242\t3077\t3380\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6242\t1133\t5664\t2405\t4531\t255\tcm:i:507\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6242\t23\t1051\t353\t1028\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6242\t5759\t6206\t204\t447\t255\tcm:i:40\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6242\t1799\t6210\t2749\t4411\t255\tcm:i:591\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6242\t74\t1601\t795\t1527\t255\tcm:i:165\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6242\t5166\t5916\t224\t750\t255\tcm:i:35\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t160\t847\t+\t1\t6242\t602\t1310\t144\t708\t255\tcm:i:16\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6242\t1908\t6239\t2061\t4331\t255\tcm:i:454\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6242\t4\t1831\t667\t1827\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6242\t2053\t2352\t157\t299\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6242\t23\t4395\t2130\t4372\t255\tcm:i:425\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6242\t4447\t6225\t762\t1778\t255\tcm:i:138\n2               6,242             8.02\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6265\t1028\t5025\t2436\t3997\t255\tcm:i:527\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6265\t5642\t6262\t281\t620\t255\tcm:i:59\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6265\t4\t408\t105\t404\t255\tcm:i:17\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6265\t2544\t6262\t2228\t3718\t255\tcm:i:507\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6265\t51\t2478\t1353\t2427\t255\tcm:i:260\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6265\t4\t4293\t2377\t4289\t255\tcm:i:492\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6265\t4331\t6262\t967\t1931\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6265\t1772\t6262\t2190\t4490\t255\tcm:i:436\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6265\t4\t1748\t448\t1744\t255\tcm:i:62\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6265\t2857\t6201\t2270\t3344\t255\tcm:i:503\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6265\t51\t2834\t1463\t2783\t255\tcm:i:284\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6265\t2828\t6262\t2251\t3434\t255\tcm:i:515\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t102\t2745\t-\t1\t6265\t74\t2804\t1511\t2730\t255\tcm:i:305\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6265\t358\t4676\t2063\t4318\t255\tcm:i:392\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4328\t-\t1\t6265\t4930\t6246\t623\t1316\t255\tcm:i:113\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6265\t72\t4510\t1987\t4438\t255\tcm:i:350\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6265\t4573\t6181\t569\t1608\t255\tcm:i:102\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6265\t3089\t3392\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6265\t1145\t5680\t2423\t4535\t255\tcm:i:509\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6265\t23\t1063\t337\t1040\t255\tcm:i:56\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6265\t5779\t6229\t223\t450\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6265\t1812\t6233\t2769\t4421\t255\tcm:i:601\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6265\t74\t1615\t764\t1541\t255\tcm:i:156\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6265\t5182\t5936\t236\t754\t255\tcm:i:36\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6265\t589\t1322\t155\t733\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6265\t1921\t6262\t2062\t4341\t255\tcm:i:449\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6265\t4\t1844\t660\t1840\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6265\t2063\t2361\t157\t298\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6265\t23\t4412\t2182\t4389\t255\tcm:i:436\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6265\t4464\t6248\t787\t1784\t255\tcm:i:141\n3               6,265             8.04\n\nBest polish: /galaxy/server/database/jobs_directory/000/163/working/miniasm_assembly/racon_polish/016_rotated.fasta\nSaving /galaxy/server/database/jobs_directory/000/163/working/miniasm_assembly/13_racon_polished.gfa\n\n\nAssembly complete (2024-10-15 13:38:39)\nSaving /galaxy/server/database/jobs_directory/000/163/working/assembly.gfa\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "\nStarting Unicycler (2024-10-15 13:38:38)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only long reads, Unicycler will assemble the reads with miniasm and\nthen run repeated polishing rounds using Racon.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/163/working\n\nDependencies:\n  Program       Version   Status     Path                      \n  spades.py               not used                             \n  racon         1.5.0     good       /usr/local/bin/racon      \n  makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good       /usr/local/bin/tblastn    \n\n\nLoading reads (2024-10-15 13:38:39)\n\r0 / 40 (0.0%)\r1 / 40 (2.5%) - 412 bp\r2 / 40 (5.0%) - 4,847 bp\r3 / 40 (7.5%) - 8,974 bp\r4 / 40 (10.0%) - 13,249 bp\r5 / 40 (12.5%) - 14,258 bp\r6 / 40 (15.0%) - 14,806 bp\r7 / 40 (17.5%) - 19,262 bp\r8 / 40 (20.0%) - 19,737 bp\r9 / 40 (22.5%) - 20,395 bp\r10 / 40 (25.0%) - 32,024 bp\r11 / 40 (27.5%) - 32,698 bp\r12 / 40 (30.0%) - 34,509 bp\r13 / 40 (32.5%) - 39,018 bp\r14 / 40 (35.0%) - 43,351 bp\r15 / 40 (37.5%) - 44,224 bp\r16 / 40 (40.0%) - 45,978 bp\r17 / 40 (42.5%) - 46,402 bp\r18 / 40 (45.0%) - 61,596 bp\r19 / 40 (47.5%) - 62,279 bp\r20 / 40 (50.0%) - 63,700 bp\r21 / 40 (52.5%) - 66,412 bp\r22 / 40 (55.0%) - 66,845 bp\r23 / 40 (57.5%) - 67,316 bp\r24 / 40 (60.0%) - 69,428 bp\r25 / 40 (62.5%) - 73,964 bp\r26 / 40 (65.0%) - 75,608 bp\r27 / 40 (67.5%) - 80,223 bp\r28 / 40 (70.0%) - 84,810 bp\r29 / 40 (72.5%) - 92,076 bp\r30 / 40 (75.0%) - 92,832 bp\r31 / 40 (77.5%) - 92,939 bp\r32 / 40 (80.0%) - 93,532 bp\r33 / 40 (82.5%) - 96,370 bp\r34 / 40 (85.0%) - 100,656 bp\r35 / 40 (87.5%) - 119,222 bp\r36 / 40 (90.0%) - 123,827 bp\r37 / 40 (92.5%) - 155,106 bp\r38 / 40 (95.0%) - 156,254 bp\r39 / 40 (97.5%) - 157,993 bp\r40 / 40 (100.0%) - 162,406 bp\r40 / 40 (100.0%) - 162,406 bp\n\n\nAssembling contigs and long reads with miniasm (2024-10-15 13:38:39)\nSaving to /galaxy/server/database/jobs_directory/000/163/working/miniasm_assembly/01_assembly_reads.fastq:\n  40 long reads\n\nFinding overlaps with minimap... success\n  120 overlaps\n\nAssembling reads with miniasm... success\n  7 segments, 6 links\n\n    Unicycler removes any links from the string graph which create branches.\nI.e. if any segment has two or more links connected to one end, those links are\nremoved. This will result in a graph with only simple linear paths that is\nsuitable for creating unambiguous bridges.\n\nNo links needed removal\nSaving /galaxy/server/database/jobs_directory/000/163/working/miniasm_assembly/11_branching_paths_removed.gfa\nMerging segments into unitigs:\n\nLinear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-\n\n  1 linear unitig\n  total size = 5,836 bp\nSaving /galaxy/server/database/jobs_directory/000/163/working/miniasm_assembly/12_unitig_graph.gfa\n\n\nPolishing miniasm assembly with Racon (2024-10-15 13:38:39)\n    Unicycler now uses Racon to polish the miniasm assembly. It does multiple\nrounds of polishing to get the best consensus. Circular unitigs are rotated\nbetween rounds such that all parts (including the ends) are polished well.\n\nSaving to /galaxy/server/database/jobs_directory/000/163/working/miniasm_assembly/racon_polish/polishing_reads.fastq:\n  40 long reads\n\nPolish       Assembly          Mapping\nround            size          quality\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t210\t4010\t+\t1\t5836\t1061\t4603\t1147\t3800\t255\tcm:i:200\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t5836\t5221\t5833\t179\t612\t255\tcm:i:27\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t5836\t2376\t5833\t3457\t3457\t255\tcm:i:1153\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2525\t-\t1\t5836\t30\t2314\t787\t2399\t255\tcm:i:144\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t280\t4284\t-\t1\t5836\t4\t3936\t1481\t4004\t255\tcm:i:246\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4286\t-\t1\t5836\t4215\t5833\t546\t1618\t255\tcm:i:88\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t170\t4027\t+\t1\t5836\t1680\t5833\t1032\t4153\t255\tcm:i:174\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4082\t+\t1\t5836\t4\t1602\t220\t1598\t255\tcm:i:30\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1334\t4566\t-\t1\t5836\t2699\t5786\t1281\t3232\t255\tcm:i:243\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t5836\t50\t2663\t772\t2680\t255\tcm:i:129\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t5836\t2657\t5833\t1469\t3386\t255\tcm:i:268\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2786\t-\t1\t5836\t30\t2636\t905\t2689\t255\tcm:i:157\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t143\t4271\t-\t1\t5836\t338\t4254\t1834\t4128\t255\tcm:i:470\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3092\t4330\t-\t1\t5836\t4503\t5798\t430\t1295\t255\tcm:i:77\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t544\t4408\t-\t1\t5836\t69\t3927\t1208\t3864\t255\tcm:i:237\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3008\t4472\t-\t1\t5836\t4215\t5748\t351\t1533\t255\tcm:i:53\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t5836\t2909\t3222\t131\t313\t255\tcm:i:22\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t335\t4397\t+\t1\t5836\t1321\t5257\t1351\t4062\t255\tcm:i:280\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4349\t+\t1\t5836\t23\t961\t238\t938\t255\tcm:i:40\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t537\t+\t1\t5836\t5334\t5798\t154\t464\t255\tcm:i:26\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t111\t4359\t-\t1\t5836\t1673\t5798\t2062\t4248\t255\tcm:i:487\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t109\t1619\t-\t1\t5836\t30\t1525\t472\t1510\t255\tcm:i:68\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t5836\t1733\t5833\t1303\t4100\t255\tcm:i:230\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t5836\t4\t1690\t311\t1712\t255\tcm:i:43\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4205\t+\t1\t5836\t23\t3939\t1039\t3916\t255\tcm:i:166\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t296\t1782\t+\t1\t5836\t4242\t5798\t367\t1556\t255\tcm:i:63\nbegin           5,836             5.33\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6290\t1009\t5054\t2431\t4045\t255\tcm:i:529\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6290\t5670\t6287\t297\t617\t255\tcm:i:63\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6290\t4\t404\t122\t400\t255\tcm:i:19\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6290\t2540\t6287\t2249\t3747\t255\tcm:i:527\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6290\t51\t2474\t1276\t2423\t255\tcm:i:245\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6290\t4\t4316\t2322\t4312\t255\tcm:i:486\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6290\t4354\t6287\t943\t1933\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t116\t4027\t+\t1\t6290\t1774\t6287\t2145\t4513\t255\tcm:i:426\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6290\t4\t1741\t421\t1737\t255\tcm:i:61\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6290\t2854\t6226\t2257\t3372\t255\tcm:i:501\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6290\t51\t2831\t1459\t2780\t255\tcm:i:289\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6290\t2825\t6287\t2268\t3462\t255\tcm:i:513\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2745\t-\t1\t6290\t74\t2805\t1501\t2731\t255\tcm:i:289\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6290\t354\t4699\t2022\t4345\t255\tcm:i:377\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6290\t4984\t6271\t614\t1287\t255\tcm:i:117\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6290\t72\t4534\t1921\t4462\t255\tcm:i:337\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6290\t4597\t6206\t580\t1609\t255\tcm:i:103\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6290\t3083\t3386\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6290\t1126\t5708\t2368\t4582\t255\tcm:i:487\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4392\t+\t1\t6290\t23\t1039\t362\t1016\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t539\t+\t1\t6290\t5785\t6254\t217\t469\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6290\t1806\t6258\t2777\t4452\t255\tcm:i:600\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6290\t74\t1603\t761\t1529\t255\tcm:i:150\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t795\t+\t1\t6290\t5209\t5912\t149\t703\t255\tcm:i:24\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6290\t585\t1307\t155\t722\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t6290\t1886\t6287\t2070\t4401\t255\tcm:i:456\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6290\t4\t1838\t656\t1834\t255\tcm:i:109\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6290\t2060\t2358\t156\t298\t255\tcm:i:35\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6290\t23\t4436\t2106\t4413\t255\tcm:i:421\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6290\t4488\t6273\t744\t1785\t255\tcm:i:131\n1               6,290             7.82\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6242\t1016\t5009\t2460\t3993\t255\tcm:i:530\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6242\t5626\t6239\t283\t613\t255\tcm:i:61\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6242\t4\t408\t117\t404\t255\tcm:i:18\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6242\t2535\t6239\t2234\t3704\t255\tcm:i:514\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6242\t51\t2469\t1387\t2418\t255\tcm:i:271\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6242\t4\t4276\t2380\t4272\t255\tcm:i:494\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6242\t4314\t6239\t955\t1925\t255\tcm:i:196\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6242\t1759\t6239\t2194\t4480\t255\tcm:i:440\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6242\t4\t1735\t450\t1731\t255\tcm:i:67\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6242\t2848\t6178\t2284\t3330\t255\tcm:i:509\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6242\t51\t2825\t1504\t2774\t255\tcm:i:295\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6242\t2819\t6239\t2235\t3420\t255\tcm:i:510\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t109\t2745\t-\t1\t6242\t74\t2787\t1517\t2713\t255\tcm:i:304\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6242\t358\t4659\t2051\t4301\t255\tcm:i:391\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6242\t4939\t6223\t618\t1284\t255\tcm:i:114\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6242\t72\t4493\t1941\t4421\t255\tcm:i:345\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6242\t4556\t6158\t579\t1602\t255\tcm:i:105\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6242\t3077\t3380\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6242\t1133\t5664\t2405\t4531\t255\tcm:i:507\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6242\t23\t1051\t353\t1028\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6242\t5759\t6206\t204\t447\t255\tcm:i:40\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6242\t1799\t6210\t2749\t4411\t255\tcm:i:591\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6242\t74\t1601\t795\t1527\t255\tcm:i:165\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6242\t5166\t5916\t224\t750\t255\tcm:i:35\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t160\t847\t+\t1\t6242\t602\t1310\t144\t708\t255\tcm:i:16\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6242\t1908\t6239\t2061\t4331\t255\tcm:i:454\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6242\t4\t1831\t667\t1827\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6242\t2053\t2352\t157\t299\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6242\t23\t4395\t2130\t4372\t255\tcm:i:425\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6242\t4447\t6225\t762\t1778\t255\tcm:i:138\n2               6,242             8.02\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6265\t1028\t5025\t2436\t3997\t255\tcm:i:527\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6265\t5642\t6262\t281\t620\t255\tcm:i:59\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6265\t4\t408\t105\t404\t255\tcm:i:17\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6265\t2544\t6262\t2228\t3718\t255\tcm:i:507\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6265\t51\t2478\t1353\t2427\t255\tcm:i:260\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6265\t4\t4293\t2377\t4289\t255\tcm:i:492\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6265\t4331\t6262\t967\t1931\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6265\t1772\t6262\t2190\t4490\t255\tcm:i:436\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6265\t4\t1748\t448\t1744\t255\tcm:i:62\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6265\t2857\t6201\t2270\t3344\t255\tcm:i:503\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6265\t51\t2834\t1463\t2783\t255\tcm:i:284\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6265\t2828\t6262\t2251\t3434\t255\tcm:i:515\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t102\t2745\t-\t1\t6265\t74\t2804\t1511\t2730\t255\tcm:i:305\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6265\t358\t4676\t2063\t4318\t255\tcm:i:392\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4328\t-\t1\t6265\t4930\t6246\t623\t1316\t255\tcm:i:113\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6265\t72\t4510\t1987\t4438\t255\tcm:i:350\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6265\t4573\t6181\t569\t1608\t255\tcm:i:102\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6265\t3089\t3392\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6265\t1145\t5680\t2423\t4535\t255\tcm:i:509\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6265\t23\t1063\t337\t1040\t255\tcm:i:56\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6265\t5779\t6229\t223\t450\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6265\t1812\t6233\t2769\t4421\t255\tcm:i:601\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6265\t74\t1615\t764\t1541\t255\tcm:i:156\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6265\t5182\t5936\t236\t754\t255\tcm:i:36\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6265\t589\t1322\t155\t733\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6265\t1921\t6262\t2062\t4341\t255\tcm:i:449\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6265\t4\t1844\t660\t1840\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6265\t2063\t2361\t157\t298\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6265\t23\t4412\t2182\t4389\t255\tcm:i:436\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6265\t4464\t6248\t787\t1784\t255\tcm:i:141\n3               6,265             8.04\n\nBest polish: /galaxy/server/database/jobs_directory/000/163/working/miniasm_assembly/racon_polish/016_rotated.fasta\nSaving /galaxy/server/database/jobs_directory/000/163/working/miniasm_assembly/13_racon_polished.gfa\n\n\nAssembly complete (2024-10-15 13:38:39)\nSaving /galaxy/server/database/jobs_directory/000/163/working/assembly.gfa\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:38:39", "plugin": "core", "name": "end_epoch", "raw_value": "1728999519.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:38:38", "plugin": "core", "name": "start_epoch", "raw_value": "1728999518.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "unicycler/0.5.1+galaxy0-4", "has_data": true, "data": {"tool_id": "unicycler", "tool_version": "0.5.1+galaxy0", "test_index": 4, "time_seconds": 49.790892124176025, "inputs": {"paired_unpaired|fastq_input1": {"src": "hdca", "id": "22c2f0ec128b17ba"}, "paired_unpaired|fastq_input_selector": "paired_collection", "long": {"src": "hda", "id": "d6fb0dac26c0dbbd"}, "keep": "0", "reuse_0|reuse_file": {"src": "hda", "id": "fda64571ed628197"}, "reuse_0|reuse_step": "002_depth_filter"}, "job": {"model_class": "Job", "id": "3ed4cb4ecc058aaa", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:39:39.100168", "create_time": "2024-10-15T13:39:17.185404", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-klj8w", "command_line": "ln -s /galaxy/server/database/objects/8/5/4/dataset_854f2fa0-3b2d-4f40-9423-e7bf6fc1b9c4.dat 002_depth_filter.gfa &&  ln -s '/galaxy/server/database/objects/c/8/0/dataset_c8036662-83b9-4637-954c-b877f263ef3b.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/9/1/3/dataset_913875f9-0009-40f8-906f-ba6616753f46.dat' fq2.fastq && ln -s '/galaxy/server/database/objects/e/2/c/dataset_e2cc506c-f89b-4edc-bcfb-8af11f93417e.dat' 'lr.fasta' && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 -1 'fq1.fastq' -2 'fq2.fastq' -l lr.fasta --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'  --keep 0", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "reuse": "[{\"__index__\": 0, \"reuse_file\": {\"values\": [{\"id\": 233, \"src\": \"hda\"}]}, \"reuse_step\": \"002_depth_filter\"}]", "keep": "\"0\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"no_simple_bridges\": false, \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "rotation": "{\"no_rotate\": false, \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": false, \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "paired_unpaired": "{\"__current_case__\": 1, \"fastq_input1\": {\"values\": [{\"id\": 19, \"src\": \"hdca\"}]}, \"fastq_input_selector\": \"paired_collection\"}"}, "inputs": {"paired_unpaired|fastq_input11": {"id": "48967c5dbfc9d20c", "src": "hda", "uuid": "c8036662-83b9-4637-954c-b877f263ef3b"}, "paired_unpaired|fastq_input12": {"id": "b36d759c27677f5f", "src": "hda", "uuid": "913875f9-0009-40f8-906f-ba6616753f46"}, "long": {"id": "d6fb0dac26c0dbbd", "src": "hda", "uuid": "e2cc506c-f89b-4edc-bcfb-8af11f93417e"}, "reuse_0|reuse_file": {"id": "fda64571ed628197", "src": "hda", "uuid": "854f2fa0-3b2d-4f40-9423-e7bf6fc1b9c4"}}, "outputs": {"assembly_graph": {"id": "e47c49fd795df89f", "src": "hda", "uuid": "110563bc-5eef-4668-9a60-e56efe0a389a"}, "assembly": {"id": "9797d23ef9faa717", "src": "hda", "uuid": "a5da97c2-85d3-41fb-bba2-5cc8cb609c46"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2024-10-15 13:39:18)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/168/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status   Path                      \n  spades.py     4.0.0     good     /usr/local/bin/spades.py  \n  racon         1.5.0     good     /usr/local/bin/racon      \n  makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good     /usr/local/bin/tblastn    \n\nSPAdes graph already exists. Will use this graph instead of running SPAdes:\n  /galaxy/server/database/jobs_directory/000/168/working/002_depth_filter.gfa\n\n\nDetermining graph multiplicity (2024-10-15 13:39:19)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\nInitial single copy segments: none\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\n\nCleaning graph (2024-10-15 13:39:19)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 4 (0.0%)\r1 / 4 (25.0%)\r2 / 4 (50.0%)\r3 / 4 (75.0%)\r4 / 4 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        64        63\n       2        63        64\nGraph overlaps removed\n\nRemoved zero-length segments:\n    2\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-10-15 13:39:19)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-10-15 13:39:19)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2024-10-15 13:39:19)\n\r0 / 40 (0.0%)\r1 / 40 (2.5%) - 412 bp\r2 / 40 (5.0%) - 4,847 bp\r3 / 40 (7.5%) - 8,974 bp\r4 / 40 (10.0%) - 13,249 bp\r5 / 40 (12.5%) - 14,258 bp\r6 / 40 (15.0%) - 14,806 bp\r7 / 40 (17.5%) - 19,262 bp\r8 / 40 (20.0%) - 19,737 bp\r9 / 40 (22.5%) - 20,395 bp\r10 / 40 (25.0%) - 32,024 bp\r11 / 40 (27.5%) - 32,698 bp\r12 / 40 (30.0%) - 34,509 bp\r13 / 40 (32.5%) - 39,018 bp\r14 / 40 (35.0%) - 43,351 bp\r15 / 40 (37.5%) - 44,224 bp\r16 / 40 (40.0%) - 45,978 bp\r17 / 40 (42.5%) - 46,402 bp\r18 / 40 (45.0%) - 61,596 bp\r19 / 40 (47.5%) - 62,279 bp\r20 / 40 (50.0%) - 63,700 bp\r21 / 40 (52.5%) - 66,412 bp\r22 / 40 (55.0%) - 66,845 bp\r23 / 40 (57.5%) - 67,316 bp\r24 / 40 (60.0%) - 69,428 bp\r25 / 40 (62.5%) - 73,964 bp\r26 / 40 (65.0%) - 75,608 bp\r27 / 40 (67.5%) - 80,223 bp\r28 / 40 (70.0%) - 84,810 bp\r29 / 40 (72.5%) - 92,076 bp\r30 / 40 (75.0%) - 92,832 bp\r31 / 40 (77.5%) - 92,939 bp\r32 / 40 (80.0%) - 93,532 bp\r33 / 40 (82.5%) - 96,370 bp\r34 / 40 (85.0%) - 100,656 bp\r35 / 40 (87.5%) - 119,222 bp\r36 / 40 (90.0%) - 123,827 bp\r37 / 40 (92.5%) - 155,106 bp\r38 / 40 (95.0%) - 156,254 bp\r39 / 40 (97.5%) - 157,993 bp\r40 / 40 (100.0%) - 162,406 bp\r40 / 40 (100.0%) - 162,406 bp\n\n\nAssembling contigs and long reads with miniasm (2024-10-15 13:39:19)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/168/working/miniasm_assembly/all_segments.fasta\nNumber of minimap alignments: 0\n\nSaving to /galaxy/server/database/jobs_directory/000/168/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  0 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2024-10-15 13:39:19)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/168/working/simple_bridging/all_segments.fasta\nNumber of minimap alignments: 0\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times\n(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2024-10-15 13:39:19)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2024-10-15 13:39:19)\n\nDone! 0 out of 40 reads aligned\n\n\nAligning reads (2024-10-15 13:39:19)\n1/40: 570cfbe8-1011-441d-911f-d98dcc4472fc_Basecall_1D_template (412 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n2/40: b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template (4435 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n3/40: 4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template (4127 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n4/40: bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template (4275 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n5/40: f5c07582-ccd5-4bd8-aa45-4ebb5011fc08_Basecall_1D_template (1009 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n6/40: 517eff45-d956-49c2-826b-2c46d808ac0b_Basecall_1D_template (548 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n7/40: a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template (4456 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n8/40: d5a76b7f-4807-466d-898b-57cc86dcd23b_Basecall_1D_template (475 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n9/40: 0a216098-91e8-4e7d-8a6e-f01787334e25_Basecall_1D_template (658 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n10/40: 01404034-9c48-4481-9a22-a3f8ca504f46_Basecall_1D_template (11629 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n11/40: 91ad6660-073d-4cb5-8d63-d245dc68bc13_Basecall_1D_template (674 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n12/40: ac90d3b2-5920-4aa0-b847-06f6ad96c660_Basecall_1D_template (1811 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n13/40: f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template (4509 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n14/40: 9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template (4333 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n15/40: ac9e88d3-a34a-4471-afa0-a32482adae44_Basecall_1D_template (873 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n16/40: 1806bd87-3bc8-4c85-8ebb-9bfc69f6ab80_Basecall_1D_template (1754 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n17/40: d6240347-58c8-45c1-9fc6-c81f62e52627_Basecall_1D_template (424 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n18/40: a7b73a5b-e278-4c94-9ac9-cb3c3375de5c_Basecall_1D_template (15194 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n19/40: 062d408e-cb5f-4a8d-a64e-4c5195b7cb42_Basecall_1D_template (683 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n20/40: bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template (1421 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n21/40: cc236ee7-3730-4da5-9285-8b3fd7f4a891_Basecall_1D_template (2712 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n22/40: a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template (433 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n23/40: c4e8bab7-4a32-4e58-81f6-14e6aad83ecd_Basecall_1D_template (471 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n24/40: 2c2d8aa9-504b-4d7a-9ecf-05915b2019f4_Basecall_1D_template (2112 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n25/40: 9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template (4536 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n26/40: ebbcf643-de70-42e5-b191-636075c46300_Basecall_1D_template (1644 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n27/40: 771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template (4615 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n28/40: 598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template (4587 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n29/40: 92e47453-14cb-4eaa-a227-1fb13413ba87_Basecall_1D_template (7266 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n30/40: f5a2663c-bdb6-40ca-b515-5967b8203f05_Basecall_1D_template (756 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n31/40: 256f6d28-2c36-440a-b840-d41bedebcca7_Basecall_1D_template (107 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n32/40: 390d5a94-5dd8-48ed-8e3d-9abaedea15c9_Basecall_1D_template (593 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n33/40: 2126f8fe-6e3b-4785-bec0-0743133405d9_Basecall_1D_template (2838 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n34/40: 0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template (4286 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n35/40: 5b948563-86ae-4075-a648-43355c36cc84_Basecall_1D_template (18566 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n36/40: 3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template (4605 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n37/40: c302e6a4-a0c3-4d66-90f8-3fe9a031a6a3_Basecall_1D_template (31279 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n38/40: c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template (1148 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n39/40: 8c147c6e-6239-4933-9bb9-f9d5e6976103_Basecall_1D_template (1739 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n40/40: 054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template (4413 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n\nRead alignment summary (2024-10-15 13:39:19)\nTotal read count:        40\nFully aligned reads:      0\nPartially aligned reads:  0\nUnaligned reads:         40\n570cfbe8-1011-441d-911f-d98dcc4472fc_Basecall_1D_template, b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template, 4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template, bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template, f5c07582-ccd5-4bd8-aa45-4ebb5011fc08_Basecall_1D_template, 517eff45-d956-49c2-826b-2c46d808ac0b_Basecall_1D_template, a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template, d5a76b7f-4807-466d-898b-57cc86dcd23b_Basecall_1D_template, 0a216098-91e8-4e7d-8a6e-f01787334e25_Basecall_1D_template, 01404034-9c48-4481-9a22-a3f8ca504f46_Basecall_1D_template, 91ad6660-073d-4cb5-8d63-d245dc68bc13_Basecall_1D_template, ac90d3b2-5920-4aa0-b847-06f6ad96c660_Basecall_1D_template, f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template, 9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template, ac9e88d3-a34a-4471-afa0-a32482adae44_Basecall_1D_template, 1806bd87-3bc8-4c85-8ebb-9bfc69f6ab80_Basecall_1D_template, d6240347-58c8-45c1-9fc6-c81f62e52627_Basecall_1D_template, a7b73a5b-e278-4c94-9ac9-cb3c3375de5c_Basecall_1D_template, 062d408e-cb5f-4a8d-a64e-4c5195b7cb42_Basecall_1D_template, bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template, cc236ee7-3730-4da5-9285-8b3fd7f4a891_Basecall_1D_template, a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template, c4e8bab7-4a32-4e58-81f6-14e6aad83ecd_Basecall_1D_template, 2c2d8aa9-504b-4d7a-9ecf-05915b2019f4_Basecall_1D_template, 9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template, ebbcf643-de70-42e5-b191-636075c46300_Basecall_1D_template, 771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template, 598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template, 92e47453-14cb-4eaa-a227-1fb13413ba87_Basecall_1D_template, f5a2663c-bdb6-40ca-b515-5967b8203f05_Basecall_1D_template, 256f6d28-2c36-440a-b840-d41bedebcca7_Basecall_1D_template, 390d5a94-5dd8-48ed-8e3d-9abaedea15c9_Basecall_1D_template, 2126f8fe-6e3b-4785-bec0-0743133405d9_Basecall_1D_template, 0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template, 5b948563-86ae-4075-a648-43355c36cc84_Basecall_1D_template, 3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template, c302e6a4-a0c3-4d66-90f8-3fe9a031a6a3_Basecall_1D_template, c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template, 8c147c6e-6239-4933-9bb9-f9d5e6976103_Basecall_1D_template, 054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\n\nTotal bases aligned:      0 bp\nMean alignment identity:  0.0%\n\nDeleting /galaxy/server/database/jobs_directory/000/168/working/read_alignment/\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2024-10-15 13:39:19)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2024-10-15 13:39:19)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\n\nCleaning up leftover segments (2024-10-15 13:39:19)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-10-15 13:39:19)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2024-10-15 13:39:19)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-10-15 13:39:28)\nSaving /galaxy/server/database/jobs_directory/000/168/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/168/working/assembly.fasta\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "\nStarting Unicycler (2024-10-15 13:39:18)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/168/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status   Path                      \n  spades.py     4.0.0     good     /usr/local/bin/spades.py  \n  racon         1.5.0     good     /usr/local/bin/racon      \n  makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good     /usr/local/bin/tblastn    \n\nSPAdes graph already exists. Will use this graph instead of running SPAdes:\n  /galaxy/server/database/jobs_directory/000/168/working/002_depth_filter.gfa\n\n\nDetermining graph multiplicity (2024-10-15 13:39:19)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\nInitial single copy segments: none\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\n\nCleaning graph (2024-10-15 13:39:19)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 4 (0.0%)\r1 / 4 (25.0%)\r2 / 4 (50.0%)\r3 / 4 (75.0%)\r4 / 4 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        64        63\n       2        63        64\nGraph overlaps removed\n\nRemoved zero-length segments:\n    2\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-10-15 13:39:19)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-10-15 13:39:19)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2024-10-15 13:39:19)\n\r0 / 40 (0.0%)\r1 / 40 (2.5%) - 412 bp\r2 / 40 (5.0%) - 4,847 bp\r3 / 40 (7.5%) - 8,974 bp\r4 / 40 (10.0%) - 13,249 bp\r5 / 40 (12.5%) - 14,258 bp\r6 / 40 (15.0%) - 14,806 bp\r7 / 40 (17.5%) - 19,262 bp\r8 / 40 (20.0%) - 19,737 bp\r9 / 40 (22.5%) - 20,395 bp\r10 / 40 (25.0%) - 32,024 bp\r11 / 40 (27.5%) - 32,698 bp\r12 / 40 (30.0%) - 34,509 bp\r13 / 40 (32.5%) - 39,018 bp\r14 / 40 (35.0%) - 43,351 bp\r15 / 40 (37.5%) - 44,224 bp\r16 / 40 (40.0%) - 45,978 bp\r17 / 40 (42.5%) - 46,402 bp\r18 / 40 (45.0%) - 61,596 bp\r19 / 40 (47.5%) - 62,279 bp\r20 / 40 (50.0%) - 63,700 bp\r21 / 40 (52.5%) - 66,412 bp\r22 / 40 (55.0%) - 66,845 bp\r23 / 40 (57.5%) - 67,316 bp\r24 / 40 (60.0%) - 69,428 bp\r25 / 40 (62.5%) - 73,964 bp\r26 / 40 (65.0%) - 75,608 bp\r27 / 40 (67.5%) - 80,223 bp\r28 / 40 (70.0%) - 84,810 bp\r29 / 40 (72.5%) - 92,076 bp\r30 / 40 (75.0%) - 92,832 bp\r31 / 40 (77.5%) - 92,939 bp\r32 / 40 (80.0%) - 93,532 bp\r33 / 40 (82.5%) - 96,370 bp\r34 / 40 (85.0%) - 100,656 bp\r35 / 40 (87.5%) - 119,222 bp\r36 / 40 (90.0%) - 123,827 bp\r37 / 40 (92.5%) - 155,106 bp\r38 / 40 (95.0%) - 156,254 bp\r39 / 40 (97.5%) - 157,993 bp\r40 / 40 (100.0%) - 162,406 bp\r40 / 40 (100.0%) - 162,406 bp\n\n\nAssembling contigs and long reads with miniasm (2024-10-15 13:39:19)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/168/working/miniasm_assembly/all_segments.fasta\nNumber of minimap alignments: 0\n\nSaving to /galaxy/server/database/jobs_directory/000/168/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  0 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2024-10-15 13:39:19)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/168/working/simple_bridging/all_segments.fasta\nNumber of minimap alignments: 0\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times\n(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2024-10-15 13:39:19)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2024-10-15 13:39:19)\n\nDone! 0 out of 40 reads aligned\n\n\nAligning reads (2024-10-15 13:39:19)\n1/40: 570cfbe8-1011-441d-911f-d98dcc4472fc_Basecall_1D_template (412 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n2/40: b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template (4435 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n3/40: 4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template (4127 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n4/40: bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template (4275 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n5/40: f5c07582-ccd5-4bd8-aa45-4ebb5011fc08_Basecall_1D_template (1009 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n6/40: 517eff45-d956-49c2-826b-2c46d808ac0b_Basecall_1D_template (548 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n7/40: a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template (4456 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n8/40: d5a76b7f-4807-466d-898b-57cc86dcd23b_Basecall_1D_template (475 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n9/40: 0a216098-91e8-4e7d-8a6e-f01787334e25_Basecall_1D_template (658 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n10/40: 01404034-9c48-4481-9a22-a3f8ca504f46_Basecall_1D_template (11629 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n11/40: 91ad6660-073d-4cb5-8d63-d245dc68bc13_Basecall_1D_template (674 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n12/40: ac90d3b2-5920-4aa0-b847-06f6ad96c660_Basecall_1D_template (1811 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n13/40: f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template (4509 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n14/40: 9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template (4333 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n15/40: ac9e88d3-a34a-4471-afa0-a32482adae44_Basecall_1D_template (873 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n16/40: 1806bd87-3bc8-4c85-8ebb-9bfc69f6ab80_Basecall_1D_template (1754 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n17/40: d6240347-58c8-45c1-9fc6-c81f62e52627_Basecall_1D_template (424 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n18/40: a7b73a5b-e278-4c94-9ac9-cb3c3375de5c_Basecall_1D_template (15194 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n19/40: 062d408e-cb5f-4a8d-a64e-4c5195b7cb42_Basecall_1D_template (683 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n20/40: bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template (1421 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n21/40: cc236ee7-3730-4da5-9285-8b3fd7f4a891_Basecall_1D_template (2712 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n22/40: a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template (433 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n23/40: c4e8bab7-4a32-4e58-81f6-14e6aad83ecd_Basecall_1D_template (471 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n24/40: 2c2d8aa9-504b-4d7a-9ecf-05915b2019f4_Basecall_1D_template (2112 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n25/40: 9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template (4536 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n26/40: ebbcf643-de70-42e5-b191-636075c46300_Basecall_1D_template (1644 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n27/40: 771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template (4615 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n28/40: 598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template (4587 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n29/40: 92e47453-14cb-4eaa-a227-1fb13413ba87_Basecall_1D_template (7266 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n30/40: f5a2663c-bdb6-40ca-b515-5967b8203f05_Basecall_1D_template (756 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n31/40: 256f6d28-2c36-440a-b840-d41bedebcca7_Basecall_1D_template (107 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n32/40: 390d5a94-5dd8-48ed-8e3d-9abaedea15c9_Basecall_1D_template (593 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n33/40: 2126f8fe-6e3b-4785-bec0-0743133405d9_Basecall_1D_template (2838 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n34/40: 0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template (4286 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n35/40: 5b948563-86ae-4075-a648-43355c36cc84_Basecall_1D_template (18566 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n36/40: 3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template (4605 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n37/40: c302e6a4-a0c3-4d66-90f8-3fe9a031a6a3_Basecall_1D_template (31279 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n38/40: c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template (1148 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n39/40: 8c147c6e-6239-4933-9bb9-f9d5e6976103_Basecall_1D_template (1739 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n40/40: 054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template (4413 bp)\nminimap alignments:\nReference ranges:\n  None\nFinal alignments:\n  None\n\n\nRead alignment summary (2024-10-15 13:39:19)\nTotal read count:        40\nFully aligned reads:      0\nPartially aligned reads:  0\nUnaligned reads:         40\n570cfbe8-1011-441d-911f-d98dcc4472fc_Basecall_1D_template, b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template, 4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template, bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template, f5c07582-ccd5-4bd8-aa45-4ebb5011fc08_Basecall_1D_template, 517eff45-d956-49c2-826b-2c46d808ac0b_Basecall_1D_template, a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template, d5a76b7f-4807-466d-898b-57cc86dcd23b_Basecall_1D_template, 0a216098-91e8-4e7d-8a6e-f01787334e25_Basecall_1D_template, 01404034-9c48-4481-9a22-a3f8ca504f46_Basecall_1D_template, 91ad6660-073d-4cb5-8d63-d245dc68bc13_Basecall_1D_template, ac90d3b2-5920-4aa0-b847-06f6ad96c660_Basecall_1D_template, f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template, 9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template, ac9e88d3-a34a-4471-afa0-a32482adae44_Basecall_1D_template, 1806bd87-3bc8-4c85-8ebb-9bfc69f6ab80_Basecall_1D_template, d6240347-58c8-45c1-9fc6-c81f62e52627_Basecall_1D_template, a7b73a5b-e278-4c94-9ac9-cb3c3375de5c_Basecall_1D_template, 062d408e-cb5f-4a8d-a64e-4c5195b7cb42_Basecall_1D_template, bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template, cc236ee7-3730-4da5-9285-8b3fd7f4a891_Basecall_1D_template, a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template, c4e8bab7-4a32-4e58-81f6-14e6aad83ecd_Basecall_1D_template, 2c2d8aa9-504b-4d7a-9ecf-05915b2019f4_Basecall_1D_template, 9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template, ebbcf643-de70-42e5-b191-636075c46300_Basecall_1D_template, 771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template, 598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template, 92e47453-14cb-4eaa-a227-1fb13413ba87_Basecall_1D_template, f5a2663c-bdb6-40ca-b515-5967b8203f05_Basecall_1D_template, 256f6d28-2c36-440a-b840-d41bedebcca7_Basecall_1D_template, 390d5a94-5dd8-48ed-8e3d-9abaedea15c9_Basecall_1D_template, 2126f8fe-6e3b-4785-bec0-0743133405d9_Basecall_1D_template, 0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template, 5b948563-86ae-4075-a648-43355c36cc84_Basecall_1D_template, 3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template, c302e6a4-a0c3-4d66-90f8-3fe9a031a6a3_Basecall_1D_template, c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template, 8c147c6e-6239-4933-9bb9-f9d5e6976103_Basecall_1D_template, 054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\n\nTotal bases aligned:      0 bp\nMean alignment identity:  0.0%\n\nDeleting /galaxy/server/database/jobs_directory/000/168/working/read_alignment/\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2024-10-15 13:39:19)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2024-10-15 13:39:19)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\n\nCleaning up leftover segments (2024-10-15 13:39:19)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-10-15 13:39:19)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2024-10-15 13:39:19)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-10-15 13:39:28)\nSaving /galaxy/server/database/jobs_directory/000/168/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/168/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "10 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "10.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:39:28", "plugin": "core", "name": "end_epoch", "raw_value": "1728999568.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:39:18", "plugin": "core", "name": "start_epoch", "raw_value": "1728999558.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "unicycler/0.5.1+galaxy0-5", "has_data": true, "data": {"tool_id": "unicycler", "tool_version": "0.5.1+galaxy0", "test_index": 5, "time_seconds": 203.89448189735413, "inputs": {"paired_unpaired|fastq_input1": {"src": "hda", "id": "05f9770cede0bc37"}, "paired_unpaired|fastq_input2": {"src": "hda", "id": "05177eda452da0d6"}, "paired_unpaired|fastq_input_selector": "paired", "mode": "normal", "keep": "1"}, "job": {"model_class": "Job", "id": "67eafd9aa381ee3e", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:43:02.357998", "create_time": "2024-10-15T13:40:00.296317", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-t8cws", "command_line": "ln -s '/galaxy/server/database/objects/a/8/4/dataset_a847fe9c-7ef1-474f-aa84-9aa071d91a31.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/e/0/d/dataset_e0dcbf47-cbee-4213-a342-f543837f8bf8.dat' fq2.fastq && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 -1 'fq1.fastq' -2 'fq2.fastq' --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'  --keep 1 && mkdir 'spades_graphs' && mv 00*gfa './spades_graphs/'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "reuse": "[]", "keep": "\"1\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"no_simple_bridges\": false, \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "rotation": "{\"no_rotate\": false, \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": false, \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "long": null, "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 236, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 237, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}"}, "inputs": {"paired_unpaired|fastq_input1": {"id": "05f9770cede0bc37", "src": "hda", "uuid": "a847fe9c-7ef1-474f-aa84-9aa071d91a31"}, "paired_unpaired|fastq_input2": {"id": "05177eda452da0d6", "src": "hda", "uuid": "e0dcbf47-cbee-4213-a342-f543837f8bf8"}}, "outputs": {"assembly_graph": {"id": "1feb84cbc25dbf0d", "src": "hda", "uuid": "45a85c4d-c5d8-4647-b672-68c84e59168c"}, "assembly": {"id": "2e4b7d033cc90649", "src": "hda", "uuid": "c09a2f22-aa30-437b-8008-b361a30daa17"}, "__new_primary_file_spades_collection|001_spades_graph_k027__": {"id": "4e121fcaf8472380", "src": "hda", "uuid": "87abc37f-2abb-480d-9105-6e4bf0ae2e51"}, "__new_primary_file_spades_collection|001_spades_graph_k047__": {"id": "35031f617d5ef0df", "src": "hda", "uuid": "9cafedd0-02c4-4b53-b83f-3746d5588690"}, "__new_primary_file_spades_collection|001_spades_graph_k063__": {"id": "1de2a2056f6f6bd7", "src": "hda", "uuid": "ccaa1bfe-911a-4e21-a19f-0fce058709dc"}, "__new_primary_file_spades_collection|001_spades_graph_k077__": {"id": "ccbe16714562f871", "src": "hda", "uuid": "285f0eea-ff89-472d-9fff-f322079e0688"}, "__new_primary_file_spades_collection|001_spades_graph_k089__": {"id": "99dfc5bb47ae5bed", "src": "hda", "uuid": "81060160-a424-4792-989c-93477527ed0d"}, "__new_primary_file_spades_collection|001_spades_graph_k099__": {"id": "38138ae3cb057193", "src": "hda", "uuid": "39ec518e-a307-4e37-93f9-861bd1bbab46"}, "__new_primary_file_spades_collection|001_spades_graph_k107__": {"id": "ba09b76ebe7eda58", "src": "hda", "uuid": "5684e402-df9f-44df-b40b-de1a32daa023"}, "__new_primary_file_spades_collection|001_spades_graph_k115__": {"id": "48288d785a889565", "src": "hda", "uuid": "d58f39b0-a9e2-497e-b3f8-68097809a6bc"}, "__new_primary_file_spades_collection|001_spades_graph_k121__": {"id": "426c2a79be3d50a2", "src": "hda", "uuid": "fadef974-424b-478a-8cec-7a3857419f9a"}, "__new_primary_file_spades_collection|001_spades_graph_k127__": {"id": "899e382611195a1c", "src": "hda", "uuid": "04fb1c45-3add-4f4d-9743-1a253cc6b38f"}, "__new_primary_file_spades_collection|002_depth_filter__": {"id": "35fdb449501c3da5", "src": "hda", "uuid": "7e736380-948c-4bbf-813b-489fb76a95ff"}, "__new_primary_file_spades_collection|003_overlaps_removed__": {"id": "a1eafad0e7d82d4a", "src": "hda", "uuid": "cd81df5c-4e0c-46b3-a9ca-ad79abb5ba62"}, "__new_primary_file_spades_collection|004_bridges_applied__": {"id": "6205cf388a5b39ea", "src": "hda", "uuid": "b8b6030f-bc5e-45dc-87a4-38cbb0a4b5e5"}, "__new_primary_file_spades_collection|005_final_clean__": {"id": "bf2875c2c5293f15", "src": "hda", "uuid": "6e398177-4982-4ce5-b257-dfedbc5e8440"}}, "output_collections": {"spades_collection": {"id": "fc62fa186fb3ad7b", "src": "hdca"}}, "tool_stdout": "\nStarting Unicycler (2024-10-15 13:40:02)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 1\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/171/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status     Path                      \n  spades.py     4.0.0     good       /usr/local/bin/spades.py  \n  racon                   not used                             \n  makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good       /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2024-10-15 13:40:03)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2024-10-15 13:40:03)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/171/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/171/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/171/working/fq2.fastq -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/171/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/171/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/171/working/fq2.fastq -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.100+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/171/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/171/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/171/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/171/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/171/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.001     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/171/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.002     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.002     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.002     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.010     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.010     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.079    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.083    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.099    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.101    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.111    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.163     1M / 41M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.185     1M / 41M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.186     1M / 41M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.186     1M / 41M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.186     1M / 41M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.187     1M / 41M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.187     1M / 41M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.187     1M / 41M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.288     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:01.291     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.583     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.583     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:01.647     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:01.647     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:01.648     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:01.648     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:01.648     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:02.801  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:02.801  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:02.801     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:03.103     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:03.103     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:03.172     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:03.172     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:03.399     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:03.411     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:03.439     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:03.444     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:03.447     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:03.449     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:03.454     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:03.454     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:03.454     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:03.454     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:03.454     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:03.456     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:03.456     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:03.457     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:03.457     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:03.457     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:03.457     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:03.459     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:03.459     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:03.499     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:03.500     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:03.565     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:03.567     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:03.675     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:03.675     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:03.675     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:03.675     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:03.675     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:03.778     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:04.079     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:04.606     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:05.091     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:05.887     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:05.887     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:05.888     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:05.888     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:05.889     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:05.889     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:05.889     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:05.889     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:05.889     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:05.889     1M / 55M   INFO   StageManager             (stage.cpp                 : 189\n..\nmbly/K127/scaffolds.fasta\n  0:00:05.675     3M / 159M  INFO    General                 (contig_output_stage.cpp   : 107)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/scaffolds.paths\n  0:00:05.682     3M / 159M  INFO    General                 (contig_output_stage.cpp   : 114)   Populating GFA with scaffold paths\n  0:00:05.695     3M / 159M  INFO    General                 (pipeline.cpp              : 292)   SPAdes finished\n  0:00:05.696     1M / 159M  INFO    General                 (main.cpp                  : 131)   Assembling time: 0 hours 0 minutes 5 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished.\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/spades.log\nThank you for using SPAdes! If you use it in your research, please cite:\n  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.\n  doi.org/10.1002/cpbi.102\n\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k27 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k027_assembly_graph.gfa\n\nCleaning k47 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k047_assembly_graph.gfa\n\nCleaning k63 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k063_assembly_graph.gfa\n\nCleaning k77 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2024-10-15 13:42:42)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/\n\n\nDetermining graph multiplicity (2024-10-15 13:42:42)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/171/working/002_depth_filter.gfa\n\n\nCleaning graph (2024-10-15 13:42:42)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/171/working/003_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-10-15 13:42:42)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-10-15 13:42:42)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2024-10-15 13:42:42)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/171/working/004_bridges_applied.gfa\n\n\nCleaning up leftover segments (2024-10-15 13:42:42)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-10-15 13:42:42)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/171/working/005_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2024-10-15 13:42:42)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-10-15 13:42:51)\nSaving /galaxy/server/database/jobs_directory/000/171/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/171/working/assembly.fasta\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "\nStarting Unicycler (2024-10-15 13:40:02)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 1\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/171/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status     Path                      \n  spades.py     4.0.0     good       /usr/local/bin/spades.py  \n  racon                   not used                             \n  makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good       /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2024-10-15 13:40:03)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2024-10-15 13:40:03)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/171/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/171/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/171/working/fq2.fastq -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/171/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/171/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/171/working/fq2.fastq -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.100+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/171/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/171/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/171/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/171/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/171/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.001     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/171/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.002     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.002     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.002     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.010     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.010     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.079    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.083    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.099    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.101    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.111    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.163     1M / 41M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.185     1M / 41M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.186     1M / 41M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.186     1M / 41M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.186     1M / 41M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.187     1M / 41M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.187     1M / 41M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.187     1M / 41M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.288     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:01.291     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.583     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.583     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:01.647     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:01.647     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:01.648     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:01.648     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:01.648     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:02.801  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:02.801  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:02.801     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:03.103     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:03.103     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:03.172     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:03.172     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:03.399     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:03.411     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:03.439     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:03.444     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:03.447     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:03.449     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:03.454     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:03.454     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:03.454     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:03.454     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:03.454     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:03.456     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:03.456     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:03.457     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:03.457     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:03.457     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:03.457     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:03.459     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:03.459     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:03.499     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:03.500     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:03.565     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:03.567     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:03.675     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:03.675     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:03.675     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:03.675     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:03.675     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:03.778     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:04.079     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:04.606     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:05.091     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:05.887     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:05.887     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:05.888     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:05.888     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:05.889     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:05.889     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:05.889     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:05.889     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:05.889     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:05.889     1M / 55M   INFO   StageManager             (stage.cpp                 : 189\n..\nmbly/K127/scaffolds.fasta\n  0:00:05.675     3M / 159M  INFO    General                 (contig_output_stage.cpp   : 107)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/scaffolds.paths\n  0:00:05.682     3M / 159M  INFO    General                 (contig_output_stage.cpp   : 114)   Populating GFA with scaffold paths\n  0:00:05.695     3M / 159M  INFO    General                 (pipeline.cpp              : 292)   SPAdes finished\n  0:00:05.696     1M / 159M  INFO    General                 (main.cpp                  : 131)   Assembling time: 0 hours 0 minutes 5 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished.\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/spades.log\nThank you for using SPAdes! If you use it in your research, please cite:\n  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.\n  doi.org/10.1002/cpbi.102\n\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k27 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k027_assembly_graph.gfa\n\nCleaning k47 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k047_assembly_graph.gfa\n\nCleaning k63 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k063_assembly_graph.gfa\n\nCleaning k77 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2024-10-15 13:42:42)\nFilter by read depth        (2024-10-15 13:42:42)\nFilter homopolymer loops    (2024-10-15 13:42:42)\nMerge all possible          (2024-10-15 13:42:42)\nNormalise read depths       (2024-10-15 13:42:42)\nRemove zero length segments (2024-10-15 13:42:42)\nSort link order             (2024-10-15 13:42:42)\nGraph cleaning finished     (2024-10-15 13:42:42)\nSaving /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2024-10-15 13:42:42)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/171/working/spades_assembly/\n\n\nDetermining graph multiplicity (2024-10-15 13:42:42)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/171/working/002_depth_filter.gfa\n\n\nCleaning graph (2024-10-15 13:42:42)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/171/working/003_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-10-15 13:42:42)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-10-15 13:42:42)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2024-10-15 13:42:42)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/171/working/004_bridges_applied.gfa\n\n\nCleaning up leftover segments (2024-10-15 13:42:42)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-10-15 13:42:42)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/171/working/005_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2024-10-15 13:42:42)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-10-15 13:42:51)\nSaving /galaxy/server/database/jobs_directory/000/171/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/171/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 minutes", "plugin": "core", "name": "runtime_seconds", "raw_value": "169.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:42:51", "plugin": "core", "name": "end_epoch", "raw_value": "1728999771.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:40:02", "plugin": "core", "name": "start_epoch", "raw_value": "1728999602.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "unicycler/0.5.1+galaxy0-6", "has_data": true, "data": {"tool_id": "unicycler", "tool_version": "0.5.1+galaxy0", "test_index": 6, "time_seconds": 207.05930614471436, "inputs": {"paired_unpaired|fastq_input1": {"src": "hda", "id": "dce35b3f46523558"}, "paired_unpaired|fastq_input2": {"src": "hda", "id": "8a4698a53ac673ab"}, "paired_unpaired|fastq_input_selector": "paired", "long": {"src": "hda", "id": "0412b72c200ca56e"}, "mode": "normal", "keep": "2"}, "job": {"model_class": "Job", "id": "8b7e0a50dc24bf7f", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:46:27.914261", "create_time": "2024-10-15T13:43:28.390327", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-bht4d", "command_line": "ln -s '/galaxy/server/database/objects/7/2/f/dataset_72f9f305-6e5c-4949-a0b6-0d8e2e4e66a4.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/4/f/e/dataset_4fe06e0b-e137-4f31-802a-f6f2921f7a5d.dat' fq2.fastq && ln -s '/galaxy/server/database/objects/e/3/2/dataset_e329f86d-e777-4c71-8f3e-725783b30f35.dat' 'lr.fasta' && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 -1 'fq1.fastq' -2 'fq2.fastq' -l lr.fasta --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'  --keep 2 && mkdir 'spades_graphs' && mv 00*gfa './spades_graphs/' && samtools view -@ \"${GALAXY_SLOTS:-4}\" -u 'read_alignment/long_read_alignments.sam' | samtools sort -@ \"${GALAXY_SLOTS:-4}\" -o 'read_alignment/long_read_alignments.bam'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "reuse": "[]", "keep": "\"2\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"no_simple_bridges\": false, \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "rotation": "{\"no_rotate\": false, \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": false, \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 254, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 255, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}"}, "inputs": {"paired_unpaired|fastq_input1": {"id": "dce35b3f46523558", "src": "hda", "uuid": "72f9f305-6e5c-4949-a0b6-0d8e2e4e66a4"}, "paired_unpaired|fastq_input2": {"id": "8a4698a53ac673ab", "src": "hda", "uuid": "4fe06e0b-e137-4f31-802a-f6f2921f7a5d"}, "long": {"id": "0412b72c200ca56e", "src": "hda", "uuid": "e329f86d-e777-4c71-8f3e-725783b30f35"}}, "outputs": {"__new_primary_file_spades_collection|005_final_clean__": {"id": "61e6fbf92c37b954", "src": "hda", "uuid": "a2331264-9951-4eeb-9a0c-86841f8572d7"}, "__new_primary_file_spades_collection|004_bridges_applied__": {"id": "397e6308fccbffe9", "src": "hda", "uuid": "1fea9922-8c22-4e4c-a9a9-959a89a10668"}, "__new_primary_file_spades_collection|003_overlaps_removed__": {"id": "a187ed926495a03c", "src": "hda", "uuid": "9142656e-4d0c-4150-9d00-baa02d8fef4e"}, "__new_primary_file_spades_collection|002_depth_filter__": {"id": "72fecfc2779974fb", "src": "hda", "uuid": "06a80959-dfea-474a-97b0-8e8cec295b31"}, "__new_primary_file_spades_collection|001_spades_graph_k127__": {"id": "2dd800049c4d164e", "src": "hda", "uuid": "ab86e17f-61db-41a3-a9ca-c1de1a795db3"}, "__new_primary_file_spades_collection|001_spades_graph_k121__": {"id": "16adaaf054f7bb1a", "src": "hda", "uuid": "c37f224c-e9e9-42b7-986c-292ab63ffab5"}, "__new_primary_file_spades_collection|001_spades_graph_k115__": {"id": "78fa3c7bf322cf00", "src": "hda", "uuid": "792200b3-703c-4933-b90a-97c15088ef77"}, "__new_primary_file_spades_collection|001_spades_graph_k107__": {"id": "3cbc448545d7a968", "src": "hda", "uuid": "a3f91f32-8024-47b7-bda8-0ff35dc72546"}, "__new_primary_file_spades_collection|001_spades_graph_k099__": {"id": "07fd5e3890d0a261", "src": "hda", "uuid": "51d03ac2-95ca-4725-a06a-336964a8c643"}, "__new_primary_file_spades_collection|001_spades_graph_k089__": {"id": "6606ede53bb18dc8", "src": "hda", "uuid": "c2c5a3e6-8764-4488-9794-f67cba25832e"}, "__new_primary_file_spades_collection|001_spades_graph_k077__": {"id": "6778cfb18c518ebb", "src": "hda", "uuid": "9bd264cc-ff03-4155-889d-466cbc73f5f7"}, "__new_primary_file_spades_collection|001_spades_graph_k063__": {"id": "3ae9d3b1a7a703db", "src": "hda", "uuid": "4d091c31-c8c7-4916-a137-f4a6856280a7"}, "__new_primary_file_spades_collection|001_spades_graph_k047__": {"id": "022f90c7cfaf484d", "src": "hda", "uuid": "49da66cf-1803-4e4b-9496-e54301310ad6"}, "__new_primary_file_spades_collection|001_spades_graph_k027__": {"id": "2cc80d1e2cb1ae50", "src": "hda", "uuid": "7198cf9b-db81-4f84-b828-b2d0407d1ef6"}, "bam_file": {"id": "4cefb669aad3ca78", "src": "hda", "uuid": "7cf25da3-42d6-4a68-b21c-2f9c7460725c"}, "assembly": {"id": "8fc310b951e54657", "src": "hda", "uuid": "62781053-5ece-49dc-85c5-53d454185d41"}, "assembly_graph": {"id": "b8808674761d2aea", "src": "hda", "uuid": "b500c289-6a8e-4f0f-b7e9-febdbf2a19b2"}}, "output_collections": {"spades_collection": {"id": "24a90a8acf4bc8bd", "src": "hdca"}}, "tool_stdout": "\nStarting Unicycler (2024-10-15 13:43:31)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 2\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/175/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status   Path                      \n  spades.py     4.0.0     good     /usr/local/bin/spades.py  \n  racon         1.5.0     good     /usr/local/bin/racon      \n  makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good     /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2024-10-15 13:43:31)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2024-10-15 13:43:31)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/175/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/175/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/175/working/fq2.fastq -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/175/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/175/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/175/working/fq2.fastq -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.100+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/175/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/175/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/175/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/175/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/175/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/175/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.001     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.009     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.009     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.078    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.081    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.097    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.098    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.108    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.145     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.163     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.163     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.163     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.163     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.164     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.165     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.165     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.097     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:01.101     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.361     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.361     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:01.422     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:01.422     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:01.423     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:01.423     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:01.423     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:02.332  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:02.332  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:02.333     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:02.597     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:02.598     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.655     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:02.655     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:02.892     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:02.908     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:02.934     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:02.938     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:02.941     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:02.943     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:02.948     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:02.948     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:02.948     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:02.948     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:02.948     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:02.950     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:02.950     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:02.950     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:02.951     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:02.951     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:02.951     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:02.952     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:02.952     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.994     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:02.995     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:03.062     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:03.064     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:03.149     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:03.149     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:03.149     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:03.149     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:03.149     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:03.249     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:03.542     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:04.060     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:04.527     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:05.313     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:05.314     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:05.315     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:05.315     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:05.315     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:05.315     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:05.315     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:05.315     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:05.315     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:05.315     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE ==\n..\n   (2024-10-15 13:46:08)\nNormalise read depths       (2024-10-15 13:46:08)\nRemove zero length segments (2024-10-15 13:46:08)\nSort link order             (2024-10-15 13:46:08)\nGraph cleaning finished     (2024-10-15 13:46:08)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k063_assembly_graph.gfa\n\nCleaning k77 graph\nRepair multi way junctions  (2024-10-15 13:46:08)\nFilter by read depth        (2024-10-15 13:46:08)\nFilter homopolymer loops    (2024-10-15 13:46:08)\nMerge all possible          (2024-10-15 13:46:08)\nNormalise read depths       (2024-10-15 13:46:08)\nRemove zero length segments (2024-10-15 13:46:08)\nSort link order             (2024-10-15 13:46:08)\nGraph cleaning finished     (2024-10-15 13:46:08)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2024-10-15 13:46:08)\nFilter by read depth        (2024-10-15 13:46:08)\nFilter homopolymer loops    (2024-10-15 13:46:08)\nMerge all possible          (2024-10-15 13:46:08)\nNormalise read depths       (2024-10-15 13:46:08)\nRemove zero length segments (2024-10-15 13:46:08)\nSort link order             (2024-10-15 13:46:08)\nGraph cleaning finished     (2024-10-15 13:46:08)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2024-10-15 13:46:08)\nFilter by read depth        (2024-10-15 13:46:08)\nFilter homopolymer loops    (2024-10-15 13:46:08)\nMerge all possible          (2024-10-15 13:46:08)\nNormalise read depths       (2024-10-15 13:46:08)\nRemove zero length segments (2024-10-15 13:46:08)\nSort link order             (2024-10-15 13:46:08)\nGraph cleaning finished     (2024-10-15 13:46:08)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2024-10-15 13:46:08)\nFilter by read depth        (2024-10-15 13:46:08)\nFilter homopolymer loops    (2024-10-15 13:46:08)\nMerge all possible          (2024-10-15 13:46:08)\nNormalise read depths       (2024-10-15 13:46:08)\nRemove zero length segments (2024-10-15 13:46:08)\nSort link order             (2024-10-15 13:46:08)\nGraph cleaning finished     (2024-10-15 13:46:08)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2024-10-15 13:46:08)\nFilter by read depth        (2024-10-15 13:46:08)\nFilter homopolymer loops    (2024-10-15 13:46:08)\nMerge all possible          (2024-10-15 13:46:08)\nNormalise read depths       (2024-10-15 13:46:08)\nRemove zero length segments (2024-10-15 13:46:08)\nSort link order             (2024-10-15 13:46:08)\nGraph cleaning finished     (2024-10-15 13:46:08)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2024-10-15 13:46:08)\nFilter by read depth        (2024-10-15 13:46:08)\nFilter homopolymer loops    (2024-10-15 13:46:08)\nMerge all possible          (2024-10-15 13:46:08)\nNormalise read depths       (2024-10-15 13:46:08)\nRemove zero length segments (2024-10-15 13:46:08)\nSort link order             (2024-10-15 13:46:08)\nGraph cleaning finished     (2024-10-15 13:46:08)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2024-10-15 13:46:08)\nFilter by read depth        (2024-10-15 13:46:08)\nFilter homopolymer loops    (2024-10-15 13:46:08)\nMerge all possible          (2024-10-15 13:46:08)\nNormalise read depths       (2024-10-15 13:46:08)\nRemove zero length segments (2024-10-15 13:46:08)\nSort link order             (2024-10-15 13:46:08)\nGraph cleaning finished     (2024-10-15 13:46:08)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2024-10-15 13:46:08)\nFilter by read depth        (2024-10-15 13:46:08)\nFilter homopolymer loops    (2024-10-15 13:46:08)\nMerge all possible          (2024-10-15 13:46:08)\nNormalise read depths       (2024-10-15 13:46:08)\nRemove zero length segments (2024-10-15 13:46:08)\nSort link order             (2024-10-15 13:46:08)\nGraph cleaning finished     (2024-10-15 13:46:08)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2024-10-15 13:46:08)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/\n\n\nDetermining graph multiplicity (2024-10-15 13:46:08)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/175/working/002_depth_filter.gfa\n\n\nCleaning graph (2024-10-15 13:46:08)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/175/working/003_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-10-15 13:46:08)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-10-15 13:46:08)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2024-10-15 13:46:08)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2024-10-15 13:46:08)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/175/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/175/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2024-10-15 13:46:08)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/175/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times\n(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2024-10-15 13:46:08)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2024-10-15 13:46:08)\n1\t5386\t5\t5161\t+\t1\t5386\t229\t5385\t5156\t5156\t255\tcm:i:959\n1\t5386\t5168\t5384\t+\t1\t5386\t6\t222\t216\t216\t255\tcm:i:39\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2024-10-15 13:46:08)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5161,+,1,229,5385\n    5168,5384,+,1,6,222\nReference ranges:\n    1+: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 215 points, score=213.009259 (good)\n    line 2: 5153 points, score=5151.000388 (good)\nAll Seqan alignments (time to align = 0.057 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0      224        5162      5386       +        672        100.00   100.00%\n         1        224     5386           0      5162       +      15486        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1        224     5386           0      5162       +      15486        100.00   100.00%\n         1          0      224        5162      5386       +        672        100.00   100.00%\n\n\nRead alignment summary (2024-10-15 13:46:08)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2024-10-15 13:46:08)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2024-10-15 13:46:08)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/175/working/004_bridges_applied.gfa\n\n\nCleaning up leftover segments (2024-10-15 13:46:08)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-10-15 13:46:08)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/175/working/005_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2024-10-15 13:46:09)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-10-15 13:46:17)\nSaving /galaxy/server/database/jobs_directory/000/175/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/175/working/assembly.fasta\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "\nStarting Unicycler (2024-10-15 13:43:31)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 2\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/175/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status   Path                      \n  spades.py     4.0.0     good     /usr/local/bin/spades.py  \n  racon         1.5.0     good     /usr/local/bin/racon      \n  makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good     /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2024-10-15 13:43:31)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2024-10-15 13:43:31)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/175/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/175/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/175/working/fq2.fastq -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/175/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/175/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/175/working/fq2.fastq -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.100+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/175/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/175/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/175/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/175/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/175/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/175/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/175/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.001     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.009     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.009     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.078    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.081    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.097    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.098    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.108    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.145     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.163     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.163     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.163     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.163     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.164     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.165     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.165     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.097     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:01.101     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.361     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.361     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:01.422     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:01.422     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:01.423     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:01.423     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:01.423     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:02.332  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:02.332  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:02.333     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:02.597     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:02.598     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.655     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:02.655     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:02.892     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:02.908     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:02.934     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:02.938     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:02.941     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:02.943     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:02.948     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:02.948     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:02.948     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:02.948     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:02.948     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:02.950     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:02.950     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:02.950     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:02.951     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:02.951     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:02.951     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:02.952     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:02.952     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.994     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:02.995     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:03.062     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:03.064     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:03.149     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:03.149     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:03.149     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:03.149     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:03.149     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:03.249     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:03.542     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:04.060     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:04.527     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:05.313     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:05.314     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:05.315     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:05.315     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:05.315     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:05.315     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:05.315     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:05.315     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:05.315     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:05.315     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE ==\n..\n   (2024-10-15 13:46:08)\nNormalise read depths       (2024-10-15 13:46:08)\nRemove zero length segments (2024-10-15 13:46:08)\nSort link order             (2024-10-15 13:46:08)\nGraph cleaning finished     (2024-10-15 13:46:08)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k063_assembly_graph.gfa\n\nCleaning k77 graph\nRepair multi way junctions  (2024-10-15 13:46:08)\nFilter by read depth        (2024-10-15 13:46:08)\nFilter homopolymer loops    (2024-10-15 13:46:08)\nMerge all possible          (2024-10-15 13:46:08)\nNormalise read depths       (2024-10-15 13:46:08)\nRemove zero length segments (2024-10-15 13:46:08)\nSort link order             (2024-10-15 13:46:08)\nGraph cleaning finished     (2024-10-15 13:46:08)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2024-10-15 13:46:08)\nFilter by read depth        (2024-10-15 13:46:08)\nFilter homopolymer loops    (2024-10-15 13:46:08)\nMerge all possible          (2024-10-15 13:46:08)\nNormalise read depths       (2024-10-15 13:46:08)\nRemove zero length segments (2024-10-15 13:46:08)\nSort link order             (2024-10-15 13:46:08)\nGraph cleaning finished     (2024-10-15 13:46:08)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2024-10-15 13:46:08)\nFilter by read depth        (2024-10-15 13:46:08)\nFilter homopolymer loops    (2024-10-15 13:46:08)\nMerge all possible          (2024-10-15 13:46:08)\nNormalise read depths       (2024-10-15 13:46:08)\nRemove zero length segments (2024-10-15 13:46:08)\nSort link order             (2024-10-15 13:46:08)\nGraph cleaning finished     (2024-10-15 13:46:08)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2024-10-15 13:46:08)\nFilter by read depth        (2024-10-15 13:46:08)\nFilter homopolymer loops    (2024-10-15 13:46:08)\nMerge all possible          (2024-10-15 13:46:08)\nNormalise read depths       (2024-10-15 13:46:08)\nRemove zero length segments (2024-10-15 13:46:08)\nSort link order             (2024-10-15 13:46:08)\nGraph cleaning finished     (2024-10-15 13:46:08)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2024-10-15 13:46:08)\nFilter by read depth        (2024-10-15 13:46:08)\nFilter homopolymer loops    (2024-10-15 13:46:08)\nMerge all possible          (2024-10-15 13:46:08)\nNormalise read depths       (2024-10-15 13:46:08)\nRemove zero length segments (2024-10-15 13:46:08)\nSort link order             (2024-10-15 13:46:08)\nGraph cleaning finished     (2024-10-15 13:46:08)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2024-10-15 13:46:08)\nFilter by read depth        (2024-10-15 13:46:08)\nFilter homopolymer loops    (2024-10-15 13:46:08)\nMerge all possible          (2024-10-15 13:46:08)\nNormalise read depths       (2024-10-15 13:46:08)\nRemove zero length segments (2024-10-15 13:46:08)\nSort link order             (2024-10-15 13:46:08)\nGraph cleaning finished     (2024-10-15 13:46:08)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2024-10-15 13:46:08)\nFilter by read depth        (2024-10-15 13:46:08)\nFilter homopolymer loops    (2024-10-15 13:46:08)\nMerge all possible          (2024-10-15 13:46:08)\nNormalise read depths       (2024-10-15 13:46:08)\nRemove zero length segments (2024-10-15 13:46:08)\nSort link order             (2024-10-15 13:46:08)\nGraph cleaning finished     (2024-10-15 13:46:08)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2024-10-15 13:46:08)\nFilter by read depth        (2024-10-15 13:46:08)\nFilter homopolymer loops    (2024-10-15 13:46:08)\nMerge all possible          (2024-10-15 13:46:08)\nNormalise read depths       (2024-10-15 13:46:08)\nRemove zero length segments (2024-10-15 13:46:08)\nSort link order             (2024-10-15 13:46:08)\nGraph cleaning finished     (2024-10-15 13:46:08)\nSaving /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2024-10-15 13:46:08)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/175/working/spades_assembly/\n\n\nDetermining graph multiplicity (2024-10-15 13:46:08)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/175/working/002_depth_filter.gfa\n\n\nCleaning graph (2024-10-15 13:46:08)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/175/working/003_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-10-15 13:46:08)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-10-15 13:46:08)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2024-10-15 13:46:08)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2024-10-15 13:46:08)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/175/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/175/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2024-10-15 13:46:08)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/175/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times\n(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2024-10-15 13:46:08)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2024-10-15 13:46:08)\n1\t5386\t5\t5161\t+\t1\t5386\t229\t5385\t5156\t5156\t255\tcm:i:959\n1\t5386\t5168\t5384\t+\t1\t5386\t6\t222\t216\t216\t255\tcm:i:39\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2024-10-15 13:46:08)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5161,+,1,229,5385\n    5168,5384,+,1,6,222\nReference ranges:\n    1+: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 215 points, score=213.009259 (good)\n    line 2: 5153 points, score=5151.000388 (good)\nAll Seqan alignments (time to align = 0.057 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0      224        5162      5386       +        672        100.00   100.00%\n         1        224     5386           0      5162       +      15486        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1        224     5386           0      5162       +      15486        100.00   100.00%\n         1          0      224        5162      5386       +        672        100.00   100.00%\n\n\nRead alignment summary (2024-10-15 13:46:08)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2024-10-15 13:46:08)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2024-10-15 13:46:08)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/175/working/004_bridges_applied.gfa\n\n\nCleaning up leftover segments (2024-10-15 13:46:08)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-10-15 13:46:08)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/175/working/005_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2024-10-15 13:46:09)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-10-15 13:46:17)\nSaving /galaxy/server/database/jobs_directory/000/175/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/175/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 minutes", "plugin": "core", "name": "runtime_seconds", "raw_value": "168.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:46:18", "plugin": "core", "name": "end_epoch", "raw_value": "1728999978.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:43:30", "plugin": "core", "name": "start_epoch", "raw_value": "1728999810.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "unicycler/0.5.1+galaxy0-7", "has_data": true, "data": {"tool_id": "unicycler", "tool_version": "0.5.1+galaxy0", "test_index": 7, "time_seconds": 204.19973635673523, "inputs": {"paired_unpaired|fastq_input1": {"src": "hda", "id": "ba68fac9a85779fb"}, "paired_unpaired|fastq_input2": {"src": "hda", "id": "6e22862c0909b312"}, "paired_unpaired|fastq_input_selector": "paired", "long": {"src": "hda", "id": "d46ff64d46c56c5f"}, "mode": "normal", "lr_align|no_simple_bridges": true, "keep": "0"}, "job": {"model_class": "Job", "id": "98d52a5f18a6ad2f", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:49:54.818525", "create_time": "2024-10-15T13:46:55.582601", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-2fpx9", "command_line": "ln -s '/galaxy/server/database/objects/e/a/0/dataset_ea0ecefd-fd55-43d9-808d-4e5d5f4ea607.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/8/f/5/dataset_8f503431-73e0-4f0a-92cb-561f1cc873a9.dat' fq2.fastq && ln -s '/galaxy/server/database/objects/8/9/2/dataset_892c796e-a8f5-4256-b279-8bf4a4e91e07.dat' 'lr.fasta' && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 -1 'fq1.fastq' -2 'fq2.fastq' -l lr.fasta --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2' --no_simple_bridges --keep 0", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "reuse": "[]", "keep": "\"0\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"no_simple_bridges\": true, \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "rotation": "{\"no_rotate\": false, \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": false, \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 274, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 275, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}"}, "inputs": {"paired_unpaired|fastq_input1": {"id": "ba68fac9a85779fb", "src": "hda", "uuid": "ea0ecefd-fd55-43d9-808d-4e5d5f4ea607"}, "paired_unpaired|fastq_input2": {"id": "6e22862c0909b312", "src": "hda", "uuid": "8f503431-73e0-4f0a-92cb-561f1cc873a9"}, "long": {"id": "d46ff64d46c56c5f", "src": "hda", "uuid": "892c796e-a8f5-4256-b279-8bf4a4e91e07"}}, "outputs": {"assembly": {"id": "6f422f22a81e29cb", "src": "hda", "uuid": "4d9da4d0-1269-40b0-89fd-07fef723fe8e"}, "assembly_graph": {"id": "316e05ed81bf10fa", "src": "hda", "uuid": "b1c4ff35-d359-497c-b46d-e422e2cc89a1"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2024-10-15 13:46:57)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --no_simple_bridges --keep 0\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/179/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status   Path                      \n  spades.py     4.0.0     good     /usr/local/bin/spades.py  \n  racon         1.5.0     good     /usr/local/bin/racon      \n  makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good     /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2024-10-15 13:46:57)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2024-10-15 13:46:57)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/179/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/179/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/179/working/fq2.fastq -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/179/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/179/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/179/working/fq2.fastq -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.100+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/179/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/179/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/179/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/179/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/179/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/179/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/179/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.000     1M / 21M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/179/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.001     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.001     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.001     1M / 21M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.001     1M / 21M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.007     1M / 21M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.007     1M / 21M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.073    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.077    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.096    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.097    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.108    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.162     1M / 41M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.192     1M / 41M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.192     1M / 41M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.192     1M / 41M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.192     1M / 41M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.194     1M / 41M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.194     1M / 41M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.194     1M / 41M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.266     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:01.270     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.562     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.562     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:01.620     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:01.620     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:01.621     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:01.621     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:01.621     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:02.606  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:02.607  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:02.607     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:02.872     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:02.872     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.935     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:02.936     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:03.144     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:03.158     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:03.187     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:03.190     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:03.193     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:03.195     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:03.199     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:03.199     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:03.200     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:03.200     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:03.200     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:03.201     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:03.202     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:03.202     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:03.202     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:03.202     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:03.202     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:03.204     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:03.204     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:03.245     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:03.246     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:03.310     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:03.311     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:03.401     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:03.401     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:03.401     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:03.401     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:03.401     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:03.503     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:03.803     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:04.327     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:04.793     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:05.583     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:05.583     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:05.584     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:05.584     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:05.584     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:05.584     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:05.584     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:05.584     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:05.584     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:05.584     1M / 55M   INFO   StageManager             (stage.cpp              \n..\nength segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k027_assembly_graph.gfa\n\nCleaning k47 graph\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k047_assembly_graph.gfa\n\nCleaning k63 graph\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k063_assembly_graph.gfa\n\nCleaning k77 graph\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2024-10-15 13:49:36)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k027.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k047.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k063.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k077.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k089.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k099.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k107.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k115.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k121.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k127.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/\n\n\nDetermining graph multiplicity (2024-10-15 13:49:36)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\n\nCleaning graph (2024-10-15 13:49:36)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-10-15 13:49:36)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-10-15 13:49:36)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2024-10-15 13:49:36)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2024-10-15 13:49:36)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/179/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/179/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nDetermining low score threshold (2024-10-15 13:49:36)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2024-10-15 13:49:36)\n1\t5386\t5\t5161\t+\t1\t5386\t229\t5385\t5156\t5156\t255\tcm:i:959\n1\t5386\t5168\t5384\t+\t1\t5386\t6\t222\t216\t216\t255\tcm:i:39\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2024-10-15 13:49:36)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5161,+,1,229,5385\n    5168,5384,+,1,6,222\nReference ranges:\n    1+: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 215 points, score=213.009259 (good)\n    line 2: 5153 points, score=5151.000388 (good)\nAll Seqan alignments (time to align = 0.055 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0      224        5162      5386       +        672        100.00   100.00%\n         1        224     5386           0      5162       +      15486        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1        224     5386           0      5162       +      15486        100.00   100.00%\n         1          0      224        5162      5386       +        672        100.00   100.00%\n\n\nRead alignment summary (2024-10-15 13:49:36)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nDeleting /galaxy/server/database/jobs_directory/000/179/working/read_alignment/\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2024-10-15 13:49:36)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2024-10-15 13:49:36)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\n\nCleaning up leftover segments (2024-10-15 13:49:36)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-10-15 13:49:36)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2024-10-15 13:49:36)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-10-15 13:49:45)\nSaving /galaxy/server/database/jobs_directory/000/179/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/179/working/assembly.fasta\n\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "\nStarting Unicycler (2024-10-15 13:46:57)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --no_simple_bridges --keep 0\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/179/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status   Path                      \n  spades.py     4.0.0     good     /usr/local/bin/spades.py  \n  racon         1.5.0     good     /usr/local/bin/racon      \n  makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good     /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2024-10-15 13:46:57)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2024-10-15 13:46:57)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/179/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/179/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/179/working/fq2.fastq -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/179/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/179/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/179/working/fq2.fastq -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.100+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/179/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/179/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/179/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/179/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/179/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/179/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/179/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.000     1M / 21M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/179/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.000     1M / 21M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.001     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.001     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.001     1M / 21M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.001     1M / 21M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.007     1M / 21M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.007     1M / 21M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.073    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.077    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.096    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.097    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.108    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.162     1M / 41M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.192     1M / 41M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.192     1M / 41M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.192     1M / 41M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.192     1M / 41M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.194     1M / 41M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.194     1M / 41M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.194     1M / 41M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.266     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:01.270     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.562     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:01.562     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:01.620     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:01.620     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:01.621     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:01.621     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:01.621     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:02.606  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:02.607  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:02.607     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:02.872     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:02.872     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:02.935     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:02.936     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:03.144     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:03.158     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:03.187     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:03.190     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:03.193     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:03.195     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:03.199     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:03.199     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:03.200     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:03.200     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:03.200     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:03.201     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:03.202     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:03.202     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:03.202     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:03.202     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:03.202     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:03.204     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:03.204     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:03.245     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:03.246     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:03.310     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:03.311     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:03.401     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:03.401     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:03.401     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:03.401     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:03.401     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:03.503     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:03.803     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:04.327     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:04.793     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:05.583     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:05.583     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:05.584     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:05.584     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:05.584     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:05.584     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:05.584     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:05.584     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:05.584     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:05.584     1M / 55M   INFO   StageManager             (stage.cpp              \n..\nength segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k027_assembly_graph.gfa\n\nCleaning k47 graph\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k047_assembly_graph.gfa\n\nCleaning k63 graph\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k063_assembly_graph.gfa\n\nCleaning k77 graph\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2024-10-15 13:49:36)\nFilter by read depth        (2024-10-15 13:49:36)\nFilter homopolymer loops    (2024-10-15 13:49:36)\nMerge all possible          (2024-10-15 13:49:36)\nNormalise read depths       (2024-10-15 13:49:36)\nRemove zero length segments (2024-10-15 13:49:36)\nSort link order             (2024-10-15 13:49:36)\nGraph cleaning finished     (2024-10-15 13:49:36)\nSaving /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2024-10-15 13:49:36)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k027.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k047.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k063.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k077.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k089.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k099.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k107.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k115.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k121.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/001_spades_graph_k127.gfa\nDeleting /galaxy/server/database/jobs_directory/000/179/working/spades_assembly/\n\n\nDetermining graph multiplicity (2024-10-15 13:49:36)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\n\nCleaning graph (2024-10-15 13:49:36)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-10-15 13:49:36)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-10-15 13:49:36)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2024-10-15 13:49:36)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2024-10-15 13:49:36)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/179/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5158\t+\t1\t5386\t227\t5382\t5155\t5155\t255\tcm:i:1149\n1\t5386\t5163\t5383\t+\t1\t5386\t1\t221\t220\t220\t255\tcm:i:47\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/179/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nDetermining low score threshold (2024-10-15 13:49:36)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2024-10-15 13:49:36)\n1\t5386\t5\t5161\t+\t1\t5386\t229\t5385\t5156\t5156\t255\tcm:i:959\n1\t5386\t5168\t5384\t+\t1\t5386\t6\t222\t216\t216\t255\tcm:i:39\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2024-10-15 13:49:36)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5161,+,1,229,5385\n    5168,5384,+,1,6,222\nReference ranges:\n    1+: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 215 points, score=213.009259 (good)\n    line 2: 5153 points, score=5151.000388 (good)\nAll Seqan alignments (time to align = 0.055 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0      224        5162      5386       +        672        100.00   100.00%\n         1        224     5386           0      5162       +      15486        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1        224     5386           0      5162       +      15486        100.00   100.00%\n         1          0      224        5162      5386       +        672        100.00   100.00%\n\n\nRead alignment summary (2024-10-15 13:49:36)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nDeleting /galaxy/server/database/jobs_directory/000/179/working/read_alignment/\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2024-10-15 13:49:36)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2024-10-15 13:49:36)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\n\nCleaning up leftover segments (2024-10-15 13:49:36)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-10-15 13:49:36)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2024-10-15 13:49:36)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-10-15 13:49:45)\nSaving /galaxy/server/database/jobs_directory/000/179/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/179/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 minutes", "plugin": "core", "name": "runtime_seconds", "raw_value": "168.0000000"}, {"title": "Job End Time", "value": "2024-10-15 13:49:45", "plugin": "core", "name": "end_epoch", "raw_value": "1729000185.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:46:57", "plugin": "core", "name": "start_epoch", "raw_value": "1729000017.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "vcfgenotypes/1.0.0_rc3+galaxy0-0", "has_data": true, "data": {"tool_id": "vcfgenotypes", "tool_version": "1.0.0_rc3+galaxy0", "test_index": 0, "time_seconds": 34.463531494140625, "inputs": {"vcf_input": {"src": "hda", "id": "0f358afaa8193a8f"}}, "job": {"model_class": "Job", "id": "20bb8faeec0bbacb", "state": "ok", "exit_code": 0, "update_time": "2024-10-15T13:11:08.177796", "create_time": "2024-10-15T13:10:50.100731", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/vcfgenotypes/vcfgenotypes/1.0.0_rc3+galaxy0", "history_id": "e0b4a6d8c64e35cc", "external_id": "gxy-7mh2p", "command_line": "vcfgenotypes '/galaxy/server/database/objects/2/4/7/dataset_2472d385-e27e-4765-bf8e-61d83813feec.dat' > '/galaxy/server/database/objects/a/5/e/dataset_a5e7994a-4d43-4dc7-8acf-0280a401ce39.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"vcf_input": {"id": "0f358afaa8193a8f", "src": "hda", "uuid": "2472d385-e27e-4765-bf8e-61d83813feec"}}, "outputs": {"out_file1": {"id": "12351fd69d141b66", "src": "hda", "uuid": "a5e7994a-4d43-4dc7-8acf-0280a401ce39"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-10-15 13:10:57", "plugin": "core", "name": "end_epoch", "raw_value": "1728997857.0000000"}, {"title": "Job Start Time", "value": "2024-10-15 13:10:57", "plugin": "core", "name": "start_epoch", "raw_value": "1728997857.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}], "galaxy_url": "http://35.237.145.228:8000/galaxy/"}