{"version": "0.1", "suitename": "Galaxy Tool Tests", "results": {"total": 127, "errors": 0, "failures": 9, "skips": 3}, "tests": [{"id": "bcftools_csq/1.10-0", "has_data": true, "data": {"tool_id": "bcftools_csq", "tool_version": "1.10", "test_index": 0, "time_seconds": 67.13205623626709, "inputs": {"input_file": {"src": "hda", "id": "bebfc1239f46b3f3"}, "sec_required|reference_source|fasta_ref": {"src": "hda", "id": "907e003a8bbebfcc"}, "sec_required|reference_source|reference_source_selector": "history", "sec_required|gff_annot": {"src": "hda", "id": "59c29cefa9e8d294"}, "output_type": "v"}, "job": {"model_class": "Job", "id": "112607af1b592145", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:13:43.015905", "create_time": "2024-02-11T14:12:51.920673", "galaxy_version": "21.09", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_csq/bcftools_csq/1.10", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-wwvf2", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/7/5/9/dataset_75906bcd-8fdd-422e-9d87-4c41d614f558.dat' > input.vcf.gz && bcftools index input.vcf.gz &&     ln -s '/galaxy/server/database/objects/d/c/9/dataset_dc9985ee-d695-4bcb-858e-5e49e0b0112a.dat' ref.fa && samtools faidx ref.fa &&             bcftools csq   --fasta-ref ref.fa  --gff-annot '/galaxy/server/database/objects/b/2/a/dataset_b2a4e639-ee2e-4b1a-813d-4aa859f5c460.dat'  --ncsq 16                    --output-type 'v'    input.vcf.gz  > '/galaxy/server/database/objects/e/4/f/dataset_e4faef00-7b16-4ed4-a78f-8c1dfc1a9313.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_subset": "{\"invert_samples\": \"false\", \"invert_samples_file\": \"false\", \"samples\": \"\", \"samples_file\": null}", "sec_restrict": "{\"exclude\": null, \"include\": null, \"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}}", "sec_csq_opts": "{\"custom_tag\": \"\", \"local_csq\": \"false\", \"ncsq\": \"16\", \"phase\": null}", "sec_required": "{\"gff_annot\": {\"values\": [{\"id\": 305, \"src\": \"hda\"}]}, \"reference_source\": {\"__current_case__\": 1, \"fasta_ref\": {\"values\": [{\"id\": 304, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}}"}, "inputs": {"input_file": {"id": "bebfc1239f46b3f3", "src": "hda", "uuid": "75906bcd-8fdd-422e-9d87-4c41d614f558"}, "sec_required|fasta_ref": {"id": "907e003a8bbebfcc", "src": "hda", "uuid": "dc9985ee-d695-4bcb-858e-5e49e0b0112a"}, "gff_annot": {"id": "59c29cefa9e8d294", "src": "hda", "uuid": "b2a4e639-ee2e-4b1a-813d-4aa859f5c460"}}, "outputs": {"output_file": {"id": "0982f1f23f0ab432", "src": "hda", "uuid": "e4faef00-7b16-4ed4-a78f-8c1dfc1a9313"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Parsing /galaxy/server/database/objects/b/2/a/dataset_b2a4e639-ee2e-4b1a-813d-4aa859f5c460.dat ...\nIndexed 4 transcripts, 10 exons, 10 CDSs, 6 UTRs\nCalling...\n", "stderr": "\nParsing /galaxy/server/database/objects/b/2/a/dataset_b2a4e639-ee2e-4b1a-813d-4aa859f5c460.dat ...\nIndexed 4 transcripts, 10 exons, 10 CDSs, 6 UTRs\nCalling...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:13:33", "plugin": "core", "name": "end_epoch", "raw_value": "1707660813.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:13:32", "plugin": "core", "name": "start_epoch", "raw_value": "1707660812.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_csq/1.10-1", "has_data": true, "data": {"tool_id": "bcftools_csq", "tool_version": "1.10", "test_index": 1, "status": "skip"}}, {"id": "bcftools_plugin_mendelian/1.10-0", "has_data": true, "data": {"tool_id": "bcftools_plugin_mendelian", "tool_version": "1.10", "test_index": 0, "time_seconds": 62.5586678981781, "inputs": {"input_file": {"src": "hda", "id": "528bc19f29058261"}, "sec_plugin|trios|mother": "NA00001", "sec_plugin|trios|father": "NA00002", "sec_plugin|trios|child": "NA00006", "sec_plugin|trios|trios_src": "trio", "sec_plugin|mode": "delete", "output_type": "v"}, "job": {"model_class": "Job", "id": "255a9c377b9544fd", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:11:38.463970", "create_time": "2024-02-11T14:10:46.533962", "galaxy_version": "21.09", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_plugin_mendelian/bcftools_plugin_mendelian/1.10", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-9s9dw", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/0/3/7/dataset_0378c254-5d5c-4ce9-bc51-1fad06d61de6.dat' > input.vcf.gz && bcftools index input.vcf.gz &&            bcftools plugin mendelian                --output-type 'v'    input.vcf.gz   --trio \"NA00001,NA00002,NA00006\" --delete 2> tmp_stderr > '/galaxy/server/database/objects/5/f/e/dataset_5fe35152-7ca9-4fd0-93fa-fa63438573ae.dat' && cat tmp_stderr", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_plugin": "{\"mode\": \"delete\", \"trios\": {\"__current_case__\": 0, \"child\": \"NA00006\", \"father\": \"NA00002\", \"mother\": \"NA00001\", \"trios_src\": \"trio\"}}", "sec_restrict": "{\"exclude\": null, \"include\": null, \"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}}"}, "inputs": {"input_file": {"id": "528bc19f29058261", "src": "hda", "uuid": "0378c254-5d5c-4ce9-bc51-1fad06d61de6"}}, "outputs": {"output_file": {"id": "d43060d6b716a85a", "src": "hda", "uuid": "5fe35152-7ca9-4fd0-93fa-fa63438573ae"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "# [1]nOK\t[2]nBad\t[3]nSkipped\t[4]Trio (mother,father,child)\n20\t13\t0\tNA00001,NA00002,NA00006\n", "job_stderr": "", "stderr": "", "stdout": "\n# [1]nOK\t[2]nBad\t[3]nSkipped\t[4]Trio (mother,father,child)\n20\t13\t0\tNA00001,NA00002,NA00006\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 14:11:28", "plugin": "core", "name": "end_epoch", "raw_value": "1707660688.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:11:28", "plugin": "core", "name": "start_epoch", "raw_value": "1707660688.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_plugin_mendelian/1.10-1", "has_data": true, "data": {"tool_id": "bcftools_plugin_mendelian", "tool_version": "1.10", "test_index": 1, "time_seconds": 56.23177433013916, "inputs": {"input_file": {"src": "hda", "id": "5f9d1ac919a829a2"}, "sec_plugin|trios|mother": "NA00001", "sec_plugin|trios|father": "NA00002", "sec_plugin|trios|child": "NA00006", "sec_plugin|trios|trios_src": "trio", "sec_plugin|mode": "x", "output_type": "v"}, "job": {"model_class": "Job", "id": "7883d5256f92af26", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:12:34.529141", "create_time": "2024-02-11T14:11:49.097339", "galaxy_version": "21.09", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_plugin_mendelian/bcftools_plugin_mendelian/1.10", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-xnqb6", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/0/0/1/dataset_0019fd28-5167-48e9-9884-2b61b2ddca5f.dat' > input.vcf.gz && bcftools index input.vcf.gz &&            bcftools plugin mendelian                --output-type 'v'    input.vcf.gz   --trio \"NA00001,NA00002,NA00006\" --list x 2> tmp_stderr > '/galaxy/server/database/objects/2/4/2/dataset_2426bb3a-3bd6-4cb0-9ce5-f2eb43e4fc71.dat' && cat tmp_stderr", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_plugin": "{\"mode\": \"x\", \"trios\": {\"__current_case__\": 0, \"child\": \"NA00006\", \"father\": \"NA00002\", \"mother\": \"NA00001\", \"trios_src\": \"trio\"}}", "sec_restrict": "{\"exclude\": null, \"include\": null, \"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}}"}, "inputs": {"input_file": {"id": "5f9d1ac919a829a2", "src": "hda", "uuid": "0019fd28-5167-48e9-9884-2b61b2ddca5f"}}, "outputs": {"output_file": {"id": "a0bc466e5fb3f486", "src": "hda", "uuid": "2426bb3a-3bd6-4cb0-9ce5-f2eb43e4fc71"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "# [1]nOK\t[2]nBad\t[3]nSkipped\t[4]Trio (mother,father,child)\n20\t13\t0\tNA00001,NA00002,NA00006\n", "job_stderr": "", "stderr": "", "stdout": "\n# [1]nOK\t[2]nBad\t[3]nSkipped\t[4]Trio (mother,father,child)\n20\t13\t0\tNA00001,NA00002,NA00006\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 14:12:26", "plugin": "core", "name": "end_epoch", "raw_value": "1707660746.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:12:26", "plugin": "core", "name": "start_epoch", "raw_value": "1707660746.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bowtie2/2.4.2+galaxy0-0", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 0, "time_seconds": 71.09856152534485, "inputs": {"library|input_1": {"src": "hda", "id": "78ed26a23dd838d6"}, "library|input_2": {"src": "hda", "id": "e0ee1cc68dc6945e"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "eaa34838a7be61ec"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "633a095b9440c616", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:21:56.156429", "create_time": "2024-02-11T14:21:01.015985", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-99ct5", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/0/a/6/dataset_0a67bbee-c41c-4b9e-b4d4-807b05a47b9a.dat' genome && ln -s -f '/galaxy/server/database/objects/0/a/6/dataset_0a67bbee-c41c-4b9e-b4d4-807b05a47b9a.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/4/2/0/dataset_42055295-b815-4744-8131-9d5ede0a6d31.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/a/b/9/dataset_ab97d61b-0773-4ff8-83f3-a3d086b97d71.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/1/8/6/dataset_186fd0a7-daa6-44ef-b3dd-4c281874427f.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 322, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 320, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 321, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "78ed26a23dd838d6", "src": "hda", "uuid": "42055295-b815-4744-8131-9d5ede0a6d31"}, "input_2": {"id": "e0ee1cc68dc6945e", "src": "hda", "uuid": "ab97d61b-0773-4ff8-83f3-a3d086b97d71"}, "own_file": {"id": "eaa34838a7be61ec", "src": "hda", "uuid": "0a67bbee-c41c-4b9e-b4d4-807b05a47b9a"}}, "outputs": {"output": {"id": "880a9f7fe02f5b7f", "src": "hda", "uuid": "186fd0a7-daa6-44ef-b3dd-4c281874427f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/0/a/6/dataset_0a67bbee-c41c-4b9e-b4d4-807b05a47b9a.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\nGetting block 3 of 30\n  bucket 2: 20%\n  bucket 1: 30%\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  bucket 2: 30%\n  bucket 1: 40%\n  Calculating Z arrays for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 1: 50%\n  bucket 2: 40%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 4: 20%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 2: 90%\n  bucket 4: 50%\n  bucket 3: 40%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 3: 70%\n  bucket 4: 90%\n  bucket 3: 80%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\nGetting block 7 of 30\n  bucket 5: 30%\n  bucket 6: 20%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 40%\n  bucket 6: 30%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 50%\n  bucket 7: 10%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 7: 20%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 7: 30%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 7: 40%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 6: 90%\n  bucket 7: 80%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 30\n  bucket 9: 30%\n  Reserving size (777) for bucket 10\nGetting block 11 of 30\n  Calculating Z arrays for bucket 10\n  bucket 9: 40%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 50%\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 9: 60%\n  bucket 10: 20%\n  bucket 11: 20%\n  bucket 9: 70%\n  bucket 10: 30%\n  bucket 11: 30%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 11: 40%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 11: 60%\n  bucket 10: 90%\n  bucket 11: 70%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 80%\n  bucket 11: 90%\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Entering block accumulator loop for bucket 13:\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Entering block accumulator loop for bucket 15:\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 16: 10%\n  bucket 15: 30%\n  bucket 16: 20%\n  bucket 15: 40%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 16: 50%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 16: 60%\n  bucket 15: 90%\n  bucket 16: 70%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 16: 90%\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 10%\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\nGetting block 29 of 30\n  bucket 28: 80%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 90%\n  bucket 29: 10%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 2: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\n  bucket 5: 20%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 7\nGetting block 8 of 30\n  Calculating Z arrays for bucket 7\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 5: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 50%\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 7: 40%\n  bucket 6: 60%\n  bucket 8: 30%\n  bucket 5: 80%\n  bucket 7: 50%\n  bucket 6: 70%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 7: 70%\n  bucket 6: 90%\n  bucket 8: 50%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  bucket 10: 10%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 9: 60%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 30\n  bucket 13: 20%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 30%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 40%\n  bucket 14: 10%\n  bucket 13: 50%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 30\n  Entering block accumulator loop for bucket 20:\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 21: 50%\n  bucket 20: 80%\n  bucket 21: 60%\n  bucket 20: 90%\n  bucket 21: 70%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  bucket 22: 10%\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 22: 40%\n  bucket 23: 30%\n  bucket 22: 50%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  bucket 23: 90%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\nGetting block 25 of 30\n  bucket 24: 20%\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 25: 10%\n  bucket 24: 50%\n  bucket 25: 20%\n  bucket 24: 60%\n  bucket 25: 30%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 25: 40%\n  bucket 24: 90%\n  bucket 24: 100%\n  bucket 25: 50%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\nGetting block 27 of 30\n  bucket 26: 30%\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 27: 30%\n  bucket 26: 70%\n  bucket 27: 40%\n  bucket 26: 80%\n  bucket 27: 50%\n  bucket 26: 90%\n  bucket 27: 60%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\nGetting block 29 of 30\n  bucket 28: 20%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 29: 10%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 28: 80%\n  bucket 29: 60%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/0/a/6/dataset_0a67bbee-c41c-4b9e-b4d4-807b05a47b9a.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\nGetting block 3 of 30\n  bucket 2: 20%\n  bucket 1: 30%\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  bucket 2: 30%\n  bucket 1: 40%\n  Calculating Z arrays for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 1: 50%\n  bucket 2: 40%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 4: 20%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 2: 90%\n  bucket 4: 50%\n  bucket 3: 40%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 3: 70%\n  bucket 4: 90%\n  bucket 3: 80%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\nGetting block 7 of 30\n  bucket 5: 30%\n  bucket 6: 20%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 40%\n  bucket 6: 30%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 50%\n  bucket 7: 10%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 7: 20%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 7: 30%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 7: 40%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 6: 90%\n  bucket 7: 80%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 30\n  bucket 9: 30%\n  Reserving size (777) for bucket 10\nGetting block 11 of 30\n  Calculating Z arrays for bucket 10\n  bucket 9: 40%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 50%\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 9: 60%\n  bucket 10: 20%\n  bucket 11: 20%\n  bucket 9: 70%\n  bucket 10: 30%\n  bucket 11: 30%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 11: 40%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 11: 60%\n  bucket 10: 90%\n  bucket 11: 70%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 80%\n  bucket 11: 90%\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Entering block accumulator loop for bucket 13:\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Entering block accumulator loop for bucket 15:\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 16: 10%\n  bucket 15: 30%\n  bucket 16: 20%\n  bucket 15: 40%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 16: 50%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 16: 60%\n  bucket 15: 90%\n  bucket 16: 70%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 16: 90%\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 30\n  Entering block accumulator loop for bucket 17:\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 10%\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\nGetting block 29 of 30\n  bucket 28: 80%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 90%\n  bucket 29: 10%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 2: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\n  bucket 5: 20%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 7\nGetting block 8 of 30\n  Calculating Z arrays for bucket 7\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 5: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 50%\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 7: 40%\n  bucket 6: 60%\n  bucket 8: 30%\n  bucket 5: 80%\n  bucket 7: 50%\n  bucket 6: 70%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 7: 70%\n  bucket 6: 90%\n  bucket 8: 50%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  bucket 10: 10%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 9: 60%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 30\n  bucket 13: 20%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 30%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 40%\n  bucket 14: 10%\n  bucket 13: 50%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 30\n  Entering block accumulator loop for bucket 20:\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 21: 50%\n  bucket 20: 80%\n  bucket 21: 60%\n  bucket 20: 90%\n  bucket 21: 70%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  bucket 22: 10%\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 22: 40%\n  bucket 23: 30%\n  bucket 22: 50%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  bucket 23: 90%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\nGetting block 25 of 30\n  bucket 24: 20%\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 25: 10%\n  bucket 24: 50%\n  bucket 25: 20%\n  bucket 24: 60%\n  bucket 25: 30%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 25: 40%\n  bucket 24: 90%\n  bucket 24: 100%\n  bucket 25: 50%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\nGetting block 27 of 30\n  bucket 26: 30%\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 27: 30%\n  bucket 26: 70%\n  bucket 27: 40%\n  bucket 26: 80%\n  bucket 27: 50%\n  bucket 26: 90%\n  bucket 27: 60%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\nGetting block 29 of 30\n  bucket 28: 20%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 29: 10%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 28: 80%\n  bucket 29: 60%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:21:45", "plugin": "core", "name": "end_epoch", "raw_value": "1707661305.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:21:44", "plugin": "core", "name": "start_epoch", "raw_value": "1707661304.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_s4c6jxof.sam v. /tmp/history_bam_converted_to_sam_zw3_83l_.sam )\n--- local_file\n+++ history_data\n@@ -1,29 +1,30 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/233/tmp -O bam -o /galaxy/server/database/objects/1/8/6/dataset_186fd0a7-daa6-44ef-b3dd-4c281874427f.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1106:6455:17124\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBAAFABDBBFGGGGGGGGGGHHHGHHGHHHHHHHHHGHHGHHGHHHGHGGGEGHHHHHHHHHHHHHGHHHGHHHGGHGGHHHHHHHHHHHHHHHHHHGHHHHHHHHGHHHHHGGCFEHHHGFHHHHGHHFFH?GGHHHHGHGHGHHCFGGGGGGGFFFFFFFFFFFFFFFFFFFFADFA?.FEFAFFFEFFFFFFFFFFFFDABFBBFFFFFFFFEFFBFFFFFFFFFFF/FFBFFFFFFADE>BFFF9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1110:12808:18367\t161\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACAGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTT\tABCCCCDDDFFFGGGGGGGGGGHHHHHHHHHGGGGGGHHHHFHHGHHHHHHHHHHHHHGHHHGGHHHH3GFHEFHHHHHGHHGFHHHHHFGHHHHHGHGHGGHGGGGGGGHHHGGCGGGGHHGGGGGGGGGGGGGGGGGGGF-BAEFEBEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFAFEFDFFFFFFFFFF0BFBED=@DFFFFFFFFFEFFFFFBFAFB;0:;F0\tAS:i:-137\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T30G38A140A0A1\tYS:i:-138\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1110:16559:7507\t163\tchrM\t1\t23\t3M35I213M\t=\t1\t251\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAAT\t>AABBCCCCFFFGGGGGGGGGGHHHHHHHHHGGHGGHGHFHHHHFHHHHHHHHHHFHHGHHHHGHHHHHGGEEGHHHHHHHHHHHHHHHHHHHHHHGHGHGHHGGGGGGGHHGGGFGAGFGGGGGGGGGGGDDDFAGGFFFFCFAFEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFE..@BFFBD./;:0FFFFF09B/AFCA=-99BFFBFFFFFFFB:BFBFFBFB9:\tAS:i:-125\tXN:i:0\tXM:i:3\tXO:i:1\tXG:i:35\tNM:i:38\tMD:Z:1A0T69A143\tYS:i:-8\tYT:Z:CP\n********\n*SNIP *\n********\n@@ -179,6 +162,24 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11310:21761\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTT\tCCCCBFFFFFFFGGGGGGGGGGGHHHHHHHHHHHHGHHHHHGGGGGHHHHHGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHGHHHGHHHGHGHHGHHHHGGHGGG=FFGEHHHHHGHFGGHHGHHHHHFHHHHHHHGGHHHHHHHGHEHHGHHHHHGGGGF9AGE?DEGFFGGGGGGGGGGGGGGFFFF/9FFBFFFFFFFEFFFBFFFFFFFFFFFFEFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11310:21761\t141\t*\t0\t0\t*\t*\t0\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCTCC\tBCCCCFCCCCCCGGGGGGGGGGHHHHHHHHGGGGGHHHHHHHHGHHHHHHHHHGHHHHHHHHGHHHHHHHHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHGHHHDGHHHHHHHHHHHHHHHHHGHHHHHGGGGGGHHHHHGHHHHHHHHFFHHHHHCCAHFHHGGFFFFFFFFFAA;BDDFFFF00.-=D.ABDA-.::AAF;F@.AAD./0000.9-;.9:00009:F090;FF000900;\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11578:14676\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTC\tCDDDDFFFBFFCGGGGGGGGGGHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHGGGGGHHHHFGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGHHHHGGGGGGHGGHGHHHHHHH;CHHHHHHHHHHHHHHHGHGGGGFGGGFGGGGGGGGGGGGFGGGEGGFFFFFFFFFFFFFFFFFFFFFFFFF/FFFFFFFFFFFFFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11578:14676\t141\t*\t0\t0\t*\t*\t0\t0\tGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGT\tCCBCCCBBCCCCGGGGGGGGGGHGGGGGHHHHHHHGHHHHGHHHHHFFFGGHGHHHHHHHHHHHHHHHHFGHHHHHHHGHHGHFHFGHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHDGGCGHHHHHHHHHHHHHFF<GGHHHHGFGHGEHGGA=A=DFFFFAFAFF?FFFFFFFFFADFAAD;FFFA:BBBAE.A.EBFFFFEF-..0BFFF9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:13575:19255\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGTTCCCGTGAGTGGTTAATAGGGTGATAGGCCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tAA1A1DFFFFFBGG3A111FFAEGDDBGFDHF00F01BBA00BFGEHFBFFA1FABB0FAE?CFHF1BGFHFB0011F121E//>>1F10>B?EFHGCC/?/BFG/EEGFFEE//BCFDE0?E@@B/?11</?//<@?/F<<<A-<FBGH0.00=G0<<C//./0;;GC....<C.=.00;;BB./:.900////.C000;0090;..//000;C/;;/B/9BA9A9-AEEFF?B---;B99//9/;A//9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:13575:19255\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTGGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTAACTATTACAG\tAA>>ABFDCFFFFFDGFGFDGDEG1EGEFFBFHFGHA0E00A0CAAC0FFDFFAGHFEHHFDH/EAFCFFHACGHHAFFEF2DFFG/FGHHHHGHGH0C@/E@GGC0FG10>GGFGHHGHFFBGFGB2>F<EEF0@C@9:AAF00;9@-9.;FBBBBB->@;-A@FF<-;---@-;-----;-BFF/;---9//BBFFFF//B;FF///9BF///;/;B/BBFBFFBB/;-9--///;9/:-;BFFBBB9F\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:17564:15723\t77\t*\t0\t0\t*\t*\t0\t0\tTATGCTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAA\tEDCCDFFCEEDCGGGGGGGGGGHHHHHGFGHGGHGGHHHHHHHHGHHEHHGGGGGHHHHHHHHHGHHHGHHHHGGGGGHHHHFFGHHHGGGGGGHHHGGGGGHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHFEHHHHHHHHHHGHHGHGGHGGGCGGGGHHH1FGGGFGGFGGGGGGGGGGEFGGGGGGGGGGGGGGGGGFFFFFFFFFFAEFFFFFFFFFFBBFBBFFFFFE1:BFFB0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:17564:15723\t141\t*\t0\t0\t*\t*\t0\t0\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCCCCCCCCFFFGGGGGGGGGGHHHHGHHGHHHHHHGHHHHHHFHHHHGGGGHHGHFHHHHHHHFHHHHHHHGHGGHGGHGHHHHFHFHHGHHHHHHHHHHHHHEHGHHHHHGGGGGHHHHGEHHGHHHHHHGHFGHFHGGAHGGHGGGCCBDFGFFAFDBDDFFFFFBDA;AAD-ADC?AFEFB-@@AAEFEFFFFF..-:.B0:FFFFFFEF0BFF09FF.0;9BFFFFF0BFFFFFF?.::-909;.9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:18108:12091\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACAC\tCCCCCFBFFFFFGGGGGGGGGGHHHHHHHHHHHHHGGGGGGFHHHBFGHHHGGGGGGHHGGGGGHHGFGGHHHHHHGGGGGGHGHFGGGGGGDGEGEFGCHHHHHHHHHHGHHHHGEDHHHGGGCDGGGGFHFHGHHHGHHGHFGHHHFHHGFHHHFHHGGHFHFHHGB0CGHGFHCBGGGGEDEE9ADFEFFFGFBFGFFGGFFFFFGGFGFFFFFFFF/A?FEFFFFFEF-A.B//;BFFEF//BB///\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:18108:12091\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\tCBBCCFCCCCCFGGGGGGGGGGHHGHHHHFHHHHHHFHGHHHHFHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHGHHHHGHFHGHHGHHHHHHGHHHHHHGHHHHHGGGGGHHHHHHHHGHHHHHGFGHHHHHGHDHGHHGCA;?AAFGFEFDFFF.FFFFEBDFFFFFFFFBFFFFFFFFFEFEFFFEFFFFFFF.:BFFF0BFFFFFFFFFFFF;0FF0;BFFFFFFFFBFFFBFEFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTT\tABBBBFFFFFFFGGGGGGGGGGHHGHGHHHGHHHFGHGFGHFEHGGHGGHHHGHHHHFGHGGFGFFHHFHHHHEGHFHHHHHFGGGGGHGGGHGFHGHGGGGGGHHHGGGGHHGGGGHHHGGHGGGGGGHHHHGGGGGCFHGGGCDGHGHHHFHEHHHHHHHHHEEFHHGG:C:?0<EFGBFGGGGGFE.BFGEFFFGFFGGGGGGFDEF/FFGFFFFFFF;BBFA;.:EFFE:AAFEF.BFFFFF;9FF.\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tBBBBAFFFFFFFGGGGGGGFGGHHHHHHHHFHHHFHHHHGHHHHHHHHGHHHGHHEGHHHGDGCHHHHHHHHHGEHEHHHHHHHFHGGEGGHHHHHHHGEGHGHHDHHHHHHHHEHFHGHGHHHGEGCEHHFHHHGHHHHHHHF?GHHHFEFFAFFHHGG?;@DDFFB?@B;BDAFFFEBBD>D>D9@DDCFFFFFFCFDFE.AA;/BB/.;-.;BFBBBFFBFFFFFFF/9FF?/;/BBFFFFF/;FFB/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\t3>>A@FFFFFFFGGGFEECFGGFFB5GBHH5DFH5GBEEAEFHFHHF3F3GHFHHHEF3GAEHBGFHFFEFFHHHHFFB31FGGEGFHGEHHHHHHHHHHHHHHHHHEEEEGHHHFFF3GF3FGF44BBGEHHHHGG2B/BGGHE</ECDFHHBF1DGBFBFGFH<1GHGDGGFDFE0/<--;-9./BBED;BFBD/BF9BFFFDBFDADD;FFF?->;B=.9.;.BBFFF..;A;/B/;B//;;//BBF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tBBCCCFFFCBCCGGGGGGGGGGHGHGHHGFGFGFHGGHHGHHHHHHHHFHHGGGGAGFBGHHHFBBGH5GDHH5EEEGEHEGFBF1DGFDGFGGGBBCEEGEHFEFDDHFBFHFD/@BGDGDHHGDCCFCD/C<->.ADDGE1GA<DBGFGHBG/..DGFCDGD.:0:.;CFGHEHBF.A-99CFGGFF0C0C0BF0;CA9/B:///;//BF/9B9?-..:;.;9.9A././;B//F.B?A////9;:/:/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tA>ABAFA?D@AFGGGGFGGGFGFHHHFFH4BCBGHHHHGFFF3G5BF3322EEAFHHHHHHAB5GHFHEHFHHH3BEEHFGF5@13FDF3GDGFHHFGHHHGHHHGFGGHHFCG//?/EGHHHG3F4BFFGHHHEDGFHHB/B/?FBF<@-9?BDEFFF?B--?DFFFB9FA>B;A.BFDB?AB.--@;-.FFAEFFFF9AE;DDFFFFB/9BFFFFFFFB:BF/BB/BFF//FFF-=--.99=--.9///\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tAAAAAFFFFFFFGGGGGGFGGGHHGGHHHGGGGGGHGHGDFGHFGGGGFHHHHHGGGGGGGGFHGDFGGGGHGG?@EFHGEFEHEGFHHHHHF2FEHHGHGDCEAD?GFDFGGHBGHHFEHHHHHHHHHDFGHGHHGBDFG0FFHFGGFHHH=GGBF-AACEHEHHGGGHHHGHHFHCCFEBB0FFFFFF/;0;;FFFBFE.AA0BF0??-AD/////;:BFFBFFBBBFFFFFB/.9ADDAD-D;-;=A-\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\t@?AAAFFBFBFFFGGFGFGGGEFCGGHHHHFGHGHFHGHHHHGGFGGFGHHGHGHHHHGHGFFHHGGGGGHHHHHHHHHBFHHEFHHHHHHGF?FAGHGFHHHGDGFHHGGGHGHFHHHGHHHGHHFHHGFFGFHHHGHHHHFFHHHHH/FGHHHHGHGHG<C???B=@ABBFEF@=-AFFFFFFBFAFFDFFFFA?AFFCFFABEFFFFFFFFF?FFFDFFBFF;FFEFFEFFFFFFFAF///9FF/BB/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tBBBBBFFFFFFFEGGGGGGGGGGHHHHHHHHGHGGHHHHGFGGG?HGGHHHHHHHGGHGFGHGEEGFHHHHHHHHHHHFHHFHHGGCGGGHHHHBFGFFHGGGEFGHHGFFEEFHGGDGEHFHHHGGGCCCGHHG?EGFGGGFED@D?CEDFHEHGHFFHFHHGCGG.:CGGD:AEDCG?C?BFFFGGG/CEFBFEFFF/;:BBB;CFGD.:/:B:BB/BFFFBBFBFFAA9A..9-9@:/./;B/9/:/;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n"], "status": "failure"}}, {"id": "bowtie2/2.4.2+galaxy0-1", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 1, "time_seconds": 63.262458086013794, "inputs": {"library|input_1": {"src": "hdca", "id": "e216a3cc142b727c"}, "library|unaligned_file": true, "library|paired_options|paired_options_selector": "no", "library|type": "paired_collection", "reference_genome|own_file": {"src": "hda", "id": "01810e565d695a50"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "fc5b979a13a1aea8", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:22:59.836886", "create_time": "2024-02-11T14:22:12.086245", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-sbw6c", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/2/8/d/dataset_28d569bc-12d2-4132-b921-8630f5cdbd3e.dat' genome && ln -s -f '/galaxy/server/database/objects/2/8/d/dataset_28d569bc-12d2-4132-b921-8630f5cdbd3e.dat' genome.fa &&   ln -s '/galaxy/server/database/objects/6/8/f/dataset_68fedc50-ebc7-4c6d-a081-2c64f2a85112.dat' input_f.fastq &&  ln -s '/galaxy/server/database/objects/4/8/b/dataset_48b12a86-bdb3-4020-b341-ce17a480c22a.dat' input_r.fastq &&    bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq' --un-conc '/galaxy/server/database/objects/9/1/6/dataset_916ed051-5645-4f72-8874-6cbb4b04ef03.dat'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/7/1/8/dataset_718646e4-b761-4986-bc3c-8a76ffdba49f.dat'  && mv '/galaxy/server/database/objects/9/1/6/dataset_916ed051-5645-4f72-8874-6cbb4b04ef03.1.dat' '/galaxy/server/database/objects/9/1/6/dataset_916ed051-5645-4f72-8874-6cbb4b04ef03.dat' && mv '/galaxy/server/database/objects/9/1/6/dataset_916ed051-5645-4f72-8874-6cbb4b04ef03.2.dat' '/galaxy/server/database/objects/3/d/2/dataset_3d21c8cd-3c53-466f-9cc2-a8e5035fa67b.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 326, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 2, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 15, \"src\": \"hdca\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_collection\", \"unaligned_file\": \"true\"}"}, "inputs": {"input_11": {"id": "d3b90758768443c7", "src": "hda", "uuid": "68fedc50-ebc7-4c6d-a081-2c64f2a85112"}, "input_12": {"id": "e1fd5881b4f55f87", "src": "hda", "uuid": "48b12a86-bdb3-4020-b341-ce17a480c22a"}, "own_file": {"id": "01810e565d695a50", "src": "hda", "uuid": "28d569bc-12d2-4132-b921-8630f5cdbd3e"}}, "outputs": {"output": {"id": "577c554cf909b1b5", "src": "hda", "uuid": "718646e4-b761-4986-bc3c-8a76ffdba49f"}, "output_unaligned_reads_r": {"id": "48885adff262d488", "src": "hda", "uuid": "3d21c8cd-3c53-466f-9cc2-a8e5035fa67b"}, "output_unaligned_reads_l": {"id": "fbc9cb329b948110", "src": "hda", "uuid": "916ed051-5645-4f72-8874-6cbb4b04ef03"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/2/8/d/dataset_28d569bc-12d2-4132-b921-8630f5cdbd3e.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  bucket 1: 20%\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 30%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 4: 90%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 20%\n  bucket 6: 50%\n  bucket 5: 30%\n  bucket 6: 60%\n  bucket 5: 40%\n  bucket 6: 70%\n  bucket 5: 50%\n  bucket 6: 80%\n  bucket 5: 60%\n  bucket 6: 90%\n  bucket 5: 70%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 5: 80%\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 30\n  Sorting block time: 00:00:00\n  bucket 7: 20%\n  Reserving size (777) for bucket 8\nReturning block of 739 for bucket 5\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 10%\n  bucket 7: 60%\n  bucket 8: 20%\n  bucket 7: 70%\n  bucket 8: 30%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 7: 90%\n  bucket 8: 50%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  bucket 9: 10%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  bucket 10: 80%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Entering block accumulator loop for bucket 13:\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 17: 40%\n  bucket 16: 60%\n  bucket 17: 50%\n  bucket 16: 70%\n  bucket 17: 60%\n  bucket 16: 80%\n  bucket 17: 70%\n  bucket 16: 90%\n  bucket 17: 80%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 20%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 20: 50%\n  bucket 21: 30%\n  bucket 20: 60%\n  bucket 21: 40%\n  bucket 20: 70%\n  bucket 21: 50%\n  bucket 20: 80%\n  bucket 21: 60%\n  bucket 20: 90%\n  bucket 21: 70%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 30\n  Entering block accumulator loop for bucket 24:\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 24: 50%\n  bucket 25: 80%\n  bucket 24: 60%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\nGetting block 28 of 30\n  bucket 27: 60%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 70%\n  bucket 28: 10%\n  bucket 27: 80%\n  bucket 28: 20%\n  bucket 27: 90%\n  bucket 28: 30%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 40%\n  bucket 28: 50%\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 30%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 30: 10%\n  bucket 29: 60%\n  bucket 30: 20%\n  bucket 29: 70%\n  bucket 30: 30%\n  bucket 29: 80%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 90%\n  bucket 30: 60%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Reserving size (777) for bucket 2\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 1: 50%\n  bucket 2: 60%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 2: 80%\n  bucket 1: 70%\n  bucket 2: 90%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 1: 80%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 1: 90%\n  bucket 4: 90%\n  bucket 1: 100%\n  bucket 3: 80%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  bucket 5: 10%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 7: 90%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\nGetting block 11 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 10%\n  bucket 11: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 11: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 11: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 11: 40%\n  bucket 10: 40%\n  bucket 11: 50%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 11: 60%\n  bucket 10: 60%\n  bucket 11: 70%\n  bucket 10: 70%\n  bucket 11: 80%\n  bucket 10: 80%\n  bucket 9: 60%\n  bucket 11: 90%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 17: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 17: 30%\n  bucket 18: 50%\n  bucket 17: 40%\n  bucket 18: 60%\n  bucket 17: 50%\n  bucket 18: 70%\n  bucket 17: 60%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 17: 70%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 22: 40%\n  bucket 23: 30%\n  bucket 22: 50%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 23: 60%\n  bucket 22: 90%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 23: 90%\nReturning block of 494 for bucket 22\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 25: 10%\n  bucket 24: 70%\n  bucket 25: 20%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 25: 30%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\nGetting block 29 of 30\n  bucket 28: 40%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 29: 10%\n  bucket 28: 70%\n  bucket 29: 20%\n  bucket 28: 80%\n  bucket 29: 30%\n  bucket 28: 90%\n  bucket 29: 40%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/2/8/d/dataset_28d569bc-12d2-4132-b921-8630f5cdbd3e.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  bucket 1: 20%\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 30%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 1: 90%\n  bucket 2: 60%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 4: 90%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 20%\n  bucket 6: 50%\n  bucket 5: 30%\n  bucket 6: 60%\n  bucket 5: 40%\n  bucket 6: 70%\n  bucket 5: 50%\n  bucket 6: 80%\n  bucket 5: 60%\n  bucket 6: 90%\n  bucket 5: 70%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 5: 80%\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 30\n  Sorting block time: 00:00:00\n  bucket 7: 20%\n  Reserving size (777) for bucket 8\nReturning block of 739 for bucket 5\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 10%\n  bucket 7: 60%\n  bucket 8: 20%\n  bucket 7: 70%\n  bucket 8: 30%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 7: 90%\n  bucket 8: 50%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  bucket 9: 10%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  bucket 10: 80%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Entering block accumulator loop for bucket 13:\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 17: 40%\n  bucket 16: 60%\n  bucket 17: 50%\n  bucket 16: 70%\n  bucket 17: 60%\n  bucket 16: 80%\n  bucket 17: 70%\n  bucket 16: 90%\n  bucket 17: 80%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 20%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 20: 50%\n  bucket 21: 30%\n  bucket 20: 60%\n  bucket 21: 40%\n  bucket 20: 70%\n  bucket 21: 50%\n  bucket 20: 80%\n  bucket 21: 60%\n  bucket 20: 90%\n  bucket 21: 70%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 30\n  Entering block accumulator loop for bucket 24:\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 24: 50%\n  bucket 25: 80%\n  bucket 24: 60%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\nGetting block 28 of 30\n  bucket 27: 60%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 70%\n  bucket 28: 10%\n  bucket 27: 80%\n  bucket 28: 20%\n  bucket 27: 90%\n  bucket 28: 30%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 40%\n  bucket 28: 50%\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 30%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 30: 10%\n  bucket 29: 60%\n  bucket 30: 20%\n  bucket 29: 70%\n  bucket 30: 30%\n  bucket 29: 80%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 90%\n  bucket 30: 60%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Reserving size (777) for bucket 2\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 1: 50%\n  bucket 2: 60%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 2: 80%\n  bucket 1: 70%\n  bucket 2: 90%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 1: 80%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 1: 90%\n  bucket 4: 90%\n  bucket 1: 100%\n  bucket 3: 80%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  bucket 5: 10%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 5: 100%\n  bucket 7: 90%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\nGetting block 11 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 10%\n  bucket 11: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 11: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 11: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 11: 40%\n  bucket 10: 40%\n  bucket 11: 50%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 11: 60%\n  bucket 10: 60%\n  bucket 11: 70%\n  bucket 10: 70%\n  bucket 11: 80%\n  bucket 10: 80%\n  bucket 9: 60%\n  bucket 11: 90%\n  bucket 10: 90%\n  bucket 9: 70%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 17: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 17: 30%\n  bucket 18: 50%\n  bucket 17: 40%\n  bucket 18: 60%\n  bucket 17: 50%\n  bucket 18: 70%\n  bucket 17: 60%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 17: 70%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 22: 40%\n  bucket 23: 30%\n  bucket 22: 50%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 23: 60%\n  bucket 22: 90%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 23: 90%\nReturning block of 494 for bucket 22\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 25: 10%\n  bucket 24: 70%\n  bucket 25: 20%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 25: 30%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\nGetting block 29 of 30\n  bucket 28: 40%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 29: 10%\n  bucket 28: 70%\n  bucket 29: 20%\n  bucket 28: 80%\n  bucket 29: 30%\n  bucket 28: 90%\n  bucket 29: 40%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 14:22:50", "plugin": "core", "name": "end_epoch", "raw_value": "1707661370.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:22:50", "plugin": "core", "name": "start_epoch", "raw_value": "1707661370.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_8fwidb5r.sam v. /tmp/history_bam_converted_to_sam_rw28rhwa.sam )\n--- local_file\n+++ history_data\n@@ -1,29 +1,30 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome --passthrough -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/237/tmp -O bam -o /galaxy/server/database/objects/7/1/8/dataset_718646e4-b761-4986-bc3c-8a76ffdba49f.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1106:6455:17124\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBAAFABDBBFGGGGGGGGGGHHHGHHGHHHHHHHHHGHHGHHGHHHGHGGGEGHHHHHHHHHHHHHGHHHGHHHGGHGGHHHHHHHHHHHHHHHHHHGHHHHHHHHGHHHHHGGCFEHHHGFHHHHGHHFFH?GGHHHHGHGHGHHCFGGGGGGGFFFFFFFFFFFFFFFFFFFFADFA?.FEFAFFFEFFFFFFFFFFFFDABFBBFFFFFFFFEFFBFFFFFFFFFFF/FFBFFFFFFADE>BFFF9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1110:12808:18367\t161\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACAGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTT\tABCCCCDDDFFFGGGGGGGGGGHHHHHHHHHGGGGGGHHHHFHHGHHHHHHHHHHHHHGHHHGGHHHH3GFHEFHHHHHGHHGFHHHHHFGHHHHHGHGHGGHGGGGGGGHHHGGCGGGGHHGGGGGGGGGGGGGGGGGGGF-BAEFEBEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFAFEFDFFFFFFFFFF0BFBED=@DFFFFFFFFFEFFFFFBFAFB;0:;F0\tAS:i:-137\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T30G38A140A0A1\tYS:i:-138\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1110:16559:7507\t163\tchrM\t1\t23\t3M35I213M\t=\t1\t251\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAAT\t>AABBCCCCFFFGGGGGGGGGGHHHHHHHHHGGHGGHGHFHHHHFHHHHHHHHHHFHHGHHHHGHHHHHGGEEGHHHHHHHHHHHHHHHHHHHHHHGHGHGHHGGGGGGGHHGGGFGAGFGGGGGGGGGGGDDDFAGGFFFFCFAFEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFE..@BFFBD./;:0FFFFF09B/AFCA=-99BFFBFFFFFFFB:BFBFFBFB9:\tAS:i:-125\tXN:i:0\tXM:i:3\tXO:i:1\tXG:i:35\tNM:i:38\tMD:Z:1A0T69A143\tYS:i:-8\tYT:Z:CP\n********\n*SNIP *\n********\n@@ -179,6 +162,24 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11310:21761\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTT\tCCCCBFFFFFFFGGGGGGGGGGGHHHHHHHHHHHHGHHHHHGGGGGHHHHHGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHGHHHGHHHGHGHHGHHHHGGHGGG=FFGEHHHHHGHFGGHHGHHHHHFHHHHHHHGGHHHHHHHGHEHHGHHHHHGGGGF9AGE?DEGFFGGGGGGGGGGGGGGFFFF/9FFBFFFFFFFEFFFBFFFFFFFFFFFFEFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11310:21761\t141\t*\t0\t0\t*\t*\t0\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCTCC\tBCCCCFCCCCCCGGGGGGGGGGHHHHHHHHGGGGGHHHHHHHHGHHHHHHHHHGHHHHHHHHGHHHHHHHHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHGHHHDGHHHHHHHHHHHHHHHHHGHHHHHGGGGGGHHHHHGHHHHHHHHFFHHHHHCCAHFHHGGFFFFFFFFFAA;BDDFFFF00.-=D.ABDA-.::AAF;F@.AAD./0000.9-;.9:00009:F090;FF000900;\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11578:14676\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTC\tCDDDDFFFBFFCGGGGGGGGGGHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHGGGGGHHHHFGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGHHHHGGGGGGHGGHGHHHHHHH;CHHHHHHHHHHHHHHHGHGGGGFGGGFGGGGGGGGGGGGFGGGEGGFFFFFFFFFFFFFFFFFFFFFFFFF/FFFFFFFFFFFFFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11578:14676\t141\t*\t0\t0\t*\t*\t0\t0\tGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGT\tCCBCCCBBCCCCGGGGGGGGGGHGGGGGHHHHHHHGHHHHGHHHHHFFFGGHGHHHHHHHHHHHHHHHHFGHHHHHHHGHHGHFHFGHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHDGGCGHHHHHHHHHHHHHFF<GGHHHHGFGHGEHGGA=A=DFFFFAFAFF?FFFFFFFFFADFAAD;FFFA:BBBAE.A.EBFFFFEF-..0BFFF9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:13575:19255\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGTTCCCGTGAGTGGTTAATAGGGTGATAGGCCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tAA1A1DFFFFFBGG3A111FFAEGDDBGFDHF00F01BBA00BFGEHFBFFA1FABB0FAE?CFHF1BGFHFB0011F121E//>>1F10>B?EFHGCC/?/BFG/EEGFFEE//BCFDE0?E@@B/?11</?//<@?/F<<<A-<FBGH0.00=G0<<C//./0;;GC....<C.=.00;;BB./:.900////.C000;0090;..//000;C/;;/B/9BA9A9-AEEFF?B---;B99//9/;A//9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:13575:19255\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTGGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTAACTATTACAG\tAA>>ABFDCFFFFFDGFGFDGDEG1EGEFFBFHFGHA0E00A0CAAC0FFDFFAGHFEHHFDH/EAFCFFHACGHHAFFEF2DFFG/FGHHHHGHGH0C@/E@GGC0FG10>GGFGHHGHFFBGFGB2>F<EEF0@C@9:AAF00;9@-9.;FBBBBB->@;-A@FF<-;---@-;-----;-BFF/;---9//BBFFFF//B;FF///9BF///;/;B/BBFBFFBB/;-9--///;9/:-;BFFBBB9F\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:17564:15723\t77\t*\t0\t0\t*\t*\t0\t0\tTATGCTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAA\tEDCCDFFCEEDCGGGGGGGGGGHHHHHGFGHGGHGGHHHHHHHHGHHEHHGGGGGHHHHHHHHHGHHHGHHHHGGGGGHHHHFFGHHHGGGGGGHHHGGGGGHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHFEHHHHHHHHHHGHHGHGGHGGGCGGGGHHH1FGGGFGGFGGGGGGGGGGEFGGGGGGGGGGGGGGGGGFFFFFFFFFFAEFFFFFFFFFFBBFBBFFFFFE1:BFFB0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:17564:15723\t141\t*\t0\t0\t*\t*\t0\t0\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCCCCCCCCFFFGGGGGGGGGGHHHHGHHGHHHHHHGHHHHHHFHHHHGGGGHHGHFHHHHHHHFHHHHHHHGHGGHGGHGHHHHFHFHHGHHHHHHHHHHHHHEHGHHHHHGGGGGHHHHGEHHGHHHHHHGHFGHFHGGAHGGHGGGCCBDFGFFAFDBDDFFFFFBDA;AAD-ADC?AFEFB-@@AAEFEFFFFF..-:.B0:FFFFFFEF0BFF09FF.0;9BFFFFF0BFFFFFF?.::-909;.9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:18108:12091\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACAC\tCCCCCFBFFFFFGGGGGGGGGGHHHHHHHHHHHHHGGGGGGFHHHBFGHHHGGGGGGHHGGGGGHHGFGGHHHHHHGGGGGGHGHFGGGGGGDGEGEFGCHHHHHHHHHHGHHHHGEDHHHGGGCDGGGGFHFHGHHHGHHGHFGHHHFHHGFHHHFHHGGHFHFHHGB0CGHGFHCBGGGGEDEE9ADFEFFFGFBFGFFGGFFFFFGGFGFFFFFFFF/A?FEFFFFFEF-A.B//;BFFEF//BB///\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:18108:12091\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\tCBBCCFCCCCCFGGGGGGGGGGHHGHHHHFHHHHHHFHGHHHHFHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHGHHHHGHFHGHHGHHHHHHGHHHHHHGHHHHHGGGGGHHHHHHHHGHHHHHGFGHHHHHGHDHGHHGCA;?AAFGFEFDFFF.FFFFEBDFFFFFFFFBFFFFFFFFFEFEFFFEFFFFFFF.:BFFF0BFFFFFFFFFFFF;0FF0;BFFFFFFFFBFFFBFEFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTT\tABBBBFFFFFFFGGGGGGGGGGHHGHGHHHGHHHFGHGFGHFEHGGHGGHHHGHHHHFGHGGFGFFHHFHHHHEGHFHHHHHFGGGGGHGGGHGFHGHGGGGGGHHHGGGGHHGGGGHHHGGHGGGGGGHHHHGGGGGCFHGGGCDGHGHHHFHEHHHHHHHHHEEFHHGG:C:?0<EFGBFGGGGGFE.BFGEFFFGFFGGGGGGFDEF/FFGFFFFFFF;BBFA;.:EFFE:AAFEF.BFFFFF;9FF.\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tBBBBAFFFFFFFGGGGGGGFGGHHHHHHHHFHHHFHHHHGHHHHHHHHGHHHGHHEGHHHGDGCHHHHHHHHHGEHEHHHHHHHFHGGEGGHHHHHHHGEGHGHHDHHHHHHHHEHFHGHGHHHGEGCEHHFHHHGHHHHHHHF?GHHHFEFFAFFHHGG?;@DDFFB?@B;BDAFFFEBBD>D>D9@DDCFFFFFFCFDFE.AA;/BB/.;-.;BFBBBFFBFFFFFFF/9FF?/;/BBFFFFF/;FFB/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\t3>>A@FFFFFFFGGGFEECFGGFFB5GBHH5DFH5GBEEAEFHFHHF3F3GHFHHHEF3GAEHBGFHFFEFFHHHHFFB31FGGEGFHGEHHHHHHHHHHHHHHHHHEEEEGHHHFFF3GF3FGF44BBGEHHHHGG2B/BGGHE</ECDFHHBF1DGBFBFGFH<1GHGDGGFDFE0/<--;-9./BBED;BFBD/BF9BFFFDBFDADD;FFF?->;B=.9.;.BBFFF..;A;/B/;B//;;//BBF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tBBCCCFFFCBCCGGGGGGGGGGHGHGHHGFGFGFHGGHHGHHHHHHHHFHHGGGGAGFBGHHHFBBGH5GDHH5EEEGEHEGFBF1DGFDGFGGGBBCEEGEHFEFDDHFBFHFD/@BGDGDHHGDCCFCD/C<->.ADDGE1GA<DBGFGHBG/..DGFCDGD.:0:.;CFGHEHBF.A-99CFGGFF0C0C0BF0;CA9/B:///;//BF/9B9?-..:;.;9.9A././;B//F.B?A////9;:/:/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tA>ABAFA?D@AFGGGGFGGGFGFHHHFFH4BCBGHHHHGFFF3G5BF3322EEAFHHHHHHAB5GHFHEHFHHH3BEEHFGF5@13FDF3GDGFHHFGHHHGHHHGFGGHHFCG//?/EGHHHG3F4BFFGHHHEDGFHHB/B/?FBF<@-9?BDEFFF?B--?DFFFB9FA>B;A.BFDB?AB.--@;-.FFAEFFFF9AE;DDFFFFB/9BFFFFFFFB:BF/BB/BFF//FFF-=--.99=--.9///\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tAAAAAFFFFFFFGGGGGGFGGGHHGGHHHGGGGGGHGHGDFGHFGGGGFHHHHHGGGGGGGGFHGDFGGGGHGG?@EFHGEFEHEGFHHHHHF2FEHHGHGDCEAD?GFDFGGHBGHHFEHHHHHHHHHDFGHGHHGBDFG0FFHFGGFHHH=GGBF-AACEHEHHGGGHHHGHHFHCCFEBB0FFFFFF/;0;;FFFBFE.AA0BF0??-AD/////;:BFFBFFBBBFFFFFB/.9ADDAD-D;-;=A-\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\t@?AAAFFBFBFFFGGFGFGGGEFCGGHHHHFGHGHFHGHHHHGGFGGFGHHGHGHHHHGHGFFHHGGGGGHHHHHHHHHBFHHEFHHHHHHGF?FAGHGFHHHGDGFHHGGGHGHFHHHGHHHGHHFHHGFFGFHHHGHHHHFFHHHHH/FGHHHHGHGHG<C???B=@ABBFEF@=-AFFFFFFBFAFFDFFFFA?AFFCFFABEFFFFFFFFF?FFFDFFBFF;FFEFFEFFFFFFFAF///9FF/BB/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tBBBBBFFFFFFFEGGGGGGGGGGHHHHHHHHGHGGHHHHGFGGG?HGGHHHHHHHGGHGFGHGEEGFHHHHHHHHHHHFHHFHHGGCGGGHHHHBFGFFHGGGEFGHHGFFEEFHGGDGEHFHHHGGGCCCGHHG?EGFGGGFED@D?CEDFHEHGHFFHFHHGCGG.:CGGD:AEDCG?C?BFFFGGG/CEFBFEFFF/;:BBB;CFGD.:/:B:BB/BFFFBBFBFFAA9A..9-9@:/./;B/9/:/;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n"], "status": "failure"}}, {"id": "bowtie2/2.4.2+galaxy0-2", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 2, "time_seconds": 62.95988464355469, "inputs": {"library|input_1": {"src": "hda", "id": "90eb2efd32791f8e"}, "library|input_2": {"src": "hda", "id": "51fc7bc3a5291377"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "6a8755814d0400a1"}, "reference_genome|source": "history", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "6257734e49a4688b", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:24:02.934607", "create_time": "2024-02-11T14:23:15.796655", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-mzwhr", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/4/8/d/dataset_48d75f1b-7880-4e71-bda1-09fbc456becc.dat' genome && ln -s -f '/galaxy/server/database/objects/4/8/d/dataset_48d75f1b-7880-4e71-bda1-09fbc456becc.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/1/a/e/dataset_1ae632ec-60c1-4c58-8039-8f3b34ce51e1.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/a/e/3/dataset_ae3491b8-6c18-4bbf-8761-df0f272920fe.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/0/a/3/dataset_0a3a3b81-25a4-4008-be76-d18f3122ffb7.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 332, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 330, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 331, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "90eb2efd32791f8e", "src": "hda", "uuid": "1ae632ec-60c1-4c58-8039-8f3b34ce51e1"}, "input_2": {"id": "51fc7bc3a5291377", "src": "hda", "uuid": "ae3491b8-6c18-4bbf-8761-df0f272920fe"}, "own_file": {"id": "6a8755814d0400a1", "src": "hda", "uuid": "48d75f1b-7880-4e71-bda1-09fbc456becc"}}, "outputs": {"output": {"id": "2f759826027575c8", "src": "hda", "uuid": "0a3a3b81-25a4-4008-be76-d18f3122ffb7"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/4/8/d/dataset_48d75f1b-7880-4e71-bda1-09fbc456becc.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 3: 60%\n  bucket 1: 60%\n  bucket 4: 30%\n  bucket 3: 70%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 3: 80%\n  bucket 4: 40%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 3: 90%\n  bucket 1: 90%\n  bucket 4: 50%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 1: 100%\n  bucket 2: 60%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 4: 70%\n  bucket 2: 80%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\nGetting block 8 of 30\n  bucket 7: 70%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 80%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 90%\n  bucket 8: 10%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 9: 10%\n  bucket 9: 20%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  bucket 16: 10%\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 18: 30%\n  bucket 16: 60%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 16: 70%\n  bucket 18: 50%\n  bucket 17: 50%\n  bucket 16: 80%\n  bucket 18: 60%\n  bucket 17: 60%\n  bucket 16: 90%\n  bucket 18: 70%\n  bucket 17: 70%\n  bucket 16: 100%\n  bucket 18: 80%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\nGetting block 21 of 30\n  bucket 20: 60%\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 70%\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 20: 80%\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 20: 90%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 20: 100%\n  bucket 22: 10%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 21: 50%\n  bucket 22: 20%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 22: 30%\n  bucket 21: 80%\n  Sorting block time: 00:00:00\n  bucket 22: 40%\nReturning block of 269 for bucket 20\n  bucket 21: 90%\n  bucket 22: 50%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 60%\n  bucket 22: 70%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 2:\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 1: 70%\n  bucket 2: 30%\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 4: 70%\n  bucket 2: 70%\n  bucket 4: 80%\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  bucket 5: 20%\n  Calculating Z arrays for bucket 6\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 40%\n  bucket 6: 10%\n  bucket 5: 50%\n  bucket 6: 20%\n  bucket 5: 60%\n  bucket 6: 30%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 6: 50%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  Sorting block time: 00:00:00\n  bucket 6: 100%\nReturning block of 777 for bucket 5\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 30\n  bucket 7: 20%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 30%\n  bucket 8: 10%\n  bucket 7: 40%\n  bucket 8: 20%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\nGetting block 12 of 30\n  bucket 11: 30%\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 40%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 50%\n  bucket 12: 10%\n  bucket 11: 60%\n  bucket 12: 20%\n  bucket 11: 70%\n  bucket 12: 30%\n  bucket 11: 80%\n  bucket 12: 40%\n  bucket 11: 90%\n  bucket 12: 50%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\nGetting block 22 of 30\n  Calculating Z arrays for bucket 21\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 21: 50%\n  bucket 22: 60%\n  bucket 21: 60%\n  bucket 22: 70%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 21: 80%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  bucket 23: 30%\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 40%\n  bucket 24: 10%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 24: 30%\n  bucket 23: 80%\n  bucket 24: 40%\n  bucket 23: 90%\n  bucket 24: 50%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 20%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 26: 10%\n  bucket 25: 40%\n  bucket 26: 20%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 30\n  Entering block accumulator loop for bucket 27:\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 27: 20%\n  bucket 28: 30%\n  bucket 27: 30%\n  bucket 28: 40%\n  bucket 27: 40%\n  bucket 28: 50%\n  bucket 27: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 27: 60%\n  bucket 28: 80%\n  bucket 27: 70%\n  bucket 28: 90%\n  bucket 27: 80%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\nGetting block 30 of 30\n  bucket 29: 90%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 100%\n  bucket 30: 10%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/4/8/d/dataset_48d75f1b-7880-4e71-bda1-09fbc456becc.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 3: 60%\n  bucket 1: 60%\n  bucket 4: 30%\n  bucket 3: 70%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 3: 80%\n  bucket 4: 40%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 3: 90%\n  bucket 1: 90%\n  bucket 4: 50%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 1: 100%\n  bucket 2: 60%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 4: 70%\n  bucket 2: 80%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\nGetting block 8 of 30\n  bucket 7: 70%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 80%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 90%\n  bucket 8: 10%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 9: 10%\n  bucket 9: 20%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  bucket 16: 10%\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 18: 30%\n  bucket 16: 60%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 16: 70%\n  bucket 18: 50%\n  bucket 17: 50%\n  bucket 16: 80%\n  bucket 18: 60%\n  bucket 17: 60%\n  bucket 16: 90%\n  bucket 18: 70%\n  bucket 17: 70%\n  bucket 16: 100%\n  bucket 18: 80%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\nGetting block 21 of 30\n  bucket 20: 60%\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 70%\n  bucket 21: 10%\nGetting block 22 of 30\n  bucket 20: 80%\n  bucket 21: 20%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 20: 90%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 20: 100%\n  bucket 22: 10%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 21: 50%\n  bucket 22: 20%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 22: 30%\n  bucket 21: 80%\n  Sorting block time: 00:00:00\n  bucket 22: 40%\nReturning block of 269 for bucket 20\n  bucket 21: 90%\n  bucket 22: 50%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 60%\n  bucket 22: 70%\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 2:\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 1: 70%\n  bucket 2: 30%\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 4: 70%\n  bucket 2: 70%\n  bucket 4: 80%\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  bucket 5: 20%\n  Calculating Z arrays for bucket 6\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 40%\n  bucket 6: 10%\n  bucket 5: 50%\n  bucket 6: 20%\n  bucket 5: 60%\n  bucket 6: 30%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 6: 50%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  Sorting block time: 00:00:00\n  bucket 6: 100%\nReturning block of 777 for bucket 5\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 30\n  bucket 7: 20%\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 30%\n  bucket 8: 10%\n  bucket 7: 40%\n  bucket 8: 20%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\nGetting block 12 of 30\n  bucket 11: 30%\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 40%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 50%\n  bucket 12: 10%\n  bucket 11: 60%\n  bucket 12: 20%\n  bucket 11: 70%\n  bucket 12: 30%\n  bucket 11: 80%\n  bucket 12: 40%\n  bucket 11: 90%\n  bucket 12: 50%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\nGetting block 22 of 30\n  Calculating Z arrays for bucket 21\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 21: 50%\n  bucket 22: 60%\n  bucket 21: 60%\n  bucket 22: 70%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 21: 80%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  bucket 23: 30%\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 40%\n  bucket 24: 10%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 24: 30%\n  bucket 23: 80%\n  bucket 24: 40%\n  bucket 23: 90%\n  bucket 24: 50%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 20%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 26: 10%\n  bucket 25: 40%\n  bucket 26: 20%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 30\n  Entering block accumulator loop for bucket 27:\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 27: 20%\n  bucket 28: 30%\n  bucket 27: 30%\n  bucket 28: 40%\n  bucket 27: 40%\n  bucket 28: 50%\n  bucket 27: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 27: 60%\n  bucket 28: 80%\n  bucket 27: 70%\n  bucket 28: 90%\n  bucket 27: 80%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\nGetting block 30 of 30\n  bucket 29: 90%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 100%\n  bucket 30: 10%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:23:54", "plugin": "core", "name": "end_epoch", "raw_value": "1707661434.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:23:53", "plugin": "core", "name": "start_epoch", "raw_value": "1707661433.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_c4b2aqgf.sam v. /tmp/history_bam_converted_to_sam_w8gwhdw5.sam )\n--- local_file\n+++ history_data\n@@ -1,30 +1,31 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n @RG\tID:rg1\tPL:CAPILLARY\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome --rg-id rg1 --rg PL:CAPILLARY -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome --rg-id rg1 --rg PL:CAPILLARY -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/241/tmp -O bam -o /galaxy/server/database/objects/0/a/3/dataset_0a3a3b81-25a4-4008-be76-d18f3122ffb7.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1106:6455:17124\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBAAFABDBBFGGGGGGGGGGHHHGHHGHHHHHHHHHGHHGHHGHHHGHGGGEGHHHHHHHHHHHHHGHHHGHHHGGHGGHHHHHHHHHHHHHHHHHHGHHHHHHHHGHHHHHGGCFEHHHGFHHHHGHHFFH?GGHHHHGHGHGHHCFGGGGGGGFFFFFFFFFFFFFFFFFFFFADFA?.FEFAFFFEFFFFFFFFFFFFDABFBBFFFFFFFFEFFBFFFFFFFFFFF/FFBFFFFFFADE>BFFF9\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1110:12808:18367\t161\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACAGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTT\tABCCCCDDDFFFGGGGGGGGGGHHHHHHHHHGGGGGGHHHHFHHGHHHHHHHHHHHHHGHHHGGHHHH3GFHEFHHHHHGHHGFHHHHHFGHHHHHGHGHGGHGGGGGGGHHHGGCGGGGHHGGGGGGGGGGGGGGGGGGGF-BAEFEBEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFAFEFDFFFFFFFFFF0BFBED=@DFFFFFFFFFEFFFFFBFAFB;0:;F0\tAS:i:-137\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T30G38A140A0A1\tYS:i:-138\tYT:Z:DP\tRG:Z:rg1\n********\n*SNIP *\n********\n@@ -180,6 +163,24 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:11310:21761\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTT\tCCCCBFFFFFFFGGGGGGGGGGGHHHHHHHHHHHHGHHHHHGGGGGHHHHHGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHGHHHGHHHGHGHHGHHHHGGHGGG=FFGEHHHHHGHFGGHHGHHHHHFHHHHHHHGGHHHHHHHGHEHHGHHHHHGGGGF9AGE?DEGFFGGGGGGGGGGGGGGFFFF/9FFBFFFFFFFEFFFBFFFFFFFFFFFFEFFF0\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:11310:21761\t141\t*\t0\t0\t*\t*\t0\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCTCC\tBCCCCFCCCCCCGGGGGGGGGGHHHHHHHHGGGGGHHHHHHHHGHHHHHHHHHGHHHHHHHHGHHHHHHHHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHGHHHDGHHHHHHHHHHHHHHHHHGHHHHHGGGGGGHHHHHGHHHHHHHHFFHHHHHCCAHFHHGGFFFFFFFFFAA;BDDFFFF00.-=D.ABDA-.::AAF;F@.AAD./0000.9-;.9:00009:F090;FF000900;\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:11578:14676\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTC\tCDDDDFFFBFFCGGGGGGGGGGHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHGGGGGHHHHFGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGHHHHGGGGGGHGGHGHHHHHHH;CHHHHHHHHHHHHHHHGHGGGGFGGGFGGGGGGGGGGGGFGGGEGGFFFFFFFFFFFFFFFFFFFFFFFFF/FFFFFFFFFFFFFFFF0\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:11578:14676\t141\t*\t0\t0\t*\t*\t0\t0\tGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGT\tCCBCCCBBCCCCGGGGGGGGGGHGGGGGHHHHHHHGHHHHGHHHHHFFFGGHGHHHHHHHHHHHHHHHHFGHHHHHHHGHHGHFHFGHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHDGGCGHHHHHHHHHHHHHFF<GGHHHHGFGHGEHGGA=A=DFFFFAFAFF?FFFFFFFFFADFAAD;FFFA:BBBAE.A.EBFFFFEF-..0BFFF9\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:13575:19255\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGTTCCCGTGAGTGGTTAATAGGGTGATAGGCCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tAA1A1DFFFFFBGG3A111FFAEGDDBGFDHF00F01BBA00BFGEHFBFFA1FABB0FAE?CFHF1BGFHFB0011F121E//>>1F10>B?EFHGCC/?/BFG/EEGFFEE//BCFDE0?E@@B/?11</?//<@?/F<<<A-<FBGH0.00=G0<<C//./0;;GC....<C.=.00;;BB./:.900////.C000;0090;..//000;C/;;/B/9BA9A9-AEEFF?B---;B99//9/;A//9\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:13575:19255\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTGGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTAACTATTACAG\tAA>>ABFDCFFFFFDGFGFDGDEG1EGEFFBFHFGHA0E00A0CAAC0FFDFFAGHFEHHFDH/EAFCFFHACGHHAFFEF2DFFG/FGHHHHGHGH0C@/E@GGC0FG10>GGFGHHGHFFBGFGB2>F<EEF0@C@9:AAF00;9@-9.;FBBBBB->@;-A@FF<-;---@-;-----;-BFF/;---9//BBFFFF//B;FF///9BF///;/;B/BBFBFFBB/;-9--///;9/:-;BFFBBB9F\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:17564:15723\t77\t*\t0\t0\t*\t*\t0\t0\tTATGCTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAA\tEDCCDFFCEEDCGGGGGGGGGGHHHHHGFGHGGHGGHHHHHHHHGHHEHHGGGGGHHHHHHHHHGHHHGHHHHGGGGGHHHHFFGHHHGGGGGGHHHGGGGGHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHFEHHHHHHHHHHGHHGHGGHGGGCGGGGHHH1FGGGFGGFGGGGGGGGGGEFGGGGGGGGGGGGGGGGGFFFFFFFFFFAEFFFFFFFFFFBBFBBFFFFFE1:BFFB0\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:17564:15723\t141\t*\t0\t0\t*\t*\t0\t0\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCCCCCCCCFFFGGGGGGGGGGHHHHGHHGHHHHHHGHHHHHHFHHHHGGGGHHGHFHHHHHHHFHHHHHHHGHGGHGGHGHHHHFHFHHGHHHHHHHHHHHHHEHGHHHHHGGGGGHHHHGEHHGHHHHHHGHFGHFHGGAHGGHGGGCCBDFGFFAFDBDDFFFFFBDA;AAD-ADC?AFEFB-@@AAEFEFFFFF..-:.B0:FFFFFFEF0BFF09FF.0;9BFFFFF0BFFFFFF?.::-909;.9\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:18108:12091\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACAC\tCCCCCFBFFFFFGGGGGGGGGGHHHHHHHHHHHHHGGGGGGFHHHBFGHHHGGGGGGHHGGGGGHHGFGGHHHHHHGGGGGGHGHFGGGGGGDGEGEFGCHHHHHHHHHHGHHHHGEDHHHGGGCDGGGGFHFHGHHHGHHGHFGHHHFHHGFHHHFHHGGHFHFHHGB0CGHGFHCBGGGGEDEE9ADFEFFFGFBFGFFGGFFFFFGGFGFFFFFFFF/A?FEFFFFFEF-A.B//;BFFEF//BB///\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:18108:12091\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\tCBBCCFCCCCCFGGGGGGGGGGHHGHHHHFHHHHHHFHGHHHHFHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHGHHHHGHFHGHHGHHHHHHGHHHHHHGHHHHHGGGGGHHHHHHHHGHHHHHGFGHHHHHGHDHGHHGCA;?AAFGFEFDFFF.FFFFEBDFFFFFFFFBFFFFFFFFFEFEFFFEFFFFFFF.:BFFF0BFFFFFFFFFFFF;0FF0;BFFFFFFFFBFFFBFEFFFF0\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTT\tABBBBFFFFFFFGGGGGGGGGGHHGHGHHHGHHHFGHGFGHFEHGGHGGHHHGHHHHFGHGGFGFFHHFHHHHEGHFHHHHHFGGGGGHGGGHGFHGHGGGGGGHHHGGGGHHGGGGHHHGGHGGGGGGHHHHGGGGGCFHGGGCDGHGHHHFHEHHHHHHHHHEEFHHGG:C:?0<EFGBFGGGGGFE.BFGEFFFGFFGGGGGGFDEF/FFGFFFFFFF;BBFA;.:EFFE:AAFEF.BFFFFF;9FF.\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tBBBBAFFFFFFFGGGGGGGFGGHHHHHHHHFHHHFHHHHGHHHHHHHHGHHHGHHEGHHHGDGCHHHHHHHHHGEHEHHHHHHHFHGGEGGHHHHHHHGEGHGHHDHHHHHHHHEHFHGHGHHHGEGCEHHFHHHGHHHHHHHF?GHHHFEFFAFFHHGG?;@DDFFB?@B;BDAFFFEBBD>D>D9@DDCFFFFFFCFDFE.AA;/BB/.;-.;BFBBBFFBFFFFFFF/9FF?/;/BBFFFFF/;FFB/\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\t3>>A@FFFFFFFGGGFEECFGGFFB5GBHH5DFH5GBEEAEFHFHHF3F3GHFHHHEF3GAEHBGFHFFEFFHHHHFFB31FGGEGFHGEHHHHHHHHHHHHHHHHHEEEEGHHHFFF3GF3FGF44BBGEHHHHGG2B/BGGHE</ECDFHHBF1DGBFBFGFH<1GHGDGGFDFE0/<--;-9./BBED;BFBD/BF9BFFFDBFDADD;FFF?->;B=.9.;.BBFFF..;A;/B/;B//;;//BBF/\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tBBCCCFFFCBCCGGGGGGGGGGHGHGHHGFGFGFHGGHHGHHHHHHHHFHHGGGGAGFBGHHHFBBGH5GDHH5EEEGEHEGFBF1DGFDGFGGGBBCEEGEHFEFDDHFBFHFD/@BGDGDHHGDCCFCD/C<->.ADDGE1GA<DBGFGHBG/..DGFCDGD.:0:.;CFGHEHBF.A-99CFGGFF0C0C0BF0;CA9/B:///;//BF/9B9?-..:;.;9.9A././;B//F.B?A////9;:/:/\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tA>ABAFA?D@AFGGGGFGGGFGFHHHFFH4BCBGHHHHGFFF3G5BF3322EEAFHHHHHHAB5GHFHEHFHHH3BEEHFGF5@13FDF3GDGFHHFGHHHGHHHGFGGHHFCG//?/EGHHHG3F4BFFGHHHEDGFHHB/B/?FBF<@-9?BDEFFF?B--?DFFFB9FA>B;A.BFDB?AB.--@;-.FFAEFFFF9AE;DDFFFFB/9BFFFFFFFB:BF/BB/BFF//FFF-=--.99=--.9///\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tAAAAAFFFFFFFGGGGGGFGGGHHGGHHHGGGGGGHGHGDFGHFGGGGFHHHHHGGGGGGGGFHGDFGGGGHGG?@EFHGEFEHEGFHHHHHF2FEHHGHGDCEAD?GFDFGGHBGHHFEHHHHHHHHHDFGHGHHGBDFG0FFHFGGFHHH=GGBF-AACEHEHHGGGHHHGHHFHCCFEBB0FFFFFF/;0;;FFFBFE.AA0BF0??-AD/////;:BFFBFFBBBFFFFFB/.9ADDAD-D;-;=A-\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\t@?AAAFFBFBFFFGGFGFGGGEFCGGHHHHFGHGHFHGHHHHGGFGGFGHHGHGHHHHGHGFFHHGGGGGHHHHHHHHHBFHHEFHHHHHHGF?FAGHGFHHHGDGFHHGGGHGHFHHHGHHHGHHFHHGFFGFHHHGHHHHFFHHHHH/FGHHHHGHGHG<C???B=@ABBFEF@=-AFFFFFFBFAFFDFFFFA?AFFCFFABEFFFFFFFFF?FFFDFFBFF;FFEFFEFFFFFFFAF///9FF/BB/\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tBBBBBFFFFFFFEGGGGGGGGGGHHHHHHHHGHGGHHHHGFGGG?HGGHHHHHHHGGHGFGHGEEGFHHHHHHHHHHHFHHFHHGGCGGGHHHHBFGFFHGGGEFGHHGFFEEFHGGDGEHFHHHGGGCCCGHHG?EGFGGGFED@D?CEDFHEHGHFFHFHHGCGG.:CGGD:AEDCG?C?BFFFGGG/CEFBFEFFF/;:BBB;CFGD.:/:B:BB/BFFFBBFBFFAA9A..9-9@:/./;B/9/:/;\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\tRG:Z:rg1\n"], "status": "failure"}}, {"id": "bowtie2/2.4.2+galaxy0-3", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 3, "time_seconds": 64.7371838092804, "inputs": {"library|input_1": {"src": "hda", "id": "69aa8702bc4f9cba"}, "library|input_2": {"src": "hda", "id": "8d54594e81f126e6"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "e2377f439b6b39c9"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "save_mapping_stats": true}, "job": {"model_class": "Job", "id": "c7bd6e1beb2afbf9", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:25:07.208568", "create_time": "2024-02-11T14:24:18.661830", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-mphqs", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/e/3/e/dataset_e3e324ec-880e-4f13-956a-b2ec9ccc8e74.dat' genome && ln -s -f '/galaxy/server/database/objects/e/3/e/dataset_e3e324ec-880e-4f13-956a-b2ec9ccc8e74.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/f/a/1/dataset_fa1633de-d777-4212-b30a-4ac2d0d44264.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/5/a/a/dataset_5aa4ad82-9478-4bde-bfe6-f54baed12781.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                2> '/galaxy/server/database/objects/3/9/c/dataset_39cd6131-c2ae-47c0-9381-2a30b3e39805.dat'  | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/0/8/9/dataset_089f0767-cba7-4dfd-baae-d5da35f31b13.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"true\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 336, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 334, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 335, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "69aa8702bc4f9cba", "src": "hda", "uuid": "fa1633de-d777-4212-b30a-4ac2d0d44264"}, "input_2": {"id": "8d54594e81f126e6", "src": "hda", "uuid": "5aa4ad82-9478-4bde-bfe6-f54baed12781"}, "own_file": {"id": "e2377f439b6b39c9", "src": "hda", "uuid": "e3e324ec-880e-4f13-956a-b2ec9ccc8e74"}}, "outputs": {"mapping_stats": {"id": "e653fd2a54c939dd", "src": "hda", "uuid": "39cd6131-c2ae-47c0-9381-2a30b3e39805"}, "output": {"id": "9b07f8fad6a8da20", "src": "hda", "uuid": "089f0767-cba7-4dfd-baae-d5da35f31b13"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/e/3/e/dataset_e3e324ec-880e-4f13-956a-b2ec9ccc8e74.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\n  bucket 1: 10%\n  Reserving size (777) for bucket 2\n  bucket 1: 20%\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 30%\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 40%\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 70%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 80%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 1: 90%\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 4: 70%\n  bucket 2: 100%\n  bucket 3: 80%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\nGetting block 7 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 10%\n  bucket 7: 10%\n  bucket 6: 10%\n  bucket 7: 20%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 7: 30%\n  bucket 5: 30%\n  bucket 7: 40%\n  bucket 6: 30%\n  bucket 7: 50%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 7: 60%\n  bucket 5: 50%\n  bucket 7: 70%\n  bucket 6: 50%\n  bucket 7: 80%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 7: 90%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\nGetting block 11 of 30\n  bucket 9: 70%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 11: 10%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 11: 20%\n  bucket 9: 100%\n  bucket 10: 90%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 11: 30%\n  bucket 10: 100%\n  bucket 11: 40%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\nGetting block 14 of 30\n  Reserving size (777) for bucket 13\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 13\n  Calculating Z arrays for bucket 14\nGetting block 15 of 30\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 15: 20%\n  bucket 13: 30%\n  bucket 15: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 15: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 15: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 15: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 15: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 15: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 15: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 15: 100%\n  bucket 14: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Entering block accumulator loop for bucket 20:\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 21: 10%\n  bucket 20: 20%\n  bucket 21: 20%\n  bucket 20: 30%\n  bucket 21: 30%\n  bucket 20: 40%\n  bucket 21: 40%\n  bucket 20: 50%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 20: 60%\n  bucket 21: 70%\n  bucket 20: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 20: 80%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\nGetting block 25 of 30\n  Calculating Z arrays for bucket 24\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 24: 10%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 24: 50%\n  bucket 25: 60%\n  bucket 24: 60%\n  bucket 25: 70%\n  bucket 24: 70%\n  bucket 25: 80%\n  bucket 24: 80%\n  bucket 25: 90%\n  bucket 24: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  bucket 28: 10%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 28: 60%\n  bucket 29: 70%\n  bucket 28: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 28: 80%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 2 of 30\nReturning block of 485 for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 2: 40%\n  bucket 4: 20%\n  bucket 2: 50%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 4: 40%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 2: 100%\n  bucket 4: 70%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 3: 70%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\nGetting block 6 of 30\n  bucket 5: 30%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  bucket 5: 40%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 50%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 60%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 6: 30%\n  bucket 7: 40%\n  bucket 6: 40%\n  bucket 7: 50%\n  bucket 5: 80%\n  bucket 7: 60%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 7: 70%\n  bucket 6: 60%\n  bucket 7: 80%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 7: 90%\n  bucket 6: 80%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 90%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 30\n  bucket 13: 10%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 15: 50%\n  bucket 16: 70%\n  bucket 15: 60%\n  bucket 16: 80%\n  bucket 15: 70%\n  bucket 16: 90%\n  bucket 15: 80%\n  bucket 16: 100%\n  bucket 15: 90%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 19: 60%\n  bucket 20: 60%\n  bucket 19: 70%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  bucket 21: 10%\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 21: 70%\n  bucket 22: 70%\n  bucket 21: 80%\n  bucket 22: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Entering block accumulator loop for bucket 23:\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 23: 50%\n  bucket 24: 60%\n  bucket 23: 60%\n  bucket 24: 70%\n  bucket 23: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 23: 80%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 30\n  bucket 25: 20%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 26: 10%\n  bucket 25: 40%\n  bucket 26: 20%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\nGetting block 28 of 30\n  Calculating Z arrays for bucket 27\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 20%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 29: 40%\n  bucket 30: 40%\n  bucket 29: 50%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 29: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 80%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n", "stderr": "\nBuilding a SMALL index\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/e/3/e/dataset_e3e324ec-880e-4f13-956a-b2ec9ccc8e74.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 30\n  bucket 1: 10%\n  Reserving size (777) for bucket 2\n  bucket 1: 20%\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 30%\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 40%\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 70%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 80%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 1: 90%\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 4: 70%\n  bucket 2: 100%\n  bucket 3: 80%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\nGetting block 7 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 10%\n  bucket 7: 10%\n  bucket 6: 10%\n  bucket 7: 20%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 7: 30%\n  bucket 5: 30%\n  bucket 7: 40%\n  bucket 6: 30%\n  bucket 7: 50%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 7: 60%\n  bucket 5: 50%\n  bucket 7: 70%\n  bucket 6: 50%\n  bucket 7: 80%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 7: 90%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\nGetting block 11 of 30\n  bucket 9: 70%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 11: 10%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 11: 20%\n  bucket 9: 100%\n  bucket 10: 90%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 11: 30%\n  bucket 10: 100%\n  bucket 11: 40%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\nGetting block 14 of 30\n  Reserving size (777) for bucket 13\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 13\n  Calculating Z arrays for bucket 14\nGetting block 15 of 30\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 15: 20%\n  bucket 13: 30%\n  bucket 15: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 15: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 15: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 15: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 15: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 15: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 15: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 15: 100%\n  bucket 14: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Entering block accumulator loop for bucket 20:\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 21: 10%\n  bucket 20: 20%\n  bucket 21: 20%\n  bucket 20: 30%\n  bucket 21: 30%\n  bucket 20: 40%\n  bucket 21: 40%\n  bucket 20: 50%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 20: 60%\n  bucket 21: 70%\n  bucket 20: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 20: 80%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\nGetting block 25 of 30\n  Calculating Z arrays for bucket 24\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 24: 10%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 24: 50%\n  bucket 25: 60%\n  bucket 24: 60%\n  bucket 25: 70%\n  bucket 24: 70%\n  bucket 25: 80%\n  bucket 24: 80%\n  bucket 25: 90%\n  bucket 24: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  bucket 28: 10%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 28: 60%\n  bucket 29: 70%\n  bucket 28: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 28: 80%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 2 of 30\nReturning block of 485 for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 2: 40%\n  bucket 4: 20%\n  bucket 2: 50%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 4: 40%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 2: 100%\n  bucket 4: 70%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 3: 70%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\nGetting block 6 of 30\n  bucket 5: 30%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 30\n  bucket 5: 40%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 50%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 60%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 6: 30%\n  bucket 7: 40%\n  bucket 6: 40%\n  bucket 7: 50%\n  bucket 5: 80%\n  bucket 7: 60%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 7: 70%\n  bucket 6: 60%\n  bucket 7: 80%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 7: 90%\n  bucket 6: 80%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 90%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 30\n  bucket 13: 10%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 15: 50%\n  bucket 16: 70%\n  bucket 15: 60%\n  bucket 16: 80%\n  bucket 15: 70%\n  bucket 16: 90%\n  bucket 15: 80%\n  bucket 16: 100%\n  bucket 15: 90%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 19: 60%\n  bucket 20: 60%\n  bucket 19: 70%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  bucket 21: 10%\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 21: 70%\n  bucket 22: 70%\n  bucket 21: 80%\n  bucket 22: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Entering block accumulator loop for bucket 23:\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 23: 50%\n  bucket 24: 60%\n  bucket 23: 60%\n  bucket 24: 70%\n  bucket 23: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 23: 80%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 30\n  bucket 25: 20%\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 26: 10%\n  bucket 25: 40%\n  bucket 26: 20%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\nGetting block 28 of 30\n  Calculating Z arrays for bucket 27\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 20%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 29: 40%\n  bucket 30: 40%\n  bucket 29: 50%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 29: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 80%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:24:57", "plugin": "core", "name": "end_epoch", "raw_value": "1707661497.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:24:56", "plugin": "core", "name": "start_epoch", "raw_value": "1707661496.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_ffj947c1.sam v. /tmp/history_bam_converted_to_sam_l4lsnzsx.sam )\n--- local_file\n+++ history_data\n@@ -1,29 +1,30 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/245/tmp -O bam -o /galaxy/server/database/objects/0/8/9/dataset_089f0767-cba7-4dfd-baae-d5da35f31b13.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1106:6455:17124\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBAAFABDBBFGGGGGGGGGGHHHGHHGHHHHHHHHHGHHGHHGHHHGHGGGEGHHHHHHHHHHHHHGHHHGHHHGGHGGHHHHHHHHHHHHHHHHHHGHHHHHHHHGHHHHHGGCFEHHHGFHHHHGHHFFH?GGHHHHGHGHGHHCFGGGGGGGFFFFFFFFFFFFFFFFFFFFADFA?.FEFAFFFEFFFFFFFFFFFFDABFBBFFFFFFFFEFFBFFFFFFFFFFF/FFBFFFFFFADE>BFFF9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1110:12808:18367\t161\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACAGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTT\tABCCCCDDDFFFGGGGGGGGGGHHHHHHHHHGGGGGGHHHHFHHGHHHHHHHHHHHHHGHHHGGHHHH3GFHEFHHHHHGHHGFHHHHHFGHHHHHGHGHGGHGGGGGGGHHHGGCGGGGHHGGGGGGGGGGGGGGGGGGGF-BAEFEBEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFAFEFDFFFFFFFFFF0BFBED=@DFFFFFFFFFEFFFFFBFAFB;0:;F0\tAS:i:-137\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T30G38A140A0A1\tYS:i:-138\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1110:16559:7507\t163\tchrM\t1\t23\t3M35I213M\t=\t1\t251\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAAT\t>AABBCCCCFFFGGGGGGGGGGHHHHHHHHHGGHGGHGHFHHHHFHHHHHHHHHHFHHGHHHHGHHHHHGGEEGHHHHHHHHHHHHHHHHHHHHHHGHGHGHHGGGGGGGHHGGGFGAGFGGGGGGGGGGGDDDFAGGFFFFCFAFEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFE..@BFFBD./;:0FFFFF09B/AFCA=-99BFFBFFFFFFFB:BFBFFBFB9:\tAS:i:-125\tXN:i:0\tXM:i:3\tXO:i:1\tXG:i:35\tNM:i:38\tMD:Z:1A0T69A143\tYS:i:-8\tYT:Z:CP\n********\n*SNIP *\n********\n@@ -179,6 +162,24 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11310:21761\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTT\tCCCCBFFFFFFFGGGGGGGGGGGHHHHHHHHHHHHGHHHHHGGGGGHHHHHGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHGHHHGHHHGHGHHGHHHHGGHGGG=FFGEHHHHHGHFGGHHGHHHHHFHHHHHHHGGHHHHHHHGHEHHGHHHHHGGGGF9AGE?DEGFFGGGGGGGGGGGGGGFFFF/9FFBFFFFFFFEFFFBFFFFFFFFFFFFEFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11310:21761\t141\t*\t0\t0\t*\t*\t0\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCTCC\tBCCCCFCCCCCCGGGGGGGGGGHHHHHHHHGGGGGHHHHHHHHGHHHHHHHHHGHHHHHHHHGHHHHHHHHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHGHHHDGHHHHHHHHHHHHHHHHHGHHHHHGGGGGGHHHHHGHHHHHHHHFFHHHHHCCAHFHHGGFFFFFFFFFAA;BDDFFFF00.-=D.ABDA-.::AAF;F@.AAD./0000.9-;.9:00009:F090;FF000900;\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11578:14676\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTC\tCDDDDFFFBFFCGGGGGGGGGGHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHGGGGGHHHHFGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGHHHHGGGGGGHGGHGHHHHHHH;CHHHHHHHHHHHHHHHGHGGGGFGGGFGGGGGGGGGGGGFGGGEGGFFFFFFFFFFFFFFFFFFFFFFFFF/FFFFFFFFFFFFFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11578:14676\t141\t*\t0\t0\t*\t*\t0\t0\tGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGT\tCCBCCCBBCCCCGGGGGGGGGGHGGGGGHHHHHHHGHHHHGHHHHHFFFGGHGHHHHHHHHHHHHHHHHFGHHHHHHHGHHGHFHFGHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHDGGCGHHHHHHHHHHHHHFF<GGHHHHGFGHGEHGGA=A=DFFFFAFAFF?FFFFFFFFFADFAAD;FFFA:BBBAE.A.EBFFFFEF-..0BFFF9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:13575:19255\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGTTCCCGTGAGTGGTTAATAGGGTGATAGGCCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tAA1A1DFFFFFBGG3A111FFAEGDDBGFDHF00F01BBA00BFGEHFBFFA1FABB0FAE?CFHF1BGFHFB0011F121E//>>1F10>B?EFHGCC/?/BFG/EEGFFEE//BCFDE0?E@@B/?11</?//<@?/F<<<A-<FBGH0.00=G0<<C//./0;;GC....<C.=.00;;BB./:.900////.C000;0090;..//000;C/;;/B/9BA9A9-AEEFF?B---;B99//9/;A//9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:13575:19255\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTGGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTAACTATTACAG\tAA>>ABFDCFFFFFDGFGFDGDEG1EGEFFBFHFGHA0E00A0CAAC0FFDFFAGHFEHHFDH/EAFCFFHACGHHAFFEF2DFFG/FGHHHHGHGH0C@/E@GGC0FG10>GGFGHHGHFFBGFGB2>F<EEF0@C@9:AAF00;9@-9.;FBBBBB->@;-A@FF<-;---@-;-----;-BFF/;---9//BBFFFF//B;FF///9BF///;/;B/BBFBFFBB/;-9--///;9/:-;BFFBBB9F\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:17564:15723\t77\t*\t0\t0\t*\t*\t0\t0\tTATGCTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAA\tEDCCDFFCEEDCGGGGGGGGGGHHHHHGFGHGGHGGHHHHHHHHGHHEHHGGGGGHHHHHHHHHGHHHGHHHHGGGGGHHHHFFGHHHGGGGGGHHHGGGGGHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHFEHHHHHHHHHHGHHGHGGHGGGCGGGGHHH1FGGGFGGFGGGGGGGGGGEFGGGGGGGGGGGGGGGGGFFFFFFFFFFAEFFFFFFFFFFBBFBBFFFFFE1:BFFB0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:17564:15723\t141\t*\t0\t0\t*\t*\t0\t0\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCCCCCCCCFFFGGGGGGGGGGHHHHGHHGHHHHHHGHHHHHHFHHHHGGGGHHGHFHHHHHHHFHHHHHHHGHGGHGGHGHHHHFHFHHGHHHHHHHHHHHHHEHGHHHHHGGGGGHHHHGEHHGHHHHHHGHFGHFHGGAHGGHGGGCCBDFGFFAFDBDDFFFFFBDA;AAD-ADC?AFEFB-@@AAEFEFFFFF..-:.B0:FFFFFFEF0BFF09FF.0;9BFFFFF0BFFFFFF?.::-909;.9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:18108:12091\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACAC\tCCCCCFBFFFFFGGGGGGGGGGHHHHHHHHHHHHHGGGGGGFHHHBFGHHHGGGGGGHHGGGGGHHGFGGHHHHHHGGGGGGHGHFGGGGGGDGEGEFGCHHHHHHHHHHGHHHHGEDHHHGGGCDGGGGFHFHGHHHGHHGHFGHHHFHHGFHHHFHHGGHFHFHHGB0CGHGFHCBGGGGEDEE9ADFEFFFGFBFGFFGGFFFFFGGFGFFFFFFFF/A?FEFFFFFEF-A.B//;BFFEF//BB///\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:18108:12091\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\tCBBCCFCCCCCFGGGGGGGGGGHHGHHHHFHHHHHHFHGHHHHFHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHGHHHHGHFHGHHGHHHHHHGHHHHHHGHHHHHGGGGGHHHHHHHHGHHHHHGFGHHHHHGHDHGHHGCA;?AAFGFEFDFFF.FFFFEBDFFFFFFFFBFFFFFFFFFEFEFFFEFFFFFFF.:BFFF0BFFFFFFFFFFFF;0FF0;BFFFFFFFFBFFFBFEFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTT\tABBBBFFFFFFFGGGGGGGGGGHHGHGHHHGHHHFGHGFGHFEHGGHGGHHHGHHHHFGHGGFGFFHHFHHHHEGHFHHHHHFGGGGGHGGGHGFHGHGGGGGGHHHGGGGHHGGGGHHHGGHGGGGGGHHHHGGGGGCFHGGGCDGHGHHHFHEHHHHHHHHHEEFHHGG:C:?0<EFGBFGGGGGFE.BFGEFFFGFFGGGGGGFDEF/FFGFFFFFFF;BBFA;.:EFFE:AAFEF.BFFFFF;9FF.\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tBBBBAFFFFFFFGGGGGGGFGGHHHHHHHHFHHHFHHHHGHHHHHHHHGHHHGHHEGHHHGDGCHHHHHHHHHGEHEHHHHHHHFHGGEGGHHHHHHHGEGHGHHDHHHHHHHHEHFHGHGHHHGEGCEHHFHHHGHHHHHHHF?GHHHFEFFAFFHHGG?;@DDFFB?@B;BDAFFFEBBD>D>D9@DDCFFFFFFCFDFE.AA;/BB/.;-.;BFBBBFFBFFFFFFF/9FF?/;/BBFFFFF/;FFB/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\t3>>A@FFFFFFFGGGFEECFGGFFB5GBHH5DFH5GBEEAEFHFHHF3F3GHFHHHEF3GAEHBGFHFFEFFHHHHFFB31FGGEGFHGEHHHHHHHHHHHHHHHHHEEEEGHHHFFF3GF3FGF44BBGEHHHHGG2B/BGGHE</ECDFHHBF1DGBFBFGFH<1GHGDGGFDFE0/<--;-9./BBED;BFBD/BF9BFFFDBFDADD;FFF?->;B=.9.;.BBFFF..;A;/B/;B//;;//BBF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tBBCCCFFFCBCCGGGGGGGGGGHGHGHHGFGFGFHGGHHGHHHHHHHHFHHGGGGAGFBGHHHFBBGH5GDHH5EEEGEHEGFBF1DGFDGFGGGBBCEEGEHFEFDDHFBFHFD/@BGDGDHHGDCCFCD/C<->.ADDGE1GA<DBGFGHBG/..DGFCDGD.:0:.;CFGHEHBF.A-99CFGGFF0C0C0BF0;CA9/B:///;//BF/9B9?-..:;.;9.9A././;B//F.B?A////9;:/:/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tA>ABAFA?D@AFGGGGFGGGFGFHHHFFH4BCBGHHHHGFFF3G5BF3322EEAFHHHHHHAB5GHFHEHFHHH3BEEHFGF5@13FDF3GDGFHHFGHHHGHHHGFGGHHFCG//?/EGHHHG3F4BFFGHHHEDGFHHB/B/?FBF<@-9?BDEFFF?B--?DFFFB9FA>B;A.BFDB?AB.--@;-.FFAEFFFF9AE;DDFFFFB/9BFFFFFFFB:BF/BB/BFF//FFF-=--.99=--.9///\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tAAAAAFFFFFFFGGGGGGFGGGHHGGHHHGGGGGGHGHGDFGHFGGGGFHHHHHGGGGGGGGFHGDFGGGGHGG?@EFHGEFEHEGFHHHHHF2FEHHGHGDCEAD?GFDFGGHBGHHFEHHHHHHHHHDFGHGHHGBDFG0FFHFGGFHHH=GGBF-AACEHEHHGGGHHHGHHFHCCFEBB0FFFFFF/;0;;FFFBFE.AA0BF0??-AD/////;:BFFBFFBBBFFFFFB/.9ADDAD-D;-;=A-\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\t@?AAAFFBFBFFFGGFGFGGGEFCGGHHHHFGHGHFHGHHHHGGFGGFGHHGHGHHHHGHGFFHHGGGGGHHHHHHHHHBFHHEFHHHHHHGF?FAGHGFHHHGDGFHHGGGHGHFHHHGHHHGHHFHHGFFGFHHHGHHHHFFHHHHH/FGHHHHGHGHG<C???B=@ABBFEF@=-AFFFFFFBFAFFDFFFFA?AFFCFFABEFFFFFFFFF?FFFDFFBFF;FFEFFEFFFFFFFAF///9FF/BB/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tBBBBBFFFFFFFEGGGGGGGGGGHHHHHHHHGHGGHHHHGFGGG?HGGHHHHHHHGGHGFGHGEEGFHHHHHHHHHHHFHHFHHGGCGGGHHHHBFGFFHGGGEFGHHGFFEEFHGGDGEHFHHHGGGCCCGHHG?EGFGGGFED@D?CEDFHEHGHFFHFHHGCGG.:CGGD:AEDCG?C?BFFFGGG/CEFBFEFFF/;:BBB;CFGD.:/:B:BB/BFFFBBFBFFAA9A..9-9@:/./;B/9/:/;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n"], "status": "failure"}}, {"id": "bowtie2/2.4.2+galaxy0-4", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 4, "time_seconds": 59.817020416259766, "inputs": {"library|input_1": {"src": "hda", "id": "cef31a15650e6715"}, "library|unaligned_file": false, "library|type": "paired_interleaved", "reference_genome|own_file": {"src": "hda", "id": "bcbb0a842707b6f7"}, "reference_genome|source": "history", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "29697e206a419a0e", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:26:07.614150", "create_time": "2024-02-11T14:25:19.359526", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-wnmlr", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/1/f/4/dataset_1f4ac5b5-6710-412b-8e45-1d3b70744054.dat' genome && ln -s -f '/galaxy/server/database/objects/1/f/4/dataset_1f4ac5b5-6710-412b-8e45-1d3b70744054.dat' genome.fa &&   ln -s '/galaxy/server/database/objects/a/e/5/dataset_ae54b004-c56a-4ae9-b8fd-02745dd8ba3e.dat' input_il.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   --interleaved 'input_il.fastq'                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/2/7/2/dataset_272b2b79-f3f0-433f-8c7c-44e3146eb04c.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"CN\": \"\", \"DS\": \"\", \"DT\": \"\", \"FO\": null, \"KS\": \"\", \"PG\": \"\", \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": \"false\"}, \"rg_selector\": \"set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 340, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 3, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 339, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_interleaved\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "cef31a15650e6715", "src": "hda", "uuid": "ae54b004-c56a-4ae9-b8fd-02745dd8ba3e"}, "own_file": {"id": "bcbb0a842707b6f7", "src": "hda", "uuid": "1f4ac5b5-6710-412b-8e45-1d3b70744054"}}, "outputs": {"output": {"id": "b90b3c139169de1c", "src": "hda", "uuid": "272b2b79-f3f0-433f-8c7c-44e3146eb04c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/f/4/dataset_1f4ac5b5-6710-412b-8e45-1d3b70744054.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\nGetting block 4 of 30\n  bucket 1: 20%\n  Reserving size (777) for bucket 4\n  bucket 2: 10%\n  Calculating Z arrays for bucket 4\n  bucket 1: 30%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 1: 100%\n  bucket 4: 60%\n  bucket 3: 80%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 2: 100%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block of length 629 for bucket 3\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\nGetting block 7 of 30\n  bucket 5: 70%\n  bucket 6: 80%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 7: 10%\n  bucket 6: 100%\n  bucket 5: 90%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 20%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 7: 40%\n  Sorting block time: 00:00:00\n  bucket 7: 50%\nReturning block of 306 for bucket 6\n  bucket 7: 60%\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  bucket 9: 10%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  bucket 19: 10%\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\nGetting block 27 of 30\n  bucket 26: 70%\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 80%\n  bucket 27: 10%\n  bucket 26: 90%\n  bucket 27: 20%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\nGetting block 29 of 30\n  Calculating Z arrays for bucket 28\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 2: 60%\n  bucket 3: 70%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  bucket 4: 70%\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 2: 70%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  bucket 5: 30%\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 7: 30%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 7: 40%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 9: 100%\n  bucket 10: 70%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 13: 60%\n  bucket 14: 80%\n  bucket 13: 70%\n  bucket 14: 90%\n  bucket 13: 80%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 30%\n  bucket 16: 10%\n  bucket 15: 40%\n  bucket 16: 20%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 15: 70%\n  bucket 16: 40%\n  bucket 15: 80%\n  bucket 16: 50%\n  bucket 15: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  bucket 18: 80%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\nGetting block 21 of 30\n  Calculating Z arrays for bucket 20\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 21: 10%\n  bucket 20: 20%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 20: 30%\n  bucket 21: 40%\n  bucket 20: 40%\n  bucket 21: 50%\n  bucket 20: 50%\n  bucket 21: 60%\n  bucket 20: 60%\n  bucket 21: 70%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 21: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\nGetting block 25 of 30\n  Calculating Z arrays for bucket 24\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  bucket 28: 10%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 29: 80%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n50.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n50.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/f/4/dataset_1f4ac5b5-6710-412b-8e45-1d3b70744054.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\nGetting block 4 of 30\n  bucket 1: 20%\n  Reserving size (777) for bucket 4\n  bucket 2: 10%\n  Calculating Z arrays for bucket 4\n  bucket 1: 30%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 1: 100%\n  bucket 4: 60%\n  bucket 3: 80%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 2: 100%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block of length 629 for bucket 3\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 6: 70%\nGetting block 7 of 30\n  bucket 5: 70%\n  bucket 6: 80%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 7: 10%\n  bucket 6: 100%\n  bucket 5: 90%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 20%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 7: 40%\n  Sorting block time: 00:00:00\n  bucket 7: 50%\nReturning block of 306 for bucket 6\n  bucket 7: 60%\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  bucket 9: 10%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  bucket 19: 10%\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\nGetting block 27 of 30\n  bucket 26: 70%\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 80%\n  bucket 27: 10%\n  bucket 26: 90%\n  bucket 27: 20%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\nGetting block 29 of 30\n  Calculating Z arrays for bucket 28\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 2: 60%\n  bucket 3: 70%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  bucket 4: 70%\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 2: 70%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  bucket 5: 30%\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 7: 30%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 7: 40%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 9: 100%\n  bucket 10: 70%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 13: 60%\n  bucket 14: 80%\n  bucket 13: 70%\n  bucket 14: 90%\n  bucket 13: 80%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 30%\n  bucket 16: 10%\n  bucket 15: 40%\n  bucket 16: 20%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 15: 70%\n  bucket 16: 40%\n  bucket 15: 80%\n  bucket 16: 50%\n  bucket 15: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  bucket 18: 80%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\nGetting block 21 of 30\n  Calculating Z arrays for bucket 20\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 21: 10%\n  bucket 20: 20%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 20: 30%\n  bucket 21: 40%\n  bucket 20: 40%\n  bucket 21: 50%\n  bucket 20: 50%\n  bucket 21: 60%\n  bucket 20: 60%\n  bucket 21: 70%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 21: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\nGetting block 25 of 30\n  Calculating Z arrays for bucket 24\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  bucket 28: 10%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 29: 80%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:25:58", "plugin": "core", "name": "end_epoch", "raw_value": "1707661558.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:25:57", "plugin": "core", "name": "start_epoch", "raw_value": "1707661557.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_qohvuhxw.sam v. /tmp/history_bam_converted_to_sam_0lrzrpdc.sam )\n--- local_file\n+++ history_data\n@@ -1,7 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n @RG\tID:rg1\tPL:CAPILLARY\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome --interleaved input_il.fastq --rg-id rg1 --rg PL:CAPILLARY\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome --rg-id rg1 --rg PL:CAPILLARY --interleaved input_il.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/248/tmp -O bam -o /galaxy/server/database/objects/2/7/2/dataset_272b2b79-f3f0-433f-8c7c-44e3146eb04c.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t153\tchrM\t1\t3\t4M23I224M\t=\t1\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tFB099BFFFBFBBFEF?EFFFB090FFFFFFFFFFD;;.GFFGFGFA0FGFFEFEGGGFBCE;BGHHFFGHGEHFHHHHGFE@ECCDCGGGGGEHFFFGGGGGBHHGFGGGCGHHGGGGGGHGGGGGGHHHDGCFFBHGGGGGHHHHHFHFHGGGHHHHGHGGGGGHHHGGHGHHHHHHHGGHGGHHGGHHHHHHHEHHHHHHHHGGGGHHHHHHHHHHHHHHHHGHHHGGGGGGGGGGFFFFCFFCCCCB\tAS:i:-99\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:23\tNM:i:29\tMD:Z:0G0A0T0C11A56A155\tYT:Z:UP\tRG:Z:rg1\n"], "status": "failure"}}, {"id": "bowtie2/2.4.2+galaxy0-5", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 5, "time_seconds": 62.88362145423889, "inputs": {"library|input_1": {"src": "hda", "id": "f7d50de1e6032a0f"}, "library|input_2": {"src": "hda", "id": "58a1bb9ac08725c8"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "bc2f7bbcf8d5e9a9"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "b56786805c8995bd", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:27:10.873515", "create_time": "2024-02-11T14:26:23.917248", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-t7wfj", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/c/c/c/dataset_ccc1fd34-8efa-43f7-b4c5-ef5515400c5f.dat' genome && ln -s -f '/galaxy/server/database/objects/c/c/c/dataset_ccc1fd34-8efa-43f7-b4c5-ef5515400c5f.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/4/2/8/dataset_42887135-9631-4b68-b253-fdd58794df87.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/5/3/7/dataset_53703e37-21de-4305-80c0-92eb3747294b.dat' input_r.fastq.gz &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq.gz' -2 'input_r.fastq.gz'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/9/e/5/dataset_9e5142b7-54d2-4675-85b9-21f80299c0cf.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 344, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 342, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 343, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "f7d50de1e6032a0f", "src": "hda", "uuid": "42887135-9631-4b68-b253-fdd58794df87"}, "input_2": {"id": "58a1bb9ac08725c8", "src": "hda", "uuid": "53703e37-21de-4305-80c0-92eb3747294b"}, "own_file": {"id": "bc2f7bbcf8d5e9a9", "src": "hda", "uuid": "ccc1fd34-8efa-43f7-b4c5-ef5515400c5f"}}, "outputs": {"output": {"id": "747ef682e3209dfc", "src": "hda", "uuid": "9e5142b7-54d2-4675-85b9-21f80299c0cf"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/c/c/dataset_ccc1fd34-8efa-43f7-b4c5-ef5515400c5f.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 4 of 30\n  Reserving size (777) for bucket 3\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 1: 40%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 2: 100%\n  bucket 1: 100%\n  bucket 3: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\nGetting block 7 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 7\nGetting block 8 of 30\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 8: 50%\n  bucket 6: 60%\n  bucket 7: 50%\n  bucket 5: 60%\n  bucket 8: 60%\n  bucket 6: 70%\n  bucket 7: 60%\n  bucket 5: 70%\n  bucket 8: 70%\n  bucket 6: 80%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 7: 80%\n  bucket 8: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 247 for bucket 10\nReturning block of 547 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  bucket 13: 50%\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 60%\n  bucket 14: 10%\n  bucket 13: 70%\n  bucket 14: 20%\n  bucket 13: 80%\n  bucket 14: 30%\n  bucket 13: 90%\n  bucket 14: 40%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\nGetting block 16 of 30\n  Calculating Z arrays for bucket 15\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 15: 10%\n  bucket 16: 40%\n  bucket 15: 20%\n  bucket 16: 50%\n  bucket 15: 30%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 15: 40%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 15: 50%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 17: 10%\n  bucket 18: 20%\n  bucket 17: 20%\n  bucket 18: 30%\n  bucket 17: 30%\n  bucket 18: 40%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 40%\n  bucket 20: 10%\n  bucket 19: 50%\n  bucket 20: 20%\n  bucket 19: 60%\n  bucket 20: 30%\n  bucket 19: 70%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 20: 60%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 30\n  Entering block accumulator loop for bucket 23:\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 30%\n  bucket 24: 40%\n  bucket 23: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 50%\n  bucket 24: 80%\n  bucket 23: 60%\n  bucket 24: 90%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Entering block accumulator loop for bucket 25:\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 26: 50%\n  bucket 25: 90%\n  bucket 26: 60%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\nGetting block 29 of 30\n  bucket 28: 40%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 50%\n  bucket 29: 10%\n  bucket 28: 60%\n  bucket 29: 20%\n  bucket 28: 70%\n  bucket 29: 30%\n  bucket 28: 80%\n  bucket 29: 40%\n  bucket 28: 90%\n  bucket 29: 50%\n  bucket 28: 100%\n  bucket 29: 60%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 4: 60%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 1: 80%\n  bucket 4: 70%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 4: 80%\n  bucket 3: 60%\n  bucket 1: 100%\n  bucket 4: 90%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 3: 70%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\nGetting block 6 of 30\n  bucket 5: 70%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 80%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 90%\n  bucket 6: 10%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\nGetting block 8 of 30\n  Calculating Z arrays for bucket 7\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 7: 10%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 7: 20%\n  bucket 8: 50%\n  bucket 7: 30%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 7: 40%\n  bucket 8: 80%\n  bucket 7: 50%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  bucket 7: 60%\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  bucket 9: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 40%\n  bucket 12: 10%\n  bucket 11: 50%\n  bucket 12: 20%\n  bucket 11: 60%\n  bucket 12: 30%\n  bucket 11: 70%\n  bucket 12: 40%\n  bucket 11: 80%\n  bucket 12: 50%\n  bucket 11: 90%\n  bucket 12: 60%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  bucket 12: 70%\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Entering block accumulator loop for bucket 15:\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 15: 40%\n  bucket 16: 40%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 15: 60%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 16: 90%\n  bucket 15: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\nGetting block 21 of 30\n  bucket 20: 20%\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 20: 50%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 20: 90%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\nGetting block 25 of 30\n  bucket 24: 30%\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 40%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 25: 10%\n  bucket 24: 70%\n  bucket 25: 20%\n  bucket 24: 80%\n  bucket 25: 30%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\nGetting block 29 of 30\n  Calculating Z arrays for bucket 28\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 28: 20%\n  bucket 29: 30%\n  bucket 28: 30%\n  bucket 29: 40%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 29: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/c/c/c/dataset_ccc1fd34-8efa-43f7-b4c5-ef5515400c5f.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 4 of 30\n  Reserving size (777) for bucket 3\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 1: 40%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 2: 50%\n  bucket 1: 50%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 1: 90%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 2: 100%\n  bucket 1: 100%\n  bucket 3: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\nGetting block 6 of 30\nGetting block 7 of 30\n  Calculating Z arrays for bucket 5\n  Reserving size (777) for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 7\nGetting block 8 of 30\n  Entering block accumulator loop for bucket 6:\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 5: 20%\n  bucket 6: 20%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 8: 30%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 5: 50%\n  bucket 8: 50%\n  bucket 6: 60%\n  bucket 7: 50%\n  bucket 5: 60%\n  bucket 8: 60%\n  bucket 6: 70%\n  bucket 7: 60%\n  bucket 5: 70%\n  bucket 8: 70%\n  bucket 6: 80%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 7: 80%\n  bucket 8: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 247 for bucket 10\nReturning block of 547 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  bucket 13: 50%\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 60%\n  bucket 14: 10%\n  bucket 13: 70%\n  bucket 14: 20%\n  bucket 13: 80%\n  bucket 14: 30%\n  bucket 13: 90%\n  bucket 14: 40%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\nGetting block 16 of 30\n  Calculating Z arrays for bucket 15\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 15: 10%\n  bucket 16: 40%\n  bucket 15: 20%\n  bucket 16: 50%\n  bucket 15: 30%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 15: 40%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 15: 50%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 17: 10%\n  bucket 18: 20%\n  bucket 17: 20%\n  bucket 18: 30%\n  bucket 17: 30%\n  bucket 18: 40%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 40%\n  bucket 20: 10%\n  bucket 19: 50%\n  bucket 20: 20%\n  bucket 19: 60%\n  bucket 20: 30%\n  bucket 19: 70%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 20: 60%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 30\n  Entering block accumulator loop for bucket 23:\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 30%\n  bucket 24: 40%\n  bucket 23: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 50%\n  bucket 24: 80%\n  bucket 23: 60%\n  bucket 24: 90%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 30\n  Entering block accumulator loop for bucket 25:\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 26: 50%\n  bucket 25: 90%\n  bucket 26: 60%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\nGetting block 29 of 30\n  bucket 28: 40%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 50%\n  bucket 29: 10%\n  bucket 28: 60%\n  bucket 29: 20%\n  bucket 28: 70%\n  bucket 29: 30%\n  bucket 28: 80%\n  bucket 29: 40%\n  bucket 28: 90%\n  bucket 29: 50%\n  bucket 28: 100%\n  bucket 29: 60%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 4: 60%\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 1: 80%\n  bucket 4: 70%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 4: 80%\n  bucket 3: 60%\n  bucket 1: 100%\n  bucket 4: 90%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 3: 70%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\nGetting block 6 of 30\n  bucket 5: 70%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 80%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 90%\n  bucket 6: 10%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\nGetting block 8 of 30\n  Calculating Z arrays for bucket 7\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 7: 10%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 7: 20%\n  bucket 8: 50%\n  bucket 7: 30%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 7: 40%\n  bucket 8: 80%\n  bucket 7: 50%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  bucket 7: 60%\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  bucket 9: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 40%\n  bucket 12: 10%\n  bucket 11: 50%\n  bucket 12: 20%\n  bucket 11: 60%\n  bucket 12: 30%\n  bucket 11: 70%\n  bucket 12: 40%\n  bucket 11: 80%\n  bucket 12: 50%\n  bucket 11: 90%\n  bucket 12: 60%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  bucket 12: 70%\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 30\n  Entering block accumulator loop for bucket 15:\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 15: 40%\n  bucket 16: 40%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 15: 60%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 16: 90%\n  bucket 15: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\nGetting block 21 of 30\n  bucket 20: 20%\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 20: 50%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 20: 90%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\nGetting block 25 of 30\n  bucket 24: 30%\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 40%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 25: 10%\n  bucket 24: 70%\n  bucket 25: 20%\n  bucket 24: 80%\n  bucket 25: 30%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\nGetting block 29 of 30\n  Calculating Z arrays for bucket 28\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 28: 20%\n  bucket 29: 30%\n  bucket 28: 30%\n  bucket 29: 40%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 29: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:27:02", "plugin": "core", "name": "end_epoch", "raw_value": "1707661622.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:27:01", "plugin": "core", "name": "start_epoch", "raw_value": "1707661621.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_enx21xqt.sam v. /tmp/history_bam_converted_to_sam_8td2k7m8.sam )\n--- local_file\n+++ history_data\n@@ -1,30 +1,31 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 input_f.fastq.gz -2 input_r.fastq.gz\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/252/tmp -O bam -o /galaxy/server/database/objects/9/e/5/dataset_9e5142b7-54d2-4675-85b9-21f80299c0cf.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3>AAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n********\n*SNIP *\n********\n M01368:8:000000000-A3GHV:1:1108:11059:23181\t165\tchrM\t2\t0\t*\t=\t2\t0\tAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACC\tCCCCCFFFFFCCGGGGGGGGGGHHHHHHHHHHHGHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHHHHHHHHHHHHHGHGHEHHGFCGGGHHHHHHHHHHHHHHHFGHHHHHGHGHGHHGGGBFGFFFFEAFFFA.BFFFEFDDFFFFFFFFFFEEFF;D;EFFFFFF0BFFFADDFFFFFBFBFFFFFBB0FFFF0::0BF000BFFFBBF0EDFF@\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1108:25084:18127\t161\tchrM\t2\t8\t4M24I223M\t=\t1\t-238\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tCCCCCFFFFFFFGGGGGGGGGGGGHHHHHHHHFHHHHHHHHHHHHHHGGHHGHHHHHGGGGFHHHHHFHHHHHHHHHGGHHHHHCGGHGHHGGGGGGGHHGGGGGGGGHHHGHHGGGGGGGGGGGGGGGG@CDE?EFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFE;DFBFFFFFFFFFFFFFFFFFFFAFFFFFFFBFFE0BBBFFFFFFFFFFBFFFF9BB0:0:B;\tAS:i:-97\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYS:i:-65\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M2I15M\t=\t1\t-246\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tCCCCCFFFFFFCGGGGGGGGGGHHHHHHHHHFFHHHHGGGGGHFFFHHFHHHHHHHHHHHHHHHGFEGGGHGEDFCDFHGHFG@@DGGHHHHHHGGGGCGGGGGEHGGCGBB?CF99EGFGGFGG?D9CFFFF/BBFFFFFEF9BFFAFFFFEFFFFFFFFFFFFFFFFFFFFF.FFBBFFFFFFFFFFFF-9;;;BFFFFFB9BFBFBFABFFEFFFFFFFFFF::BFFBFFFF.9//;FFFFF/BFFB/\tAS:i:-78\tXN:i:0\tXM:i:12\tXO:i:2\tXG:i:6\tNM:i:18\tMD:Z:2C0A67A115A42A0T0A0A1A3A0C0A3\tYS:i:-78\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1110:23303:11846\t101\tchrM\t2\t0\t*\t=\t2\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGTGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTC\t3ABB?FAB?DAAGGGFBGGBB5AFFFGFHHGGGEGHHHFHHF3EGFHHHHEFHHGGHHHGH3EFHHHHHBDGHHE?ECHGHGHHHHHHFHHHGHHHHHHHGGHGGFHHHFHHGFFHHFEGFHHHHHHEHHFDAGHHHH/BDDFGGH1FDBGHHHHHHHCGHHHFH?0CGCF>CC=@--AFBFFB?=BFDFFF//FDB;-9A-AD-.A.A=?-9-:B/AEB/BFF.A;DDFFFBBFFFF/BBFFFFBFF9B;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:14287:20817\t97\tchrM\t2\t8\t2M36I213M\t=\t1\t-250\tGCCAACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTCATCGCACCTACGTTCACTATTACAGGCGAACATACTTATTAAAGTGTGTTAATTAAT\t>>A3>AAAACFFFGFGFGGGGGHGHHHHHHHGGGGGHGHFFCGHHGBGHFHHHHAGHHHHEHHAGFFEHEAE?GHHHHEGFFFDGHGHBFFHFHHHGHGHGHBECG@@@EHGGEGCGGGGFFGGGG?BGGGGGG.-C.FEDCFFFEFFFAF/99BEFA.:9BFB/9FFFEFFFFFFEFFF/FBBFFFFFFFFFFFB//;.@@//;DFFFF//BBFFFBF;A;DF=>B//;9B//B/;/;9//9//;B/:B9\tAS:i:-137\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:36\tNM:i:42\tMD:Z:0A0T69A85T16A21C18\tYS:i:-32\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1111:23624:14516\t165\tchrM\t2\t0\t*\t=\t2\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACCCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tBBBBABFFFFFFGGGGGGGGGGHHCGHHHHHHHGHHHHHHHHHHHGDGEHHHHHHGHHHHHHHHHHHHHHHGGEFGHHHHHHHHBGFHHHHHHHHHHHHHHGHGGGGCEFGGCGHHHHFHHHHGHHHHFGHHHHHHGHGHGHHBCA?B-9FGFG?D;BD?9BFFFFFFF;DFFFF-.A;ADF-@=EF??A.BFFFEF>FDFFFFFFFFFFFBFFFFFFFFFFF/FFF/BFFFFFFFBA.?@;FFBDFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:2404:13066\t161\tchrM\t2\t8\t4M4I226M2I15M\t=\t1\t-246\tATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGACCATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACTGTCTCTTATACACATT\tCCCCCFFFFFFCGGGGGGGGGGHHHHHHHHHFFHHHHGGGGGHFFFHHFHHHHHHHHHHHHHHHGFEGGGHGEDFCDFHGHFG@@DGGHHHHHHGGGGCGGGGGEHGGCGBB?CF99EGFGGFGG?D9CFFFF/BBFFFFFEF9BFFAFFFFEFFFFFFFFFFFFFFFFFFFFF.FFBBFFFFFFFFFFFF-9;;;BFFFFFB9BFBFBFABFFEFFFFFFFFFF::BFFBFFFF.9//;FFFFF/BFFB/\tAS:i:-78\tXN:i:0\tXM:i:12\tXO:i:2\tXG:i:6\tNM:i:18\tMD:Z:2C0A67A115A42A0T0A0A1A3A0C0A3\tYS:i:-78\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t83\tchrM\t2\t40\t1M10I240M\t=\t1\t-242\tATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAAC\t//A:D9/FBFFFFFB;//FFBA@:..BFFFFFA0A;;D;:.GGFBFEC//BAGFBEGGGFFGHFHCDC@CC.ACGCCDCGF1.?GDCA/HHHGHGGGCGGHGGDGGGHGDGDCGGHHGEGHFHFGGGGEGHHHHHHGHHHHGFHHGHFGGGGHHBFHHHHHHHHGGGFHEEGB5EFHFGHHGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHGCGHHHHHHHGHHHHGGHGGGGGGGGGGFFFFFFFAAAAA\tAS:i:-41\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:14A56A169\tYS:i:-45\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:5446:12248\t89\tchrM\t2\t0\t4M39I208M\t=\t2\t0\tATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATT\tFFFEFFFFFEFFFFFFBFFFFFFFFFFBFFFFFFFFFGGFFFFGGGGGGGF?;/GGGGGEGE;EF:GGGGGGHHHHGGGHFHHHHHHHHHHHHHGGGGGGHGGGGGGGHHGHGGGGGGHHHHHHGGGGHHGGFGHHHGGGGGGHHHGFFHHHHGGGGGHHHHHHHHHGHHHHHHHHGGGGGHGHGHHHHHHHHHHGGHGGHGBGHHHHHHHHHHHHHHHHGGGGHHHHHGFGGGGGGGGFCCFFFFDCCCC\tAS:i:-137\tXN:i:0\tXM:i:3\tXO:i:1\tXG:i:39\tNM:i:42\tMD:Z:2C0A67A140\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1102:18842:24844\t153\tchrM\t2\t3\t4M24I223M\t=\t2\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tFB:/BFFBFF;////FA9.FFFBFFFFFFFF9FBB/.A/FEF09FGEC?C9DEGFGEFEGGGFFFGFFGGHFCHHHFFHFDD@-EA?CFGGGGHHHHGDACDFEHHHHHGGGGHHGGGGHHHGGGGGGHGGCEFGHHHGGGGGHHHHHHHHHHHGFHHHFHGGGGGHHGHHHHHHGHHHHGGHGGHHHGHGHHHHHFHHHHHHHHGGGGHHHHHHHHHHHHHHHHGHHHGGGGGGGGGGFFFFBFFBCCCC\tAS:i:-95\tXN:i:0\tXM:i:4\tXO:i:1\tXG:i:24\tNM:i:28\tMD:Z:0A0T1A67A155\tYT:Z:UP\n@@ -179,6 +180,8 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n@@ -199,5 +202,3 @@\n M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH<1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n"], "status": "failure"}}, {"id": "bowtie2/2.4.2+galaxy0-6", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 6, "time_seconds": 63.39150023460388, "inputs": {"library|input_1": {"src": "hda", "id": "915fc7fd3f293a8a"}, "library|input_2": {"src": "hda", "id": "d82a661817b448ba"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "466455ab04101889"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "4447ce2a87ec53fe", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:28:14.071456", "create_time": "2024-02-11T14:27:26.304609", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-6rxjv", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/9/c/6/dataset_9c615401-eba6-4d86-b566-b03669ce6c15.dat' genome && ln -s -f '/galaxy/server/database/objects/9/c/6/dataset_9c615401-eba6-4d86-b566-b03669ce6c15.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/d/c/e/dataset_dce45200-a0f5-4378-b294-11e743400285.dat' input_f.fastq.bz2 &&  ln -f -s '/galaxy/server/database/objects/e/2/5/dataset_e25a2fa5-a446-4f9b-82c1-04356eaafb4b.dat' input_r.fastq.bz2 &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq.bz2' -2 'input_r.fastq.bz2'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/7/d/2/dataset_7d29ce70-59de-4e84-9a59-e9f88e46731c.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 348, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 346, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 347, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "915fc7fd3f293a8a", "src": "hda", "uuid": "dce45200-a0f5-4378-b294-11e743400285"}, "input_2": {"id": "d82a661817b448ba", "src": "hda", "uuid": "e25a2fa5-a446-4f9b-82c1-04356eaafb4b"}, "own_file": {"id": "466455ab04101889", "src": "hda", "uuid": "9c615401-eba6-4d86-b566-b03669ce6c15"}}, "outputs": {"output": {"id": "1c317f9d4de8d86b", "src": "hda", "uuid": "7d29ce70-59de-4e84-9a59-e9f88e46731c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/9/c/6/dataset_9c615401-eba6-4d86-b566-b03669ce6c15.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 1: 20%\n  bucket 2: 30%\n  bucket 4: 30%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 2: 40%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 1: 50%\n  bucket 2: 70%\n  bucket 3: 40%\n  bucket 4: 70%\n  bucket 2: 80%\n  bucket 1: 60%\n  bucket 4: 80%\n  bucket 3: 50%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 1: 70%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\nGetting block 6 of 30\n  bucket 5: 40%\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  bucket 5: 50%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 60%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 5: 70%\n  bucket 6: 20%\n  bucket 5: 80%\n  bucket 7: 10%\n  bucket 6: 30%\n  bucket 5: 90%\n  bucket 7: 20%\n  bucket 5: 100%\n  bucket 6: 40%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 6: 60%\n  bucket 7: 50%\n  bucket 6: 70%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 80%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 90%\n  bucket 11: 10%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 30\n  Entering block accumulator loop for bucket 19:\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 30\n  Entering block accumulator loop for bucket 24:\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 25: 50%\n  bucket 24: 70%\n  bucket 25: 60%\n  bucket 24: 80%\n  bucket 25: 70%\n  bucket 24: 90%\n  bucket 25: 80%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 30\n  bucket 26: 10%\n  Reserving size (777) for bucket 27\nGetting block 28 of 30\n  Calculating Z arrays for bucket 27\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 28: 10%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 28: 30%\n  bucket 27: 30%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 28: 40%\n  bucket 27: 40%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 27: 70%\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  bucket 28: 80%\n  bucket 27: 80%\n  bucket 28: 90%\n  bucket 27: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\n  Calculating Z arrays for bucket 2\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 4: 20%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 4: 30%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 4: 40%\n  bucket 3: 20%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 4: 60%\n  bucket 3: 30%\n  bucket 2: 60%\n  bucket 4: 70%\n  bucket 1: 50%\n  bucket 2: 70%\n  bucket 4: 80%\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 2: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  bucket 5: 40%\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 50%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 30%\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\nGetting block 14 of 30\n  bucket 13: 60%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 10%\n  bucket 13: 90%\n  bucket 14: 20%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\nGetting block 16 of 30\n  Calculating Z arrays for bucket 15\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 16: 50%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 16: 60%\n  bucket 15: 80%\n  bucket 16: 70%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  bucket 16: 90%\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 17: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 17: 70%\n  bucket 18: 90%\n  bucket 17: 80%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 30\n  Entering block accumulator loop for bucket 19:\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  bucket 21: 70%\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\nGetting block 24 of 30\n  Calculating Z arrays for bucket 23\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 24: 40%\n  bucket 23: 50%\n  bucket 24: 50%\n  bucket 23: 60%\n  bucket 24: 60%\n  bucket 23: 70%\n  bucket 24: 70%\n  bucket 23: 80%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 23: 100%\n  bucket 24: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\nGetting block 30 of 30\n  Calculating Z arrays for bucket 29\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 10%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 20%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 30%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 40%\n  bucket 29: 50%\n  Sorting block time: 00:00:00\n  bucket 29: 60%\nReturning block of 678 for bucket 30\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/9/c/6/dataset_9c615401-eba6-4d86-b566-b03669ce6c15.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 1: 20%\n  bucket 2: 30%\n  bucket 4: 30%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 2: 40%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 1: 50%\n  bucket 2: 70%\n  bucket 3: 40%\n  bucket 4: 70%\n  bucket 2: 80%\n  bucket 1: 60%\n  bucket 4: 80%\n  bucket 3: 50%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 1: 70%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\nGetting block 6 of 30\n  bucket 5: 40%\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  bucket 5: 50%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 60%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 5: 70%\n  bucket 6: 20%\n  bucket 5: 80%\n  bucket 7: 10%\n  bucket 6: 30%\n  bucket 5: 90%\n  bucket 7: 20%\n  bucket 5: 100%\n  bucket 6: 40%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 6: 60%\n  bucket 7: 50%\n  bucket 6: 70%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 80%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 90%\n  bucket 11: 10%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\nGetting block 14 of 30\n  Calculating Z arrays for bucket 13\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 30\n  Entering block accumulator loop for bucket 19:\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 30\n  Entering block accumulator loop for bucket 24:\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 25: 50%\n  bucket 24: 70%\n  bucket 25: 60%\n  bucket 24: 80%\n  bucket 25: 70%\n  bucket 24: 90%\n  bucket 25: 80%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 30\n  bucket 26: 10%\n  Reserving size (777) for bucket 27\nGetting block 28 of 30\n  Calculating Z arrays for bucket 27\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 28: 10%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 28: 30%\n  bucket 27: 30%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 28: 40%\n  bucket 27: 40%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 27: 70%\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  bucket 28: 80%\n  bucket 27: 80%\n  bucket 28: 90%\n  bucket 27: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\n  Calculating Z arrays for bucket 2\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 4: 20%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 4: 30%\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 4: 40%\n  bucket 3: 20%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 4: 60%\n  bucket 3: 30%\n  bucket 2: 60%\n  bucket 4: 70%\n  bucket 1: 50%\n  bucket 2: 70%\n  bucket 4: 80%\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 2: 90%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  bucket 5: 40%\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 50%\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 30%\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\nGetting block 14 of 30\n  bucket 13: 60%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 10%\n  bucket 13: 90%\n  bucket 14: 20%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\nGetting block 16 of 30\n  Calculating Z arrays for bucket 15\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 16: 50%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 16: 60%\n  bucket 15: 80%\n  bucket 16: 70%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  bucket 16: 90%\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 17: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 17: 70%\n  bucket 18: 90%\n  bucket 17: 80%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 30\n  Entering block accumulator loop for bucket 19:\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  bucket 21: 70%\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\nGetting block 24 of 30\n  Calculating Z arrays for bucket 23\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 24: 40%\n  bucket 23: 50%\n  bucket 24: 50%\n  bucket 23: 60%\n  bucket 24: 60%\n  bucket 23: 70%\n  bucket 24: 70%\n  bucket 23: 80%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 23: 100%\n  bucket 24: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\nGetting block 30 of 30\n  Calculating Z arrays for bucket 29\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 10%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 20%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 30%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  bucket 29: 40%\n  bucket 29: 50%\n  Sorting block time: 00:00:00\n  bucket 29: 60%\nReturning block of 678 for bucket 30\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:28:05", "plugin": "core", "name": "end_epoch", "raw_value": "1707661685.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:28:04", "plugin": "core", "name": "start_epoch", "raw_value": "1707661684.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_crjlbm9k.sam v. /tmp/history_bam_converted_to_sam_qc5eivyd.sam )\n--- local_file\n+++ history_data\n@@ -1,29 +1,30 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -1 /tmp/gxy-6rxjv-l9dmd_53mate1 -2 /tmp/gxy-6rxjv-l9dmd_53mate2\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/256/tmp -O bam -o /galaxy/server/database/objects/7/d/2/dataset_7d29ce70-59de-4e84-9a59-e9f88e46731c.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tABB@3>AAFFFFFEAGGGFGGAA6FHDGGCGFHFFHFHFHHHHHGDDDFFFHGFFHGBEGEGHHHFFFHGEEAEGHHHHHFHHHFHGHFEDGGEGBEAGEFHHFFHHHHHHGGHHHGHHGBGHHFHHFGHHHHG?CG?AFHH1FHHHGHFHHHF?DGHFFHCGAGEFHGCBBBB?BFFF?B-B.9/BFFFFFB=-AD?..@FFFF@@-@@?AFD.FFFBBEEBD9/:FFFFFBB/:FF9BF/BF.BBFF/:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tCBCBBFFFFFFFGGGGGGGGGGGGGFHHHHFHGHHHHHHFHHHHFGFHHHHHHGHHHHHHGHHEHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHHFHHHHGHGHHHGGHHHHHGGHFFGHGCGGGHGHHGHHHFGHHFHH/FGGGHFGFEGGCFCCD;B@DFFFFFFFFFFFFFFFFFFFFFFFFF;F.BEFADFFFF.AEFFFFFFE;D.;:B00099:09BFBFFBFF.0:000BFFBF0\tYT:Z:UP\n********\n*SNIP *\n********\n-M01368:8:000000000-A3GHV:1:1109:19224:11655\t77\t*\t0\t0\t*\t*\t0\t0\tAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGCATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCTGTCTCTTATACACATCTCCGAGCC\tBBB@A4FFFBBBGGGGGGGGGGHHHHHHHHFHHHHGFGHGGGFFAGFHHHFHHHGHHHHHHHHHHHFHGGHGHHGCFFGHHHGHHHGHHFHGGH3BFFGHHGHGEFFH/EG@-CFGGCC@-;BD?FGGGGGG??FGDAGDFFFFEFF@BAAFEFFBFFFFF?FD9BBFFFF/FFFFBFFFFFFF?FFBFFFF/FBBFFBFFFE?F;@B//AFFFFFFFFF//;BFFEF.BFFFB/;F/99/FBFFBDCF;B\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:19224:11655\t141\t*\t0\t0\t*\t*\t0\t0\tCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTCTGTCTCTTATACACATCTGAGCTTC\tCCCCCFFFFFFFGGGGFGGGGGHGGHGGGHHHHHHHHHHHHHGGGGGHFHHHHHHFHHHHHFHHHGGGGGHEFHCEEHHHGGGGFGGGFGGGGHEGGGEHFHHHHDGGF?AGFHGGGGGGGGHGGGGGGGHHHHHHGFFFHHHHFCEFHFHGF<EGFHFGGAGBFHHHG/C.;C:0:GGG00CFGEFGBA.9C:BBFFGFGGFFFBFGAGG.D..:A.DFFEFFFBFFF0099:9BB0BFB009000;000\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:21978:9490\t77\t*\t0\t0\t*\t*\t0\t0\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCAGTT\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGAFGHGHFGDGBCGHHHHHFHHGHHHHHHHGHHHH1E?EGGGHHHHFGFHFHHHHHEDHHGHH@GGHGHHCGG?CFGFGGGGGFGB.BFGGFFGGFFFBDDBFFFFFF9-;DEFFDFBFFBB.EFF;BFBFFFFFFFFFFFFFFFFFFFFFFFFF/B9/FFFFFFFAFFFF--99AFFFFFFFA;;;FF..9//;/;;/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:21978:9490\t141\t*\t0\t0\t*\t*\t0\t0\tGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGGTCCAGTGTAGAGTTATGGGG\tBAABBFFFFFFFGGGGGGGGGGGGGHHHGHGGHHHGGGGGGGFHGGGGHHGGGGHHHHHHGGGGG?HHHGGGGGG?E1FEEE?EHHHHFHAGHHHHHHHHHFHHHHGGFDEG2FCFFGHHHHFH?FF<FFGDHHHHBGHHEGFDD<GFGFDBGHGGHH0GDFH@<AEE.::CFGGHGGBGFGG0BFAF0000BFDEGGFGGGGGFGE00BC;;B00.;AAD.;--------.-;/:9////////////;9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:22910:4079\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTCCACTTTAGCTA\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHGGGGGHHHHGGEHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGFHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGGHHHGGHGGGHHGHGHHHHHHHGFHHHHHHHHHHHHHHHHHHGGHHHHHHHHHHGHHHHHHGGGGGGGGGGGGGGGGGGGGFFGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFCCDFFFFFFF0BFFFFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:22910:4079\t141\t*\t0\t0\t*\t*\t0\t0\tCTCCGGGCCCATAACACTTGGGGTAGCTAAAGTGGACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCT\tCCCDCCCCCDDFGGGGGGGGGGGEGGHHHHHHGHHHHGHHHHHHGGGFGHGFHHHHHHHHHHHHHHHFHGHHHHHGGHHHHHHBGHHGGCGGHEHHHFHHHHFHHFHHHHHHGHGGHGGHHHHHHHHHGHHFFHHHHHGHHHHHHHGHHGHHGG?FGHHGHHHHHHHHHHHGGHHHHHH?CEHGFHGGF--@DFFFFFAA;DDFFFFFF?@FC.A=DD-.AFFFF;->;.ED.FFFFFFF-.:00009BBF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:24217:19077\t77\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGCCTTTGATTCCTGCCTCATCCTATTACTGTC\t>AAA3BDFFFFDGBFFEEGGGGHHGHFHHCFHGHGHHHGF3BFGFHGFEFHFHGH3EGFC1EEGBFGBHFGGFFHHHGHFHGHHGHGGHCEHEBCFF3ED3@GH4FDEG12FFHFFHG/G3FGA/@EFEFCG33FFGBBGHFHH/?BFBGFGFAGC2C/@-;@-;BFFEFADF?DFFFFFF?;AFFA;AD;..FEFFA--;9;D.9BFFBE?;.;///://///99//BB/9;F./B//BBFB9////99/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:24217:19077\t141\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGAACCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTC\tBBBBBFFFFFFFGFEGGCFGFGHHHHFHHFHHHHHHGGEEEFGHGFFAGFFEEAEGGHHBEEFAFGAEF1G3GFGGEEF@EAGGHGFF?ECGGHEEEFGGHHHHFHHFHHGFHHHC2D<FFFFAFDFF<FF1FGGBHHFF0>AGHGG00<G<<DGBGDD0<.;CGG;;:;CFFHHHHHHG?D.;.;/ACD.;FFFB0CFBFGGFGGB0;EFAFF9B/:BB/;;AEFF//:AF-A.;//:B///;BFBB:;/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:25237:11722\t77\t*\t0\t0\t*\t*\t0\t0\tCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATATCGTATGCCGT\tAABBBFFFFFBBF5BGGFGABGHGGAEFGFHHHHFHCHFHHBFGGGEHBGGHFFFFGFAEF5FHH?EGGF5AEG3?EBFHD?C/EFHFFEGEE?CFGGGHHFHB3EEFG?EEGHCFGGGGGGGEC<CDFHHHHHE.FD11FFAGBGD.DGHEA<.<<0<EHAHCFHHF./;CC0GFH0::0CFGG0FBFD;9/90BFF0CBBFGB09;B:0;CFF0.-;@AFEEF--;AFFBF/99D-;.//.../9;B-.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:25237:11722\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTCGATCTCTGTG\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHGHGHHHHHGGGGGHHHHHHHHHHHGHHHAGHHHHHGHGHGHGGGGCGF?FHGGGGGGGGHHHGHHGGGFFGGGGGGGGGGGGGGGE?DEGGGFFEF;DDFFFFFFFEFFFEFFFFFFE./B9BFFFBFFFFFFFFFFFF>-BFFA9FFFFFFFFFFFBFAFFAFFFFFBFFFFFFF/9BFFDFFDDFF-9@CDAD;:AFF/;B//....;;///;\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:27103:7153\t77\t*\t0\t0\t*\t*\t0\t0\tGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGCTGTCTC\t33>A?FFFDFBFGCG4EGFG??GACFGGHFHCFHCHBECDEFCEGHHHHHFFGGF3AFFHHFGEGCGHHGEHGFGHHEGG?EFHHH?EGGHHGGGGHHHHHHEGGGGGHFHHGFDDGGACFCC@?/FDDGHHHGHEFFHHH0FDHHFFEDCD.<GGEHGF0CHHHF/CAGC000CCGFHFGFGFFG?:CB990;F09;FB0BBGGGGGG?;A9EBDEFA///;FF/:F?BFBBFFBFFFF///;/9B;///\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:27103:7153\t141\t*\t0\t0\t*\t*\t0\t0\tNTACTTCAGGGTCNTAAAACCTNAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCANGGNAGCTCTCCNNGNNNNTGGTATTNTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACCTGTCTC\t#>>AAAFFFFFFG#AAFFGGGG#BAFFAGHHHGGGGHGHHHHFHHHHHHHGHHHHHHHEGFGGHHBGHGHHBGFFEG2GHHFHFHHHGHHGHFH#/B#??FFGHHH##?####????FHG#??CFGGGEF>CGAGAGGGFGAA@@FFFFFFFFB=@@FF?FF;FFFF@@-@-AFEF?BB/BF?E-BBFFF;:BB/BFFFB/BFFFBFBFBBFFFFFB/FFFBB/;9A@@BFFBFFFF/BBFFFFFFE/:9/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:8763:7859\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGCTTTATGC\tBABAADFFFFFFGGGGGGGGFBGFGHHFBHHHHGGHHGGEHGDHHHFGHEHHHHGHHGGGGAGHHFBHHGHFHHHHHHHHGGGCEFGFFFFEHHH?FFG1FFHHFEGGGHGFEEHHHHHGGGFGGGHHHHGGGGG/C/FG-<A<GFHHFFCGHHFHGE0<<CGHHHGCHG.CCCCCE00BBFGFFG.BB0FFBFBCF0;CBFFFEEGBBBFFBF/FFF9BF/9BAFFD9AFEDAA.A/BFFFFFFFFFEB/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1109:8763:7859\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAGCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAG\t>AAABFFFFFFFGGGGGGGGGGHHHHHHHCHFAFHHDGEGFHHHHHHHHFHHHHFHHHHHHGHGGHGGHHHFHGHHHHHFFHHHHHHBGHFFHGHGHHHHHGGEGGHHHHHGHHHHHHHHHGFGHHHHGHGHGHHCCGGGGGGGGGGAAGF?FFFFBFA@=BDDFF?-;FFF;@CFFEFEFFFFFFFFFBFDFFFFFFFFFFFFFFFFFFFFFF:FFFF/BF/FFFEFF?DECAFEFFFFFE:FFFFFFFB\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:14751:26540\t77\t*\t0\t0\t*\t*\t0\t0\tTAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACTGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGTTGTGCACGCGATAGCATTGCGCGACGCTGGCGCCGGCGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTG\tAAA?1CFFFFADGEEGFGB1112DGDGHGFGHHCG/ECEBGGHDFGHHFHGHEB1BCGFFE2EGHHGHFFFHHBFFHEFCGGHHFHHHHH111BFFHGHEHBEHGGECEFHGFHFGGDBBGHHBHHHH0GH22FGHGFFFH1BFCG0F@FGG11@GDHFG1D/1FGFHH/FCG.>0><-<@CCFFG.CC-@C?C9FFF0C---;------;9----9-9@-AAFF9B9---9-/;B9BF/9BB//B/;///\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:14751:26540\t141\t*\t0\t0\t*\t*\t0\t0\tATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGTTGGGCTATTTGGGTTTTTTGACCCTGAAG\tBBBBBFBBBBBFGGGGGGGGGGHHHHGGFHGGHGGCHHHHHHGHHHGHHGEGGGHHHHHHHHHHEFHHHHHHGEE?FGHGEHGGHHHGGGGGGEHHGGGGHHGGGEGHHHGHGGGDFGHHGHGGGGGCGAFFCCDFHHHH1CGGHBHFHFCGFFCDFHGCCE.CC:EGFHHCGHHGCF?FGGGFGGG;B9;FFFFFFEGEBF0;;;0;CFBFFF?D.DE.:..99-...;;//9A.;DE.9-./:FB.;//\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:15519:10008\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACC\tBBBBBFFFFFFFGGGGGGCBGGE?GGGHHHHHGHHBEGGHHGGGGGHHHHHHHHHHHGGHHHHGFGGGGHGHGCFGHHHGGGCGGHGHGGGGGHFGGGHHHHHHGCEFGGHHHHGGGGGGGHGG/CEGHHHHGFHHHGFHHGFFHGHGHFGGEGFDDGGBCGHHGFHH/CHHHHGHGHF0CFGGGGGGGFFFFFBFFFFFFGFFGGF?DGEDEEFEFFFF?FFFFFFFFFFFFFFFBFFF.BFFFBFBBA;\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:15519:10008\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAG\tBBCBCFFFFFFFGGGGGGGGGGHHHGHHHFHHBGHHHGGGGHHHHHHGHHHHHHHHHHHHHHHGGHGGHHGHHHGGBGHHHHHHHHHHHHHHHHHGGFHHHGGGEGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGDGGGGGGGGGBFFFFFFFFFFFFFFFFFFFECB-=BFFFFFFFFBB?E-A::FFBFFFFFBFFFFFFFFFFFFBFFEFFF;0BFF0:FE?FFFFBFFFFFFFFFFFFFF0\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:16700:6843\t77\t*\t0\t0\t*\t*\t0\t0\tAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCTGTCTCTTATACACATCTCCGAGCC\tBBBBBFFFFFFFGGGGGGGGGGHHHHGHHHHHHHHHHHHGGGGGHHHHHGGHGHGGGGGGHHHGFFGHHGGGGHHHHHHCGG@FGHFHFEGGGGGGHGGGGDGHHHHHHHHHHHHHHGHHGHGHHGGGGGCGHEHGHHHFHHHFF.DGHHHHHHGHHHHHHGFGHGCGHGHHHHHHHHGHHHCD?:A::FCDGEGFGFFBFGBFGGGF00CBFFFF/BFBFFFFAE.FBBFBFFFFB/BFFBFFF/ADCAD\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n"], "status": "failure"}}, {"id": "bowtie2/2.4.2+galaxy0-7", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 7, "time_seconds": 63.121705532073975, "inputs": {"library|input_1": {"src": "hda", "id": "2030f45d42cda9e8"}, "library|input_2": {"src": "hda", "id": "ad1522ad952e4a47"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "c3040dfbd93a3133"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "b998090193e2466a", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:29:17.510021", "create_time": "2024-02-11T14:28:30.012024", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-88g47", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/0/d/f/dataset_0dfd0aa0-ace1-4ab5-912c-021e21091eb7.dat' genome && ln -s -f '/galaxy/server/database/objects/0/d/f/dataset_0dfd0aa0-ace1-4ab5-912c-021e21091eb7.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/6/b/2/dataset_6b27f267-0c41-436a-8f22-5672242e7a65.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/8/6/9/dataset_86922eeb-5238-4191-bf0f-8f739281dda9.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/3/8/8/dataset_388e7e88-80b4-466f-959e-9eb466ff20cc.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 352, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 350, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 351, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "2030f45d42cda9e8", "src": "hda", "uuid": "6b27f267-0c41-436a-8f22-5672242e7a65"}, "input_2": {"id": "ad1522ad952e4a47", "src": "hda", "uuid": "86922eeb-5238-4191-bf0f-8f739281dda9"}, "own_file": {"id": "c3040dfbd93a3133", "src": "hda", "uuid": "0dfd0aa0-ace1-4ab5-912c-021e21091eb7"}}, "outputs": {"output": {"id": "33c45cce06bf4e7d", "src": "hda", "uuid": "388e7e88-80b4-466f-959e-9eb466ff20cc"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/0/d/f/dataset_0dfd0aa0-ace1-4ab5-912c-021e21091eb7.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\nGetting block 2 of 30\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 2: 50%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 4: 50%\n  bucket 2: 80%\n  bucket 3: 60%\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 10%\n  bucket 7: 10%\n  bucket 6: 10%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\nGetting block 16 of 30\n  bucket 15: 80%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 10%\n  bucket 16: 20%\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\nGetting block 21 of 30\n  bucket 20: 10%\n  Reserving size (777) for bucket 21\n  bucket 20: 20%\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 20: 50%\n  bucket 21: 30%\n  bucket 20: 60%\n  bucket 21: 40%\n  bucket 20: 70%\n  bucket 21: 50%\n  bucket 20: 80%\n  bucket 21: 60%\n  bucket 20: 90%\n  bucket 21: 70%\n  bucket 20: 100%\n  bucket 21: 80%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\nGetting block 23 of 30\n  Calculating Z arrays for bucket 22\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 22: 10%\n  bucket 23: 20%\n  bucket 22: 20%\n  bucket 23: 30%\n  bucket 22: 30%\n  bucket 23: 40%\n  bucket 22: 40%\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 22: 60%\n  bucket 23: 80%\n  bucket 22: 70%\n  bucket 23: 90%\n  bucket 22: 80%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\nGetting block 25 of 30\n  Calculating Z arrays for bucket 24\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 24: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 24: 20%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 24: 30%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 24: 40%\n  bucket 25: 80%\n  bucket 24: 50%\n  bucket 25: 90%\n  bucket 24: 60%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  bucket 27: 10%\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 4: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 4: 70%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 4: 80%\n  bucket 3: 60%\n  bucket 4: 90%\n  bucket 2: 70%\n  bucket 4: 100%\n  bucket 3: 70%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 3: 80%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\nGetting block 7 of 30\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 40%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 50%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 60%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 30\n  bucket 9: 20%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  bucket 10: 10%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 9: 60%\n  bucket 10: 30%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 40%\n  bucket 9: 90%\n  bucket 10: 50%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  bucket 10: 60%\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\nGetting block 12 of 30\n  Calculating Z arrays for bucket 11\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\nGetting block 14 of 30\n  bucket 13: 80%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 90%\n  bucket 14: 10%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\nGetting block 16 of 30\n  bucket 15: 30%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 40%\n  bucket 16: 10%\n  bucket 15: 50%\n  bucket 16: 20%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 15: 70%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 15: 80%\n  bucket 16: 60%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\nReturning block of 630 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\nGetting block 19 of 30\nGetting block 20 of 30\n  Calculating Z arrays for bucket 18\n  Reserving size (777) for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 18:\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 18: 10%\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 18: 20%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 18: 30%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 18: 40%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 18: 50%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 18: 60%\n  bucket 19: 60%\n  bucket 20: 60%\n  bucket 18: 70%\n  bucket 19: 70%\n  bucket 20: 70%\n  bucket 18: 80%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 18: 100%\n  bucket 19: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\nGetting block 23 of 30\n  bucket 22: 20%\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 30\n  Entering block accumulator loop for bucket 23:\n  Reserving size (777) for bucket 24\n  bucket 22: 30%\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 22: 40%\n  bucket 23: 10%\n  bucket 22: 50%\n  bucket 24: 10%\n  bucket 22: 60%\n  bucket 23: 20%\n  bucket 22: 70%\n  bucket 24: 20%\n  bucket 22: 80%\n  bucket 23: 30%\n  bucket 22: 90%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 24: 40%\n  bucket 23: 50%\n  bucket 24: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  bucket 28: 10%\n  bucket 28: 20%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/0/d/f/dataset_0dfd0aa0-ace1-4ab5-912c-021e21091eb7.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\nGetting block 2 of 30\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 2: 50%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 4: 50%\n  bucket 2: 80%\n  bucket 3: 60%\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 3: 70%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 10%\n  bucket 7: 10%\n  bucket 6: 10%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 5: 30%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\nGetting block 10 of 30\n  Calculating Z arrays for bucket 9\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\nGetting block 16 of 30\n  bucket 15: 80%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  bucket 16: 10%\n  bucket 16: 20%\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\nGetting block 21 of 30\n  bucket 20: 10%\n  Reserving size (777) for bucket 21\n  bucket 20: 20%\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 20: 50%\n  bucket 21: 30%\n  bucket 20: 60%\n  bucket 21: 40%\n  bucket 20: 70%\n  bucket 21: 50%\n  bucket 20: 80%\n  bucket 21: 60%\n  bucket 20: 90%\n  bucket 21: 70%\n  bucket 20: 100%\n  bucket 21: 80%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\nGetting block 23 of 30\n  Calculating Z arrays for bucket 22\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 22: 10%\n  bucket 23: 20%\n  bucket 22: 20%\n  bucket 23: 30%\n  bucket 22: 30%\n  bucket 23: 40%\n  bucket 22: 40%\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 22: 60%\n  bucket 23: 80%\n  bucket 22: 70%\n  bucket 23: 90%\n  bucket 22: 80%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\nGetting block 25 of 30\n  Calculating Z arrays for bucket 24\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 24: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 24: 20%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 24: 30%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 24: 40%\n  bucket 25: 80%\n  bucket 24: 50%\n  bucket 25: 90%\n  bucket 24: 60%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  bucket 27: 10%\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 4: 60%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 4: 70%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 4: 80%\n  bucket 3: 60%\n  bucket 4: 90%\n  bucket 2: 70%\n  bucket 4: 100%\n  bucket 3: 70%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 3: 80%\n  bucket 1: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\nGetting block 7 of 30\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 40%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 50%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 60%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 30\n  bucket 9: 20%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  bucket 10: 10%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 9: 60%\n  bucket 10: 30%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 40%\n  bucket 9: 90%\n  bucket 10: 50%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  bucket 10: 60%\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\nGetting block 12 of 30\n  Calculating Z arrays for bucket 11\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\nGetting block 14 of 30\n  bucket 13: 80%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 90%\n  bucket 14: 10%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\nGetting block 15 of 30\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\nGetting block 16 of 30\n  bucket 15: 30%\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 40%\n  bucket 16: 10%\n  bucket 15: 50%\n  bucket 16: 20%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 15: 70%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 15: 80%\n  bucket 16: 60%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\nReturning block of 630 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\nGetting block 19 of 30\nGetting block 20 of 30\n  Calculating Z arrays for bucket 18\n  Reserving size (777) for bucket 19\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 18:\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 18: 10%\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 18: 20%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 18: 30%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 18: 40%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 18: 50%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 18: 60%\n  bucket 19: 60%\n  bucket 20: 60%\n  bucket 18: 70%\n  bucket 19: 70%\n  bucket 20: 70%\n  bucket 18: 80%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 18: 100%\n  bucket 19: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 418 for bucket 19\n  (Using difference cover)\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\nGetting block 23 of 30\n  bucket 22: 20%\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 30\n  Entering block accumulator loop for bucket 23:\n  Reserving size (777) for bucket 24\n  bucket 22: 30%\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 22: 40%\n  bucket 23: 10%\n  bucket 22: 50%\n  bucket 24: 10%\n  bucket 22: 60%\n  bucket 23: 20%\n  bucket 22: 70%\n  bucket 24: 20%\n  bucket 22: 80%\n  bucket 23: 30%\n  bucket 22: 90%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  bucket 24: 40%\n  bucket 23: 50%\n  bucket 24: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  bucket 28: 10%\n  bucket 28: 20%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:29:08", "plugin": "core", "name": "end_epoch", "raw_value": "1707661748.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:29:07", "plugin": "core", "name": "start_epoch", "raw_value": "1707661747.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_f5dt1w3_.sam v. /tmp/history_bam_converted_to_sam_uleqn_yb.sam )\n--- local_file\n+++ history_data\n@@ -1,23 +1,24 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/mvandenb/miniconda3/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -f -1 input_f.fasta -2 input_r.fasta\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 4 -x genome -f -1 input_f.fasta -2 input_r.fasta\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@4 -T /galaxy/server/database/jobs_directory/000/260/tmp -O bam -o /galaxy/server/database/objects/3/8/8/dataset_388e7e88-80b4-466f-959e-9eb466ff20cc.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t24\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-47\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-47\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I208M11I6M\t=\t1\t-218\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-151\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:33\tNM:i:40\tMD:Z:0G0A1C68A141A0T0T1\tYS:i:-143\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I208M11I6M\t=\t1\t218\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-151\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:33\tNM:i:40\tMD:Z:0G0A1C68A141A0T0T1\tYS:i:-143\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t6\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-146\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-140\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t233M3I7M1I7M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-64\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:4\tNM:i:11\tMD:Z:72A158A1A0A1A6A0T2\tYS:i:-83\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1106:6455:17124\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1110:12808:18367\t161\tchrM\t1\t0\t3M35I213M\t=\t6\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACAGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-146\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T30G38A140A0A1\tYS:i:-140\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1110:16559:7507\t163\tchrM\t1\t23\t3M35I213M\t=\t1\t251\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-128\tXN:i:0\tXM:i:3\tXO:i:1\tXG:i:35\tNM:i:38\tMD:Z:1A0T69A143\tYS:i:-12\tYT:Z:CP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t233M3I7M1I7M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-64\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:4\tNM:i:11\tMD:Z:72A158A1A0A1A6A0T2\tYS:i:-83\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n********\n*SNIP *\n********\n@@ -175,6 +158,24 @@\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11310:21761\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11310:21761\t141\t*\t0\t0\t*\t*\t0\t0\tACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCTCC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11578:14676\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:11578:14676\t141\t*\t0\t0\t*\t*\t0\t0\tGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:13575:19255\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGTTCCCGTGAGTGGTTAATAGGGTGATAGGCCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:13575:19255\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTGGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTAACTATTACAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:17564:15723\t77\t*\t0\t0\t*\t*\t0\t0\tTATGCTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:17564:15723\t141\t*\t0\t0\t*\t*\t0\t0\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:18108:12091\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACAC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1105:18108:12091\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1111:7437:24508\t77\t*\t0\t0\t*\t*\t0\t0\tACACACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTGTCTCTTATACACATCTCCGAGCCCACGAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n"], "status": "failure"}}, {"id": "bowtie2/2.4.2+galaxy0-8", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 8, "time_seconds": 63.42182660102844, "inputs": {"library|input_1": {"src": "hda", "id": "25afa4eedf6858fe"}, "library|input_2": {"src": "hda", "id": "a3da2fa0d7a0b965"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "2d230a47f7d46e7d"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "sam_options|reorder": true, "sam_options|sam_options_selector": "yes"}, "job": {"model_class": "Job", "id": "0749b42ef9cd5672", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:30:20.817438", "create_time": "2024-02-11T14:29:33.301638", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-qwjl7", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/0/c/e/dataset_0cec6322-987b-44a5-bb63-dec0ab550b0b.dat' genome && ln -s -f '/galaxy/server/database/objects/0/c/e/dataset_0cec6322-987b-44a5-bb63-dec0ab550b0b.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/7/3/a/dataset_73af73e7-f82a-4716-8c7e-6b2b46849d78.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/8/2/5/dataset_8258bd7a-17bc-40e1-9d59-ee074751937b.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                    --reorder   | samtools view -bS - -o '/galaxy/server/database/objects/2/5/2/dataset_252cda69-6475-4417-be57-39e92efacbfa.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 0, \"no_unal\": \"false\", \"omit_sec_seq\": \"false\", \"reorder\": \"true\", \"sam_no_qname_trunc\": \"false\", \"sam_opt\": \"false\", \"sam_options_selector\": \"yes\", \"soft_clipped_unmapped_tlen\": \"false\", \"xeq\": \"false\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 356, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 354, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 355, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "25afa4eedf6858fe", "src": "hda", "uuid": "73af73e7-f82a-4716-8c7e-6b2b46849d78"}, "input_2": {"id": "a3da2fa0d7a0b965", "src": "hda", "uuid": "8258bd7a-17bc-40e1-9d59-ee074751937b"}, "own_file": {"id": "2d230a47f7d46e7d", "src": "hda", "uuid": "0cec6322-987b-44a5-bb63-dec0ab550b0b"}}, "outputs": {"output": {"id": "f7435f22a712f3cf", "src": "hda", "uuid": "252cda69-6475-4417-be57-39e92efacbfa"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/0/c/e/dataset_0cec6322-987b-44a5-bb63-dec0ab550b0b.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\nGetting block 2 of 30\n  bucket 1: 20%\n  Reserving size (777) for bucket 2\n  bucket 1: 30%\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 40%\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 50%\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 70%\n  bucket 2: 20%\n  bucket 1: 80%\n  bucket 4: 10%\n  bucket 2: 30%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 1: 90%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 3: 20%\n  bucket 1: 100%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 3: 30%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 4: 50%\n  Sorting block time: 00:00:00\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 4: 60%\nReturning block of 690 for bucket 1\n  bucket 2: 70%\n  bucket 4: 70%\n  bucket 3: 50%\n  bucket 4: 80%\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 3: 60%\n  bucket 2: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 6: 50%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 30\n  Entering block accumulator loop for bucket 7:\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  bucket 8: 90%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 30\n  bucket 10: 10%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 11: 10%\n  bucket 10: 30%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 10: 70%\n  bucket 11: 70%\n  bucket 10: 80%\n  bucket 11: 80%\n  bucket 10: 90%\n  bucket 11: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 12:\nReturning block of 612 for bucket 11\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 30\n  bucket 14: 10%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 15: 30%\n  bucket 14: 60%\n  bucket 15: 40%\n  bucket 14: 70%\n  bucket 15: 50%\n  bucket 14: 80%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\nGetting block 17 of 30\n  bucket 16: 20%\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 30%\n  bucket 17: 10%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 17: 20%\n  bucket 16: 60%\n  bucket 17: 30%\n  bucket 16: 70%\n  bucket 17: 40%\n  bucket 16: 80%\n  bucket 17: 50%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\nGetting block 19 of 30\n  Calculating Z arrays for bucket 18\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 18:\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 10%\n  bucket 19: 10%\n  bucket 18: 20%\n  bucket 19: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 19: 30%\n  bucket 18: 50%\n  bucket 19: 40%\n  bucket 18: 60%\n  bucket 19: 50%\n  bucket 18: 70%\n  bucket 19: 60%\n  bucket 18: 80%\n  bucket 19: 70%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\nGetting block 21 of 30\n  bucket 20: 80%\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 90%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 22: 40%\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 23: 90%\n  bucket 22: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 10%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 20%\n  bucket 25: 10%\n  bucket 24: 30%\n  bucket 25: 20%\n  bucket 24: 40%\n  bucket 25: 30%\n  bucket 24: 50%\n  bucket 25: 40%\n  bucket 24: 60%\n  bucket 25: 50%\n  bucket 24: 70%\n  bucket 25: 60%\n  bucket 24: 80%\n  bucket 25: 70%\n  bucket 24: 90%\n  bucket 25: 80%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 30\n  Entering block accumulator loop for bucket 26:\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  bucket 28: 10%\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 29: 10%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 29: 50%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 4: 30%\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 4: 40%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 4: 60%\n  bucket 1: 80%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 1: 100%\n  bucket 2: 70%\n  Sorting block of length 484 for bucket 1\n  bucket 4: 80%\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 4: 90%\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 7: 10%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 30\n  bucket 9: 40%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 60%\n  bucket 10: 10%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 30%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 30\n  bucket 13: 10%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\nGetting block 15 of 30\n  bucket 14: 80%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 90%\n  bucket 15: 10%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 15: 20%\nReturning block of 596 for bucket 13\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  Sorting block time: 00:00:00\n  bucket 15: 70%\nReturning block of 709 for bucket 14\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 90%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  bucket 20: 90%\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\nGetting block 22 of 30\n  bucket 21: 90%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\nGetting block 24 of 30\n  Calculating Z arrays for bucket 23\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 30%\n  bucket 24: 40%\n  bucket 23: 40%\n  bucket 24: 50%\n  bucket 23: 50%\n  bucket 24: 60%\n  bucket 23: 60%\n  bucket 24: 70%\n  bucket 23: 70%\n  bucket 24: 80%\n  bucket 23: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\nGetting block 26 of 30\n  Calculating Z arrays for bucket 25\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 25: 80%\n  bucket 26: 90%\n  bucket 25: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  bucket 28: 10%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 28: 60%\n  bucket 29: 70%\n  bucket 28: 70%\n  bucket 29: 80%\n  bucket 28: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/0/c/e/dataset_0cec6322-987b-44a5-bb63-dec0ab550b0b.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\nGetting block 2 of 30\n  bucket 1: 20%\n  Reserving size (777) for bucket 2\n  bucket 1: 30%\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 40%\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 50%\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 70%\n  bucket 2: 20%\n  bucket 1: 80%\n  bucket 4: 10%\n  bucket 2: 30%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 1: 90%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 3: 20%\n  bucket 1: 100%\n  bucket 4: 40%\n  bucket 2: 50%\n  bucket 3: 30%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 4: 50%\n  Sorting block time: 00:00:00\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 4: 60%\nReturning block of 690 for bucket 1\n  bucket 2: 70%\n  bucket 4: 70%\n  bucket 3: 50%\n  bucket 4: 80%\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 3: 60%\n  bucket 2: 90%\n  bucket 4: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 6: 50%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  Sorting block time: 00:00:00\nReturning block of 739 for bucket 5\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 6\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 30\n  Entering block accumulator loop for bucket 7:\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 7: 20%\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 7: 70%\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 8: 80%\n  bucket 7: 100%\n  bucket 8: 90%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 30\n  bucket 10: 10%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 11: 10%\n  bucket 10: 30%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 10: 70%\n  bucket 11: 70%\n  bucket 10: 80%\n  bucket 11: 80%\n  bucket 10: 90%\n  bucket 11: 90%\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 12:\nReturning block of 612 for bucket 11\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 30\n  bucket 14: 10%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 15: 30%\n  bucket 14: 60%\n  bucket 15: 40%\n  bucket 14: 70%\n  bucket 15: 50%\n  bucket 14: 80%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\nGetting block 17 of 30\n  bucket 16: 20%\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 30%\n  bucket 17: 10%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 17: 20%\n  bucket 16: 60%\n  bucket 17: 30%\n  bucket 16: 70%\n  bucket 17: 40%\n  bucket 16: 80%\n  bucket 17: 50%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\nGetting block 19 of 30\n  Calculating Z arrays for bucket 18\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 18:\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 10%\n  bucket 19: 10%\n  bucket 18: 20%\n  bucket 19: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 19: 30%\n  bucket 18: 50%\n  bucket 19: 40%\n  bucket 18: 60%\n  bucket 19: 50%\n  bucket 18: 70%\n  bucket 19: 60%\n  bucket 18: 80%\n  bucket 19: 70%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\nGetting block 21 of 30\n  bucket 20: 80%\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 90%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 22: 40%\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 23: 90%\n  bucket 22: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 10%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 20%\n  bucket 25: 10%\n  bucket 24: 30%\n  bucket 25: 20%\n  bucket 24: 40%\n  bucket 25: 30%\n  bucket 24: 50%\n  bucket 25: 40%\n  bucket 24: 60%\n  bucket 25: 50%\n  bucket 24: 70%\n  bucket 25: 60%\n  bucket 24: 80%\n  bucket 25: 70%\n  bucket 24: 90%\n  bucket 25: 80%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 30\n  Entering block accumulator loop for bucket 26:\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  bucket 28: 10%\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 29: 10%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 29: 50%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:01\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  bucket 4: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 4: 30%\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 4: 40%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 4: 60%\n  bucket 1: 80%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 1: 90%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 1: 100%\n  bucket 2: 70%\n  Sorting block of length 484 for bucket 1\n  bucket 4: 80%\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 4: 90%\n  bucket 2: 80%\n  bucket 3: 80%\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 30\n  Entering block accumulator loop for bucket 5:\n  Reserving size (777) for bucket 6\nGetting block 7 of 30\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 7: 10%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 7: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 5: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 5: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 30\n  bucket 9: 40%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 60%\n  bucket 10: 10%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 30%\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 30\n  bucket 13: 10%\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\nGetting block 15 of 30\n  bucket 14: 80%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 90%\n  bucket 15: 10%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 15: 20%\nReturning block of 596 for bucket 13\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  Sorting block time: 00:00:00\n  bucket 15: 70%\nReturning block of 709 for bucket 14\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 90%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  bucket 20: 90%\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 520 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\nGetting block 22 of 30\n  bucket 21: 90%\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\nGetting block 24 of 30\n  Calculating Z arrays for bucket 23\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 30%\n  bucket 24: 40%\n  bucket 23: 40%\n  bucket 24: 50%\n  bucket 23: 50%\n  bucket 24: 60%\n  bucket 23: 60%\n  bucket 24: 70%\n  bucket 23: 70%\n  bucket 24: 80%\n  bucket 23: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\nGetting block 26 of 30\n  Calculating Z arrays for bucket 25\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 25: 80%\n  bucket 26: 90%\n  bucket 25: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 30\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 30\n  bucket 28: 10%\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 28: 60%\n  bucket 29: 70%\n  bucket 28: 70%\n  bucket 29: 80%\n  bucket 28: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:30:12", "plugin": "core", "name": "end_epoch", "raw_value": "1707661812.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:30:11", "plugin": "core", "name": "start_epoch", "raw_value": "1707661811.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "bowtie2/2.4.2+galaxy0-9", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 9, "time_seconds": 64.21027374267578, "inputs": {"library|input_1": {"src": "hda", "id": "4f7144bd5c96753f"}, "library|input_2": {"src": "hda", "id": "d126cc083cb2dbe6"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "5a076e2c39f228a4"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "sam_options|sam_opt": true, "sam_options|sam_options_selector": "yes"}, "job": {"model_class": "Job", "id": "94f9408eea0e6a84", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:31:25.088165", "create_time": "2024-02-11T14:30:36.846923", "galaxy_version": "21.09", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-q5rfp", "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/5/9/b/dataset_59b55b34-0edd-47aa-8ea8-9c94a9468163.dat' genome && ln -s -f '/galaxy/server/database/objects/5/9/b/dataset_59b55b34-0edd-47aa-8ea8-9c94a9468163.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/e/7/1/dataset_e71fc9ed-4e36-4bee-a3b1-31062f96e38c.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/e/3/8/dataset_e383e76f-c964-4579-842c-c690cd239c8c.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                       > '/galaxy/server/database/objects/6/f/4/dataset_6f42d4f1-7645-4532-ad56-e0c73fa51705.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "\"false\"", "sam_options": "{\"__current_case__\": 0, \"no_unal\": \"false\", \"omit_sec_seq\": \"false\", \"reorder\": \"false\", \"sam_no_qname_trunc\": \"false\", \"sam_opt\": \"true\", \"sam_options_selector\": \"yes\", \"soft_clipped_unmapped_tlen\": \"false\", \"xeq\": \"false\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 360, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": \"false\", \"input_1\": {\"values\": [{\"id\": 358, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 359, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": \"false\"}"}, "inputs": {"input_1": {"id": "4f7144bd5c96753f", "src": "hda", "uuid": "e71fc9ed-4e36-4bee-a3b1-31062f96e38c"}, "input_2": {"id": "d126cc083cb2dbe6", "src": "hda", "uuid": "e383e76f-c964-4579-842c-c690cd239c8c"}, "own_file": {"id": "5a076e2c39f228a4", "src": "hda", "uuid": "59b55b34-0edd-47aa-8ea8-9c94a9468163"}}, "outputs": {"output": {"id": "6f31238535b50757", "src": "hda", "uuid": "6f42d4f1-7645-4532-ad56-e0c73fa51705"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/5/9/b/dataset_59b55b34-0edd-47aa-8ea8-9c94a9468163.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\nGetting block 2 of 30\n  bucket 1: 30%\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 40%\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 60%\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 4: 20%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 90%\n  bucket 4: 30%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 2: 60%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 2: 70%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 2: 80%\n  bucket 4: 100%\n  bucket 3: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 2: 90%\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  bucket 5: 10%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 7\nReturning block of 306 for bucket 6\nReturning block of 739 for bucket 5\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  bucket 9: 10%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 30\n  bucket 14: 10%\n  bucket 13: 30%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 20%\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 50%\n  bucket 15: 30%\n  bucket 14: 70%\n  bucket 13: 60%\n  bucket 15: 40%\n  bucket 14: 80%\n  bucket 13: 70%\n  bucket 15: 50%\n  bucket 14: 90%\n  bucket 14: 100%\n  bucket 13: 80%\n  bucket 15: 60%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 70%\n  bucket 13: 90%\n  bucket 15: 80%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 15: 90%\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\nGetting block 19 of 30\n  Entering block accumulator loop for bucket 18:\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 19:\n  bucket 17: 20%\n  bucket 18: 10%\n  bucket 19: 10%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 19: 20%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 19: 30%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 19: 40%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 19: 50%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 19: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 19: 70%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 30\n  Entering block accumulator loop for bucket 21:\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 20%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 23: 30%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 40%\n  bucket 24: 80%\n  bucket 23: 50%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 25: 60%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 25: 70%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\nGetting block 28 of 30\n  bucket 27: 40%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 28: 10%\n  bucket 27: 70%\n  bucket 28: 20%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 28: 30%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  bucket 29: 10%\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 40%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 29: 50%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 60%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 3: 60%\n  bucket 4: 30%\n  bucket 1: 70%\n  bucket 3: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 3: 80%\n  bucket 4: 40%\n  bucket 1: 90%\n  bucket 3: 90%\n  bucket 2: 50%\n  bucket 1: 100%\n  bucket 3: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 4: 70%\n  bucket 2: 80%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 6: 100%\n  bucket 5: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  bucket 7: 20%\n  bucket 7: 30%\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 10%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 10: 30%\nGetting block 11 of 30\n  bucket 9: 90%\n  bucket 10: 40%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 11: 10%\n  bucket 10: 70%\n  bucket 11: 20%\n  bucket 10: 80%\n  bucket 11: 30%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 90%\n  bucket 11: 40%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Entering block accumulator loop for bucket 13:\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 30\n  bucket 13: 10%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 10%\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 15: 10%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 15: 20%\n  bucket 14: 80%\n  bucket 15: 30%\n  bucket 14: 90%\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  bucket 15: 40%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 19: 40%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 19: 60%\n  bucket 20: 90%\n  bucket 19: 70%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  bucket 23: 10%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 80%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 23: 100%\n  bucket 24: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\nGetting block 28 of 30\n  bucket 27: 50%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 60%\n  bucket 28: 10%\n  bucket 27: 70%\n  bucket 28: 20%\n  bucket 27: 80%\n  bucket 28: 30%\n  bucket 27: 90%\n  bucket 28: 40%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 50%\n  bucket 28: 60%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\nGetting block 30 of 30\n  bucket 29: 70%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 80%\n  bucket 30: 10%\n  bucket 29: 90%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stderr": "\nBuilding a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "stdout": "\nSettings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 16\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/5/9/b/dataset_59b55b34-0edd-47aa-8ea8-9c94a9468163.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 4, merged 22; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 0; iterating...\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\nGetting block 2 of 30\n  bucket 1: 30%\n  Reserving size (777) for bucket 2\nGetting block 3 of 30\nGetting block 4 of 30\n  Calculating Z arrays for bucket 2\n  bucket 1: 40%\n  Reserving size (777) for bucket 3\n  Reserving size (777) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 60%\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 4: 20%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 90%\n  bucket 4: 30%\n  bucket 1: 100%\n  Sorting block of length 689 for bucket 1\n  (Using difference cover)\n  bucket 2: 30%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 2: 60%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 2: 70%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 2: 80%\n  bucket 4: 100%\n  bucket 3: 100%\n  Sorting block of length 499 for bucket 4\n  (Using difference cover)\n  Sorting block of length 629 for bucket 3\n  (Using difference cover)\n  bucket 2: 90%\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 1\n  bucket 2: 100%\n  Sorting block of length 445 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 446 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 500 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 3\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  bucket 5: 10%\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 5: 100%\n  Sorting block of length 738 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 305 for bucket 6\n  (Using difference cover)\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 7\nReturning block of 306 for bucket 6\nReturning block of 739 for bucket 5\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 705 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 706 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 772 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 773 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 30\n  bucket 9: 10%\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 546 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 247 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 547 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 248 for bucket 10\nGetting block 11 of 30\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 611 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 612 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 485 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 486 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 30\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 30\n  bucket 14: 10%\n  bucket 13: 30%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 20%\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 15: 10%\n  bucket 14: 40%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 50%\n  bucket 15: 30%\n  bucket 14: 70%\n  bucket 13: 60%\n  bucket 15: 40%\n  bucket 14: 80%\n  bucket 13: 70%\n  bucket 15: 50%\n  bucket 14: 90%\n  bucket 14: 100%\n  bucket 13: 80%\n  bucket 15: 60%\n  Sorting block of length 689 for bucket 14\n  (Using difference cover)\n  bucket 15: 70%\n  bucket 13: 90%\n  bucket 15: 80%\n  bucket 13: 100%\n  Sorting block of length 597 for bucket 13\n  (Using difference cover)\n  bucket 15: 90%\n  Sorting block time: 00:00:00\nReturning block of 690 for bucket 14\n  bucket 15: 100%\n  Sorting block of length 543 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 598 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 544 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 723 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 724 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\nGetting block 18 of 30\n  Calculating Z arrays for bucket 17\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\nGetting block 19 of 30\n  Entering block accumulator loop for bucket 18:\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 19:\n  bucket 17: 20%\n  bucket 18: 10%\n  bucket 19: 10%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 19: 20%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 19: 30%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 19: 40%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 19: 50%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 19: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 19: 70%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 578 for bucket 17\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 18: 100%\n  Sorting block of length 356 for bucket 18\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 731 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 579 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 357 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 732 for bucket 19\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 268 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 269 for bucket 20\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 30\n  Entering block accumulator loop for bucket 21:\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 21: 100%\n  Sorting block of length 21 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 952 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 22 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 953 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 20%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 23: 30%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 40%\n  bucket 24: 80%\n  bucket 23: 50%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 471 for bucket 24\n  (Using difference cover)\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  Sorting block time: 00:00:00\nReturning block of 472 for bucket 24\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 763 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 764 for bucket 23\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 25: 60%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 25: 70%\n  bucket 26: 100%\n  Sorting block of length 643 for bucket 26\n  (Using difference cover)\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 415 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 644 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 416 for bucket 25\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\nGetting block 28 of 30\n  bucket 27: 40%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 28: 10%\n  bucket 27: 70%\n  bucket 28: 20%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 28: 30%\n  bucket 27: 100%\n  Sorting block of length 592 for bucket 27\n  (Using difference cover)\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  Sorting block time: 00:00:00\nReturning block of 593 for bucket 27\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 684 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 685 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 30\n  Reserving size (777) for bucket 30\n  bucket 29: 10%\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 40%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 29: 50%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 60%\n  bucket 30: 100%\n  Sorting block of length 602 for bucket 30\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 240 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 603 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 241 for bucket 29\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:00\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 1035\nUsing parameters --bmax 777 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 777 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 21; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 551.3 (target: 776)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 30\n  Reserving size (777) for bucket 1\nGetting block 2 of 30\nGetting block 3 of 30\n  Calculating Z arrays for bucket 1\n  Reserving size (777) for bucket 2\n  Reserving size (777) for bucket 3\nGetting block 4 of 30\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Reserving size (777) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 3: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 1: 40%\n  bucket 2: 20%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 3: 60%\n  bucket 4: 30%\n  bucket 1: 70%\n  bucket 3: 70%\n  bucket 2: 40%\n  bucket 1: 80%\n  bucket 3: 80%\n  bucket 4: 40%\n  bucket 1: 90%\n  bucket 3: 90%\n  bucket 2: 50%\n  bucket 1: 100%\n  bucket 3: 100%\n  Sorting block of length 484 for bucket 1\n  (Using difference cover)\n  Sorting block of length 434 for bucket 3\n  (Using difference cover)\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 4: 70%\n  bucket 2: 80%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 2: 100%\n  Sorting block of length 774 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 431 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 435 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 485 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 432 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 775 for bucket 2\nGetting block 5 of 30\n  Reserving size (777) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 30\n  Reserving size (777) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 5: 70%\n  bucket 6: 70%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 6: 100%\n  bucket 5: 100%\n  Sorting block of length 179 for bucket 6\n  (Using difference cover)\n  Sorting block of length 776 for bucket 5\n  (Using difference cover)\nGetting block 7 of 30\n  Reserving size (777) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  Sorting block time: 00:00:00\nReturning block of 777 for bucket 5\n  bucket 7: 20%\n  bucket 7: 30%\n  Sorting block time: 00:00:00\nReturning block of 180 for bucket 6\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 707 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 708 for bucket 7\nGetting block 8 of 30\n  Reserving size (777) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 313 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 8\nGetting block 9 of 30\n  Reserving size (777) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 30\n  Reserving size (777) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 10%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 10: 30%\nGetting block 11 of 30\n  bucket 9: 90%\n  bucket 10: 40%\n  Reserving size (777) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 9: 100%\n  Sorting block of length 535 for bucket 9\n  (Using difference cover)\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 11: 10%\n  bucket 10: 70%\n  bucket 11: 20%\n  bucket 10: 80%\n  bucket 11: 30%\n  Sorting block time: 00:00:00\nReturning block of 536 for bucket 9\n  bucket 10: 90%\n  bucket 11: 40%\n  bucket 10: 100%\n  Sorting block of length 680 for bucket 10\n  (Using difference cover)\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  Sorting block time: 00:00:00\nReturning block of 681 for bucket 10\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 423 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 424 for bucket 11\nGetting block 12 of 30\n  Reserving size (777) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 371 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 12\nGetting block 13 of 30\n  Reserving size (777) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 30\n  Entering block accumulator loop for bucket 13:\n  Reserving size (777) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 30\n  bucket 13: 10%\n  Reserving size (777) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 10%\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 15: 10%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 595 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 15: 20%\n  bucket 14: 80%\n  bucket 15: 30%\n  bucket 14: 90%\n  Sorting block time: 00:00:00\nReturning block of 596 for bucket 13\n  bucket 15: 40%\n  bucket 14: 100%\n  Sorting block of length 708 for bucket 14\n  (Using difference cover)\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 629 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 709 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 630 for bucket 15\nGetting block 16 of 30\n  Reserving size (777) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 750 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 751 for bucket 16\nGetting block 17 of 30\n  Reserving size (777) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 606 for bucket 17\n  (Using difference cover)\nGetting block 18 of 30\n  Reserving size (777) for bucket 18\n  Calculating Z arrays for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 607 for bucket 17\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 722 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 723 for bucket 18\nGetting block 19 of 30\n  Reserving size (777) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 30\n  Reserving size (777) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 19: 40%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 19: 60%\n  bucket 20: 90%\n  bucket 19: 70%\n  bucket 20: 100%\n  Sorting block of length 519 for bucket 20\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 418 for bucket 19\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 520 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 419 for bucket 19\nGetting block 21 of 30\n  Reserving size (777) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 422 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 423 for bucket 21\nGetting block 22 of 30\n  Reserving size (777) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 493 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 494 for bucket 22\nGetting block 23 of 30\n  Reserving size (777) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 30\n  bucket 23: 10%\n  Reserving size (777) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 80%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 23: 100%\n  bucket 24: 100%\n  Sorting block of length 510 for bucket 23\n  (Using difference cover)\n  Sorting block of length 732 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 511 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 733 for bucket 24\nGetting block 25 of 30\n  Reserving size (777) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 30\n  Reserving size (777) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 647 for bucket 26\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 457 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 648 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 458 for bucket 25\nGetting block 27 of 30\n  Reserving size (777) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\nGetting block 28 of 30\n  bucket 27: 50%\n  Reserving size (777) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 60%\n  bucket 28: 10%\n  bucket 27: 70%\n  bucket 28: 20%\n  bucket 27: 80%\n  bucket 28: 30%\n  bucket 27: 90%\n  bucket 28: 40%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 50%\n  bucket 28: 60%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 631 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 632 for bucket 28\nGetting block 29 of 30\n  Reserving size (777) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\nGetting block 30 of 30\n  bucket 29: 70%\n  Reserving size (777) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 80%\n  bucket 30: 10%\n  bucket 29: 90%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 100%\n  Sorting block of length 582 for bucket 29\n  (Using difference cover)\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 677 for bucket 30\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 583 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 678 for bucket 30\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 14:31:15", "plugin": "core", "name": "end_epoch", "raw_value": "1707661875.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:31:15", "plugin": "core", "name": "start_epoch", "raw_value": "1707661875.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-0", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 0, "time_seconds": 63.72600436210632, "inputs": {"library|input_1": {"src": "hda", "id": "785907cd7177f076"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single"}, "job": {"model_class": "Job", "id": "2388c45e2fc5bb35", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:21:50.789305", "create_time": "2024-02-11T13:20:58.133982", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-dv9nx", "command_line": "ln -f -s '/galaxy/server/database/objects/3/7/5/dataset_3751928d-90c5-4a0c-b20c-4a5e0bef0e69.dat' 'cutadapt_small_fastq.fq' &&     cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGATCGGAAGAGC'      --output='out1.fq'  --error-rate=0.1 --times=1 --overlap=3   --action=trim            'cutadapt_small_fastq.fq'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 86, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "785907cd7177f076", "src": "hda", "uuid": "3751928d-90c5-4a0c-b20c-4a5e0bef0e69"}}, "outputs": {"out1": {"id": "2388c45e2fc5bb35", "src": "hda", "uuid": "9ae10110-0529-434c-86f4-a5be3e3558c6"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (4053 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (4053 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:21:40", "plugin": "core", "name": "end_epoch", "raw_value": "1707657700.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:21:40", "plugin": "core", "name": "start_epoch", "raw_value": "1707657700.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-1", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 1, "time_seconds": 58.15199136734009, "inputs": {"library|input_1": {"src": "hda", "id": "6dac5ccab0863e55"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single"}, "job": {"model_class": "Job", "id": "09a7e5ec198c3d97", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:22:48.947149", "create_time": "2024-02-11T13:22:01.855415", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-mztzw", "command_line": "ln -f -s '/galaxy/server/database/objects/b/1/8/dataset_b18b4f47-7a51-4938-bcb9-8f7525383357.dat' 'bwa-mem-fastq1_fq_gz.fq.gz' &&     cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGATCGGAAGAGC'      --output='out1.fq.gz'  --error-rate=0.1 --times=1 --overlap=3   --action=trim            'bwa-mem-fastq1_fq_gz.fq.gz'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 88, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "6dac5ccab0863e55", "src": "hda", "uuid": "b18b4f47-7a51-4938-bcb9-8f7525383357"}}, "outputs": {"out1": {"id": "09a7e5ec198c3d97", "src": "hda", "uuid": "ff70d5c4-0d3d-4dc8-988a-2d955e067d90"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC --output=out1.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim bwa-mem-fastq1_fq_gz.fq.gz\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (145 \u00b5s/read; 0.41 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                         2 (2.0%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nTotal written (filtered):         24,843 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC --output=out1.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim bwa-mem-fastq1_fq_gz.fq.gz\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (145 \u00b5s/read; 0.41 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                         2 (2.0%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nTotal written (filtered):         24,843 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:22:39", "plugin": "core", "name": "end_epoch", "raw_value": "1707657759.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:22:39", "plugin": "core", "name": "start_epoch", "raw_value": "1707657759.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-10", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 10, "time_seconds": 54.84338331222534, "inputs": {"library|input_1": {"src": "hda", "id": "2ca6c8f04de15d80"}, "library|r1|front_adapters_0|front_adapter_source|front_adapter_file": {"src": "hda", "id": "c5edbeaedd7a4469"}, "library|r1|front_adapters_0|front_adapter_source|front_adapter_source_list": "file", "library|type": "single", "output_selector": "multiple_output"}, "job": {"model_class": "Job", "id": "8673bb2ccc330082", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:30:29.358809", "create_time": "2024-02-11T13:29:46.602491", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-d28tx", "command_line": "ln -f -s '/galaxy/server/database/objects/6/6/8/dataset_668adc78-65d8-4120-ac0b-e38aa7b08867.dat' 'cutadapt_in_split_fastq_gz.fq.gz' &&    mkdir split &&  cutadapt  -j=${GALAXY_SLOTS:-4}      -g file:'/galaxy/server/database/objects/9/9/5/dataset_995fc1ec-7182-4f8e-a08d-50cf277f3fff.dat'      --output='split/{name}.fastq.gz'  --error-rate=0.1 --times=1 --overlap=3   --action=trim            'cutadapt_in_split_fastq_gz.fq.gz'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": "\"multiple_output\"", "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 114, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": [{\"__index__\": 0, \"front_adapter_source\": {\"__current_case__\": 2, \"front_adapter_file\": {\"values\": [{\"id\": 115, \"src\": \"hda\"}]}, \"front_adapter_source_list\": \"file\"}, \"single_noindels\": \"false\"}]}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "2ca6c8f04de15d80", "src": "hda", "uuid": "668adc78-65d8-4120-ac0b-e38aa7b08867"}, "library|r1|front_adapters_0|front_adapter_file": {"id": "c5edbeaedd7a4469", "src": "hda", "uuid": "995fc1ec-7182-4f8e-a08d-50cf277f3fff"}}, "outputs": {"__new_primary_file_split_output|A1__": {"id": "6d74501213935781", "src": "hda", "uuid": "60e73036-9cac-4490-a0e2-5980a5716d8f"}, "__new_primary_file_split_output|A2__": {"id": "d81dd1a850363729", "src": "hda", "uuid": "d2fd8952-bb55-4a65-8be3-50007ad87f8a"}, "__new_primary_file_split_output|unknown__": {"id": "510f7ca6cec5b842", "src": "hda", "uuid": "8a924dd3-2152-4576-a779-e0fa0404cd74"}}, "output_collections": {"split_output": {"id": "acd22a4b1caeba47", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -g file:/galaxy/server/database/objects/9/9/5/dataset_995fc1ec-7182-4f8e-a08d-50cf277f3fff.dat --output=split/{name}.fastq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_in_split_fastq_gz.fq.gz\nProcessing single-end reads on 1 core ...\nFinished in 0.03 s (2658 \u00b5s/read; 0.02 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      11\nReads with adapters:                        10 (90.9%)\nReads written (passing filters):            11 (100.0%)\n\nTotal basepairs processed:         1,210 bp\nTotal written (filtered):          1,130 bp (93.4%)\n\n=== Adapter A2 ===\n\nSequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 times\n\nNo. of allowed errors: 0\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t5\t0.0\t0\t5\n\n\n=== Adapter A1 ===\n\nSequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 times\n\nNo. of allowed errors: 0\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t5\t0.0\t0\t5\n", "job_stderr": "", "stderr": "", "stdout": "\nThis is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -g file:/galaxy/server/database/objects/9/9/5/dataset_995fc1ec-7182-4f8e-a08d-50cf277f3fff.dat --output=split/{name}.fastq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_in_split_fastq_gz.fq.gz\nProcessing single-end reads on 1 core ...\nFinished in 0.03 s (2658 \u00b5s/read; 0.02 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      11\nReads with adapters:                        10 (90.9%)\nReads written (passing filters):            11 (100.0%)\n\nTotal basepairs processed:         1,210 bp\nTotal written (filtered):          1,130 bp (93.4%)\n\n=== Adapter A2 ===\n\nSequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 times\n\nNo. of allowed errors: 0\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t5\t0.0\t0\t5\n\n\n=== Adapter A1 ===\n\nSequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 times\n\nNo. of allowed errors: 0\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t5\t0.0\t0\t5\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:30:25", "plugin": "core", "name": "end_epoch", "raw_value": "1707658225.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:30:24", "plugin": "core", "name": "start_epoch", "raw_value": "1707658224.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-11", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 11, "time_seconds": 109.19378328323364, "inputs": {"library|input_1": {"src": "hda", "id": "623f3db31c6738a8"}, "library|r1|adapters_0|adapter_source|adapter": "AAAT", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "output_selector": "untrimmed_file"}, "job": {"model_class": "Job", "id": "f745e8de98619194", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:32:18.451059", "create_time": "2024-02-11T13:30:40.929322", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-vtcrz", "command_line": "ln -f -s '/galaxy/server/database/objects/4/d/9/dataset_4d97d2b6-d9d5-409c-9f35-61f31a6d4604.dat' 'cutadapt_small_fastq.fq' &&     cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AAAT'    --untrimmed-output='untrimmed_output.fq'   --output='out1.fq'  --error-rate=0.1 --times=1 --overlap=3   --action=trim            'cutadapt_small_fastq.fq'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": "\"untrimmed_file\"", "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 119, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AAAT\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "623f3db31c6738a8", "src": "hda", "uuid": "4d97d2b6-d9d5-409c-9f35-61f31a6d4604"}}, "outputs": {"out1": {"id": "812bf6e358d4f40c", "src": "hda", "uuid": "f5f2d8ad-f5f6-4438-b654-16b3244a8854"}, "untrimmed_output": {"id": "6535cfeed783ccdd", "src": "hda", "uuid": "7761e7e1-7c71-49d9-aed6-e83bb7f82e60"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AAAT --untrimmed-output=untrimmed_output.fq --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.02 s (6103 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads discarded as untrimmed:                2 (66.7%)\nReads written (passing filters):             1 (33.3%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             30 bp (29.4%)\n\n=== Adapter 1 ===\n\nSequence: AAAT; Type: regular 3'; Length: 4; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-4 bp: 0\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 100.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n4\t1\t0.0\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AAAT --untrimmed-output=untrimmed_output.fq --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.02 s (6103 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads discarded as untrimmed:                2 (66.7%)\nReads written (passing filters):             1 (33.3%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             30 bp (29.4%)\n\n=== Adapter 1 ===\n\nSequence: AAAT; Type: regular 3'; Length: 4; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-4 bp: 0\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 100.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n4\t1\t0.0\t0\t1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:32:09", "plugin": "core", "name": "end_epoch", "raw_value": "1707658329.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:32:09", "plugin": "core", "name": "start_epoch", "raw_value": "1707658329.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-12", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 12, "time_seconds": 62.0721173286438, "inputs": {"library|input_1": {"src": "hda", "id": "4c95478ffc5c9507"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "output_selector": "untrimmed_file"}, "job": {"model_class": "Job", "id": "b8f9dda45fcc79d3", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:33:20.835930", "create_time": "2024-02-11T13:32:30.580877", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-6bzqq", "command_line": "ln -f -s '/galaxy/server/database/objects/0/a/8/dataset_0a8b09a8-af04-4ccf-8a64-5ca50c776701.dat' 'bwa-mem-fastq1_fq_gz.fq.gz' &&     cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGATCGGAAGAGC'    --untrimmed-output='untrimmed_output.fq.gz'   --output='out1.fq.gz'  --error-rate=0.1 --times=1 --overlap=3   --action=trim            'bwa-mem-fastq1_fq_gz.fq.gz'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": "\"untrimmed_file\"", "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 122, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "4c95478ffc5c9507", "src": "hda", "uuid": "0a8b09a8-af04-4ccf-8a64-5ca50c776701"}}, "outputs": {"out1": {"id": "ad00eb8b45e95550", "src": "hda", "uuid": "51f39751-4338-4abc-9605-6744291b2d29"}, "untrimmed_output": {"id": "b7bf7348902e91ad", "src": "hda", "uuid": "aaf36338-1e31-4b5a-be6c-c7fac7114257"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC --untrimmed-output=untrimmed_output.fq.gz --output=out1.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim bwa-mem-fastq1_fq_gz.fq.gz\nProcessing single-end reads on 1 core ...\nFinished in 0.02 s (212 \u00b5s/read; 0.28 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                         2 (2.0%)\n\n== Read fate breakdown ==\nReads discarded as untrimmed:               97 (98.0%)\nReads written (passing filters):             2 (2.0%)\n\nTotal basepairs processed:        24,849 bp\nTotal written (filtered):            496 bp (2.0%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC --untrimmed-output=untrimmed_output.fq.gz --output=out1.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim bwa-mem-fastq1_fq_gz.fq.gz\nProcessing single-end reads on 1 core ...\nFinished in 0.02 s (212 \u00b5s/read; 0.28 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                         2 (2.0%)\n\n== Read fate breakdown ==\nReads discarded as untrimmed:               97 (98.0%)\nReads written (passing filters):             2 (2.0%)\n\nTotal basepairs processed:        24,849 bp\nTotal written (filtered):            496 bp (2.0%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:33:11", "plugin": "core", "name": "end_epoch", "raw_value": "1707658391.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:33:11", "plugin": "core", "name": "start_epoch", "raw_value": "1707658391.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-13", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 13, "time_seconds": 59.294806718826294, "inputs": {"library|input_1": {"src": "hda", "id": "bf1f31652163df21"}, "library|input_2": {"src": "hda", "id": "8eae0ae685a3ecfc"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "paired", "filter_options|discard_untrimmed": true, "filter_options|maximum_length": "1000", "filter_options|max_n": "0", "filter_options|pair_filter": "both"}, "job": {"model_class": "Job", "id": "c5edbeaedd7a4469", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:34:22.089852", "create_time": "2024-02-11T13:33:34.207655", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-7lx97", "command_line": "ln -f -s '/galaxy/server/database/objects/6/0/6/dataset_6063fdb2-178a-4c69-843e-31d414ea60fa.dat' 'bwa-mem-fastq1_fq_gz.fq.gz' &&  ln -f -s '/galaxy/server/database/objects/3/a/1/dataset_3a1b3044-aa3b-45d4-8ecc-34d2dfed12de.dat' 'bwa-mem-fastq2_fq_gz.fq.gz' &&    cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGATCGGAAGAGC'              --output='out1.fq.gz' --paired-output='out2.fq.gz'  --error-rate=0.1 --times=1 --overlap=3   --action=trim    --discard-untrimmed  --maximum-length=1000 --max-n=0.0 --pair-filter=both       'bwa-mem-fastq1_fq_gz.fq.gz' 'bwa-mem-fastq2_fq_gz.fq.gz'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"true\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"0.0\", \"maximum_length\": \"1000\", \"minimum_length\": \"\", \"pair_filter\": \"both\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 125, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 126, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"r2\": {\"adapters2\": [], \"anywhere_adapters2\": [], \"cut2\": \"0\", \"front_adapters2\": [], \"quality_cutoff2\": null}, \"type\": \"paired\"}"}, "inputs": {"input_1": {"id": "bf1f31652163df21", "src": "hda", "uuid": "6063fdb2-178a-4c69-843e-31d414ea60fa"}, "input_2": {"id": "8eae0ae685a3ecfc", "src": "hda", "uuid": "3a1b3044-aa3b-45d4-8ecc-34d2dfed12de"}}, "outputs": {"out1": {"id": "94b7cc5514abd888", "src": "hda", "uuid": "058c1d7f-89ee-40f7-a87e-790197576c2f"}, "out2": {"id": "61b4ae9b0a4bcec2", "src": "hda", "uuid": "8c070b8d-1250-441c-a451-9533eeb3bf9e"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-untrimmed --maximum-length=1000 --max-n=0.0 --pair-filter=both bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.03 s (255 \u00b5s/read; 0.24 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n\n== Read fate breakdown ==\nPairs that were too long:                    0 (0.0%)\nPairs with too many N:                       0 (0.0%)\nPairs discarded as untrimmed:               97 (98.0%)\nPairs written (passing filters):             2 (2.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):            998 bp (2.0%)\n  Read 1:           496 bp\n  Read 2:           502 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-untrimmed --maximum-length=1000 --max-n=0.0 --pair-filter=both bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.03 s (255 \u00b5s/read; 0.24 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n\n== Read fate breakdown ==\nPairs that were too long:                    0 (0.0%)\nPairs with too many N:                       0 (0.0%)\nPairs discarded as untrimmed:               97 (98.0%)\nPairs written (passing filters):             2 (2.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):            998 bp (2.0%)\n  Read 1:           496 bp\n  Read 2:           502 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:34:12", "plugin": "core", "name": "end_epoch", "raw_value": "1707658452.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:34:12", "plugin": "core", "name": "start_epoch", "raw_value": "1707658452.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-14", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 14, "time_seconds": 57.91054081916809, "inputs": {"library|input_1": {"src": "hda", "id": "705b1566acc7e457"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r1|cut": "5", "library|type": "single"}, "job": {"model_class": "Job", "id": "d81dd1a850363729", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:35:19.444693", "create_time": "2024-02-11T13:34:32.232179", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-r56jm", "command_line": "ln -f -s '/galaxy/server/database/objects/3/2/e/dataset_32e812d5-b5fe-45ca-b03b-0d4106d4a508.dat' 'cutadapt_small_fastq.fq' &&     cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGATCGGAAGAGC'  -u 5     --output='out1.fq'  --error-rate=0.1 --times=1 --overlap=3   --action=trim            'cutadapt_small_fastq.fq'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 129, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"5\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "705b1566acc7e457", "src": "hda", "uuid": "32e812d5-b5fe-45ca-b03b-0d4106d4a508"}}, "outputs": {"out1": {"id": "dbc8bc556635976c", "src": "hda", "uuid": "3df6d4bd-1392-4107-bcd6-198bc83ca30e"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC -u 5 --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (4066 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             87 bp (85.3%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC -u 5 --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (4066 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             87 bp (85.3%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:35:09", "plugin": "core", "name": "end_epoch", "raw_value": "1707658509.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:35:09", "plugin": "core", "name": "start_epoch", "raw_value": "1707658509.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-15", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 15, "time_seconds": 57.15555453300476, "inputs": {"library|input_1": {"src": "hda", "id": "757b21b314c69647"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r1|cut": "5", "library|type": "single", "read_mod_options|rename": "{id} barcode={cut_prefix}"}, "job": {"model_class": "Job", "id": "623f3db31c6738a8", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:36:16.603595", "create_time": "2024-02-11T13:35:29.460937", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-rrml2", "command_line": "ln -f -s '/galaxy/server/database/objects/6/6/d/dataset_66d88807-190d-46fe-ac94-c2a3e282e4a8.dat' 'cutadapt_small_fastq.fq' &&     cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGATCGGAAGAGC'  -u 5     --output='out1.fq'  --error-rate=0.1 --times=1 --overlap=3   --action=trim         --rename='{id} barcode={cut_prefix}'    'cutadapt_small_fastq.fq'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": \"{id} barcode={cut_prefix}\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 131, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"5\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "757b21b314c69647", "src": "hda", "uuid": "66d88807-190d-46fe-ac94-c2a3e282e4a8"}}, "outputs": {"out1": {"id": "8d5e0d36e5e80916", "src": "hda", "uuid": "66669921-2af9-430b-b390-4d0be3a2feb1"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC -u 5 --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim --rename={id} barcode={cut_prefix} cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (3785 \u00b5s/read; 0.02 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             87 bp (85.3%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC -u 5 --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim --rename={id} barcode={cut_prefix} cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (3785 \u00b5s/read; 0.02 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             87 bp (85.3%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:36:07", "plugin": "core", "name": "end_epoch", "raw_value": "1707658567.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:36:07", "plugin": "core", "name": "start_epoch", "raw_value": "1707658567.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-16", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 16, "time_seconds": 56.23794674873352, "inputs": {"library|input_1": {"src": "hda", "id": "74c5dbf05e68dfb8"}, "library|r1|adapters_0|adapter_source|adapter": "CGTCCGAANTAG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "adapter_options|action": "retain"}, "job": {"model_class": "Job", "id": "6535cfeed783ccdd", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:37:12.770693", "create_time": "2024-02-11T13:36:27.230321", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-7dmnj", "command_line": "ln -f -s '/galaxy/server/database/objects/9/9/f/dataset_99fd062f-446d-4eff-bdce-84c6257aec53.dat' 'cutadapt_small_fastq.fq' &&     cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'CGTCCGAANTAG'      --output='out1.fq'  --error-rate=0.1 --times=1 --overlap=3   --action=retain            'cutadapt_small_fastq.fq'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"retain\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 133, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"CGTCCGAANTAG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "74c5dbf05e68dfb8", "src": "hda", "uuid": "99fd062f-446d-4eff-bdce-84c6257aec53"}}, "outputs": {"out1": {"id": "93d878a144a05e12", "src": "hda", "uuid": "e113b0fe-c34b-4f89-b695-fd507c08c6b8"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a CGTCCGAANTAG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=retain cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (4020 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             80 bp (78.4%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a CGTCCGAANTAG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=retain cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (4020 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             80 bp (78.4%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:37:04", "plugin": "core", "name": "end_epoch", "raw_value": "1707658624.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:37:04", "plugin": "core", "name": "start_epoch", "raw_value": "1707658624.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-17", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 17, "time_seconds": 55.952194690704346, "inputs": {"library|input_1": {"src": "hda", "id": "3378436878c8b5fa"}, "library|r1|adapters_0|adapter_source|adapter": "CGTCCGAANTAG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "adapter_options|action": "mask"}, "job": {"model_class": "Job", "id": "ad00eb8b45e95550", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:38:09.161945", "create_time": "2024-02-11T13:37:23.676145", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-j8bqs", "command_line": "ln -f -s '/galaxy/server/database/objects/e/a/e/dataset_eae81d21-a234-49bb-b991-1316bc074861.dat' 'cutadapt_small_fastq.fq' &&     cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'CGTCCGAANTAG'      --output='out1.fq'  --error-rate=0.1 --times=1 --overlap=3   --action=mask            'cutadapt_small_fastq.fq'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"mask\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 135, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"CGTCCGAANTAG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "3378436878c8b5fa", "src": "hda", "uuid": "eae81d21-a234-49bb-b991-1316bc074861"}}, "outputs": {"out1": {"id": "db866c8be9ab2c39", "src": "hda", "uuid": "3bd55c06-8930-486e-a733-351c22057925"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a CGTCCGAANTAG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=mask cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (3925 \u00b5s/read; 0.02 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a CGTCCGAANTAG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=mask cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (3925 \u00b5s/read; 0.02 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:38:00", "plugin": "core", "name": "end_epoch", "raw_value": "1707658680.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:38:00", "plugin": "core", "name": "start_epoch", "raw_value": "1707658680.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-18", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 18, "time_seconds": 57.03530550003052, "inputs": {"library|input_1": {"src": "hda", "id": "83ca1a1bd267f2ec"}, "library|r1|adapters_0|adapter_source|adapter": "CGTCCGAANTAG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "adapter_options|action": "lowercase"}, "job": {"model_class": "Job", "id": "bf1f31652163df21", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:39:06.424800", "create_time": "2024-02-11T13:38:20.158265", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-9t7gr", "command_line": "ln -f -s '/galaxy/server/database/objects/6/2/0/dataset_620dea55-daee-450f-8746-dad6be192917.dat' 'cutadapt_small_fastq.fq' &&     cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'CGTCCGAANTAG'      --output='out1.fq'  --error-rate=0.1 --times=1 --overlap=3   --action=lowercase            'cutadapt_small_fastq.fq'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"lowercase\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 137, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"CGTCCGAANTAG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "83ca1a1bd267f2ec", "src": "hda", "uuid": "620dea55-daee-450f-8746-dad6be192917"}}, "outputs": {"out1": {"id": "ff23b7c7fb402829", "src": "hda", "uuid": "8c33666e-0af9-4d3b-a926-7bc6aa174181"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a CGTCCGAANTAG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=lowercase cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (3775 \u00b5s/read; 0.02 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a CGTCCGAANTAG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=lowercase cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (3775 \u00b5s/read; 0.02 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:38:57", "plugin": "core", "name": "end_epoch", "raw_value": "1707658737.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:38:57", "plugin": "core", "name": "start_epoch", "raw_value": "1707658737.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-19", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 19, "time_seconds": 56.24334406852722, "inputs": {"library|input_1": {"src": "hda", "id": "a3517ab4ffab7c89"}, "library|r1|adapters_0|adapter_source|adapter": "CGTCCGAANTAG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "adapter_options|action": "none"}, "job": {"model_class": "Job", "id": "94b7cc5514abd888", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:40:02.586017", "create_time": "2024-02-11T13:39:16.497659", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-8hfv4", "command_line": "ln -f -s '/galaxy/server/database/objects/0/f/a/dataset_0fadf774-a88c-4596-af45-ed9e14e39fa6.dat' 'cutadapt_small_fastq.fq' &&     cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'CGTCCGAANTAG'      --output='out1.fq'  --error-rate=0.1 --times=1 --overlap=3   --action=none            'cutadapt_small_fastq.fq'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"none\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 139, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"CGTCCGAANTAG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "a3517ab4ffab7c89", "src": "hda", "uuid": "0fadf774-a88c-4596-af45-ed9e14e39fa6"}}, "outputs": {"out1": {"id": "42faaac43fd05fc4", "src": "hda", "uuid": "b1e29063-c437-41b5-9bc0-d1065db56d7b"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a CGTCCGAANTAG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=none cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (4404 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a CGTCCGAANTAG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=none cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (4404 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:39:54", "plugin": "core", "name": "end_epoch", "raw_value": "1707658794.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:39:53", "plugin": "core", "name": "start_epoch", "raw_value": "1707658793.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-2", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 2, "time_seconds": 60.17553114891052, "inputs": {"library|input_1": {"src": "hda", "id": "68c93b580a1ad02f"}, "library|input_2": {"src": "hda", "id": "bdfdf5e252abe0b7"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r2|adapters2_0|adapter_source2|adapter2": "AGATCGGAAGAGC", "library|r2|adapters2_0|adapter_source2|adapter_source_list2": "user", "library|type": "paired"}, "job": {"model_class": "Job", "id": "d23b22626435e261", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:23:48.304536", "create_time": "2024-02-11T13:23:00.668447", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-4qzr6", "command_line": "ln -f -s '/galaxy/server/database/objects/8/1/3/dataset_813380a6-300f-4458-af5b-1058d5edcde3.dat' 'bwa-mem-fastq1_fq_gz.fq.gz' &&  ln -f -s '/galaxy/server/database/objects/7/2/3/dataset_7232e1d0-8b77-4e63-ae4b-d32e872e3891.dat' 'bwa-mem-fastq2_fq_gz.fq.gz' &&    cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGATCGGAAGAGC'         -A 'AGATCGGAAGAGC'      --output='out1.fq.gz' --paired-output='out2.fq.gz'  --error-rate=0.1 --times=1 --overlap=3   --action=trim      --pair-filter=any       'bwa-mem-fastq1_fq_gz.fq.gz' 'bwa-mem-fastq2_fq_gz.fq.gz'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 90, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 91, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source2\": {\"__current_case__\": 0, \"adapter2\": \"AGATCGGAAGAGC\", \"adapter_name2\": \"\", \"adapter_source_list2\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters2\": [], \"cut2\": \"0\", \"front_adapters2\": [], \"quality_cutoff2\": null}, \"type\": \"paired\"}"}, "inputs": {"input_1": {"id": "68c93b580a1ad02f", "src": "hda", "uuid": "813380a6-300f-4458-af5b-1058d5edcde3"}, "input_2": {"id": "bdfdf5e252abe0b7", "src": "hda", "uuid": "7232e1d0-8b77-4e63-ae4b-d32e872e3891"}}, "outputs": {"out1": {"id": "d23b22626435e261", "src": "hda", "uuid": "fc7aa777-0633-4bb6-b3b0-8f6f792d9212"}, "out2": {"id": "fc4774875f8e486b", "src": "hda", "uuid": "82b8cbbf-f222-443a-ae88-69f02547097a"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --pair-filter=any bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.03 s (253 \u00b5s/read; 0.24 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):         49,677 bp (100.0%)\n  Read 1:        24,843 bp\n  Read 2:        24,834 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --pair-filter=any bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.03 s (253 \u00b5s/read; 0.24 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):         49,677 bp (100.0%)\n  Read 1:        24,843 bp\n  Read 2:        24,834 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:23:38", "plugin": "core", "name": "end_epoch", "raw_value": "1707657818.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:23:38", "plugin": "core", "name": "start_epoch", "raw_value": "1707657818.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-20", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 20, "time_seconds": 57.31550669670105, "inputs": {"library|input_1": {"src": "hda", "id": "16eb3a0351ffaf5c"}, "library|r1|adapters_0|adapter_source|adapter": "TAAACAGATTAGT", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "adapter_options|revcomp": true}, "job": {"model_class": "Job", "id": "705b1566acc7e457", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:41:00.127701", "create_time": "2024-02-11T13:40:12.969355", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-pspzp", "command_line": "ln -f -s '/galaxy/server/database/objects/7/f/7/dataset_7f771cdd-9372-41b6-bf81-0fee3cd6d55e.dat' 'cutadapt_small_fastq.fq' &&     cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'TAAACAGATTAGT'      --output='out1.fq'  --error-rate=0.1 --times=1 --overlap=3   --action=trim --revcomp           'cutadapt_small_fastq.fq'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"true\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 141, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"TAAACAGATTAGT\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "16eb3a0351ffaf5c", "src": "hda", "uuid": "7f771cdd-9372-41b6-bf81-0fee3cd6d55e"}}, "outputs": {"out1": {"id": "4d02f126a629abf3", "src": "hda", "uuid": "2afd9aa2-355b-4846-9904-fe8db0cfa3c6"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a TAAACAGATTAGT --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim --revcomp cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (3747 \u00b5s/read; 0.02 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReverse-complemented:                        0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             97 bp (95.1%)\n\n=== Adapter 1 ===\n\nSequence: TAAACAGATTAGT; Type: regular 3'; Length: 13; Trimmed: 1 times; Reverse-complemented: 0 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 100.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n5\t1\t0.0\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a TAAACAGATTAGT --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim --revcomp cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (3747 \u00b5s/read; 0.02 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReverse-complemented:                        0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             97 bp (95.1%)\n\n=== Adapter 1 ===\n\nSequence: TAAACAGATTAGT; Type: regular 3'; Length: 13; Trimmed: 1 times; Reverse-complemented: 0 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 100.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n5\t1\t0.0\t0\t1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:40:50", "plugin": "core", "name": "end_epoch", "raw_value": "1707658850.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:40:50", "plugin": "core", "name": "start_epoch", "raw_value": "1707658850.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-21", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 21, "time_seconds": 61.13666486740112, "inputs": {"library|input_1": {"src": "hda", "id": "838777acb0ae48b5"}, "library|input_2": {"src": "hda", "id": "594652fb1a280ff6"}, "library|r1|adapters_0|adapter_source|adapter": "ATCTGGTTCC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r2|adapters2_0|adapter_source2|adapter2": "CTACAAG", "library|r2|adapters2_0|adapter_source2|adapter_source_list2": "user", "library|type": "paired", "filter_options|minimum_length": "30", "filter_options|length_R2_options|R2_minimum": "10", "filter_options|length_R2_options|length_R2_status": "True", "filter_options|pair_filter": "both"}, "job": {"model_class": "Job", "id": "8d5e0d36e5e80916", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:42:00.415585", "create_time": "2024-02-11T13:41:12.417104", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-wmxvk", "command_line": "ln -f -s '/galaxy/server/database/objects/2/c/9/dataset_2c9bd727-df18-408e-b9a5-38e87625c054.dat' 'bwa-mem-fastq1_assimetric_fq_gz.fq.gz' &&  ln -f -s '/galaxy/server/database/objects/f/d/d/dataset_fdd17689-6827-42d7-9164-8adebb0d1666.dat' 'bwa-mem-fastq2_assimetric_fq_gz.fq.gz' &&    cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'ATCTGGTTCC'         -A 'CTACAAG'      --output='out1.fq.gz' --paired-output='out2.fq.gz'  --error-rate=0.1 --times=1 --overlap=3   --action=trim      --minimum-length=30:10 --pair-filter=both       'bwa-mem-fastq1_assimetric_fq_gz.fq.gz' 'bwa-mem-fastq2_assimetric_fq_gz.fq.gz'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"R2_maximum\": \"\", \"R2_minimum\": \"10\", \"__current_case__\": 0, \"length_R2_status\": \"True\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"30\", \"pair_filter\": \"both\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 143, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 144, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"ATCTGGTTCC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source2\": {\"__current_case__\": 0, \"adapter2\": \"CTACAAG\", \"adapter_name2\": \"\", \"adapter_source_list2\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters2\": [], \"cut2\": \"0\", \"front_adapters2\": [], \"quality_cutoff2\": null}, \"type\": \"paired\"}"}, "inputs": {"input_1": {"id": "838777acb0ae48b5", "src": "hda", "uuid": "2c9bd727-df18-408e-b9a5-38e87625c054"}, "input_2": {"id": "594652fb1a280ff6", "src": "hda", "uuid": "fdd17689-6827-42d7-9164-8adebb0d1666"}}, "outputs": {"out1": {"id": "2007a24523a98bfa", "src": "hda", "uuid": "d2ac8f2b-6806-4578-8c5f-f7d8702b7f1c"}, "out2": {"id": "16ecc8623564af07", "src": "hda", "uuid": "badd9a92-ed0b-4086-94f2-66b7507985ec"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a ATCTGGTTCC -A CTACAAG --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=30:10 --pair-filter=both bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.03 s (300 \u00b5s/read; 0.20 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                      32 (32.3%)\n  Read 2 with adapter:                      15 (15.2%)\n\n== Read fate breakdown ==\nPairs that were too short:                   3 (3.0%)\nPairs written (passing filters):            96 (97.0%)\n\nTotal basepairs processed:        48,291 bp\n  Read 1:        24,147 bp\n  Read 2:        24,144 bp\nTotal written (filtered):         38,492 bp (79.7%)\n  Read 1:        17,741 bp\n  Read 2:        20,751 bp\n\n=== First read: Adapter 1 ===\n\nSequence: ATCTGGTTCC; Type: regular 3'; Length: 10; Trimmed: 32 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 90.6%\n  G: 3.1%\n  T: 0.0%\n  none/other: 6.2%\nWARNING:\n    The adapter is preceded by 'C' extremely often.\n    The provided adapter sequence could be incomplete at its 5' end.\n    Ignore this warning when trimming primers.\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n13\t1\t0.0\t1\t1\n14\t1\t0.0\t1\t1\n201\t1\t0.0\t1\t1\n203\t1\t0.0\t1\t1\n208\t2\t0.0\t1\t2\n209\t1\t0.0\t1\t1\n211\t1\t0.0\t1\t1\n214\t2\t0.0\t1\t2\n217\t2\t0.0\t1\t2\n218\t1\t0.0\t1\t1\n222\t1\t0.0\t1\t1\n226\t1\t0.0\t1\t1\n227\t2\t0.0\t1\t2\n228\t1\t0.0\t1\t1\n229\t1\t0.0\t1\t1\n232\t2\t0.0\t1\t2\n238\t1\t0.0\t1\t1\n242\t7\t0.0\t1\t7\n251\t1\t0.0\t1\t0 1\n\n\n=== Second read: Adapter 2 ===\n\nSequence: CTACAAG; Type: regular 3'; Length: 7; Trimmed: 15 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-7 bp: 0\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 73.3%\n  G: 0.0%\n  T: 0.0%\n  none/other: 26.7%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t1\t0.0\t0\t1\n228\t2\t0.0\t0\t2\n229\t1\t0.0\t0\t1\n238\t3\t0.0\t0\t3\n241\t1\t0.0\t0\t1\n243\t1\t0.0\t0\t1\n246\t1\t0.0\t0\t1\n248\t1\t0.0\t0\t1\n250\t1\t0.0\t0\t1\n251\t3\t0.0\t0\t3\n\n\nWARNING:\n    One or more of your adapter sequences may be incomplete.\n    Please see the detailed output above.\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a ATCTGGTTCC -A CTACAAG --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=30:10 --pair-filter=both bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.03 s (300 \u00b5s/read; 0.20 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                      32 (32.3%)\n  Read 2 with adapter:                      15 (15.2%)\n\n== Read fate breakdown ==\nPairs that were too short:                   3 (3.0%)\nPairs written (passing filters):            96 (97.0%)\n\nTotal basepairs processed:        48,291 bp\n  Read 1:        24,147 bp\n  Read 2:        24,144 bp\nTotal written (filtered):         38,492 bp (79.7%)\n  Read 1:        17,741 bp\n  Read 2:        20,751 bp\n\n=== First read: Adapter 1 ===\n\nSequence: ATCTGGTTCC; Type: regular 3'; Length: 10; Trimmed: 32 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 90.6%\n  G: 3.1%\n  T: 0.0%\n  none/other: 6.2%\nWARNING:\n    The adapter is preceded by 'C' extremely often.\n    The provided adapter sequence could be incomplete at its 5' end.\n    Ignore this warning when trimming primers.\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n13\t1\t0.0\t1\t1\n14\t1\t0.0\t1\t1\n201\t1\t0.0\t1\t1\n203\t1\t0.0\t1\t1\n208\t2\t0.0\t1\t2\n209\t1\t0.0\t1\t1\n211\t1\t0.0\t1\t1\n214\t2\t0.0\t1\t2\n217\t2\t0.0\t1\t2\n218\t1\t0.0\t1\t1\n222\t1\t0.0\t1\t1\n226\t1\t0.0\t1\t1\n227\t2\t0.0\t1\t2\n228\t1\t0.0\t1\t1\n229\t1\t0.0\t1\t1\n232\t2\t0.0\t1\t2\n238\t1\t0.0\t1\t1\n242\t7\t0.0\t1\t7\n251\t1\t0.0\t1\t0 1\n\n\n=== Second read: Adapter 2 ===\n\nSequence: CTACAAG; Type: regular 3'; Length: 7; Trimmed: 15 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-7 bp: 0\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 73.3%\n  G: 0.0%\n  T: 0.0%\n  none/other: 26.7%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t1\t0.0\t0\t1\n228\t2\t0.0\t0\t2\n229\t1\t0.0\t0\t1\n238\t3\t0.0\t0\t3\n241\t1\t0.0\t0\t1\n243\t1\t0.0\t0\t1\n246\t1\t0.0\t0\t1\n248\t1\t0.0\t0\t1\n250\t1\t0.0\t0\t1\n251\t3\t0.0\t0\t3\n\n\nWARNING:\n    One or more of your adapter sequences may be incomplete.\n    Please see the detailed output above.\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:41:50", "plugin": "core", "name": "end_epoch", "raw_value": "1707658910.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:41:50", "plugin": "core", "name": "start_epoch", "raw_value": "1707658910.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-22", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 22, "time_seconds": 61.89858627319336, "inputs": {"library|input_1": {"src": "hda", "id": "3ee4bca342cd9040"}, "library|input_2": {"src": "hda", "id": "ba73b499ba337358"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r2|adapters2_0|adapter_source2|adapter2": "AGATCGGAAGAGC", "library|r2|adapters2_0|adapter_source2|adapter_source_list2": "user", "library|type": "paired", "filter_options|maximum_length": "50", "filter_options|length_R2_options|R2_maximum": "30", "filter_options|length_R2_options|length_R2_status": "True", "filter_options|pair_filter": "both"}, "job": {"model_class": "Job", "id": "3378436878c8b5fa", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:43:02.496884", "create_time": "2024-02-11T13:42:13.280120", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-kllt4", "command_line": "ln -f -s '/galaxy/server/database/objects/3/2/c/dataset_32c033d6-e26c-43a6-ab39-7717c3c7eee6.dat' 'bwa-mem-fastq1_assimetric_fq_gz.fq.gz' &&  ln -f -s '/galaxy/server/database/objects/5/f/6/dataset_5f6886c0-a0b3-43e6-a615-f5ccb3267737.dat' 'bwa-mem-fastq2_assimetric_fq_gz.fq.gz' &&    cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGATCGGAAGAGC'         -A 'AGATCGGAAGAGC'      --output='out1.fq.gz' --paired-output='out2.fq.gz'  --error-rate=0.1 --times=1 --overlap=3   --action=trim      --maximum-length=50:30 --pair-filter=both       'bwa-mem-fastq1_assimetric_fq_gz.fq.gz' 'bwa-mem-fastq2_assimetric_fq_gz.fq.gz'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"R2_maximum\": \"30\", \"R2_minimum\": \"\", \"__current_case__\": 0, \"length_R2_status\": \"True\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"50\", \"minimum_length\": \"\", \"pair_filter\": \"both\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 147, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 148, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source2\": {\"__current_case__\": 0, \"adapter2\": \"AGATCGGAAGAGC\", \"adapter_name2\": \"\", \"adapter_source_list2\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters2\": [], \"cut2\": \"0\", \"front_adapters2\": [], \"quality_cutoff2\": null}, \"type\": \"paired\"}"}, "inputs": {"input_1": {"id": "3ee4bca342cd9040", "src": "hda", "uuid": "32c033d6-e26c-43a6-ab39-7717c3c7eee6"}, "input_2": {"id": "ba73b499ba337358", "src": "hda", "uuid": "5f6886c0-a0b3-43e6-a615-f5ccb3267737"}}, "outputs": {"out1": {"id": "eed187305b03044d", "src": "hda", "uuid": "1634bf3f-2ba0-42ea-b228-379a413bc45a"}, "out2": {"id": "cf521ee7fd545b63", "src": "hda", "uuid": "06135e8d-11fe-40fa-b35b-8345c5e63de0"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --maximum-length=50:30 --pair-filter=both bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.02 s (199 \u00b5s/read; 0.30 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\n\n== Read fate breakdown ==\nPairs that were too long:                   96 (97.0%)\nPairs written (passing filters):             3 (3.0%)\n\nTotal basepairs processed:        48,291 bp\n  Read 1:        24,147 bp\n  Read 2:        24,144 bp\nTotal written (filtered):             99 bp (0.2%)\n  Read 1:            51 bp\n  Read 2:            48 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --maximum-length=50:30 --pair-filter=both bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.02 s (199 \u00b5s/read; 0.30 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\n\n== Read fate breakdown ==\nPairs that were too long:                   96 (97.0%)\nPairs written (passing filters):             3 (3.0%)\n\nTotal basepairs processed:        48,291 bp\n  Read 1:        24,147 bp\n  Read 2:        24,144 bp\nTotal written (filtered):             99 bp (0.2%)\n  Read 1:            51 bp\n  Read 2:            48 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:42:52", "plugin": "core", "name": "end_epoch", "raw_value": "1707658972.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:42:52", "plugin": "core", "name": "start_epoch", "raw_value": "1707658972.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-23", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 23, "time_seconds": 60.980568647384644, "inputs": {"library|input_1": {"src": "hda", "id": "fe7b52a48988994a"}, "library|input_2": {"src": "hda", "id": "6847a383930741ee"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r2|adapters2_0|adapter_source2|adapter2": "AGATCGGAAGAGC", "library|r2|adapters2_0|adapter_source2|adapter_source_list2": "user", "library|type": "paired", "filter_options|minimum_length": "10", "filter_options|maximum_length": "50", "filter_options|length_R2_options|R2_maximum": "30", "filter_options|length_R2_options|length_R2_status": "True", "filter_options|pair_filter": "both"}, "job": {"model_class": "Job", "id": "ff23b7c7fb402829", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:44:03.666590", "create_time": "2024-02-11T13:43:15.705144", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-gvdw2", "command_line": "ln -f -s '/galaxy/server/database/objects/4/7/a/dataset_47ac19ae-cb59-4f08-94c7-212554010642.dat' 'bwa-mem-fastq1_assimetric_fq_gz.fq.gz' &&  ln -f -s '/galaxy/server/database/objects/0/4/5/dataset_04557dae-6ab0-4b7e-ae7a-36fc5f1acf41.dat' 'bwa-mem-fastq2_assimetric_fq_gz.fq.gz' &&    cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGATCGGAAGAGC'         -A 'AGATCGGAAGAGC'      --output='out1.fq.gz' --paired-output='out2.fq.gz'  --error-rate=0.1 --times=1 --overlap=3   --action=trim      --minimum-length=10: --maximum-length=50:30 --pair-filter=both       'bwa-mem-fastq1_assimetric_fq_gz.fq.gz' 'bwa-mem-fastq2_assimetric_fq_gz.fq.gz'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"R2_maximum\": \"30\", \"R2_minimum\": \"\", \"__current_case__\": 0, \"length_R2_status\": \"True\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"50\", \"minimum_length\": \"10\", \"pair_filter\": \"both\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 151, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 152, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source2\": {\"__current_case__\": 0, \"adapter2\": \"AGATCGGAAGAGC\", \"adapter_name2\": \"\", \"adapter_source_list2\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters2\": [], \"cut2\": \"0\", \"front_adapters2\": [], \"quality_cutoff2\": null}, \"type\": \"paired\"}"}, "inputs": {"input_1": {"id": "fe7b52a48988994a", "src": "hda", "uuid": "47ac19ae-cb59-4f08-94c7-212554010642"}, "input_2": {"id": "6847a383930741ee", "src": "hda", "uuid": "04557dae-6ab0-4b7e-ae7a-36fc5f1acf41"}}, "outputs": {"out1": {"id": "7dfb5b7e1cb0cc40", "src": "hda", "uuid": "34d4380d-3ccd-49a9-911a-9ca200a58892"}, "out2": {"id": "57bc60d1b2378deb", "src": "hda", "uuid": "3b5a2814-8c72-4369-8e86-a5ffb015653c"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10: --maximum-length=50:30 --pair-filter=both bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.02 s (241 \u00b5s/read; 0.25 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs that were too long:                   96 (97.0%)\nPairs written (passing filters):             3 (3.0%)\n\nTotal basepairs processed:        48,291 bp\n  Read 1:        24,147 bp\n  Read 2:        24,144 bp\nTotal written (filtered):             99 bp (0.2%)\n  Read 1:            51 bp\n  Read 2:            48 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10: --maximum-length=50:30 --pair-filter=both bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.02 s (241 \u00b5s/read; 0.25 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs that were too long:                   96 (97.0%)\nPairs written (passing filters):             3 (3.0%)\n\nTotal basepairs processed:        48,291 bp\n  Read 1:        24,147 bp\n  Read 2:        24,144 bp\nTotal written (filtered):             99 bp (0.2%)\n  Read 1:            51 bp\n  Read 2:            48 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:43:53", "plugin": "core", "name": "end_epoch", "raw_value": "1707659033.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:43:53", "plugin": "core", "name": "start_epoch", "raw_value": "1707659033.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-24", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 24, "time_seconds": 59.29376196861267, "inputs": {"library|input_1": {"src": "hda", "id": "37075ce553c86434"}, "library|input_2": {"src": "hda", "id": "1ccbc3921ab6ec80"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r2|adapters2_0|adapter_source2|adapter2": "AGATCGGAAGAGC", "library|r2|adapters2_0|adapter_source2|adapter_source_list2": "user", "library|type": "paired", "filter_options|minimum_length": "10", "filter_options|maximum_length": "50", "filter_options|length_R2_options|R2_minimum": "10", "filter_options|length_R2_options|length_R2_status": "True", "filter_options|pair_filter": "both"}, "job": {"model_class": "Job", "id": "16eb3a0351ffaf5c", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:45:03.045362", "create_time": "2024-02-11T13:44:16.459144", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-z9zpz", "command_line": "ln -f -s '/galaxy/server/database/objects/7/e/c/dataset_7ec15415-4234-4bd3-a94d-c2893910f15f.dat' 'bwa-mem-fastq1_assimetric_fq_gz.fq.gz' &&  ln -f -s '/galaxy/server/database/objects/f/6/1/dataset_f614281c-c164-4468-a825-f349c2df866e.dat' 'bwa-mem-fastq2_assimetric_fq_gz.fq.gz' &&    cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGATCGGAAGAGC'         -A 'AGATCGGAAGAGC'      --output='out1.fq.gz' --paired-output='out2.fq.gz'  --error-rate=0.1 --times=1 --overlap=3   --action=trim      --minimum-length=10:10 --maximum-length=50: --pair-filter=both       'bwa-mem-fastq1_assimetric_fq_gz.fq.gz' 'bwa-mem-fastq2_assimetric_fq_gz.fq.gz'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"R2_maximum\": \"\", \"R2_minimum\": \"10\", \"__current_case__\": 0, \"length_R2_status\": \"True\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"50\", \"minimum_length\": \"10\", \"pair_filter\": \"both\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 155, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 156, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source2\": {\"__current_case__\": 0, \"adapter2\": \"AGATCGGAAGAGC\", \"adapter_name2\": \"\", \"adapter_source_list2\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters2\": [], \"cut2\": \"0\", \"front_adapters2\": [], \"quality_cutoff2\": null}, \"type\": \"paired\"}"}, "inputs": {"input_1": {"id": "37075ce553c86434", "src": "hda", "uuid": "7ec15415-4234-4bd3-a94d-c2893910f15f"}, "input_2": {"id": "1ccbc3921ab6ec80", "src": "hda", "uuid": "f614281c-c164-4468-a825-f349c2df866e"}}, "outputs": {"out2": {"id": "ce822804f31486de", "src": "hda", "uuid": "255552c5-c004-4af5-926b-4b213751488f"}, "out1": {"id": "f10eba36f925ca07", "src": "hda", "uuid": "0cf3c72a-e52f-46d6-aa7a-8105e2363914"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10:10 --maximum-length=50: --pair-filter=both bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.02 s (214 \u00b5s/read; 0.28 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs that were too long:                   96 (97.0%)\nPairs written (passing filters):             3 (3.0%)\n\nTotal basepairs processed:        48,291 bp\n  Read 1:        24,147 bp\n  Read 2:        24,144 bp\nTotal written (filtered):             99 bp (0.2%)\n  Read 1:            51 bp\n  Read 2:            48 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10:10 --maximum-length=50: --pair-filter=both bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.02 s (214 \u00b5s/read; 0.28 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\n\n== Read fate breakdown ==\nPairs that were too short:                   0 (0.0%)\nPairs that were too long:                   96 (97.0%)\nPairs written (passing filters):             3 (3.0%)\n\nTotal basepairs processed:        48,291 bp\n  Read 1:        24,147 bp\n  Read 2:        24,144 bp\nTotal written (filtered):             99 bp (0.2%)\n  Read 1:            51 bp\n  Read 2:            48 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:44:54", "plugin": "core", "name": "end_epoch", "raw_value": "1707659094.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:44:54", "plugin": "core", "name": "start_epoch", "raw_value": "1707659094.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-25", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 25, "time_seconds": 58.17406749725342, "inputs": {"library|input_1": {"src": "hda", "id": "aa3ef6afc3d6e1bd"}, "library|r1|adapters_0|adapter_source|adapter": "AGCCGCTANGACG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "read_mod_options|shorten_options|length": "10", "read_mod_options|shorten_options|shorten_end": "3prime", "read_mod_options|shorten_options|shorten_values": "True"}, "job": {"model_class": "Job", "id": "838777acb0ae48b5", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:46:02.450054", "create_time": "2024-02-11T13:45:15.185002", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-tqs4k", "command_line": "ln -f -s '/galaxy/server/database/objects/2/c/0/dataset_2c07dd82-bc53-4470-b4cc-25a931ca378b.dat' 'cutadapt_small_fastq.fq' &&     cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGCCGCTANGACG'      --output='out1.fq'  --error-rate=0.1 --times=1 --overlap=3   --action=trim         --length=10    'cutadapt_small_fastq.fq'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 0, \"length\": \"10\", \"shorten_end\": \"3prime\", \"shorten_values\": \"True\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 159, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGCCGCTANGACG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "aa3ef6afc3d6e1bd", "src": "hda", "uuid": "2c07dd82-bc53-4470-b4cc-25a931ca378b"}}, "outputs": {"out1": {"id": "3917a8dd2f21ee68", "src": "hda", "uuid": "a8b6b903-6887-4098-9088-92c99a799286"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGCCGCTANGACG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (4628 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             20 bp (19.6%)\n\n=== Adapter 1 ===\n\nSequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGCCGCTANGACG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (4628 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             20 bp (19.6%)\n\n=== Adapter 1 ===\n\nSequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:45:53", "plugin": "core", "name": "end_epoch", "raw_value": "1707659153.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:45:53", "plugin": "core", "name": "start_epoch", "raw_value": "1707659153.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-26", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 26, "time_seconds": 56.839914321899414, "inputs": {"library|input_1": {"src": "hda", "id": "3db4c7a48bb4190b"}, "library|r1|adapters_0|adapter_source|adapter": "AGCCGCTANGACG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "read_mod_options|shorten_options|length": "10", "read_mod_options|shorten_options|shorten_end": "5prime", "read_mod_options|shorten_options|shorten_values": "True"}, "job": {"model_class": "Job", "id": "2007a24523a98bfa", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:46:59.534188", "create_time": "2024-02-11T13:46:13.474254", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-794p2", "command_line": "ln -f -s '/galaxy/server/database/objects/1/d/d/dataset_1dd3a545-0e99-4f45-88e3-243ca873c4b5.dat' 'cutadapt_small_fastq.fq' &&     cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGCCGCTANGACG'      --output='out1.fq'  --error-rate=0.1 --times=1 --overlap=3   --action=trim         --length=-10    'cutadapt_small_fastq.fq'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 0, \"length\": \"10\", \"shorten_end\": \"5prime\", \"shorten_values\": \"True\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 161, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGCCGCTANGACG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "3db4c7a48bb4190b", "src": "hda", "uuid": "1dd3a545-0e99-4f45-88e3-243ca873c4b5"}}, "outputs": {"out1": {"id": "f9d828c742944cfe", "src": "hda", "uuid": "ea80284f-26e6-46a7-90a9-3bafc30d3882"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGCCGCTANGACG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=-10 cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (3981 \u00b5s/read; 0.02 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             20 bp (19.6%)\n\n=== Adapter 1 ===\n\nSequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGCCGCTANGACG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=-10 cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (3981 \u00b5s/read; 0.02 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             20 bp (19.6%)\n\n=== Adapter 1 ===\n\nSequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:46:51", "plugin": "core", "name": "end_epoch", "raw_value": "1707659211.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:46:50", "plugin": "core", "name": "start_epoch", "raw_value": "1707659210.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-27", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 27, "time_seconds": 56.38287138938904, "inputs": {"library|input_1": {"src": "hda", "id": "80b1e1904df8444b"}, "library|r1|adapters_0|adapter_source|adapter": "AGCGGCTTAGACG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "filter_options|max_expected_errors": "10"}, "job": {"model_class": "Job", "id": "3ee4bca342cd9040", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:47:55.781152", "create_time": "2024-02-11T13:47:09.656361", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-qsc4c", "command_line": "ln -f -s '/galaxy/server/database/objects/a/7/6/dataset_a7685c42-837a-4529-ac72-0f195092242b.dat' 'cutadapt_small_fastq.fq' &&     cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGCGGCTTAGACG'      --output='out1.fq'  --error-rate=0.1 --times=1 --overlap=3   --action=trim      --max-expected-errors=10       'cutadapt_small_fastq.fq'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"10\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 163, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGCGGCTTAGACG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "80b1e1904df8444b", "src": "hda", "uuid": "a7685c42-837a-4529-ac72-0f195092242b"}}, "outputs": {"out1": {"id": "e401b382dbb1c708", "src": "hda", "uuid": "ef9da0ec-ab9e-4017-9bc1-d5bdcd975df9"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGCGGCTTAGACG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim --max-expected-errors=10 cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (3714 \u00b5s/read; 0.02 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\n\n== Read fate breakdown ==\nReads with too many exp. errors:             0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: AGCGGCTTAGACG; Type: regular 3'; Length: 13; Trimmed: 0 times\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGCGGCTTAGACG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim --max-expected-errors=10 cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (3714 \u00b5s/read; 0.02 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\n\n== Read fate breakdown ==\nReads with too many exp. errors:             0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: AGCGGCTTAGACG; Type: regular 3'; Length: 13; Trimmed: 0 times\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:47:47", "plugin": "core", "name": "end_epoch", "raw_value": "1707659267.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:47:47", "plugin": "core", "name": "start_epoch", "raw_value": "1707659267.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-28", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 28, "time_seconds": 57.09342122077942, "inputs": {"library|input_1": {"src": "hda", "id": "19806b340d47a69a"}, "library|r1|adapters_0|adapter_source|adapter": "GAANTAGCTACCAC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "adapter_options|internal": "X"}, "job": {"model_class": "Job", "id": "eed187305b03044d", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:48:53.194640", "create_time": "2024-02-11T13:48:06.210668", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-c6l5b", "command_line": "ln -f -s '/galaxy/server/database/objects/5/0/5/dataset_505c770d-bff1-4141-bc71-3cfe804b8830.dat' 'cutadapt_small_fastq.fq' &&     cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'GAANTAGCTACCACX'      --output='out1.fq'  --error-rate=0.1 --times=1 --overlap=3   --action=trim            'cutadapt_small_fastq.fq'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"X\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 165, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"GAANTAGCTACCAC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "19806b340d47a69a", "src": "hda", "uuid": "505c770d-bff1-4141-bc71-3cfe804b8830"}}, "outputs": {"out1": {"id": "2b93d31cb609bca3", "src": "hda", "uuid": "ac4f513a-5efe-4d5c-b6ca-85546d1da639"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a GAANTAGCTACCACX --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (3929 \u00b5s/read; 0.02 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: GAANTAGCTACCAC; Type: non-internal 3'; Length: 14; Trimmed: 0 times\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a GAANTAGCTACCACX --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (3929 \u00b5s/read; 0.02 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: GAANTAGCTACCAC; Type: non-internal 3'; Length: 14; Trimmed: 0 times\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:48:44", "plugin": "core", "name": "end_epoch", "raw_value": "1707659324.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:48:43", "plugin": "core", "name": "start_epoch", "raw_value": "1707659323.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-29", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 29, "time_seconds": 60.314902782440186, "inputs": {"library|input_1": {"src": "hda", "id": "6762e689810baa2c"}, "library|input_2": {"src": "hda", "id": "4d4e360d43403551"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r2|adapters2_0|adapter_source2|adapter2": "AGATCGGAAGAGC", "library|r2|adapters2_0|adapter_source2|adapter_source_list2": "user", "library|type": "paired", "adapter_options|internal": "X"}, "job": {"model_class": "Job", "id": "6847a383930741ee", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:49:52.487559", "create_time": "2024-02-11T13:49:05.824936", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-4nprf", "command_line": "ln -f -s '/galaxy/server/database/objects/d/6/4/dataset_d64c561d-ad9c-4d8a-b6a2-fe8686431c5b.dat' 'bwa-mem-fastq1_assimetric_fq_gz.fq.gz' &&  ln -f -s '/galaxy/server/database/objects/f/b/c/dataset_fbcf7eed-1c5d-4003-ae88-72bb2989c04a.dat' 'bwa-mem-fastq2_assimetric_fq_gz.fq.gz' &&    cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGATCGGAAGAGCX'         -A 'AGATCGGAAGAGCX'      --output='out1.fq.gz' --paired-output='out2.fq.gz'  --error-rate=0.1 --times=1 --overlap=3   --action=trim      --pair-filter=any       'bwa-mem-fastq1_assimetric_fq_gz.fq.gz' 'bwa-mem-fastq2_assimetric_fq_gz.fq.gz'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"X\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 167, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 168, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source2\": {\"__current_case__\": 0, \"adapter2\": \"AGATCGGAAGAGC\", \"adapter_name2\": \"\", \"adapter_source_list2\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters2\": [], \"cut2\": \"0\", \"front_adapters2\": [], \"quality_cutoff2\": null}, \"type\": \"paired\"}"}, "inputs": {"input_1": {"id": "6762e689810baa2c", "src": "hda", "uuid": "d64c561d-ad9c-4d8a-b6a2-fe8686431c5b"}, "input_2": {"id": "4d4e360d43403551", "src": "hda", "uuid": "fbcf7eed-1c5d-4003-ae88-72bb2989c04a"}}, "outputs": {"out2": {"id": "c713b0630023b5aa", "src": "hda", "uuid": "5bdd29b6-e7e6-4edc-a2ae-b6405a125896"}, "out1": {"id": "1addc2d2d1af32c7", "src": "hda", "uuid": "61b5b3a4-633e-4416-9c5c-bcdc1bae5df7"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGCX -A AGATCGGAAGAGCX --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --pair-filter=any bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.03 s (256 \u00b5s/read; 0.23 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        48,291 bp\n  Read 1:        24,147 bp\n  Read 2:        24,144 bp\nTotal written (filtered):         48,270 bp (100.0%)\n  Read 1:        24,141 bp\n  Read 2:        24,129 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGCX -A AGATCGGAAGAGCX --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --pair-filter=any bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.03 s (256 \u00b5s/read; 0.23 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        48,291 bp\n  Read 1:        24,147 bp\n  Read 2:        24,144 bp\nTotal written (filtered):         48,270 bp (100.0%)\n  Read 1:        24,141 bp\n  Read 2:        24,129 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:49:43", "plugin": "core", "name": "end_epoch", "raw_value": "1707659383.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:49:42", "plugin": "core", "name": "start_epoch", "raw_value": "1707659382.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-3", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 3, "time_seconds": 58.60114765167236, "inputs": {"library|input_1": {"src": "hdca", "id": "5cadd8ea31b42b73"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r2|adapters2_0|adapter_source2|adapter2": "AGATCGGAAGAGC", "library|r2|adapters2_0|adapter_source2|adapter_source_list2": "user", "library|type": "paired_collection"}, "job": {"model_class": "Job", "id": "88df71bbea89c7d2", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:24:48.598887", "create_time": "2024-02-11T13:24:01.684691", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-b822r", "command_line": "ln -f -s '/galaxy/server/database/objects/7/e/e/dataset_7ee61e83-1a6f-46b5-9fd0-b0660d8d5f98.dat' 'Unnamed Collection_1.fq.gz' &&  ln -f -s '/galaxy/server/database/objects/2/f/0/dataset_2f0223d9-3e50-4fa6-901c-3f3ba35306f4.dat' 'Unnamed Collection_2.fq.gz' &&    cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGATCGGAAGAGC'         -A 'AGATCGGAAGAGC'      --output='out1.fq.gz' --paired-output='out2.fq.gz'  --error-rate=0.1 --times=1 --overlap=3   --action=trim      --pair-filter=any       'Unnamed Collection_1.fq.gz' 'Unnamed Collection_2.fq.gz'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 2, \"input_1\": {\"values\": [{\"id\": 1, \"src\": \"hdca\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source2\": {\"__current_case__\": 0, \"adapter2\": \"AGATCGGAAGAGC\", \"adapter_name2\": \"\", \"adapter_source_list2\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters2\": [], \"cut2\": \"0\", \"front_adapters2\": [], \"quality_cutoff2\": null}, \"type\": \"paired_collection\"}"}, "inputs": {"input_11": {"id": "d336ff2917e99dba", "src": "hda", "uuid": "7ee61e83-1a6f-46b5-9fd0-b0660d8d5f98"}, "input_12": {"id": "88df71bbea89c7d2", "src": "hda", "uuid": "2f0223d9-3e50-4fa6-901c-3f3ba35306f4"}}, "outputs": {"out_pairs|__part__|forward": {"id": "431414bde391f9cb", "src": "hda", "uuid": "5211e0e3-20ea-4795-ae17-06c386d92d01"}, "out_pairs|__part__|reverse": {"id": "4a40ec8bb9358f67", "src": "hda", "uuid": "a199e052-7300-491b-894b-b1873b651bb6"}}, "output_collections": {"out_pairs": {"id": "f5e4d32bb041b3d3", "src": "hdca"}}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --pair-filter=any Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.03 s (255 \u00b5s/read; 0.24 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):         49,677 bp (100.0%)\n  Read 1:        24,843 bp\n  Read 2:        24,834 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --pair-filter=any Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.03 s (255 \u00b5s/read; 0.24 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):         49,677 bp (100.0%)\n  Read 1:        24,843 bp\n  Read 2:        24,834 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:24:39", "plugin": "core", "name": "end_epoch", "raw_value": "1707657879.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:24:39", "plugin": "core", "name": "start_epoch", "raw_value": "1707657879.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Collection element forward of collection out_pairs:  different than expected\nExpected file size of 12000+-2000 found 54684"], "status": "failure"}}, {"id": "cutadapt/4.0+galaxy1-30", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 30, "status": "skip"}}, {"id": "cutadapt/4.0+galaxy1-31", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 31, "time_seconds": 59.96497559547424, "inputs": {"library|input_1": {"src": "hdca", "id": "f16902bb49e3a34b"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r1|adapters_0|single_noindels": true, "library|r2|adapters2_0|adapter_source2|adapter2": "AGATCGGAAGAGC", "library|r2|adapters2_0|adapter_source2|adapter_source_list2": "user", "library|r2|adapters2_0|single_noindels": true, "library|type": "paired_collection"}, "job": {"model_class": "Job", "id": "37075ce553c86434", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:50:53.614691", "create_time": "2024-02-11T13:50:06.009212", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-z6v8w", "command_line": "ln -f -s '/galaxy/server/database/objects/a/a/d/dataset_aad214e5-1bd2-470d-a6a7-c955f74a22a8.dat' 'Unnamed Collection_1.fq.gz' &&  ln -f -s '/galaxy/server/database/objects/1/1/a/dataset_11a8e487-cb01-4941-923c-3617acfc55f3.dat' 'Unnamed Collection_2.fq.gz' &&    cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGATCGGAAGAGC;noindels'         -A 'AGATCGGAAGAGC;noindels'      --output='out1.fq.gz' --paired-output='out2.fq.gz'  --error-rate=0.1 --times=1 --overlap=3   --action=trim      --pair-filter=any       'Unnamed Collection_1.fq.gz' 'Unnamed Collection_2.fq.gz'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 2, \"input_1\": {\"values\": [{\"id\": 5, \"src\": \"hdca\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"true\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source2\": {\"__current_case__\": 0, \"adapter2\": \"AGATCGGAAGAGC\", \"adapter_name2\": \"\", \"adapter_source_list2\": \"user\"}, \"single_noindels\": \"true\"}], \"anywhere_adapters2\": [], \"cut2\": \"0\", \"front_adapters2\": [], \"quality_cutoff2\": null}, \"type\": \"paired_collection\"}"}, "inputs": {"input_11": {"id": "7f84208990da49f5", "src": "hda", "uuid": "aad214e5-1bd2-470d-a6a7-c955f74a22a8"}, "input_12": {"id": "c8322a4dddbfbfe6", "src": "hda", "uuid": "11a8e487-cb01-4941-923c-3617acfc55f3"}}, "outputs": {"out_pairs|__part__|forward": {"id": "5c9860e5c185efbd", "src": "hda", "uuid": "2fb69dc2-234b-4262-bebc-b047a2bb012b"}, "out_pairs|__part__|reverse": {"id": "906cc212e182fc7c", "src": "hda", "uuid": "a1fbed8b-5590-45cd-a454-d67e266f916c"}}, "output_collections": {"out_pairs": {"id": "9b4e80dc53cc923e", "src": "hdca"}}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC;noindels -A AGATCGGAAGAGC;noindels --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --pair-filter=any Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.03 s (271 \u00b5s/read; 0.22 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):         49,677 bp (100.0%)\n  Read 1:        24,843 bp\n  Read 2:        24,834 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC;noindels -A AGATCGGAAGAGC;noindels --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --pair-filter=any Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gz\nProcessing paired-end reads on 1 core ...\nFinished in 0.03 s (271 \u00b5s/read; 0.22 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       4 (4.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nTotal written (filtered):         49,677 bp (100.0%)\n  Read 1:        24,843 bp\n  Read 2:        24,834 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 50.0%\n  T: 50.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n4\t1\t0.4\t0\t1\n5\t1\t0.1\t0\t1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:50:44", "plugin": "core", "name": "end_epoch", "raw_value": "1707659444.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:50:43", "plugin": "core", "name": "start_epoch", "raw_value": "1707659443.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-32", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 32, "time_seconds": 60.16505527496338, "inputs": {"library|input_1": {"src": "hdca", "id": "20716f281ec511ae"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|r2|adapters2_0|adapter_source2|adapter2": "AGATCGGAAGAGC", "library|r2|adapters2_0|adapter_source2|adapter_source_list2": "user", "library|r2|quality_cutoff2": "15,20", "library|type": "paired_collection", "read_mod_options|quality_cutoff": "5"}, "job": {"model_class": "Job", "id": "ce822804f31486de", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:51:54.089004", "create_time": "2024-02-11T13:51:06.023291", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-cc9mt", "command_line": "ln -f -s '/galaxy/server/database/objects/5/1/4/dataset_5142fcf0-a7c3-47bf-b701-ae04321253bf.dat' 'Unnamed Collection_1.fq.gz' &&  ln -f -s '/galaxy/server/database/objects/1/c/5/dataset_1c573b77-169b-4332-86ed-882bf447bdae.dat' 'Unnamed Collection_2.fq.gz' &&    cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGATCGGAAGAGC'         -A 'AGATCGGAAGAGC'      --output='out1.fq.gz' --paired-output='out2.fq.gz'  --error-rate=0.1 --times=1 --overlap=3   --action=trim      --pair-filter=any   --quality-cutoff=5     'Unnamed Collection_1.fq.gz' 'Unnamed Collection_2.fq.gz' -Q=15,20", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"5\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 2, \"input_1\": {\"values\": [{\"id\": 7, \"src\": \"hdca\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"r2\": {\"adapters2\": [{\"__index__\": 0, \"adapter_source2\": {\"__current_case__\": 0, \"adapter2\": \"AGATCGGAAGAGC\", \"adapter_name2\": \"\", \"adapter_source_list2\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters2\": [], \"cut2\": \"0\", \"front_adapters2\": [], \"quality_cutoff2\": \"15,20\"}, \"type\": \"paired_collection\"}"}, "inputs": {"input_11": {"id": "c0fb0a40a761c127", "src": "hda", "uuid": "5142fcf0-a7c3-47bf-b701-ae04321253bf"}, "input_12": {"id": "50511e4effae3d4e", "src": "hda", "uuid": "1c573b77-169b-4332-86ed-882bf447bdae"}}, "outputs": {"out_pairs|__part__|reverse": {"id": "84ef327bed4f72c9", "src": "hda", "uuid": "452941d5-cb37-444b-9bfc-022d1ed9c831"}, "out_pairs|__part__|forward": {"id": "328dd64f7c02f64d", "src": "hda", "uuid": "ec93cefb-9b0e-45fa-b3a2-efdaf10165a1"}}, "output_collections": {"out_pairs": {"id": "88abbb3778d8545a", "src": "hdca"}}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --pair-filter=any --quality-cutoff=5 Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gz -Q=15,20\nProcessing paired-end reads on 1 core ...\nFinished in 0.02 s (246 \u00b5s/read; 0.24 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       2 (2.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nQuality-trimmed:                     747 bp (1.5%)\n  Read 1:             0 bp\n  Read 2:           747 bp\nTotal written (filtered):         48,938 bp (98.5%)\n  Read 1:        24,843 bp\n  Read 2:        24,095 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 100.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t1\t1.5\t0\t1\n4\t1\t0.4\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --output=out1.fq.gz --paired-output=out2.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --pair-filter=any --quality-cutoff=5 Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gz -Q=15,20\nProcessing paired-end reads on 1 core ...\nFinished in 0.02 s (246 \u00b5s/read; 0.24 M reads/minute).\n\n=== Summary ===\n\nTotal read pairs processed:                 99\n  Read 1 with adapter:                       2 (2.0%)\n  Read 2 with adapter:                       2 (2.0%)\nPairs written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        49,698 bp\n  Read 1:        24,849 bp\n  Read 2:        24,849 bp\nQuality-trimmed:                     747 bp (1.5%)\n  Read 1:             0 bp\n  Read 2:           747 bp\nTotal written (filtered):         48,938 bp (98.5%)\n  Read 1:        24,843 bp\n  Read 2:        24,095 bp\n\n=== First read: Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 50.0%\n  G: 50.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t2\t1.5\t0\t2\n\n\n=== Second read: Adapter 2 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 100.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t1\t1.5\t0\t1\n4\t1\t0.4\t0\t1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:51:44", "plugin": "core", "name": "end_epoch", "raw_value": "1707659504.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:51:44", "plugin": "core", "name": "start_epoch", "raw_value": "1707659504.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-4", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 4, "status": "skip"}}, {"id": "cutadapt/4.0+galaxy1-5", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 5, "time_seconds": 57.05255579948425, "inputs": {"library|input_1": {"src": "hda", "id": "4951719ceb8d6092"}, "library|r1|adapters_0|adapter_source|adapter": "TTAGACATATCTCCGTCG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "filter_options|discard_trimmed": true}, "job": {"model_class": "Job", "id": "4a40ec8bb9358f67", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:25:45.774328", "create_time": "2024-02-11T13:24:59.518363", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-6hbw2", "command_line": "ln -f -s '/galaxy/server/database/objects/9/5/1/dataset_951e2822-a4ff-4e98-afe4-763fb4e80938.dat' 'cutadapt_small_fastq.fq' &&     cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'TTAGACATATCTCCGTCG'      --output='out1.fq'  --error-rate=0.1 --times=1 --overlap=3   --action=trim   --discard-trimmed         'cutadapt_small_fastq.fq'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"true\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 98, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"TTAGACATATCTCCGTCG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "4951719ceb8d6092", "src": "hda", "uuid": "951e2822-a4ff-4e98-afe4-763fb4e80938"}}, "outputs": {"out1": {"id": "238411bac00f0411", "src": "hda", "uuid": "1b034a76-a2c2-4da0-a723-b3be35cd14c7"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a TTAGACATATCTCCGTCG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-trimmed cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (4053 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         2 (66.7%)\n\n== Read fate breakdown ==\nReads discarded as trimmed:                  2 (66.7%)\nReads written (passing filters):             1 (33.3%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             34 bp (33.3%)\n\n=== Adapter 1 ===\n\nSequence: TTAGACATATCTCCGTCG; Type: regular 3'; Length: 18; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-18 bp: 1\n\nBases preceding removed adapters:\n  A: 50.0%\n  C: 50.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n10\t1\t0.0\t1\t0 1\n12\t1\t0.0\t1\t0 1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a TTAGACATATCTCCGTCG --output=out1.fq --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-trimmed cutadapt_small_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (4053 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         2 (66.7%)\n\n== Read fate breakdown ==\nReads discarded as trimmed:                  2 (66.7%)\nReads written (passing filters):             1 (33.3%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             34 bp (33.3%)\n\n=== Adapter 1 ===\n\nSequence: TTAGACATATCTCCGTCG; Type: regular 3'; Length: 18; Trimmed: 2 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-18 bp: 1\n\nBases preceding removed adapters:\n  A: 50.0%\n  C: 50.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n10\t1\t0.0\t1\t0 1\n12\t1\t0.0\t1\t0 1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:25:37", "plugin": "core", "name": "end_epoch", "raw_value": "1707657937.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:25:36", "plugin": "core", "name": "start_epoch", "raw_value": "1707657936.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-6", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 6, "time_seconds": 59.23991394042969, "inputs": {"library|input_1": {"src": "hda", "id": "43486f3bc7f7ff10"}, "library|r1|adapters_0|adapter_source|adapter": "AAAGATG", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "output_selector": ["rest_file", "json_stats"]}, "job": {"model_class": "Job", "id": "238411bac00f0411", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:26:43.042551", "create_time": "2024-02-11T13:25:55.937712", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-qgt48", "command_line": "ln -f -s '/galaxy/server/database/objects/f/2/0/dataset_f2095169-f972-47ff-bdb1-d5cf17007646.dat' 'cutadapt_rest_fa.fa' &&     cutadapt  -j=${GALAXY_SLOTS:-4}  --json stats.json     -a 'AAAGATG'    --rest-file='rest_output.fa'   --output='out1.fa'  --error-rate=0.1 --times=1 --overlap=3   --action=trim            'cutadapt_rest_fa.fa'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": "[\"rest_file\", \"json_stats\"]", "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 100, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AAAGATG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "43486f3bc7f7ff10", "src": "hda", "uuid": "f2095169-f972-47ff-bdb1-d5cf17007646"}}, "outputs": {"out1": {"id": "29e835926efd34da", "src": "hda", "uuid": "30219eb3-5e07-4bbd-83bd-33e91c93fb17"}, "rest_output": {"id": "bd5be7f8f33a6294", "src": "hda", "uuid": "d11c0509-4d8b-4290-a23e-74cf0556acdc"}, "json_stats": {"id": "034dae290bb39597", "src": "hda", "uuid": "2b86fd1a-387f-4cf0-b7dc-f35f895a6bda"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 --json stats.json -a AAAGATG --rest-file=rest_output.fa --output=out1.fa --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_rest_fa.fa\nProcessing single-end reads on 1 core ...\nFinished in 0.02 s (3361 \u00b5s/read; 0.02 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       5\nReads with adapters:                         5 (100.0%)\nReads written (passing filters):             5 (100.0%)\n\nTotal basepairs processed:            97 bp\nTotal written (filtered):             35 bp (36.1%)\n\n=== Adapter 1 ===\n\nSequence: AAAGATG; Type: regular 3'; Length: 7; Trimmed: 5 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-7 bp: 0\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 100.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n7\t1\t0.0\t0\t1\n12\t1\t0.0\t0\t1\n14\t2\t0.0\t0\t2\n15\t1\t0.0\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 --json stats.json -a AAAGATG --rest-file=rest_output.fa --output=out1.fa --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_rest_fa.fa\nProcessing single-end reads on 1 core ...\nFinished in 0.02 s (3361 \u00b5s/read; 0.02 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       5\nReads with adapters:                         5 (100.0%)\nReads written (passing filters):             5 (100.0%)\n\nTotal basepairs processed:            97 bp\nTotal written (filtered):             35 bp (36.1%)\n\n=== Adapter 1 ===\n\nSequence: AAAGATG; Type: regular 3'; Length: 7; Trimmed: 5 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-7 bp: 0\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 100.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n7\t1\t0.0\t0\t1\n12\t1\t0.0\t0\t1\n14\t2\t0.0\t0\t2\n15\t1\t0.0\t0\t1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:26:34", "plugin": "core", "name": "end_epoch", "raw_value": "1707657994.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:26:33", "plugin": "core", "name": "start_epoch", "raw_value": "1707657993.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-7", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 7, "time_seconds": 57.21442723274231, "inputs": {"library|input_1": {"src": "hda", "id": "91339b1479a95721"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "read_mod_options|nextseq_trim": "20"}, "job": {"model_class": "Job", "id": "29e835926efd34da", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:27:42.276633", "create_time": "2024-02-11T13:26:55.741495", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-brgjk", "command_line": "ln -f -s '/galaxy/server/database/objects/3/3/2/dataset_332665a5-5c6c-461d-a702-02d955dc9fd7.dat' 'bwa-mem-fastq1_fq_gz.fq.gz' &&     cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGATCGGAAGAGC'      --output='out1.fq.gz'  --error-rate=0.1 --times=1 --overlap=3   --action=trim        --nextseq-trim=20     'bwa-mem-fastq1_fq_gz.fq.gz'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": null, "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"20\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 104, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "91339b1479a95721", "src": "hda", "uuid": "332665a5-5c6c-461d-a702-02d955dc9fd7"}}, "outputs": {"out1": {"id": "56a90c7490a34790", "src": "hda", "uuid": "ed2f391b-6719-477a-9455-b914ba62e7a7"}}, "output_collections": {}, "tool_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC --output=out1.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --nextseq-trim=20 bwa-mem-fastq1_fq_gz.fq.gz\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (145 \u00b5s/read; 0.41 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                         4 (4.0%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     286 bp (1.2%)\nTotal written (filtered):         24,550 bp (98.8%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 75.0%\n  G: 25.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t3\t1.5\t0\t3\n4\t1\t0.4\t0\t1\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -a AGATCGGAAGAGC --output=out1.fq.gz --error-rate=0.1 --times=1 --overlap=3 --action=trim --nextseq-trim=20 bwa-mem-fastq1_fq_gz.fq.gz\nProcessing single-end reads on 1 core ...\nFinished in 0.01 s (145 \u00b5s/read; 0.41 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                         4 (4.0%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     286 bp (1.2%)\nTotal written (filtered):         24,550 bp (98.8%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 75.0%\n  G: 25.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n3\t3\t1.5\t0\t3\n4\t1\t0.4\t0\t1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:27:33", "plugin": "core", "name": "end_epoch", "raw_value": "1707658053.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:27:33", "plugin": "core", "name": "start_epoch", "raw_value": "1707658053.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-8", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 8, "time_seconds": 58.997907638549805, "inputs": {"library|input_1": {"src": "hda", "id": "2551bed59ef07f4b"}, "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC", "library|r1|adapters_0|adapter_source|adapter_source_list": "user", "library|type": "single", "output_selector": ["report", "info_file"]}, "job": {"model_class": "Job", "id": "034dae290bb39597", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:28:39.577086", "create_time": "2024-02-11T13:27:53.181466", "galaxy_version": "21.09", "command_version": "4.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-5xbdl", "command_line": "ln -f -s '/galaxy/server/database/objects/2/3/7/dataset_237bafec-5c4d-4286-a8b1-a7c62d0c9b52.dat' 'cutadapt_small_fastq.fq' &&     cutadapt  -j=${GALAXY_SLOTS:-4}      -a 'AGATCGGAAGAGC'    --info-file=/galaxy/server/database/objects/1/5/f/dataset_15f1e062-f095-47fe-bfca-7af5c3b8a34e.dat   --output='out1.fq'  --error-rate=0.1 --times=1 --overlap=3   --action=trim            'cutadapt_small_fastq.fq'  > report.txt", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": "[\"report\", \"info_file\"]", "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 106, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": []}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "2551bed59ef07f4b", "src": "hda", "uuid": "237bafec-5c4d-4286-a8b1-a7c62d0c9b52"}}, "outputs": {"out1": {"id": "fb9a513b7d92ab23", "src": "hda", "uuid": "87757ea2-65a8-498e-ad10-3b0b4ef6af50"}, "report": {"id": "8673bb2ccc330082", "src": "hda", "uuid": "9a42eafe-eb0a-42bc-a5e2-8eb7afc1d5a3"}, "info_file": {"id": "0c75b99357c78fae", "src": "hda", "uuid": "15f1e062-f095-47fe-bfca-7af5c3b8a34e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:28:30", "plugin": "core", "name": "end_epoch", "raw_value": "1707658110.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:28:30", "plugin": "core", "name": "start_epoch", "raw_value": "1707658110.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "cutadapt/4.0+galaxy1-9", "has_data": true, "data": {"tool_id": "cutadapt", "tool_version": "4.0+galaxy1", "test_index": 9, "time_seconds": 53.451451539993286, "inputs": {"library|input_1": {"src": "hda", "id": "f745e8de98619194"}, "library|r1|front_adapters_0|front_adapter_source|front_adapter_name": "A1", "library|r1|front_adapters_0|front_adapter_source|front_adapter": "^GTCGGTAA", "library|r1|front_adapters_0|front_adapter_source|front_adapter_source_list": "user", "library|r1|front_adapters_1|front_adapter_source|front_adapter_name": "A2", "library|r1|front_adapters_1|front_adapter_source|front_adapter": "^AGGTCACT", "library|r1|front_adapters_1|front_adapter_source|front_adapter_source_list": "user", "library|type": "single", "output_selector": "multiple_output"}, "job": {"model_class": "Job", "id": "56a90c7490a34790", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:29:34.130705", "create_time": "2024-02-11T13:28:52.655507", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.0+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-4dxkh", "command_line": "ln -f -s '/galaxy/server/database/objects/d/2/7/dataset_d27a832d-ac67-4dd2-8eb4-380691a9b18b.dat' 'cutadapt_in_split_fastq.fq' &&    mkdir split &&  cutadapt  -j=${GALAXY_SLOTS:-4}      -g 'A1'='^GTCGGTAA' -g 'A2'='^AGGTCACT'      --output='split/{name}.fastq'  --error-rate=0.1 --times=1 --overlap=3   --action=trim            'cutadapt_in_split_fastq.fq'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_selector": "\"multiple_output\"", "read_mod_options": "{\"length_tag\": null, \"nextseq_trim\": \"0\", \"quality_cutoff\": \"0\", \"rename\": null, \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"strip_suffix\": \"\", \"trim_n\": \"false\", \"zero_cap\": \"false\"}", "filter_options": "{\"discard_cassava\": \"false\", \"discard_trimmed\": \"false\", \"discard_untrimmed\": \"false\", \"length_R2_options\": {\"__current_case__\": 1, \"length_R2_status\": \"False\"}, \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"minimum_length\": \"\", \"pair_filter\": \"any\"}", "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"internal\": \"\", \"match_read_wildcards\": \" \", \"no_indels\": \"false\", \"overlap\": \"3\", \"revcomp\": \"false\", \"times\": \"1\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 110, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [], \"anywhere_adapters\": [], \"cut\": \"0\", \"front_adapters\": [{\"__index__\": 0, \"front_adapter_source\": {\"__current_case__\": 0, \"front_adapter\": \"^GTCGGTAA\", \"front_adapter_name\": \"A1\", \"front_adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}, {\"__index__\": 1, \"front_adapter_source\": {\"__current_case__\": 0, \"front_adapter\": \"^AGGTCACT\", \"front_adapter_name\": \"A2\", \"front_adapter_source_list\": \"user\"}, \"single_noindels\": \"false\"}]}, \"type\": \"single\"}"}, "inputs": {"input_1": {"id": "f745e8de98619194", "src": "hda", "uuid": "d27a832d-ac67-4dd2-8eb4-380691a9b18b"}}, "outputs": {"__new_primary_file_split_output|A1__": {"id": "5216a60c7e8c9a2e", "src": "hda", "uuid": "de339d81-b3ef-4684-aab5-9ecdb8402b34"}, "__new_primary_file_split_output|A2__": {"id": "b8f9dda45fcc79d3", "src": "hda", "uuid": "d0008c40-d95a-4e79-9b4e-9a9fe31144c7"}, "__new_primary_file_split_output|unknown__": {"id": "5d69090d19cc3499", "src": "hda", "uuid": "cb66fad2-4b16-4c84-83f9-7a2ba964d834"}}, "output_collections": {"split_output": {"id": "9ddd1728ccb8a0d2", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "This is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -g A1=^GTCGGTAA -g A2=^AGGTCACT --output=split/{name}.fastq --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_in_split_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.02 s (1903 \u00b5s/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      11\nReads with adapters:                        10 (90.9%)\nReads written (passing filters):            11 (100.0%)\n\nTotal basepairs processed:         1,210 bp\nTotal written (filtered):          1,130 bp (93.4%)\n\n=== Adapter A1 ===\n\nSequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 times\n\nNo. of allowed errors: 0\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t5\t0.0\t0\t5\n\n\n=== Adapter A2 ===\n\nSequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 times\n\nNo. of allowed errors: 0\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t5\t0.0\t0\t5\n", "job_stderr": "", "stderr": "", "stdout": "\nThis is cutadapt 4.0 with Python 3.9.12\nCommand line parameters: -j=1 -g A1=^GTCGGTAA -g A2=^AGGTCACT --output=split/{name}.fastq --error-rate=0.1 --times=1 --overlap=3 --action=trim cutadapt_in_split_fastq.fq\nProcessing single-end reads on 1 core ...\nFinished in 0.02 s (1903 \u00b5s/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      11\nReads with adapters:                        10 (90.9%)\nReads written (passing filters):            11 (100.0%)\n\nTotal basepairs processed:         1,210 bp\nTotal written (filtered):          1,130 bp (93.4%)\n\n=== Adapter A1 ===\n\nSequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 times\n\nNo. of allowed errors: 0\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t5\t0.0\t0\t5\n\n\n=== Adapter A2 ===\n\nSequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 times\n\nNo. of allowed errors: 0\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n8\t5\t0.0\t0\t5\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:29:30", "plugin": "core", "name": "end_epoch", "raw_value": "1707658170.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:29:30", "plugin": "core", "name": "start_epoch", "raw_value": "1707658170.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deeptools_bigwig_compare/3.3.2.0.0-0", "has_data": true, "data": {"tool_id": "deeptools_bigwig_compare", "tool_version": "3.3.2.0.0", "test_index": 0, "time_seconds": 83.33825826644897, "inputs": {"bigwigFile1": {"src": "hda", "id": "348b763f27fb7078"}, "bigwigFile2": {"src": "hda", "id": "348b763f27fb7078"}, "comparison|comparison_select": "ratio", "outFileFormat": "bigwig", "advancedOpt|showAdvancedOpt": "no"}, "job": {"model_class": "Job", "id": "955d181d0bfcfa62", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:19:46.373016", "create_time": "2024-02-11T14:18:34.212598", "galaxy_version": "21.09", "command_version": "bigwigCompare 3.3.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/deeptools_bigwig_compare/deeptools_bigwig_compare/3.3.2.0.0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-xztmw", "command_line": "bigwigCompare --numberOfProcessors \"${GALAXY_SLOTS:-4}\" --bigwig1 '/galaxy/server/database/objects/1/b/a/dataset_1ba8691b-efc4-446d-86b5-fa7e1ca193ff.dat' --bigwig2 '/galaxy/server/database/objects/1/b/a/dataset_1ba8691b-efc4-446d-86b5-fa7e1ca193ff.dat'  --outFileName '/galaxy/server/database/objects/9/a/a/dataset_9aa7f1f8-a52a-4470-8cc9-8655f2048f44.dat' --outFileFormat 'bigwig'  --operation ratio  --pseudocount 1 1", "traceback": null, "params": {"__input_ext": "\"bigwig\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advancedOpt": "{\"__current_case__\": 0, \"showAdvancedOpt\": \"no\"}", "region": "\"\"", "outFileFormat": "\"bigwig\"", "comparison": "{\"__current_case__\": 1, \"comparison_select\": \"ratio\", \"pseudocount\": \"1 1\"}"}, "inputs": {"bigwigFile1": {"id": "348b763f27fb7078", "src": "hda", "uuid": "1ba8691b-efc4-446d-86b5-fa7e1ca193ff"}, "bigwigFile2": {"id": "348b763f27fb7078", "src": "hda", "uuid": "1ba8691b-efc4-446d-86b5-fa7e1ca193ff"}}, "outputs": {"outFileName": {"id": "d2dbeeda4172ea10", "src": "hda", "uuid": "9aa7f1f8-a52a-4470-8cc9-8655f2048f44"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 14:19:29", "plugin": "core", "name": "end_epoch", "raw_value": "1707661169.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:19:29", "plugin": "core", "name": "start_epoch", "raw_value": "1707661169.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "deeptools_bigwig_compare/3.3.2.0.0-1", "has_data": true, "data": {"tool_id": "deeptools_bigwig_compare", "tool_version": "3.3.2.0.0", "test_index": 1, "time_seconds": 57.30112075805664, "inputs": {"bigwigFile1": {"src": "hda", "id": "207b4b185a54cf64"}, "bigwigFile2": {"src": "hda", "id": "207b4b185a54cf64"}, "comparison|comparison_select": "ratio", "outFileFormat": "bedgraph", "advancedOpt|showAdvancedOpt": "no"}, "job": {"model_class": "Job", "id": "9ef8f9ff915450e0", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:20:43.655975", "create_time": "2024-02-11T14:19:57.067321", "galaxy_version": "21.09", "command_version": "bigwigCompare 3.3.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/deeptools_bigwig_compare/deeptools_bigwig_compare/3.3.2.0.0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-2c8j7", "command_line": "bigwigCompare --numberOfProcessors \"${GALAXY_SLOTS:-4}\" --bigwig1 '/galaxy/server/database/objects/c/7/7/dataset_c7734742-f2d5-403d-b53a-e7be3a8f6b25.dat' --bigwig2 '/galaxy/server/database/objects/c/7/7/dataset_c7734742-f2d5-403d-b53a-e7be3a8f6b25.dat'  --outFileName '/galaxy/server/database/objects/4/3/b/dataset_43bcad5b-9768-4331-a779-0d58e07bb7b6.dat' --outFileFormat 'bedgraph'  --operation ratio  --pseudocount 1 1", "traceback": null, "params": {"__input_ext": "\"bigwig\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advancedOpt": "{\"__current_case__\": 0, \"showAdvancedOpt\": \"no\"}", "region": "\"\"", "outFileFormat": "\"bedgraph\"", "comparison": "{\"__current_case__\": 1, \"comparison_select\": \"ratio\", \"pseudocount\": \"1 1\"}"}, "inputs": {"bigwigFile1": {"id": "207b4b185a54cf64", "src": "hda", "uuid": "c7734742-f2d5-403d-b53a-e7be3a8f6b25"}, "bigwigFile2": {"id": "207b4b185a54cf64", "src": "hda", "uuid": "c7734742-f2d5-403d-b53a-e7be3a8f6b25"}}, "outputs": {"outFileName": {"id": "3c57ae4c35daff82", "src": "hda", "uuid": "43bcad5b-9768-4331-a779-0d58e07bb7b6"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 14:20:34", "plugin": "core", "name": "end_epoch", "raw_value": "1707661234.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:20:34", "plugin": "core", "name": "start_epoch", "raw_value": "1707661234.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.7+galaxy2-0", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.7+galaxy2", "test_index": 0, "time_seconds": 128.9818630218506, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "c9e997f4a28d693a"}, {"src": "hda", "id": "41f15de935202c66"}, {"src": "hda", "id": "3880d4559e98bf1b"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "5705f213dd1bae5e"}, {"src": "hda", "id": "cd8a485f0b47502f"}, {"src": "hda", "id": "b4268a757f19b2aa"}, {"src": "hda", "id": "82118ec118b542e3"}], "output_options|output_selector": ["normCounts", "normRLog", "normVST"]}, "job": {"model_class": "Job", "id": "8e6263035ba02513", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:33:33.741710", "create_time": "2024-02-11T14:32:00.704500", "galaxy_version": "21.09", "command_version": "R version 4.1.1 (2021-08-10) -- \"Kick Things\", DESeq2 version 1.34.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.7+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-gz7rg", "command_line": "cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/7/7/8/dataset_778e2ac8-1df0-4f14-b71b-be1cec259d17.dat' -A 0.1 -n '/galaxy/server/database/objects/1/2/6/dataset_126ff62f-0d8e-4035-976b-2a45dff5c14d.dat' -r '/galaxy/server/database/objects/7/b/7/dataset_7b7cedd6-f6b5-4d56-baf0-f80a10999694.dat' -v '/galaxy/server/database/objects/5/3/5/dataset_535cb42c-4126-474a-819f-8bd95ba223e8.dat'                    -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/6/3/b/dataset_63bf70f5-a971-464b-a2db-1f0200981759.dat\", \"/galaxy/server/database/objects/1/b/7/dataset_1b70a1b8-22c7-4f04-8ce8-f5cf686c7977.dat\", \"/galaxy/server/database/objects/0/a/9/dataset_0a9462b0-29ab-4b9e-8c4a-9f5ab9985a3f.dat\", \"/galaxy/server/database/objects/6/e/9/dataset_6e9b3b08-7448-4fd5-b096-517aa30ec9ad.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/3/0/e/dataset_30ed3d6b-5bfd-4f2a-82e7-7c1b7191d9a7.dat\", \"/galaxy/server/database/objects/3/6/0/dataset_36054caf-61b0-441c-90cc-2782ecf04c24.dat\", \"/galaxy/server/database/objects/4/4/2/dataset_4428776d-8499-41c9-9186-b058aba0d748.dat\"]}]]]' -l '{\"dataset_30ed3d6b-5bfd-4f2a-82e7-7c1b7191d9a7.dat\": \"GSM461179_treat_single.counts\", \"dataset_36054caf-61b0-441c-90cc-2782ecf04c24.dat\": \"GSM461180_treat_paired.counts\", \"dataset_4428776d-8499-41c9-9186-b058aba0d748.dat\": \"GSM461181_treat_paired.counts\", \"dataset_63bf70f5-a971-464b-a2db-1f0200981759.dat\": \"GSM461176_untreat_single.counts\", \"dataset_1b70a1b8-22c7-4f04-8ce8-f5cf686c7977.dat\": \"GSM461177_untreat_paired.counts\", \"dataset_0a9462b0-29ab-4b9e-8c4a-9f5ab9985a3f.dat\": \"GSM461178_untreat_paired.counts\", \"dataset_6e9b3b08-7448-4fd5-b096-517aa30ec9ad.dat\": \"GSM461182_untreat_single.counts\"}' -t 1", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.1\", \"output_selector\": [\"normCounts\", \"normRLog\", \"normVST\"]}", "advanced_options": "{\"auto_mean_filter_off\": \"false\", \"esf\": \"\", \"fit_type\": \"1\", \"outlier_filter_off\": \"false\", \"outlier_replace_off\": \"false\", \"prefilter_conditional\": {\"__current_case__\": 1, \"prefilter\": \"\"}}", "tximport": "{\"__current_case__\": 1, \"tximport_selector\": \"count\"}", "header": "\"true\"", "batch_factors": null, "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 362, \"src\": \"hda\"}, {\"id\": 363, \"src\": \"hda\"}, {\"id\": 364, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 365, \"src\": \"hda\"}, {\"id\": 366, \"src\": \"hda\"}, {\"id\": 367, \"src\": \"hda\"}, {\"id\": 368, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "c9e997f4a28d693a", "src": "hda", "uuid": "30ed3d6b-5bfd-4f2a-82e7-7c1b7191d9a7"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "c9e997f4a28d693a", "src": "hda", "uuid": "30ed3d6b-5bfd-4f2a-82e7-7c1b7191d9a7"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "41f15de935202c66", "src": "hda", "uuid": "36054caf-61b0-441c-90cc-2782ecf04c24"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "3880d4559e98bf1b", "src": "hda", "uuid": "4428776d-8499-41c9-9186-b058aba0d748"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "5705f213dd1bae5e", "src": "hda", "uuid": "63bf70f5-a971-464b-a2db-1f0200981759"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "5705f213dd1bae5e", "src": "hda", "uuid": "63bf70f5-a971-464b-a2db-1f0200981759"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "cd8a485f0b47502f", "src": "hda", "uuid": "1b70a1b8-22c7-4f04-8ce8-f5cf686c7977"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "b4268a757f19b2aa", "src": "hda", "uuid": "0a9462b0-29ab-4b9e-8c4a-9f5ab9985a3f"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile4": {"id": "82118ec118b542e3", "src": "hda", "uuid": "6e9b3b08-7448-4fd5-b096-517aa30ec9ad"}}, "outputs": {"vst_out": {"id": "8d30a0d102b4fd55", "src": "hda", "uuid": "535cb42c-4126-474a-819f-8bd95ba223e8"}, "rlog_out": {"id": "9b1ecb59ecdb2687", "src": "hda", "uuid": "7b7cedd6-f6b5-4d56-baf0-f80a10999694"}, "counts_out": {"id": "8e9ee07596301d44", "src": "hda", "uuid": "126ff62f-0d8e-4035-976b-2a45dff5c14d"}, "deseq_out": {"id": "a3ec44db4761ad60", "src": "hda", "uuid": "778e2ac8-1df0-4f14-b71b-be1cec259d17"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "primary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                                Treatment\nGSM461176_untreat_single.counts Untreated\nGSM461177_untreat_paired.counts Untreated\nGSM461178_untreat_paired.counts Untreated\nGSM461182_untreat_single.counts Untreated\nGSM461179_treat_single.counts     Treated\nGSM461180_treat_paired.counts     Treated\nGSM461181_treat_paired.counts     Treated\n\ndesign formula:\n~Treatment\n\n\n7 samples with counts over 3999 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 3429 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 148, 4.3%\nLFC < 0 (down)     : 152, 4.4%\noutliers [1]       : 2, 0.058%\nlow counts [2]     : 659, 19%\n(mean count < 3)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] rjson_0.2.20                gplots_3.1.1               \n [3] RColorBrewer_1.1-2          DESeq2_1.34.0              \n [5] SummarizedExperiment_1.24.0 Biobase_2.54.0             \n [7] MatrixGenerics_1.6.0        matrixStats_0.61.0         \n [9] GenomicRanges_1.46.0        GenomeInfoDb_1.30.0        \n[11] IRanges_2.28.0              S4Vectors_0.32.0           \n[13] BiocGenerics_0.40.0         getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45       \n [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0     \n [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              \n[10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         \n[13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          \n[16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          \n[19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    \n[22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         \n[25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       \n[28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          \n[31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           \n[34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          \n[37] grid_4.1.1             xtable_1.8-4           gtable_0.3.0          \n[40] lifecycle_1.0.1        DBI_1.1.1              magrittr_2.0.1        \n[43] scales_1.1.1           KernSmooth_2.23-20     cachem_1.0.6          \n[46] XVector_0.34.0         genefilter_1.76.0      ellipsis_0.3.2        \n[49] vctrs_0.3.8            generics_0.1.1         bit64_4.0.5           \n[52] glue_1.5.1             purrr_0.3.4            parallel_4.1.1        \n[55] fastmap_1.1.0          survival_3.2-13        AnnotationDbi_1.56.1  \n[58] colorspace_2.0-2       caTools_1.18.2         memoise_2.0.1         \n", "job_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nestimating size factors\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\nfinal dispersion estimates\nfitting model and testing\n", "stderr": "\nWarning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nestimating size factors\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\nfinal dispersion estimates\nfitting model and testing\n", "stdout": "\nprimary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                                Treatment\nGSM461176_untreat_single.counts Untreated\nGSM461177_untreat_paired.counts Untreated\nGSM461178_untreat_paired.counts Untreated\nGSM461182_untreat_single.counts Untreated\nGSM461179_treat_single.counts     Treated\nGSM461180_treat_paired.counts     Treated\nGSM461181_treat_paired.counts     Treated\n\ndesign formula:\n~Treatment\n\n\n7 samples with counts over 3999 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 3429 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 148, 4.3%\nLFC < 0 (down)     : 152, 4.4%\noutliers [1]       : 2, 0.058%\nlow counts [2]     : 659, 19%\n(mean count < 3)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] rjson_0.2.20                gplots_3.1.1               \n [3] RColorBrewer_1.1-2          DESeq2_1.34.0              \n [5] SummarizedExperiment_1.24.0 Biobase_2.54.0             \n [7] MatrixGenerics_1.6.0        matrixStats_0.61.0         \n [9] GenomicRanges_1.46.0        GenomeInfoDb_1.30.0        \n[11] IRanges_2.28.0              S4Vectors_0.32.0           \n[13] BiocGenerics_0.40.0         getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45       \n [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0     \n [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              \n[10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         \n[13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          \n[16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          \n[19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    \n[22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         \n[25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       \n[28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          \n[31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           \n[34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          \n[37] grid_4.1.1             xtable_1.8-4           gtable_0.3.0          \n[40] lifecycle_1.0.1        DBI_1.1.1              magrittr_2.0.1        \n[43] scales_1.1.1           KernSmooth_2.23-20     cachem_1.0.6          \n[46] XVector_0.34.0         genefilter_1.76.0      ellipsis_0.3.2        \n[49] vctrs_0.3.8            generics_0.1.1         bit64_4.0.5           \n[52] glue_1.5.1             purrr_0.3.4            parallel_4.1.1        \n[55] fastmap_1.1.0          survival_3.2-13        AnnotationDbi_1.56.1  \n[58] colorspace_2.0-2       caTools_1.18.2         memoise_2.0.1         \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "22 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "22.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:33:18", "plugin": "core", "name": "end_epoch", "raw_value": "1707661998.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:32:56", "plugin": "core", "name": "start_epoch", "raw_value": "1707661976.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.7+galaxy2-1", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.7+galaxy2", "test_index": 1, "time_seconds": 102.15096306800842, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "14e467ad9781de2a"}, {"src": "hda", "id": "897d0c727f356f95"}, {"src": "hda", "id": "beeddd2365bcc45a"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "4537bacfdf6b7eed"}, {"src": "hda", "id": "73d12277036d626c"}, {"src": "hda", "id": "90699bc1c58ddd81"}, {"src": "hda", "id": "134306b12683f470"}], "batch_factors": {"src": "hda", "id": "25851fc35bee96fb"}, "output_options|output_selector": "normCounts"}, "job": {"model_class": "Job", "id": "a4461bdc77077ee8", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:35:18.432676", "create_time": "2024-02-11T14:34:13.449682", "galaxy_version": "21.09", "command_version": "R version 4.1.1 (2021-08-10) -- \"Kick Things\", DESeq2 version 1.34.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.7+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-6kqqz", "command_line": "cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/5/5/b/dataset_55b517ca-5a64-438c-a9ed-a0be301d49d6.dat' -A 0.1 -n '/galaxy/server/database/objects/f/3/9/dataset_f39cc565-425c-4dff-b31a-df1820e21dde.dat'                    -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/4/2/0/dataset_42095a97-7882-43a5-98e3-582e43c193d6.dat\", \"/galaxy/server/database/objects/9/e/4/dataset_9e4eaee6-fa17-4904-bc2e-03256ba5f5ca.dat\", \"/galaxy/server/database/objects/2/1/c/dataset_21c6d54c-9f23-49dd-9234-3feb51118959.dat\", \"/galaxy/server/database/objects/f/5/a/dataset_f5a16668-cc99-431c-83be-e0b5a3201eb0.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/1/b/b/dataset_1bbfb745-090e-40f7-8e78-aa1181631ee6.dat\", \"/galaxy/server/database/objects/e/e/9/dataset_ee9a4d62-bc50-4610-9190-277a64c4f543.dat\", \"/galaxy/server/database/objects/9/d/7/dataset_9d73eda6-8756-4dc4-9222-674ceef6cb82.dat\"]}]]]' -l '{\"dataset_1bbfb745-090e-40f7-8e78-aa1181631ee6.dat\": \"GSM461179_treat_single.counts\", \"dataset_ee9a4d62-bc50-4610-9190-277a64c4f543.dat\": \"GSM461180_treat_paired.counts\", \"dataset_9d73eda6-8756-4dc4-9222-674ceef6cb82.dat\": \"GSM461181_treat_paired.counts\", \"dataset_42095a97-7882-43a5-98e3-582e43c193d6.dat\": \"GSM461176_untreat_single.counts\", \"dataset_9e4eaee6-fa17-4904-bc2e-03256ba5f5ca.dat\": \"GSM461177_untreat_paired.counts\", \"dataset_21c6d54c-9f23-49dd-9234-3feb51118959.dat\": \"GSM461178_untreat_paired.counts\", \"dataset_f5a16668-cc99-431c-83be-e0b5a3201eb0.dat\": \"GSM461182_untreat_single.counts\"}' -t 1 --batch_factors '/galaxy/server/database/objects/0/9/c/dataset_09cb61c5-be19-4662-8236-e7196a1fc58b.dat'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.1\", \"output_selector\": \"normCounts\"}", "advanced_options": "{\"auto_mean_filter_off\": \"false\", \"esf\": \"\", \"fit_type\": \"1\", \"outlier_filter_off\": \"false\", \"outlier_replace_off\": \"false\", \"prefilter_conditional\": {\"__current_case__\": 1, \"prefilter\": \"\"}}", "tximport": "{\"__current_case__\": 1, \"tximport_selector\": \"count\"}", "header": "\"true\"", "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 373, \"src\": \"hda\"}, {\"id\": 374, \"src\": \"hda\"}, {\"id\": 375, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 376, \"src\": \"hda\"}, {\"id\": 377, \"src\": \"hda\"}, {\"id\": 378, \"src\": \"hda\"}, {\"id\": 379, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"batch_factors": {"id": "25851fc35bee96fb", "src": "hda", "uuid": "09cb61c5-be19-4662-8236-e7196a1fc58b"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "4537bacfdf6b7eed", "src": "hda", "uuid": "42095a97-7882-43a5-98e3-582e43c193d6"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "4537bacfdf6b7eed", "src": "hda", "uuid": "42095a97-7882-43a5-98e3-582e43c193d6"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "73d12277036d626c", "src": "hda", "uuid": "9e4eaee6-fa17-4904-bc2e-03256ba5f5ca"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "897d0c727f356f95", "src": "hda", "uuid": "ee9a4d62-bc50-4610-9190-277a64c4f543"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "14e467ad9781de2a", "src": "hda", "uuid": "1bbfb745-090e-40f7-8e78-aa1181631ee6"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "14e467ad9781de2a", "src": "hda", "uuid": "1bbfb745-090e-40f7-8e78-aa1181631ee6"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "beeddd2365bcc45a", "src": "hda", "uuid": "9d73eda6-8756-4dc4-9222-674ceef6cb82"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "90699bc1c58ddd81", "src": "hda", "uuid": "21c6d54c-9f23-49dd-9234-3feb51118959"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile4": {"id": "134306b12683f470", "src": "hda", "uuid": "f5a16668-cc99-431c-83be-e0b5a3201eb0"}}, "outputs": {"counts_out": {"id": "7ace35c64ff9e203", "src": "hda", "uuid": "f39cc565-425c-4dff-b31a-df1820e21dde"}, "deseq_out": {"id": "5e3d7838cec15f2e", "src": "hda", "uuid": "55b517ca-5a64-438c-a9ed-a0be301d49d6"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "primary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                                Treatment\nGSM461176_untreat_single.counts Untreated\nGSM461177_untreat_paired.counts Untreated\nGSM461178_untreat_paired.counts Untreated\nGSM461182_untreat_single.counts Untreated\nGSM461179_treat_single.counts     Treated\nGSM461180_treat_paired.counts     Treated\nGSM461181_treat_paired.counts     Treated\n\ndesign formula:\n~W_1 + Treatment\n\n\n7 samples with counts over 3999 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 3429 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 179, 5.2%\nLFC < 0 (down)     : 208, 6.1%\noutliers [1]       : 0, 0%\nlow counts [2]     : 725, 21%\n(mean count < 4)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] rjson_0.2.20                gplots_3.1.1               \n [3] RColorBrewer_1.1-2          DESeq2_1.34.0              \n [5] SummarizedExperiment_1.24.0 Biobase_2.54.0             \n [7] MatrixGenerics_1.6.0        matrixStats_0.61.0         \n [9] GenomicRanges_1.46.0        GenomeInfoDb_1.30.0        \n[11] IRanges_2.28.0              S4Vectors_0.32.0           \n[13] BiocGenerics_0.40.0         getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45       \n [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0     \n [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              \n[10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         \n[13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          \n[16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          \n[19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    \n[22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         \n[25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       \n[28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          \n[31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           \n[34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          \n[37] grid_4.1.1             xtable_1.8-4           gtable_0.3.0          \n[40] lifecycle_1.0.1        DBI_1.1.1              magrittr_2.0.1        \n[43] scales_1.1.1           KernSmooth_2.23-20     cachem_1.0.6          \n[46] XVector_0.34.0         genefilter_1.76.0      ellipsis_0.3.2        \n[49] vctrs_0.3.8            generics_0.1.1         bit64_4.0.5           \n[52] glue_1.5.1             purrr_0.3.4            parallel_4.1.1        \n[55] fastmap_1.1.0          survival_3.2-13        AnnotationDbi_1.56.1  \n[58] colorspace_2.0-2       caTools_1.18.2         memoise_2.0.1         \n", "job_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nestimating size factors\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\nfinal dispersion estimates\nfitting model and testing\n", "stderr": "\nWarning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nestimating size factors\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\nfinal dispersion estimates\nfitting model and testing\n", "stdout": "\nprimary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                                Treatment\nGSM461176_untreat_single.counts Untreated\nGSM461177_untreat_paired.counts Untreated\nGSM461178_untreat_paired.counts Untreated\nGSM461182_untreat_single.counts Untreated\nGSM461179_treat_single.counts     Treated\nGSM461180_treat_paired.counts     Treated\nGSM461181_treat_paired.counts     Treated\n\ndesign formula:\n~W_1 + Treatment\n\n\n7 samples with counts over 3999 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 3429 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 179, 5.2%\nLFC < 0 (down)     : 208, 6.1%\noutliers [1]       : 0, 0%\nlow counts [2]     : 725, 21%\n(mean count < 4)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] rjson_0.2.20                gplots_3.1.1               \n [3] RColorBrewer_1.1-2          DESeq2_1.34.0              \n [5] SummarizedExperiment_1.24.0 Biobase_2.54.0             \n [7] MatrixGenerics_1.6.0        matrixStats_0.61.0         \n [9] GenomicRanges_1.46.0        GenomeInfoDb_1.30.0        \n[11] IRanges_2.28.0              S4Vectors_0.32.0           \n[13] BiocGenerics_0.40.0         getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45       \n [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0     \n [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              \n[10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         \n[13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          \n[16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          \n[19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    \n[22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         \n[25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       \n[28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          \n[31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           \n[34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          \n[37] grid_4.1.1             xtable_1.8-4           gtable_0.3.0          \n[40] lifecycle_1.0.1        DBI_1.1.1              magrittr_2.0.1        \n[43] scales_1.1.1           KernSmooth_2.23-20     cachem_1.0.6          \n[46] XVector_0.34.0         genefilter_1.76.0      ellipsis_0.3.2        \n[49] vctrs_0.3.8            generics_0.1.1         bit64_4.0.5           \n[52] glue_1.5.1             purrr_0.3.4            parallel_4.1.1        \n[55] fastmap_1.1.0          survival_3.2-13        AnnotationDbi_1.56.1  \n[58] colorspace_2.0-2       caTools_1.18.2         memoise_2.0.1         \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "19 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "19.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:35:10", "plugin": "core", "name": "end_epoch", "raw_value": "1707662110.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:34:51", "plugin": "core", "name": "start_epoch", "raw_value": "1707662091.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.7+galaxy2-10", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.7+galaxy2", "test_index": 10, "time_seconds": 97.70972490310669, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "d26d6cd1362891d6"}, {"src": "hda", "id": "066f8139a472be5b"}, {"src": "hda", "id": "3ceb54390158065e"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "630fc9482c48bc86"}, {"src": "hda", "id": "d7c34384809852bc"}, {"src": "hda", "id": "ab2c8b2742a3be14"}], "tximport|txtype": "sailfish", "tximport|mapping_format|gtf_file": {"src": "hda", "id": "10ffa43dcd3303f5"}, "tximport|mapping_format|mapping_format_selector": "gtf", "tximport|tximport_selector": "tximport", "advanced_options|esf": "poscounts", "output_options|output_selector": "sizefactors", "output_options|alpha_ma": "0.05"}, "job": {"model_class": "Job", "id": "f7435f22a712f3cf", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:49:59.871767", "create_time": "2024-02-11T14:48:53.913571", "galaxy_version": "21.09", "command_version": "R version 4.1.1 (2021-08-10) -- \"Kick Things\", DESeq2 version 1.34.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.7+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-bf5kw", "command_line": "ln -s '/galaxy/server/database/objects/d/5/3/dataset_d53483f0-f355-4835-8725-812e5a51f0de.dat' mapping.gff &&  cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/9/0/8/dataset_90846a5d-e603-4786-9e53-673d85c4ba57.dat' -A 0.05 -F '/galaxy/server/database/objects/a/e/2/dataset_ae292605-2b4d-4a8a-a51e-d21f66b818b4.dat'                  -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/8/f/0/dataset_8f0de38c-c7cb-4189-9f0a-a016c09fec30.dat\", \"/galaxy/server/database/objects/d/4/e/dataset_d4e5fda1-bff9-44ac-ad1f-3e093af15fa2.dat\", \"/galaxy/server/database/objects/3/4/4/dataset_344a40cd-dab9-4a8a-9078-7325d11e19ef.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/9/5/3/dataset_95314073-21bb-4187-9328-3fa504038cb8.dat\", \"/galaxy/server/database/objects/7/a/d/dataset_7adc3c8b-1713-49e5-a00c-d40c6dbb502f.dat\", \"/galaxy/server/database/objects/7/1/f/dataset_71fbc47b-0574-475a-ae03-08c400eaf0f7.dat\"]}]]]' -l '{\"dataset_95314073-21bb-4187-9328-3fa504038cb8.dat\": \"sailfish_quant.sf1.tab\", \"dataset_7adc3c8b-1713-49e5-a00c-d40c6dbb502f.dat\": \"sailfish_quant.sf2.tab\", \"dataset_71fbc47b-0574-475a-ae03-08c400eaf0f7.dat\": \"sailfish_quant.sf3.tab\", \"dataset_8f0de38c-c7cb-4189-9f0a-a016c09fec30.dat\": \"sailfish_quant.sf4.tab\", \"dataset_d4e5fda1-bff9-44ac-ad1f-3e093af15fa2.dat\": \"sailfish_quant.sf5.tab\", \"dataset_344a40cd-dab9-4a8a-9078-7325d11e19ef.dat\": \"sailfish_quant.sf6.tab\"}' -e poscounts -t 1 -i -y sailfish -x mapping.gff", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.05\", \"output_selector\": \"sizefactors\"}", "advanced_options": "{\"auto_mean_filter_off\": \"false\", \"esf\": \"poscounts\", \"fit_type\": \"1\", \"outlier_filter_off\": \"false\", \"outlier_replace_off\": \"false\", \"prefilter_conditional\": {\"__current_case__\": 1, \"prefilter\": \"\"}}", "tximport": "{\"__current_case__\": 0, \"mapping_format\": {\"__current_case__\": 0, \"gtf_file\": {\"values\": [{\"id\": 457, \"src\": \"hda\"}]}, \"mapping_format_selector\": \"gtf\"}, \"tximport_selector\": \"tximport\", \"txtype\": \"sailfish\"}", "header": "\"true\"", "batch_factors": null, "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 451, \"src\": \"hda\"}, {\"id\": 452, \"src\": \"hda\"}, {\"id\": 453, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 454, \"src\": \"hda\"}, {\"id\": 455, \"src\": \"hda\"}, {\"id\": 456, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "d26d6cd1362891d6", "src": "hda", "uuid": "95314073-21bb-4187-9328-3fa504038cb8"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "d26d6cd1362891d6", "src": "hda", "uuid": "95314073-21bb-4187-9328-3fa504038cb8"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "3ceb54390158065e", "src": "hda", "uuid": "71fbc47b-0574-475a-ae03-08c400eaf0f7"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "066f8139a472be5b", "src": "hda", "uuid": "7adc3c8b-1713-49e5-a00c-d40c6dbb502f"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "d7c34384809852bc", "src": "hda", "uuid": "d4e5fda1-bff9-44ac-ad1f-3e093af15fa2"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "ab2c8b2742a3be14", "src": "hda", "uuid": "344a40cd-dab9-4a8a-9078-7325d11e19ef"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "630fc9482c48bc86", "src": "hda", "uuid": "8f0de38c-c7cb-4189-9f0a-a016c09fec30"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "630fc9482c48bc86", "src": "hda", "uuid": "8f0de38c-c7cb-4189-9f0a-a016c09fec30"}, "tximport|gtf_file": {"id": "10ffa43dcd3303f5", "src": "hda", "uuid": "d53483f0-f355-4835-8725-812e5a51f0de"}}, "outputs": {"sizefactors_out": {"id": "f04173bc09ee1632", "src": "hda", "uuid": "ae292605-2b4d-4a8a-a51e-d21f66b818b4"}, "deseq_out": {"id": "c2a1d4123ef6ea58", "src": "hda", "uuid": "90846a5d-e603-4786-9e53-673d85c4ba57"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "primary factor: Treatment \n\n---------------------\n\nsize factors for samples: taking tximport data into account\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 11 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 9 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] GenomicFeatures_1.46.1      AnnotationDbi_1.56.1       \n [3] tximport_1.22.0             rjson_0.2.20               \n [5] gplots_3.1.1                RColorBrewer_1.1-2         \n [7] DESeq2_1.34.0               SummarizedExperiment_1.24.0\n [9] Biobase_2.54.0              MatrixGenerics_1.6.0       \n[11] matrixStats_0.61.0          GenomicRanges_1.46.0       \n[13] GenomeInfoDb_1.30.0         IRanges_2.28.0             \n[15] S4Vectors_0.32.0            BiocGenerics_0.40.0        \n[17] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] bitops_1.0-7             bit64_4.0.5              filelock_1.0.2          \n [4] progress_1.2.2           httr_1.4.2               utf8_1.2.2              \n [7] R6_2.5.1                 KernSmooth_2.23-20       DBI_1.1.1               \n[10] colorspace_2.0-2         tidyselect_1.1.1         prettyunits_1.1.1       \n[13] bit_4.0.4                curl_4.3.2               compiler_4.1.1          \n[16] xml2_1.3.3               DelayedArray_0.20.0      rtracklayer_1.54.0      \n[19] caTools_1.18.2           scales_1.1.1             genefilter_1.76.0       \n[22] rappdirs_0.3.3           stringr_1.4.0            digest_0.6.29           \n[25] Rsamtools_2.10.0         XVector_0.34.0           pkgconfig_2.0.3         \n[28] dbplyr_2.1.1             fastmap_1.1.0            rlang_0.4.12            \n[31] RSQLite_2.2.8            BiocIO_1.4.0             generics_0.1.1          \n[34] jsonlite_1.7.2           BiocParallel_1.28.0      gtools_3.9.2            \n[37] dplyr_1.0.7              RCurl_1.98-1.5           magrittr_2.0.1          \n[40] GenomeInfoDbData_1.2.7   Matrix_1.3-4             Rcpp_1.0.7              \n[43] munsell_0.5.0            fansi_0.4.2              lifecycle_1.0.1         \n[46] stringi_1.7.6            yaml_2.2.1               zlibbioc_1.40.0         \n[49] BiocFileCache_2.2.0      grid_4.1.1               blob_1.2.2              \n[52] parallel_4.1.1           crayon_1.4.2             lattice_0.20-45         \n[55] Biostrings_2.62.0        splines_4.1.1            annotate_1.72.0         \n[58] hms_1.1.1                KEGGREST_1.34.0          locfit_1.5-9.4          \n[61] pillar_1.6.4             geneplotter_1.72.0       biomaRt_2.50.0          \n[64] XML_3.99-0.8             glue_1.5.1               png_0.1-7               \n[67] vctrs_0.3.8              gtable_0.3.0             purrr_0.3.4             \n[70] assertthat_0.2.1         cachem_1.0.6             ggplot2_3.3.5           \n[73] xtable_1.8-4             restfulr_0.0.13          survival_3.2-13         \n[76] tibble_3.1.6             GenomicAlignments_1.30.0 memoise_2.0.1           \n[79] ellipsis_0.3.2          \n", "job_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nImport genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... OK\n'select()' returned 1:1 mapping between keys and columns\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nWarning message:\nIn .get_cds_IDX(mcols0$type, mcols0$phase) :\n  The \"phase\" metadata column contains non-NA values for features of type\n  stop_codon. This information was ignored.\nusing 'avgTxLength' from assays(dds), correcting for library size\nusing pre-existing normalization factors\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "stderr": "\nWarning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nImport genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... OK\n'select()' returned 1:1 mapping between keys and columns\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nWarning message:\nIn .get_cds_IDX(mcols0$type, mcols0$phase) :\n  The \"phase\" metadata column contains non-NA values for features of type\n  stop_codon. This information was ignored.\nusing 'avgTxLength' from assays(dds), correcting for library size\nusing pre-existing normalization factors\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "stdout": "\nprimary factor: Treatment \n\n---------------------\n\nsize factors for samples: taking tximport data into account\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 11 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 9 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] GenomicFeatures_1.46.1      AnnotationDbi_1.56.1       \n [3] tximport_1.22.0             rjson_0.2.20               \n [5] gplots_3.1.1                RColorBrewer_1.1-2         \n [7] DESeq2_1.34.0               SummarizedExperiment_1.24.0\n [9] Biobase_2.54.0              MatrixGenerics_1.6.0       \n[11] matrixStats_0.61.0          GenomicRanges_1.46.0       \n[13] GenomeInfoDb_1.30.0         IRanges_2.28.0             \n[15] S4Vectors_0.32.0            BiocGenerics_0.40.0        \n[17] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] bitops_1.0-7             bit64_4.0.5              filelock_1.0.2          \n [4] progress_1.2.2           httr_1.4.2               utf8_1.2.2              \n [7] R6_2.5.1                 KernSmooth_2.23-20       DBI_1.1.1               \n[10] colorspace_2.0-2         tidyselect_1.1.1         prettyunits_1.1.1       \n[13] bit_4.0.4                curl_4.3.2               compiler_4.1.1          \n[16] xml2_1.3.3               DelayedArray_0.20.0      rtracklayer_1.54.0      \n[19] caTools_1.18.2           scales_1.1.1             genefilter_1.76.0       \n[22] rappdirs_0.3.3           stringr_1.4.0            digest_0.6.29           \n[25] Rsamtools_2.10.0         XVector_0.34.0           pkgconfig_2.0.3         \n[28] dbplyr_2.1.1             fastmap_1.1.0            rlang_0.4.12            \n[31] RSQLite_2.2.8            BiocIO_1.4.0             generics_0.1.1          \n[34] jsonlite_1.7.2           BiocParallel_1.28.0      gtools_3.9.2            \n[37] dplyr_1.0.7              RCurl_1.98-1.5           magrittr_2.0.1          \n[40] GenomeInfoDbData_1.2.7   Matrix_1.3-4             Rcpp_1.0.7              \n[43] munsell_0.5.0            fansi_0.4.2              lifecycle_1.0.1         \n[46] stringi_1.7.6            yaml_2.2.1               zlibbioc_1.40.0         \n[49] BiocFileCache_2.2.0      grid_4.1.1               blob_1.2.2              \n[52] parallel_4.1.1           crayon_1.4.2             lattice_0.20-45         \n[55] Biostrings_2.62.0        splines_4.1.1            annotate_1.72.0         \n[58] hms_1.1.1                KEGGREST_1.34.0          locfit_1.5-9.4          \n[61] pillar_1.6.4             geneplotter_1.72.0       biomaRt_2.50.0          \n[64] XML_3.99-0.8             glue_1.5.1               png_0.1-7               \n[67] vctrs_0.3.8              gtable_0.3.0             purrr_0.3.4             \n[70] assertthat_0.2.1         cachem_1.0.6             ggplot2_3.3.5           \n[73] xtable_1.8-4             restfulr_0.0.13          survival_3.2-13         \n[76] tibble_3.1.6             GenomicAlignments_1.30.0 memoise_2.0.1           \n[79] ellipsis_0.3.2          \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "20 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "20.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:49:51", "plugin": "core", "name": "end_epoch", "raw_value": "1707662991.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:49:31", "plugin": "core", "name": "start_epoch", "raw_value": "1707662971.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.7+galaxy2-11", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.7+galaxy2", "test_index": 11, "time_seconds": 98.56526470184326, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "12b61305823177cb"}, {"src": "hda", "id": "bd4b25ab703f632f"}, {"src": "hda", "id": "65ca03680e4d3b4d"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "da172cfe004adbe0"}, {"src": "hda", "id": "a60670005f06e6df"}, {"src": "hda", "id": "3433ad470958e9de"}, {"src": "hda", "id": "eda76bbfcf67771e"}], "advanced_options|prefilter_conditional|prefilter_value": "10", "advanced_options|prefilter_conditional|prefilter": "-P", "output_options|output_selector": "normCounts"}, "job": {"model_class": "Job", "id": "5705f213dd1bae5e", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:51:37.408911", "create_time": "2024-02-11T14:50:32.855748", "galaxy_version": "21.09", "command_version": "R version 4.1.1 (2021-08-10) -- \"Kick Things\", DESeq2 version 1.34.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.7+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-kv5p5", "command_line": "cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/d/e/b/dataset_debbaa98-ae71-4adf-bd54-6399a7885363.dat' -A 0.1 -n '/galaxy/server/database/objects/3/4/4/dataset_3441d9f1-17b4-4c9a-a3a4-f24dc213b542.dat'                    -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/6/a/3/dataset_6a31e5ca-08d2-4c17-9da2-8226169b1c74.dat\", \"/galaxy/server/database/objects/b/7/b/dataset_b7bb606d-52e1-4ad9-a272-721c68a85cd5.dat\", \"/galaxy/server/database/objects/3/3/c/dataset_33cb5723-7f9b-49c4-8b74-7687d02e376f.dat\", \"/galaxy/server/database/objects/3/2/9/dataset_32964eb5-7eb3-4738-a26d-2ae138a85dac.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/5/e/c/dataset_5ec55a73-a9e7-4dc8-a970-7226933fe37d.dat\", \"/galaxy/server/database/objects/3/5/8/dataset_3586f3ce-20fa-4893-b71c-645dfb648ed2.dat\", \"/galaxy/server/database/objects/c/1/2/dataset_c127bb76-22dc-46a4-b616-a061d8fa4d7a.dat\"]}]]]' -l '{\"dataset_5ec55a73-a9e7-4dc8-a970-7226933fe37d.dat\": \"GSM461179_treat_single.counts\", \"dataset_3586f3ce-20fa-4893-b71c-645dfb648ed2.dat\": \"GSM461180_treat_paired.counts\", \"dataset_c127bb76-22dc-46a4-b616-a061d8fa4d7a.dat\": \"GSM461181_treat_paired.counts\", \"dataset_6a31e5ca-08d2-4c17-9da2-8226169b1c74.dat\": \"GSM461176_untreat_single.counts\", \"dataset_b7bb606d-52e1-4ad9-a272-721c68a85cd5.dat\": \"GSM461177_untreat_paired.counts\", \"dataset_33cb5723-7f9b-49c4-8b74-7687d02e376f.dat\": \"GSM461178_untreat_paired.counts\", \"dataset_32964eb5-7eb3-4738-a26d-2ae138a85dac.dat\": \"GSM461182_untreat_single.counts\"}' -t 1 -P -V 10", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.1\", \"output_selector\": \"normCounts\"}", "advanced_options": "{\"auto_mean_filter_off\": \"false\", \"esf\": \"\", \"fit_type\": \"1\", \"outlier_filter_off\": \"false\", \"outlier_replace_off\": \"false\", \"prefilter_conditional\": {\"__current_case__\": 0, \"prefilter\": \"-P\", \"prefilter_value\": \"10\"}}", "tximport": "{\"__current_case__\": 1, \"tximport_selector\": \"count\"}", "header": "\"true\"", "batch_factors": null, "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 460, \"src\": \"hda\"}, {\"id\": 461, \"src\": \"hda\"}, {\"id\": 462, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 463, \"src\": \"hda\"}, {\"id\": 464, \"src\": \"hda\"}, {\"id\": 465, \"src\": \"hda\"}, {\"id\": 466, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "12b61305823177cb", "src": "hda", "uuid": "5ec55a73-a9e7-4dc8-a970-7226933fe37d"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "12b61305823177cb", "src": "hda", "uuid": "5ec55a73-a9e7-4dc8-a970-7226933fe37d"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "bd4b25ab703f632f", "src": "hda", "uuid": "3586f3ce-20fa-4893-b71c-645dfb648ed2"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "65ca03680e4d3b4d", "src": "hda", "uuid": "c127bb76-22dc-46a4-b616-a061d8fa4d7a"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "da172cfe004adbe0", "src": "hda", "uuid": "6a31e5ca-08d2-4c17-9da2-8226169b1c74"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "da172cfe004adbe0", "src": "hda", "uuid": "6a31e5ca-08d2-4c17-9da2-8226169b1c74"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "a60670005f06e6df", "src": "hda", "uuid": "b7bb606d-52e1-4ad9-a272-721c68a85cd5"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "3433ad470958e9de", "src": "hda", "uuid": "33cb5723-7f9b-49c4-8b74-7687d02e376f"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile4": {"id": "eda76bbfcf67771e", "src": "hda", "uuid": "32964eb5-7eb3-4738-a26d-2ae138a85dac"}}, "outputs": {"counts_out": {"id": "7fdaddf56e722a81", "src": "hda", "uuid": "3441d9f1-17b4-4c9a-a3a4-f24dc213b542"}, "deseq_out": {"id": "a36d3ef42091a92d", "src": "hda", "uuid": "debbaa98-ae71-4adf-bd54-6399a7885363"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "primary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                                Treatment\nGSM461176_untreat_single.counts Untreated\nGSM461177_untreat_paired.counts Untreated\nGSM461178_untreat_paired.counts Untreated\nGSM461182_untreat_single.counts Untreated\nGSM461179_treat_single.counts     Treated\nGSM461180_treat_paired.counts     Treated\nGSM461181_treat_paired.counts     Treated\n\ndesign formula:\n~Treatment\n\n\n7 samples with counts over 3999 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 2921 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 149, 5.1%\nLFC < 0 (down)     : 152, 5.2%\noutliers [1]       : 2, 0.068%\nlow counts [2]     : 170, 5.8%\n(mean count < 3)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] rjson_0.2.20                gplots_3.1.1               \n [3] RColorBrewer_1.1-2          DESeq2_1.34.0              \n [5] SummarizedExperiment_1.24.0 Biobase_2.54.0             \n [7] MatrixGenerics_1.6.0        matrixStats_0.61.0         \n [9] GenomicRanges_1.46.0        GenomeInfoDb_1.30.0        \n[11] IRanges_2.28.0              S4Vectors_0.32.0           \n[13] BiocGenerics_0.40.0         getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45       \n [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0     \n [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              \n[10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         \n[13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          \n[16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          \n[19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    \n[22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         \n[25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       \n[28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          \n[31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           \n[34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          \n[37] grid_4.1.1             xtable_1.8-4           gtable_0.3.0          \n[40] lifecycle_1.0.1        DBI_1.1.1              magrittr_2.0.1        \n[43] scales_1.1.1           KernSmooth_2.23-20     cachem_1.0.6          \n[46] XVector_0.34.0         genefilter_1.76.0      ellipsis_0.3.2        \n[49] vctrs_0.3.8            generics_0.1.1         bit64_4.0.5           \n[52] glue_1.5.1             purrr_0.3.4            parallel_4.1.1        \n[55] fastmap_1.1.0          survival_3.2-13        AnnotationDbi_1.56.1  \n[58] colorspace_2.0-2       caTools_1.18.2         memoise_2.0.1         \n", "job_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nestimating size factors\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\nfinal dispersion estimates\nfitting model and testing\n", "stderr": "\nWarning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nestimating size factors\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\nfinal dispersion estimates\nfitting model and testing\n", "stdout": "\nprimary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                                Treatment\nGSM461176_untreat_single.counts Untreated\nGSM461177_untreat_paired.counts Untreated\nGSM461178_untreat_paired.counts Untreated\nGSM461182_untreat_single.counts Untreated\nGSM461179_treat_single.counts     Treated\nGSM461180_treat_paired.counts     Treated\nGSM461181_treat_paired.counts     Treated\n\ndesign formula:\n~Treatment\n\n\n7 samples with counts over 3999 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 2921 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 149, 5.1%\nLFC < 0 (down)     : 152, 5.2%\noutliers [1]       : 2, 0.068%\nlow counts [2]     : 170, 5.8%\n(mean count < 3)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] rjson_0.2.20                gplots_3.1.1               \n [3] RColorBrewer_1.1-2          DESeq2_1.34.0              \n [5] SummarizedExperiment_1.24.0 Biobase_2.54.0             \n [7] MatrixGenerics_1.6.0        matrixStats_0.61.0         \n [9] GenomicRanges_1.46.0        GenomeInfoDb_1.30.0        \n[11] IRanges_2.28.0              S4Vectors_0.32.0           \n[13] BiocGenerics_0.40.0         getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45       \n [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0     \n [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              \n[10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         \n[13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          \n[16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          \n[19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    \n[22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         \n[25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       \n[28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          \n[31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           \n[34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          \n[37] grid_4.1.1             xtable_1.8-4           gtable_0.3.0          \n[40] lifecycle_1.0.1        DBI_1.1.1              magrittr_2.0.1        \n[43] scales_1.1.1           KernSmooth_2.23-20     cachem_1.0.6          \n[46] XVector_0.34.0         genefilter_1.76.0      ellipsis_0.3.2        \n[49] vctrs_0.3.8            generics_0.1.1         bit64_4.0.5           \n[52] glue_1.5.1             purrr_0.3.4            parallel_4.1.1        \n[55] fastmap_1.1.0          survival_3.2-13        AnnotationDbi_1.56.1  \n[58] colorspace_2.0-2       caTools_1.18.2         memoise_2.0.1         \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "17 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "17.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:51:28", "plugin": "core", "name": "end_epoch", "raw_value": "1707663088.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:51:11", "plugin": "core", "name": "start_epoch", "raw_value": "1707663071.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.7+galaxy2-2", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.7+galaxy2", "test_index": 2, "time_seconds": 106.73768043518066, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "db22323bcc7bf610"}, {"src": "hda", "id": "f0ceef9f390bc9ed"}, {"src": "hda", "id": "9fb2ba5dd81c6bf0"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "e0bf1908847852f0"}, {"src": "hda", "id": "89f205d71c12c5e4"}, {"src": "hda", "id": "489f0fe04c626b5c"}, {"src": "hda", "id": "ae4abf72449bbeb5"}], "header": false, "output_options|output_selector": ["normCounts", "normRLog", "normVST"]}, "job": {"model_class": "Job", "id": "7904658714d72a08", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:37:02.629554", "create_time": "2024-02-11T14:35:52.487795", "galaxy_version": "21.09", "command_version": "R version 4.1.1 (2021-08-10) -- \"Kick Things\", DESeq2 version 1.34.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.7+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-fhp5w", "command_line": "cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/c/9/b/dataset_c9b2e6fb-f48d-4205-8730-d562140e8df6.dat' -A 0.1 -n '/galaxy/server/database/objects/5/f/5/dataset_5f5e4ec0-aea9-42bc-8c39-afabf184f871.dat' -r '/galaxy/server/database/objects/5/8/4/dataset_5846b13f-8472-4b6a-a4fe-639c52e057cc.dat' -v '/galaxy/server/database/objects/3/9/4/dataset_39490501-0c06-4e05-ba34-a2c4410ada9d.dat'                      -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/4/9/1/dataset_49132d70-0ae2-4786-aee4-8fd3ea1b1655.dat\", \"/galaxy/server/database/objects/a/1/2/dataset_a12562a2-a98b-40e6-aeb8-7130f2c6eaf8.dat\", \"/galaxy/server/database/objects/8/b/5/dataset_8b50605d-becb-4e62-9426-b2ee924f9984.dat\", \"/galaxy/server/database/objects/9/9/d/dataset_99ddfb0a-5275-4521-8dad-1d99bc20ef32.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/c/9/7/dataset_c9780ac7-4cae-47f4-b0bf-363f46e69d8c.dat\", \"/galaxy/server/database/objects/7/c/d/dataset_7cd37c28-2b14-4718-86a0-028d0a2a8c6f.dat\", \"/galaxy/server/database/objects/6/e/2/dataset_6e201b71-7590-4591-b8cc-fb073fb4931c.dat\"]}]]]' -l '{\"dataset_c9780ac7-4cae-47f4-b0bf-363f46e69d8c.dat\": \"GSM461179_treat_single.counts.noheader\", \"dataset_7cd37c28-2b14-4718-86a0-028d0a2a8c6f.dat\": \"GSM461180_treat_paired.counts.noheader\", \"dataset_6e201b71-7590-4591-b8cc-fb073fb4931c.dat\": \"GSM461181_treat_paired.counts.noheader\", \"dataset_49132d70-0ae2-4786-aee4-8fd3ea1b1655.dat\": \"GSM461176_untreat_single.counts.noheader\", \"dataset_a12562a2-a98b-40e6-aeb8-7130f2c6eaf8.dat\": \"GSM461177_untreat_paired.counts.noheader\", \"dataset_8b50605d-becb-4e62-9426-b2ee924f9984.dat\": \"GSM461178_untreat_paired.counts.noheader\", \"dataset_99ddfb0a-5275-4521-8dad-1d99bc20ef32.dat\": \"GSM461182_untreat_single.counts.noheader\"}' -t 1", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.1\", \"output_selector\": [\"normCounts\", \"normRLog\", \"normVST\"]}", "advanced_options": "{\"auto_mean_filter_off\": \"false\", \"esf\": \"\", \"fit_type\": \"1\", \"outlier_filter_off\": \"false\", \"outlier_replace_off\": \"false\", \"prefilter_conditional\": {\"__current_case__\": 1, \"prefilter\": \"\"}}", "tximport": "{\"__current_case__\": 1, \"tximport_selector\": \"count\"}", "header": "\"false\"", "batch_factors": null, "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 383, \"src\": \"hda\"}, {\"id\": 384, \"src\": \"hda\"}, {\"id\": 385, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 386, \"src\": \"hda\"}, {\"id\": 387, \"src\": \"hda\"}, {\"id\": 388, \"src\": \"hda\"}, {\"id\": 389, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "db22323bcc7bf610", "src": "hda", "uuid": "c9780ac7-4cae-47f4-b0bf-363f46e69d8c"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "db22323bcc7bf610", "src": "hda", "uuid": "c9780ac7-4cae-47f4-b0bf-363f46e69d8c"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "f0ceef9f390bc9ed", "src": "hda", "uuid": "7cd37c28-2b14-4718-86a0-028d0a2a8c6f"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "9fb2ba5dd81c6bf0", "src": "hda", "uuid": "6e201b71-7590-4591-b8cc-fb073fb4931c"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "e0bf1908847852f0", "src": "hda", "uuid": "49132d70-0ae2-4786-aee4-8fd3ea1b1655"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "e0bf1908847852f0", "src": "hda", "uuid": "49132d70-0ae2-4786-aee4-8fd3ea1b1655"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "89f205d71c12c5e4", "src": "hda", "uuid": "a12562a2-a98b-40e6-aeb8-7130f2c6eaf8"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "489f0fe04c626b5c", "src": "hda", "uuid": "8b50605d-becb-4e62-9426-b2ee924f9984"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile4": {"id": "ae4abf72449bbeb5", "src": "hda", "uuid": "99ddfb0a-5275-4521-8dad-1d99bc20ef32"}}, "outputs": {"vst_out": {"id": "49276f8e2b2b9690", "src": "hda", "uuid": "39490501-0c06-4e05-ba34-a2c4410ada9d"}, "rlog_out": {"id": "f6758cfdb9bd65ee", "src": "hda", "uuid": "5846b13f-8472-4b6a-a4fe-639c52e057cc"}, "counts_out": {"id": "9c4b3f6b0a80b5db", "src": "hda", "uuid": "5f5e4ec0-aea9-42bc-8c39-afabf184f871"}, "deseq_out": {"id": "451f8e3aafcea7a5", "src": "hda", "uuid": "c9b2e6fb-f48d-4205-8730-d562140e8df6"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "primary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                                         Treatment\nGSM461176_untreat_single.counts.noheader Untreated\nGSM461177_untreat_paired.counts.noheader Untreated\nGSM461178_untreat_paired.counts.noheader Untreated\nGSM461182_untreat_single.counts.noheader Untreated\nGSM461179_treat_single.counts.noheader     Treated\nGSM461180_treat_paired.counts.noheader     Treated\nGSM461181_treat_paired.counts.noheader     Treated\n\ndesign formula:\n~Treatment\n\n\n7 samples with counts over 3999 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 3429 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 148, 4.3%\nLFC < 0 (down)     : 152, 4.4%\noutliers [1]       : 2, 0.058%\nlow counts [2]     : 659, 19%\n(mean count < 3)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] rjson_0.2.20                gplots_3.1.1               \n [3] RColorBrewer_1.1-2          DESeq2_1.34.0              \n [5] SummarizedExperiment_1.24.0 Biobase_2.54.0             \n [7] MatrixGenerics_1.6.0        matrixStats_0.61.0         \n [9] GenomicRanges_1.46.0        GenomeInfoDb_1.30.0        \n[11] IRanges_2.28.0              S4Vectors_0.32.0           \n[13] BiocGenerics_0.40.0         getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45       \n [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0     \n [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              \n[10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         \n[13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          \n[16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          \n[19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    \n[22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         \n[25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       \n[28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          \n[31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           \n[34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          \n[37] grid_4.1.1             xtable_1.8-4           gtable_0.3.0          \n[40] lifecycle_1.0.1        DBI_1.1.1              magrittr_2.0.1        \n[43] scales_1.1.1           KernSmooth_2.23-20     cachem_1.0.6          \n[46] XVector_0.34.0         genefilter_1.76.0      ellipsis_0.3.2        \n[49] vctrs_0.3.8            generics_0.1.1         bit64_4.0.5           \n[52] glue_1.5.1             purrr_0.3.4            parallel_4.1.1        \n[55] fastmap_1.1.0          survival_3.2-13        AnnotationDbi_1.56.1  \n[58] colorspace_2.0-2       caTools_1.18.2         memoise_2.0.1         \n", "job_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nestimating size factors\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\nfinal dispersion estimates\nfitting model and testing\n", "stderr": "\nWarning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nestimating size factors\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\nfinal dispersion estimates\nfitting model and testing\n", "stdout": "\nprimary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                                         Treatment\nGSM461176_untreat_single.counts.noheader Untreated\nGSM461177_untreat_paired.counts.noheader Untreated\nGSM461178_untreat_paired.counts.noheader Untreated\nGSM461182_untreat_single.counts.noheader Untreated\nGSM461179_treat_single.counts.noheader     Treated\nGSM461180_treat_paired.counts.noheader     Treated\nGSM461181_treat_paired.counts.noheader     Treated\n\ndesign formula:\n~Treatment\n\n\n7 samples with counts over 3999 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 3429 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 148, 4.3%\nLFC < 0 (down)     : 152, 4.4%\noutliers [1]       : 2, 0.058%\nlow counts [2]     : 659, 19%\n(mean count < 3)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] rjson_0.2.20                gplots_3.1.1               \n [3] RColorBrewer_1.1-2          DESeq2_1.34.0              \n [5] SummarizedExperiment_1.24.0 Biobase_2.54.0             \n [7] MatrixGenerics_1.6.0        matrixStats_0.61.0         \n [9] GenomicRanges_1.46.0        GenomeInfoDb_1.30.0        \n[11] IRanges_2.28.0              S4Vectors_0.32.0           \n[13] BiocGenerics_0.40.0         getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45       \n [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0     \n [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              \n[10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         \n[13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          \n[16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          \n[19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    \n[22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         \n[25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       \n[28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          \n[31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           \n[34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          \n[37] grid_4.1.1             xtable_1.8-4           gtable_0.3.0          \n[40] lifecycle_1.0.1        DBI_1.1.1              magrittr_2.0.1        \n[43] scales_1.1.1           KernSmooth_2.23-20     cachem_1.0.6          \n[46] XVector_0.34.0         genefilter_1.76.0      ellipsis_0.3.2        \n[49] vctrs_0.3.8            generics_0.1.1         bit64_4.0.5           \n[52] glue_1.5.1             purrr_0.3.4            parallel_4.1.1        \n[55] fastmap_1.1.0          survival_3.2-13        AnnotationDbi_1.56.1  \n[58] colorspace_2.0-2       caTools_1.18.2         memoise_2.0.1         \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "22 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "22.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:36:52", "plugin": "core", "name": "end_epoch", "raw_value": "1707662212.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:36:30", "plugin": "core", "name": "start_epoch", "raw_value": "1707662190.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.7+galaxy2-3", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.7+galaxy2", "test_index": 3, "time_seconds": 94.97329473495483, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "383b3805ee113a32"}, {"src": "hda", "id": "0f6d8941c340811f"}, {"src": "hda", "id": "757842fe96d7b797"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "d027f76b1f1c74ff"}, {"src": "hda", "id": "dae061c932036860"}, {"src": "hda", "id": "23841b3830f36881"}], "tximport|txtype": "sailfish", "tximport|mapping_format|tabular_file": {"src": "hda", "id": "114e63d96ecbab4f"}, "tximport|mapping_format|mapping_format_selector": "tabular", "tximport|tximport_selector": "tximport", "output_options|output_selector": ""}, "job": {"model_class": "Job", "id": "5f9d1ac919a829a2", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:38:40.835354", "create_time": "2024-02-11T14:37:38.281676", "galaxy_version": "21.09", "command_version": "R version 4.1.1 (2021-08-10) -- \"Kick Things\", DESeq2 version 1.34.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.7+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-dxbwd", "command_line": "ln -s '/galaxy/server/database/objects/7/6/c/dataset_76c8a308-fc76-45a1-9978-db1173f46ec9.dat' mapping.txt &&  cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/7/3/7/dataset_73768159-68c9-4afc-ba3e-0d0d4706cc39.dat' -A 0.1                  -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/e/3/f/dataset_e3f1a3b3-d9ad-4f24-93ae-444f6bd95d7a.dat\", \"/galaxy/server/database/objects/0/b/c/dataset_0bc3b089-d865-4f19-9631-a9d53960d4f4.dat\", \"/galaxy/server/database/objects/6/c/8/dataset_6c85116b-50dc-48d0-971b-fcda8624e185.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/2/0/9/dataset_2092eda6-c3fe-4c08-81d0-3429762227ad.dat\", \"/galaxy/server/database/objects/6/1/c/dataset_61cf2e0b-0643-417e-9b38-2a4496682293.dat\", \"/galaxy/server/database/objects/c/b/c/dataset_cbcf360f-21a9-48e0-87d6-bfa5ba2aaa83.dat\"]}]]]' -l '{\"dataset_2092eda6-c3fe-4c08-81d0-3429762227ad.dat\": \"sailfish_quant.sf1.tab\", \"dataset_61cf2e0b-0643-417e-9b38-2a4496682293.dat\": \"sailfish_quant.sf2.tab\", \"dataset_cbcf360f-21a9-48e0-87d6-bfa5ba2aaa83.dat\": \"sailfish_quant.sf3.tab\", \"dataset_e3f1a3b3-d9ad-4f24-93ae-444f6bd95d7a.dat\": \"sailfish_quant.sf4.tab\", \"dataset_0bc3b089-d865-4f19-9631-a9d53960d4f4.dat\": \"sailfish_quant.sf5.tab\", \"dataset_6c85116b-50dc-48d0-971b-fcda8624e185.dat\": \"sailfish_quant.sf6.tab\"}' -t 1 -i -y sailfish -x mapping.txt", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.1\", \"output_selector\": []}", "advanced_options": "{\"auto_mean_filter_off\": \"false\", \"esf\": \"\", \"fit_type\": \"1\", \"outlier_filter_off\": \"false\", \"outlier_replace_off\": \"false\", \"prefilter_conditional\": {\"__current_case__\": 1, \"prefilter\": \"\"}}", "tximport": "{\"__current_case__\": 0, \"mapping_format\": {\"__current_case__\": 1, \"mapping_format_selector\": \"tabular\", \"tabular_file\": {\"values\": [{\"id\": 400, \"src\": \"hda\"}]}}, \"tximport_selector\": \"tximport\", \"txtype\": \"sailfish\"}", "header": "\"true\"", "batch_factors": null, "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 394, \"src\": \"hda\"}, {\"id\": 395, \"src\": \"hda\"}, {\"id\": 396, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 397, \"src\": \"hda\"}, {\"id\": 398, \"src\": \"hda\"}, {\"id\": 399, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "383b3805ee113a32", "src": "hda", "uuid": "2092eda6-c3fe-4c08-81d0-3429762227ad"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "383b3805ee113a32", "src": "hda", "uuid": "2092eda6-c3fe-4c08-81d0-3429762227ad"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "0f6d8941c340811f", "src": "hda", "uuid": "61cf2e0b-0643-417e-9b38-2a4496682293"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "757842fe96d7b797", "src": "hda", "uuid": "cbcf360f-21a9-48e0-87d6-bfa5ba2aaa83"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "d027f76b1f1c74ff", "src": "hda", "uuid": "e3f1a3b3-d9ad-4f24-93ae-444f6bd95d7a"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "d027f76b1f1c74ff", "src": "hda", "uuid": "e3f1a3b3-d9ad-4f24-93ae-444f6bd95d7a"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "dae061c932036860", "src": "hda", "uuid": "0bc3b089-d865-4f19-9631-a9d53960d4f4"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "23841b3830f36881", "src": "hda", "uuid": "6c85116b-50dc-48d0-971b-fcda8624e185"}, "tximport|tabular_file": {"id": "114e63d96ecbab4f", "src": "hda", "uuid": "76c8a308-fc76-45a1-9978-db1173f46ec9"}}, "outputs": {"deseq_out": {"id": "5153b05f820ed94d", "src": "hda", "uuid": "73768159-68c9-4afc-ba3e-0d0d4706cc39"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "primary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 10 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 8 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] tximport_1.22.0             rjson_0.2.20               \n [3] gplots_3.1.1                RColorBrewer_1.1-2         \n [5] DESeq2_1.34.0               SummarizedExperiment_1.24.0\n [7] Biobase_2.54.0              MatrixGenerics_1.6.0       \n [9] matrixStats_0.61.0          GenomicRanges_1.46.0       \n[11] GenomeInfoDb_1.30.0         IRanges_2.28.0             \n[13] S4Vectors_0.32.0            BiocGenerics_0.40.0        \n[15] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45       \n [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0     \n [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              \n[10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         \n[13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          \n[16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          \n[19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    \n[22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         \n[25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       \n[28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          \n[31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           \n[34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          \n[37] grid_4.1.1             jsonlite_1.7.2         xtable_1.8-4          \n[40] gtable_0.3.0           lifecycle_1.0.1        DBI_1.1.1             \n[43] magrittr_2.0.1         scales_1.1.1           KernSmooth_2.23-20    \n[46] cachem_1.0.6           XVector_0.34.0         genefilter_1.76.0     \n[49] ellipsis_0.3.2         vctrs_0.3.8            generics_0.1.1        \n[52] bit64_4.0.5            glue_1.5.1             purrr_0.3.4           \n[55] parallel_4.1.1         fastmap_1.1.0          survival_3.2-13       \n[58] AnnotationDbi_1.56.1   colorspace_2.0-2       caTools_1.18.2        \n[61] memoise_2.0.1         \n", "job_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "stderr": "\nWarning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "stdout": "\nprimary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 10 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 8 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] tximport_1.22.0             rjson_0.2.20               \n [3] gplots_3.1.1                RColorBrewer_1.1-2         \n [5] DESeq2_1.34.0               SummarizedExperiment_1.24.0\n [7] Biobase_2.54.0              MatrixGenerics_1.6.0       \n [9] matrixStats_0.61.0          GenomicRanges_1.46.0       \n[11] GenomeInfoDb_1.30.0         IRanges_2.28.0             \n[13] S4Vectors_0.32.0            BiocGenerics_0.40.0        \n[15] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45       \n [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0     \n [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              \n[10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         \n[13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          \n[16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          \n[19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    \n[22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         \n[25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       \n[28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          \n[31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           \n[34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          \n[37] grid_4.1.1             jsonlite_1.7.2         xtable_1.8-4          \n[40] gtable_0.3.0           lifecycle_1.0.1        DBI_1.1.1             \n[43] magrittr_2.0.1         scales_1.1.1           KernSmooth_2.23-20    \n[46] cachem_1.0.6           XVector_0.34.0         genefilter_1.76.0     \n[49] ellipsis_0.3.2         vctrs_0.3.8            generics_0.1.1        \n[52] bit64_4.0.5            glue_1.5.1             purrr_0.3.4           \n[55] parallel_4.1.1         fastmap_1.1.0          survival_3.2-13       \n[58] AnnotationDbi_1.56.1   colorspace_2.0-2       caTools_1.18.2        \n[61] memoise_2.0.1         \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "17 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "17.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:38:32", "plugin": "core", "name": "end_epoch", "raw_value": "1707662312.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:38:15", "plugin": "core", "name": "start_epoch", "raw_value": "1707662295.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.7+galaxy2-4", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.7+galaxy2", "test_index": 4, "time_seconds": 98.79453539848328, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "6089a711b6d06519"}, {"src": "hda", "id": "af4d79f1313c9cb1"}, {"src": "hda", "id": "db4e9a32a33340b6"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "a4a8a93c13759cdd"}, {"src": "hda", "id": "f6dae60d4879ede3"}, {"src": "hda", "id": "b1e9c5984350e3f7"}], "tximport|txtype": "sailfish", "tximport|mapping_format|gtf_file": {"src": "hda", "id": "1b132ed8496d82fe"}, "tximport|mapping_format|mapping_format_selector": "gtf", "tximport|tximport_selector": "tximport", "output_options|output_selector": ""}, "job": {"model_class": "Job", "id": "d5eb61eae9d7fa72", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:40:19.592806", "create_time": "2024-02-11T14:39:13.766623", "galaxy_version": "21.09", "command_version": "R version 4.1.1 (2021-08-10) -- \"Kick Things\", DESeq2 version 1.34.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.7+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-pt8f7", "command_line": "ln -s '/galaxy/server/database/objects/2/b/9/dataset_2b9fd47f-4851-4133-82a1-a282da670b45.dat' mapping.gff &&  cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/6/f/3/dataset_6f3d534c-e7ab-44ce-a1e3-2f5811b01b8f.dat' -A 0.1                  -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/b/e/6/dataset_be68a4ea-f732-46e9-b5a0-7e72b95b5407.dat\", \"/galaxy/server/database/objects/7/1/8/dataset_71815c45-2d2d-418c-9482-ad44b5980eb3.dat\", \"/galaxy/server/database/objects/7/b/b/dataset_7bb70f44-c495-4d85-9b46-9a3b6cdf4e65.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/2/f/f/dataset_2ff566fa-ccf8-471d-baf2-a957d2b8752e.dat\", \"/galaxy/server/database/objects/9/7/8/dataset_97893882-6274-49ac-bd2f-6be7a32a0fe9.dat\", \"/galaxy/server/database/objects/4/8/e/dataset_48ee256d-92e2-4eb6-a452-3597bca94e48.dat\"]}]]]' -l '{\"dataset_2ff566fa-ccf8-471d-baf2-a957d2b8752e.dat\": \"sailfish_quant.sf1.tab\", \"dataset_97893882-6274-49ac-bd2f-6be7a32a0fe9.dat\": \"sailfish_quant.sf2.tab\", \"dataset_48ee256d-92e2-4eb6-a452-3597bca94e48.dat\": \"sailfish_quant.sf3.tab\", \"dataset_be68a4ea-f732-46e9-b5a0-7e72b95b5407.dat\": \"sailfish_quant.sf4.tab\", \"dataset_71815c45-2d2d-418c-9482-ad44b5980eb3.dat\": \"sailfish_quant.sf5.tab\", \"dataset_7bb70f44-c495-4d85-9b46-9a3b6cdf4e65.dat\": \"sailfish_quant.sf6.tab\"}' -t 1 -i -y sailfish -x mapping.gff", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.1\", \"output_selector\": []}", "advanced_options": "{\"auto_mean_filter_off\": \"false\", \"esf\": \"\", \"fit_type\": \"1\", \"outlier_filter_off\": \"false\", \"outlier_replace_off\": \"false\", \"prefilter_conditional\": {\"__current_case__\": 1, \"prefilter\": \"\"}}", "tximport": "{\"__current_case__\": 0, \"mapping_format\": {\"__current_case__\": 0, \"gtf_file\": {\"values\": [{\"id\": 408, \"src\": \"hda\"}]}, \"mapping_format_selector\": \"gtf\"}, \"tximport_selector\": \"tximport\", \"txtype\": \"sailfish\"}", "header": "\"true\"", "batch_factors": null, "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 402, \"src\": \"hda\"}, {\"id\": 403, \"src\": \"hda\"}, {\"id\": 404, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 405, \"src\": \"hda\"}, {\"id\": 406, \"src\": \"hda\"}, {\"id\": 407, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "6089a711b6d06519", "src": "hda", "uuid": "2ff566fa-ccf8-471d-baf2-a957d2b8752e"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "6089a711b6d06519", "src": "hda", "uuid": "2ff566fa-ccf8-471d-baf2-a957d2b8752e"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "af4d79f1313c9cb1", "src": "hda", "uuid": "97893882-6274-49ac-bd2f-6be7a32a0fe9"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "db4e9a32a33340b6", "src": "hda", "uuid": "48ee256d-92e2-4eb6-a452-3597bca94e48"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "a4a8a93c13759cdd", "src": "hda", "uuid": "be68a4ea-f732-46e9-b5a0-7e72b95b5407"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "a4a8a93c13759cdd", "src": "hda", "uuid": "be68a4ea-f732-46e9-b5a0-7e72b95b5407"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "f6dae60d4879ede3", "src": "hda", "uuid": "71815c45-2d2d-418c-9482-ad44b5980eb3"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "b1e9c5984350e3f7", "src": "hda", "uuid": "7bb70f44-c495-4d85-9b46-9a3b6cdf4e65"}, "tximport|gtf_file": {"id": "1b132ed8496d82fe", "src": "hda", "uuid": "2b9fd47f-4851-4133-82a1-a282da670b45"}}, "outputs": {"deseq_out": {"id": "313b88a59ea27d1d", "src": "hda", "uuid": "6f3d534c-e7ab-44ce-a1e3-2f5811b01b8f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "primary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 10 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 8 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] GenomicFeatures_1.46.1      AnnotationDbi_1.56.1       \n [3] tximport_1.22.0             rjson_0.2.20               \n [5] gplots_3.1.1                RColorBrewer_1.1-2         \n [7] DESeq2_1.34.0               SummarizedExperiment_1.24.0\n [9] Biobase_2.54.0              MatrixGenerics_1.6.0       \n[11] matrixStats_0.61.0          GenomicRanges_1.46.0       \n[13] GenomeInfoDb_1.30.0         IRanges_2.28.0             \n[15] S4Vectors_0.32.0            BiocGenerics_0.40.0        \n[17] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] bitops_1.0-7             bit64_4.0.5              filelock_1.0.2          \n [4] progress_1.2.2           httr_1.4.2               utf8_1.2.2              \n [7] R6_2.5.1                 KernSmooth_2.23-20       DBI_1.1.1               \n[10] colorspace_2.0-2         tidyselect_1.1.1         prettyunits_1.1.1       \n[13] bit_4.0.4                curl_4.3.2               compiler_4.1.1          \n[16] xml2_1.3.3               DelayedArray_0.20.0      rtracklayer_1.54.0      \n[19] caTools_1.18.2           scales_1.1.1             genefilter_1.76.0       \n[22] rappdirs_0.3.3           stringr_1.4.0            digest_0.6.29           \n[25] Rsamtools_2.10.0         XVector_0.34.0           pkgconfig_2.0.3         \n[28] dbplyr_2.1.1             fastmap_1.1.0            rlang_0.4.12            \n[31] RSQLite_2.2.8            BiocIO_1.4.0             generics_0.1.1          \n[34] jsonlite_1.7.2           BiocParallel_1.28.0      gtools_3.9.2            \n[37] dplyr_1.0.7              RCurl_1.98-1.5           magrittr_2.0.1          \n[40] GenomeInfoDbData_1.2.7   Matrix_1.3-4             Rcpp_1.0.7              \n[43] munsell_0.5.0            fansi_0.4.2              lifecycle_1.0.1         \n[46] stringi_1.7.6            yaml_2.2.1               zlibbioc_1.40.0         \n[49] BiocFileCache_2.2.0      grid_4.1.1               blob_1.2.2              \n[52] parallel_4.1.1           crayon_1.4.2             lattice_0.20-45         \n[55] Biostrings_2.62.0        splines_4.1.1            annotate_1.72.0         \n[58] hms_1.1.1                KEGGREST_1.34.0          locfit_1.5-9.4          \n[61] pillar_1.6.4             geneplotter_1.72.0       biomaRt_2.50.0          \n[64] XML_3.99-0.8             glue_1.5.1               png_0.1-7               \n[67] vctrs_0.3.8              gtable_0.3.0             purrr_0.3.4             \n[70] assertthat_0.2.1         cachem_1.0.6             ggplot2_3.3.5           \n[73] xtable_1.8-4             restfulr_0.0.13          survival_3.2-13         \n[76] tibble_3.1.6             GenomicAlignments_1.30.0 memoise_2.0.1           \n[79] ellipsis_0.3.2          \n", "job_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nImport genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... OK\n'select()' returned 1:1 mapping between keys and columns\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "stderr": "\nWarning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nImport genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... OK\n'select()' returned 1:1 mapping between keys and columns\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "stdout": "\nprimary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 10 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 8 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] GenomicFeatures_1.46.1      AnnotationDbi_1.56.1       \n [3] tximport_1.22.0             rjson_0.2.20               \n [5] gplots_3.1.1                RColorBrewer_1.1-2         \n [7] DESeq2_1.34.0               SummarizedExperiment_1.24.0\n [9] Biobase_2.54.0              MatrixGenerics_1.6.0       \n[11] matrixStats_0.61.0          GenomicRanges_1.46.0       \n[13] GenomeInfoDb_1.30.0         IRanges_2.28.0             \n[15] S4Vectors_0.32.0            BiocGenerics_0.40.0        \n[17] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] bitops_1.0-7             bit64_4.0.5              filelock_1.0.2          \n [4] progress_1.2.2           httr_1.4.2               utf8_1.2.2              \n [7] R6_2.5.1                 KernSmooth_2.23-20       DBI_1.1.1               \n[10] colorspace_2.0-2         tidyselect_1.1.1         prettyunits_1.1.1       \n[13] bit_4.0.4                curl_4.3.2               compiler_4.1.1          \n[16] xml2_1.3.3               DelayedArray_0.20.0      rtracklayer_1.54.0      \n[19] caTools_1.18.2           scales_1.1.1             genefilter_1.76.0       \n[22] rappdirs_0.3.3           stringr_1.4.0            digest_0.6.29           \n[25] Rsamtools_2.10.0         XVector_0.34.0           pkgconfig_2.0.3         \n[28] dbplyr_2.1.1             fastmap_1.1.0            rlang_0.4.12            \n[31] RSQLite_2.2.8            BiocIO_1.4.0             generics_0.1.1          \n[34] jsonlite_1.7.2           BiocParallel_1.28.0      gtools_3.9.2            \n[37] dplyr_1.0.7              RCurl_1.98-1.5           magrittr_2.0.1          \n[40] GenomeInfoDbData_1.2.7   Matrix_1.3-4             Rcpp_1.0.7              \n[43] munsell_0.5.0            fansi_0.4.2              lifecycle_1.0.1         \n[46] stringi_1.7.6            yaml_2.2.1               zlibbioc_1.40.0         \n[49] BiocFileCache_2.2.0      grid_4.1.1               blob_1.2.2              \n[52] parallel_4.1.1           crayon_1.4.2             lattice_0.20-45         \n[55] Biostrings_2.62.0        splines_4.1.1            annotate_1.72.0         \n[58] hms_1.1.1                KEGGREST_1.34.0          locfit_1.5-9.4          \n[61] pillar_1.6.4             geneplotter_1.72.0       biomaRt_2.50.0          \n[64] XML_3.99-0.8             glue_1.5.1               png_0.1-7               \n[67] vctrs_0.3.8              gtable_0.3.0             purrr_0.3.4             \n[70] assertthat_0.2.1         cachem_1.0.6             ggplot2_3.3.5           \n[73] xtable_1.8-4             restfulr_0.0.13          survival_3.2-13         \n[76] tibble_3.1.6             GenomicAlignments_1.30.0 memoise_2.0.1           \n[79] ellipsis_0.3.2          \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "19 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "19.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:40:10", "plugin": "core", "name": "end_epoch", "raw_value": "1707662410.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:39:51", "plugin": "core", "name": "start_epoch", "raw_value": "1707662391.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.7+galaxy2-5", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.7+galaxy2", "test_index": 5, "time_seconds": 98.37384676933289, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "6f07e2e14aa2c7ef"}, {"src": "hda", "id": "0aed5da0d5e49adc"}, {"src": "hda", "id": "302a1b6409464ceb"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "85db5fcaa115ed57"}, {"src": "hda", "id": "8761896f2e39529e"}, {"src": "hda", "id": "713b75b61a9f83db"}], "tximport|txtype": "sailfish", "tximport|mapping_format|gtf_file": {"src": "hda", "id": "4ef704de20db227f"}, "tximport|mapping_format|mapping_format_selector": "gtf", "tximport|tximport_selector": "tximport", "output_options|output_selector": ""}, "job": {"model_class": "Job", "id": "d2dbeeda4172ea10", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:41:58.263053", "create_time": "2024-02-11T14:40:52.081722", "galaxy_version": "21.09", "command_version": "R version 4.1.1 (2021-08-10) -- \"Kick Things\", DESeq2 version 1.34.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.7+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-wzs6d", "command_line": "ln -s '/galaxy/server/database/objects/d/4/b/dataset_d4bca50d-633a-4d2c-bf80-6ba3b7499d27.dat' mapping.gff &&  cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/8/c/8/dataset_8c8031a0-9b92-4347-96f1-74b93a98fd0d.dat' -A 0.1                  -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/b/7/7/dataset_b778ea4b-24eb-44c4-98ca-3b0b3999f087.dat\", \"/galaxy/server/database/objects/1/f/b/dataset_1fb8e949-9a5f-4ae5-9fd0-aaf398e6d36a.dat\", \"/galaxy/server/database/objects/e/8/2/dataset_e826f20c-3917-4fd6-93a8-0d72a4b52952.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/9/1/e/dataset_91e4142a-f77e-4e67-858e-ae8629ab2a4d.dat\", \"/galaxy/server/database/objects/9/6/e/dataset_96e4d61a-4e8f-4483-a66a-bb12f1adcef5.dat\", \"/galaxy/server/database/objects/6/7/7/dataset_67764273-e90a-4b98-b82e-e0b97c219f2e.dat\"]}]]]' -l '{\"dataset_91e4142a-f77e-4e67-858e-ae8629ab2a4d.dat\": \"sailfish_quant.sf1.tab\", \"dataset_96e4d61a-4e8f-4483-a66a-bb12f1adcef5.dat\": \"sailfish_quant.sf2.tab\", \"dataset_67764273-e90a-4b98-b82e-e0b97c219f2e.dat\": \"sailfish_quant.sf3.tab\", \"dataset_b778ea4b-24eb-44c4-98ca-3b0b3999f087.dat\": \"sailfish_quant.sf4.tab\", \"dataset_1fb8e949-9a5f-4ae5-9fd0-aaf398e6d36a.dat\": \"sailfish_quant.sf5.tab\", \"dataset_e826f20c-3917-4fd6-93a8-0d72a4b52952.dat\": \"sailfish_quant.sf6.tab\"}' -t 1 -i -y sailfish -x mapping.gff", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.1\", \"output_selector\": []}", "advanced_options": "{\"auto_mean_filter_off\": \"false\", \"esf\": \"\", \"fit_type\": \"1\", \"outlier_filter_off\": \"false\", \"outlier_replace_off\": \"false\", \"prefilter_conditional\": {\"__current_case__\": 1, \"prefilter\": \"\"}}", "tximport": "{\"__current_case__\": 0, \"mapping_format\": {\"__current_case__\": 0, \"gtf_file\": {\"values\": [{\"id\": 416, \"src\": \"hda\"}]}, \"mapping_format_selector\": \"gtf\"}, \"tximport_selector\": \"tximport\", \"txtype\": \"sailfish\"}", "header": "\"true\"", "batch_factors": null, "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 410, \"src\": \"hda\"}, {\"id\": 411, \"src\": \"hda\"}, {\"id\": 412, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 413, \"src\": \"hda\"}, {\"id\": 414, \"src\": \"hda\"}, {\"id\": 415, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "6f07e2e14aa2c7ef", "src": "hda", "uuid": "91e4142a-f77e-4e67-858e-ae8629ab2a4d"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "6f07e2e14aa2c7ef", "src": "hda", "uuid": "91e4142a-f77e-4e67-858e-ae8629ab2a4d"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "0aed5da0d5e49adc", "src": "hda", "uuid": "96e4d61a-4e8f-4483-a66a-bb12f1adcef5"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "302a1b6409464ceb", "src": "hda", "uuid": "67764273-e90a-4b98-b82e-e0b97c219f2e"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "713b75b61a9f83db", "src": "hda", "uuid": "e826f20c-3917-4fd6-93a8-0d72a4b52952"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "85db5fcaa115ed57", "src": "hda", "uuid": "b778ea4b-24eb-44c4-98ca-3b0b3999f087"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "85db5fcaa115ed57", "src": "hda", "uuid": "b778ea4b-24eb-44c4-98ca-3b0b3999f087"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "8761896f2e39529e", "src": "hda", "uuid": "1fb8e949-9a5f-4ae5-9fd0-aaf398e6d36a"}, "tximport|gtf_file": {"id": "4ef704de20db227f", "src": "hda", "uuid": "d4bca50d-633a-4d2c-bf80-6ba3b7499d27"}}, "outputs": {"deseq_out": {"id": "44c2dcddb7c46874", "src": "hda", "uuid": "8c8031a0-9b92-4347-96f1-74b93a98fd0d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "primary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 11 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 9 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] GenomicFeatures_1.46.1      AnnotationDbi_1.56.1       \n [3] tximport_1.22.0             rjson_0.2.20               \n [5] gplots_3.1.1                RColorBrewer_1.1-2         \n [7] DESeq2_1.34.0               SummarizedExperiment_1.24.0\n [9] Biobase_2.54.0              MatrixGenerics_1.6.0       \n[11] matrixStats_0.61.0          GenomicRanges_1.46.0       \n[13] GenomeInfoDb_1.30.0         IRanges_2.28.0             \n[15] S4Vectors_0.32.0            BiocGenerics_0.40.0        \n[17] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] bitops_1.0-7             bit64_4.0.5              filelock_1.0.2          \n [4] progress_1.2.2           httr_1.4.2               utf8_1.2.2              \n [7] R6_2.5.1                 KernSmooth_2.23-20       DBI_1.1.1               \n[10] colorspace_2.0-2         tidyselect_1.1.1         prettyunits_1.1.1       \n[13] bit_4.0.4                curl_4.3.2               compiler_4.1.1          \n[16] xml2_1.3.3               DelayedArray_0.20.0      rtracklayer_1.54.0      \n[19] caTools_1.18.2           scales_1.1.1             genefilter_1.76.0       \n[22] rappdirs_0.3.3           stringr_1.4.0            digest_0.6.29           \n[25] Rsamtools_2.10.0         XVector_0.34.0           pkgconfig_2.0.3         \n[28] dbplyr_2.1.1             fastmap_1.1.0            rlang_0.4.12            \n[31] RSQLite_2.2.8            BiocIO_1.4.0             generics_0.1.1          \n[34] jsonlite_1.7.2           BiocParallel_1.28.0      gtools_3.9.2            \n[37] dplyr_1.0.7              RCurl_1.98-1.5           magrittr_2.0.1          \n[40] GenomeInfoDbData_1.2.7   Matrix_1.3-4             Rcpp_1.0.7              \n[43] munsell_0.5.0            fansi_0.4.2              lifecycle_1.0.1         \n[46] stringi_1.7.6            yaml_2.2.1               zlibbioc_1.40.0         \n[49] BiocFileCache_2.2.0      grid_4.1.1               blob_1.2.2              \n[52] parallel_4.1.1           crayon_1.4.2             lattice_0.20-45         \n[55] Biostrings_2.62.0        splines_4.1.1            annotate_1.72.0         \n[58] hms_1.1.1                KEGGREST_1.34.0          locfit_1.5-9.4          \n[61] pillar_1.6.4             geneplotter_1.72.0       biomaRt_2.50.0          \n[64] XML_3.99-0.8             glue_1.5.1               png_0.1-7               \n[67] vctrs_0.3.8              gtable_0.3.0             purrr_0.3.4             \n[70] assertthat_0.2.1         cachem_1.0.6             ggplot2_3.3.5           \n[73] xtable_1.8-4             restfulr_0.0.13          survival_3.2-13         \n[76] tibble_3.1.6             GenomicAlignments_1.30.0 memoise_2.0.1           \n[79] ellipsis_0.3.2          \n", "job_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nImport genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... OK\n'select()' returned 1:1 mapping between keys and columns\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nWarning message:\nIn .get_cds_IDX(mcols0$type, mcols0$phase) :\n  The \"phase\" metadata column contains non-NA values for features of type\n  stop_codon. This information was ignored.\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "stderr": "\nWarning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nImport genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... OK\n'select()' returned 1:1 mapping between keys and columns\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nWarning message:\nIn .get_cds_IDX(mcols0$type, mcols0$phase) :\n  The \"phase\" metadata column contains non-NA values for features of type\n  stop_codon. This information was ignored.\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "stdout": "\nprimary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 11 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 9 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] GenomicFeatures_1.46.1      AnnotationDbi_1.56.1       \n [3] tximport_1.22.0             rjson_0.2.20               \n [5] gplots_3.1.1                RColorBrewer_1.1-2         \n [7] DESeq2_1.34.0               SummarizedExperiment_1.24.0\n [9] Biobase_2.54.0              MatrixGenerics_1.6.0       \n[11] matrixStats_0.61.0          GenomicRanges_1.46.0       \n[13] GenomeInfoDb_1.30.0         IRanges_2.28.0             \n[15] S4Vectors_0.32.0            BiocGenerics_0.40.0        \n[17] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] bitops_1.0-7             bit64_4.0.5              filelock_1.0.2          \n [4] progress_1.2.2           httr_1.4.2               utf8_1.2.2              \n [7] R6_2.5.1                 KernSmooth_2.23-20       DBI_1.1.1               \n[10] colorspace_2.0-2         tidyselect_1.1.1         prettyunits_1.1.1       \n[13] bit_4.0.4                curl_4.3.2               compiler_4.1.1          \n[16] xml2_1.3.3               DelayedArray_0.20.0      rtracklayer_1.54.0      \n[19] caTools_1.18.2           scales_1.1.1             genefilter_1.76.0       \n[22] rappdirs_0.3.3           stringr_1.4.0            digest_0.6.29           \n[25] Rsamtools_2.10.0         XVector_0.34.0           pkgconfig_2.0.3         \n[28] dbplyr_2.1.1             fastmap_1.1.0            rlang_0.4.12            \n[31] RSQLite_2.2.8            BiocIO_1.4.0             generics_0.1.1          \n[34] jsonlite_1.7.2           BiocParallel_1.28.0      gtools_3.9.2            \n[37] dplyr_1.0.7              RCurl_1.98-1.5           magrittr_2.0.1          \n[40] GenomeInfoDbData_1.2.7   Matrix_1.3-4             Rcpp_1.0.7              \n[43] munsell_0.5.0            fansi_0.4.2              lifecycle_1.0.1         \n[46] stringi_1.7.6            yaml_2.2.1               zlibbioc_1.40.0         \n[49] BiocFileCache_2.2.0      grid_4.1.1               blob_1.2.2              \n[52] parallel_4.1.1           crayon_1.4.2             lattice_0.20-45         \n[55] Biostrings_2.62.0        splines_4.1.1            annotate_1.72.0         \n[58] hms_1.1.1                KEGGREST_1.34.0          locfit_1.5-9.4          \n[61] pillar_1.6.4             geneplotter_1.72.0       biomaRt_2.50.0          \n[64] XML_3.99-0.8             glue_1.5.1               png_0.1-7               \n[67] vctrs_0.3.8              gtable_0.3.0             purrr_0.3.4             \n[70] assertthat_0.2.1         cachem_1.0.6             ggplot2_3.3.5           \n[73] xtable_1.8-4             restfulr_0.0.13          survival_3.2-13         \n[76] tibble_3.1.6             GenomicAlignments_1.30.0 memoise_2.0.1           \n[79] ellipsis_0.3.2          \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "20 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "20.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:41:49", "plugin": "core", "name": "end_epoch", "raw_value": "1707662509.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:41:29", "plugin": "core", "name": "start_epoch", "raw_value": "1707662489.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.7+galaxy2-6", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.7+galaxy2", "test_index": 6, "time_seconds": 96.53533673286438, "inputs": {"select_data|countsFile": {"src": "hdca", "id": "f14b76c8f0a04cc0"}, "select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|groups": "primary:treated", "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|groups": "primary:untreated", "select_data|how": "group_tags", "tximport|txtype": "sailfish", "tximport|mapping_format|tabular_file": {"src": "hda", "id": "c974b6e39c855ac2"}, "tximport|mapping_format|mapping_format_selector": "tabular", "tximport|tximport_selector": "tximport", "output_options|output_selector": ""}, "job": {"model_class": "Job", "id": "e1fd5881b4f55f87", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:43:34.801942", "create_time": "2024-02-11T14:42:30.485497", "galaxy_version": "21.09", "command_version": "R version 4.1.1 (2021-08-10) -- \"Kick Things\", DESeq2 version 1.34.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.7+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-mdt9h", "command_line": "ln -s '/galaxy/server/database/objects/2/a/a/dataset_2aae14f9-66dc-483b-9391-1efaf686b831.dat' mapping.txt &&  cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/8/4/b/dataset_84b96837-ffa6-4cdf-8ca1-e27cb2e411b4.dat' -A 0.1                  -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/0/8/b/dataset_08b34fff-531e-4822-9f4e-833719df36ea.dat\", \"/galaxy/server/database/objects/7/0/9/dataset_709ff01b-5f2e-4188-b6e2-8738b1de0d97.dat\", \"/galaxy/server/database/objects/9/0/a/dataset_90aa9f97-afe2-4358-ac88-7d600affa9ed.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/2/8/5/dataset_2856a7c3-5ce8-4f9e-8414-9c123edf74de.dat\", \"/galaxy/server/database/objects/1/f/5/dataset_1f52617d-55a7-4479-b979-ad4b23293a7b.dat\", \"/galaxy/server/database/objects/0/8/e/dataset_08e16f1d-8c1f-4655-a0c4-ae816722b4d0.dat\"]}]]]' -l '{\"dataset_2856a7c3-5ce8-4f9e-8414-9c123edf74de.dat\": \"1\", \"dataset_1f52617d-55a7-4479-b979-ad4b23293a7b.dat\": \"2\", \"dataset_08e16f1d-8c1f-4655-a0c4-ae816722b4d0.dat\": \"3\", \"dataset_08b34fff-531e-4822-9f4e-833719df36ea.dat\": \"4\", \"dataset_709ff01b-5f2e-4188-b6e2-8738b1de0d97.dat\": \"5\", \"dataset_90aa9f97-afe2-4358-ac88-7d600affa9ed.dat\": \"6\"}' -t 1 -i -y sailfish -x mapping.txt", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.1\", \"output_selector\": []}", "advanced_options": "{\"auto_mean_filter_off\": \"false\", \"esf\": \"\", \"fit_type\": \"1\", \"outlier_filter_off\": \"false\", \"outlier_replace_off\": \"false\", \"prefilter_conditional\": {\"__current_case__\": 1, \"prefilter\": \"\"}}", "tximport": "{\"__current_case__\": 0, \"mapping_format\": {\"__current_case__\": 1, \"mapping_format_selector\": \"tabular\", \"tabular_file\": {\"values\": [{\"id\": 424, \"src\": \"hda\"}]}}, \"tximport_selector\": \"tximport\", \"txtype\": \"sailfish\"}", "header": "\"true\"", "batch_factors": null, "select_data": "{\"__current_case__\": 0, \"countsFile\": {\"values\": [{\"id\": 16, \"src\": \"hdca\"}]}, \"how\": \"group_tags\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"factorLevel\": \"Treated\", \"groups\": [\"primary:treated\"]}, {\"__index__\": 1, \"factorLevel\": \"Untreated\", \"groups\": [\"primary:untreated\"]}]}]}"}, "inputs": {"countsFile1": {"id": "3fb823f645ed3d28", "src": "hda", "uuid": "2856a7c3-5ce8-4f9e-8414-9c123edf74de"}, "countsFile2": {"id": "9089b749e3782abf", "src": "hda", "uuid": "1f52617d-55a7-4479-b979-ad4b23293a7b"}, "countsFile3": {"id": "1a2c76ad1a1010ce", "src": "hda", "uuid": "08e16f1d-8c1f-4655-a0c4-ae816722b4d0"}, "countsFile4": {"id": "c5a67e66a93e2ff2", "src": "hda", "uuid": "08b34fff-531e-4822-9f4e-833719df36ea"}, "countsFile5": {"id": "0eda6455efc1fed9", "src": "hda", "uuid": "709ff01b-5f2e-4188-b6e2-8738b1de0d97"}, "countsFile6": {"id": "5d98f5a46e98e2ab", "src": "hda", "uuid": "90aa9f97-afe2-4358-ac88-7d600affa9ed"}, "tximport|tabular_file": {"id": "c974b6e39c855ac2", "src": "hda", "uuid": "2aae14f9-66dc-483b-9391-1efaf686b831"}}, "outputs": {"deseq_out": {"id": "d80f5897ff9a5250", "src": "hda", "uuid": "84b96837-ffa6-4cdf-8ca1-e27cb2e411b4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "primary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n  Treatment\n4 Untreated\n5 Untreated\n6 Untreated\n1   Treated\n2   Treated\n3   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 10 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 8 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] tximport_1.22.0             rjson_0.2.20               \n [3] gplots_3.1.1                RColorBrewer_1.1-2         \n [5] DESeq2_1.34.0               SummarizedExperiment_1.24.0\n [7] Biobase_2.54.0              MatrixGenerics_1.6.0       \n [9] matrixStats_0.61.0          GenomicRanges_1.46.0       \n[11] GenomeInfoDb_1.30.0         IRanges_2.28.0             \n[13] S4Vectors_0.32.0            BiocGenerics_0.40.0        \n[15] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45       \n [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0     \n [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              \n[10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         \n[13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          \n[16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          \n[19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    \n[22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         \n[25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       \n[28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          \n[31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           \n[34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          \n[37] grid_4.1.1             jsonlite_1.7.2         xtable_1.8-4          \n[40] gtable_0.3.0           lifecycle_1.0.1        DBI_1.1.1             \n[43] magrittr_2.0.1         scales_1.1.1           KernSmooth_2.23-20    \n[46] cachem_1.0.6           XVector_0.34.0         genefilter_1.76.0     \n[49] ellipsis_0.3.2         vctrs_0.3.8            generics_0.1.1        \n[52] bit64_4.0.5            glue_1.5.1             purrr_0.3.4           \n[55] parallel_4.1.1         fastmap_1.1.0          survival_3.2-13       \n[58] AnnotationDbi_1.56.1   colorspace_2.0-2       caTools_1.18.2        \n[61] memoise_2.0.1         \n", "job_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "stderr": "\nWarning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "stdout": "\nprimary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n  Treatment\n4 Untreated\n5 Untreated\n6 Untreated\n1   Treated\n2   Treated\n3   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 10 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 8 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] tximport_1.22.0             rjson_0.2.20               \n [3] gplots_3.1.1                RColorBrewer_1.1-2         \n [5] DESeq2_1.34.0               SummarizedExperiment_1.24.0\n [7] Biobase_2.54.0              MatrixGenerics_1.6.0       \n [9] matrixStats_0.61.0          GenomicRanges_1.46.0       \n[11] GenomeInfoDb_1.30.0         IRanges_2.28.0             \n[13] S4Vectors_0.32.0            BiocGenerics_0.40.0        \n[15] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45       \n [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0     \n [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              \n[10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         \n[13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          \n[16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          \n[19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    \n[22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         \n[25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       \n[28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          \n[31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           \n[34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          \n[37] grid_4.1.1             jsonlite_1.7.2         xtable_1.8-4          \n[40] gtable_0.3.0           lifecycle_1.0.1        DBI_1.1.1             \n[43] magrittr_2.0.1         scales_1.1.1           KernSmooth_2.23-20    \n[46] cachem_1.0.6           XVector_0.34.0         genefilter_1.76.0     \n[49] ellipsis_0.3.2         vctrs_0.3.8            generics_0.1.1        \n[52] bit64_4.0.5            glue_1.5.1             purrr_0.3.4           \n[55] parallel_4.1.1         fastmap_1.1.0          survival_3.2-13       \n[58] AnnotationDbi_1.56.1   colorspace_2.0-2       caTools_1.18.2        \n[61] memoise_2.0.1         \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "17 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "17.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:43:25", "plugin": "core", "name": "end_epoch", "raw_value": "1707662605.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:43:08", "plugin": "core", "name": "start_epoch", "raw_value": "1707662588.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.7+galaxy2-7", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.7+galaxy2", "test_index": 7, "time_seconds": 90.82296013832092, "inputs": {"select_data|countsFile": {"src": "hdca", "id": "ba5b953c739aadc3"}, "select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|groups": "primary:treated", "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|groups": "primary:untreated", "select_data|how": "group_tags", "tximport|txtype": "sailfish", "tximport|mapping_format|tabular_file": {"src": "hda", "id": "45bc279bc6c5e000"}, "tximport|mapping_format|mapping_format_selector": "tabular", "tximport|tximport_selector": "tximport", "output_options|output_selector": "many_contrasts"}, "job": {"model_class": "Job", "id": "2f759826027575c8", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:45:06.092684", "create_time": "2024-02-11T14:44:07.946987", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.7+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-nrjbf", "command_line": "ln -s '/galaxy/server/database/objects/e/4/3/dataset_e4387916-5013-4942-9f1c-a090754d5f16.dat' mapping.txt &&  cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o 'XXXX' -A 0.1                  -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/6/c/e/dataset_6ce6a984-f8ad-4f86-a10d-df4624e5e13e.dat\", \"/galaxy/server/database/objects/e/2/b/dataset_e2b512be-af3c-4643-8026-ba2f905268cb.dat\", \"/galaxy/server/database/objects/b/0/7/dataset_b07c951a-b842-4a2a-8895-b5af395cea54.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/2/6/2/dataset_262db847-7962-4d78-bbe7-db10aae19f36.dat\", \"/galaxy/server/database/objects/f/b/7/dataset_fb784a83-263e-4340-a9d7-aa360f0a8c9a.dat\", \"/galaxy/server/database/objects/0/7/3/dataset_0734cdb6-cf1c-4f5b-bc34-bf5f584a8a38.dat\"]}]]]' -l '{\"dataset_262db847-7962-4d78-bbe7-db10aae19f36.dat\": \"1\", \"dataset_fb784a83-263e-4340-a9d7-aa360f0a8c9a.dat\": \"2\", \"dataset_0734cdb6-cf1c-4f5b-bc34-bf5f584a8a38.dat\": \"3\", \"dataset_6ce6a984-f8ad-4f86-a10d-df4624e5e13e.dat\": \"4\", \"dataset_e2b512be-af3c-4643-8026-ba2f905268cb.dat\": \"5\", \"dataset_b07c951a-b842-4a2a-8895-b5af395cea54.dat\": \"6\"}' -t 1 -m -i -y sailfish -x mapping.txt", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.1\", \"output_selector\": \"many_contrasts\"}", "advanced_options": "{\"auto_mean_filter_off\": \"false\", \"esf\": \"\", \"fit_type\": \"1\", \"outlier_filter_off\": \"false\", \"outlier_replace_off\": \"false\", \"prefilter_conditional\": {\"__current_case__\": 1, \"prefilter\": \"\"}}", "tximport": "{\"__current_case__\": 0, \"mapping_format\": {\"__current_case__\": 1, \"mapping_format_selector\": \"tabular\", \"tabular_file\": {\"values\": [{\"id\": 432, \"src\": \"hda\"}]}}, \"tximport_selector\": \"tximport\", \"txtype\": \"sailfish\"}", "header": "\"true\"", "batch_factors": null, "select_data": "{\"__current_case__\": 0, \"countsFile\": {\"values\": [{\"id\": 17, \"src\": \"hdca\"}]}, \"how\": \"group_tags\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"factorLevel\": \"Treated\", \"groups\": [\"primary:treated\"]}, {\"__index__\": 1, \"factorLevel\": \"Untreated\", \"groups\": [\"primary:untreated\"]}]}]}"}, "inputs": {"countsFile1": {"id": "08935c2e602fdbdf", "src": "hda", "uuid": "262db847-7962-4d78-bbe7-db10aae19f36"}, "countsFile2": {"id": "a2a3cf0b7c89d1bc", "src": "hda", "uuid": "fb784a83-263e-4340-a9d7-aa360f0a8c9a"}, "countsFile3": {"id": "db338a941533af04", "src": "hda", "uuid": "0734cdb6-cf1c-4f5b-bc34-bf5f584a8a38"}, "countsFile4": {"id": "0642f0ed3783c0a3", "src": "hda", "uuid": "6ce6a984-f8ad-4f86-a10d-df4624e5e13e"}, "countsFile5": {"id": "9895bd680fefe78e", "src": "hda", "uuid": "e2b512be-af3c-4643-8026-ba2f905268cb"}, "countsFile6": {"id": "f6dc1b24b5fcb56e", "src": "hda", "uuid": "b07c951a-b842-4a2a-8895-b5af395cea54"}, "tximport|tabular_file": {"id": "45bc279bc6c5e000", "src": "hda", "uuid": "e4387916-5013-4942-9f1c-a090754d5f16"}}, "outputs": {"__new_primary_file_split_output|Treatment_Treated_vs_Untreated__": {"id": "0dce83b45ef20603", "src": "hda", "uuid": "3184de4b-cf5b-41ba-9b0d-9ca7d66f447f"}}, "output_collections": {"split_output": {"id": "12e5594e6f15aafa", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "primary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n  Treatment\n4 Untreated\n5 Untreated\n6 Untreated\n1   Treated\n2   Treated\n3   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 10 genes\nusing disperion fit type: parametric \nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] tximport_1.22.0             rjson_0.2.20               \n [3] gplots_3.1.1                RColorBrewer_1.1-2         \n [5] DESeq2_1.34.0               SummarizedExperiment_1.24.0\n [7] Biobase_2.54.0              MatrixGenerics_1.6.0       \n [9] matrixStats_0.61.0          GenomicRanges_1.46.0       \n[11] GenomeInfoDb_1.30.0         IRanges_2.28.0             \n[13] S4Vectors_0.32.0            BiocGenerics_0.40.0        \n[15] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45       \n [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0     \n [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              \n[10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         \n[13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          \n[16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          \n[19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    \n[22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         \n[25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       \n[28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          \n[31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           \n[34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          \n[37] grid_4.1.1             jsonlite_1.7.2         xtable_1.8-4          \n[40] gtable_0.3.0           lifecycle_1.0.1        DBI_1.1.1             \n[43] magrittr_2.0.1         scales_1.1.1           KernSmooth_2.23-20    \n[46] cachem_1.0.6           XVector_0.34.0         genefilter_1.76.0     \n[49] ellipsis_0.3.2         vctrs_0.3.8            generics_0.1.1        \n[52] bit64_4.0.5            glue_1.5.1             purrr_0.3.4           \n[55] parallel_4.1.1         fastmap_1.1.0          survival_3.2-13       \n[58] AnnotationDbi_1.56.1   colorspace_2.0-2       caTools_1.18.2        \n[61] memoise_2.0.1         \n", "job_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "stderr": "\nWarning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "stdout": "\nprimary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n  Treatment\n4 Untreated\n5 Untreated\n6 Untreated\n1   Treated\n2   Treated\n3   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 10 genes\nusing disperion fit type: parametric \nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] tximport_1.22.0             rjson_0.2.20               \n [3] gplots_3.1.1                RColorBrewer_1.1-2         \n [5] DESeq2_1.34.0               SummarizedExperiment_1.24.0\n [7] Biobase_2.54.0              MatrixGenerics_1.6.0       \n [9] matrixStats_0.61.0          GenomicRanges_1.46.0       \n[11] GenomeInfoDb_1.30.0         IRanges_2.28.0             \n[13] S4Vectors_0.32.0            BiocGenerics_0.40.0        \n[15] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.7             locfit_1.5-9.4         lattice_0.20-45       \n [4] gtools_3.9.2           png_0.1-7              Biostrings_2.62.0     \n [7] assertthat_0.2.1       utf8_1.2.2             R6_2.5.1              \n[10] RSQLite_2.2.8          httr_1.4.2             ggplot2_3.3.5         \n[13] pillar_1.6.4           zlibbioc_1.40.0        rlang_0.4.12          \n[16] annotate_1.72.0        blob_1.2.2             Matrix_1.3-4          \n[19] splines_4.1.1          BiocParallel_1.28.0    geneplotter_1.72.0    \n[22] RCurl_1.98-1.5         bit_4.0.4              munsell_0.5.0         \n[25] DelayedArray_0.20.0    compiler_4.1.1         pkgconfig_2.0.3       \n[28] tidyselect_1.1.1       KEGGREST_1.34.0        tibble_3.1.6          \n[31] GenomeInfoDbData_1.2.7 XML_3.99-0.8           fansi_0.4.2           \n[34] crayon_1.4.2           dplyr_1.0.7            bitops_1.0-7          \n[37] grid_4.1.1             jsonlite_1.7.2         xtable_1.8-4          \n[40] gtable_0.3.0           lifecycle_1.0.1        DBI_1.1.1             \n[43] magrittr_2.0.1         scales_1.1.1           KernSmooth_2.23-20    \n[46] cachem_1.0.6           XVector_0.34.0         genefilter_1.76.0     \n[49] ellipsis_0.3.2         vctrs_0.3.8            generics_0.1.1        \n[52] bit64_4.0.5            glue_1.5.1             purrr_0.3.4           \n[55] parallel_4.1.1         fastmap_1.1.0          survival_3.2-13       \n[58] AnnotationDbi_1.56.1   colorspace_2.0-2       caTools_1.18.2        \n[61] memoise_2.0.1         \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "17 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "17.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:45:02", "plugin": "core", "name": "end_epoch", "raw_value": "1707662702.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:44:45", "plugin": "core", "name": "start_epoch", "raw_value": "1707662685.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.7+galaxy2-8", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.7+galaxy2", "test_index": 8, "time_seconds": 97.31217789649963, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "6dafb009830cf9b8"}, {"src": "hda", "id": "d0d47c845f6cd9d4"}, {"src": "hda", "id": "cd26664da3bdbccc"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "b407bd62c21b2ec5"}, {"src": "hda", "id": "83ede0a49b11b565"}, {"src": "hda", "id": "7d9373cdfc98d28c"}], "tximport|txtype": "sailfish", "tximport|mapping_format|gtf_file": {"src": "hda", "id": "007eb6ad2301b333"}, "tximport|mapping_format|mapping_format_selector": "gtf", "tximport|tximport_selector": "tximport", "output_options|output_selector": "", "output_options|alpha_ma": "0.05"}, "job": {"model_class": "Job", "id": "b90b3c139169de1c", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:46:43.213201", "create_time": "2024-02-11T14:45:37.424645", "galaxy_version": "21.09", "command_version": "R version 4.1.1 (2021-08-10) -- \"Kick Things\", DESeq2 version 1.34.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.7+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-pl27j", "command_line": "ln -s '/galaxy/server/database/objects/7/2/4/dataset_7249d5c5-a704-4dc8-a01e-ae920e20e327.dat' mapping.gff &&  cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/7/5/4/dataset_7543e92e-0085-45de-ac76-7fc62f7b42d6.dat' -A 0.05                  -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/2/e/3/dataset_2e381bd7-0765-4cca-9658-4c9d82cbdf9b.dat\", \"/galaxy/server/database/objects/b/0/e/dataset_b0e9ea5a-c7ea-4fec-9ced-0263e2a58c68.dat\", \"/galaxy/server/database/objects/e/3/3/dataset_e33f317a-0385-4173-a585-515589bcae68.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/c/e/c/dataset_cec9a2c6-e81c-48f8-b196-9100caf2fddd.dat\", \"/galaxy/server/database/objects/d/6/8/dataset_d68b604c-20b8-488f-88b4-821832a8ee40.dat\", \"/galaxy/server/database/objects/3/d/4/dataset_3d49de70-641f-4cb9-8f00-4bdbcf0cec5b.dat\"]}]]]' -l '{\"dataset_cec9a2c6-e81c-48f8-b196-9100caf2fddd.dat\": \"sailfish_quant.sf1.tab\", \"dataset_d68b604c-20b8-488f-88b4-821832a8ee40.dat\": \"sailfish_quant.sf2.tab\", \"dataset_3d49de70-641f-4cb9-8f00-4bdbcf0cec5b.dat\": \"sailfish_quant.sf3.tab\", \"dataset_2e381bd7-0765-4cca-9658-4c9d82cbdf9b.dat\": \"sailfish_quant.sf4.tab\", \"dataset_b0e9ea5a-c7ea-4fec-9ced-0263e2a58c68.dat\": \"sailfish_quant.sf5.tab\", \"dataset_e33f317a-0385-4173-a585-515589bcae68.dat\": \"sailfish_quant.sf6.tab\"}' -t 1 -i -y sailfish -x mapping.gff", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.05\", \"output_selector\": []}", "advanced_options": "{\"auto_mean_filter_off\": \"false\", \"esf\": \"\", \"fit_type\": \"1\", \"outlier_filter_off\": \"false\", \"outlier_replace_off\": \"false\", \"prefilter_conditional\": {\"__current_case__\": 1, \"prefilter\": \"\"}}", "tximport": "{\"__current_case__\": 0, \"mapping_format\": {\"__current_case__\": 0, \"gtf_file\": {\"values\": [{\"id\": 440, \"src\": \"hda\"}]}, \"mapping_format_selector\": \"gtf\"}, \"tximport_selector\": \"tximport\", \"txtype\": \"sailfish\"}", "header": "\"true\"", "batch_factors": null, "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 434, \"src\": \"hda\"}, {\"id\": 435, \"src\": \"hda\"}, {\"id\": 436, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 437, \"src\": \"hda\"}, {\"id\": 438, \"src\": \"hda\"}, {\"id\": 439, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "6dafb009830cf9b8", "src": "hda", "uuid": "cec9a2c6-e81c-48f8-b196-9100caf2fddd"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "6dafb009830cf9b8", "src": "hda", "uuid": "cec9a2c6-e81c-48f8-b196-9100caf2fddd"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "d0d47c845f6cd9d4", "src": "hda", "uuid": "d68b604c-20b8-488f-88b4-821832a8ee40"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "cd26664da3bdbccc", "src": "hda", "uuid": "3d49de70-641f-4cb9-8f00-4bdbcf0cec5b"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "b407bd62c21b2ec5", "src": "hda", "uuid": "2e381bd7-0765-4cca-9658-4c9d82cbdf9b"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "b407bd62c21b2ec5", "src": "hda", "uuid": "2e381bd7-0765-4cca-9658-4c9d82cbdf9b"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "83ede0a49b11b565", "src": "hda", "uuid": "b0e9ea5a-c7ea-4fec-9ced-0263e2a58c68"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "7d9373cdfc98d28c", "src": "hda", "uuid": "e33f317a-0385-4173-a585-515589bcae68"}, "tximport|gtf_file": {"id": "007eb6ad2301b333", "src": "hda", "uuid": "7249d5c5-a704-4dc8-a01e-ae920e20e327"}}, "outputs": {"deseq_out": {"id": "42ab6b9a30bf119b", "src": "hda", "uuid": "7543e92e-0085-45de-ac76-7fc62f7b42d6"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "primary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 11 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 9 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] GenomicFeatures_1.46.1      AnnotationDbi_1.56.1       \n [3] tximport_1.22.0             rjson_0.2.20               \n [5] gplots_3.1.1                RColorBrewer_1.1-2         \n [7] DESeq2_1.34.0               SummarizedExperiment_1.24.0\n [9] Biobase_2.54.0              MatrixGenerics_1.6.0       \n[11] matrixStats_0.61.0          GenomicRanges_1.46.0       \n[13] GenomeInfoDb_1.30.0         IRanges_2.28.0             \n[15] S4Vectors_0.32.0            BiocGenerics_0.40.0        \n[17] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] bitops_1.0-7             bit64_4.0.5              filelock_1.0.2          \n [4] progress_1.2.2           httr_1.4.2               utf8_1.2.2              \n [7] R6_2.5.1                 KernSmooth_2.23-20       DBI_1.1.1               \n[10] colorspace_2.0-2         tidyselect_1.1.1         prettyunits_1.1.1       \n[13] bit_4.0.4                curl_4.3.2               compiler_4.1.1          \n[16] xml2_1.3.3               DelayedArray_0.20.0      rtracklayer_1.54.0      \n[19] caTools_1.18.2           scales_1.1.1             genefilter_1.76.0       \n[22] rappdirs_0.3.3           stringr_1.4.0            digest_0.6.29           \n[25] Rsamtools_2.10.0         XVector_0.34.0           pkgconfig_2.0.3         \n[28] dbplyr_2.1.1             fastmap_1.1.0            rlang_0.4.12            \n[31] RSQLite_2.2.8            BiocIO_1.4.0             generics_0.1.1          \n[34] jsonlite_1.7.2           BiocParallel_1.28.0      gtools_3.9.2            \n[37] dplyr_1.0.7              RCurl_1.98-1.5           magrittr_2.0.1          \n[40] GenomeInfoDbData_1.2.7   Matrix_1.3-4             Rcpp_1.0.7              \n[43] munsell_0.5.0            fansi_0.4.2              lifecycle_1.0.1         \n[46] stringi_1.7.6            yaml_2.2.1               zlibbioc_1.40.0         \n[49] BiocFileCache_2.2.0      grid_4.1.1               blob_1.2.2              \n[52] parallel_4.1.1           crayon_1.4.2             lattice_0.20-45         \n[55] Biostrings_2.62.0        splines_4.1.1            annotate_1.72.0         \n[58] hms_1.1.1                KEGGREST_1.34.0          locfit_1.5-9.4          \n[61] pillar_1.6.4             geneplotter_1.72.0       biomaRt_2.50.0          \n[64] XML_3.99-0.8             glue_1.5.1               png_0.1-7               \n[67] vctrs_0.3.8              gtable_0.3.0             purrr_0.3.4             \n[70] assertthat_0.2.1         cachem_1.0.6             ggplot2_3.3.5           \n[73] xtable_1.8-4             restfulr_0.0.13          survival_3.2-13         \n[76] tibble_3.1.6             GenomicAlignments_1.30.0 memoise_2.0.1           \n[79] ellipsis_0.3.2          \n", "job_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nImport genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... OK\n'select()' returned 1:1 mapping between keys and columns\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nWarning message:\nIn .get_cds_IDX(mcols0$type, mcols0$phase) :\n  The \"phase\" metadata column contains non-NA values for features of type\n  stop_codon. This information was ignored.\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "stderr": "\nWarning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nImport genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... OK\n'select()' returned 1:1 mapping between keys and columns\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nWarning message:\nIn .get_cds_IDX(mcols0$type, mcols0$phase) :\n  The \"phase\" metadata column contains non-NA values for features of type\n  stop_codon. This information was ignored.\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "stdout": "\nprimary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 11 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 9 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] GenomicFeatures_1.46.1      AnnotationDbi_1.56.1       \n [3] tximport_1.22.0             rjson_0.2.20               \n [5] gplots_3.1.1                RColorBrewer_1.1-2         \n [7] DESeq2_1.34.0               SummarizedExperiment_1.24.0\n [9] Biobase_2.54.0              MatrixGenerics_1.6.0       \n[11] matrixStats_0.61.0          GenomicRanges_1.46.0       \n[13] GenomeInfoDb_1.30.0         IRanges_2.28.0             \n[15] S4Vectors_0.32.0            BiocGenerics_0.40.0        \n[17] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] bitops_1.0-7             bit64_4.0.5              filelock_1.0.2          \n [4] progress_1.2.2           httr_1.4.2               utf8_1.2.2              \n [7] R6_2.5.1                 KernSmooth_2.23-20       DBI_1.1.1               \n[10] colorspace_2.0-2         tidyselect_1.1.1         prettyunits_1.1.1       \n[13] bit_4.0.4                curl_4.3.2               compiler_4.1.1          \n[16] xml2_1.3.3               DelayedArray_0.20.0      rtracklayer_1.54.0      \n[19] caTools_1.18.2           scales_1.1.1             genefilter_1.76.0       \n[22] rappdirs_0.3.3           stringr_1.4.0            digest_0.6.29           \n[25] Rsamtools_2.10.0         XVector_0.34.0           pkgconfig_2.0.3         \n[28] dbplyr_2.1.1             fastmap_1.1.0            rlang_0.4.12            \n[31] RSQLite_2.2.8            BiocIO_1.4.0             generics_0.1.1          \n[34] jsonlite_1.7.2           BiocParallel_1.28.0      gtools_3.9.2            \n[37] dplyr_1.0.7              RCurl_1.98-1.5           magrittr_2.0.1          \n[40] GenomeInfoDbData_1.2.7   Matrix_1.3-4             Rcpp_1.0.7              \n[43] munsell_0.5.0            fansi_0.4.2              lifecycle_1.0.1         \n[46] stringi_1.7.6            yaml_2.2.1               zlibbioc_1.40.0         \n[49] BiocFileCache_2.2.0      grid_4.1.1               blob_1.2.2              \n[52] parallel_4.1.1           crayon_1.4.2             lattice_0.20-45         \n[55] Biostrings_2.62.0        splines_4.1.1            annotate_1.72.0         \n[58] hms_1.1.1                KEGGREST_1.34.0          locfit_1.5-9.4          \n[61] pillar_1.6.4             geneplotter_1.72.0       biomaRt_2.50.0          \n[64] XML_3.99-0.8             glue_1.5.1               png_0.1-7               \n[67] vctrs_0.3.8              gtable_0.3.0             purrr_0.3.4             \n[70] assertthat_0.2.1         cachem_1.0.6             ggplot2_3.3.5           \n[73] xtable_1.8-4             restfulr_0.0.13          survival_3.2-13         \n[76] tibble_3.1.6             GenomicAlignments_1.30.0 memoise_2.0.1           \n[79] ellipsis_0.3.2          \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "19 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "19.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:46:34", "plugin": "core", "name": "end_epoch", "raw_value": "1707662794.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:46:15", "plugin": "core", "name": "start_epoch", "raw_value": "1707662775.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deseq2/2.11.40.7+galaxy2-9", "has_data": true, "data": {"tool_id": "deseq2", "tool_version": "2.11.40.7+galaxy2", "test_index": 9, "time_seconds": 98.52415823936462, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "a374052a94aff062"}, {"src": "hda", "id": "959e6136a6e04411"}, {"src": "hda", "id": "1708ba4b886a850e"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "10ad696d3916b3a9"}, {"src": "hda", "id": "897fbfb70f168a1a"}, {"src": "hda", "id": "aed6b01bfe441711"}], "tximport|txtype": "sailfish", "tximport|mapping_format|gtf_file": {"src": "hda", "id": "b645de890464e33b"}, "tximport|mapping_format|mapping_format_selector": "gtf", "tximport|tximport_selector": "tximport", "output_options|output_selector": "sizefactors", "output_options|alpha_ma": "0.05"}, "job": {"model_class": "Job", "id": "1c317f9d4de8d86b", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:48:21.921754", "create_time": "2024-02-11T14:47:15.674905", "galaxy_version": "21.09", "command_version": "R version 4.1.1 (2021-08-10) -- \"Kick Things\", DESeq2 version 1.34.0", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.7+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-bwvfp", "command_line": "ln -s '/galaxy/server/database/objects/e/2/5/dataset_e25a6b8d-d3c6-4be0-9c90-9fd13dc71812.dat' mapping.gff &&  cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/8fe98f7094de/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/b/e/a/dataset_beab0f25-12bb-49cb-aa4a-c800a853b1b8.dat' -A 0.05 -F '/galaxy/server/database/objects/2/7/e/dataset_27e53050-bf80-474c-81a8-50a34c3893ce.dat'                  -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/a/e/7/dataset_ae701a19-5421-4cda-a9aa-8f6fea6722bf.dat\", \"/galaxy/server/database/objects/c/c/e/dataset_cce96aed-e458-4024-a8ed-34148687cac4.dat\", \"/galaxy/server/database/objects/e/1/2/dataset_e1278a0d-b37d-4727-aca6-a31e8a2945f7.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/2/b/b/dataset_2bb16e83-5eff-496e-84cb-4f935aa75764.dat\", \"/galaxy/server/database/objects/5/3/5/dataset_5355dbca-18ab-4f23-9680-4d289a5621e8.dat\", \"/galaxy/server/database/objects/9/d/9/dataset_9d940d87-d0ce-4e73-9b4c-5c1b64fd443b.dat\"]}]]]' -l '{\"dataset_2bb16e83-5eff-496e-84cb-4f935aa75764.dat\": \"sailfish_quant.sf1.tab\", \"dataset_5355dbca-18ab-4f23-9680-4d289a5621e8.dat\": \"sailfish_quant.sf2.tab\", \"dataset_9d940d87-d0ce-4e73-9b4c-5c1b64fd443b.dat\": \"sailfish_quant.sf3.tab\", \"dataset_ae701a19-5421-4cda-a9aa-8f6fea6722bf.dat\": \"sailfish_quant.sf4.tab\", \"dataset_cce96aed-e458-4024-a8ed-34148687cac4.dat\": \"sailfish_quant.sf5.tab\", \"dataset_e1278a0d-b37d-4727-aca6-a31e8a2945f7.dat\": \"sailfish_quant.sf6.tab\"}' -t 1 -i -y sailfish -x mapping.gff", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_options": "{\"alpha_ma\": \"0.05\", \"output_selector\": \"sizefactors\"}", "advanced_options": "{\"auto_mean_filter_off\": \"false\", \"esf\": \"\", \"fit_type\": \"1\", \"outlier_filter_off\": \"false\", \"outlier_replace_off\": \"false\", \"prefilter_conditional\": {\"__current_case__\": 1, \"prefilter\": \"\"}}", "tximport": "{\"__current_case__\": 0, \"mapping_format\": {\"__current_case__\": 0, \"gtf_file\": {\"values\": [{\"id\": 448, \"src\": \"hda\"}]}, \"mapping_format_selector\": \"gtf\"}, \"tximport_selector\": \"tximport\", \"txtype\": \"sailfish\"}", "header": "\"true\"", "batch_factors": null, "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 442, \"src\": \"hda\"}, {\"id\": 443, \"src\": \"hda\"}, {\"id\": 444, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 445, \"src\": \"hda\"}, {\"id\": 446, \"src\": \"hda\"}, {\"id\": 447, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "a374052a94aff062", "src": "hda", "uuid": "2bb16e83-5eff-496e-84cb-4f935aa75764"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "a374052a94aff062", "src": "hda", "uuid": "2bb16e83-5eff-496e-84cb-4f935aa75764"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "959e6136a6e04411", "src": "hda", "uuid": "5355dbca-18ab-4f23-9680-4d289a5621e8"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "1708ba4b886a850e", "src": "hda", "uuid": "9d940d87-d0ce-4e73-9b4c-5c1b64fd443b"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "10ad696d3916b3a9", "src": "hda", "uuid": "ae701a19-5421-4cda-a9aa-8f6fea6722bf"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "10ad696d3916b3a9", "src": "hda", "uuid": "ae701a19-5421-4cda-a9aa-8f6fea6722bf"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "897fbfb70f168a1a", "src": "hda", "uuid": "cce96aed-e458-4024-a8ed-34148687cac4"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "aed6b01bfe441711", "src": "hda", "uuid": "e1278a0d-b37d-4727-aca6-a31e8a2945f7"}, "tximport|gtf_file": {"id": "b645de890464e33b", "src": "hda", "uuid": "e25a6b8d-d3c6-4be0-9c90-9fd13dc71812"}}, "outputs": {"sizefactors_out": {"id": "6457c5d52f111363", "src": "hda", "uuid": "27e53050-bf80-474c-81a8-50a34c3893ce"}, "deseq_out": {"id": "3d49579a67fa23b3", "src": "hda", "uuid": "beab0f25-12bb-49cb-aa4a-c800a853b1b8"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "primary factor: Treatment \n\n---------------------\n\nsize factors for samples: taking tximport data into account\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 11 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 9 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] GenomicFeatures_1.46.1      AnnotationDbi_1.56.1       \n [3] tximport_1.22.0             rjson_0.2.20               \n [5] gplots_3.1.1                RColorBrewer_1.1-2         \n [7] DESeq2_1.34.0               SummarizedExperiment_1.24.0\n [9] Biobase_2.54.0              MatrixGenerics_1.6.0       \n[11] matrixStats_0.61.0          GenomicRanges_1.46.0       \n[13] GenomeInfoDb_1.30.0         IRanges_2.28.0             \n[15] S4Vectors_0.32.0            BiocGenerics_0.40.0        \n[17] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] bitops_1.0-7             bit64_4.0.5              filelock_1.0.2          \n [4] progress_1.2.2           httr_1.4.2               utf8_1.2.2              \n [7] R6_2.5.1                 KernSmooth_2.23-20       DBI_1.1.1               \n[10] colorspace_2.0-2         tidyselect_1.1.1         prettyunits_1.1.1       \n[13] bit_4.0.4                curl_4.3.2               compiler_4.1.1          \n[16] xml2_1.3.3               DelayedArray_0.20.0      rtracklayer_1.54.0      \n[19] caTools_1.18.2           scales_1.1.1             genefilter_1.76.0       \n[22] rappdirs_0.3.3           stringr_1.4.0            digest_0.6.29           \n[25] Rsamtools_2.10.0         XVector_0.34.0           pkgconfig_2.0.3         \n[28] dbplyr_2.1.1             fastmap_1.1.0            rlang_0.4.12            \n[31] RSQLite_2.2.8            BiocIO_1.4.0             generics_0.1.1          \n[34] jsonlite_1.7.2           BiocParallel_1.28.0      gtools_3.9.2            \n[37] dplyr_1.0.7              RCurl_1.98-1.5           magrittr_2.0.1          \n[40] GenomeInfoDbData_1.2.7   Matrix_1.3-4             Rcpp_1.0.7              \n[43] munsell_0.5.0            fansi_0.4.2              lifecycle_1.0.1         \n[46] stringi_1.7.6            yaml_2.2.1               zlibbioc_1.40.0         \n[49] BiocFileCache_2.2.0      grid_4.1.1               blob_1.2.2              \n[52] parallel_4.1.1           crayon_1.4.2             lattice_0.20-45         \n[55] Biostrings_2.62.0        splines_4.1.1            annotate_1.72.0         \n[58] hms_1.1.1                KEGGREST_1.34.0          locfit_1.5-9.4          \n[61] pillar_1.6.4             geneplotter_1.72.0       biomaRt_2.50.0          \n[64] XML_3.99-0.8             glue_1.5.1               png_0.1-7               \n[67] vctrs_0.3.8              gtable_0.3.0             purrr_0.3.4             \n[70] assertthat_0.2.1         cachem_1.0.6             ggplot2_3.3.5           \n[73] xtable_1.8-4             restfulr_0.0.13          survival_3.2-13         \n[76] tibble_3.1.6             GenomicAlignments_1.30.0 memoise_2.0.1           \n[79] ellipsis_0.3.2          \n", "job_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nImport genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... OK\n'select()' returned 1:1 mapping between keys and columns\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nWarning message:\nIn .get_cds_IDX(mcols0$type, mcols0$phase) :\n  The \"phase\" metadata column contains non-NA values for features of type\n  stop_codon. This information was ignored.\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "stderr": "\nWarning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nImport genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... OK\n'select()' returned 1:1 mapping between keys and columns\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nWarning message:\nIn .get_cds_IDX(mcols0$type, mcols0$phase) :\n  The \"phase\" metadata column contains non-NA values for features of type\n  stop_codon. This information was ignored.\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "stdout": "\nprimary factor: Treatment \n\n---------------------\n\nsize factors for samples: taking tximport data into account\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 11 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 9 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 10 (buster)\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/libopenblasp-r0.3.18.so\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats4    tools     stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] GenomicFeatures_1.46.1      AnnotationDbi_1.56.1       \n [3] tximport_1.22.0             rjson_0.2.20               \n [5] gplots_3.1.1                RColorBrewer_1.1-2         \n [7] DESeq2_1.34.0               SummarizedExperiment_1.24.0\n [9] Biobase_2.54.0              MatrixGenerics_1.6.0       \n[11] matrixStats_0.61.0          GenomicRanges_1.46.0       \n[13] GenomeInfoDb_1.30.0         IRanges_2.28.0             \n[15] S4Vectors_0.32.0            BiocGenerics_0.40.0        \n[17] getopt_1.20.3              \n\nloaded via a namespace (and not attached):\n [1] bitops_1.0-7             bit64_4.0.5              filelock_1.0.2          \n [4] progress_1.2.2           httr_1.4.2               utf8_1.2.2              \n [7] R6_2.5.1                 KernSmooth_2.23-20       DBI_1.1.1               \n[10] colorspace_2.0-2         tidyselect_1.1.1         prettyunits_1.1.1       \n[13] bit_4.0.4                curl_4.3.2               compiler_4.1.1          \n[16] xml2_1.3.3               DelayedArray_0.20.0      rtracklayer_1.54.0      \n[19] caTools_1.18.2           scales_1.1.1             genefilter_1.76.0       \n[22] rappdirs_0.3.3           stringr_1.4.0            digest_0.6.29           \n[25] Rsamtools_2.10.0         XVector_0.34.0           pkgconfig_2.0.3         \n[28] dbplyr_2.1.1             fastmap_1.1.0            rlang_0.4.12            \n[31] RSQLite_2.2.8            BiocIO_1.4.0             generics_0.1.1          \n[34] jsonlite_1.7.2           BiocParallel_1.28.0      gtools_3.9.2            \n[37] dplyr_1.0.7              RCurl_1.98-1.5           magrittr_2.0.1          \n[40] GenomeInfoDbData_1.2.7   Matrix_1.3-4             Rcpp_1.0.7              \n[43] munsell_0.5.0            fansi_0.4.2              lifecycle_1.0.1         \n[46] stringi_1.7.6            yaml_2.2.1               zlibbioc_1.40.0         \n[49] BiocFileCache_2.2.0      grid_4.1.1               blob_1.2.2              \n[52] parallel_4.1.1           crayon_1.4.2             lattice_0.20-45         \n[55] Biostrings_2.62.0        splines_4.1.1            annotate_1.72.0         \n[58] hms_1.1.1                KEGGREST_1.34.0          locfit_1.5-9.4          \n[61] pillar_1.6.4             geneplotter_1.72.0       biomaRt_2.50.0          \n[64] XML_3.99-0.8             glue_1.5.1               png_0.1-7               \n[67] vctrs_0.3.8              gtable_0.3.0             purrr_0.3.4             \n[70] assertthat_0.2.1         cachem_1.0.6             ggplot2_3.3.5           \n[73] xtable_1.8-4             restfulr_0.0.13          survival_3.2-13         \n[76] tibble_3.1.6             GenomicAlignments_1.30.0 memoise_2.0.1           \n[79] ellipsis_0.3.2          \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "20 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "20.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:48:12", "plugin": "core", "name": "end_epoch", "raw_value": "1707662892.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:47:52", "plugin": "core", "name": "start_epoch", "raw_value": "1707662872.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "mummer_mummer/4.0.0beta2+galaxy1-0", "has_data": true, "data": {"tool_id": "mummer_mummer", "tool_version": "4.0.0beta2+galaxy1", "test_index": 0, "time_seconds": 84.55935716629028, "inputs": {"reference_sequence": {"src": "hda", "id": "5459ddc5a8928445"}, "query_sequence": {"src": "hda", "id": "f66e5235e1e507e2"}, "mumplot|plot": "yes"}, "job": {"model_class": "Job", "id": "82118ec118b542e3", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:53:03.033400", "create_time": "2024-02-11T14:51:51.246969", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/mummer_mummer/mummer_mummer/4.0.0beta2+galaxy1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-dm46g", "command_line": "mummer  -l '20' -b      -threads ${GALAXY_SLOTS:-1} -qthreads ${GALAXY_SLOTS:-1} '/galaxy/server/database/objects/b/7/b/dataset_b7bf655d-4c6d-484a-9274-ccada542fb41.dat' '/galaxy/server/database/objects/2/c/7/dataset_2c7f4713-eec6-40b5-9c61-5d85d99e0884.dat' > '/galaxy/server/database/objects/a/0/a/dataset_a0a93884-db24-450f-931d-7ba9e41754b6.dat' && mummerplot -b '20'     -s 'small' -terminal png -title 'Title'  '/galaxy/server/database/objects/a/0/a/dataset_a0a93884-db24-450f-931d-7ba9e41754b6.dat' && gnuplot < out.gp", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "mumplot": "{\"__current_case__\": 0, \"breaklen\": \"20\", \"color\": \"\", \"coverage\": \"\", \"fat\": \"false\", \"filter\": \"false\", \"labels\": {\"IDs\": \"no\", \"__current_case__\": 1}, \"plot\": \"yes\", \"range\": {\"__current_case__\": 1, \"custom\": \"no\"}, \"size\": \"small\", \"snp\": \"false\", \"title\": \"Title\"}", "options": "{\"__current_case__\": 1, \"advanced\": \"defaults\"}", "position": "\"false\"", "substring": "\"false\"", "print_length": "\"false\"", "chars": "\"false\"", "force": "\"false\"", "direction": "\"-b\"", "min": "\"20\"", "anchoring": "\"\""}, "inputs": {"reference_sequence": {"id": "5459ddc5a8928445", "src": "hda", "uuid": "b7bf655d-4c6d-484a-9274-ccada542fb41"}, "query_sequence": {"id": "f66e5235e1e507e2", "src": "hda", "uuid": "2c7f4713-eec6-40b5-9c61-5d85d99e0884"}}, "outputs": {"png_output": {"id": "880cee57e74e4b34", "src": "hda", "uuid": "412c2165-91c3-4ebb-b96c-6fb00542e16b"}, "output": {"id": "f1b0dc29ced4caba", "src": "hda", "uuid": "a0a93884-db24-450f-931d-7ba9e41754b6"}}, "output_collections": {}, "tool_stdout": "gnuplot 5.2 patchlevel 7\n", "tool_stderr": "Reading mummer file /galaxy/server/database/objects/a/0/a/dataset_a0a93884-db24-450f-931d-7ba9e41754b6.dat (use mummer -c)\nWriting plot files out.fplot, out.rplot, out.hplot\nWriting gnuplot script out.gp\nRendering plot out.png\nWARNING: Unable to run 'false out.gp', Inappropriate ioctl for device\n", "job_stdout": "", "job_stderr": "", "stderr": "Reading mummer file /galaxy/server/database/objects/a/0/a/dataset_a0a93884-db24-450f-931d-7ba9e41754b6.dat (use mummer -c)\nWriting plot files out.fplot, out.rplot, out.hplot\nWriting gnuplot script out.gp\nRendering plot out.png\nWARNING: Unable to run 'false out.gp', Inappropriate ioctl for device\n", "stdout": "gnuplot 5.2 patchlevel 7\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:52:47", "plugin": "core", "name": "end_epoch", "raw_value": "1707663167.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:52:46", "plugin": "core", "name": "start_epoch", "raw_value": "1707663166.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_yield_plot/0.6.1a1.1-0", "has_data": true, "data": {"tool_id": "poretools_yield_plot", "tool_version": "0.6.1a1.1", "test_index": 0, "time_seconds": 91.05115818977356, "inputs": {"input": {"src": "hda", "id": "4093dc0d557a3af5"}, "plot_type": "reads", "extension": "png"}, "job": {"model_class": "Job", "id": "b597b48d52b8e48c", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:17:16.230221", "create_time": "2024-02-11T14:15:57.504726", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_yield_plot/poretools_yield_plot/0.6.1a1.1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-rbhwh", "command_line": "export MPLBACKEND=\"agg\" && poretools yield_plot '/galaxy/server/database/objects/5/3/d/dataset_53d675c8-5bc7-4609-ad55-7dea50007829.dat' --saveas plot.png --plot-type reads  --skip 1 && mv plot.png '/galaxy/server/database/objects/6/e/4/dataset_6e411378-5346-4e9f-bd4d-2e28b6308310.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "theme_bw": "\"false\"", "extension": "\"png\"", "skip": "\"1\"", "plot_type": "\"reads\""}, "inputs": {"input": {"id": "4093dc0d557a3af5", "src": "hda", "uuid": "53d675c8-5bc7-4609-ad55-7dea50007829"}}, "outputs": {"output": {"id": "ba74649a8db73c4a", "src": "hda", "uuid": "6e411378-5346-4e9f-bd4d-2e28b6308310"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:17:00", "plugin": "core", "name": "end_epoch", "raw_value": "1707661020.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:16:59", "plugin": "core", "name": "start_epoch", "raw_value": "1707661019.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_yield_plot/0.6.1a1.1-1", "has_data": true, "data": {"tool_id": "poretools_yield_plot", "tool_version": "0.6.1a1.1", "test_index": 1, "time_seconds": 65.18709325790405, "inputs": {"input": {"src": "hda", "id": "b865ac4c3f0689be"}, "plot_type": "basepairs", "extension": "svg"}, "job": {"model_class": "Job", "id": "a90672687fad9e97", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:18:21.735017", "create_time": "2024-02-11T14:17:33.715104", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_yield_plot/poretools_yield_plot/0.6.1a1.1", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-mrlj2", "command_line": "export MPLBACKEND=\"agg\" && poretools yield_plot '/galaxy/server/database/objects/d/d/6/dataset_dd6ff12c-aaee-475c-8829-176698b6b555.dat' --saveas plot.svg --plot-type basepairs  --skip 1 && mv plot.svg '/galaxy/server/database/objects/8/f/b/dataset_8fb34be6-0046-440c-8128-045935da9f58.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "theme_bw": "\"false\"", "extension": "\"svg\"", "skip": "\"1\"", "plot_type": "\"basepairs\""}, "inputs": {"input": {"id": "b865ac4c3f0689be", "src": "hda", "uuid": "dd6ff12c-aaee-475c-8829-176698b6b555"}}, "outputs": {"output": {"id": "479589f51582482a", "src": "hda", "uuid": "8fb34be6-0046-440c-8128-045935da9f58"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:18:12", "plugin": "core", "name": "end_epoch", "raw_value": "1707661092.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:18:10", "plugin": "core", "name": "start_epoch", "raw_value": "1707661090.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "qualimap_bamqc/2.2.2d+galaxy3-0", "has_data": true, "data": {"tool_id": "qualimap_bamqc", "tool_version": "2.2.2d+galaxy3", "test_index": 0, "time_seconds": 93.14296364784241, "inputs": {"input1": {"src": "hda", "id": "169f4394f38a5aae"}}, "job": {"model_class": "Job", "id": "3917a8dd2f21ee68", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:53:28.049615", "create_time": "2024-02-11T13:52:06.799942", "galaxy_version": "21.09", "command_version": "2.2.2-dev", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/qualimap_bamqc/qualimap_bamqc/2.2.2d+galaxy3", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-z4g2b", "command_line": "export JAVA_OPTS=\"-Djava.awt.headless=true -Xmx${GALAXY_MEMORY_MB:-1024}m\" &&    ln -s '/galaxy/server/database/objects/1/a/8/dataset_1a8e26ad-8657-4fae-8ad4-aa20185ba94a.dat' 'test_mapped_reads_bam' &&  qualimap bamqc -bam 'test_mapped_reads_bam' -outdir results -outformat html --collect-overlap-pairs -nw 400 --paint-chromosome-limits -hm 3  --skip-duplicated --skip-dup-mode 0 -nt ${GALAXY_SLOTS:-1} &&   sed 's|images_qualimapReport/||g;s|css/||g' results/qualimapReport.html > '/galaxy/server/database/objects/5/d/0/dataset_5d038297-f43c-412f-9ae7-4f2a31eb2f72.dat' && mkdir '/galaxy/server/database/jobs_directory/000/160/working/dataset_5d038297-f43c-412f-9ae7-4f2a31eb2f72_files' && mv results/css/*.css '/galaxy/server/database/jobs_directory/000/160/working/dataset_5d038297-f43c-412f-9ae7-4f2a31eb2f72_files' && mv results/css/*.png '/galaxy/server/database/jobs_directory/000/160/working/dataset_5d038297-f43c-412f-9ae7-4f2a31eb2f72_files' && if [ -d results/images_qualimapReport ]; then mv results/images_qualimapReport/* '/galaxy/server/database/jobs_directory/000/160/working/dataset_5d038297-f43c-412f-9ae7-4f2a31eb2f72_files' && for file in $(ls -A results/raw_data_qualimapReport); do mv \"results/raw_data_qualimapReport/$file\" `echo \"results/$file\" | sed 's/(//;s/)//'`; done fi && mv results/genome_results.txt results/summary_report.txt", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "plot_specific": "{\"genome_gc_distr\": null, \"homopolymer_size\": \"3\", \"n_bins\": \"400\", \"paint_chromosome_limits\": \"true\"}", "duplicate_skipping": "\"0\"", "per_base_coverage": "\"false\"", "stats_regions": "{\"__current_case__\": 0, \"region_select\": \"all\"}"}, "inputs": {"input1": {"id": "169f4394f38a5aae", "src": "hda", "uuid": "1a8e26ad-8657-4fae-8ad4-aa20185ba94a"}}, "outputs": {"output_html": {"id": "7e2267355d5ab6bf", "src": "hda", "uuid": "5d038297-f43c-412f-9ae7-4f2a31eb2f72"}, "raw_data|__part__|mapping_quality_histogram": {"id": "ab18a159e715fa96", "src": "hda", "uuid": "71ddafd8-cc74-4314-8782-66bf4305aefb"}, "raw_data|__part__|mapping_quality_across_reference": {"id": "343110fa508c0b4a", "src": "hda", "uuid": "e52f5914-be1f-4901-897f-e1fd7e260d1e"}, "raw_data|__part__|mapped_reads_nucleotide_content": {"id": "3f156295eae67048", "src": "hda", "uuid": "2ce1617b-c82a-4504-8e2b-8ee21a374421"}, "raw_data|__part__|mapped_reads_gc-content_distribution": {"id": "25cda41800079ff8", "src": "hda", "uuid": "e95df359-b779-4ec8-8362-efbf255c1e80"}, "raw_data|__part__|mapped_reads_clipping_profile": {"id": "4563b7b1081b95df", "src": "hda", "uuid": "71ac64dc-a54c-4413-8d44-1307058b2129"}, "raw_data|__part__|insert_size_histogram": {"id": "141e56cb268261a8", "src": "hda", "uuid": "9598575c-27d5-40e8-a14e-0c17b3910256"}, "raw_data|__part__|insert_size_across_reference": {"id": "21efe26e345e41d9", "src": "hda", "uuid": "ba9538c8-397f-4fbb-8940-6e2f714d9012"}, "raw_data|__part__|homopolymer_indels": {"id": "3527b370ae533000", "src": "hda", "uuid": "07f28645-fa1e-4cfe-a13b-a8e6d4350574"}, "raw_data|__part__|duplication_rate_histogram": {"id": "f77d48129ed2f044", "src": "hda", "uuid": "9d9601c3-616d-4d75-b889-b7b6ef1ad772"}, "raw_data|__part__|genome_fraction_coverage": {"id": "0fc376c53d669ae7", "src": "hda", "uuid": "949c2511-9588-4dd7-8445-20f8fa84ff08"}, "raw_data|__part__|coverage_histogram": {"id": "83a7ccb388158374", "src": "hda", "uuid": "188ec4ee-15df-40e9-b327-9b0d817f2369"}, "raw_data|__part__|coverage_across_reference": {"id": "aa403109a754edb9", "src": "hda", "uuid": "b8ec7c91-67be-4e34-b8bc-c82d9bc37b82"}, "raw_data|__part__|genome_results": {"id": "f644ee9eba8fcbdc", "src": "hda", "uuid": "c895ce4d-156a-43d5-a524-156db9556521"}}, "output_collections": {"raw_data": {"id": "336a8ce1cffc5d32", "src": "hdca"}}, "tool_stdout": "Java memory size is set to 1200M\nLaunching application...\n\ndetected environment java options -Djava.awt.headless=true -Xmx2000m\nQualiMap v.2.2.2-dev\nBuilt on 2019-11-11 14:05\n\nSelected tool: bamqc\nAvailable memory (Mb): 60\nMax memory (Mb): 2027\nStarting bam qc....\nLoading sam header...\nLoading locator...\nLoading reference...\nOnly flagged duplicate alignments will be skipped...\nNumber of windows: 400, effective number of windows: 325\nChunk of reads size: 1000\nNumber of threads: 1\nProcessed 50 out of 325 windows...\nProcessed 100 out of 325 windows...\nProcessed 150 out of 325 windows...\nProcessed 200 out of 325 windows...\nProcessed 250 out of 325 windows...\nProcessed 300 out of 325 windows...\nTotal processed windows:325\nNumber of reads: 100\nNumber of valid reads: 100\nNumber of correct strand reads:0\n\nInside of regions...\nNum mapped reads: 100\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\nTime taken to analyze reads: 0\nComputing descriptors...\nnumberOfMappedBases: 12665\nreferenceSize: 650\nnumberOfSequencedBases: 7465\nnumberOfAs: 1910\nComputing per chromosome statistics...\nComputing histograms...\nOverall analysis time: 0\nend of bam qc\nComputing report...\nWriting HTML report...\nHTML report created successfully\n\nFinished\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Java memory size is set to 1200M\nLaunching application...\n\ndetected environment java options -Djava.awt.headless=true -Xmx2000m\nQualiMap v.2.2.2-dev\nBuilt on 2019-11-11 14:05\n\nSelected tool: bamqc\nAvailable memory (Mb): 60\nMax memory (Mb): 2027\nStarting bam qc....\nLoading sam header...\nLoading locator...\nLoading reference...\nOnly flagged duplicate alignments will be skipped...\nNumber of windows: 400, effective number of windows: 325\nChunk of reads size: 1000\nNumber of threads: 1\nProcessed 50 out of 325 windows...\nProcessed 100 out of 325 windows...\nProcessed 150 out of 325 windows...\nProcessed 200 out of 325 windows...\nProcessed 250 out of 325 windows...\nProcessed 300 out of 325 windows...\nTotal processed windows:325\nNumber of reads: 100\nNumber of valid reads: 100\nNumber of correct strand reads:0\n\nInside of regions...\nNum mapped reads: 100\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\nTime taken to analyze reads: 0\nComputing descriptors...\nnumberOfMappedBases: 12665\nreferenceSize: 650\nnumberOfSequencedBases: 7465\nnumberOfAs: 1910\nComputing per chromosome statistics...\nComputing histograms...\nOverall analysis time: 0\nend of bam qc\nComputing report...\nWriting HTML report...\nHTML report created successfully\n\nFinished\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:53:09", "plugin": "core", "name": "end_epoch", "raw_value": "1707659589.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:53:05", "plugin": "core", "name": "start_epoch", "raw_value": "1707659585.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "qualimap_bamqc/2.2.2d+galaxy3-1", "has_data": true, "data": {"tool_id": "qualimap_bamqc", "tool_version": "2.2.2d+galaxy3", "test_index": 1, "time_seconds": 64.49679827690125, "inputs": {"input1": {"src": "hda", "id": "cf0f63efa6c4bc9a"}, "per_base_coverage": true}, "job": {"model_class": "Job", "id": "f9d828c742944cfe", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:54:31.413508", "create_time": "2024-02-11T13:53:39.586528", "galaxy_version": "21.09", "command_version": "2.2.2-dev", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/qualimap_bamqc/qualimap_bamqc/2.2.2d+galaxy3", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-lff4s", "command_line": "export JAVA_OPTS=\"-Djava.awt.headless=true -Xmx${GALAXY_MEMORY_MB:-1024}m\" &&    ln -s '/galaxy/server/database/objects/5/a/7/dataset_5a7b4c44-5160-4e2f-bdff-942b88fc333d.dat' 'test_mapped_reads_bam' &&  qualimap bamqc -bam 'test_mapped_reads_bam' -outdir results -outformat html --collect-overlap-pairs --output-genome-coverage results/coverage.txt -nw 400 --paint-chromosome-limits -hm 3  --skip-duplicated --skip-dup-mode 0 -nt ${GALAXY_SLOTS:-1} &&  mv results/coverage.txt '/galaxy/server/database/objects/4/c/5/dataset_4c5fe04b-7648-4ba3-b0b3-2bd2c6f747a0.dat' &&  sed 's|images_qualimapReport/||g;s|css/||g' results/qualimapReport.html > '/galaxy/server/database/objects/0/a/2/dataset_0a2ae069-de72-49e8-9615-7cd46ac66bc3.dat' && mkdir '/galaxy/server/database/jobs_directory/000/162/working/dataset_0a2ae069-de72-49e8-9615-7cd46ac66bc3_files' && mv results/css/*.css '/galaxy/server/database/jobs_directory/000/162/working/dataset_0a2ae069-de72-49e8-9615-7cd46ac66bc3_files' && mv results/css/*.png '/galaxy/server/database/jobs_directory/000/162/working/dataset_0a2ae069-de72-49e8-9615-7cd46ac66bc3_files' && if [ -d results/images_qualimapReport ]; then mv results/images_qualimapReport/* '/galaxy/server/database/jobs_directory/000/162/working/dataset_0a2ae069-de72-49e8-9615-7cd46ac66bc3_files' && for file in $(ls -A results/raw_data_qualimapReport); do mv \"results/raw_data_qualimapReport/$file\" `echo \"results/$file\" | sed 's/(//;s/)//'`; done fi && mv results/genome_results.txt results/summary_report.txt", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "plot_specific": "{\"genome_gc_distr\": null, \"homopolymer_size\": \"3\", \"n_bins\": \"400\", \"paint_chromosome_limits\": \"true\"}", "duplicate_skipping": "\"0\"", "per_base_coverage": "\"true\"", "stats_regions": "{\"__current_case__\": 0, \"region_select\": \"all\"}"}, "inputs": {"input1": {"id": "cf0f63efa6c4bc9a", "src": "hda", "uuid": "5a7b4c44-5160-4e2f-bdff-942b88fc333d"}}, "outputs": {"output_per_base_coverage": {"id": "9dfca9cfb0d2c4a6", "src": "hda", "uuid": "4c5fe04b-7648-4ba3-b0b3-2bd2c6f747a0"}, "output_html": {"id": "90a072b763658d2e", "src": "hda", "uuid": "0a2ae069-de72-49e8-9615-7cd46ac66bc3"}, "raw_data|__part__|mapping_quality_histogram": {"id": "fbc4b8bdfe65e196", "src": "hda", "uuid": "7a493d65-ab2a-4f4d-b545-e37c03373294"}, "raw_data|__part__|mapping_quality_across_reference": {"id": "5375535fa4b030d7", "src": "hda", "uuid": "7d10dfbf-9e43-4520-9f48-3bf3b17a0aa7"}, "raw_data|__part__|mapped_reads_nucleotide_content": {"id": "2e4002d6a76f6c70", "src": "hda", "uuid": "a368ae6c-6906-4ff7-896e-9ddc8b36f8e7"}, "raw_data|__part__|mapped_reads_gc-content_distribution": {"id": "621c07ea2262caa9", "src": "hda", "uuid": "d2dde729-339b-4766-8a89-73467ca59df8"}, "raw_data|__part__|mapped_reads_clipping_profile": {"id": "ef87d6e4083f27df", "src": "hda", "uuid": "1963dc4f-3850-40c9-a453-b3c5ade0c1d5"}, "raw_data|__part__|insert_size_histogram": {"id": "01ae15a379c9d2be", "src": "hda", "uuid": "1ba3e340-9d87-4bf2-8cda-1ed51d2f26ff"}, "raw_data|__part__|insert_size_across_reference": {"id": "c2072b1e509ec28c", "src": "hda", "uuid": "d5d31575-d880-463b-bcb2-093812538cd2"}, "raw_data|__part__|homopolymer_indels": {"id": "5adbf4ab0cea645e", "src": "hda", "uuid": "a847c9d6-799f-4f5e-9480-7be5fa6deced"}, "raw_data|__part__|duplication_rate_histogram": {"id": "ca45cc43094dce6f", "src": "hda", "uuid": "fc2bc725-9703-4337-8545-48e4449a2e48"}, "raw_data|__part__|genome_fraction_coverage": {"id": "90e18d069a18ef96", "src": "hda", "uuid": "1d42f334-1b1d-48bb-8fb3-fdffe153ec70"}, "raw_data|__part__|coverage_histogram": {"id": "4f46798d01889d3b", "src": "hda", "uuid": "1fcf9a27-7909-423d-bf0f-fb06bfc92162"}, "raw_data|__part__|coverage_across_reference": {"id": "cb12e8e2987d00f5", "src": "hda", "uuid": "2f678972-43f1-4fc5-890c-29fa43f6ac09"}, "raw_data|__part__|genome_results": {"id": "7ed6d4bf51375cc0", "src": "hda", "uuid": "9f071d0e-2862-48b0-9616-dba8079ab9c5"}}, "output_collections": {"raw_data": {"id": "bb9f0b7b801a3877", "src": "hdca"}}, "tool_stdout": "Java memory size is set to 1200M\nLaunching application...\n\ndetected environment java options -Djava.awt.headless=true -Xmx2000m\nQualiMap v.2.2.2-dev\nBuilt on 2019-11-11 14:05\n\nSelected tool: bamqc\nAvailable memory (Mb): 60\nMax memory (Mb): 2027\nStarting bam qc....\nLoading sam header...\nLoading locator...\nLoading reference...\nOnly flagged duplicate alignments will be skipped...\nNumber of windows: 400, effective number of windows: 325\nChunk of reads size: 1000\nNumber of threads: 1\nProcessed 50 out of 325 windows...\nProcessed 100 out of 325 windows...\nProcessed 150 out of 325 windows...\nProcessed 200 out of 325 windows...\nProcessed 250 out of 325 windows...\nProcessed 300 out of 325 windows...\nTotal processed windows:325\nNumber of reads: 100\nNumber of valid reads: 100\nNumber of correct strand reads:0\n\nInside of regions...\nNum mapped reads: 100\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\nTime taken to analyze reads: 0\nComputing descriptors...\nnumberOfMappedBases: 12665\nreferenceSize: 650\nnumberOfSequencedBases: 7465\nnumberOfAs: 1910\nComputing per chromosome statistics...\nComputing histograms...\nOverall analysis time: 0\nend of bam qc\nComputing report...\nWriting HTML report...\nHTML report created successfully\n\nFinished\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Java memory size is set to 1200M\nLaunching application...\n\ndetected environment java options -Djava.awt.headless=true -Xmx2000m\nQualiMap v.2.2.2-dev\nBuilt on 2019-11-11 14:05\n\nSelected tool: bamqc\nAvailable memory (Mb): 60\nMax memory (Mb): 2027\nStarting bam qc....\nLoading sam header...\nLoading locator...\nLoading reference...\nOnly flagged duplicate alignments will be skipped...\nNumber of windows: 400, effective number of windows: 325\nChunk of reads size: 1000\nNumber of threads: 1\nProcessed 50 out of 325 windows...\nProcessed 100 out of 325 windows...\nProcessed 150 out of 325 windows...\nProcessed 200 out of 325 windows...\nProcessed 250 out of 325 windows...\nProcessed 300 out of 325 windows...\nTotal processed windows:325\nNumber of reads: 100\nNumber of valid reads: 100\nNumber of correct strand reads:0\n\nInside of regions...\nNum mapped reads: 100\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\nTime taken to analyze reads: 0\nComputing descriptors...\nnumberOfMappedBases: 12665\nreferenceSize: 650\nnumberOfSequencedBases: 7465\nnumberOfAs: 1910\nComputing per chromosome statistics...\nComputing histograms...\nOverall analysis time: 0\nend of bam qc\nComputing report...\nWriting HTML report...\nHTML report created successfully\n\nFinished\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:54:21", "plugin": "core", "name": "end_epoch", "raw_value": "1707659661.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:54:17", "plugin": "core", "name": "start_epoch", "raw_value": "1707659657.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "qualimap_bamqc/2.2.2d+galaxy3-2", "has_data": true, "data": {"tool_id": "qualimap_bamqc", "tool_version": "2.2.2d+galaxy3", "test_index": 2, "time_seconds": 63.79694628715515, "inputs": {"input1": {"src": "hda", "id": "255a9c377b9544fd"}, "stats_regions|regions": {"src": "hda", "id": "ef0526998aeef0f6"}, "stats_regions|region_select": "custom_regions"}, "job": {"model_class": "Job", "id": "19806b340d47a69a", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:55:36.581669", "create_time": "2024-02-11T13:54:45.393152", "galaxy_version": "21.09", "command_version": "2.2.2-dev", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/qualimap_bamqc/qualimap_bamqc/2.2.2d+galaxy3", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-zgwfb", "command_line": "export JAVA_OPTS=\"-Djava.awt.headless=true -Xmx${GALAXY_MEMORY_MB:-1024}m\" &&   ln -s '/galaxy/server/database/objects/e/4/e/dataset_e4e728bc-33d7-432d-947a-b4b545a0d12b.dat' regions.gtf &&   ln -s '/galaxy/server/database/objects/f/9/c/dataset_f9c2508d-9670-4cf4-8841-e860b6571dc5.dat' 'test_mapped_reads_bam' &&  qualimap bamqc -bam 'test_mapped_reads_bam' -outdir results -outformat html --collect-overlap-pairs -gff regions.gtf -nw 400 --paint-chromosome-limits -hm 3  --skip-duplicated --skip-dup-mode 0 -nt ${GALAXY_SLOTS:-1} &&   sed 's|images_qualimapReport/||g;s|css/||g' results/qualimapReport.html > '/galaxy/server/database/objects/7/3/f/dataset_73f8198e-0b4a-460b-81f7-1d316959d6d3.dat' && mkdir '/galaxy/server/database/jobs_directory/000/165/working/dataset_73f8198e-0b4a-460b-81f7-1d316959d6d3_files' && mv results/css/*.css '/galaxy/server/database/jobs_directory/000/165/working/dataset_73f8198e-0b4a-460b-81f7-1d316959d6d3_files' && mv results/css/*.png '/galaxy/server/database/jobs_directory/000/165/working/dataset_73f8198e-0b4a-460b-81f7-1d316959d6d3_files' && if [ -d results/images_qualimapReport ]; then mv results/images_qualimapReport/* '/galaxy/server/database/jobs_directory/000/165/working/dataset_73f8198e-0b4a-460b-81f7-1d316959d6d3_files' && for file in $(ls -A results/raw_data_qualimapReport); do mv \"results/raw_data_qualimapReport/$file\" `echo \"results/$file\" | sed 's/(//;s/)//'`; done fi && mv results/genome_results.txt results/summary_report.txt", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "plot_specific": "{\"genome_gc_distr\": null, \"homopolymer_size\": \"3\", \"n_bins\": \"400\", \"paint_chromosome_limits\": \"true\"}", "duplicate_skipping": "\"0\"", "per_base_coverage": "\"false\"", "stats_regions": "{\"__current_case__\": 1, \"outside_stats\": \"false\", \"region_select\": \"custom_regions\", \"regions\": {\"values\": [{\"id\": 211, \"src\": \"hda\"}]}}"}, "inputs": {"input1": {"id": "255a9c377b9544fd", "src": "hda", "uuid": "f9c2508d-9670-4cf4-8841-e860b6571dc5"}, "regions": {"id": "ef0526998aeef0f6", "src": "hda", "uuid": "e4e728bc-33d7-432d-947a-b4b545a0d12b"}}, "outputs": {"output_html": {"id": "a90672687fad9e97", "src": "hda", "uuid": "73f8198e-0b4a-460b-81f7-1d316959d6d3"}, "raw_data|__part__|mapping_quality_histogram": {"id": "2de9eead8206679e", "src": "hda", "uuid": "e046e61f-030d-4139-9f70-ec63e734bef3"}, "raw_data|__part__|mapping_quality_across_reference": {"id": "b597b48d52b8e48c", "src": "hda", "uuid": "039a9b8d-9f39-45e0-adb6-fda7111822fc"}, "raw_data|__part__|mapped_reads_nucleotide_content": {"id": "a095cb9633695d0c", "src": "hda", "uuid": "3d44312c-d7e0-4c47-8d55-14b7b3260273"}, "raw_data|__part__|mapped_reads_gc-content_distribution": {"id": "bd411a4438f442f3", "src": "hda", "uuid": "e2475633-f163-4b5a-afcd-201b8e4eef7b"}, "raw_data|__part__|mapped_reads_clipping_profile": {"id": "6e4b8f656d805d54", "src": "hda", "uuid": "ea1049fd-da49-4d15-9421-c12275ea6f7a"}, "raw_data|__part__|insert_size_histogram": {"id": "ff8132d93a4bc44e", "src": "hda", "uuid": "3b38c3fd-2d00-4fd3-828b-2097294a802c"}, "raw_data|__part__|insert_size_across_reference": {"id": "76e57ec9ffb1ecc6", "src": "hda", "uuid": "5565b2de-f1ba-4cd4-b3b7-f7ed3e53338d"}, "raw_data|__part__|homopolymer_indels": {"id": "6647f27b6b3c595a", "src": "hda", "uuid": "27c181de-5a75-4cb3-abe8-c4d9176f8df4"}, "raw_data|__part__|duplication_rate_histogram": {"id": "112607af1b592145", "src": "hda", "uuid": "9474c279-e000-431c-85aa-9462589cf894"}, "raw_data|__part__|genome_fraction_coverage": {"id": "251d3659732848ad", "src": "hda", "uuid": "629d3071-a91e-49c4-b8f7-a2c552b15cd6"}, "raw_data|__part__|coverage_histogram": {"id": "b18842720c68db29", "src": "hda", "uuid": "ed742693-72e8-4492-8158-4539c730e619"}, "raw_data|__part__|coverage_across_reference": {"id": "3197a4e05dde1980", "src": "hda", "uuid": "975a1406-2040-428d-ad53-35c9110bc387"}, "raw_data|__part__|genome_results": {"id": "7883d5256f92af26", "src": "hda", "uuid": "9c8f31c6-c9f4-4442-89ca-019d66fde8cb"}}, "output_collections": {"raw_data": {"id": "6c97e77a4badcad1", "src": "hdca"}}, "tool_stdout": "Java memory size is set to 1200M\nLaunching application...\n\ndetected environment java options -Djava.awt.headless=true -Xmx2000m\nQualiMap v.2.2.2-dev\nBuilt on 2019-11-11 14:05\n\nSelected tool: bamqc\nAvailable memory (Mb): 60\nMax memory (Mb): 2027\nStarting bam qc....\nLoading sam header...\nLoading locator...\nLoading reference...\nOnly flagged duplicate alignments will be skipped...\nNumber of windows: 400, effective number of windows: 325\nChunk of reads size: 1000\nNumber of threads: 1\nInitializing regions from regions.gtf.....\nFound 4 regions\nFilling region references... \nProcessed 50 out of 325 windows...\nProcessed 100 out of 325 windows...\nProcessed 150 out of 325 windows...\nProcessed 200 out of 325 windows...\nProcessed 250 out of 325 windows...\nProcessed 300 out of 325 windows...\nTotal processed windows:325\nNumber of reads: 100\nNumber of valid reads: 100\nNumber of correct strand reads:0\n\nInside of regions...\nNum mapped reads: 82\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\nTime taken to analyze reads: 0\nComputing descriptors...\nnumberOfMappedBases: 6451\nreferenceSize: 650\nnumberOfSequencedBases: 5101\nnumberOfAs: 1243\nComputing per chromosome statistics...\nComputing histograms...\nOverall analysis time: 0\nend of bam qc\nComputing report...\nWriting HTML report...\nHTML report created successfully\n\nFinished\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Java memory size is set to 1200M\nLaunching application...\n\ndetected environment java options -Djava.awt.headless=true -Xmx2000m\nQualiMap v.2.2.2-dev\nBuilt on 2019-11-11 14:05\n\nSelected tool: bamqc\nAvailable memory (Mb): 60\nMax memory (Mb): 2027\nStarting bam qc....\nLoading sam header...\nLoading locator...\nLoading reference...\nOnly flagged duplicate alignments will be skipped...\nNumber of windows: 400, effective number of windows: 325\nChunk of reads size: 1000\nNumber of threads: 1\nInitializing regions from regions.gtf.....\nFound 4 regions\nFilling region references... \nProcessed 50 out of 325 windows...\nProcessed 100 out of 325 windows...\nProcessed 150 out of 325 windows...\nProcessed 200 out of 325 windows...\nProcessed 250 out of 325 windows...\nProcessed 300 out of 325 windows...\nTotal processed windows:325\nNumber of reads: 100\nNumber of valid reads: 100\nNumber of correct strand reads:0\n\nInside of regions...\nNum mapped reads: 82\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\nTime taken to analyze reads: 0\nComputing descriptors...\nnumberOfMappedBases: 6451\nreferenceSize: 650\nnumberOfSequencedBases: 5101\nnumberOfAs: 1243\nComputing per chromosome statistics...\nComputing histograms...\nOverall analysis time: 0\nend of bam qc\nComputing report...\nWriting HTML report...\nHTML report created successfully\n\nFinished\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:55:26", "plugin": "core", "name": "end_epoch", "raw_value": "1707659726.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:55:22", "plugin": "core", "name": "start_epoch", "raw_value": "1707659722.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "qualimap_bamqc/2.2.2d+galaxy3-3", "has_data": true, "data": {"tool_id": "qualimap_bamqc", "tool_version": "2.2.2d+galaxy3", "test_index": 3, "time_seconds": 64.42723846435547, "inputs": {"input1": {"src": "hda", "id": "a131468af9e3507e"}, "stats_regions|regions": {"src": "hda", "id": "955d181d0bfcfa62"}, "stats_regions|region_select": "custom_regions", "per_base_coverage": true}, "job": {"model_class": "Job", "id": "4d4e360d43403551", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:56:40.220347", "create_time": "2024-02-11T13:55:48.965783", "galaxy_version": "21.09", "command_version": "2.2.2-dev", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/qualimap_bamqc/qualimap_bamqc/2.2.2d+galaxy3", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-6764f", "command_line": "export JAVA_OPTS=\"-Djava.awt.headless=true -Xmx${GALAXY_MEMORY_MB:-1024}m\" &&   ln -s '/galaxy/server/database/objects/2/8/e/dataset_28e90c9d-c527-43c2-b446-010d49229186.dat' regions.gtf &&   ln -s '/galaxy/server/database/objects/a/5/6/dataset_a56f7159-f755-4c1d-8866-8c2030886639.dat' 'test_mapped_reads_bam' &&  qualimap bamqc -bam 'test_mapped_reads_bam' -outdir results -outformat html --collect-overlap-pairs -gff regions.gtf --output-genome-coverage results/coverage.txt -nw 400 --paint-chromosome-limits -hm 3  --skip-duplicated --skip-dup-mode 0 -nt ${GALAXY_SLOTS:-1} &&  mv results/coverage.txt '/galaxy/server/database/objects/a/1/b/dataset_a1b66db6-f597-425b-9d56-a97f72890d97.dat' &&  sed 's|images_qualimapReport/||g;s|css/||g' results/qualimapReport.html > '/galaxy/server/database/objects/4/a/9/dataset_4a9e52d3-cea5-41ae-9981-0c9787f0cf39.dat' && mkdir '/galaxy/server/database/jobs_directory/000/168/working/dataset_4a9e52d3-cea5-41ae-9981-0c9787f0cf39_files' && mv results/css/*.css '/galaxy/server/database/jobs_directory/000/168/working/dataset_4a9e52d3-cea5-41ae-9981-0c9787f0cf39_files' && mv results/css/*.png '/galaxy/server/database/jobs_directory/000/168/working/dataset_4a9e52d3-cea5-41ae-9981-0c9787f0cf39_files' && if [ -d results/images_qualimapReport ]; then mv results/images_qualimapReport/* '/galaxy/server/database/jobs_directory/000/168/working/dataset_4a9e52d3-cea5-41ae-9981-0c9787f0cf39_files' && for file in $(ls -A results/raw_data_qualimapReport); do mv \"results/raw_data_qualimapReport/$file\" `echo \"results/$file\" | sed 's/(//;s/)//'`; done fi && mv results/genome_results.txt results/summary_report.txt", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "plot_specific": "{\"genome_gc_distr\": null, \"homopolymer_size\": \"3\", \"n_bins\": \"400\", \"paint_chromosome_limits\": \"true\"}", "duplicate_skipping": "\"0\"", "per_base_coverage": "\"true\"", "stats_regions": "{\"__current_case__\": 1, \"outside_stats\": \"false\", \"region_select\": \"custom_regions\", \"regions\": {\"values\": [{\"id\": 227, \"src\": \"hda\"}]}}"}, "inputs": {"input1": {"id": "a131468af9e3507e", "src": "hda", "uuid": "a56f7159-f755-4c1d-8866-8c2030886639"}, "regions": {"id": "955d181d0bfcfa62", "src": "hda", "uuid": "28e90c9d-c527-43c2-b446-010d49229186"}}, "outputs": {"output_per_base_coverage": {"id": "ace7b78269b54771", "src": "hda", "uuid": "a1b66db6-f597-425b-9d56-a97f72890d97"}, "output_html": {"id": "6257734e49a4688b", "src": "hda", "uuid": "4a9e52d3-cea5-41ae-9981-0c9787f0cf39"}, "raw_data|__part__|mapping_quality_histogram": {"id": "e46cb467a689c179", "src": "hda", "uuid": "b63a8848-51e6-49d1-a8a8-3cd2a17c26bb"}, "raw_data|__part__|mapping_quality_across_reference": {"id": "4a33ff4957894314", "src": "hda", "uuid": "dfa2e97a-69a0-4a2e-8b70-905c9ff22e16"}, "raw_data|__part__|mapped_reads_nucleotide_content": {"id": "e6b5f87a96f982d7", "src": "hda", "uuid": "4cbf28c1-5105-4aee-bf1b-d7e5ad5e9b2f"}, "raw_data|__part__|mapped_reads_gc-content_distribution": {"id": "fc5b979a13a1aea8", "src": "hda", "uuid": "dade8272-d460-4883-9cdb-82a3111ef34b"}, "raw_data|__part__|mapped_reads_clipping_profile": {"id": "5367691762539e85", "src": "hda", "uuid": "ffc4367f-564a-426b-a0b2-88fceb82dae1"}, "raw_data|__part__|insert_size_histogram": {"id": "03884504cbf6903d", "src": "hda", "uuid": "b2304b2b-140c-43f5-9055-467c8b091013"}, "raw_data|__part__|insert_size_across_reference": {"id": "d8d2b85ed2a582cc", "src": "hda", "uuid": "c995a48f-9448-423d-827e-c3e13dec771b"}, "raw_data|__part__|homopolymer_indels": {"id": "633a095b9440c616", "src": "hda", "uuid": "fd8be798-e275-4518-9e1a-06127dda8029"}, "raw_data|__part__|duplication_rate_histogram": {"id": "05209d678472b71c", "src": "hda", "uuid": "18b632cb-20a8-4789-af71-13b822815b31"}, "raw_data|__part__|genome_fraction_coverage": {"id": "1c43bf4d5a3e6dad", "src": "hda", "uuid": "64ac22e5-e193-4cce-b80a-a4c8a88761c7"}, "raw_data|__part__|coverage_histogram": {"id": "b35d118f75d1f31c", "src": "hda", "uuid": "c63ed355-1b36-4af5-971f-62eb74ae18e4"}, "raw_data|__part__|coverage_across_reference": {"id": "9ef8f9ff915450e0", "src": "hda", "uuid": "f9f4293a-19a1-4640-b2f1-b9f3cc13f124"}, "raw_data|__part__|genome_results": {"id": "8195ba66f649d3a9", "src": "hda", "uuid": "eafeebb6-f0d8-4435-adde-9dddd9239884"}}, "output_collections": {"raw_data": {"id": "19ea402f51a73039", "src": "hdca"}}, "tool_stdout": "Java memory size is set to 1200M\nLaunching application...\n\ndetected environment java options -Djava.awt.headless=true -Xmx2000m\nQualiMap v.2.2.2-dev\nBuilt on 2019-11-11 14:05\n\nSelected tool: bamqc\nAvailable memory (Mb): 60\nMax memory (Mb): 2027\nStarting bam qc....\nLoading sam header...\nLoading locator...\nLoading reference...\nOnly flagged duplicate alignments will be skipped...\nNumber of windows: 400, effective number of windows: 325\nChunk of reads size: 1000\nNumber of threads: 1\nInitializing regions from regions.gtf.....\nFound 4 regions\nFilling region references... \nProcessed 50 out of 325 windows...\nProcessed 100 out of 325 windows...\nProcessed 150 out of 325 windows...\nProcessed 200 out of 325 windows...\nProcessed 250 out of 325 windows...\nProcessed 300 out of 325 windows...\nTotal processed windows:325\nNumber of reads: 100\nNumber of valid reads: 100\nNumber of correct strand reads:0\n\nInside of regions...\nNum mapped reads: 82\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\nTime taken to analyze reads: 0\nComputing descriptors...\nnumberOfMappedBases: 6451\nreferenceSize: 650\nnumberOfSequencedBases: 5101\nnumberOfAs: 1243\nComputing per chromosome statistics...\nComputing histograms...\nOverall analysis time: 0\nend of bam qc\nComputing report...\nWriting HTML report...\nHTML report created successfully\n\nFinished\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Java memory size is set to 1200M\nLaunching application...\n\ndetected environment java options -Djava.awt.headless=true -Xmx2000m\nQualiMap v.2.2.2-dev\nBuilt on 2019-11-11 14:05\n\nSelected tool: bamqc\nAvailable memory (Mb): 60\nMax memory (Mb): 2027\nStarting bam qc....\nLoading sam header...\nLoading locator...\nLoading reference...\nOnly flagged duplicate alignments will be skipped...\nNumber of windows: 400, effective number of windows: 325\nChunk of reads size: 1000\nNumber of threads: 1\nInitializing regions from regions.gtf.....\nFound 4 regions\nFilling region references... \nProcessed 50 out of 325 windows...\nProcessed 100 out of 325 windows...\nProcessed 150 out of 325 windows...\nProcessed 200 out of 325 windows...\nProcessed 250 out of 325 windows...\nProcessed 300 out of 325 windows...\nTotal processed windows:325\nNumber of reads: 100\nNumber of valid reads: 100\nNumber of correct strand reads:0\n\nInside of regions...\nNum mapped reads: 82\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\nTime taken to analyze reads: 0\nComputing descriptors...\nnumberOfMappedBases: 6451\nreferenceSize: 650\nnumberOfSequencedBases: 5101\nnumberOfAs: 1243\nComputing per chromosome statistics...\nComputing histograms...\nOverall analysis time: 0\nend of bam qc\nComputing report...\nWriting HTML report...\nHTML report created successfully\n\nFinished\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:56:30", "plugin": "core", "name": "end_epoch", "raw_value": "1707659790.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:56:26", "plugin": "core", "name": "start_epoch", "raw_value": "1707659786.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "qualimap_bamqc/2.2.2d+galaxy3-4", "has_data": true, "data": {"tool_id": "qualimap_bamqc", "tool_version": "2.2.2d+galaxy3", "test_index": 4, "time_seconds": 66.17356467247009, "inputs": {"input1": {"src": "hda", "id": "5104c56def04088c"}, "stats_regions|regions": {"src": "hda", "id": "9957ab1969333606"}, "stats_regions|outside_stats": true, "stats_regions|region_select": "custom_regions", "per_base_coverage": true}, "job": {"model_class": "Job", "id": "7f84208990da49f5", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:57:46.345403", "create_time": "2024-02-11T13:56:53.524465", "galaxy_version": "21.09", "command_version": "2.2.2-dev", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/qualimap_bamqc/qualimap_bamqc/2.2.2d+galaxy3", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-cdvj2", "command_line": "export JAVA_OPTS=\"-Djava.awt.headless=true -Xmx${GALAXY_MEMORY_MB:-1024}m\" &&   ln -s '/galaxy/server/database/objects/9/a/6/dataset_9a60db1c-191f-4d97-877a-48b9e76ea963.dat' regions.gtf &&   ln -s '/galaxy/server/database/objects/4/e/1/dataset_4e1b46ac-2bc3-41ef-b5be-a499bc0c17f1.dat' 'test_mapped_reads_bam' &&  qualimap bamqc -bam 'test_mapped_reads_bam' -outdir results -outformat html --collect-overlap-pairs -gff regions.gtf --outside-stats --output-genome-coverage /dev/null -nw 400 --paint-chromosome-limits -hm 3  --skip-duplicated --skip-dup-mode 0 -nt ${GALAXY_SLOTS:-1} &&  mv results/outside_coverage.txt '/galaxy/server/database/objects/6/c/2/dataset_6c2e4bcf-2314-4ae3-9129-88bfb22b1bdb.dat' &&  sed 's|images_qualimapReportOutsideRegions/||g;s|css/||g' results/qualimapReportOutsideRegions.html > '/galaxy/server/database/objects/5/3/c/dataset_53ca9f85-4b1e-4a7e-8040-f19450b1a48a.dat' && mkdir '/galaxy/server/database/jobs_directory/000/171/working/dataset_53ca9f85-4b1e-4a7e-8040-f19450b1a48a_files' && mv results/css/*.css '/galaxy/server/database/jobs_directory/000/171/working/dataset_53ca9f85-4b1e-4a7e-8040-f19450b1a48a_files' && mv results/css/*.png '/galaxy/server/database/jobs_directory/000/171/working/dataset_53ca9f85-4b1e-4a7e-8040-f19450b1a48a_files' && if [ -d results/images_qualimapReportOutsideRegions ]; then mv results/images_qualimapReportOutsideRegions/* '/galaxy/server/database/jobs_directory/000/171/working/dataset_53ca9f85-4b1e-4a7e-8040-f19450b1a48a_files' && for file in $(ls -A results/raw_data_qualimapReportOutsideRegions); do mv \"results/raw_data_qualimapReportOutsideRegions/$file\" `echo \"results/$file\" | sed 's/(//;s/)//'`; done fi && mv results/outside_results.txt results/summary_report.txt", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "plot_specific": "{\"genome_gc_distr\": null, \"homopolymer_size\": \"3\", \"n_bins\": \"400\", \"paint_chromosome_limits\": \"true\"}", "duplicate_skipping": "\"0\"", "per_base_coverage": "\"true\"", "stats_regions": "{\"__current_case__\": 1, \"outside_stats\": \"true\", \"region_select\": \"custom_regions\", \"regions\": {\"values\": [{\"id\": 244, \"src\": \"hda\"}]}}"}, "inputs": {"input1": {"id": "5104c56def04088c", "src": "hda", "uuid": "4e1b46ac-2bc3-41ef-b5be-a499bc0c17f1"}, "regions": {"id": "9957ab1969333606", "src": "hda", "uuid": "9a60db1c-191f-4d97-877a-48b9e76ea963"}}, "outputs": {"output_per_base_coverage": {"id": "90f0a0660649b773", "src": "hda", "uuid": "6c2e4bcf-2314-4ae3-9129-88bfb22b1bdb"}, "output_html": {"id": "2eecd766f1e61693", "src": "hda", "uuid": "53ca9f85-4b1e-4a7e-8040-f19450b1a48a"}, "raw_data|__part__|mapping_quality_histogram": {"id": "51c9ef8d4389b567", "src": "hda", "uuid": "d20768b1-87d9-485a-8218-791ce1f508a7"}, "raw_data|__part__|mapping_quality_across_reference": {"id": "4447ce2a87ec53fe", "src": "hda", "uuid": "8d3da65d-89c9-4997-b546-7d703387eca0"}, "raw_data|__part__|mapped_reads_nucleotide_content": {"id": "07a41f2c79ca4b97", "src": "hda", "uuid": "a755fa25-475c-40f4-b5df-65914960dcc1"}, "raw_data|__part__|mapped_reads_gc-content_distribution": {"id": "7862c431f4a7fe3c", "src": "hda", "uuid": "f327e23b-b838-4ac8-8ad3-7ee969ae0b23"}, "raw_data|__part__|mapped_reads_clipping_profile": {"id": "8ce4c7d8165f3b6a", "src": "hda", "uuid": "66e089cf-ae3a-4f6f-8e52-c9af1a9fd9b2"}, "raw_data|__part__|insert_size_histogram": {"id": "b56786805c8995bd", "src": "hda", "uuid": "874334a3-aea0-4d96-becb-598737fb79bf"}, "raw_data|__part__|insert_size_across_reference": {"id": "fcaca9ec47190c31", "src": "hda", "uuid": "c0eb2ace-7bfc-48b3-9520-019bb3ca16da"}, "raw_data|__part__|homopolymer_indels": {"id": "099d0b8e8a72e17a", "src": "hda", "uuid": "c0c7dad9-1ebc-4b83-9352-63a52e3f60fd"}, "raw_data|__part__|duplication_rate_histogram": {"id": "52b4714076e15b75", "src": "hda", "uuid": "81720fee-54eb-4727-8e2b-c57a9cad24b9"}, "raw_data|__part__|genome_fraction_coverage": {"id": "29697e206a419a0e", "src": "hda", "uuid": "f994fa68-25f4-4d2d-81b9-226c0ffd80eb"}, "raw_data|__part__|coverage_histogram": {"id": "5286ba95b1bff185", "src": "hda", "uuid": "cffaaaf4-0f9c-4af5-8159-49eb2bd22d5e"}, "raw_data|__part__|coverage_across_reference": {"id": "53e6e0fe6a96390f", "src": "hda", "uuid": "5b23ee9c-5933-49b6-86d2-276aa3af5baf"}, "raw_data|__part__|genome_results": {"id": "c7bd6e1beb2afbf9", "src": "hda", "uuid": "714c72ff-8274-40f4-91a8-1d862be40c7b"}}, "output_collections": {"raw_data": {"id": "d3aa3e21e70dd3d0", "src": "hdca"}}, "tool_stdout": "Java memory size is set to 1200M\nLaunching application...\n\ndetected environment java options -Djava.awt.headless=true -Xmx2000m\nQualiMap v.2.2.2-dev\nBuilt on 2019-11-11 14:05\n\nSelected tool: bamqc\nAvailable memory (Mb): 60\nMax memory (Mb): 2027\nStarting bam qc....\nLoading sam header...\nLoading locator...\nLoading reference...\nOnly flagged duplicate alignments will be skipped...\nNumber of windows: 400, effective number of windows: 325\nChunk of reads size: 1000\nNumber of threads: 1\nInitializing regions from regions.gtf.....\nFound 4 regions\nFilling region references... \nProcessed 50 out of 325 windows...\nProcessed 100 out of 325 windows...\nProcessed 150 out of 325 windows...\nProcessed 200 out of 325 windows...\nProcessed 250 out of 325 windows...\nProcessed 300 out of 325 windows...\nTotal processed windows:325\nNumber of reads: 100\nNumber of valid reads: 100\nNumber of correct strand reads:0\n\nInside of regions...\nNum mapped reads: 82\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\n\nOuside of regions...\nNum mapped reads: 18\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\nTime taken to analyze reads: 0\nComputing descriptors...\nnumberOfMappedBases: 6451\nreferenceSize: 650\nnumberOfSequencedBases: 5101\nnumberOfAs: 1243\nComputing per chromosome statistics...\nComputing histograms...\nComputing descriptors for outside regions...\nnumberOfMappedBases: 6214\nreferenceSize: 650\nnumberOfSequencedBases: 2364\nnumberOfAs: 667\nComputing per chromosome statistics for outside regions...\nComputing histograms for outside regions...\nOverall analysis time: 0\nend of bam qc\nComputing report...\nWriting HTML report...\nHTML report created successfully\n\nFinished\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Java memory size is set to 1200M\nLaunching application...\n\ndetected environment java options -Djava.awt.headless=true -Xmx2000m\nQualiMap v.2.2.2-dev\nBuilt on 2019-11-11 14:05\n\nSelected tool: bamqc\nAvailable memory (Mb): 60\nMax memory (Mb): 2027\nStarting bam qc....\nLoading sam header...\nLoading locator...\nLoading reference...\nOnly flagged duplicate alignments will be skipped...\nNumber of windows: 400, effective number of windows: 325\nChunk of reads size: 1000\nNumber of threads: 1\nInitializing regions from regions.gtf.....\nFound 4 regions\nFilling region references... \nProcessed 50 out of 325 windows...\nProcessed 100 out of 325 windows...\nProcessed 150 out of 325 windows...\nProcessed 200 out of 325 windows...\nProcessed 250 out of 325 windows...\nProcessed 300 out of 325 windows...\nTotal processed windows:325\nNumber of reads: 100\nNumber of valid reads: 100\nNumber of correct strand reads:0\n\nInside of regions...\nNum mapped reads: 82\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\n\nOuside of regions...\nNum mapped reads: 18\nNum mapped first of pair: 0\nNum mapped second of pair: 0\nNum singletons: 0\nTime taken to analyze reads: 0\nComputing descriptors...\nnumberOfMappedBases: 6451\nreferenceSize: 650\nnumberOfSequencedBases: 5101\nnumberOfAs: 1243\nComputing per chromosome statistics...\nComputing histograms...\nComputing descriptors for outside regions...\nnumberOfMappedBases: 6214\nreferenceSize: 650\nnumberOfSequencedBases: 2364\nnumberOfAs: 667\nComputing per chromosome statistics for outside regions...\nComputing histograms for outside regions...\nOverall analysis time: 0\nend of bam qc\nComputing report...\nWriting HTML report...\nHTML report created successfully\n\nFinished\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "5 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "5.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:57:36", "plugin": "core", "name": "end_epoch", "raw_value": "1707659856.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:57:31", "plugin": "core", "name": "start_epoch", "raw_value": "1707659851.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.2+galaxy2-0", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.2+galaxy2", "test_index": 0, "time_seconds": 61.463719606399536, "inputs": {"input": {"src": "hda", "id": "b998090193e2466a"}, "addref_cond|ref": {"src": "hda", "id": "f4b5edbbda239f00"}, "addref_cond|addref_select": "history"}, "job": {"model_class": "Job", "id": "906cc212e182fc7c", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:58:50.578950", "create_time": "2024-02-11T13:58:00.947577", "galaxy_version": "21.09", "command_version": "Version: 1.9 (using htslib 1.9)", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.2+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-kh5vm", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/5/a/8/dataset_5a83925d-eecf-4aff-8793-f3a9b179b44f.dat' infile &&   ln -s '/galaxy/server/database/objects/8/4/a/dataset_84a80bd3-5ff4-4750-999c-65db1e847c61.dat' reference.fa && samtools faidx reference.fa &&  samtools stats   --ref-seq 'reference.fa'     -@ $addthreads infile   > '/galaxy/server/database/objects/4/e/b/dataset_4eb7ca49-8828-4154-9fc4-c2247787c433.dat'", "traceback": null, "params": {"__input_ext": "\"sam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "\"false\"", "sparse": "\"false\"", "cond_region": "{\"__current_case__\": 0, \"select_region\": \"no\"}", "addref_cond": "{\"__current_case__\": 2, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 261, \"src\": \"hda\"}]}}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "\"false\"", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "b998090193e2466a", "src": "hda", "uuid": "5a83925d-eecf-4aff-8793-f3a9b179b44f"}, "ref": {"id": "f4b5edbbda239f00", "src": "hda", "uuid": "84a80bd3-5ff4-4750-999c-65db1e847c61"}}, "outputs": {"output": {"id": "721469d9f1682722", "src": "hda", "uuid": "4eb7ca49-8828-4154-9fc4-c2247787c433"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:58:41", "plugin": "core", "name": "end_epoch", "raw_value": "1707659921.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:58:41", "plugin": "core", "name": "start_epoch", "raw_value": "1707659921.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.2+galaxy2-1", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.2+galaxy2", "test_index": 1, "time_seconds": 57.97645330429077, "inputs": {"input": {"src": "hda", "id": "a1eacebbe8801ebd"}, "addref_cond|ref": {"src": "hda", "id": "0749b42ef9cd5672"}, "addref_cond|addref_select": "history"}, "job": {"model_class": "Job", "id": "328dd64f7c02f64d", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:59:48.732088", "create_time": "2024-02-11T13:59:01.992229", "galaxy_version": "21.09", "command_version": "Version: 1.9 (using htslib 1.9)", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.2+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-69x8l", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/b/7/2/dataset_b721a529-2b44-4cd3-bbac-c7fae652fa68.dat' infile &&   ln -s '/galaxy/server/database/objects/4/0/5/dataset_4051b2c7-1dcc-4365-9f44-2ccfdfbe663c.dat' reference.fa && samtools faidx reference.fa &&  samtools stats   --ref-seq 'reference.fa'     -@ $addthreads infile   > '/galaxy/server/database/objects/4/5/8/dataset_458e2480-0007-4399-9816-1f604c2b3a7d.dat'", "traceback": null, "params": {"__input_ext": "\"sam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "\"false\"", "sparse": "\"false\"", "cond_region": "{\"__current_case__\": 0, \"select_region\": \"no\"}", "addref_cond": "{\"__current_case__\": 2, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 264, \"src\": \"hda\"}]}}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "\"false\"", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "a1eacebbe8801ebd", "src": "hda", "uuid": "b721a529-2b44-4cd3-bbac-c7fae652fa68"}, "ref": {"id": "0749b42ef9cd5672", "src": "hda", "uuid": "4051b2c7-1dcc-4365-9f44-2ccfdfbe663c"}}, "outputs": {"output": {"id": "2f111ff772696270", "src": "hda", "uuid": "458e2480-0007-4399-9816-1f604c2b3a7d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 13:59:39", "plugin": "core", "name": "end_epoch", "raw_value": "1707659979.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:59:39", "plugin": "core", "name": "start_epoch", "raw_value": "1707659979.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.2+galaxy2-10", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.2+galaxy2", "test_index": 10, "time_seconds": 59.31102633476257, "inputs": {"input": {"src": "hda", "id": "b9cabc68705fba3a"}, "addref_cond|addref_select": "no", "cond_region|targetregions": {"src": "hda", "id": "8265f0cb23f4f6e9"}, "cond_region|select_region": "tab", "remove_overlaps": true}, "job": {"model_class": "Job", "id": "01ae15a379c9d2be", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:08:38.521895", "create_time": "2024-02-11T14:07:51.328529", "galaxy_version": "21.09", "command_version": "Version: 1.9 (using htslib 1.9)", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.2+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-cpqsn", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/c/6/c/dataset_c6c4d5cf-5414-465c-b151-1a274c1751d7.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/9/d/0/metadata_9d03061f-0879-4015-82b5-46b02b3adfb9.dat' infile.bai &&    samtools stats     -t '/galaxy/server/database/objects/f/f/8/dataset_ff8ae787-a527-48e3-a9bf-1c91ffd09d08.dat'  -p -@ $addthreads infile   > '/galaxy/server/database/objects/5/2/6/dataset_52658813-cf42-4ef1-b1a3-8f72def737bc.dat'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "\"true\"", "sparse": "\"false\"", "cond_region": "{\"__current_case__\": 2, \"select_region\": \"tab\", \"targetregions\": {\"values\": [{\"id\": 289, \"src\": \"hda\"}]}}", "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "\"false\"", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "b9cabc68705fba3a", "src": "hda", "uuid": "c6c4d5cf-5414-465c-b151-1a274c1751d7"}, "targetregions": {"id": "8265f0cb23f4f6e9", "src": "hda", "uuid": "ff8ae787-a527-48e3-a9bf-1c91ffd09d08"}}, "outputs": {"output": {"id": "f8700431daf46bd6", "src": "hda", "uuid": "52658813-cf42-4ef1-b1a3-8f72def737bc"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 14:08:29", "plugin": "core", "name": "end_epoch", "raw_value": "1707660509.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:08:29", "plugin": "core", "name": "start_epoch", "raw_value": "1707660509.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.2+galaxy2-11", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.2+galaxy2", "test_index": 11, "time_seconds": 59.44597816467285, "inputs": {"input": {"src": "hda", "id": "d46d51c80b6c3142"}, "addref_cond|ref": {"src": "hda", "id": "6cd9ce5b2a1cc91a"}, "addref_cond|addref_select": "history"}, "job": {"model_class": "Job", "id": "2e4002d6a76f6c70", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:09:37.756319", "create_time": "2024-02-11T14:08:50.708523", "galaxy_version": "21.09", "command_version": "Version: 1.9 (using htslib 1.9)", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.2+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-gf62h", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/2/5/7/dataset_257f8e47-9fe0-40e4-aaac-cd74ef36282c.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/f/d/0/metadata_fd06d904-6df3-4019-8e96-6a3273921fe1.dat' infile.bai &&   ln -s '/galaxy/server/database/objects/5/a/0/dataset_5a0c8b08-b9a5-480d-a293-aaf9b44343d2.dat' reference.fa && samtools faidx reference.fa &&  samtools stats   --ref-seq 'reference.fa'     -@ $addthreads infile   > '/galaxy/server/database/objects/e/6/0/dataset_e60a55a8-a892-485d-aecd-92bfb9670469.dat'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "\"false\"", "sparse": "\"false\"", "cond_region": "{\"__current_case__\": 0, \"select_region\": \"no\"}", "addref_cond": "{\"__current_case__\": 2, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 292, \"src\": \"hda\"}]}}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "\"false\"", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "d46d51c80b6c3142", "src": "hda", "uuid": "257f8e47-9fe0-40e4-aaac-cd74ef36282c"}, "ref": {"id": "6cd9ce5b2a1cc91a", "src": "hda", "uuid": "5a0c8b08-b9a5-480d-a293-aaf9b44343d2"}}, "outputs": {"output": {"id": "7904658714d72a08", "src": "hda", "uuid": "e60a55a8-a892-485d-aecd-92bfb9670469"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 14:09:28", "plugin": "core", "name": "end_epoch", "raw_value": "1707660568.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:09:28", "plugin": "core", "name": "start_epoch", "raw_value": "1707660568.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.2+galaxy2-12", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.2+galaxy2", "test_index": 12, "time_seconds": 55.223345041275024, "inputs": {"input": {"src": "hda", "id": "58b5f055faa8f1cc"}, "split_output_cond|generate_tables": ["SN", "MPC", "GCC"], "split_output_cond|split_output_selector": "yes", "addref_cond|ref": {"src": "hda", "id": "2c225db7539f9a8a"}, "addref_cond|addref_select": "history"}, "job": {"model_class": "Job", "id": "90a072b763658d2e", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:10:32.582186", "create_time": "2024-02-11T14:09:51.038779", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.2+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-sv7bb", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/c/8/8/dataset_c88ce111-26ed-4320-9fbc-5a8cea08ee41.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/7/f/5/metadata_7f549a8c-43a2-490f-9244-fbcebf5ed06b.dat' infile.bai &&   ln -s '/galaxy/server/database/objects/5/1/9/dataset_5191ad31-82e3-45c0-b484-a0d3c480d492.dat' reference.fa && samtools faidx reference.fa &&  samtools stats   --ref-seq 'reference.fa'     -@ $addthreads infile   > 'XXXX'  && mkdir split && name=`cat 'XXXX' | grep '\\^SN' | cut -d'.' -f 1 | sed 's/^# //'` && awk '/\\^/{out=0} /\\^SN/{out=1} {if(out==1){print $0}}' 'XXXX' | sed 's/Use `grep .*` to extract this part.//' | sed 's/SN\\t//' > \"split/$name.tab\" && name=`cat 'XXXX' | grep '\\^MPC' | cut -d'.' -f 1 | sed 's/^# //'` && awk '/\\^/{out=0} /\\^MPC/{out=1} {if(out==1){print $0}}' 'XXXX' | sed 's/Use `grep .*` to extract this part.//' | sed 's/MPC\\t//' > \"split/$name.tab\" && name=`cat 'XXXX' | grep '\\^GCC' | cut -d'.' -f 1 | sed 's/^# //'` && awk '/\\^/{out=0} /\\^GCC/{out=1} {if(out==1){print $0}}' 'XXXX' | sed 's/Use `grep .*` to extract this part.//' | sed 's/GCC\\t//' > \"split/$name.tab\"", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "\"false\"", "sparse": "\"false\"", "cond_region": "{\"__current_case__\": 0, \"select_region\": \"no\"}", "addref_cond": "{\"__current_case__\": 2, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 295, \"src\": \"hda\"}]}}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 1, \"generate_tables\": [\"SN\", \"MPC\", \"GCC\"], \"split_output_selector\": \"yes\"}", "remove_dups": "\"false\"", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "58b5f055faa8f1cc", "src": "hda", "uuid": "c88ce111-26ed-4320-9fbc-5a8cea08ee41"}, "ref": {"id": "2c225db7539f9a8a", "src": "hda", "uuid": "5191ad31-82e3-45c0-b484-a0d3c480d492"}}, "outputs": {"__new_primary_file_output_collection|Summary Numbers__": {"id": "a1c66d911e26ba00", "src": "hda", "uuid": "f9b87a41-83c4-4df7-b86c-45539787b6bc"}, "__new_primary_file_output_collection|Mismatches per cycle and quality__": {"id": "02553b83e10ea343", "src": "hda", "uuid": "bb7f4dba-0de2-4a89-9f34-10af350fbe52"}, "__new_primary_file_output_collection|ACGT content per cycle__": {"id": "f8a911c4b170cb40", "src": "hda", "uuid": "60ac90db-fc8e-4787-9be0-20b16170e999"}}, "output_collections": {"output_collection": {"id": "635dbe87b14a18ac", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 14:10:28", "plugin": "core", "name": "end_epoch", "raw_value": "1707660628.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:10:28", "plugin": "core", "name": "start_epoch", "raw_value": "1707660628.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.2+galaxy2-2", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.2+galaxy2", "test_index": 2, "time_seconds": 59.47886657714844, "inputs": {"input": {"src": "hda", "id": "bdc4606c92fe797c"}, "insert_size": "0", "addref_cond|ref": {"src": "hda", "id": "0531cf961d87e7c8"}, "addref_cond|addref_select": "history"}, "job": {"model_class": "Job", "id": "f644ee9eba8fcbdc", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:00:48.260258", "create_time": "2024-02-11T14:00:00.583955", "galaxy_version": "21.09", "command_version": "Version: 1.9 (using htslib 1.9)", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.2+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-ckcjl", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/4/3/4/dataset_4348c2c9-f64b-4297-859d-340fcbc35be0.dat' infile &&   ln -s '/galaxy/server/database/objects/d/4/2/dataset_d428eb9c-e122-4e65-b091-6253aa392d71.dat' reference.fa && samtools faidx reference.fa &&  samtools stats  --insert-size 0  --ref-seq 'reference.fa'     -@ $addthreads infile   > '/galaxy/server/database/objects/5/f/8/dataset_5f880033-ed81-4fa3-9bf9-b7946f9a369d.dat'", "traceback": null, "params": {"__input_ext": "\"sam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "\"false\"", "sparse": "\"false\"", "cond_region": "{\"__current_case__\": 0, \"select_region\": \"no\"}", "addref_cond": "{\"__current_case__\": 2, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 267, \"src\": \"hda\"}]}}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "insert_size": "\"0\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "\"false\"", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "bdc4606c92fe797c", "src": "hda", "uuid": "4348c2c9-f64b-4297-859d-340fcbc35be0"}, "ref": {"id": "0531cf961d87e7c8", "src": "hda", "uuid": "d428eb9c-e122-4e65-b091-6253aa392d71"}}, "outputs": {"output": {"id": "94f9408eea0e6a84", "src": "hda", "uuid": "5f880033-ed81-4fa3-9bf9-b7946f9a369d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 14:00:39", "plugin": "core", "name": "end_epoch", "raw_value": "1707660039.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:00:39", "plugin": "core", "name": "start_epoch", "raw_value": "1707660039.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.2+galaxy2-3", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.2+galaxy2", "test_index": 3, "time_seconds": 60.637152910232544, "inputs": {"input": {"src": "hda", "id": "ece3529766f0b255"}, "addref_cond|addref_select": "no", "cond_region|targetregions": {"src": "hda", "id": "34cfd939783efdd9"}, "cond_region|select_region": "tab"}, "job": {"model_class": "Job", "id": "0fc376c53d669ae7", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:01:48.613115", "create_time": "2024-02-11T14:01:00.242075", "galaxy_version": "21.09", "command_version": "Version: 1.9 (using htslib 1.9)", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.2+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-ghjqm", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/5/1/f/dataset_51fe03ef-f5bf-4ec2-a122-bb07b78f1435.dat' infile &&    samtools stats     -t '/galaxy/server/database/objects/a/c/a/dataset_acaaf6ce-6163-4c1f-8a67-f1b9ebabb0f2.dat'   -@ $addthreads infile   > '/galaxy/server/database/objects/d/1/a/dataset_d1afec83-48d2-416e-895c-7962c69a1bed.dat'", "traceback": null, "params": {"__input_ext": "\"sam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "\"false\"", "sparse": "\"false\"", "cond_region": "{\"__current_case__\": 2, \"select_region\": \"tab\", \"targetregions\": {\"values\": [{\"id\": 270, \"src\": \"hda\"}]}}", "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "\"false\"", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "ece3529766f0b255", "src": "hda", "uuid": "51fe03ef-f5bf-4ec2-a122-bb07b78f1435"}, "targetregions": {"id": "34cfd939783efdd9", "src": "hda", "uuid": "acaaf6ce-6163-4c1f-8a67-f1b9ebabb0f2"}}, "outputs": {"output": {"id": "dc88defb6dd93d04", "src": "hda", "uuid": "d1afec83-48d2-416e-895c-7962c69a1bed"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 14:01:39", "plugin": "core", "name": "end_epoch", "raw_value": "1707660099.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:01:39", "plugin": "core", "name": "start_epoch", "raw_value": "1707660099.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.2+galaxy2-4", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.2+galaxy2", "test_index": 4, "time_seconds": 57.32911205291748, "inputs": {"input": {"src": "hda", "id": "8bb7e87f59097563"}, "addref_cond|addref_select": "no", "cond_region|regions_repeat_0|region": "ref1:10-24", "cond_region|regions_repeat_1|region": "ref1:30-46", "cond_region|regions_repeat_2|region": "ref1:39-56", "cond_region|select_region": "text"}, "job": {"model_class": "Job", "id": "3527b370ae533000", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:02:46.751062", "create_time": "2024-02-11T14:01:59.804669", "galaxy_version": "21.09", "command_version": "Version: 1.9 (using htslib 1.9)", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.2+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-cxlcc", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/a/d/2/dataset_ad2f747c-2025-4034-a5e5-ea23e05d178b.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/9/9/7/metadata_99706871-14f9-42f7-8aa6-09edd3fde1ef.dat' infile.bai &&    samtools stats       -@ $addthreads infile  'ref1:10-24' 'ref1:30-46' 'ref1:39-56'  > '/galaxy/server/database/objects/b/a/3/dataset_ba3b824b-047f-41f2-ae27-eabb9afe3507.dat'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "\"false\"", "sparse": "\"false\"", "cond_region": "{\"__current_case__\": 1, \"regions_repeat\": [{\"__index__\": 0, \"region\": \"ref1:10-24\"}, {\"__index__\": 1, \"region\": \"ref1:30-46\"}, {\"__index__\": 2, \"region\": \"ref1:39-56\"}], \"select_region\": \"text\"}", "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "\"false\"", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "8bb7e87f59097563", "src": "hda", "uuid": "ad2f747c-2025-4034-a5e5-ea23e05d178b"}}, "outputs": {"output": {"id": "bac61269b05f42fd", "src": "hda", "uuid": "ba3b824b-047f-41f2-ae27-eabb9afe3507"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 14:02:37", "plugin": "core", "name": "end_epoch", "raw_value": "1707660157.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:02:37", "plugin": "core", "name": "start_epoch", "raw_value": "1707660157.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.2+galaxy2-5", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.2+galaxy2", "test_index": 5, "time_seconds": 57.402459383010864, "inputs": {"input": {"src": "hda", "id": "6dc078908756ce27"}, "addref_cond|addref_select": "no", "cond_region|targetregions": {"src": "hda", "id": "20b7bca642ec39da"}, "cond_region|select_region": "tab", "cov_threshold": "4"}, "job": {"model_class": "Job", "id": "4563b7b1081b95df", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:03:44.082353", "create_time": "2024-02-11T14:02:58.136770", "galaxy_version": "21.09", "command_version": "Version: 1.9 (using htslib 1.9)", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.2+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-mkd5c", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/7/4/6/dataset_7461188c-86a0-4d74-b265-5b089c1e0696.dat' infile &&    samtools stats     -t '/galaxy/server/database/objects/7/e/0/dataset_7e0df849-de22-409b-9ed6-7495a48fef44.dat'   -g 4 -@ $addthreads infile   > '/galaxy/server/database/objects/b/5/2/dataset_b52ff3d2-b745-424f-93c1-d7730fc9b8a3.dat'", "traceback": null, "params": {"__input_ext": "\"sam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"4\"", "remove_overlaps": "\"false\"", "sparse": "\"false\"", "cond_region": "{\"__current_case__\": 2, \"select_region\": \"tab\", \"targetregions\": {\"values\": [{\"id\": 275, \"src\": \"hda\"}]}}", "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "\"false\"", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "6dc078908756ce27", "src": "hda", "uuid": "7461188c-86a0-4d74-b265-5b089c1e0696"}, "targetregions": {"id": "20b7bca642ec39da", "src": "hda", "uuid": "7e0df849-de22-409b-9ed6-7495a48fef44"}}, "outputs": {"output": {"id": "8e6263035ba02513", "src": "hda", "uuid": "b52ff3d2-b745-424f-93c1-d7730fc9b8a3"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 14:03:35", "plugin": "core", "name": "end_epoch", "raw_value": "1707660215.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:03:35", "plugin": "core", "name": "start_epoch", "raw_value": "1707660215.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.2+galaxy2-6", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.2+galaxy2", "test_index": 6, "time_seconds": 58.23729467391968, "inputs": {"input": {"src": "hda", "id": "6eaa06ba63cf39c5"}, "addref_cond|addref_select": "no", "cond_region|regions_repeat_0|region": "ref1:10-24", "cond_region|regions_repeat_1|region": "ref1:30-46", "cond_region|regions_repeat_2|region": "ref1:39-56", "cond_region|select_region": "text", "cov_threshold": "4"}, "job": {"model_class": "Job", "id": "3f156295eae67048", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:04:42.491334", "create_time": "2024-02-11T14:03:55.271520", "galaxy_version": "21.09", "command_version": "Version: 1.9 (using htslib 1.9)", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.2+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-cqnjq", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/3/c/a/dataset_3cac5bed-b955-46bb-9014-8d96386c62ec.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/d/2/2/metadata_d221949f-2163-4147-8b9c-06b1bfa6fd89.dat' infile.bai &&    samtools stats       -g 4 -@ $addthreads infile  'ref1:10-24' 'ref1:30-46' 'ref1:39-56'  > '/galaxy/server/database/objects/7/4/e/dataset_74e9ec51-961b-4a67-93b1-53326a7c87c0.dat'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"4\"", "remove_overlaps": "\"false\"", "sparse": "\"false\"", "cond_region": "{\"__current_case__\": 1, \"regions_repeat\": [{\"__index__\": 0, \"region\": \"ref1:10-24\"}, {\"__index__\": 1, \"region\": \"ref1:30-46\"}, {\"__index__\": 2, \"region\": \"ref1:39-56\"}], \"select_region\": \"text\"}", "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "\"false\"", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "6eaa06ba63cf39c5", "src": "hda", "uuid": "3cac5bed-b955-46bb-9014-8d96386c62ec"}}, "outputs": {"output": {"id": "19e0bb10bca676fb", "src": "hda", "uuid": "74e9ec51-961b-4a67-93b1-53326a7c87c0"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 14:04:33", "plugin": "core", "name": "end_epoch", "raw_value": "1707660273.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:04:33", "plugin": "core", "name": "start_epoch", "raw_value": "1707660273.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.2+galaxy2-7", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.2+galaxy2", "test_index": 7, "time_seconds": 58.927852630615234, "inputs": {"input": {"src": "hda", "id": "556551afe936a6ff"}, "addref_cond|addref_select": "no", "cond_region|targetregions": {"src": "hda", "id": "326eb02275b497b7"}, "cond_region|select_region": "tab"}, "job": {"model_class": "Job", "id": "7e2267355d5ab6bf", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:05:41.681642", "create_time": "2024-02-11T14:04:54.804648", "galaxy_version": "21.09", "command_version": "Version: 1.9 (using htslib 1.9)", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.2+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-xt4vt", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/7/5/7/dataset_7574da0f-8854-4529-9d72-30c31cb03876.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/1/3/f/metadata_13f88d3f-1a34-4ed0-ba60-58d07a7da7a6.dat' infile.bai &&    samtools stats     -t '/galaxy/server/database/objects/4/8/0/dataset_480d3f9b-258d-4f80-9602-46105d6b0648.dat'   -@ $addthreads infile   > '/galaxy/server/database/objects/9/2/9/dataset_9295cb34-fd3b-46dd-a482-f0dd46770375.dat'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "\"false\"", "sparse": "\"false\"", "cond_region": "{\"__current_case__\": 2, \"select_region\": \"tab\", \"targetregions\": {\"values\": [{\"id\": 280, \"src\": \"hda\"}]}}", "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "\"false\"", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "556551afe936a6ff", "src": "hda", "uuid": "7574da0f-8854-4529-9d72-30c31cb03876"}, "targetregions": {"id": "326eb02275b497b7", "src": "hda", "uuid": "480d3f9b-258d-4f80-9602-46105d6b0648"}}, "outputs": {"output": {"id": "1a774ef86bdac6b0", "src": "hda", "uuid": "9295cb34-fd3b-46dd-a482-f0dd46770375"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 14:05:33", "plugin": "core", "name": "end_epoch", "raw_value": "1707660333.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:05:32", "plugin": "core", "name": "start_epoch", "raw_value": "1707660332.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.2+galaxy2-8", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.2+galaxy2", "test_index": 8, "time_seconds": 58.15237331390381, "inputs": {"input": {"src": "hda", "id": "87b97c390bfc21fe"}, "addref_cond|addref_select": "no", "cond_region|targetregions": {"src": "hda", "id": "6b876e09e980d821"}, "cond_region|select_region": "tab", "remove_overlaps": true}, "job": {"model_class": "Job", "id": "cb12e8e2987d00f5", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:06:39.934213", "create_time": "2024-02-11T14:05:53.083944", "galaxy_version": "21.09", "command_version": "Version: 1.9 (using htslib 1.9)", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.2+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-gjsg7", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/f/8/b/dataset_f8b7442a-10fa-4fea-8f9d-2371be82fc32.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/3/6/8/metadata_368468e6-0f79-409d-a171-075f7a011ec3.dat' infile.bai &&    samtools stats     -t '/galaxy/server/database/objects/6/b/5/dataset_6b503f78-169d-4f1d-a8d6-a98dee901948.dat'  -p -@ $addthreads infile   > '/galaxy/server/database/objects/4/0/d/dataset_40d5119a-1e4f-4602-9564-158ae6777fab.dat'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "\"true\"", "sparse": "\"false\"", "cond_region": "{\"__current_case__\": 2, \"select_region\": \"tab\", \"targetregions\": {\"values\": [{\"id\": 283, \"src\": \"hda\"}]}}", "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "\"false\"", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "87b97c390bfc21fe", "src": "hda", "uuid": "f8b7442a-10fa-4fea-8f9d-2371be82fc32"}, "targetregions": {"id": "6b876e09e980d821", "src": "hda", "uuid": "6b503f78-169d-4f1d-a8d6-a98dee901948"}}, "outputs": {"output": {"id": "f0b8d2430a476249", "src": "hda", "uuid": "40d5119a-1e4f-4602-9564-158ae6777fab"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 14:06:31", "plugin": "core", "name": "end_epoch", "raw_value": "1707660391.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:06:31", "plugin": "core", "name": "start_epoch", "raw_value": "1707660391.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_stats/2.0.2+galaxy2-9", "has_data": true, "data": {"tool_id": "samtools_stats", "tool_version": "2.0.2+galaxy2", "test_index": 9, "time_seconds": 58.965232372283936, "inputs": {"input": {"src": "hda", "id": "a4461bdc77077ee8"}, "addref_cond|addref_select": "no", "cond_region|targetregions": {"src": "hda", "id": "5b1e6ae865c49e19"}, "cond_region|select_region": "tab"}, "job": {"model_class": "Job", "id": "ca45cc43094dce6f", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:07:39.182412", "create_time": "2024-02-11T14:06:51.868376", "galaxy_version": "21.09", "command_version": "Version: 1.9 (using htslib 1.9)", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.2+galaxy2", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-lkf8n", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/a/8/d/dataset_a8d995e5-ccda-4487-97ac-9bbee9c348df.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/b/c/7/metadata_bc73c450-285c-414c-8004-422715f11458.dat' infile.bai &&    samtools stats     -t '/galaxy/server/database/objects/8/d/1/dataset_8d103303-4bd1-44ff-ac43-7d99b214a51b.dat'   -@ $addthreads infile   > '/galaxy/server/database/objects/9/9/5/dataset_995a6beb-583a-4478-8368-2d090af9aeef.dat'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "cov_threshold": "\"\"", "remove_overlaps": "\"false\"", "sparse": "\"false\"", "cond_region": "{\"__current_case__\": 2, \"select_region\": \"tab\", \"targetregions\": {\"values\": [{\"id\": 286, \"src\": \"hda\"}]}}", "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}", "trim_quality": "\"\"", "most_inserts": "\"\"", "read_length": "\"\"", "insert_size": "\"\"", "gc_depth": "\"\"", "filter_by_flags": "{\"__current_case__\": 1, \"filter_flags\": \"nofilter\"}", "split_output_cond": "{\"__current_case__\": 0, \"split_output_selector\": \"no\"}", "remove_dups": "\"false\"", "coverage_cond": "{\"__current_case__\": 0, \"coverage_select\": \"no\"}"}, "inputs": {"input": {"id": "a4461bdc77077ee8", "src": "hda", "uuid": "a8d995e5-ccda-4487-97ac-9bbee9c348df"}, "targetregions": {"id": "5b1e6ae865c49e19", "src": "hda", "uuid": "8d103303-4bd1-44ff-ac43-7d99b214a51b"}}, "outputs": {"output": {"id": "ecd6d838e6b13f74", "src": "hda", "uuid": "995a6beb-583a-4478-8368-2d090af9aeef"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 14:07:29", "plugin": "core", "name": "end_epoch", "raw_value": "1707660449.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:07:29", "plugin": "core", "name": "start_epoch", "raw_value": "1707660449.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-0", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 0, "time_seconds": 66.15401577949524, "inputs": {"singtabop|input": {"src": "hda", "id": "5cadd8ea31b42b73"}, "singtabop|user|select_cols_wanted": "2:4,2,2", "singtabop|user|select_rows_wanted": "2:5,3,3", "singtabop|user|select_keepdupe": "select_cols_keepdupe", "singtabop|user|mode": "select", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "f5e4d32bb041b3d3", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:42:16.834034", "create_time": "2024-02-11T12:41:21.422348", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-frm2v", "command_line": "cp '/galaxy/server/database/jobs_directory/000/2/configs/tmppz8_dm27' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 1, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 1, \"mode\": \"select\", \"select_cols_wanted\": \"2:4,2,2\", \"select_keepdupe\": \"select_cols_keepdupe\", \"select_rows_wanted\": \"2:5,3,3\"}}"}, "inputs": {"input": {"id": "5cadd8ea31b42b73", "src": "hda", "uuid": "e57f3449-f270-441b-bb75-ee160894ac6c"}}, "outputs": {"table": {"id": "f5e4d32bb041b3d3", "src": "hda", "uuid": "9109469f-e3b0-4a93-a01d-24da676c3c22"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:42:06", "plugin": "core", "name": "end_epoch", "raw_value": "1707655326.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:42:05", "plugin": "core", "name": "start_epoch", "raw_value": "1707655325.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-1", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 1, "time_seconds": 58.23609113693237, "inputs": {"singtabop|input": {"src": "hda", "id": "9ddd1728ccb8a0d2"}, "singtabop|user|select_cols_wanted": "2:4,2,2", "singtabop|user|select_keepdupe": ["select_cols_keepdupe", "select_rows_keepdupe"], "singtabop|user|mode": "select", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "acd22a4b1caeba47", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:43:15.100699", "create_time": "2024-02-11T12:42:27.166157", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-rxms8", "command_line": "cp '/galaxy/server/database/jobs_directory/000/4/configs/tmpplzqclav' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 3, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 1, \"mode\": \"select\", \"select_cols_wanted\": \"2:4,2,2\", \"select_keepdupe\": [\"select_cols_keepdupe\", \"select_rows_keepdupe\"], \"select_rows_wanted\": null}}"}, "inputs": {"input": {"id": "9ddd1728ccb8a0d2", "src": "hda", "uuid": "3a241169-99cb-4336-8934-4b4aa536d741"}}, "outputs": {"table": {"id": "acd22a4b1caeba47", "src": "hda", "uuid": "a143a513-69e5-45dd-a605-5b9d7fc5b5e8"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:43:06", "plugin": "core", "name": "end_epoch", "raw_value": "1707655386.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:43:05", "plugin": "core", "name": "start_epoch", "raw_value": "1707655385.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-10", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 10, "time_seconds": 57.08181166648865, "inputs": {"singtabop|input": {"src": "hda", "id": "ec32dc097d049aba"}, "singtabop|user|element|scale_op": "mod", "singtabop|user|element|scale_value": "5", "singtabop|user|element|mode": "scale", "singtabop|user|elem_val|element_op": "None", "singtabop|user|mode": "element", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "9900c37941852bc1", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:52:00.873610", "create_time": "2024-02-11T12:51:13.625946", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-zk7d5", "command_line": "cp '/galaxy/server/database/jobs_directory/000/22/configs/tmpi_fjq_xi' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 21, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 0, \"element_op\": \"None\"}, \"element\": {\"__current_case__\": 2, \"mode\": \"scale\", \"scale_op\": \"mod\", \"scale_value\": \"5.0\"}, \"mode\": \"element\"}}"}, "inputs": {"input": {"id": "ec32dc097d049aba", "src": "hda", "uuid": "ffdc83c3-73c0-48c1-bb0d-ff6c9988914e"}}, "outputs": {"table": {"id": "9900c37941852bc1", "src": "hda", "uuid": "af260434-2a8a-4598-bbe4-cecc9af12d71"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:51:50", "plugin": "core", "name": "start_epoch", "raw_value": "1707655910.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:51:51", "plugin": "core", "name": "end_epoch", "raw_value": "1707655911.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-11", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 11, "time_seconds": 59.10844373703003, "inputs": {"singtabop|input": {"src": "hda", "id": "975d7e9658720d74"}, "singtabop|user|matrixapply_func|custom_func": "vec.sum()+vec.median()", "singtabop|user|matrixapply_func|vector_op": "custom", "singtabop|user|dimension": "0", "singtabop|user|mode": "matrixapply", "singtabop|use_type": "single", "out_opts": ["ignore_nas", "output_headers_row"], "precision": "2"}, "job": {"model_class": "Job", "id": "19b40f2773adf83a", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:53:00.084733", "create_time": "2024-02-11T12:52:11.659744", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-xjw8t", "command_line": "cp '/galaxy/server/database/jobs_directory/000/24/configs/tmppwvzt1yn' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 23, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 3, \"dimension\": \"0\", \"matrixapply_func\": {\"__current_case__\": 0, \"custom_func\": \"vec.sum()+vec.median()\", \"vector_op\": \"custom\"}, \"mode\": \"matrixapply\"}}"}, "inputs": {"input": {"id": "975d7e9658720d74", "src": "hda", "uuid": "9afbed98-b242-4d06-9483-21ca267a41a5"}}, "outputs": {"table": {"id": "19b40f2773adf83a", "src": "hda", "uuid": "5c7299e8-65c4-480e-8f19-fee309eb4abf"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:52:49", "plugin": "core", "name": "start_epoch", "raw_value": "1707655969.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:52:50", "plugin": "core", "name": "end_epoch", "raw_value": "1707655970.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-12", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 12, "time_seconds": 57.34879279136658, "inputs": {"singtabop|input": {"src": "hda", "id": "4f678f1e90976849"}, "singtabop|user|element|custom_expr": "(math.log10(elem)+elem)/elem if (elem < math.inf) else 1.0", "singtabop|user|element|mode": "custom", "singtabop|user|elem_val|element_value": "0", "singtabop|user|elem_val|element_op": "gt", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "708edda64e647f28", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:53:57.351241", "create_time": "2024-02-11T12:53:10.045119", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-48w2z", "command_line": "cp '/galaxy/server/database/jobs_directory/000/26/configs/tmp2su0rs17' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 25, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 3, \"element_op\": \"gt\", \"element_value\": \"0\"}, \"element\": {\"__current_case__\": 3, \"custom_expr\": \"(math.log10(elem)+elem)/elem if (elem < math.inf) else 1.0\", \"mode\": \"custom\"}, \"mode\": \"element\"}}"}, "inputs": {"input": {"id": "4f678f1e90976849", "src": "hda", "uuid": "6639c6b3-6ea7-4648-a832-198234c7b11b"}}, "outputs": {"table": {"id": "708edda64e647f28", "src": "hda", "uuid": "f69034d3-d041-4409-927d-16c624706e14"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:53:47", "plugin": "core", "name": "start_epoch", "raw_value": "1707656027.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:53:48", "plugin": "core", "name": "end_epoch", "raw_value": "1707656028.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-13", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 13, "time_seconds": 59.91653752326965, "inputs": {"singtabop|input": {"src": "hda", "id": "06c32074e9191295"}, "singtabop|user|element|custom_expr": "-math.log(1 - elem/4096) * 4096 if elem != 4096 else elem - 0.5", "singtabop|user|element|mode": "custom", "singtabop|user|elem_val|element_op": "None", "singtabop|user|mode": "element"}, "job": {"model_class": "Job", "id": "38b51d7b4d2f2db6", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:54:57.588589", "create_time": "2024-02-11T12:54:08.831873", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-qxzfl", "command_line": "cp '/galaxy/server/database/jobs_directory/000/28/configs/tmph1nnj5x9' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 27, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 0, \"element_op\": \"None\"}, \"element\": {\"__current_case__\": 3, \"custom_expr\": \"-math.log(1 - elem/4096) * 4096 if elem != 4096 else elem - 0.5\", \"mode\": \"custom\"}, \"mode\": \"element\"}}", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "precision": "\"6\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"tabular\""}, "inputs": {"input": {"id": "06c32074e9191295", "src": "hda", "uuid": "7ad3de55-bf91-4973-b19c-aef90a5a258b"}}, "outputs": {"table": {"id": "38b51d7b4d2f2db6", "src": "hda", "uuid": "c899e771-58ba-4f0a-9187-edc8a4f24bd6"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:54:46", "plugin": "core", "name": "start_epoch", "raw_value": "1707656086.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:54:48", "plugin": "core", "name": "end_epoch", "raw_value": "1707656088.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-14", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 14, "time_seconds": 57.18197274208069, "inputs": {"singtabop|input": {"src": "hda", "id": "2f30d8f478ef7f21"}, "singtabop|user|element|custom_expr": "-math.log(1 - elem/4096) * 4096 if elem != 4096 else elem - 0.5", "singtabop|user|element|mode": "custom", "singtabop|user|elem_val|element_op": "None", "singtabop|user|mode": "element"}, "job": {"model_class": "Job", "id": "38463a40e9add6cc", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:55:54.865222", "create_time": "2024-02-11T12:55:07.775247", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-4z9t2", "command_line": "cp '/galaxy/server/database/jobs_directory/000/30/configs/tmpm0r7h1bn' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 29, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 0, \"element_op\": \"None\"}, \"element\": {\"__current_case__\": 3, \"custom_expr\": \"-math.log(1 - elem/4096) * 4096 if elem != 4096 else elem - 0.5\", \"mode\": \"custom\"}, \"mode\": \"element\"}}"}, "inputs": {"input": {"id": "2f30d8f478ef7f21", "src": "hda", "uuid": "43e5b3ff-271b-4afd-b0b2-1bde2b770017"}}, "outputs": {"table": {"id": "38463a40e9add6cc", "src": "hda", "uuid": "b749f6e2-fca0-4123-8991-367e133b3bbb"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:55:45", "plugin": "core", "name": "start_epoch", "raw_value": "1707656145.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:55:46", "plugin": "core", "name": "end_epoch", "raw_value": "1707656146.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-15", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 15, "time_seconds": 59.24339747428894, "inputs": {"singtabop|input": {"src": "hda", "id": "ca4516265ffa2b90"}, "singtabop|user|general|fulltable_custom_expr": "table - table.mean(0) / table.std(0)", "singtabop|user|general|use": "custom", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "0f09de9764f106a6", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:56:54.071450", "create_time": "2024-02-11T12:56:05.819550", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-fdhxx", "command_line": "cp '/galaxy/server/database/jobs_directory/000/32/configs/tmpq9ucv9ae' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 31, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 3, \"fulltable_custom_expr\": \"table - table.mean(0) / table.std(0)\", \"use\": \"custom\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"input": {"id": "ca4516265ffa2b90", "src": "hda", "uuid": "3d136ae0-3008-42db-bc1e-0a3dbc48ae2a"}}, "outputs": {"table": {"id": "0f09de9764f106a6", "src": "hda", "uuid": "d51dc4cd-08a9-4da3-b0cb-5b437706c64d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:56:44", "plugin": "core", "name": "start_epoch", "raw_value": "1707656204.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:56:45", "plugin": "core", "name": "end_epoch", "raw_value": "1707656205.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-16", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 16, "time_seconds": 57.090404987335205, "inputs": {"singtabop|tables_0|input": {"src": "hda", "id": "fbce8d1ec3421aa0"}, "singtabop|tables_1|input": {"src": "hda", "id": "fbce8d1ec3421aa0"}, "singtabop|tables_2|input": {"src": "hda", "id": "fbce8d1ec3421aa0"}, "singtabop|fulltable_custom_expr": "(3 * table1) + np.log(table3 + 20) - table2", "singtabop|use_type": "multiple"}, "job": {"model_class": "Job", "id": "daecadc82254b56b", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:57:51.497743", "create_time": "2024-02-11T12:57:05.184733", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-88fwz", "command_line": "cp '/galaxy/server/database/jobs_directory/000/34/configs/tmphi9_t6wk' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 1, \"fulltable_custom_expr\": \"(3 * table1) + np.log(table3 + 20) - table2\", \"tables\": [{\"__index__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 33, \"src\": \"hda\"}]}}, {\"__index__\": 1, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 33, \"src\": \"hda\"}]}}, {\"__index__\": 2, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 33, \"src\": \"hda\"}]}}], \"use_type\": \"multiple\"}"}, "inputs": {"singtabop|tables_0|input": {"id": "fbce8d1ec3421aa0", "src": "hda", "uuid": "b5c18a92-5133-4d49-be12-2b7106e6cf20"}, "singtabop|tables_1|input": {"id": "fbce8d1ec3421aa0", "src": "hda", "uuid": "b5c18a92-5133-4d49-be12-2b7106e6cf20"}, "singtabop|tables_2|input": {"id": "fbce8d1ec3421aa0", "src": "hda", "uuid": "b5c18a92-5133-4d49-be12-2b7106e6cf20"}}, "outputs": {"table": {"id": "daecadc82254b56b", "src": "hda", "uuid": "0321c00c-bca7-4c4e-bd87-3c20802e7c16"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:57:42", "plugin": "core", "name": "start_epoch", "raw_value": "1707656262.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:57:43", "plugin": "core", "name": "end_epoch", "raw_value": "1707656263.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-17", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 17, "time_seconds": 56.99048161506653, "inputs": {"singtabop|input": {"src": "hda", "id": "94ef0508ef7f172b"}, "singtabop|user|general|fulltable_custom_expr": "table * 2", "singtabop|user|general|use": "custom", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "f925da9d9d9d337c", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:58:48.738590", "create_time": "2024-02-11T12:58:01.620543", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-4g56p", "command_line": "cp '/galaxy/server/database/jobs_directory/000/36/configs/tmpm79785fc' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 35, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 3, \"fulltable_custom_expr\": \"table * 2\", \"use\": \"custom\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"input": {"id": "94ef0508ef7f172b", "src": "hda", "uuid": "57ebf8a2-23bd-4960-9c52-40c5de5e6113"}}, "outputs": {"table": {"id": "f925da9d9d9d337c", "src": "hda", "uuid": "6021eff4-98ba-4a8f-a695-f718a78cd052"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:58:38", "plugin": "core", "name": "start_epoch", "raw_value": "1707656318.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:58:39", "plugin": "core", "name": "end_epoch", "raw_value": "1707656319.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-18", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 18, "time_seconds": 57.08702611923218, "inputs": {"singtabop|input": {"src": "hda", "id": "ea42096a534f089b"}, "singtabop|user|general|fulltable_custom_expr": "table == 5", "singtabop|user|general|use": "custom", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "b61c535e3a809f02", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:59:45.918880", "create_time": "2024-02-11T12:58:59.171756", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-fqs6v", "command_line": "cp '/galaxy/server/database/jobs_directory/000/38/configs/tmp_y8d3sqh' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 37, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 3, \"fulltable_custom_expr\": \"table == 5\", \"use\": \"custom\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"input": {"id": "ea42096a534f089b", "src": "hda", "uuid": "9fe3e0c8-de8b-4a67-a6ba-90ba68264e06"}}, "outputs": {"table": {"id": "b61c535e3a809f02", "src": "hda", "uuid": "c9d51dfe-34e3-42a7-84a5-185b611485ef"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:59:36", "plugin": "core", "name": "start_epoch", "raw_value": "1707656376.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:59:37", "plugin": "core", "name": "end_epoch", "raw_value": "1707656377.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-19", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 19, "time_seconds": 9.613236904144287, "inputs": {"singtabop|input": {"src": "hda", "id": "3353ba4a6af9126d"}, "singtabop|user|general|fulltable_custom_expr": "for n in table: n = n + 1", "singtabop|user|general|use": "custom", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "execution_problem": "An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.<>()", "dynamic_param_error": false, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-2", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 2, "time_seconds": 58.3494930267334, "inputs": {"singtabop|input": {"src": "hda", "id": "f16902bb49e3a34b"}, "singtabop|user|select_rows_wanted": "2:5,3,3", "singtabop|user|select_keepdupe": "select_cols_keepdupe", "singtabop|user|mode": "select", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "9b4e80dc53cc923e", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:44:13.496236", "create_time": "2024-02-11T12:43:25.592808", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-cl8n5", "command_line": "cp '/galaxy/server/database/jobs_directory/000/6/configs/tmp20ut7uw7' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 5, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 1, \"mode\": \"select\", \"select_cols_wanted\": null, \"select_keepdupe\": \"select_cols_keepdupe\", \"select_rows_wanted\": \"2:5,3,3\"}}"}, "inputs": {"input": {"id": "f16902bb49e3a34b", "src": "hda", "uuid": "b2151c76-6057-4d38-bb34-ae11f27631ef"}}, "outputs": {"table": {"id": "9b4e80dc53cc923e", "src": "hda", "uuid": "cd9995c7-1cc9-45ac-a9ba-e54b448c736f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:44:04", "plugin": "core", "name": "end_epoch", "raw_value": "1707655444.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:44:03", "plugin": "core", "name": "start_epoch", "raw_value": "1707655443.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-20", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 20, "time_seconds": 9.65449833869934, "inputs": {"singtabop|input": {"src": "hda", "id": "68bc9392e1a71a80"}, "singtabop|user|general|fulltable_custom_expr": "table + table[0,0]", "singtabop|user|general|use": "custom", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "execution_problem": "An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.<>()", "dynamic_param_error": false, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-21", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 21, "time_seconds": 59.62481379508972, "inputs": {"singtabop|input": {"src": "hda", "id": "c31952a7f0957cb8"}, "singtabop|user|general|use": "transpose", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single", "out_opts": ["ignore_nas", "output_headers_col"]}, "job": {"model_class": "Job", "id": "0dc614dd9b6d4b83", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:01:05.413087", "create_time": "2024-02-11T13:00:16.387675", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-cwlgc", "command_line": "cp '/galaxy/server/database/jobs_directory/000/42/configs/tmpgn9bkk85' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 41, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 0, \"use\": \"transpose\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"input": {"id": "c31952a7f0957cb8", "src": "hda", "uuid": "e7a1fc93-1696-4341-be52-0fdfc52cbdd6"}}, "outputs": {"table": {"id": "0dc614dd9b6d4b83", "src": "hda", "uuid": "0a8daf16-f57b-476a-a7a6-dccf7b4865ce"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:00:55", "plugin": "core", "name": "start_epoch", "raw_value": "1707656455.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:00:56", "plugin": "core", "name": "end_epoch", "raw_value": "1707656456.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-22", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 22, "time_seconds": 60.04640793800354, "inputs": {"singtabop|input": {"src": "hda", "id": "49726b4399725a8f"}, "singtabop|user|general|id_vars": "cell1,cell3", "singtabop|user|general|value_vars": "cell5,cell6", "singtabop|user|general|use": "melt", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single", "out_opts": ["ignore_nas", "output_headers_col"]}, "job": {"model_class": "Job", "id": "c0f42272f3a6930a", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:02:05.630036", "create_time": "2024-02-11T13:01:15.764780", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-pcl7c", "command_line": "cp '/galaxy/server/database/jobs_directory/000/44/configs/tmpsdmy25na' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 43, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 1, \"id_vars\": \"cell1,cell3\", \"use\": \"melt\", \"value_vars\": \"cell5,cell6\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"input": {"id": "49726b4399725a8f", "src": "hda", "uuid": "2e6e42a8-cb98-4a93-bd0b-feef826baccf"}}, "outputs": {"table": {"id": "c0f42272f3a6930a", "src": "hda", "uuid": "3519337b-24a5-4fc1-9e61-6ab96d7c77f3"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:01:56", "plugin": "core", "name": "end_epoch", "raw_value": "1707656516.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:01:54", "plugin": "core", "name": "start_epoch", "raw_value": "1707656514.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-23", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 23, "time_seconds": 58.23983550071716, "inputs": {"singtabop|input": {"src": "hda", "id": "c672f9178ad95b44"}, "singtabop|user|general|index": "cell1", "singtabop|user|general|column": "cell2", "singtabop|user|general|values": "cell3,cell7,cell9", "singtabop|user|general|use": "pivot", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "2d4587f0a6a0cc55", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:03:03.835382", "create_time": "2024-02-11T13:02:16.339124", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-vb2lp", "command_line": "cp '/galaxy/server/database/jobs_directory/000/46/configs/tmpsjkdox0w' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 45, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 2, \"aggfunc\": null, \"colfun_map\": [], \"column\": \"cell2\", \"index\": \"cell1\", \"use\": \"pivot\", \"values\": \"cell3,cell7,cell9\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"input": {"id": "c672f9178ad95b44", "src": "hda", "uuid": "896c48b2-51e1-419c-9969-a82af3befb8f"}}, "outputs": {"table": {"id": "2d4587f0a6a0cc55", "src": "hda", "uuid": "1b50bac0-ac28-43b5-9a58-5213d76541b5"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:02:54", "plugin": "core", "name": "end_epoch", "raw_value": "1707656574.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:02:53", "plugin": "core", "name": "start_epoch", "raw_value": "1707656573.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-24", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 24, "time_seconds": 59.18366098403931, "inputs": {"singtabop|input": {"src": "hda", "id": "4f3481d30656f46e"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|select_cols_wanted": "1,1,3", "singtabop|user|select_rows_wanted": "1:3,2", "singtabop|user|select_keepdupe": ["select_cols_keepdupe", "select_rows_keepdupe"], "singtabop|user|mode": "select", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "4173f1406074bd1d", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:04:03.292847", "create_time": "2024-02-11T13:03:14.724444", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-m6f8h", "command_line": "cp '/galaxy/server/database/jobs_directory/000/48/configs/tmp7jye9z7s' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 47, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 1, \"mode\": \"select\", \"select_cols_wanted\": \"1,1,3\", \"select_keepdupe\": [\"select_cols_keepdupe\", \"select_rows_keepdupe\"], \"select_rows_wanted\": \"1:3,2\"}}"}, "inputs": {"input": {"id": "4f3481d30656f46e", "src": "hda", "uuid": "fa0068c1-fcc2-4366-a8f8-c3e6ef260358"}}, "outputs": {"table": {"id": "4173f1406074bd1d", "src": "hda", "uuid": "e5bc3a01-1d00-4c41-8248-8e12c2eea14f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:03:54", "plugin": "core", "name": "end_epoch", "raw_value": "1707656634.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:03:53", "plugin": "core", "name": "start_epoch", "raw_value": "1707656633.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-25", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 25, "time_seconds": 58.374077796936035, "inputs": {"singtabop|input": {"src": "hda", "id": "c9fac43484989f77"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|axis": "1", "singtabop|user|filtersumval_mode|operation": "sum", "singtabop|user|filtersumval_mode|compare_op": "lt", "singtabop|user|filtersumval_mode|against": "50", "singtabop|user|filtersumval_mode|use": "operation", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "bfd8f5aef09a4661", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:05:01.819657", "create_time": "2024-02-11T13:04:13.168638", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-62llv", "command_line": "cp '/galaxy/server/database/jobs_directory/000/50/configs/tmp35zj7fr6' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 49, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"1\", \"filtersumval_mode\": {\"__current_case__\": 0, \"against\": \"50.0\", \"compare_op\": \"lt\", \"operation\": \"sum\", \"use\": \"operation\"}, \"mode\": \"filtersumval\"}}"}, "inputs": {"input": {"id": "c9fac43484989f77", "src": "hda", "uuid": "c1ef3e34-9379-4c86-b343-3b17be30de4e"}}, "outputs": {"table": {"id": "bfd8f5aef09a4661", "src": "hda", "uuid": "ea4bdd40-4083-47cc-8d6f-28a5df96e2c9"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:04:52", "plugin": "core", "name": "end_epoch", "raw_value": "1707656692.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:04:51", "plugin": "core", "name": "start_epoch", "raw_value": "1707656691.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-26", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 26, "time_seconds": 58.74752402305603, "inputs": {"singtabop|input": {"src": "hda", "id": "df3c12ac7b22d9d7"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|element|custom_expr": "elem < 10", "singtabop|user|element|mode": "custom", "singtabop|user|elem_val|element_op": "None", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "acd552279112370a", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:06:00.838038", "create_time": "2024-02-11T13:05:12.179350", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-bl794", "command_line": "cp '/galaxy/server/database/jobs_directory/000/52/configs/tmpqckrh_me' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 51, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 0, \"element_op\": \"None\"}, \"element\": {\"__current_case__\": 3, \"custom_expr\": \"elem < 10\", \"mode\": \"custom\"}, \"mode\": \"element\"}}"}, "inputs": {"input": {"id": "df3c12ac7b22d9d7", "src": "hda", "uuid": "aa1b278e-c92c-4f45-a060-d9a682254b8c"}}, "outputs": {"table": {"id": "acd552279112370a", "src": "hda", "uuid": "6f266603-0a4b-4944-8cbe-00ba76759758"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:05:51", "plugin": "core", "name": "end_epoch", "raw_value": "1707656751.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:05:50", "plugin": "core", "name": "start_epoch", "raw_value": "1707656750.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-27", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 27, "time_seconds": 57.5164897441864, "inputs": {"singtabop|input": {"src": "hda", "id": "2d903d3367cd9013"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|matrixapply_func|vector_op": "sum", "singtabop|user|dimension": "1", "singtabop|user|mode": "matrixapply", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "0678b9ce89bf62e5", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:06:58.269399", "create_time": "2024-02-11T13:06:11.475637", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-g89lt", "command_line": "cp '/galaxy/server/database/jobs_directory/000/54/configs/tmp0nppel_8' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 53, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 3, \"dimension\": \"1\", \"matrixapply_func\": {\"__current_case__\": 3, \"vector_op\": \"sum\"}, \"mode\": \"matrixapply\"}}"}, "inputs": {"input": {"id": "2d903d3367cd9013", "src": "hda", "uuid": "9c3e5646-53a6-4b2e-812b-da7138883479"}}, "outputs": {"table": {"id": "0678b9ce89bf62e5", "src": "hda", "uuid": "6c571ff1-f429-496b-82dc-4ce33bb21921"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:06:49", "plugin": "core", "name": "end_epoch", "raw_value": "1707656809.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:06:48", "plugin": "core", "name": "start_epoch", "raw_value": "1707656808.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-28", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 28, "time_seconds": 59.150293827056885, "inputs": {"singtabop|input": {"src": "hda", "id": "92dc07552272a0d5"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|element|custom_expr": "(math.log(elem) / elem) if (elem > 5) else 1", "singtabop|user|element|mode": "custom", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "be212a9776853317", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:07:57.438976", "create_time": "2024-02-11T13:07:09.107458", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-7hrxq", "command_line": "cp '/galaxy/server/database/jobs_directory/000/56/configs/tmprpriz5um' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 55, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 0, \"element_op\": \"None\"}, \"element\": {\"__current_case__\": 3, \"custom_expr\": \"(math.log(elem) / elem) if (elem > 5) else 1\", \"mode\": \"custom\"}, \"mode\": \"element\"}}"}, "inputs": {"input": {"id": "92dc07552272a0d5", "src": "hda", "uuid": "2cb85019-e01e-496a-892a-20a02ea89e8f"}}, "outputs": {"table": {"id": "be212a9776853317", "src": "hda", "uuid": "e2c4442b-e127-421d-b10a-6a03f3c15453"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:07:48", "plugin": "core", "name": "end_epoch", "raw_value": "1707656868.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:07:47", "plugin": "core", "name": "start_epoch", "raw_value": "1707656867.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-29", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 29, "time_seconds": 59.163018465042114, "inputs": {"singtabop|input": {"src": "hda", "id": "1a013a0915aa22e4"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|general|fulltable_custom_expr": "table - table.mean(0)/table.std(0)", "singtabop|user|general|use": "custom", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "b8fed907898816bc", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:08:56.791584", "create_time": "2024-02-11T13:08:08.393348", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-4js2d", "command_line": "cp '/galaxy/server/database/jobs_directory/000/58/configs/tmpchwr4x7h' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 57, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 3, \"fulltable_custom_expr\": \"table - table.mean(0)/table.std(0)\", \"use\": \"custom\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"input": {"id": "1a013a0915aa22e4", "src": "hda", "uuid": "f740d6e4-fafe-4a0d-be4e-698bc754a4a4"}}, "outputs": {"table": {"id": "b8fed907898816bc", "src": "hda", "uuid": "1c33482e-d43c-499c-9f5f-e3be8b12159c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:08:47", "plugin": "core", "name": "end_epoch", "raw_value": "1707656927.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:08:45", "plugin": "core", "name": "start_epoch", "raw_value": "1707656925.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-3", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 3, "time_seconds": 58.03085517883301, "inputs": {"singtabop|input": {"src": "hda", "id": "20716f281ec511ae"}, "singtabop|user|axis": "1", "singtabop|user|filtersumval_mode|operation": "sum", "singtabop|user|filtersumval_mode|compare_op": "gt", "singtabop|user|filtersumval_mode|against": "50", "singtabop|user|filtersumval_mode|use": "operation", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "88abbb3778d8545a", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:45:11.909337", "create_time": "2024-02-11T12:44:24.140611", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-9nzw5", "command_line": "cp '/galaxy/server/database/jobs_directory/000/8/configs/tmp5oi422up' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 7, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"1\", \"filtersumval_mode\": {\"__current_case__\": 0, \"against\": \"50.0\", \"compare_op\": \"gt\", \"operation\": \"sum\", \"use\": \"operation\"}, \"mode\": \"filtersumval\"}}", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "precision": "\"2\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"tabular\""}, "inputs": {"input": {"id": "20716f281ec511ae", "src": "hda", "uuid": "6c89d02e-c49b-4034-a635-9c5782d6c5a8"}}, "outputs": {"table": {"id": "88abbb3778d8545a", "src": "hda", "uuid": "618e8edf-6d6e-4d9f-8728-568c2809b5fa"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:45:02", "plugin": "core", "name": "end_epoch", "raw_value": "1707655502.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:45:01", "plugin": "core", "name": "start_epoch", "raw_value": "1707655501.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-30", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 30, "time_seconds": 63.18310761451721, "inputs": {"singtabop|tables_0|input": {"src": "hda", "id": "98cddcf1c3fc95ac"}, "singtabop|tables_0|col_row_names": ["has_col_names", "has_row_names"], "singtabop|tables_1|input": {"src": "hda", "id": "7deaccbc26dcb5b9"}, "singtabop|tables_1|col_row_names": ["has_col_names", "has_row_names"], "singtabop|tables_2|input": {"src": "hda", "id": "2421a92e70442333"}, "singtabop|tables_2|col_row_names": ["has_col_names", "has_row_names"], "singtabop|fulltable_custom_expr": "table1 / min(np.max(np.max(table2)), np.max(np.max(table3)))", "singtabop|use_type": "multiple"}, "job": {"model_class": "Job", "id": "5afa48b5566760eb", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:10:00.194473", "create_time": "2024-02-11T13:09:12.154206", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-7hn76", "command_line": "cp '/galaxy/server/database/jobs_directory/000/62/configs/tmp73fs0_5c' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 1, \"fulltable_custom_expr\": \"table1 / min(np.max(np.max(table2)), np.max(np.max(table3)))\", \"tables\": [{\"__index__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 59, \"src\": \"hda\"}]}}, {\"__index__\": 1, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 60, \"src\": \"hda\"}]}}, {\"__index__\": 2, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 61, \"src\": \"hda\"}]}}], \"use_type\": \"multiple\"}"}, "inputs": {"singtabop|tables_1|input": {"id": "7deaccbc26dcb5b9", "src": "hda", "uuid": "6f43e701-e835-4b44-b14e-056f13fcee0b"}, "singtabop|tables_2|input": {"id": "2421a92e70442333", "src": "hda", "uuid": "c6e80430-c1d3-4ca0-baa3-dfd902dea924"}, "singtabop|tables_0|input": {"id": "98cddcf1c3fc95ac", "src": "hda", "uuid": "fe40ccfe-e366-402e-8c5b-1db66312a1eb"}}, "outputs": {"table": {"id": "5afa48b5566760eb", "src": "hda", "uuid": "18c5e3c7-4195-4a7b-87b7-235f75c2c8f0"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:09:50", "plugin": "core", "name": "end_epoch", "raw_value": "1707656990.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:09:49", "plugin": "core", "name": "start_epoch", "raw_value": "1707656989.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-31", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 31, "time_seconds": 57.13028383255005, "inputs": {"singtabop|input": {"src": "hda", "id": "f927297be72e3755"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|general|id_vars": "A", "singtabop|user|general|value_vars": "B,C", "singtabop|user|general|use": "melt", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "dd656e5d8d8ac44a", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:10:57.369716", "create_time": "2024-02-11T13:10:11.120603", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-wf7gh", "command_line": "cp '/galaxy/server/database/jobs_directory/000/64/configs/tmpdysi2bqa' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 63, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 1, \"id_vars\": \"A\", \"use\": \"melt\", \"value_vars\": \"B,C\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"input": {"id": "f927297be72e3755", "src": "hda", "uuid": "6d68758c-10ef-4319-9a6b-954747db50f8"}}, "outputs": {"table": {"id": "dd656e5d8d8ac44a", "src": "hda", "uuid": "b036f708-23b6-41f1-af8f-52794dc1db76"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:10:49", "plugin": "core", "name": "end_epoch", "raw_value": "1707657049.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:10:48", "plugin": "core", "name": "start_epoch", "raw_value": "1707657048.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-32", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 32, "time_seconds": 57.090951442718506, "inputs": {"singtabop|input": {"src": "hda", "id": "dcae5487b76351da"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|general|index": "foo", "singtabop|user|general|column": "bar", "singtabop|user|general|values": "baz", "singtabop|user|general|use": "pivot", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "e6c1bf1c794eb058", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:11:54.782017", "create_time": "2024-02-11T13:11:07.494629", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-m2qkt", "command_line": "cp '/galaxy/server/database/jobs_directory/000/66/configs/tmpb5grsydd' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 65, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 2, \"aggfunc\": null, \"colfun_map\": [], \"column\": \"bar\", \"index\": \"foo\", \"use\": \"pivot\", \"values\": \"baz\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"input": {"id": "dcae5487b76351da", "src": "hda", "uuid": "20203653-93c1-4ce0-920f-6800e8d160d6"}}, "outputs": {"table": {"id": "e6c1bf1c794eb058", "src": "hda", "uuid": "5b8a43ca-0c46-431a-ba23-4d6cbf9477d0"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:11:45", "plugin": "core", "name": "end_epoch", "raw_value": "1707657105.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:11:44", "plugin": "core", "name": "start_epoch", "raw_value": "1707657104.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-33", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 33, "time_seconds": 57.08877182006836, "inputs": {"singtabop|input": {"src": "hda", "id": "31c4d71f8c52fab4"}, "singtabop|user|select_cols_wanted": "-2:2,1,-1", "singtabop|user|select_rows_wanted": "1,3:-3,1", "singtabop|user|mode": "select", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "c59b4c2b88d10c09", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:12:52.195366", "create_time": "2024-02-11T13:12:05.213348", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-xr5zc", "command_line": "cp '/galaxy/server/database/jobs_directory/000/68/configs/tmpr2cxedub' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 67, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 1, \"mode\": \"select\", \"select_cols_wanted\": \"-2:2,1,-1\", \"select_keepdupe\": [\"select_cols_keepdupe\", \"select_rows_keepdupe\"], \"select_rows_wanted\": \"1,3:-3,1\"}}"}, "inputs": {"input": {"id": "31c4d71f8c52fab4", "src": "hda", "uuid": "6aa31892-8a18-4fe1-b25a-1f4bb557ee34"}}, "outputs": {"table": {"id": "c59b4c2b88d10c09", "src": "hda", "uuid": "41dbe50d-fe2d-49af-af09-106bfb27017f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:12:43", "plugin": "core", "name": "end_epoch", "raw_value": "1707657163.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:12:42", "plugin": "core", "name": "start_epoch", "raw_value": "1707657162.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-34", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 34, "time_seconds": 58.274932622909546, "inputs": {"singtabop|input": {"src": "hda", "id": "12b534ee32b56285"}, "singtabop|user|select_cols_wanted": "-1,-3,3:-3,2", "singtabop|user|select_rows_wanted": "3:-1", "singtabop|user|select_keepdupe": "", "singtabop|user|mode": "select", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "330792ae2632a0b8", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:13:50.299147", "create_time": "2024-02-11T13:13:02.815896", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-t8ns9", "command_line": "cp '/galaxy/server/database/jobs_directory/000/70/configs/tmpmwr04ppy' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 69, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 1, \"mode\": \"select\", \"select_cols_wanted\": \"-1,-3,3:-3,2\", \"select_keepdupe\": [], \"select_rows_wanted\": \"3:-1\"}}"}, "inputs": {"input": {"id": "12b534ee32b56285", "src": "hda", "uuid": "31435626-6105-4d87-8332-07a8df193e95"}}, "outputs": {"table": {"id": "330792ae2632a0b8", "src": "hda", "uuid": "458b5573-4619-4f6d-9df3-b4c5a12c3937"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:13:42", "plugin": "core", "name": "end_epoch", "raw_value": "1707657222.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:13:41", "plugin": "core", "name": "start_epoch", "raw_value": "1707657221.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-35", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 35, "time_seconds": 57.88872838020325, "inputs": {"singtabop|input": {"src": "hda", "id": "d2eb881935a8d2f7"}, "singtabop|adv|header": "2", "singtabop|adv|nrows": "4", "singtabop|adv|skip_blank_lines": true, "singtabop|user|mode": "precision", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "4ac8d1e3fc460f1a", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:14:48.549934", "create_time": "2024-02-11T13:14:01.230974", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-sf9nr", "command_line": "cp '/galaxy/server/database/jobs_directory/000/72/configs/tmp3zmssxvc' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"2\", \"nrows\": \"4\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 71, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 0, \"mode\": \"precision\"}}"}, "inputs": {"input": {"id": "d2eb881935a8d2f7", "src": "hda", "uuid": "3ba1a762-9d5a-4f68-a1a7-03e9d3848dbd"}}, "outputs": {"table": {"id": "4ac8d1e3fc460f1a", "src": "hda", "uuid": "45d2bd93-186e-4eee-8dca-8fa240708720"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:14:39", "plugin": "core", "name": "end_epoch", "raw_value": "1707657279.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:14:38", "plugin": "core", "name": "start_epoch", "raw_value": "1707657278.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-36", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 36, "time_seconds": 57.07440733909607, "inputs": {"singtabop|input": {"src": "hda", "id": "7dfa3ae1663e0326"}, "singtabop|adv|header": "2", "singtabop|adv|skipfooter": "2", "singtabop|adv|skip_blank_lines": false, "singtabop|user|mode": "precision", "singtabop|use_type": "single", "out_opts": "", "precision": "2"}, "job": {"model_class": "Job", "id": "7cec36c0d3ae8a05", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:15:45.841769", "create_time": "2024-02-11T13:14:58.461558", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-lgk9z", "command_line": "cp '/galaxy/server/database/jobs_directory/000/74/configs/tmp4k901lky' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"2\", \"nrows\": \"\", \"skip_blank_lines\": \"false\", \"skipfooter\": \"2\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 73, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 0, \"mode\": \"precision\"}}"}, "inputs": {"input": {"id": "7dfa3ae1663e0326", "src": "hda", "uuid": "438033ee-8ada-4a90-a353-0e39606a2f51"}}, "outputs": {"table": {"id": "7cec36c0d3ae8a05", "src": "hda", "uuid": "0dcb643f-1fb3-461b-8d81-8f313f223176"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:15:36", "plugin": "core", "name": "end_epoch", "raw_value": "1707657336.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:15:35", "plugin": "core", "name": "start_epoch", "raw_value": "1707657335.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-37", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 37, "time_seconds": 57.110411643981934, "inputs": {"singtabop|input": {"src": "hda", "id": "3fe2901bfdc01d37"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|element|replace_value": "chr{elem:.0f}", "singtabop|user|element|mode": "replace", "singtabop|user|elem_val|select_cols_wanted": "2", "singtabop|user|elem_val|select_rows_wanted": "2,4", "singtabop|user|elem_val|inclusive_selection": true, "singtabop|user|elem_val|element_op": "rowcol", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "b0fcec4e3608895e", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:16:43.041157", "create_time": "2024-02-11T13:15:56.097893", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-gzq9h", "command_line": "cp '/galaxy/server/database/jobs_directory/000/76/configs/tmph8h2ijlz' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 75, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 7, \"element_op\": \"rowcol\", \"inclusive_selection\": \"true\", \"select_cols_wanted\": \"2\", \"select_rows_wanted\": \"2,4\"}, \"element\": {\"__current_case__\": 0, \"mode\": \"replace\", \"replace_value\": \"chr{elem:.0f}\"}, \"mode\": \"element\"}}"}, "inputs": {"input": {"id": "3fe2901bfdc01d37", "src": "hda", "uuid": "44a54ebc-2537-4863-8b42-8ca77ec87358"}}, "outputs": {"table": {"id": "b0fcec4e3608895e", "src": "hda", "uuid": "585dadb6-d678-468c-815c-4a4245f6f256"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:16:34", "plugin": "core", "name": "end_epoch", "raw_value": "1707657394.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:16:33", "plugin": "core", "name": "start_epoch", "raw_value": "1707657393.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-38", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 38, "time_seconds": 58.321969985961914, "inputs": {"singtabop|input": {"src": "hda", "id": "427593d04088ad89"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|element|replace_value": "chr{elem:.0f}", "singtabop|user|element|mode": "replace", "singtabop|user|elem_val|select_cols_wanted": "2", "singtabop|user|elem_val|select_rows_wanted": "2,4", "singtabop|user|elem_val|inclusive_selection": false, "singtabop|user|elem_val|element_op": "rowcol", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "061434d076bf352e", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:17:41.473609", "create_time": "2024-02-11T13:16:53.751353", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-vpgcm", "command_line": "cp '/galaxy/server/database/jobs_directory/000/78/configs/tmprwia4_cm' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 77, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 7, \"element_op\": \"rowcol\", \"inclusive_selection\": \"false\", \"select_cols_wanted\": \"2\", \"select_rows_wanted\": \"2,4\"}, \"element\": {\"__current_case__\": 0, \"mode\": \"replace\", \"replace_value\": \"chr{elem:.0f}\"}, \"mode\": \"element\"}}"}, "inputs": {"input": {"id": "427593d04088ad89", "src": "hda", "uuid": "da80633a-61ac-4718-be82-b7ab7395e664"}}, "outputs": {"table": {"id": "061434d076bf352e", "src": "hda", "uuid": "99642ea8-0bbd-4573-90a8-2665f0890a99"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:17:32", "plugin": "core", "name": "end_epoch", "raw_value": "1707657452.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:17:31", "plugin": "core", "name": "start_epoch", "raw_value": "1707657451.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-39", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 39, "time_seconds": 58.15496230125427, "inputs": {"singtabop|input": {"src": "hda", "id": "e53a18289a3da622"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|element|replace_value": "a'+'b", "singtabop|user|element|mode": "replace", "singtabop|user|elem_val|element_op": "None", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "c0482b8173032bd1", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:18:39.719285", "create_time": "2024-02-11T13:17:52.586630", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-xc8w8", "command_line": "cp '/galaxy/server/database/jobs_directory/000/80/configs/tmpbh98fpdh' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 79, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 0, \"element_op\": \"None\"}, \"element\": {\"__current_case__\": 0, \"mode\": \"replace\", \"replace_value\": \"a'+'b\"}, \"mode\": \"element\"}}"}, "inputs": {"input": {"id": "e53a18289a3da622", "src": "hda", "uuid": "d72f6ba7-b4c4-4fc4-a28b-2ee26e5a3f17"}}, "outputs": {"table": {"id": "c0482b8173032bd1", "src": "hda", "uuid": "744784f1-84bf-49d8-8d26-6c0f132f90f1"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:18:31", "plugin": "core", "name": "end_epoch", "raw_value": "1707657511.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:18:30", "plugin": "core", "name": "start_epoch", "raw_value": "1707657510.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-4", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 4, "time_seconds": 58.40876483917236, "inputs": {"singtabop|input": {"src": "hda", "id": "336a8ce1cffc5d32"}, "singtabop|user|axis": "0", "singtabop|user|filtersumval_mode|operation": "sum", "singtabop|user|filtersumval_mode|compare_op": "ne", "singtabop|user|filtersumval_mode|against": "0", "singtabop|user|filtersumval_mode|use": "operation", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "bb9f0b7b801a3877", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:46:10.307162", "create_time": "2024-02-11T12:45:22.691406", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-mz2vs", "command_line": "cp '/galaxy/server/database/jobs_directory/000/10/configs/tmp5i3crewz' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 9, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"0\", \"filtersumval_mode\": {\"__current_case__\": 0, \"against\": \"0.0\", \"compare_op\": \"ne\", \"operation\": \"sum\", \"use\": \"operation\"}, \"mode\": \"filtersumval\"}}", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "precision": "\"2\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"tabular\""}, "inputs": {"input": {"id": "336a8ce1cffc5d32", "src": "hda", "uuid": "f5bed396-f092-46c8-8e40-fe6faa17a8ed"}}, "outputs": {"table": {"id": "bb9f0b7b801a3877", "src": "hda", "uuid": "39706f61-52df-473f-a24e-65d9e8ee53ac"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:46:01", "plugin": "core", "name": "end_epoch", "raw_value": "1707655561.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:46:00", "plugin": "core", "name": "start_epoch", "raw_value": "1707655560.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-40", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 40, "time_seconds": 9.219036102294922, "inputs": {"singtabop|input": {"src": "hda", "id": "eea2e2de15d38fad"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|element|custom_expr": "el'+'em", "singtabop|user|element|mode": "custom", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "execution_problem": "An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.<>()", "dynamic_param_error": false, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-41", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 41, "time_seconds": 56.96531057357788, "inputs": {"singtabop|input": {"src": "hda", "id": "925193bea2d1d515"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|general|index": "Position", "singtabop|user|general|colfun_map_0|column": "Age", "singtabop|user|general|colfun_map_0|functions_0|aggfunc": "mean", "singtabop|user|general|colfun_map_1|column": "Random", "singtabop|user|general|colfun_map_1|functions_0|aggfunc": "mean", "singtabop|user|general|colfun_map_1|functions_1|aggfunc": "std", "singtabop|user|general|use": "pivot", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "409e3a59548ea372", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:19:45.971332", "create_time": "2024-02-11T13:18:59.014008", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-x8lgm", "command_line": "cp '/galaxy/server/database/jobs_directory/000/83/configs/tmpbtyo5dmf' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 82, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 2, \"aggfunc\": null, \"colfun_map\": [{\"__index__\": 0, \"column\": \"Age\", \"functions\": [{\"__index__\": 0, \"aggfunc\": \"mean\"}]}, {\"__index__\": 1, \"column\": \"Random\", \"functions\": [{\"__index__\": 0, \"aggfunc\": \"mean\"}, {\"__index__\": 1, \"aggfunc\": \"std\"}]}], \"column\": \"\", \"index\": \"Position\", \"use\": \"pivot\", \"values\": \"\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"input": {"id": "925193bea2d1d515", "src": "hda", "uuid": "97bf638c-9284-442c-9df2-8a978be333d4"}}, "outputs": {"table": {"id": "409e3a59548ea372", "src": "hda", "uuid": "1c2b3879-3cd3-4928-a6a9-d007f6b68583"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:19:37", "plugin": "core", "name": "end_epoch", "raw_value": "1707657577.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:19:36", "plugin": "core", "name": "start_epoch", "raw_value": "1707657576.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-42", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 42, "time_seconds": 59.856595039367676, "inputs": {"singtabop|input": {"src": "hda", "id": "f147ebdf0761af3b"}, "singtabop|col_row_names": "has_col_names", "singtabop|user|general|index": "A", "singtabop|user|general|column": "C", "singtabop|user|general|values": "D", "singtabop|user|general|aggfunc": "max", "singtabop|user|general|use": "pivot", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "dc7417487c7fe066", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T13:20:46.227362", "create_time": "2024-02-11T13:19:56.599744", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-wtp52", "command_line": "cp '/galaxy/server/database/jobs_directory/000/85/configs/tmpa02ads1y' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": \"has_col_names\", \"input\": {\"values\": [{\"id\": 84, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 2, \"aggfunc\": \"max\", \"colfun_map\": [], \"column\": \"C\", \"index\": \"A\", \"use\": \"pivot\", \"values\": \"D\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"input": {"id": "f147ebdf0761af3b", "src": "hda", "uuid": "356a1620-a278-4678-b001-28fd73f7e147"}}, "outputs": {"table": {"id": "dc7417487c7fe066", "src": "hda", "uuid": "ff71c5ba-69d9-4bbd-b1c3-2b6d4640ada9"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 13:20:37", "plugin": "core", "name": "end_epoch", "raw_value": "1707657637.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 13:20:36", "plugin": "core", "name": "start_epoch", "raw_value": "1707657636.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-5", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 5, "time_seconds": 60.00667452812195, "inputs": {"singtabop|input": {"src": "hda", "id": "6c97e77a4badcad1"}, "singtabop|user|axis": "0", "singtabop|user|filtersumval_mode|operation": "sum", "singtabop|user|filtersumval_mode|compare_op": "gt", "singtabop|user|filtersumval_mode|against": "10", "singtabop|user|filtersumval_mode|use": "operation", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "19ea402f51a73039", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:47:10.509946", "create_time": "2024-02-11T12:46:21.245731", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-825l5", "command_line": "cp '/galaxy/server/database/jobs_directory/000/12/configs/tmp3np_8z59' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 11, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"0\", \"filtersumval_mode\": {\"__current_case__\": 0, \"against\": \"10.0\", \"compare_op\": \"gt\", \"operation\": \"sum\", \"use\": \"operation\"}, \"mode\": \"filtersumval\"}}"}, "inputs": {"input": {"id": "6c97e77a4badcad1", "src": "hda", "uuid": "3ed7b7ed-9e70-402d-8793-5b76587668a7"}}, "outputs": {"table": {"id": "19ea402f51a73039", "src": "hda", "uuid": "edd64c76-81e2-4adf-b11f-58739d175472"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:47:00", "plugin": "core", "name": "end_epoch", "raw_value": "1707655620.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:46:59", "plugin": "core", "name": "start_epoch", "raw_value": "1707655619.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-6", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 6, "time_seconds": 57.18533897399902, "inputs": {"singtabop|input": {"src": "hda", "id": "d3aa3e21e70dd3d0"}, "singtabop|user|axis": "0", "singtabop|user|filtersumval_mode|operation": "median", "singtabop|user|filtersumval_mode|compare_op": "ge", "singtabop|user|filtersumval_mode|against": "2", "singtabop|user|filtersumval_mode|use": "operation", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single", "precision": "5"}, "job": {"model_class": "Job", "id": "635dbe87b14a18ac", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:48:07.719247", "create_time": "2024-02-11T12:47:20.637442", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-pwkrs", "command_line": "cp '/galaxy/server/database/jobs_directory/000/14/configs/tmpol4s4biw' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"5\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 13, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"0\", \"filtersumval_mode\": {\"__current_case__\": 0, \"against\": \"2.0\", \"compare_op\": \"ge\", \"operation\": \"median\", \"use\": \"operation\"}, \"mode\": \"filtersumval\"}}"}, "inputs": {"input": {"id": "d3aa3e21e70dd3d0", "src": "hda", "uuid": "dcfd3402-6f1c-44b6-9d65-a8aad487bad3"}}, "outputs": {"table": {"id": "635dbe87b14a18ac", "src": "hda", "uuid": "4acfa3db-d508-405a-8b2e-0f5a3855802a"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:47:58", "plugin": "core", "name": "start_epoch", "raw_value": "1707655678.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:47:59", "plugin": "core", "name": "end_epoch", "raw_value": "1707655679.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-7", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 7, "time_seconds": 58.2618989944458, "inputs": {"singtabop|input": {"src": "hda", "id": "e216a3cc142b727c"}, "singtabop|user|axis": "1", "singtabop|user|filtersumval_mode|minmatch": "2", "singtabop|user|filtersumval_mode|operation": "gt", "singtabop|user|filtersumval_mode|against": "2", "singtabop|user|filtersumval_mode|use": "element", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single", "precision": "5"}, "job": {"model_class": "Job", "id": "f14b76c8f0a04cc0", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:49:05.998567", "create_time": "2024-02-11T12:48:18.293413", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-57mp5", "command_line": "cp '/galaxy/server/database/jobs_directory/000/16/configs/tmphdxg61tm' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"5\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 15, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"1\", \"filtersumval_mode\": {\"__current_case__\": 1, \"against\": \"2\", \"minmatch\": \"2\", \"operation\": \"gt\", \"use\": \"element\"}, \"mode\": \"filtersumval\"}}"}, "inputs": {"input": {"id": "e216a3cc142b727c", "src": "hda", "uuid": "ef14d015-3d85-456c-868a-2463384c4e34"}}, "outputs": {"table": {"id": "f14b76c8f0a04cc0", "src": "hda", "uuid": "584d888f-e8d5-402c-b31b-0465028b9dba"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:48:56", "plugin": "core", "name": "start_epoch", "raw_value": "1707655736.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:48:57", "plugin": "core", "name": "end_epoch", "raw_value": "1707655737.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-8", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 8, "time_seconds": 58.32150721549988, "inputs": {"singtabop|input": {"src": "hda", "id": "ba5b953c739aadc3"}, "singtabop|user|axis": "0", "singtabop|user|filtersumval_mode|minmatch": "4", "singtabop|user|filtersumval_mode|operation": "str_ne", "singtabop|user|filtersumval_mode|against": "0", "singtabop|user|filtersumval_mode|use": "element", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single", "precision": "3"}, "job": {"model_class": "Job", "id": "12e5594e6f15aafa", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:50:04.637100", "create_time": "2024-02-11T12:49:16.670380", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-7q2ts", "command_line": "cp '/galaxy/server/database/jobs_directory/000/18/configs/tmp29kbzbo8' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 17, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"0\", \"filtersumval_mode\": {\"__current_case__\": 1, \"against\": \"0\", \"minmatch\": \"4\", \"operation\": \"str_ne\", \"use\": \"element\"}, \"mode\": \"filtersumval\"}}", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "precision": "\"3\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"tabular\""}, "inputs": {"input": {"id": "ba5b953c739aadc3", "src": "hda", "uuid": "6c5da17d-e4e3-4635-b326-ff294f2b46f5"}}, "outputs": {"table": {"id": "12e5594e6f15aafa", "src": "hda", "uuid": "093773b6-0017-46e6-9247-f0f4496362db"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:49:54", "plugin": "core", "name": "start_epoch", "raw_value": "1707655794.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:49:55", "plugin": "core", "name": "end_epoch", "raw_value": "1707655795.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-9", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 9, "time_seconds": 58.67433953285217, "inputs": {"singtabop|input": {"src": "hda", "id": "a8ce34ec9a383e2a"}, "singtabop|user|matrixapply_func|vector_op": "max", "singtabop|user|dimension": "1", "singtabop|user|mode": "matrixapply", "singtabop|use_type": "single", "out_opts": ["ignore_nas", "output_headers_row"], "precision": "0"}, "job": {"model_class": "Job", "id": "8d4ba24330bf5700", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T12:51:03.522876", "create_time": "2024-02-11T12:50:15.588222", "galaxy_version": "21.09", "command_version": "0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-rnwpj", "command_line": "cp '/galaxy/server/database/jobs_directory/000/20/configs/tmpjgqulxrg' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"0\"", "out_opts": "[\"ignore_nas\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": \"true\", \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 19, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 3, \"dimension\": \"1\", \"matrixapply_func\": {\"__current_case__\": 2, \"vector_op\": \"max\"}, \"mode\": \"matrixapply\"}}"}, "inputs": {"input": {"id": "a8ce34ec9a383e2a", "src": "hda", "uuid": "3a08adec-f45d-4524-9c44-0bd716d336bb"}}, "outputs": {"table": {"id": "8d4ba24330bf5700", "src": "hda", "uuid": "6c317398-aefe-42d6-8dc6-72411e4f64f8"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 12:50:53", "plugin": "core", "name": "start_epoch", "raw_value": "1707655853.0000000"}, {"title": "Job End Time", "value": "2024-02-11 12:50:54", "plugin": "core", "name": "end_epoch", "raw_value": "1707655854.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "vcfcommonsamples/1.0.0_rc3+galaxy0-0", "has_data": true, "data": {"tool_id": "vcfcommonsamples", "tool_version": "1.0.0_rc3+galaxy0", "test_index": 0, "time_seconds": 63.18275547027588, "inputs": {"input1": {"src": "hda", "id": "a5f82684fbe77ae5"}, "input2": {"src": "hda", "id": "4e658767ef7dfd95"}}, "job": {"model_class": "Job", "id": "ff8132d93a4bc44e", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:14:47.294027", "create_time": "2024-02-11T14:13:55.792129", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/vcfcommonsamples/vcfcommonsamples/1.0.0_rc3+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-7ss88", "command_line": "vcfcommonsamples '/galaxy/server/database/objects/6/b/c/dataset_6bccd2e6-0d59-471c-8d44-a757f3abf42e.dat' '/galaxy/server/database/objects/6/0/a/dataset_60a970cb-689d-4889-9c82-9a0fb3490c0b.dat' > '/galaxy/server/database/objects/8/f/d/dataset_8fd50ffa-0448-4f7c-a2a7-05b83ddb5e43.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input1": {"id": "a5f82684fbe77ae5", "src": "hda", "uuid": "6bccd2e6-0d59-471c-8d44-a757f3abf42e"}, "input2": {"id": "4e658767ef7dfd95", "src": "hda", "uuid": "60a970cb-689d-4889-9c82-9a0fb3490c0b"}}, "outputs": {"out_file1": {"id": "d5eb61eae9d7fa72", "src": "hda", "uuid": "8fd50ffa-0448-4f7c-a2a7-05b83ddb5e43"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 14:14:37", "plugin": "core", "name": "end_epoch", "raw_value": "1707660877.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:14:37", "plugin": "core", "name": "start_epoch", "raw_value": "1707660877.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "vcfdistance/1.0.0_rc3+galaxy0-0", "has_data": true, "data": {"tool_id": "vcfdistance", "tool_version": "1.0.0_rc3+galaxy0", "test_index": 0, "time_seconds": 56.04457640647888, "inputs": {"input1": {"src": "hda", "id": "7093b78f08f4bda6"}}, "job": {"model_class": "Job", "id": "bd411a4438f442f3", "state": "ok", "exit_code": 0, "update_time": "2024-02-11T14:15:44.446977", "create_time": "2024-02-11T14:14:58.547535", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/vcfdistance/vcfdistance/1.0.0_rc3+galaxy0", "history_id": "5cadd8ea31b42b73", "external_id": "gxy-sr7n4", "command_line": "cat '/galaxy/server/database/objects/d/4/0/dataset_d40f5b0b-b46e-46a4-b5b8-ea138990d17a.dat' | vcfdistance > '/galaxy/server/database/objects/2/b/b/dataset_2bb3e9a8-0689-46d0-9810-798a06e0eb92.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input1": {"id": "7093b78f08f4bda6", "src": "hda", "uuid": "d40f5b0b-b46e-46a4-b5b8-ea138990d17a"}}, "outputs": {"out_file1": {"id": "8ec26f8ee6c2751c", "src": "hda", "uuid": "2bb3e9a8-0689-46d0-9810-798a06e0eb92"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-11 14:15:35", "plugin": "core", "name": "end_epoch", "raw_value": "1707660935.0000000"}, {"title": "Job Start Time", "value": "2024-02-11 14:15:35", "plugin": "core", "name": "start_epoch", "raw_value": "1707660935.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}], "galaxy_url": "http://35.231.132.63:8000/galaxy/"}