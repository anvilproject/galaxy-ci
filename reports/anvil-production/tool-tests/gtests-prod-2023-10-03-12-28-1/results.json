{"version": "0.1", "suitename": "Galaxy Tool Tests", "results": {"total": 68, "errors": 0, "failures": 1, "skips": 2}, "tests": [{"id": "bamtools/2.4.0.0-0", "has_data": true, "data": {"tool_id": "bamtools", "tool_version": "2.4.0.0", "test_index": 0, "time_seconds": 134.3467309474945, "inputs": {"input_bams": {"src": "hda", "id": "d2b14972a1c0adc9"}, "analysis_type|format_type|reference_source|ref_file": {"src": "hda", "id": "76a486f342937b63"}, "analysis_type|format_type|reference_source|reference_source_selector": "history", "analysis_type|format_type|mapqual": true, "analysis_type|format_type|format_type_selector": "pileup", "analysis_type|analysis_type_selector": "convert"}, "job": {"model_class": "Job", "id": "4988693b86367e7d", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:33:01.509957", "create_time": "2023-10-03T13:31:00.979396", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/2.4.0.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-mdpdp", "command_line": "ln -s '/galaxy/server/database/objects/1/4/b/dataset_14b52a5a-33e5-4cdb-a65e-61970e89063b.dat' localbam.bam && ln -s '/galaxy/server/database/objects/_metadata_files/b/0/4/metadata_b0499c4f-a51d-4efa-8c18-85a9a1b36819.dat' localbam.bam.bai && ln -s '/galaxy/server/database/objects/f/e/2/dataset_fe2fa118-6d68-40eb-a230-fe56c7c83b28.dat' 'localref.fa' && samtools faidx 'localref.fa' 2>&1 || echo 'Error running samtools faidx for bamtools convert' >&2 && bamtools convert -format pileup -mapqual -fasta 'localref.fa' -out '/galaxy/server/database/objects/b/c/1/dataset_bc18d3cf-7d20-40c3-b7b2-4bc3201affa6.dat' -in localbam.bam", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"convert\", \"format_type\": {\"__current_case__\": 5, \"format_type_selector\": \"pileup\", \"mapqual\": \"true\", \"reference_source\": {\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 93, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}}}"}, "inputs": {"input_bams": {"id": "d2b14972a1c0adc9", "src": "hda", "uuid": "14b52a5a-33e5-4cdb-a65e-61970e89063b"}, "analysis_type|format_type|ref_file": {"id": "76a486f342937b63", "src": "hda", "uuid": "fe2fa118-6d68-40eb-a230-fe56c7c83b28"}}, "outputs": {"out_file1": {"id": "a5c7e806e275e8c4", "src": "hda", "uuid": "bc18d3cf-7d20-40c3-b7b2-4bc3201affa6"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Pileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\n", "stderr": "\nPileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:32:49", "plugin": "core", "name": "start_epoch", "raw_value": "1696339969.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:32:50", "plugin": "core", "name": "end_epoch", "raw_value": "1696339970.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bamtools/2.4.0.0-1", "has_data": true, "data": {"tool_id": "bamtools", "tool_version": "2.4.0.0", "test_index": 1, "time_seconds": 125.26459407806396, "inputs": {"input_bams": {"src": "hda", "id": "84c7613f610cc8e4"}, "analysis_type|analysis_type_selector": "count"}, "job": {"model_class": "Job", "id": "9036868f54dd2400", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:35:06.805640", "create_time": "2023-10-03T13:33:14.174913", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/2.4.0.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-k5xpj", "command_line": "ln -s '/galaxy/server/database/objects/a/8/e/dataset_a8e8435f-a6ec-4c79-9c99-67978d77b666.dat' localbam.bam && ln -s '/galaxy/server/database/objects/_metadata_files/1/9/f/metadata_19f9eb63-b326-4065-a984-5f68f684a98c.dat' localbam.bam.bai && bamtools count > '/galaxy/server/database/objects/c/2/7/dataset_c27ce07d-c1de-4b81-9dca-23ff93e6314f.dat' -in localbam.bam", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 1, \"analysis_type_selector\": \"count\"}"}, "inputs": {"input_bams": {"id": "84c7613f610cc8e4", "src": "hda", "uuid": "a8e8435f-a6ec-4c79-9c99-67978d77b666"}}, "outputs": {"out_file1": {"id": "236b26bfe4a36d0b", "src": "hda", "uuid": "c27ce07d-c1de-4b81-9dca-23ff93e6314f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:34:56", "plugin": "core", "name": "start_epoch", "raw_value": "1696340096.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:34:56", "plugin": "core", "name": "end_epoch", "raw_value": "1696340096.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "bamtools/2.4.0.0-2", "has_data": true, "data": {"tool_id": "bamtools", "tool_version": "2.4.0.0", "test_index": 2, "time_seconds": 127.5521821975708, "inputs": {"input_bams": {"src": "hda", "id": "5cc228dbde03342d"}, "analysis_type|analysis_type_selector": "coverage"}, "job": {"model_class": "Job", "id": "136b2eb4ae44fd0e", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:37:14.429362", "create_time": "2023-10-03T13:35:19.807584", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/2.4.0.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-h75gx", "command_line": "ln -s '/galaxy/server/database/objects/b/f/4/dataset_bf4a0af4-3dd0-4f60-a7ae-2394828c7d80.dat' localbam.bam && ln -s '/galaxy/server/database/objects/_metadata_files/8/b/6/metadata_8b620992-77a4-4e67-a91d-67ca0f660711.dat' localbam.bam.bai && bamtools coverage -out '/galaxy/server/database/objects/c/e/b/dataset_cebf3d7a-4e77-496f-a2f4-84d74e0a5a4f.dat' -in localbam.bam", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 2, \"analysis_type_selector\": \"coverage\"}"}, "inputs": {"input_bams": {"id": "5cc228dbde03342d", "src": "hda", "uuid": "bf4a0af4-3dd0-4f60-a7ae-2394828c7d80"}}, "outputs": {"out_file1": {"id": "2c3c7e991d1a0ac7", "src": "hda", "uuid": "cebf3d7a-4e77-496f-a2f4-84d74e0a5a4f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Pileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\n", "stderr": "\nPileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\nPileup::Run() : Data not sorted correctly!\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:37:03", "plugin": "core", "name": "start_epoch", "raw_value": "1696340223.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:37:03", "plugin": "core", "name": "end_epoch", "raw_value": "1696340223.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "bamtools/2.4.0.0-3", "has_data": true, "data": {"tool_id": "bamtools", "tool_version": "2.4.0.0", "test_index": 3, "time_seconds": 128.0816843509674, "inputs": {"input_bams": {"src": "hda", "id": "415905817716727a"}, "analysis_type|analysis_type_selector": "header"}, "job": {"model_class": "Job", "id": "ad1062e568546e1c", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:39:22.530533", "create_time": "2023-10-03T13:37:27.368412", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/2.4.0.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-r89nl", "command_line": "ln -s '/galaxy/server/database/objects/0/7/7/dataset_077898e9-c103-467d-b24e-67f172794126.dat' localbam.bam && ln -s '/galaxy/server/database/objects/_metadata_files/3/c/f/metadata_3cf1a19d-d204-4d72-a163-0200312f4eed.dat' localbam.bam.bai && bamtools header > '/galaxy/server/database/objects/0/c/3/dataset_0c331296-928b-4e4c-b811-bed02e61acea.dat' -in localbam.bam", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "analysis_type": "{\"__current_case__\": 3, \"analysis_type_selector\": \"header\"}"}, "inputs": {"input_bams": {"id": "415905817716727a", "src": "hda", "uuid": "077898e9-c103-467d-b24e-67f172794126"}}, "outputs": {"out_file1": {"id": "325599bee3baf21b", "src": "hda", "uuid": "0c331296-928b-4e4c-b811-bed02e61acea"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:39:11", "plugin": "core", "name": "start_epoch", "raw_value": "1696340351.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:39:11", "plugin": "core", "name": "end_epoch", "raw_value": "1696340351.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "bcftools_gtcheck/1.10-0", "has_data": true, "data": {"tool_id": "bcftools_gtcheck", "tool_version": "1.10", "test_index": 0, "time_seconds": 139.39929056167603, "inputs": {"input_file": {"src": "hda", "id": "76f76d3de760bd2e"}, "sec_default|GTs_only": "99"}, "job": {"model_class": "Job", "id": "27205d73567edfd8", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:46:02.105885", "create_time": "2023-10-03T13:43:55.427847", "galaxy_version": "21.09", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_gtcheck/bcftools_gtcheck/1.10", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-xn6qj", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/2/4/d/dataset_24d8ed8f-c6f7-4a76-90d1-1ae0b2a96a1c.dat' > input.vcf.gz && bcftools index input.vcf.gz &&            bcftools gtcheck       --GTs-only '99'                  input.vcf.gz  > '/galaxy/server/database/objects/a/1/1/dataset_a11a434d-d72a-49fd-94bb-1a91c1471323.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "sec_default": "{\"GTs_only\": \"99\", \"all_sites\": \"false\", \"genotypes\": null, \"homs_only\": \"false\", \"plot\": \"\", \"query_sample\": null, \"target_sample\": null}", "sec_restrict": "{\"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}}"}, "inputs": {"input_file": {"id": "76f76d3de760bd2e", "src": "hda", "uuid": "24d8ed8f-c6f7-4a76-90d1-1ae0b2a96a1c"}}, "outputs": {"output_file": {"id": "2ddf87865c60a471", "src": "hda", "uuid": "a11a434d-d72a-49fd-94bb-1a91c1471323"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-10-03 13:45:50", "plugin": "core", "name": "end_epoch", "raw_value": "1696340750.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:45:50", "plugin": "core", "name": "start_epoch", "raw_value": "1696340750.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_plugin_tag2tag/1.10-0", "has_data": true, "data": {"tool_id": "bcftools_plugin_tag2tag", "tool_version": "1.10", "test_index": 0, "time_seconds": 128.3485071659088, "inputs": {"input_file": {"src": "hda", "id": "6e03406f8eda24aa"}, "sec_plugin|conversion": "--gl-to-pl", "sec_plugin|replace": true, "output_type": "v"}, "job": {"model_class": "Job", "id": "03f356c22307e365", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:54:43.732594", "create_time": "2023-10-03T13:52:47.570217", "galaxy_version": "21.09", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_plugin_tag2tag/bcftools_plugin_tag2tag/1.10", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-w2knd", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/3/d/6/dataset_3d64dfc9-e832-4fe4-bf49-610a7c2460f8.dat' > input.vcf.gz && bcftools index input.vcf.gz &&            bcftools plugin tag2tag                --output-type 'v'   --threads ${GALAXY_SLOTS:-4}    input.vcf.gz   -- --gl-to-pl --replace > '/galaxy/server/database/objects/c/7/e/dataset_c7efd3df-dce6-4ed5-a7f8-9cca7a13c91c.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_plugin": "{\"\": \"0.1\", \"conversion\": \"--gl-to-pl\", \"replace\": \"true\"}", "sec_restrict": "{\"exclude\": null, \"include\": null, \"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}}"}, "inputs": {"input_file": {"id": "6e03406f8eda24aa", "src": "hda", "uuid": "3d64dfc9-e832-4fe4-bf49-610a7c2460f8"}}, "outputs": {"output_file": {"id": "1ebd3ddd6c27bdaf", "src": "hda", "uuid": "c7efd3df-dce6-4ed5-a7f8-9cca7a13c91c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:54:32", "plugin": "core", "name": "end_epoch", "raw_value": "1696341272.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:54:31", "plugin": "core", "name": "start_epoch", "raw_value": "1696341271.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_reheader/1.10-0", "has_data": true, "data": {"tool_id": "bcftools_reheader", "tool_version": "1.10", "test_index": 0, "time_seconds": 132.06020832061768, "inputs": {"input_file": {"src": "hda", "id": "b9eca39cfe400db2"}, "sec_default|header": {"src": "hda", "id": "e83cc320ebfcec0b"}, "output_type": "v"}, "job": {"model_class": "Job", "id": "08c6652d07cc85dd", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:48:15.501029", "create_time": "2023-10-03T13:46:16.690315", "galaxy_version": "21.09", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_reheader/bcftools_reheader/1.10", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-j8nkz", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/b/3/6/dataset_b3627a8e-a91a-4d03-b278-6c69950dbce6.dat' > input.vcf.gz && bcftools index input.vcf.gz &&   bcftools reheader   --header \"/galaxy/server/database/objects/4/e/1/dataset_4e1abdc0-76c9-4fb5-a4b6-7e633ece553a.dat\"    input.vcf.gz  | bcftools view  --output-type 'v'  > '/galaxy/server/database/objects/d/8/7/dataset_d87f1035-5f32-4764-97fe-c2c0ba440e09.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_default": "{\"header\": {\"values\": [{\"id\": 108, \"src\": \"hda\"}]}, \"rename_samples\": {\"__current_case__\": 0, \"samples_src\": \"none\"}}"}, "inputs": {"input_file": {"id": "b9eca39cfe400db2", "src": "hda", "uuid": "b3627a8e-a91a-4d03-b278-6c69950dbce6"}, "header": {"id": "e83cc320ebfcec0b", "src": "hda", "uuid": "4e1abdc0-76c9-4fb5-a4b6-7e633ece553a"}}, "outputs": {"output_file": {"id": "f507f6b6b242a66c", "src": "hda", "uuid": "d87f1035-5f32-4764-97fe-c2c0ba440e09"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-10-03 13:48:04", "plugin": "core", "name": "end_epoch", "raw_value": "1696340884.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:48:04", "plugin": "core", "name": "start_epoch", "raw_value": "1696340884.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_reheader/1.10-1", "has_data": true, "data": {"tool_id": "bcftools_reheader", "tool_version": "1.10", "test_index": 1, "time_seconds": 129.41263246536255, "inputs": {"input_file": {"src": "hda", "id": "df8631e7c089119c"}, "sec_default|rename_samples|sample_file": {"src": "hda", "id": "06a701593526ad49"}, "sec_default|rename_samples|samples_src": "history", "output_type": "v"}, "job": {"model_class": "Job", "id": "fb9ab28dea9d231a", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:50:24.892374", "create_time": "2023-10-03T13:48:28.664507", "galaxy_version": "21.09", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_reheader/bcftools_reheader/1.10", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-tqvb9", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/3/c/8/dataset_3c831084-2375-4f9a-912e-216d2c7af03d.dat' > input.vcf.gz && bcftools index input.vcf.gz &&   bcftools reheader    --samples \"/galaxy/server/database/objects/3/a/f/dataset_3aff0174-e840-4b1e-9c56-c18429f73115.dat\"   input.vcf.gz  | bcftools view  --output-type 'v'  > '/galaxy/server/database/objects/9/6/c/dataset_96cd5f01-57c8-40f3-baf4-212a771bdda5.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_default": "{\"header\": null, \"rename_samples\": {\"__current_case__\": 1, \"sample_file\": {\"values\": [{\"id\": 111, \"src\": \"hda\"}]}, \"samples_src\": \"history\"}}"}, "inputs": {"input_file": {"id": "df8631e7c089119c", "src": "hda", "uuid": "3c831084-2375-4f9a-912e-216d2c7af03d"}, "sec_default|sample_file": {"id": "06a701593526ad49", "src": "hda", "uuid": "3aff0174-e840-4b1e-9c56-c18429f73115"}}, "outputs": {"output_file": {"id": "3cedfd70736a2508", "src": "hda", "uuid": "96cd5f01-57c8-40f3-baf4-212a771bdda5"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-10-03 13:50:13", "plugin": "core", "name": "end_epoch", "raw_value": "1696341013.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:50:13", "plugin": "core", "name": "start_epoch", "raw_value": "1696341013.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_reheader/1.10-2", "has_data": true, "data": {"tool_id": "bcftools_reheader", "tool_version": "1.10", "test_index": 2, "time_seconds": 129.20555353164673, "inputs": {"input_file": {"src": "hda", "id": "de0f64ecdf021fcb"}, "sec_default|rename_samples|sample_file": {"src": "hda", "id": "d35d565aa3569dc9"}, "sec_default|rename_samples|samples_src": "history", "output_type": "v"}, "job": {"model_class": "Job", "id": "049afe0515eb4358", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:52:34.256571", "create_time": "2023-10-03T13:50:38.496567", "galaxy_version": "21.09", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_reheader/bcftools_reheader/1.10", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-mz8zr", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/3/1/2/dataset_3128f6bf-f947-42b9-9d9a-a27d0020d382.dat' > input.vcf.gz && bcftools index input.vcf.gz &&   bcftools reheader    --samples \"/galaxy/server/database/objects/e/8/6/dataset_e866ee44-f407-400c-98a3-806280b14e52.dat\"   input.vcf.gz  | bcftools view  --output-type 'v'  > '/galaxy/server/database/objects/4/8/5/dataset_48574555-1a8b-4765-8770-f44225b80ef2.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_default": "{\"header\": null, \"rename_samples\": {\"__current_case__\": 1, \"sample_file\": {\"values\": [{\"id\": 114, \"src\": \"hda\"}]}, \"samples_src\": \"history\"}}"}, "inputs": {"input_file": {"id": "de0f64ecdf021fcb", "src": "hda", "uuid": "3128f6bf-f947-42b9-9d9a-a27d0020d382"}, "sec_default|sample_file": {"id": "d35d565aa3569dc9", "src": "hda", "uuid": "e866ee44-f407-400c-98a3-806280b14e52"}}, "outputs": {"output_file": {"id": "0afd359ec31474a5", "src": "hda", "uuid": "48574555-1a8b-4765-8770-f44225b80ef2"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:52:23", "plugin": "core", "name": "end_epoch", "raw_value": "1696341143.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:52:22", "plugin": "core", "name": "start_epoch", "raw_value": "1696341142.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deeptools_multi_bigwig_summary/3.3.2.0.0-0", "has_data": true, "data": {"tool_id": "deeptools_multi_bigwig_summary", "tool_version": "3.3.2.0.0", "test_index": 0, "time_seconds": 158.11733102798462, "inputs": {"multibigwig_conditional|bigwigfiles": [{"src": "hda", "id": "367e77c2e346894f"}, {"src": "hda", "id": "367e77c2e346894f"}], "mode|binSize": "10", "mode|modeOpt": "bins"}, "job": {"model_class": "Job", "id": "d2b14972a1c0adc9", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:27:30.673033", "create_time": "2023-10-03T14:25:04.438848", "galaxy_version": "21.09", "command_version": "multiBigwigSummary 3.3.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/deeptools_multi_bigwig_summary/deeptools_multi_bigwig_summary/3.3.2.0.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-sdhr6", "command_line": "ln -f -s '/galaxy/server/database/objects/a/d/5/dataset_ad58a5f2-4726-4be3-a1b8-9285aed9d7d7.dat' 'test.bw_0.bw' && ln -f -s '/galaxy/server/database/objects/a/d/5/dataset_ad58a5f2-4726-4be3-a1b8-9285aed9d7d7.dat' 'test.bw_1.bw' &&    multiBigwigSummary bins  --numberOfProcessors \"${GALAXY_SLOTS:-4}\"  --outFileName /galaxy/server/database/objects/6/4/d/dataset_64dbcf05-9573-4374-a40d-06b273eccc0c.dat  --bwfiles 'test.bw_0.bw' 'test.bw_1.bw' --labels 'test.bw' 'test.bw'   --binSize '10' --distanceBetweenBins '0'", "traceback": null, "params": {"__input_ext": "\"bigwig\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advancedOpt": "{\"__current_case__\": 0, \"showAdvancedOpt\": \"no\"}", "outRawCounts": "\"false\"", "region": "\"\"", "mode": "{\"__current_case__\": 0, \"binSize\": \"10\", \"distanceBetweenBins\": \"0\", \"modeOpt\": \"bins\"}", "custom_sample_labels_conditional": "{\"__current_case__\": 0, \"custom_labels_select\": \"No\"}", "multibigwig_conditional": "{\"__current_case__\": 0, \"bigwigfiles\": {\"values\": [{\"id\": 154, \"src\": \"hda\"}, {\"id\": 154, \"src\": \"hda\"}]}, \"orderMatters\": \"No\"}"}, "inputs": {"bigwigfiles": {"id": "367e77c2e346894f", "src": "hda", "uuid": "ad58a5f2-4726-4be3-a1b8-9285aed9d7d7"}, "bigwigfiles1": {"id": "367e77c2e346894f", "src": "hda", "uuid": "ad58a5f2-4726-4be3-a1b8-9285aed9d7d7"}, "bigwigfiles2": {"id": "367e77c2e346894f", "src": "hda", "uuid": "ad58a5f2-4726-4be3-a1b8-9285aed9d7d7"}}, "outputs": {"outFile": {"id": "d89d481316127a4b", "src": "hda", "uuid": "64dbcf05-9573-4374-a40d-06b273eccc0c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "Number of bins found: 120\n", "stderr": "\nNumber of bins found: 120\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:27:13", "plugin": "core", "name": "end_epoch", "raw_value": "1696343233.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:27:12", "plugin": "core", "name": "start_epoch", "raw_value": "1696343232.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "fasta_compute_length/1.0.3-0", "has_data": true, "data": {"tool_id": "fasta_compute_length", "tool_version": "1.0.3", "test_index": 0, "time_seconds": 132.05112886428833, "inputs": {"ref|input": {"src": "hda", "id": "8a402cd36c10620d"}, "ref|keep_first": "0", "ref|keep_first_word": false}, "job": {"model_class": "Job", "id": "fac88c270dc27c2b", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:26:32.943684", "create_time": "2023-10-03T13:24:32.798950", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/fasta_compute_length/fasta_compute_length/1.0.3", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-pkkb2", "command_line": "python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/devteam/fasta_compute_length/7d37cfda8e00/fasta_compute_length/fasta_compute_length.py' '/galaxy/server/database/objects/e/c/4/dataset_ec426989-2385-4566-a20d-168bf845bfcd.dat' '/galaxy/server/database/objects/1/f/2/dataset_1f2ee40c-eda8-4d81-bc9c-57561bd323cc.dat' 0 id_and_desc", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "ref": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 86, \"src\": \"hda\"}]}, \"keep_first\": \"0\", \"keep_first_word\": \"false\", \"ref_source\": \"history\"}"}, "inputs": {"input": {"id": "8a402cd36c10620d", "src": "hda", "uuid": "ec426989-2385-4566-a20d-168bf845bfcd"}}, "outputs": {"output": {"id": "3b16c26dfb39f6f3", "src": "hda", "uuid": "1f2ee40c-eda8-4d81-bc9c-57561bd323cc"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:26:21", "plugin": "core", "name": "start_epoch", "raw_value": "1696339581.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:26:21", "plugin": "core", "name": "end_epoch", "raw_value": "1696339581.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "fasta_compute_length/1.0.3-1", "has_data": true, "data": {"tool_id": "fasta_compute_length", "tool_version": "1.0.3", "test_index": 1, "time_seconds": 127.83258605003357, "inputs": {"ref|input": {"src": "hda", "id": "18ba0a711db06c71"}, "ref|keep_first": "0", "ref|keep_first_word": false}, "job": {"model_class": "Job", "id": "d8458b9257207353", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:28:40.877954", "create_time": "2023-10-03T13:26:44.815933", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/fasta_compute_length/fasta_compute_length/1.0.3", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-94b7k", "command_line": "python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/devteam/fasta_compute_length/7d37cfda8e00/fasta_compute_length/fasta_compute_length.py' '/galaxy/server/database/objects/8/9/7/dataset_897a9829-d7aa-4586-be66-f0deb93f6a15.dat' '/galaxy/server/database/objects/b/e/7/dataset_be7a2b42-ca3f-4adb-bc6f-ff3d62a0447a.dat' 0 id_and_desc", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "ref": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 88, \"src\": \"hda\"}]}, \"keep_first\": \"0\", \"keep_first_word\": \"false\", \"ref_source\": \"history\"}"}, "inputs": {"input": {"id": "18ba0a711db06c71", "src": "hda", "uuid": "897a9829-d7aa-4586-be66-f0deb93f6a15"}}, "outputs": {"output": {"id": "bfb5b966998282c9", "src": "hda", "uuid": "be7a2b42-ca3f-4adb-bc6f-ff3d62a0447a"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:28:30", "plugin": "core", "name": "start_epoch", "raw_value": "1696339710.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:28:30", "plugin": "core", "name": "end_epoch", "raw_value": "1696339710.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "fasta_compute_length/1.0.3-2", "has_data": true, "data": {"tool_id": "fasta_compute_length", "tool_version": "1.0.3", "test_index": 2, "time_seconds": 124.98630595207214, "inputs": {"ref|input": {"src": "hda", "id": "a27b92c01a515723"}, "ref|keep_first": "14", "ref|keep_first_word": false}, "job": {"model_class": "Job", "id": "058733ca920ccabb", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:30:45.663981", "create_time": "2023-10-03T13:28:52.719398", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/fasta_compute_length/fasta_compute_length/1.0.3", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-pg67q", "command_line": "python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/devteam/fasta_compute_length/7d37cfda8e00/fasta_compute_length/fasta_compute_length.py' '/galaxy/server/database/objects/8/5/3/dataset_8536401b-e3f4-4dfa-a4f9-67c369948de7.dat' '/galaxy/server/database/objects/a/0/9/dataset_a09876cb-589d-433a-bb9e-481dccb4b496.dat' 14 id_and_desc", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "ref": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 90, \"src\": \"hda\"}]}, \"keep_first\": \"14\", \"keep_first_word\": \"false\", \"ref_source\": \"history\"}"}, "inputs": {"input": {"id": "a27b92c01a515723", "src": "hda", "uuid": "8536401b-e3f4-4dfa-a4f9-67c369948de7"}}, "outputs": {"output": {"id": "16a85b6f3412596e", "src": "hda", "uuid": "a09876cb-589d-433a-bb9e-481dccb4b496"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:30:35", "plugin": "core", "name": "start_epoch", "raw_value": "1696339835.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:30:35", "plugin": "core", "name": "end_epoch", "raw_value": "1696339835.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "fasta_compute_length/1.0.3-3", "has_data": true, "data": {"tool_id": "fasta_compute_length", "tool_version": "1.0.3", "test_index": 3, "status": "skip"}}, {"id": "fasta_compute_length/1.0.3-4", "has_data": true, "data": {"tool_id": "fasta_compute_length", "tool_version": "1.0.3", "test_index": 4, "status": "skip"}}, {"id": "flye/2.6-0", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.6", "test_index": 0, "time_seconds": 255.64008951187134, "inputs": {"inputs": {"src": "hda", "id": "7615b87cded9ad4b"}, "mode": "--pacbio-raw", "g": "10000"}, "job": {"model_class": "Job", "id": "bfe9a80a67952f4d", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:01:12.795424", "create_time": "2023-10-03T13:57:10.807469", "galaxy_version": "21.09", "command_version": "2.6-release", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.6", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-v2v68", "command_line": "ln -s '/galaxy/server/database/objects/9/b/7/dataset_9b75db17-ec65-47a6-991b-b8eb760f31e9.dat' ./input_0.fasta &&  flye --pacbio-raw ./input_0.fasta  -o out_dir -g '10000' -t ${GALAXY_SLOTS:-4} -i 1    2>&1", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "no_trestle": "\"false\"", "meta": "\"false\"", "plasmids": "\"false\"", "asm": "\"\"", "m": "\"\"", "i": "\"1\"", "g": "\"10000\"", "mode": "\"--pacbio-raw\""}, "inputs": {"inputs": {"id": "7615b87cded9ad4b", "src": "hda", "uuid": "9b75db17-ec65-47a6-991b-b8eb760f31e9"}}, "outputs": {"consensus": {"id": "b95d6832a01be6b6", "src": "hda", "uuid": "00d05898-1873-4c60-8b0a-d6beb1ebd92a"}, "assembly_graph": {"id": "d64b53aaf3008c8f", "src": "hda", "uuid": "04b2c6ce-93aa-4e72-8c93-f0fd2b0cc7e4"}, "assembly_gfa": {"id": "b494ea2579cb43bf", "src": "hda", "uuid": "3157eb13-9ebb-4874-bdf2-673aac294b27"}, "assembly_info": {"id": "b14786ba3a2143b5", "src": "hda", "uuid": "c030eb7b-44e6-4e31-9027-997d608c46c5"}, "flye_log": {"id": "c69af7deab213121", "src": "hda", "uuid": "643a108f-5d70-4c24-a182-cda28ba27ee6"}}, "output_collections": {}, "tool_stdout": "[2023-10-03 13:59:02] INFO: Starting Flye 2.6-release\n[2023-10-03 13:59:02] INFO: >>>STAGE: configure\n[2023-10-03 13:59:02] INFO: Configuring run\n[2023-10-03 13:59:02] INFO: Total read length: 1466260\n[2023-10-03 13:59:02] INFO: Input genome size: 10000\n[2023-10-03 13:59:02] INFO: Estimated coverage: 146\n[2023-10-03 13:59:02] INFO: Reads N50/N90: 9054 / 4697\n[2023-10-03 13:59:02] INFO: Minimum overlap set to 5000\n[2023-10-03 13:59:02] INFO: Selected k-mer size: 15\n[2023-10-03 13:59:02] INFO: >>>STAGE: assembly\n[2023-10-03 13:59:02] INFO: Assembling disjointigs\n[2023-10-03 13:59:02] INFO: Reading sequences\n[2023-10-03 13:59:02] INFO: Generating solid k-mer index\n[2023-10-03 13:59:22] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 13:59:22] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 13:59:23] INFO: Filling index table\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:00:02] INFO: Extending reads\n[2023-10-03 14:00:07] INFO: Overlap-based coverage: 25\n[2023-10-03 14:00:07] INFO: Median overlap divergence: 0.169224\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:00:08] INFO: Assembled 1 disjointigs\n[2023-10-03 14:00:08] INFO: Generating sequence\n10% 20% 40% 50% 70% 80% 100% \n[2023-10-03 14:00:10] INFO: >>>STAGE: consensus\n[2023-10-03 14:00:10] INFO: Running Minimap2\n[2023-10-03 14:00:11] INFO: Computing consensus\n[2023-10-03 14:00:12] INFO: Alignment error rate: 0.156879\n[2023-10-03 14:00:12] INFO: >>>STAGE: repeat\n[2023-10-03 14:00:12] INFO: Building and resolving repeat graph\n[2023-10-03 14:00:12] INFO: Reading sequences\n[2023-10-03 14:00:12] INFO: Building repeat graph\n50% 100% \n[2023-10-03 14:00:32] INFO: Median overlap divergence: 0\n[2023-10-03 14:00:32] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:00:53] INFO: Aligned read sequence: 1184744 / 1313105 (0.902246)\n[2023-10-03 14:00:53] INFO: Median overlap divergence: 0.0616647\n[2023-10-03 14:00:53] INFO: Mean edge coverage: 29\n[2023-10-03 14:00:53] INFO: Resolving repeats\n[2023-10-03 14:00:53] INFO: >>>STAGE: trestle\n[2023-10-03 14:00:53] INFO: Simple unbridged repeats: 0\n[2023-10-03 14:00:53] INFO: Resolved: 0\n[2023-10-03 14:00:53] INFO: >>>STAGE: contigger\n[2023-10-03 14:00:53] INFO: Generating contigs\n[2023-10-03 14:00:53] INFO: Reading sequences\n[2023-10-03 14:00:53] INFO: Generated 1 contigs\n[2023-10-03 14:00:53] INFO: Added 0 scaffold connections\n[2023-10-03 14:00:53] INFO: >>>STAGE: polishing\n[2023-10-03 14:00:53] INFO: Polishing genome (1/1)\n[2023-10-03 14:00:53] INFO: Running minimap2\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000032541c0000004a'\n[2023-10-03 14:00:54] INFO: Separating alignment into bubbles\n[2023-10-03 14:00:56] INFO: Alignment error rate: 0.104507\n[2023-10-03 14:00:56] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000003254330000004b'\n[2023-10-03 14:01:01] INFO: >>>STAGE: finalize\n[2023-10-03 14:01:01] INFO: Assembly statistics:\n\n\tTotal length:\t39944\n\tFragments:\t1\n\tFragments N50:\t39944\n\tLargest frg:\t39944\n\tScaffolds:\t0\n\tMean coverage:\t27\n\n[2023-10-03 14:01:01] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/74/working/out_dir/assembly.fasta\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[2023-10-03 13:59:02] INFO: Starting Flye 2.6-release\n[2023-10-03 13:59:02] INFO: >>>STAGE: configure\n[2023-10-03 13:59:02] INFO: Configuring run\n[2023-10-03 13:59:02] INFO: Total read length: 1466260\n[2023-10-03 13:59:02] INFO: Input genome size: 10000\n[2023-10-03 13:59:02] INFO: Estimated coverage: 146\n[2023-10-03 13:59:02] INFO: Reads N50/N90: 9054 / 4697\n[2023-10-03 13:59:02] INFO: Minimum overlap set to 5000\n[2023-10-03 13:59:02] INFO: Selected k-mer size: 15\n[2023-10-03 13:59:02] INFO: >>>STAGE: assembly\n[2023-10-03 13:59:02] INFO: Assembling disjointigs\n[2023-10-03 13:59:02] INFO: Reading sequences\n[2023-10-03 13:59:02] INFO: Generating solid k-mer index\n[2023-10-03 13:59:22] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 13:59:22] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 13:59:23] INFO: Filling index table\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:00:02] INFO: Extending reads\n[2023-10-03 14:00:07] INFO: Overlap-based coverage: 25\n[2023-10-03 14:00:07] INFO: Median overlap divergence: 0.169224\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:00:08] INFO: Assembled 1 disjointigs\n[2023-10-03 14:00:08] INFO: Generating sequence\n10% 20% 40% 50% 70% 80% 100% \n[2023-10-03 14:00:10] INFO: >>>STAGE: consensus\n[2023-10-03 14:00:10] INFO: Running Minimap2\n[2023-10-03 14:00:11] INFO: Computing consensus\n[2023-10-03 14:00:12] INFO: Alignment error rate: 0.156879\n[2023-10-03 14:00:12] INFO: >>>STAGE: repeat\n[2023-10-03 14:00:12] INFO: Building and resolving repeat graph\n[2023-10-03 14:00:12] INFO: Reading sequences\n[2023-10-03 14:00:12] INFO: Building repeat graph\n50% 100% \n[2023-10-03 14:00:32] INFO: Median overlap divergence: 0\n[2023-10-03 14:00:32] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:00:53] INFO: Aligned read sequence: 1184744 / 1313105 (0.902246)\n[2023-10-03 14:00:53] INFO: Median overlap divergence: 0.0616647\n[2023-10-03 14:00:53] INFO: Mean edge coverage: 29\n[2023-10-03 14:00:53] INFO: Resolving repeats\n[2023-10-03 14:00:53] INFO: >>>STAGE: trestle\n[2023-10-03 14:00:53] INFO: Simple unbridged repeats: 0\n[2023-10-03 14:00:53] INFO: Resolved: 0\n[2023-10-03 14:00:53] INFO: >>>STAGE: contigger\n[2023-10-03 14:00:53] INFO: Generating contigs\n[2023-10-03 14:00:53] INFO: Reading sequences\n[2023-10-03 14:00:53] INFO: Generated 1 contigs\n[2023-10-03 14:00:53] INFO: Added 0 scaffold connections\n[2023-10-03 14:00:53] INFO: >>>STAGE: polishing\n[2023-10-03 14:00:53] INFO: Polishing genome (1/1)\n[2023-10-03 14:00:53] INFO: Running minimap2\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000032541c0000004a'\n[2023-10-03 14:00:54] INFO: Separating alignment into bubbles\n[2023-10-03 14:00:56] INFO: Alignment error rate: 0.104507\n[2023-10-03 14:00:56] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000003254330000004b'\n[2023-10-03 14:01:01] INFO: >>>STAGE: finalize\n[2023-10-03 14:01:01] INFO: Assembly statistics:\n\n\tTotal length:\t39944\n\tFragments:\t1\n\tFragments N50:\t39944\n\tLargest frg:\t39944\n\tScaffolds:\t0\n\tMean coverage:\t27\n\n[2023-10-03 14:01:01] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/74/working/out_dir/assembly.fasta\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "119.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:01:01", "plugin": "core", "name": "end_epoch", "raw_value": "1696341661.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:59:02", "plugin": "core", "name": "start_epoch", "raw_value": "1696341542.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "flye/2.6-1", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.6", "test_index": 1, "time_seconds": 250.2706241607666, "inputs": {"inputs": {"src": "hda", "id": "2a08688683c8b246"}, "mode": "--nano-raw", "g": "10000"}, "job": {"model_class": "Job", "id": "bbe168dc828d98db", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:05:22.906978", "create_time": "2023-10-03T14:01:25.775147", "galaxy_version": "21.09", "command_version": "2.6-release", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.6", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-sn5wl", "command_line": "ln -s '/galaxy/server/database/objects/f/9/a/dataset_f9a845e8-ab94-44b1-b9a2-3b3a3b5689e6.dat' ./input_0.fasta &&  flye --nano-raw ./input_0.fasta  -o out_dir -g '10000' -t ${GALAXY_SLOTS:-4} -i 1    2>&1", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "no_trestle": "\"false\"", "meta": "\"false\"", "plasmids": "\"false\"", "asm": "\"\"", "m": "\"\"", "i": "\"1\"", "g": "\"10000\"", "mode": "\"--nano-raw\""}, "inputs": {"inputs": {"id": "2a08688683c8b246", "src": "hda", "uuid": "f9a845e8-ab94-44b1-b9a2-3b3a3b5689e6"}}, "outputs": {"consensus": {"id": "cf414369bfbcc3af", "src": "hda", "uuid": "a90f22ca-8298-42dd-b9f5-aea4b15092f7"}, "assembly_graph": {"id": "247b92f37339a7f9", "src": "hda", "uuid": "685464d9-ace6-43a7-92d9-d92dd78055b5"}, "assembly_gfa": {"id": "5e44774d11ba1799", "src": "hda", "uuid": "b1f7440d-ff9f-4e41-afd9-5348fb821f40"}, "assembly_info": {"id": "5090c378146bbd1e", "src": "hda", "uuid": "ba18fd43-3d2f-47ab-8449-efb853ef5c23"}, "flye_log": {"id": "3c25116776ab1c0b", "src": "hda", "uuid": "9462584c-5b4e-426e-be43-623afc78f39b"}}, "output_collections": {}, "tool_stdout": "[2023-10-03 14:03:13] INFO: Starting Flye 2.6-release\n[2023-10-03 14:03:13] INFO: >>>STAGE: configure\n[2023-10-03 14:03:13] INFO: Configuring run\n[2023-10-03 14:03:13] INFO: Total read length: 1466260\n[2023-10-03 14:03:13] INFO: Input genome size: 10000\n[2023-10-03 14:03:13] INFO: Estimated coverage: 146\n[2023-10-03 14:03:13] INFO: Reads N50/N90: 9054 / 4697\n[2023-10-03 14:03:13] INFO: Minimum overlap set to 5000\n[2023-10-03 14:03:13] INFO: Selected k-mer size: 15\n[2023-10-03 14:03:13] INFO: >>>STAGE: assembly\n[2023-10-03 14:03:13] INFO: Assembling disjointigs\n[2023-10-03 14:03:13] INFO: Reading sequences\n[2023-10-03 14:03:13] INFO: Generating solid k-mer index\n[2023-10-03 14:03:33] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:03:33] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:03:34] INFO: Filling index table\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:04:13] INFO: Extending reads\n[2023-10-03 14:04:18] INFO: Overlap-based coverage: 25\n[2023-10-03 14:04:18] INFO: Median overlap divergence: 0.169224\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:04:20] INFO: Assembled 1 disjointigs\n[2023-10-03 14:04:20] INFO: Generating sequence\n10% 20% 40% 50% 70% 80% 100% \n[2023-10-03 14:04:21] INFO: >>>STAGE: consensus\n[2023-10-03 14:04:21] INFO: Running Minimap2\n[2023-10-03 14:04:22] INFO: Computing consensus\n[2023-10-03 14:04:24] INFO: Alignment error rate: 0.157030\n[2023-10-03 14:04:24] INFO: >>>STAGE: repeat\n[2023-10-03 14:04:24] INFO: Building and resolving repeat graph\n[2023-10-03 14:04:24] INFO: Reading sequences\n[2023-10-03 14:04:24] INFO: Building repeat graph\n50% 100% \n[2023-10-03 14:04:44] INFO: Median overlap divergence: 0\n[2023-10-03 14:04:44] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:05:04] INFO: Aligned read sequence: 1184737 / 1313105 (0.902241)\n[2023-10-03 14:05:04] INFO: Median overlap divergence: 0.0613459\n[2023-10-03 14:05:04] INFO: Mean edge coverage: 29\n[2023-10-03 14:05:04] INFO: Resolving repeats\n[2023-10-03 14:05:04] INFO: >>>STAGE: trestle\n[2023-10-03 14:05:04] INFO: Simple unbridged repeats: 0\n[2023-10-03 14:05:04] INFO: Resolved: 0\n[2023-10-03 14:05:04] INFO: >>>STAGE: contigger\n[2023-10-03 14:05:04] INFO: Generating contigs\n[2023-10-03 14:05:04] INFO: Reading sequences\n[2023-10-03 14:05:05] INFO: Generated 1 contigs\n[2023-10-03 14:05:05] INFO: Added 0 scaffold connections\n[2023-10-03 14:05:05] INFO: >>>STAGE: polishing\n[2023-10-03 14:05:05] INFO: Polishing genome (1/1)\n[2023-10-03 14:05:05] INFO: Running minimap2\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000003254830000004f'\n[2023-10-03 14:05:06] INFO: Separating alignment into bubbles\n[2023-10-03 14:05:07] INFO: Alignment error rate: 0.104939\n[2023-10-03 14:05:07] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000032549e00000050'\n[2023-10-03 14:05:12] INFO: >>>STAGE: finalize\n[2023-10-03 14:05:12] INFO: Assembly statistics:\n\n\tTotal length:\t40419\n\tFragments:\t1\n\tFragments N50:\t40419\n\tLargest frg:\t40419\n\tScaffolds:\t0\n\tMean coverage:\t26\n\n[2023-10-03 14:05:12] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/76/working/out_dir/assembly.fasta\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[2023-10-03 14:03:13] INFO: Starting Flye 2.6-release\n[2023-10-03 14:03:13] INFO: >>>STAGE: configure\n[2023-10-03 14:03:13] INFO: Configuring run\n[2023-10-03 14:03:13] INFO: Total read length: 1466260\n[2023-10-03 14:03:13] INFO: Input genome size: 10000\n[2023-10-03 14:03:13] INFO: Estimated coverage: 146\n[2023-10-03 14:03:13] INFO: Reads N50/N90: 9054 / 4697\n[2023-10-03 14:03:13] INFO: Minimum overlap set to 5000\n[2023-10-03 14:03:13] INFO: Selected k-mer size: 15\n[2023-10-03 14:03:13] INFO: >>>STAGE: assembly\n[2023-10-03 14:03:13] INFO: Assembling disjointigs\n[2023-10-03 14:03:13] INFO: Reading sequences\n[2023-10-03 14:03:13] INFO: Generating solid k-mer index\n[2023-10-03 14:03:33] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:03:33] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:03:34] INFO: Filling index table\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:04:13] INFO: Extending reads\n[2023-10-03 14:04:18] INFO: Overlap-based coverage: 25\n[2023-10-03 14:04:18] INFO: Median overlap divergence: 0.169224\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:04:20] INFO: Assembled 1 disjointigs\n[2023-10-03 14:04:20] INFO: Generating sequence\n10% 20% 40% 50% 70% 80% 100% \n[2023-10-03 14:04:21] INFO: >>>STAGE: consensus\n[2023-10-03 14:04:21] INFO: Running Minimap2\n[2023-10-03 14:04:22] INFO: Computing consensus\n[2023-10-03 14:04:24] INFO: Alignment error rate: 0.157030\n[2023-10-03 14:04:24] INFO: >>>STAGE: repeat\n[2023-10-03 14:04:24] INFO: Building and resolving repeat graph\n[2023-10-03 14:04:24] INFO: Reading sequences\n[2023-10-03 14:04:24] INFO: Building repeat graph\n50% 100% \n[2023-10-03 14:04:44] INFO: Median overlap divergence: 0\n[2023-10-03 14:04:44] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:05:04] INFO: Aligned read sequence: 1184737 / 1313105 (0.902241)\n[2023-10-03 14:05:04] INFO: Median overlap divergence: 0.0613459\n[2023-10-03 14:05:04] INFO: Mean edge coverage: 29\n[2023-10-03 14:05:04] INFO: Resolving repeats\n[2023-10-03 14:05:04] INFO: >>>STAGE: trestle\n[2023-10-03 14:05:04] INFO: Simple unbridged repeats: 0\n[2023-10-03 14:05:04] INFO: Resolved: 0\n[2023-10-03 14:05:04] INFO: >>>STAGE: contigger\n[2023-10-03 14:05:04] INFO: Generating contigs\n[2023-10-03 14:05:04] INFO: Reading sequences\n[2023-10-03 14:05:05] INFO: Generated 1 contigs\n[2023-10-03 14:05:05] INFO: Added 0 scaffold connections\n[2023-10-03 14:05:05] INFO: >>>STAGE: polishing\n[2023-10-03 14:05:05] INFO: Polishing genome (1/1)\n[2023-10-03 14:05:05] INFO: Running minimap2\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000003254830000004f'\n[2023-10-03 14:05:06] INFO: Separating alignment into bubbles\n[2023-10-03 14:05:07] INFO: Alignment error rate: 0.104939\n[2023-10-03 14:05:07] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000032549e00000050'\n[2023-10-03 14:05:12] INFO: >>>STAGE: finalize\n[2023-10-03 14:05:12] INFO: Assembly statistics:\n\n\tTotal length:\t40419\n\tFragments:\t1\n\tFragments N50:\t40419\n\tLargest frg:\t40419\n\tScaffolds:\t0\n\tMean coverage:\t26\n\n[2023-10-03 14:05:12] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/76/working/out_dir/assembly.fasta\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "119.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:05:12", "plugin": "core", "name": "end_epoch", "raw_value": "1696341912.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:03:13", "plugin": "core", "name": "start_epoch", "raw_value": "1696341793.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "flye/2.6-2", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.6", "test_index": 2, "time_seconds": 243.26865220069885, "inputs": {"inputs": {"src": "hda", "id": "c6a269a30e81a427"}, "mode": "--nano-corr", "g": "10000", "i": "2", "asm": "40"}, "job": {"model_class": "Job", "id": "90dd62796b1f8184", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:09:26.426458", "create_time": "2023-10-03T14:05:36.575608", "galaxy_version": "21.09", "command_version": "2.6-release", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.6", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-d24dm", "command_line": "ln -s '/galaxy/server/database/objects/d/9/3/dataset_d9327ccb-8947-4c78-b607-56624225f3d0.dat' ./input_0.fasta &&  flye --nano-corr ./input_0.fasta  -o out_dir -g '10000' -t ${GALAXY_SLOTS:-4} -i 2 --asm-coverage '40'    2>&1", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "no_trestle": "\"false\"", "meta": "\"false\"", "plasmids": "\"false\"", "asm": "\"40\"", "m": "\"\"", "i": "\"2\"", "g": "\"10000\"", "mode": "\"--nano-corr\""}, "inputs": {"inputs": {"id": "c6a269a30e81a427", "src": "hda", "uuid": "d9327ccb-8947-4c78-b607-56624225f3d0"}}, "outputs": {"consensus": {"id": "e45d2c9c4a68f0ec", "src": "hda", "uuid": "13dc99fd-fe8d-4a63-adfe-19098aaa89f3"}, "assembly_graph": {"id": "07cf02a7175f3c33", "src": "hda", "uuid": "019316ae-bc03-40a1-abee-e5260c0007f9"}, "assembly_gfa": {"id": "053090e7890d14b5", "src": "hda", "uuid": "356b9424-9bef-4291-acd7-fff53ff2d7da"}, "assembly_info": {"id": "8c71a7703556d585", "src": "hda", "uuid": "bc69211a-5822-4bfd-892a-3e26269655c3"}, "flye_log": {"id": "80fc8ab08ad36e03", "src": "hda", "uuid": "3005e825-1818-4899-8ada-268383144cd6"}}, "output_collections": {}, "tool_stdout": "[2023-10-03 14:07:23] INFO: Starting Flye 2.6-release\n[2023-10-03 14:07:23] INFO: >>>STAGE: configure\n[2023-10-03 14:07:23] INFO: Configuring run\n[2023-10-03 14:07:23] INFO: Total read length: 1466260\n[2023-10-03 14:07:23] INFO: Input genome size: 10000\n[2023-10-03 14:07:23] INFO: Estimated coverage: 146\n[2023-10-03 14:07:23] INFO: Reads N50/N90: 9054 / 4697\n[2023-10-03 14:07:23] INFO: Minimum overlap set to 5000\n[2023-10-03 14:07:23] INFO: Selected k-mer size: 17\n[2023-10-03 14:07:23] INFO: Using longest 40x reads for contig assembly\n[2023-10-03 14:07:23] INFO: >>>STAGE: assembly\n[2023-10-03 14:07:23] INFO: Assembling disjointigs\n[2023-10-03 14:07:23] INFO: Reading sequences\n[2023-10-03 14:07:23] INFO: Generating solid k-mer index\n[2023-10-03 14:07:43] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:07:43] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:07:43] INFO: Filling index table\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:08:17] INFO: Extending reads\n[2023-10-03 14:08:18] INFO: Overlap-based coverage: 3\n[2023-10-03 14:08:18] INFO: Median overlap divergence: 0.173521\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:08:18] INFO: Assembled 1 disjointigs\n[2023-10-03 14:08:18] INFO: Generating sequence\n10% 20% 40% 50% 70% 80% 100% \n[2023-10-03 14:08:20] INFO: >>>STAGE: consensus\n[2023-10-03 14:08:20] INFO: Running Minimap2\n[2023-10-03 14:08:21] INFO: Computing consensus\n[2023-10-03 14:08:22] INFO: Alignment error rate: 0.146313\n[2023-10-03 14:08:22] INFO: >>>STAGE: repeat\n[2023-10-03 14:08:22] INFO: Building and resolving repeat graph\n[2023-10-03 14:08:22] INFO: Reading sequences\n[2023-10-03 14:08:22] INFO: Building repeat graph\n50% 100% \n[2023-10-03 14:08:42] INFO: Median overlap divergence: 0\n[2023-10-03 14:08:42] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:09:02] INFO: Aligned read sequence: 1174263 / 1313105 (0.894264)\n[2023-10-03 14:09:02] INFO: Median overlap divergence: 0.0589391\n[2023-10-03 14:09:02] INFO: Mean edge coverage: 29\n[2023-10-03 14:09:02] INFO: Resolving repeats\n[2023-10-03 14:09:02] INFO: >>>STAGE: contigger\n[2023-10-03 14:09:02] INFO: Generating contigs\n[2023-10-03 14:09:02] INFO: Reading sequences\n[2023-10-03 14:09:02] INFO: Generated 1 contigs\n[2023-10-03 14:09:02] INFO: Added 0 scaffold connections\n[2023-10-03 14:09:02] INFO: >>>STAGE: polishing\n[2023-10-03 14:09:02] INFO: Polishing genome (1/2)\n[2023-10-03 14:09:02] INFO: Running minimap2\n[2023-10-03 14:09:03] INFO: Separating alignment into bubbles\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000003254f100000054'\n[2023-10-03 14:09:05] INFO: Alignment error rate: 0.099017\n[2023-10-03 14:09:05] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000032550300000055'\n[2023-10-03 14:09:09] INFO: Polishing genome (2/2)\n[2023-10-03 14:09:09] INFO: Running minimap2\n[2023-10-03 14:09:10] INFO: Separating alignment into bubbles\n[2023-10-03 14:09:12] INFO: Alignment error rate: 0.094400\n[2023-10-03 14:09:12] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:09:16] INFO: >>>STAGE: finalize\n[2023-10-03 14:09:16] INFO: Assembly statistics:\n\n\tTotal length:\t40414\n\tFragments:\t1\n\tFragments N50:\t40414\n\tLargest frg:\t40414\n\tScaffolds:\t0\n\tMean coverage:\t27\n\n[2023-10-03 14:09:16] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/78/working/out_dir/assembly.fasta\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000032550400000057'\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[2023-10-03 14:07:23] INFO: Starting Flye 2.6-release\n[2023-10-03 14:07:23] INFO: >>>STAGE: configure\n[2023-10-03 14:07:23] INFO: Configuring run\n[2023-10-03 14:07:23] INFO: Total read length: 1466260\n[2023-10-03 14:07:23] INFO: Input genome size: 10000\n[2023-10-03 14:07:23] INFO: Estimated coverage: 146\n[2023-10-03 14:07:23] INFO: Reads N50/N90: 9054 / 4697\n[2023-10-03 14:07:23] INFO: Minimum overlap set to 5000\n[2023-10-03 14:07:23] INFO: Selected k-mer size: 17\n[2023-10-03 14:07:23] INFO: Using longest 40x reads for contig assembly\n[2023-10-03 14:07:23] INFO: >>>STAGE: assembly\n[2023-10-03 14:07:23] INFO: Assembling disjointigs\n[2023-10-03 14:07:23] INFO: Reading sequences\n[2023-10-03 14:07:23] INFO: Generating solid k-mer index\n[2023-10-03 14:07:43] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:07:43] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:07:43] INFO: Filling index table\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:08:17] INFO: Extending reads\n[2023-10-03 14:08:18] INFO: Overlap-based coverage: 3\n[2023-10-03 14:08:18] INFO: Median overlap divergence: 0.173521\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:08:18] INFO: Assembled 1 disjointigs\n[2023-10-03 14:08:18] INFO: Generating sequence\n10% 20% 40% 50% 70% 80% 100% \n[2023-10-03 14:08:20] INFO: >>>STAGE: consensus\n[2023-10-03 14:08:20] INFO: Running Minimap2\n[2023-10-03 14:08:21] INFO: Computing consensus\n[2023-10-03 14:08:22] INFO: Alignment error rate: 0.146313\n[2023-10-03 14:08:22] INFO: >>>STAGE: repeat\n[2023-10-03 14:08:22] INFO: Building and resolving repeat graph\n[2023-10-03 14:08:22] INFO: Reading sequences\n[2023-10-03 14:08:22] INFO: Building repeat graph\n50% 100% \n[2023-10-03 14:08:42] INFO: Median overlap divergence: 0\n[2023-10-03 14:08:42] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:09:02] INFO: Aligned read sequence: 1174263 / 1313105 (0.894264)\n[2023-10-03 14:09:02] INFO: Median overlap divergence: 0.0589391\n[2023-10-03 14:09:02] INFO: Mean edge coverage: 29\n[2023-10-03 14:09:02] INFO: Resolving repeats\n[2023-10-03 14:09:02] INFO: >>>STAGE: contigger\n[2023-10-03 14:09:02] INFO: Generating contigs\n[2023-10-03 14:09:02] INFO: Reading sequences\n[2023-10-03 14:09:02] INFO: Generated 1 contigs\n[2023-10-03 14:09:02] INFO: Added 0 scaffold connections\n[2023-10-03 14:09:02] INFO: >>>STAGE: polishing\n[2023-10-03 14:09:02] INFO: Polishing genome (1/2)\n[2023-10-03 14:09:02] INFO: Running minimap2\n[2023-10-03 14:09:03] INFO: Separating alignment into bubbles\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000003254f100000054'\n[2023-10-03 14:09:05] INFO: Alignment error rate: 0.099017\n[2023-10-03 14:09:05] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000032550300000055'\n[2023-10-03 14:09:09] INFO: Polishing genome (2/2)\n[2023-10-03 14:09:09] INFO: Running minimap2\n[2023-10-03 14:09:10] INFO: Separating alignment into bubbles\n[2023-10-03 14:09:12] INFO: Alignment error rate: 0.094400\n[2023-10-03 14:09:12] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:09:16] INFO: >>>STAGE: finalize\n[2023-10-03 14:09:16] INFO: Assembly statistics:\n\n\tTotal length:\t40414\n\tFragments:\t1\n\tFragments N50:\t40414\n\tLargest frg:\t40414\n\tScaffolds:\t0\n\tMean coverage:\t27\n\n[2023-10-03 14:09:16] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/78/working/out_dir/assembly.fasta\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs000000000032550400000057'\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "113.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:09:16", "plugin": "core", "name": "end_epoch", "raw_value": "1696342156.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:07:23", "plugin": "core", "name": "start_epoch", "raw_value": "1696342043.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "flye/2.6-3", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.6", "test_index": 3, "time_seconds": 250.5615406036377, "inputs": {"inputs": {"src": "hda", "id": "8923133135ef894a"}, "mode": "--pacbio-raw", "g": "10000", "i": "1", "plasmids": true, "meta": true}, "job": {"model_class": "Job", "id": "4a7a3cf792e48374", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:13:37.334684", "create_time": "2023-10-03T14:09:40.211163", "galaxy_version": "21.09", "command_version": "2.6-release", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.6", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-qj7gs", "command_line": "ln -s '/galaxy/server/database/objects/e/2/d/dataset_e2d6eb3f-b597-4b2b-850d-91e2f9de82f4.dat' ./input_0.fasta &&  flye --pacbio-raw ./input_0.fasta  -o out_dir -g '10000' -t ${GALAXY_SLOTS:-4} -i 1 --plasmids --meta  2>&1", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "no_trestle": "\"false\"", "meta": "\"true\"", "plasmids": "\"true\"", "asm": "\"\"", "m": "\"\"", "i": "\"1\"", "g": "\"10000\"", "mode": "\"--pacbio-raw\""}, "inputs": {"inputs": {"id": "8923133135ef894a", "src": "hda", "uuid": "e2d6eb3f-b597-4b2b-850d-91e2f9de82f4"}}, "outputs": {"consensus": {"id": "ae503af2cb50ae19", "src": "hda", "uuid": "eb7bbcd0-9d8d-4d85-a82b-2c9f3d79ded8"}, "assembly_graph": {"id": "42ce891096ecb3fb", "src": "hda", "uuid": "5838d5a2-e43a-47a9-9e87-f40f4d444bad"}, "assembly_gfa": {"id": "8ad68761f79054d0", "src": "hda", "uuid": "8f885e9f-b35b-4a85-85dd-638cfbffe982"}, "assembly_info": {"id": "be18fbaac67a86bf", "src": "hda", "uuid": "2a0f8c93-35c2-41dc-9cfa-30c65e69bebf"}, "flye_log": {"id": "f68c0948ce0a0e00", "src": "hda", "uuid": "5ae60341-606a-49b4-b4f5-7f7b26651414"}}, "output_collections": {}, "tool_stdout": "[2023-10-03 14:11:26] INFO: Starting Flye 2.6-release\n[2023-10-03 14:11:26] INFO: >>>STAGE: configure\n[2023-10-03 14:11:26] INFO: Configuring run\n[2023-10-03 14:11:26] INFO: Total read length: 1466260\n[2023-10-03 14:11:26] INFO: Input genome size: 10000\n[2023-10-03 14:11:26] INFO: Estimated coverage: 146\n[2023-10-03 14:11:26] INFO: Reads N50/N90: 9054 / 4697\n[2023-10-03 14:11:26] INFO: Minimum overlap set to 5000\n[2023-10-03 14:11:26] INFO: Selected k-mer size: 15\n[2023-10-03 14:11:26] INFO: >>>STAGE: assembly\n[2023-10-03 14:11:26] INFO: Assembling disjointigs\n[2023-10-03 14:11:26] INFO: Reading sequences\n[2023-10-03 14:11:26] INFO: Generating solid k-mer index\n[2023-10-03 14:11:46] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:11:46] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:11:46] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:11:47] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:12:25] INFO: Extending reads\n[2023-10-03 14:12:30] INFO: Overlap-based coverage: 24\n[2023-10-03 14:12:30] INFO: Median overlap divergence: 0.184187\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:12:31] INFO: Assembled 1 disjointigs\n[2023-10-03 14:12:31] INFO: Generating sequence\n10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2023-10-03 14:12:33] INFO: >>>STAGE: consensus\n[2023-10-03 14:12:33] INFO: Running Minimap2\n[2023-10-03 14:12:35] INFO: Computing consensus\n[2023-10-03 14:12:36] INFO: Alignment error rate: 0.183209\n[2023-10-03 14:12:36] INFO: >>>STAGE: repeat\n[2023-10-03 14:12:36] INFO: Building and resolving repeat graph\n[2023-10-03 14:12:36] INFO: Reading sequences\n[2023-10-03 14:12:36] INFO: Building repeat graph\n50% 100% \n[2023-10-03 14:12:56] INFO: Median overlap divergence: 0\n[2023-10-03 14:12:56] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:13:17] INFO: Aligned read sequence: 1158698 / 1313105 (0.882411)\n[2023-10-03 14:13:17] INFO: Median overlap divergence: 0.0642069\n[2023-10-03 14:13:17] INFO: Mean edge coverage: 32\n[2023-10-03 14:13:17] INFO: Resolving repeats\n[2023-10-03 14:13:17] INFO: >>>STAGE: plasmids\n[2023-10-03 14:13:17] INFO: Recovering short unassembled sequences\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000003255570000005b'\n[2023-10-03 14:13:17] INFO: Added 0 extra contigs\n[2023-10-03 14:13:17] INFO: >>>STAGE: contigger\n[2023-10-03 14:13:17] INFO: Generating contigs\n[2023-10-03 14:13:17] INFO: Reading sequences\n[2023-10-03 14:13:17] INFO: Generated 1 contigs\n[2023-10-03 14:13:17] INFO: Added 0 scaffold connections\n[2023-10-03 14:13:17] INFO: >>>STAGE: polishing\n[2023-10-03 14:13:17] INFO: Polishing genome (1/1)\n[2023-10-03 14:13:17] INFO: Running minimap2\n[2023-10-03 14:13:18] INFO: Separating alignment into bubbles\n[2023-10-03 14:13:20] INFO: Alignment error rate: 0.115105\n[2023-10-03 14:13:20] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000003255670000005c'\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000003255730000005d'\n[2023-10-03 14:13:26] INFO: >>>STAGE: finalize\n[2023-10-03 14:13:26] INFO: Assembly statistics:\n\n\tTotal length:\t35685\n\tFragments:\t1\n\tFragments N50:\t35685\n\tLargest frg:\t35685\n\tScaffolds:\t0\n\tMean coverage:\t36\n\n[2023-10-03 14:13:26] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/80/working/out_dir/assembly.fasta\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[2023-10-03 14:11:26] INFO: Starting Flye 2.6-release\n[2023-10-03 14:11:26] INFO: >>>STAGE: configure\n[2023-10-03 14:11:26] INFO: Configuring run\n[2023-10-03 14:11:26] INFO: Total read length: 1466260\n[2023-10-03 14:11:26] INFO: Input genome size: 10000\n[2023-10-03 14:11:26] INFO: Estimated coverage: 146\n[2023-10-03 14:11:26] INFO: Reads N50/N90: 9054 / 4697\n[2023-10-03 14:11:26] INFO: Minimum overlap set to 5000\n[2023-10-03 14:11:26] INFO: Selected k-mer size: 15\n[2023-10-03 14:11:26] INFO: >>>STAGE: assembly\n[2023-10-03 14:11:26] INFO: Assembling disjointigs\n[2023-10-03 14:11:26] INFO: Reading sequences\n[2023-10-03 14:11:26] INFO: Generating solid k-mer index\n[2023-10-03 14:11:46] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:11:46] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:11:46] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:11:47] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:12:25] INFO: Extending reads\n[2023-10-03 14:12:30] INFO: Overlap-based coverage: 24\n[2023-10-03 14:12:30] INFO: Median overlap divergence: 0.184187\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:12:31] INFO: Assembled 1 disjointigs\n[2023-10-03 14:12:31] INFO: Generating sequence\n10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2023-10-03 14:12:33] INFO: >>>STAGE: consensus\n[2023-10-03 14:12:33] INFO: Running Minimap2\n[2023-10-03 14:12:35] INFO: Computing consensus\n[2023-10-03 14:12:36] INFO: Alignment error rate: 0.183209\n[2023-10-03 14:12:36] INFO: >>>STAGE: repeat\n[2023-10-03 14:12:36] INFO: Building and resolving repeat graph\n[2023-10-03 14:12:36] INFO: Reading sequences\n[2023-10-03 14:12:36] INFO: Building repeat graph\n50% 100% \n[2023-10-03 14:12:56] INFO: Median overlap divergence: 0\n[2023-10-03 14:12:56] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2023-10-03 14:13:17] INFO: Aligned read sequence: 1158698 / 1313105 (0.882411)\n[2023-10-03 14:13:17] INFO: Median overlap divergence: 0.0642069\n[2023-10-03 14:13:17] INFO: Mean edge coverage: 32\n[2023-10-03 14:13:17] INFO: Resolving repeats\n[2023-10-03 14:13:17] INFO: >>>STAGE: plasmids\n[2023-10-03 14:13:17] INFO: Recovering short unassembled sequences\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000003255570000005b'\n[2023-10-03 14:13:17] INFO: Added 0 extra contigs\n[2023-10-03 14:13:17] INFO: >>>STAGE: contigger\n[2023-10-03 14:13:17] INFO: Generating contigs\n[2023-10-03 14:13:17] INFO: Reading sequences\n[2023-10-03 14:13:17] INFO: Generated 1 contigs\n[2023-10-03 14:13:17] INFO: Added 0 scaffold connections\n[2023-10-03 14:13:17] INFO: >>>STAGE: polishing\n[2023-10-03 14:13:17] INFO: Polishing genome (1/1)\n[2023-10-03 14:13:17] INFO: Running minimap2\n[2023-10-03 14:13:18] INFO: Separating alignment into bubbles\n[2023-10-03 14:13:20] INFO: Alignment error rate: 0.115105\n[2023-10-03 14:13:20] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000003255670000005c'\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000003255730000005d'\n[2023-10-03 14:13:26] INFO: >>>STAGE: finalize\n[2023-10-03 14:13:26] INFO: Assembly statistics:\n\n\tTotal length:\t35685\n\tFragments:\t1\n\tFragments N50:\t35685\n\tLargest frg:\t35685\n\tScaffolds:\t0\n\tMean coverage:\t36\n\n[2023-10-03 14:13:26] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/80/working/out_dir/assembly.fasta\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 minutes", "plugin": "core", "name": "runtime_seconds", "raw_value": "121.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:13:26", "plugin": "core", "name": "end_epoch", "raw_value": "1696342406.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:11:25", "plugin": "core", "name": "start_epoch", "raw_value": "1696342285.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-0", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 0, "time_seconds": 145.33918690681458, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "003800e3d84b3431"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "e85427e813a676b5"}, "library|input_2": {"src": "hda", "id": "a43a5bfe496c8184"}, "library|type": "paired", "adv|reporting_options|reporting_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "de0f64ecdf021fcb", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:46:09.719803", "create_time": "2023-10-03T14:44:02.887002", "galaxy_version": "21.09", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-bscmv", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/3/2/4/dataset_324c4d35-58b6-45db-b3ee-18da533e2a35.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/8/4/a/dataset_84a5f812-37cd-4bd4-9640-55c261efc603.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/8/9/a/dataset_89a8bf57-55ef-4f3e-ad76-2739aed20530.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/c/6/3/dataset_c63711ae-d5d4-437d-8398-f4a7ddd9fbd6.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 1, \"max_primary\": \"\", \"reporting_options_selector\": \"advanced\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": \"false\", \"summary_file\": \"false\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 178, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 179, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 177, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "003800e3d84b3431", "src": "hda", "uuid": "324c4d35-58b6-45db-b3ee-18da533e2a35"}, "input_1": {"id": "e85427e813a676b5", "src": "hda", "uuid": "84a5f812-37cd-4bd4-9640-55c261efc603"}, "input_2": {"id": "a43a5bfe496c8184", "src": "hda", "uuid": "89a8bf57-55ef-4f3e-ad76-2739aed20530"}}, "outputs": {"output_alignments": {"id": "bc4bd56dbd7ee830", "src": "hda", "uuid": "c63711ae-d5d4-437d-8398-f4a7ddd9fbd6"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\nGetting block 3 of 29\n  Calculating Z arrays for bucket 1\n  Reserving size (252) for bucket 2\n  Reserving size (252) for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 29\n  Reserving size (252) for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 3: 40%\n  bucket 4: 10%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 4: 20%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 3: 70%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 3: 80%\n  bucket 4: 40%\n  bucket 2: 80%\n  bucket 1: 100%\n  bucket 3: 90%\n  bucket 2: 90%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 4: 50%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 4: 60%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 6: 10%\n  bucket 5: 80%\n  bucket 6: 20%\n  bucket 5: 90%\n  bucket 6: 30%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  bucket 20: 40%\n  Calculating Z arrays for bucket 21\n  bucket 20: 50%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 60%\n  bucket 21: 10%\n  bucket 20: 70%\n  bucket 21: 20%\n  bucket 20: 80%\n  bucket 21: 30%\n  bucket 20: 90%\n  bucket 21: 40%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 23: 10%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 10%\n  bucket 24: 20%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 30%\n  bucket 25: 10%\n  bucket 24: 40%\n  bucket 25: 20%\n  bucket 24: 50%\n  bucket 25: 30%\n  bucket 24: 60%\n  bucket 25: 40%\n  bucket 24: 70%\n  bucket 25: 50%\n  bucket 24: 80%\n  bucket 25: 60%\n  bucket 24: 90%\n  bucket 25: 70%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stderr": "\nSettings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\nGetting block 3 of 29\n  Calculating Z arrays for bucket 1\n  Reserving size (252) for bucket 2\n  Reserving size (252) for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 29\n  Reserving size (252) for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 2: 10%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 2: 30%\n  bucket 3: 40%\n  bucket 4: 10%\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 4: 20%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 3: 70%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 3: 80%\n  bucket 4: 40%\n  bucket 2: 80%\n  bucket 1: 100%\n  bucket 3: 90%\n  bucket 2: 90%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 4: 50%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 4: 60%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 6: 10%\n  bucket 5: 80%\n  bucket 6: 20%\n  bucket 5: 90%\n  bucket 6: 30%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  bucket 20: 40%\n  Calculating Z arrays for bucket 21\n  bucket 20: 50%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 60%\n  bucket 21: 10%\n  bucket 20: 70%\n  bucket 21: 20%\n  bucket 20: 80%\n  bucket 21: 30%\n  bucket 20: 90%\n  bucket 21: 40%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 23: 10%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 10%\n  bucket 24: 20%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 30%\n  bucket 25: 10%\n  bucket 24: 40%\n  bucket 25: 20%\n  bucket 24: 50%\n  bucket 25: 30%\n  bucket 24: 60%\n  bucket 25: 40%\n  bucket 24: 70%\n  bucket 25: 50%\n  bucket 24: 80%\n  bucket 25: 60%\n  bucket 24: 90%\n  bucket 25: 70%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-10-03 14:45:57", "plugin": "core", "name": "end_epoch", "raw_value": "1696344357.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:45:57", "plugin": "core", "name": "start_epoch", "raw_value": "1696344357.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-1", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 1, "time_seconds": 136.44822430610657, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "f8ed220d5fc6bfaf"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "ef89d59d339954c8"}, "library|input_2": {"src": "hda", "id": "e4170c54fdd26982"}, "library|type": "paired"}, "job": {"model_class": "Job", "id": "1ebd3ddd6c27bdaf", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:48:26.030523", "create_time": "2023-10-03T14:46:27.958909", "galaxy_version": "21.09", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-xg84m", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/0/8/1/dataset_08103637-51fa-40cc-8009-daf8311b56c3.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/1/9/9/dataset_199975f7-d8b4-415b-bbc8-c50878e5bc7f.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/e/6/9/dataset_e697ce7e-7d65-4285-a574-8c32ebd1b4d9.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/8/6/2/dataset_8627005c-6d79-4131-b6e3-2ba6f561e12f.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": \"false\", \"summary_file\": \"false\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 182, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 183, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 181, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "f8ed220d5fc6bfaf", "src": "hda", "uuid": "08103637-51fa-40cc-8009-daf8311b56c3"}, "input_1": {"id": "ef89d59d339954c8", "src": "hda", "uuid": "199975f7-d8b4-415b-bbc8-c50878e5bc7f"}, "input_2": {"id": "e4170c54fdd26982", "src": "hda", "uuid": "e697ce7e-7d65-4285-a574-8c32ebd1b4d9"}}, "outputs": {"output_alignments": {"id": "0ebd55f565773e7c", "src": "hda", "uuid": "8627005c-6d79-4131-b6e3-2ba6f561e12f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\n  Calculating Z arrays for bucket 1\n  Reserving size (252) for bucket 2\nGetting block 3 of 29\n  Reserving size (252) for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 29\n  Reserving size (252) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 4: 10%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 1: 70%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 2: 100%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\nGetting block 7 of 29\n  bucket 5: 60%\n  bucket 6: 40%\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 70%\n  bucket 6: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 80%\n  bucket 7: 10%\n  bucket 6: 60%\n  bucket 8: 10%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 7: 20%\n  bucket 5: 100%\n  bucket 8: 20%\n  bucket 6: 80%\n  bucket 7: 30%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 6: 90%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 6: 100%\n  bucket 8: 50%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\nReturning block of 165 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 100%\n  Entering block accumulator loop for bucket 10:\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 13:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 13: 80%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 17: 40%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  Sorting block time: 00:00:00\n  bucket 17: 100%\nReturning block of 118 for bucket 18\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 40%\n  bucket 19: 50%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 20: 10%\n  bucket 19: 80%\n  bucket 20: 20%\n  bucket 19: 90%\n  bucket 20: 30%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\nGetting block 24 of 29\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 24: 10%\n  bucket 25: 40%\n  bucket 24: 20%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 24: 30%\n  bucket 25: 70%\n  bucket 24: 40%\n  bucket 25: 80%\n  bucket 24: 50%\n  bucket 25: 90%\n  bucket 24: 60%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\n  bucket 23: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\nReturning block of 197 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 28: 20%\n  bucket 29: 30%\n  bucket 28: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 28: 40%\n  bucket 29: 60%\n  bucket 28: 50%\n  bucket 29: 70%\n  bucket 28: 60%\n  bucket 29: 80%\n  bucket 28: 70%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\n", "job_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stderr": "\nSettings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\n  Calculating Z arrays for bucket 1\n  Reserving size (252) for bucket 2\nGetting block 3 of 29\n  Reserving size (252) for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 29\n  Reserving size (252) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 4: 10%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 1: 70%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 2: 100%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\nGetting block 7 of 29\n  bucket 5: 60%\n  bucket 6: 40%\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 70%\n  bucket 6: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 80%\n  bucket 7: 10%\n  bucket 6: 60%\n  bucket 8: 10%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 7: 20%\n  bucket 5: 100%\n  bucket 8: 20%\n  bucket 6: 80%\n  bucket 7: 30%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 8: 30%\n  bucket 7: 40%\n  bucket 6: 90%\n  bucket 8: 40%\n  bucket 7: 50%\n  bucket 6: 100%\n  bucket 8: 50%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  bucket 7: 60%\n  bucket 8: 60%\n  bucket 7: 70%\n  bucket 8: 70%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\nReturning block of 165 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 100%\n  Entering block accumulator loop for bucket 10:\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 13:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 13: 80%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 17: 40%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  Sorting block time: 00:00:00\n  bucket 17: 100%\nReturning block of 118 for bucket 18\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 40%\n  bucket 19: 50%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 20: 10%\n  bucket 19: 80%\n  bucket 20: 20%\n  bucket 19: 90%\n  bucket 20: 30%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\nGetting block 24 of 29\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 24: 10%\n  bucket 25: 40%\n  bucket 24: 20%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 24: 30%\n  bucket 25: 70%\n  bucket 24: 40%\n  bucket 25: 80%\n  bucket 24: 50%\n  bucket 25: 90%\n  bucket 24: 60%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\n  bucket 23: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\nReturning block of 197 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 28: 20%\n  bucket 29: 30%\n  bucket 28: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 28: 40%\n  bucket 29: 60%\n  bucket 28: 50%\n  bucket 29: 70%\n  bucket 28: 60%\n  bucket 29: 80%\n  bucket 28: 70%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-10-03 14:48:15", "plugin": "core", "name": "end_epoch", "raw_value": "1696344495.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:48:15", "plugin": "core", "name": "start_epoch", "raw_value": "1696344495.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-10", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 10, "time_seconds": 126.22425270080566, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "4f24e7d07b06cfca"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "5fcdb701821de0d7"}, "library|rna_strandness": "R", "library|type": "single", "sum|new_summary": true, "sum|summary_file": true}, "job": {"model_class": "Job", "id": "04f24daab40f53e4", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T15:08:45.114762", "create_time": "2023-10-03T15:06:51.625184", "galaxy_version": "21.09", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-7pcdv", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/8/6/c/dataset_86c78c74-9f82-4586-af4a-e0264885a72f.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/d/8/b/dataset_d8bc6093-b377-497d-82bb-5cc51de1105d.dat' input_f.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'     -U 'input_f.fastq'      --rna-strandness R                        --new-summary  --summary-file summary.txt   | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/b/9/1/dataset_b91f54fd-7ae1-4f28-8d8b-16ecdb9ff12a.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": \"true\", \"summary_file\": \"true\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 220, \"src\": \"hda\"}]}, \"rna_strandness\": \"R\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 219, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "4f24e7d07b06cfca", "src": "hda", "uuid": "86c78c74-9f82-4586-af4a-e0264885a72f"}, "input_1": {"id": "5fcdb701821de0d7", "src": "hda", "uuid": "d8bc6093-b377-497d-82bb-5cc51de1105d"}}, "outputs": {"output_alignments": {"id": "a28c7f8d62c4784e", "src": "hda", "uuid": "b91f54fd-7ae1-4f28-8d8b-16ecdb9ff12a"}, "summary_file": {"id": "c9c768e8c9c5b5e2", "src": "hda", "uuid": "d9be1d69-5bf0-4d7b-ad9e-b4b7a566a224"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\n  Reserving size (252) for bucket 2\nGetting block 3 of 29\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\nGetting block 4 of 29\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  Reserving size (252) for bucket 3\n  Reserving size (252) for bucket 4\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 30%\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 40%\n  bucket 3: 10%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 4: 10%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 3: 20%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 4: 20%\n  bucket 1: 80%\n  bucket 3: 30%\n  bucket 2: 80%\n  bucket 4: 30%\n  bucket 1: 90%\n  bucket 3: 40%\n  bucket 2: 90%\n  bucket 1: 100%\n  bucket 3: 50%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 4: 40%\n  bucket 2: 100%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  bucket 7: 10%\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  bucket 9: 30%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 10%\n  bucket 9: 60%\n  bucket 10: 20%\n  bucket 9: 70%\n  bucket 10: 30%\n  bucket 9: 80%\n  bucket 10: 40%\n  bucket 9: 90%\n  bucket 10: 50%\n  bucket 9: 100%\n  bucket 10: 60%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  bucket 11: 70%\n  Calculating Z arrays for bucket 12\n  bucket 11: 80%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 90%\n  bucket 12: 10%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  Sorting block time: 00:00:00\n  bucket 12: 90%\nReturning block of 230 for bucket 11\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 30%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 40%\n  bucket 16: 10%\n  bucket 15: 50%\n  bucket 16: 20%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 15: 70%\n  bucket 16: 40%\n  bucket 15: 80%\n  bucket 16: 50%\n  bucket 15: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 20: 80%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 21: 90%\n  bucket 20: 100%\n  bucket 21: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 23: 40%\n  bucket 24: 50%\n  bucket 23: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 60%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 23: 70%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 26: 10%\n  bucket 25: 70%\n  bucket 26: 20%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 30%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:01\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\nHISAT2 summary stats:\n\tTotal reads: 10\n\t\tAligned 0 time: 0 (0.00%)\n\t\tAligned 1 time: 10 (100.00%)\n\t\tAligned >1 times: 0 (0.00%)\n\tOverall alignment rate: 100.00%\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:01\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\nHISAT2 summary stats:\n\tTotal reads: 10\n\t\tAligned 0 time: 0 (0.00%)\n\t\tAligned 1 time: 10 (100.00%)\n\t\tAligned >1 times: 0 (0.00%)\n\tOverall alignment rate: 100.00%\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\n  Reserving size (252) for bucket 2\nGetting block 3 of 29\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\nGetting block 4 of 29\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  Reserving size (252) for bucket 3\n  Reserving size (252) for bucket 4\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 30%\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 40%\n  bucket 3: 10%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 4: 10%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 3: 20%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 4: 20%\n  bucket 1: 80%\n  bucket 3: 30%\n  bucket 2: 80%\n  bucket 4: 30%\n  bucket 1: 90%\n  bucket 3: 40%\n  bucket 2: 90%\n  bucket 1: 100%\n  bucket 3: 50%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 4: 40%\n  bucket 2: 100%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  bucket 7: 10%\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  bucket 9: 30%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 10: 10%\n  bucket 9: 60%\n  bucket 10: 20%\n  bucket 9: 70%\n  bucket 10: 30%\n  bucket 9: 80%\n  bucket 10: 40%\n  bucket 9: 90%\n  bucket 10: 50%\n  bucket 9: 100%\n  bucket 10: 60%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  bucket 11: 70%\n  Calculating Z arrays for bucket 12\n  bucket 11: 80%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 90%\n  bucket 12: 10%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  Sorting block time: 00:00:00\n  bucket 12: 90%\nReturning block of 230 for bucket 11\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 30%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 40%\n  bucket 16: 10%\n  bucket 15: 50%\n  bucket 16: 20%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 15: 70%\n  bucket 16: 40%\n  bucket 15: 80%\n  bucket 16: 50%\n  bucket 15: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 20: 80%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 21: 90%\n  bucket 20: 100%\n  bucket 21: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 23: 40%\n  bucket 24: 50%\n  bucket 23: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 60%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 23: 70%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 26: 10%\n  bucket 25: 70%\n  bucket 26: 20%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 30%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-10-03 15:08:34", "plugin": "core", "name": "end_epoch", "raw_value": "1696345714.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 15:08:33", "plugin": "core", "name": "start_epoch", "raw_value": "1696345713.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-11", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 11, "time_seconds": 127.4078938961029, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "d09c02df45172170"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "00e1dd45d300657e"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "0b6fa992e475597a", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T15:10:52.468437", "create_time": "2023-10-03T15:08:57.890449", "galaxy_version": "21.09", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-zzmhc", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/7/c/9/dataset_7c9f7fba-e1b9-4163-aca1-3210f5a2c613.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        seqtk seq -1 '/galaxy/server/database/objects/7/2/a/dataset_72a73cf1-c4ed-4cec-8ab8-2be09abd3c32.dat' > input_f.fastq && seqtk seq -2 '/galaxy/server/database/objects/7/2/a/dataset_72a73cf1-c4ed-4cec-8ab8-2be09abd3c32.dat' > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/2/b/9/dataset_2b9ed97d-96d3-43ed-b70a-27db25aebb37.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": \"false\", \"summary_file\": \"false\"}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 224, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 223, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "d09c02df45172170", "src": "hda", "uuid": "7c9f7fba-e1b9-4163-aca1-3210f5a2c613"}, "input_1": {"id": "00e1dd45d300657e", "src": "hda", "uuid": "72a73cf1-c4ed-4cec-8ab8-2be09abd3c32"}}, "outputs": {"output_alignments": {"id": "b29c5aa99444fb40", "src": "hda", "uuid": "2b9ed97d-96d3-43ed-b70a-27db25aebb37"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\n  Calculating Z arrays for bucket 1\n  Reserving size (252) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\nGetting block 3 of 29\n  Reserving size (252) for bucket 3\n  Entering block accumulator loop for bucket 2:\nGetting block 4 of 29\n  bucket 2: 10%\n  Calculating Z arrays for bucket 3\n  bucket 2: 20%\n  bucket 1: 10%\n  Reserving size (252) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 2: 30%\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 40%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 3: 20%\n  bucket 1: 50%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 2: 80%\n  bucket 4: 30%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 2: 90%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 1: 90%\n  bucket 2: 100%\n  Sorting block of length 239 for bucket 2\n  bucket 1: 100%\n  bucket 4: 60%\n  bucket 3: 80%\n  (Using difference cover)\n  Sorting block of length 127 for bucket 1\n  bucket 4: 70%\n  bucket 3: 90%\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\nGetting block 6 of 29\n  bucket 5: 30%\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 40%\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 50%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 60%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 5: 70%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 80%\n  bucket 7: 20%\n  bucket 6: 40%\n  bucket 5: 90%\n  bucket 7: 30%\n  bucket 6: 50%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 7: 40%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 6: 90%\n  bucket 7: 70%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 50%\n  bucket 10: 10%\n  bucket 9: 60%\n  bucket 10: 20%\n  bucket 9: 70%\n  bucket 10: 30%\n  bucket 9: 80%\n  bucket 10: 40%\n  bucket 9: 90%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 60%\n  bucket 14: 10%\n  bucket 13: 70%\n  bucket 14: 20%\n  bucket 13: 80%\n  bucket 14: 30%\n  bucket 13: 90%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 198 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 60%\n  bucket 15: 70%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 80%\n  bucket 16: 10%\n  bucket 15: 90%\n  bucket 16: 20%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\nReturning block of 178 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  bucket 17: 20%\n  Calculating Z arrays for bucket 18\n  bucket 17: 30%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 18: 30%\n  bucket 17: 80%\n  bucket 18: 40%\n  bucket 17: 90%\n  bucket 18: 50%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\nGetting block 20 of 29\n  bucket 19: 40%\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 50%\n  bucket 19: 60%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 70%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 19: 80%\n  bucket 20: 40%\n  bucket 19: 90%\n  bucket 20: 50%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 90%\n  bucket 21: 100%\n  bucket 22: 10%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\nReturning block of 132 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 30%\n  bucket 23: 40%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 24: 10%\n  bucket 23: 70%\n  bucket 24: 20%\n  bucket 23: 80%\n  bucket 24: 30%\n  bucket 23: 90%\n  bucket 24: 40%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 25: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  bucket 27: 20%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stderr": "\nSettings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\n  Calculating Z arrays for bucket 1\n  Reserving size (252) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\nGetting block 3 of 29\n  Reserving size (252) for bucket 3\n  Entering block accumulator loop for bucket 2:\nGetting block 4 of 29\n  bucket 2: 10%\n  Calculating Z arrays for bucket 3\n  bucket 2: 20%\n  bucket 1: 10%\n  Reserving size (252) for bucket 4\n  Calculating Z arrays for bucket 4\n  bucket 2: 30%\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 40%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 3: 20%\n  bucket 1: 50%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 2: 60%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 3: 50%\n  bucket 2: 80%\n  bucket 4: 30%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 4: 40%\n  bucket 2: 90%\n  bucket 3: 70%\n  bucket 4: 50%\n  bucket 1: 90%\n  bucket 2: 100%\n  Sorting block of length 239 for bucket 2\n  bucket 1: 100%\n  bucket 4: 60%\n  bucket 3: 80%\n  (Using difference cover)\n  Sorting block of length 127 for bucket 1\n  bucket 4: 70%\n  bucket 3: 90%\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\nGetting block 6 of 29\n  bucket 5: 30%\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 40%\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 50%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 60%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 5: 70%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 5: 80%\n  bucket 7: 20%\n  bucket 6: 40%\n  bucket 5: 90%\n  bucket 7: 30%\n  bucket 6: 50%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 7: 40%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 6: 90%\n  bucket 7: 70%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 50%\n  bucket 10: 10%\n  bucket 9: 60%\n  bucket 10: 20%\n  bucket 9: 70%\n  bucket 10: 30%\n  bucket 9: 80%\n  bucket 10: 40%\n  bucket 9: 90%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 60%\n  bucket 14: 10%\n  bucket 13: 70%\n  bucket 14: 20%\n  bucket 13: 80%\n  bucket 14: 30%\n  bucket 13: 90%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 198 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 60%\n  bucket 15: 70%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 80%\n  bucket 16: 10%\n  bucket 15: 90%\n  bucket 16: 20%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\nReturning block of 178 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  bucket 17: 20%\n  Calculating Z arrays for bucket 18\n  bucket 17: 30%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 18: 30%\n  bucket 17: 80%\n  bucket 18: 40%\n  bucket 17: 90%\n  bucket 18: 50%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\nGetting block 20 of 29\n  bucket 19: 40%\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 50%\n  bucket 19: 60%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 70%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 19: 80%\n  bucket 20: 40%\n  bucket 19: 90%\n  bucket 20: 50%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 90%\n  bucket 21: 100%\n  bucket 22: 10%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\nReturning block of 132 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 30%\n  bucket 23: 40%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 24: 10%\n  bucket 23: 70%\n  bucket 24: 20%\n  bucket 23: 80%\n  bucket 24: 30%\n  bucket 23: 90%\n  bucket 24: 40%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 25: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  bucket 27: 20%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-10-03 15:10:42", "plugin": "core", "name": "end_epoch", "raw_value": "1696345842.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 15:10:41", "plugin": "core", "name": "start_epoch", "raw_value": "1696345841.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-12", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 12, "time_seconds": 130.4755494594574, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "51b56d06ad0653ef"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "babc707a329b377d"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "d89d481316127a4b", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T15:13:02.979284", "create_time": "2023-10-03T15:11:05.680865", "galaxy_version": "21.09", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-knwz6", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/e/2/8/dataset_e2819321-08e4-4c9d-ab3d-c89025f322d0.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        bzcat '/galaxy/server/database/objects/7/2/9/dataset_729639e8-0bf6-42af-987d-0b797fab39d3.dat' | seqtk seq -1 /dev/stdin > input_f.fastq && bzcat '/galaxy/server/database/objects/7/2/9/dataset_729639e8-0bf6-42af-987d-0b797fab39d3.dat' | seqtk seq -2 /dev/stdin > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/6/d/d/dataset_6ddd9393-36af-4d7a-b1ef-93c86ee2c4ee.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": \"false\", \"summary_file\": \"false\"}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 227, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 226, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "51b56d06ad0653ef", "src": "hda", "uuid": "e2819321-08e4-4c9d-ab3d-c89025f322d0"}, "input_1": {"id": "babc707a329b377d", "src": "hda", "uuid": "729639e8-0bf6-42af-987d-0b797fab39d3"}}, "outputs": {"output_alignments": {"id": "1408b93a7b554323", "src": "hda", "uuid": "6ddd9393-36af-4d7a-b1ef-93c86ee2c4ee"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\n  Reserving size (252) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\nGetting block 3 of 29\n  Entering block accumulator loop for bucket 1:\n  Reserving size (252) for bucket 3\nGetting block 4 of 29\n  Reserving size (252) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 40%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 2: 40%\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 3: 20%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 4: 20%\n  bucket 2: 70%\n  bucket 3: 40%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 3: 50%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 3: 60%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 4: 30%\n  bucket 3: 70%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 40%\n  bucket 6: 10%\n  bucket 5: 50%\n  bucket 6: 20%\n  bucket 5: 60%\n  bucket 6: 30%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 29\n  bucket 13: 20%\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 30%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 10%\n  bucket 13: 60%\n  bucket 14: 20%\n  bucket 13: 70%\n  bucket 14: 30%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 14: 40%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\nGetting block 16 of 29\n  bucket 15: 60%\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 70%\n  bucket 15: 80%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 90%\n  bucket 16: 10%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  bucket 17: 30%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  bucket 21: 20%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 21: 40%\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 21: 50%\n  bucket 21: 60%\n  Entering block accumulator loop for bucket 23:\n  bucket 21: 70%\n  bucket 23: 10%\n  bucket 21: 80%\n  bucket 23: 20%\n  bucket 21: 90%\n  bucket 23: 30%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 25: 80%\n  bucket 26: 90%\n  bucket 25: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stderr": "\nSettings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\n  Reserving size (252) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\nGetting block 3 of 29\n  Entering block accumulator loop for bucket 1:\n  Reserving size (252) for bucket 3\nGetting block 4 of 29\n  Reserving size (252) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 40%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 2: 40%\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 3: 20%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 4: 20%\n  bucket 2: 70%\n  bucket 3: 40%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 3: 50%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 3: 60%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 4: 30%\n  bucket 3: 70%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 40%\n  bucket 6: 10%\n  bucket 5: 50%\n  bucket 6: 20%\n  bucket 5: 60%\n  bucket 6: 30%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 7: 90%\n  bucket 8: 60%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 29\n  bucket 13: 20%\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 30%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 14: 10%\n  bucket 13: 60%\n  bucket 14: 20%\n  bucket 13: 70%\n  bucket 14: 30%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 14: 40%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\nGetting block 16 of 29\n  bucket 15: 60%\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 70%\n  bucket 15: 80%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 90%\n  bucket 16: 10%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  bucket 17: 30%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  bucket 21: 20%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 21: 40%\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 21: 50%\n  bucket 21: 60%\n  Entering block accumulator loop for bucket 23:\n  bucket 21: 70%\n  bucket 23: 10%\n  bucket 21: 80%\n  bucket 23: 20%\n  bucket 21: 90%\n  bucket 23: 30%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 25: 80%\n  bucket 26: 90%\n  bucket 25: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-10-03 15:12:51", "plugin": "core", "name": "end_epoch", "raw_value": "1696345971.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 15:12:51", "plugin": "core", "name": "start_epoch", "raw_value": "1696345971.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-13", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 13, "time_seconds": 130.1756899356842, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "1ad4081fe0c7c269"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "151a4c71097bd0b3"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "3050d1c53665af65", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T15:15:13.417924", "create_time": "2023-10-03T15:13:15.886557", "galaxy_version": "21.09", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-z8m4s", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/e/1/c/dataset_e1c7a2ec-0bfd-40e6-b160-1bbf941902e2.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        seqtk seq -1 '/galaxy/server/database/objects/5/2/b/dataset_52b553b2-f051-4ad6-a34d-e40edbd548b6.dat' > input_f.fastq && seqtk seq -2 '/galaxy/server/database/objects/5/2/b/dataset_52b553b2-f051-4ad6-a34d-e40edbd548b6.dat' > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/0/6/e/dataset_06e5e27b-b131-42de-8405-06b37f6d0cd0.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": \"false\", \"summary_file\": \"false\"}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 230, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 229, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "1ad4081fe0c7c269", "src": "hda", "uuid": "e1c7a2ec-0bfd-40e6-b160-1bbf941902e2"}, "input_1": {"id": "151a4c71097bd0b3", "src": "hda", "uuid": "52b553b2-f051-4ad6-a34d-e40edbd548b6"}}, "outputs": {"output_alignments": {"id": "684de9ad8e97ab74", "src": "hda", "uuid": "06e5e27b-b131-42de-8405-06b37f6d0cd0"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\n  Calculating Z arrays for bucket 1\n  Reserving size (252) for bucket 2\n  Calculating Z arrays for bucket 2\nGetting block 3 of 29\n  Reserving size (252) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\nGetting block 4 of 29\n  Reserving size (252) for bucket 4\n  bucket 2: 10%\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 2: 40%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 4: 10%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 4: 20%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 4: 30%\n  bucket 2: 90%\n  bucket 1: 100%\n  bucket 3: 80%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 4: 40%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 50%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\nGetting block 6 of 29\n  bucket 5: 80%\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Reserving size (252) for bucket 6\n  bucket 5: 90%\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 6\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 6:\n  bucket 7: 10%\n  bucket 6: 10%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 7: 30%\n  bucket 6: 30%\n  bucket 7: 40%\n  bucket 6: 40%\n  bucket 7: 50%\n  bucket 6: 50%\n  bucket 7: 60%\n  bucket 6: 60%\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  bucket 7: 70%\n  bucket 6: 70%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 7: 100%\n  bucket 6: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  bucket 9: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  bucket 13: 10%\n  bucket 12: 30%\n  bucket 13: 20%\n  bucket 12: 40%\n  bucket 13: 30%\n  bucket 12: 50%\n  bucket 13: 40%\n  bucket 12: 60%\n  bucket 13: 50%\n  bucket 12: 70%\n  bucket 13: 60%\n  bucket 12: 80%\n  bucket 13: 70%\n  bucket 12: 90%\n  bucket 13: 80%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 30%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 18: 60%\n  bucket 19: 50%\n  bucket 18: 70%\n  bucket 19: 60%\n  bucket 18: 80%\n  bucket 19: 70%\n  bucket 18: 90%\n  bucket 19: 80%\n  bucket 18: 100%\n  bucket 19: 90%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 22:\n  bucket 23: 10%\n  bucket 22: 10%\n  bucket 23: 20%\n  bucket 22: 20%\n  bucket 23: 30%\n  bucket 22: 30%\n  bucket 23: 40%\n  bucket 22: 40%\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 22: 70%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 80%\n  bucket 22: 80%\n  bucket 23: 90%\n  bucket 22: 90%\n  bucket 24: 10%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  (Using difference cover)\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  Sorting block time: 00:00:00\n  bucket 24: 80%\nReturning block of 221 for bucket 22\n  bucket 24: 90%\n  Sorting block time: 00:00:00\n  bucket 24: 100%\nReturning block of 142 for bucket 23\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  bucket 27: 20%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stderr": "\nSettings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\n  Calculating Z arrays for bucket 1\n  Reserving size (252) for bucket 2\n  Calculating Z arrays for bucket 2\nGetting block 3 of 29\n  Reserving size (252) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\nGetting block 4 of 29\n  Reserving size (252) for bucket 4\n  bucket 2: 10%\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 2: 40%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 4: 10%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 4: 20%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 4: 30%\n  bucket 2: 90%\n  bucket 1: 100%\n  bucket 3: 80%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 4: 40%\n  bucket 3: 90%\n  bucket 2: 100%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 50%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\nGetting block 6 of 29\n  bucket 5: 80%\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Reserving size (252) for bucket 6\n  bucket 5: 90%\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 6\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 6:\n  bucket 7: 10%\n  bucket 6: 10%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 7: 30%\n  bucket 6: 30%\n  bucket 7: 40%\n  bucket 6: 40%\n  bucket 7: 50%\n  bucket 6: 50%\n  bucket 7: 60%\n  bucket 6: 60%\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  bucket 7: 70%\n  bucket 6: 70%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 7: 100%\n  bucket 6: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  bucket 9: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  bucket 13: 10%\n  bucket 12: 30%\n  bucket 13: 20%\n  bucket 12: 40%\n  bucket 13: 30%\n  bucket 12: 50%\n  bucket 13: 40%\n  bucket 12: 60%\n  bucket 13: 50%\n  bucket 12: 70%\n  bucket 13: 60%\n  bucket 12: 80%\n  bucket 13: 70%\n  bucket 12: 90%\n  bucket 13: 80%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 30%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 18: 60%\n  bucket 19: 50%\n  bucket 18: 70%\n  bucket 19: 60%\n  bucket 18: 80%\n  bucket 19: 70%\n  bucket 18: 90%\n  bucket 19: 80%\n  bucket 18: 100%\n  bucket 19: 90%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 22:\n  bucket 23: 10%\n  bucket 22: 10%\n  bucket 23: 20%\n  bucket 22: 20%\n  bucket 23: 30%\n  bucket 22: 30%\n  bucket 23: 40%\n  bucket 22: 40%\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 22: 70%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 80%\n  bucket 22: 80%\n  bucket 23: 90%\n  bucket 22: 90%\n  bucket 24: 10%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  (Using difference cover)\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  Sorting block time: 00:00:00\n  bucket 24: 80%\nReturning block of 221 for bucket 22\n  bucket 24: 90%\n  Sorting block time: 00:00:00\n  bucket 24: 100%\nReturning block of 142 for bucket 23\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  bucket 27: 20%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-10-03 15:15:02", "plugin": "core", "name": "end_epoch", "raw_value": "1696346102.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 15:15:01", "plugin": "core", "name": "start_epoch", "raw_value": "1696346101.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-14", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 14, "time_seconds": 129.29190516471863, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "32da2c375c433afb"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "ce252c6d6ebf53ed"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "f83e11dbc44e3ac0", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T15:17:22.777554", "create_time": "2023-10-03T15:15:25.814448", "galaxy_version": "21.09", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-cctxd", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/7/1/c/dataset_71cafbf0-3f3a-433a-aa8b-9b79fc3800d9.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        seqtk seq -1 '/galaxy/server/database/objects/a/d/d/dataset_add5ed9c-0b31-477e-9ab7-30068855f106.dat' > input_f.fasta && seqtk seq -2 '/galaxy/server/database/objects/a/d/d/dataset_add5ed9c-0b31-477e-9ab7-30068855f106.dat' > input_r.fasta &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f   -1 input_f.fasta -2 input_r.fasta                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/9/e/2/dataset_9e253abd-96c7-4ddd-b291-61c1b3464136.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": \"false\", \"summary_file\": \"false\"}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 233, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 232, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "32da2c375c433afb", "src": "hda", "uuid": "71cafbf0-3f3a-433a-aa8b-9b79fc3800d9"}, "input_1": {"id": "ce252c6d6ebf53ed", "src": "hda", "uuid": "add5ed9c-0b31-477e-9ab7-30068855f106"}}, "outputs": {"output_alignments": {"id": "e2cb1d1f85e8e62b", "src": "hda", "uuid": "9e253abd-96c7-4ddd-b291-61c1b3464136"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 29\n  Reserving size (252) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\nGetting block 3 of 29\n  Reserving size (252) for bucket 3\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  bucket 1: 20%\nGetting block 4 of 29\n  Reserving size (252) for bucket 4\n  bucket 1: 30%\n  bucket 2: 10%\n  Calculating Z arrays for bucket 4\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 3: 10%\n  bucket 2: 30%\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 3: 60%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 4: 30%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 2: 100%\n  bucket 4: 60%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 7: 10%\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 6: 90%\n  bucket 7: 70%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 11: 20%\n  bucket 12: 30%\n  bucket 11: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 11: 40%\n  bucket 12: 60%\n  bucket 11: 50%\n  bucket 12: 70%\n  bucket 11: 60%\n  bucket 12: 80%\n  bucket 11: 70%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  bucket 13: 30%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 40%\n  bucket 14: 10%\n  bucket 13: 50%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 14: 60%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 16: 50%\n  bucket 15: 50%\n  bucket 16: 60%\n  bucket 15: 60%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  bucket 15: 90%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  bucket 20: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 20%\n  bucket 23: 30%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 24: 10%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 24: 30%\n  bucket 23: 80%\n  bucket 24: 40%\n  bucket 23: 90%\n  bucket 23: 100%\n  bucket 24: 50%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 25: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 25: 60%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 29\n  bucket 27: 10%\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 20%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    3 (30.00%) aligned concordantly 0 times\n    7 (70.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        3 (50.00%) aligned 0 times\n        3 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n85.00% overall alignment rate\n", "stderr": "\nSettings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    3 (30.00%) aligned concordantly 0 times\n    7 (70.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        3 (50.00%) aligned 0 times\n        3 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n85.00% overall alignment rate\n", "stdout": "\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 29\n  Reserving size (252) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\nGetting block 3 of 29\n  Reserving size (252) for bucket 3\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  bucket 1: 20%\nGetting block 4 of 29\n  Reserving size (252) for bucket 4\n  bucket 1: 30%\n  bucket 2: 10%\n  Calculating Z arrays for bucket 4\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 3: 10%\n  bucket 2: 30%\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 2: 50%\n  bucket 1: 80%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 3: 60%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 4: 30%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 2: 100%\n  bucket 4: 60%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 7: 10%\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 6: 90%\n  bucket 7: 70%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 11: 20%\n  bucket 12: 30%\n  bucket 11: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 11: 40%\n  bucket 12: 60%\n  bucket 11: 50%\n  bucket 12: 70%\n  bucket 11: 60%\n  bucket 12: 80%\n  bucket 11: 70%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  bucket 13: 30%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 40%\n  bucket 14: 10%\n  bucket 13: 50%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 14: 60%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 16: 50%\n  bucket 15: 50%\n  bucket 16: 60%\n  bucket 15: 60%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  bucket 15: 90%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  bucket 20: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 20%\n  bucket 23: 30%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 24: 10%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 24: 30%\n  bucket 23: 80%\n  bucket 24: 40%\n  bucket 23: 90%\n  bucket 23: 100%\n  bucket 24: 50%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 25: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 25: 60%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 29\n  bucket 27: 10%\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 20%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-10-03 15:17:11", "plugin": "core", "name": "end_epoch", "raw_value": "1696346231.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 15:17:11", "plugin": "core", "name": "start_epoch", "raw_value": "1696346231.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-15", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 15, "time_seconds": 129.8097984790802, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "a02dd7205ff08688"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "17b27dd7d22b5edc"}, "library|rna_strandness": "R", "library|type": "single", "adv|spliced_options|novel_splicesite_outfile": true, "adv|spliced_options|spliced_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "a97101034ad5024f", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T15:19:32.221137", "create_time": "2023-10-03T15:17:35.769730", "galaxy_version": "21.09", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-gj87b", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/d/a/e/dataset_daed0d78-8eb4-40d4-84bd-703e7b2347c2.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/a/b/d/dataset_abd2319f-3af8-4557-9dc3-6619578c8e0f.dat' input_f.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'     -U 'input_f.fastq'      --rna-strandness R             --pen-cansplice 0 --pen-noncansplice 12 --pen-canintronlen G,-8.0,1.0 --pen-noncanintronlen G,-8.0,1.0  --min-intronlen 20 --max-intronlen 500000   --novel-splicesite-outfile '/galaxy/server/database/objects/6/7/0/dataset_670a76ca-4bea-4e86-b9e4-07c136ea9489.dat'                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/a/9/e/dataset_a9ec33b0-c2c2-4a7a-9c52-7bb38f4a9ca7.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 1, \"canonical_penalty\": \"0\", \"coefficient\": \"1.0\", \"constant_term\": \"-8.0\", \"function_type\": \"G\", \"known_splice_gtf\": null, \"max_intron\": \"500000\", \"min_intron\": \"20\", \"nc_coefficient\": \"1.0\", \"nc_constant_term\": \"-8.0\", \"nc_function_type\": \"G\", \"no_spliced_alignment_options\": {\"__current_case__\": 1, \"no_spliced_alignment\": \"\"}, \"noncanonical_penalty\": \"12\", \"notmplen\": \"false\", \"novel_splicesite_outfile\": \"true\", \"spliced_options_selector\": \"advanced\", \"tma\": \"\"}}", "sum": "{\"new_summary\": \"false\", \"summary_file\": \"false\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 236, \"src\": \"hda\"}]}, \"rna_strandness\": \"R\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 235, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "a02dd7205ff08688", "src": "hda", "uuid": "daed0d78-8eb4-40d4-84bd-703e7b2347c2"}, "input_1": {"id": "17b27dd7d22b5edc", "src": "hda", "uuid": "abd2319f-3af8-4557-9dc3-6619578c8e0f"}}, "outputs": {"output_alignments": {"id": "60cedbfe23677c53", "src": "hda", "uuid": "a9ec33b0-c2c2-4a7a-9c52-7bb38f4a9ca7"}, "novel_splicesite_output": {"id": "b2e094aa45816d3a", "src": "hda", "uuid": "670a76ca-4bea-4e86-b9e4-07c136ea9489"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\n  Reserving size (252) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\nGetting block 3 of 29\n  Reserving size (252) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  bucket 2: 10%\n  bucket 1: 10%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\nGetting block 4 of 29\n  Reserving size (252) for bucket 4\n  bucket 2: 30%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 2: 40%\n  Calculating Z arrays for bucket 4\n  bucket 3: 20%\n  bucket 2: 50%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 2: 60%\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 40%\n  bucket 2: 70%\n  bucket 1: 60%\n  bucket 3: 50%\n  bucket 4: 10%\n  bucket 2: 80%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 2: 90%\n  bucket 1: 80%\n  bucket 4: 20%\n  bucket 2: 100%\n  bucket 1: 90%\n  Sorting block of length 239 for bucket 2\n  bucket 4: 30%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 4: 60%\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 4: 70%\n  Sorting block time: 00:00:00\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\nReturning block of 128 for bucket 1\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 90%\n  bucket 6: 10%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 70%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 80%\n  bucket 8: 10%\n  bucket 7: 90%\n  bucket 8: 20%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  Sorting block time: 00:00:00\n  bucket 8: 100%\nReturning block of 221 for bucket 7\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\nGetting block 10 of 29\n  bucket 9: 80%\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  bucket 14: 80%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 18: 30%\n  bucket 17: 80%\n  bucket 18: 40%\n  bucket 17: 90%\n  bucket 18: 50%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 10%\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 19: 90%\n  bucket 20: 70%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  bucket 21: 20%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 22: 10%\n  bucket 21: 50%\n  bucket 22: 20%\n  bucket 21: 60%\n  bucket 22: 30%\n  bucket 21: 70%\n  bucket 22: 40%\n  bucket 21: 80%\n  bucket 22: 50%\n  bucket 21: 90%\n  bucket 22: 60%\n  bucket 21: 100%\n  bucket 22: 70%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were unpaired; of these:\n    0 (0.00%) aligned 0 times\n    10 (100.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n100.00% overall alignment rate\n", "stderr": "\nSettings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were unpaired; of these:\n    0 (0.00%) aligned 0 times\n    10 (100.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n100.00% overall alignment rate\n", "stdout": "\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\n  Reserving size (252) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\nGetting block 3 of 29\n  Reserving size (252) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  bucket 2: 10%\n  bucket 1: 10%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\nGetting block 4 of 29\n  Reserving size (252) for bucket 4\n  bucket 2: 30%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 2: 40%\n  Calculating Z arrays for bucket 4\n  bucket 3: 20%\n  bucket 2: 50%\n  bucket 1: 40%\n  bucket 3: 30%\n  bucket 2: 60%\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 40%\n  bucket 2: 70%\n  bucket 1: 60%\n  bucket 3: 50%\n  bucket 4: 10%\n  bucket 2: 80%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 2: 90%\n  bucket 1: 80%\n  bucket 4: 20%\n  bucket 2: 100%\n  bucket 1: 90%\n  Sorting block of length 239 for bucket 2\n  bucket 4: 30%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 4: 50%\n  bucket 3: 90%\n  bucket 4: 60%\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 4: 70%\n  Sorting block time: 00:00:00\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\nReturning block of 128 for bucket 1\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 90%\n  bucket 6: 10%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 70%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 80%\n  bucket 8: 10%\n  bucket 7: 90%\n  bucket 8: 20%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  Sorting block time: 00:00:00\n  bucket 8: 100%\nReturning block of 221 for bucket 7\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\nGetting block 10 of 29\n  bucket 9: 80%\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  bucket 14: 80%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 18: 30%\n  bucket 17: 80%\n  bucket 18: 40%\n  bucket 17: 90%\n  bucket 18: 50%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 10%\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 19: 90%\n  bucket 20: 70%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  bucket 21: 20%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 22: 10%\n  bucket 21: 50%\n  bucket 22: 20%\n  bucket 21: 60%\n  bucket 22: 30%\n  bucket 21: 70%\n  bucket 22: 40%\n  bucket 21: 80%\n  bucket 22: 50%\n  bucket 21: 90%\n  bucket 22: 60%\n  bucket 21: 100%\n  bucket 22: 70%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 26: 30%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-10-03 15:19:21", "plugin": "core", "name": "end_epoch", "raw_value": "1696346361.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 15:19:20", "plugin": "core", "name": "start_epoch", "raw_value": "1696346360.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-16", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 16, "time_seconds": 126.93296957015991, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "bf629d897a9e60fb"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "fc9a6e3ec818383f"}, "library|type": "paired_interleaved", "adv|sam_options|no_unal": true, "adv|sam_options|read_groups|read_groups_0|rg": "BC:test1", "adv|sam_options|read_groups|read_groups_1|rg": "CN:test2", "adv|sam_options|read_groups|rg_labels": "Yes", "adv|sam_options|chr_text": "--add-chrname", "adv|sam_options|omit_sec_seq": true, "adv|sam_options|sam_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "220064ab9d4b027a", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T15:21:39.360964", "create_time": "2023-10-03T15:19:45.409615", "galaxy_version": "21.09", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-5z8dd", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/5/d/9/dataset_5d99956b-aca7-49bf-b2c1-6104b8f16820.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        bzcat '/galaxy/server/database/objects/f/4/8/dataset_f48e0794-f44d-4a2e-8473-1b4f1ac8cc07.dat' | seqtk seq -1 /dev/stdin > input_f.fastq && bzcat '/galaxy/server/database/objects/f/4/8/dataset_f48e0794-f44d-4a2e-8473-1b4f1ac8cc07.dat' | seqtk seq -2 /dev/stdin > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                        --no-unal --rg-id 'read_group' --rg 'BC:test1' --rg 'CN:test2' --add-chrname --omit-sec-seq         | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/8/6/3/dataset_86373e73-5584-4456-af48-f631afc44b2a.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 1, \"chr_text\": \"--add-chrname\", \"no_unal\": \"true\", \"omit_sec_seq\": \"true\", \"read_groups\": {\"__current_case__\": 1, \"read_groups\": [{\"__index__\": 0, \"rg\": \"BC:test1\"}, {\"__index__\": 1, \"rg\": \"CN:test2\"}], \"rg_id\": \"read_group\", \"rg_labels\": \"Yes\"}, \"sam_options_selector\": \"advanced\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": \"false\", \"summary_file\": \"false\"}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 240, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 239, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "bf629d897a9e60fb", "src": "hda", "uuid": "5d99956b-aca7-49bf-b2c1-6104b8f16820"}, "input_1": {"id": "fc9a6e3ec818383f", "src": "hda", "uuid": "f48e0794-f44d-4a2e-8473-1b4f1ac8cc07"}}, "outputs": {"output_alignments": {"id": "73a7e3ff2b4118c9", "src": "hda", "uuid": "86373e73-5584-4456-af48-f631afc44b2a"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 29\n  Entering block accumulator loop for bucket 1:\n  Reserving size (252) for bucket 2\nGetting block 3 of 29\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Reserving size (252) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 29\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Reserving size (252) for bucket 4\n  bucket 1: 30%\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 4: 10%\n  bucket 3: 50%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 4: 20%\n  bucket 1: 80%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 4: 30%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 4: 40%\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 4: 50%\n  bucket 2: 100%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 4: 60%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 40%\n  bucket 12: 50%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 13: 10%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 13: 20%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  Sorting block time: 00:00:00\n  bucket 13: 80%\nReturning block of 196 for bucket 12\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 20%\n  bucket 16: 30%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 40%\n  bucket 17: 10%\n  bucket 16: 50%\n  bucket 17: 20%\n  bucket 16: 60%\n  bucket 17: 30%\n  bucket 16: 70%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 16: 80%\n  bucket 17: 70%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  bucket 18: 40%\n  Calculating Z arrays for bucket 19\n  bucket 18: 50%\n  bucket 18: 60%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 70%\n  bucket 19: 10%\n  bucket 18: 80%\n  bucket 19: 20%\n  bucket 18: 90%\n  bucket 19: 30%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  bucket 20: 70%\n  Calculating Z arrays for bucket 21\n  bucket 20: 80%\n  bucket 20: 90%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Entering block accumulator loop for bucket 23:\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\nGetting block 24 of 29\n  bucket 23: 10%\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 24: 10%\n  bucket 23: 50%\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\n  bucket 24: 20%\n  bucket 23: 60%\n  bucket 24: 30%\n  bucket 23: 70%\n  bucket 24: 40%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 142 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stderr": "\nSettings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 29\n  Entering block accumulator loop for bucket 1:\n  Reserving size (252) for bucket 2\nGetting block 3 of 29\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Reserving size (252) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 29\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Reserving size (252) for bucket 4\n  bucket 1: 30%\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 4: 10%\n  bucket 3: 50%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 4: 20%\n  bucket 1: 80%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 4: 30%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 4: 40%\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 4: 50%\n  bucket 2: 100%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 4: 60%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 40%\n  bucket 12: 50%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 13: 10%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 13: 20%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  Sorting block time: 00:00:00\n  bucket 13: 80%\nReturning block of 196 for bucket 12\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 20%\n  bucket 16: 30%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 40%\n  bucket 17: 10%\n  bucket 16: 50%\n  bucket 17: 20%\n  bucket 16: 60%\n  bucket 17: 30%\n  bucket 16: 70%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 16: 80%\n  bucket 17: 70%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  bucket 18: 40%\n  Calculating Z arrays for bucket 19\n  bucket 18: 50%\n  bucket 18: 60%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 70%\n  bucket 19: 10%\n  bucket 18: 80%\n  bucket 19: 20%\n  bucket 18: 90%\n  bucket 19: 30%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  bucket 20: 70%\n  Calculating Z arrays for bucket 21\n  bucket 20: 80%\n  bucket 20: 90%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Entering block accumulator loop for bucket 23:\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\nGetting block 24 of 29\n  bucket 23: 10%\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 24: 10%\n  bucket 23: 50%\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\n  bucket 24: 20%\n  bucket 23: 60%\n  bucket 24: 30%\n  bucket 23: 70%\n  bucket 24: 40%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 142 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-10-03 15:21:28", "plugin": "core", "name": "end_epoch", "raw_value": "1696346488.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 15:21:27", "plugin": "core", "name": "start_epoch", "raw_value": "1696346487.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-2", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 2, "time_seconds": 150.59973549842834, "inputs": {"reference_genome|source": "indexed", "library|input_1": {"src": "hda", "id": "e7445d1d9a246996"}, "library|input_2": {"src": "hda", "id": "0128a369d9dadd9f"}, "library|type": "paired"}, "job": {"model_class": "Job", "id": "7615b87cded9ad4b", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:50:57.218278", "create_time": "2023-10-03T14:48:39.280343", "galaxy_version": "21.09", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-sz2x4", "command_line": "set -o pipefail;         ln -f -s '/galaxy/server/database/objects/3/1/9/dataset_3197f5f2-a857-463a-bc59-22dbf0cf6403.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/a/9/7/dataset_a97e6c17-8073-41ab-9a17-f435ff8a9779.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x '/cvmfs/data.galaxyproject.org/managed/hisat2_index/apiMel4/apiMel4'    -1 'input_f.fastq' -2 'input_r.fastq'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/e/2/a/dataset_e2a08e17-6241-4f7d-b852-1d60d07caea2.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"phiX\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/phiX.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": \"false\", \"summary_file\": \"false\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 185, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 186, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 0, \"index\": \"apiMel4\", \"source\": \"indexed\"}"}, "inputs": {"input_1": {"id": "e7445d1d9a246996", "src": "hda", "uuid": "3197f5f2-a857-463a-bc59-22dbf0cf6403"}, "input_2": {"id": "0128a369d9dadd9f", "src": "hda", "uuid": "a97e6c17-8073-41ab-9a17-f435ff8a9779"}}, "outputs": {"output_alignments": {"id": "8dedac793087ecb3", "src": "hda", "uuid": "e2a08e17-6241-4f7d-b852-1d60d07caea2"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stderr": "\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "20 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "20.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:50:44", "plugin": "core", "name": "end_epoch", "raw_value": "1696344644.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:50:24", "plugin": "core", "name": "start_epoch", "raw_value": "1696344624.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "output_problems": ["Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_tmfwia1r.sam v. /tmp/history_bam_converted_to_sam__zw4qgeh.sam )\n--- local_file\n+++ history_data\n@@ -1,23 +1,5343 @@\n @HD\tVN:1.0\tSO:coordinate\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n-@SQ\tSN:phiX174\tLN:5386\n-phiX174_1141_1609_1:0:0_1:0:0_4\t147\tphiX174\t1540\t60\t70M\t=\t1141\t-469\tTTCTAGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tZS:i:-5\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:4C65\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1141_1609_1:0:0_1:0:0_4\t99\tphiX174\t1141\t60\t70M\t=\t1540\t469\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:24G45\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1363_1914_3:0:0_0:0:0_6\t133\tphiX174\t1845\t0\t*\t=\t1845\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_1363_1914_3:0:0_0:0:0_6\t89\tphiX174\t1845\t60\t70M\t=\t1845\t0\tGCACTATGTTTACTCTTGCGCTTGTTCGTTTTCCGCCTACTGCGACTAAAGAGATTCAGTACCTTAACGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYT:Z:UP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t147\tphiX174\t1896\t60\t70M\t=\t1542\t-424\tAGATTCAGTACCTTAACGCTAAAGGTGCTTTGACTTATACCGATATTGCTGGCGACCCTGTTTTGTATGG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t99\tphiX174\t1542\t60\t70M\t=\t1896\t424\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t147\tphiX174\t639\t60\t70M\t=\t185\t-524\tTATTATGTTCATCCCGTCAACATTCAAACGGCCTGTCGCATCATGGAAGGCGCTGAATTTACGGAAAACA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:37T32\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t163\tphiX174\t1980\t60\t70M\t=\t2432\t522\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:12T57\tYS:i:-9\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t83\tphiX174\t2432\t60\t70M\t=\t1980\t-522\tTTTTTTCTGATAAGCTGGTTCTCAATTCTGTTAATCCAGCTTCTTCGGCACCTGTTTTACACACACCTAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-9\tXN:i:0\tXM:i:3\tXO:i:0\tXG:i:0\tNM:i:3\tMD:Z:24C8C27G8\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t147\tphiX174\t2508\t60\t70M\t=\t2128\t-450\tATCGTCAACGTTATATTTTGATAGTTTGAAGGTTAATGCTGGTATTGGTGGTTTTCTTAATTCCATTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-12\tXN:i:0\tXM:i:4\tXO:i:0\tXG:i:0\tNM:i:4\tMD:Z:29C14A13C3G7\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t99\tphiX174\t2128\t60\t70M\t=\t2508\t450\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-12\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t147\tphiX174\t2670\t60\t70M\t=\t2259\t-481\tTCGCTTTGAGTCTTCGTCGGTTCCGACTACCCTCCCGACTGCCTATGATGTTTATCCTTTGAATGGTCGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:15T54\tYS:i:-2\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t99\tphiX174\t2259\t60\t68M2S\t=\t2670\t481\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-2\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:68\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t163\tphiX174\t2950\t60\t70M\t=\t3308\t428\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-6\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t83\tphiX174\t3308\t60\t70M\t=\t2950\t-428\tTGAGATTAATGCTTGGGAGCGTGCTGGTGCTGATGCTTCCTATGCTGGTATGGTTGACGCCGGATTTGAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-6\tZS:i:-8\tXN:i:0\tXM:i:2\tXO:i:0\tXG:i:0\tNM:i:2\tMD:Z:4C36C28\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t147\tphiX174\t3663\t60\t70M\t=\t3199\t-534\tAATGACCAAATCAATGAAATGACTCGCAAGGTTAGTGCTGAGGTTGACTTAGTTCATCAGCAAACGCAGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:14A55\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t99\tphiX174\t3199\t60\t70M\t=\t3663\t534\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n********\n*SNIP *\n********\n+@SQ\tSN:Group6\tLN:18472937\n+@SQ\tSN:Group7\tLN:13219345\n+@SQ\tSN:Group8\tLN:13546544\n+@SQ\tSN:Group9\tLN:11120453\n+@SQ\tSN:chrM\tLN:16343\n+phiX174_1141_1609_1:0:0_1:0:0_4\t141\t*\t0\t0\t*\t*\t0\t0\tCAAATTAGCATAAGCAGCTTGCAGACCCATAATGTCAATAGATGTGGTAGAAGTCGTCATTTGGCTAGAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1141_1609_1:0:0_1:0:0_4\t77\t*\t0\t0\t*\t*\t0\t0\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t141\t*\t0\t0\t*\t*\t0\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t77\t*\t0\t0\t*\t*\t0\t0\tGCGTTAAGGTACTGAATCTCTTTAGTCGCAGTAGGCGGAAAACGAACAAGCGCAAGAGTAAACATAGTGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t141\t*\t0\t0\t*\t*\t0\t0\tCCATACAAAACAGGGTCGCCAGCAATATCGGTATAAGTCAAAGCACCTTTAGCGTTAAGGTACTGAATCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t141\t*\t0\t0\t*\t*\t0\t0\tTGTTTTCCGTAAATTCAGCGCCTTCCATGATGCGACAGGCCGTTTGAATGTTGACGGGATGAACATAATA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t77\t*\t0\t0\t*\t*\t0\t0\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t141\t*\t0\t0\t*\t*\t0\t0\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGGTGTGTGTAAAACAGGTGCCGAAGAAGCTGGATTAACAGAATTGAGAACCAGCTTATCAGAAAAAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t141\t*\t0\t0\t*\t*\t0\t0\tCTGAATGGAATTAAGAAAACCACCAATACCAGCATTAACCTTCAAACTATCAAAATATAACGTTGACGAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t77\t*\t0\t0\t*\t*\t0\t0\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t141\t*\t0\t0\t*\t*\t0\t0\tGCGACCATTCAAAGGATAAACATCATAGGCAGTCGGGAGGGTAGTCGGAACCGACGAAGACTCAAAGCGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t141\t*\t0\t0\t*\t*\t0\t0\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t77\t*\t0\t0\t*\t*\t0\t0\tCTCAAATCCGGCGTCAACCATACCAGCATAGGAAGCATCAGCACCAGCACGCTCCCAAGCATTAATCTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t141\t*\t0\t0\t*\t*\t0\t0\tTCTGCGTTTGCTGATGAACTAAGTCAACCTCAGCACTAACCTTGCGAGTCATTTCATTGATTTGGTCATT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t77\t*\t0\t0\t*\t*\t0\t0\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t141\t*\t0\t0\t*\t*\t0\t0\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t77\t*\t0\t0\t*\t*\t0\t0\tACCATAAACGCAAGCCTCAACGCAGCGACGAGCACGAGAGCGGTCAGTAGCAATCCAAACTTTGTTACTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n"], "status": "failure"}}, {"id": "hisat2/2.2.1+galaxy1-3", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 3, "time_seconds": 134.41566562652588, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "fb9741d994c48612"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "6800bd3b92c685b9"}, "library|input_2": {"src": "hda", "id": "df6672d320a70a21"}, "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "b14786ba3a2143b5", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:53:11.419206", "create_time": "2023-10-03T14:51:15.116986", "galaxy_version": "21.09", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-q2jwp", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/1/b/c/dataset_1bcc58ce-8fbe-4615-a10b-c6c81ef6dc05.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/8/9/a/dataset_89a643c9-e2c9-4732-9fb4-4071886512e7.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/2/9/6/dataset_296fe2b6-0b7a-431c-a8eb-736c44ed6d02.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'         --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/d/2/6/dataset_d2655662-c5f8-454f-a16a-aaa204d26041.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": \"false\", \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": \"false\", \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": \"false\", \"summary_file\": \"false\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 189, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 190, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 188, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "fb9741d994c48612", "src": "hda", "uuid": "1bcc58ce-8fbe-4615-a10b-c6c81ef6dc05"}, "input_1": {"id": "6800bd3b92c685b9", "src": "hda", "uuid": "89a643c9-e2c9-4732-9fb4-4071886512e7"}, "input_2": {"id": "df6672d320a70a21", "src": "hda", "uuid": "296fe2b6-0b7a-431c-a8eb-736c44ed6d02"}}, "outputs": {"output_alignments": {"id": "b15cbe234c761f5c", "src": "hda", "uuid": "d2655662-c5f8-454f-a16a-aaa204d26041"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\n  Calculating Z arrays for bucket 1\nGetting block 3 of 29\n  Entering block accumulator loop for bucket 1:\n  Reserving size (252) for bucket 3\nGetting block 4 of 29\n  Reserving size (252) for bucket 4\n  Reserving size (252) for bucket 2\n  bucket 1: 10%\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 50%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 60%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 70%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 80%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 4: 30%\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 2: 100%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  bucket 6: 10%\n  Calculating Z arrays for bucket 7\n  bucket 6: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 7: 10%\n  bucket 6: 50%\n  bucket 7: 20%\n  bucket 6: 60%\n  bucket 7: 30%\n  bucket 6: 70%\n  bucket 7: 40%\n  bucket 6: 80%\n  bucket 7: 50%\n  bucket 6: 90%\n  bucket 7: 60%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 50%\n  bucket 10: 10%\n  bucket 9: 60%\n  bucket 11: 10%\n  bucket 10: 20%\n  bucket 9: 70%\n  bucket 11: 20%\n  bucket 10: 30%\n  bucket 9: 80%\n  bucket 10: 40%\n  bucket 9: 90%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 11: 80%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  Sorting block time: 00:00:00\n  (Using difference cover)\n  bucket 11: 90%\nReturning block of 217 for bucket 9\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  bucket 14: 80%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 10%\n  bucket 15: 20%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 30%\n  bucket 16: 10%\n  bucket 15: 40%\n  bucket 16: 20%\n  bucket 15: 50%\n  bucket 16: 30%\n  bucket 15: 60%\n  bucket 16: 40%\n  bucket 15: 70%\n  bucket 16: 50%\n  bucket 15: 80%\n  bucket 16: 60%\n  bucket 15: 90%\n  bucket 16: 70%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 60%\n  bucket 19: 70%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 20: 10%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 24: 10%\n  bucket 23: 50%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 60%\n  bucket 24: 40%\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 23: 90%\n  bucket 24: 70%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 60%\n  bucket 27: 70%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 28: 10%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    71 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    71 pairs aligned 0 times concordantly or discordantly; of these:\n      142 mates make up the pairs; of these:\n        74 (52.11%) aligned 0 times\n        68 (47.89%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n92.60% overall alignment rate\n", "stderr": "\nSettings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    71 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    71 pairs aligned 0 times concordantly or discordantly; of these:\n      142 mates make up the pairs; of these:\n        74 (52.11%) aligned 0 times\n        68 (47.89%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n92.60% overall alignment rate\n", "stdout": "\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\n  Calculating Z arrays for bucket 1\nGetting block 3 of 29\n  Entering block accumulator loop for bucket 1:\n  Reserving size (252) for bucket 3\nGetting block 4 of 29\n  Reserving size (252) for bucket 4\n  Reserving size (252) for bucket 2\n  bucket 1: 10%\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 50%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 1: 60%\n  bucket 4: 10%\n  bucket 2: 20%\n  bucket 1: 70%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 80%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 4: 30%\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 3: 60%\n  bucket 4: 50%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 2: 100%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  bucket 6: 10%\n  Calculating Z arrays for bucket 7\n  bucket 6: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 7: 10%\n  bucket 6: 50%\n  bucket 7: 20%\n  bucket 6: 60%\n  bucket 7: 30%\n  bucket 6: 70%\n  bucket 7: 40%\n  bucket 6: 80%\n  bucket 7: 50%\n  bucket 6: 90%\n  bucket 7: 60%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 50%\n  bucket 10: 10%\n  bucket 9: 60%\n  bucket 11: 10%\n  bucket 10: 20%\n  bucket 9: 70%\n  bucket 11: 20%\n  bucket 10: 30%\n  bucket 9: 80%\n  bucket 10: 40%\n  bucket 9: 90%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 11: 80%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  Sorting block time: 00:00:00\n  (Using difference cover)\n  bucket 11: 90%\nReturning block of 217 for bucket 9\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  bucket 14: 80%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 10%\n  bucket 15: 20%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 30%\n  bucket 16: 10%\n  bucket 15: 40%\n  bucket 16: 20%\n  bucket 15: 50%\n  bucket 16: 30%\n  bucket 15: 60%\n  bucket 16: 40%\n  bucket 15: 70%\n  bucket 16: 50%\n  bucket 15: 80%\n  bucket 16: 60%\n  bucket 15: 90%\n  bucket 16: 70%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 60%\n  bucket 19: 70%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 20: 10%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 24: 10%\n  bucket 23: 50%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 60%\n  bucket 24: 40%\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 23: 90%\n  bucket 24: 70%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 70%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 60%\n  bucket 27: 70%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 28: 10%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:53:01", "plugin": "core", "name": "end_epoch", "raw_value": "1696344781.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:53:00", "plugin": "core", "name": "start_epoch", "raw_value": "1696344780.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-4", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 4, "time_seconds": 135.08201932907104, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "11418529daedd9cd"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "087794f6ef1ee648"}, "library|input_2": {"src": "hda", "id": "18e57f29f445c1f4"}, "library|paired_options|no_mixed": true, "library|paired_options|no_discordant": true, "library|paired_options|paired_options_selector": "advanced", "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "247b92f37339a7f9", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:55:26.493920", "create_time": "2023-10-03T14:53:29.517786", "galaxy_version": "21.09", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-2c7pq", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/4/f/4/dataset_4f4dd6b1-17b5-49ba-894c-7b2d8cc9e681.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/5/2/f/dataset_52f98e2f-f556-440c-a2ae-f9c975e292b5.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/d/6/e/dataset_d6ea2313-e254-41fd-a801-67dca2c718b2.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'  --fr --no-mixed --no-discordant        --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/3/3/5/dataset_33599e58-cb45-49d3-830a-20158b78c228.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": \"false\", \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": \"false\", \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": \"false\", \"summary_file\": \"false\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 193, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 194, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": \"true\", \"no_mixed\": \"true\", \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 192, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "11418529daedd9cd", "src": "hda", "uuid": "4f4dd6b1-17b5-49ba-894c-7b2d8cc9e681"}, "input_1": {"id": "087794f6ef1ee648", "src": "hda", "uuid": "52f98e2f-f556-440c-a2ae-f9c975e292b5"}, "input_2": {"id": "18e57f29f445c1f4", "src": "hda", "uuid": "d6ea2313-e254-41fd-a801-67dca2c718b2"}}, "outputs": {"output_alignments": {"id": "d8d2b05d70ea10dc", "src": "hda", "uuid": "33599e58-cb45-49d3-830a-20158b78c228"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\nGetting block 2 of 29\n  Reserving size (252) for bucket 2\nGetting block 3 of 29\n  Reserving size (252) for bucket 3\n  Calculating Z arrays for bucket 2\nGetting block 4 of 29\n  Reserving size (252) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Reserving size (252) for bucket 1\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 3\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 20%\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 10%\n  bucket 2: 30%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 2: 40%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 2: 50%\n  bucket 4: 30%\n  bucket 1: 50%\n  bucket 2: 60%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 3: 50%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 3: 60%\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 2: 90%\n  bucket 1: 100%\n  bucket 3: 70%\n  bucket 4: 70%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 3: 80%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 10%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 10: 30%\n  bucket 9: 90%\n  bucket 10: 40%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 30%\n  bucket 11: 70%\n  bucket 12: 40%\n  bucket 11: 80%\n  bucket 12: 50%\n  bucket 11: 90%\n  bucket 12: 60%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 10%\n  bucket 15: 20%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 16: 10%\n  bucket 15: 50%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 15: 60%\n  bucket 16: 40%\n  bucket 15: 70%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 15: 80%\n  bucket 16: 70%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\nGetting block 28 of 29\n  bucket 27: 90%\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stderr": "\nSettings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stdout": "\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\nGetting block 2 of 29\n  Reserving size (252) for bucket 2\nGetting block 3 of 29\n  Reserving size (252) for bucket 3\n  Calculating Z arrays for bucket 2\nGetting block 4 of 29\n  Reserving size (252) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Reserving size (252) for bucket 1\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 3\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 20%\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 10%\n  bucket 2: 30%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 2: 40%\n  bucket 1: 30%\n  bucket 4: 20%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 2: 50%\n  bucket 4: 30%\n  bucket 1: 50%\n  bucket 2: 60%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 1: 60%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 3: 50%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 3: 60%\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 2: 90%\n  bucket 1: 100%\n  bucket 3: 70%\n  bucket 4: 70%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 3: 80%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 5: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 8\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 8: 10%\n  bucket 7: 30%\n  bucket 8: 20%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 7: 70%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 10%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 10: 30%\n  bucket 9: 90%\n  bucket 10: 40%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 12: 30%\n  bucket 11: 70%\n  bucket 12: 40%\n  bucket 11: 80%\n  bucket 12: 50%\n  bucket 11: 90%\n  bucket 12: 60%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 10%\n  bucket 15: 20%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 16: 10%\n  bucket 15: 50%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 15: 60%\n  bucket 16: 40%\n  bucket 15: 70%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 15: 80%\n  bucket 16: 70%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\nGetting block 28 of 29\n  bucket 27: 90%\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-10-03 14:55:15", "plugin": "core", "name": "end_epoch", "raw_value": "1696344915.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:55:15", "plugin": "core", "name": "start_epoch", "raw_value": "1696344915.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-5", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 5, "time_seconds": 131.48915791511536, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "7364bed6b291dd60"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "f5e204dea49a82ea"}, "library|type": "single", "adv|output_options|unaligned_file": true, "adv|output_options|output_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "3c25116776ab1c0b", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:57:38.217098", "create_time": "2023-10-03T14:55:39.337707", "galaxy_version": "21.09", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-2b72d", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/d/5/9/dataset_d59e6159-1e99-4968-b34d-564352c19da7.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/8/5/1/dataset_851d86c5-c865-4e9a-a8fb-cf8b66f97e41.dat' input_f.fasta &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f    -U 'input_f.fasta'  --un '/galaxy/server/database/objects/c/2/1/dataset_c21afad6-8a6b-405e-88ec-7df91b779ece.dat'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/4/e/b/dataset_4eb55ae3-7498-44e0-8a6e-8998d99686c0.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 1, \"aligned_file\": \"false\", \"output_options_selector\": \"advanced\", \"unaligned_file\": \"true\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": \"false\", \"summary_file\": \"false\"}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 197, \"src\": \"hda\"}]}, \"rna_strandness\": \"\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 196, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "7364bed6b291dd60", "src": "hda", "uuid": "d59e6159-1e99-4968-b34d-564352c19da7"}, "input_1": {"id": "f5e204dea49a82ea", "src": "hda", "uuid": "851d86c5-c865-4e9a-a8fb-cf8b66f97e41"}}, "outputs": {"output_alignments": {"id": "595675454e82d0f9", "src": "hda", "uuid": "4eb55ae3-7498-44e0-8a6e-8998d99686c0"}, "output_unaligned_reads_l": {"id": "84b01c2818226635", "src": "hda", "uuid": "c21afad6-8a6b-405e-88ec-7df91b779ece"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\nGetting block 3 of 29\n  Calculating Z arrays for bucket 1\n  Reserving size (252) for bucket 3\nGetting block 4 of 29\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Reserving size (252) for bucket 2\n  Reserving size (252) for bucket 4\n  bucket 1: 10%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\n  Calculating Z arrays for bucket 2\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 2:\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 2: 10%\n  bucket 1: 50%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 2: 20%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 2: 30%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 3: 80%\n  bucket 1: 90%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 2: 80%\n  bucket 3: 100%\n  bucket 4: 80%\n  bucket 2: 90%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 2: 100%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 7: 20%\n  bucket 6: 10%\n  bucket 7: 30%\n  bucket 6: 20%\n  bucket 7: 40%\n  bucket 6: 30%\n  bucket 7: 50%\n  bucket 6: 40%\n  bucket 7: 60%\n  bucket 6: 50%\n  bucket 7: 70%\n  bucket 6: 60%\n  bucket 7: 80%\n  bucket 6: 70%\n  bucket 7: 90%\n  bucket 6: 80%\n  bucket 7: 100%\n  bucket 6: 90%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 50%\n  bucket 9: 60%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 10%\n  bucket 9: 90%\n  bucket 10: 20%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  Entering block accumulator loop for bucket 13:\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 13: 10%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 20%\n  bucket 14: 70%\n  bucket 13: 30%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 13: 40%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 40%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 50%\n  bucket 16: 10%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 16: 20%\n  bucket 15: 80%\n  bucket 16: 30%\n  bucket 15: 90%\n  bucket 16: 40%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  bucket 18: 10%\n  Calculating Z arrays for bucket 19\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 30%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 19: 40%\n  bucket 18: 70%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 19: 60%\n  bucket 18: 90%\n  bucket 19: 70%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 29\n  Entering block accumulator loop for bucket 22:\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  bucket 22: 20%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 30%\n  bucket 23: 10%\n  bucket 22: 40%\n  bucket 23: 20%\n  bucket 22: 50%\n  bucket 23: 30%\n  bucket 22: 60%\n  bucket 23: 40%\n  bucket 22: 70%\n  bucket 23: 50%\n  bucket 22: 80%\n  bucket 23: 60%\n  bucket 22: 90%\n  bucket 23: 70%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 26: 40%\n  bucket 27: 30%\n  bucket 26: 50%\n  bucket 27: 40%\n  bucket 26: 60%\n  bucket 27: 50%\n  bucket 26: 70%\n  bucket 27: 60%\n  bucket 26: 80%\n  bucket 27: 70%\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n3 reads; of these:\n  3 (100.00%) were unpaired; of these:\n    3 (100.00%) aligned 0 times\n    0 (0.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stderr": "\nSettings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n3 reads; of these:\n  3 (100.00%) were unpaired; of these:\n    3 (100.00%) aligned 0 times\n    0 (0.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\nGetting block 3 of 29\n  Calculating Z arrays for bucket 1\n  Reserving size (252) for bucket 3\nGetting block 4 of 29\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Reserving size (252) for bucket 2\n  Reserving size (252) for bucket 4\n  bucket 1: 10%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\n  Calculating Z arrays for bucket 2\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 2:\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 2: 10%\n  bucket 1: 50%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 2: 20%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 2: 30%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 2: 40%\n  bucket 1: 70%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 2: 50%\n  bucket 3: 80%\n  bucket 1: 90%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 3: 90%\n  bucket 4: 70%\n  bucket 2: 80%\n  bucket 3: 100%\n  bucket 4: 80%\n  bucket 2: 90%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 2: 100%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 7: 20%\n  bucket 6: 10%\n  bucket 7: 30%\n  bucket 6: 20%\n  bucket 7: 40%\n  bucket 6: 30%\n  bucket 7: 50%\n  bucket 6: 40%\n  bucket 7: 60%\n  bucket 6: 50%\n  bucket 7: 70%\n  bucket 6: 60%\n  bucket 7: 80%\n  bucket 6: 70%\n  bucket 7: 90%\n  bucket 6: 80%\n  bucket 7: 100%\n  bucket 6: 90%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 50%\n  bucket 9: 60%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 10%\n  bucket 9: 90%\n  bucket 10: 20%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  Entering block accumulator loop for bucket 13:\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 13: 10%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 20%\n  bucket 14: 70%\n  bucket 13: 30%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 13: 40%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 40%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 50%\n  bucket 16: 10%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 16: 20%\n  bucket 15: 80%\n  bucket 16: 30%\n  bucket 15: 90%\n  bucket 16: 40%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  bucket 18: 10%\n  Calculating Z arrays for bucket 19\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 30%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 19: 40%\n  bucket 18: 70%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 19: 60%\n  bucket 18: 90%\n  bucket 19: 70%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 29\n  Entering block accumulator loop for bucket 22:\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  bucket 22: 20%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 30%\n  bucket 23: 10%\n  bucket 22: 40%\n  bucket 23: 20%\n  bucket 22: 50%\n  bucket 23: 30%\n  bucket 22: 60%\n  bucket 23: 40%\n  bucket 22: 70%\n  bucket 23: 50%\n  bucket 22: 80%\n  bucket 23: 60%\n  bucket 22: 90%\n  bucket 23: 70%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 26: 40%\n  bucket 27: 30%\n  bucket 26: 50%\n  bucket 27: 40%\n  bucket 26: 60%\n  bucket 27: 50%\n  bucket 26: 70%\n  bucket 27: 60%\n  bucket 26: 80%\n  bucket 27: 70%\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:57:27", "plugin": "core", "name": "end_epoch", "raw_value": "1696345047.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:57:26", "plugin": "core", "name": "start_epoch", "raw_value": "1696345046.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-6", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 6, "time_seconds": 132.05448865890503, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "ac83b93191e0e7eb"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "aba940d67f7222a9"}, "library|input_2": {"src": "hda", "id": "aba940d67f7222a9"}, "library|type": "paired", "adv|output_options|unaligned_file": true, "adv|output_options|aligned_file": true, "adv|output_options|output_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "07cf02a7175f3c33", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:59:50.068811", "create_time": "2023-10-03T14:57:50.606804", "galaxy_version": "21.09", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-mjssf", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/7/b/4/dataset_7b45f6db-c274-44ae-ac61-67f1585a9331.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/a/f/a/dataset_afa926f4-f815-42ef-9b78-40c32fe23fe6.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/a/f/a/dataset_afa926f4-f815-42ef-9b78-40c32fe23fe6.dat' input_r.fasta &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f   -1 'input_f.fasta' -2 'input_r.fasta' --un-conc '/galaxy/server/database/objects/a/d/7/dataset_ad78e154-77ee-4b82-ae9e-c4fa4215b4a5.dat'  --al-conc '/galaxy/server/database/objects/8/d/9/dataset_8d9d62f8-5c3e-486d-83ed-77851576b5a1.dat'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/c/d/1/dataset_cd1b6bd6-49a0-4de8-8cae-285a6326b044.dat'   && mv '/galaxy/server/database/objects/a/d/7/dataset_ad78e154-77ee-4b82-ae9e-c4fa4215b4a5.1.dat' '/galaxy/server/database/objects/a/d/7/dataset_ad78e154-77ee-4b82-ae9e-c4fa4215b4a5.dat' && mv '/galaxy/server/database/objects/a/d/7/dataset_ad78e154-77ee-4b82-ae9e-c4fa4215b4a5.2.dat' '/galaxy/server/database/objects/d/7/c/dataset_d7c4d514-9f67-4b8b-bb31-82b4fc8f8620.dat' && mv '/galaxy/server/database/objects/8/d/9/dataset_8d9d62f8-5c3e-486d-83ed-77851576b5a1.1.dat' '/galaxy/server/database/objects/8/d/9/dataset_8d9d62f8-5c3e-486d-83ed-77851576b5a1.dat' && mv '/galaxy/server/database/objects/8/d/9/dataset_8d9d62f8-5c3e-486d-83ed-77851576b5a1.2.dat' '/galaxy/server/database/objects/6/b/3/dataset_6b30280e-bf70-4067-ba5d-aada7ca70bb2.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 1, \"aligned_file\": \"true\", \"output_options_selector\": \"advanced\", \"unaligned_file\": \"true\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": \"false\", \"summary_file\": \"false\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 201, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 201, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 200, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "ac83b93191e0e7eb", "src": "hda", "uuid": "7b45f6db-c274-44ae-ac61-67f1585a9331"}, "input_1": {"id": "aba940d67f7222a9", "src": "hda", "uuid": "afa926f4-f815-42ef-9b78-40c32fe23fe6"}, "input_2": {"id": "aba940d67f7222a9", "src": "hda", "uuid": "afa926f4-f815-42ef-9b78-40c32fe23fe6"}}, "outputs": {"output_alignments": {"id": "8e3a4c2d869dbf93", "src": "hda", "uuid": "cd1b6bd6-49a0-4de8-8cae-285a6326b044"}, "output_unaligned_reads_l": {"id": "f6b09ee9d7a3f71a", "src": "hda", "uuid": "ad78e154-77ee-4b82-ae9e-c4fa4215b4a5"}, "output_aligned_reads_l": {"id": "37c7b42324cbc23c", "src": "hda", "uuid": "8d9d62f8-5c3e-486d-83ed-77851576b5a1"}, "output_unaligned_reads_r": {"id": "522db7ed9be1749a", "src": "hda", "uuid": "d7c4d514-9f67-4b8b-bb31-82b4fc8f8620"}, "output_aligned_reads_r": {"id": "61ad0a4ceb09e949", "src": "hda", "uuid": "6b30280e-bf70-4067-ba5d-aada7ca70bb2"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 29\n  bucket 1: 10%\n  Reserving size (252) for bucket 2\nGetting block 3 of 29\n  Calculating Z arrays for bucket 2\n  bucket 1: 20%\nGetting block 4 of 29\n  Reserving size (252) for bucket 3\n  Reserving size (252) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 30%\n  Calculating Z arrays for bucket 3\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 50%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 4: 10%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 3: 30%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  bucket 2: 80%\n  (Using difference cover)\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 2: 90%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 2: 100%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 4: 100%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  bucket 10: 30%\n  Calculating Z arrays for bucket 11\n  bucket 10: 40%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 50%\n  bucket 11: 10%\n  bucket 10: 60%\n  bucket 11: 20%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 11: 30%\n  bucket 10: 90%\n  bucket 11: 40%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  Sorting block time: 00:00:00\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\nReturning block of 198 for bucket 13\n  Calculating Z arrays for bucket 15\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 70%\n  bucket 15: 10%\n  bucket 14: 80%\n  bucket 15: 20%\n  bucket 14: 90%\n  bucket 15: 30%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  Entering block accumulator loop for bucket 17:\n  bucket 18: 10%\n  bucket 17: 10%\n  bucket 18: 20%\n  bucket 17: 20%\n  bucket 18: 30%\n  bucket 17: 30%\n  bucket 18: 40%\n  bucket 17: 40%\n  bucket 18: 50%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 17: 60%\n  bucket 18: 70%\n  bucket 17: 70%\n  bucket 18: 80%\n  bucket 17: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  bucket 23: 20%\n  Calculating Z arrays for bucket 24\n  bucket 23: 30%\n  bucket 23: 40%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 50%\n  bucket 24: 10%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 24: 30%\n  bucket 23: 80%\n  bucket 24: 40%\n  bucket 23: 90%\n  bucket 24: 50%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  bucket 27: 50%\n  Calculating Z arrays for bucket 28\n  bucket 27: 60%\n  bucket 27: 70%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    3 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        6 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stderr": "\nSettings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    3 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        6 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 29\n  bucket 1: 10%\n  Reserving size (252) for bucket 2\nGetting block 3 of 29\n  Calculating Z arrays for bucket 2\n  bucket 1: 20%\nGetting block 4 of 29\n  Reserving size (252) for bucket 3\n  Reserving size (252) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 30%\n  Calculating Z arrays for bucket 3\n  bucket 2: 10%\n  bucket 1: 40%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 50%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 60%\n  bucket 2: 40%\n  bucket 4: 10%\n  bucket 1: 70%\n  bucket 2: 50%\n  bucket 3: 10%\n  bucket 4: 20%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 3: 30%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  bucket 2: 80%\n  (Using difference cover)\n  bucket 3: 40%\n  bucket 4: 40%\n  bucket 2: 90%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 2: 100%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 3: 90%\n  bucket 4: 100%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  bucket 10: 30%\n  Calculating Z arrays for bucket 11\n  bucket 10: 40%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 50%\n  bucket 11: 10%\n  bucket 10: 60%\n  bucket 11: 20%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 11: 30%\n  bucket 10: 90%\n  bucket 11: 40%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  Sorting block time: 00:00:00\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\nReturning block of 198 for bucket 13\n  Calculating Z arrays for bucket 15\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 70%\n  bucket 15: 10%\n  bucket 14: 80%\n  bucket 15: 20%\n  bucket 14: 90%\n  bucket 15: 30%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  Entering block accumulator loop for bucket 17:\n  bucket 18: 10%\n  bucket 17: 10%\n  bucket 18: 20%\n  bucket 17: 20%\n  bucket 18: 30%\n  bucket 17: 30%\n  bucket 18: 40%\n  bucket 17: 40%\n  bucket 18: 50%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 17: 60%\n  bucket 18: 70%\n  bucket 17: 70%\n  bucket 18: 80%\n  bucket 17: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  bucket 23: 20%\n  Calculating Z arrays for bucket 24\n  bucket 23: 30%\n  bucket 23: 40%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 50%\n  bucket 24: 10%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 24: 30%\n  bucket 23: 80%\n  bucket 24: 40%\n  bucket 23: 90%\n  bucket 24: 50%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  bucket 27: 50%\n  Calculating Z arrays for bucket 28\n  bucket 27: 60%\n  bucket 27: 70%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:59:39", "plugin": "core", "name": "end_epoch", "raw_value": "1696345179.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:59:38", "plugin": "core", "name": "start_epoch", "raw_value": "1696345178.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-7", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 7, "time_seconds": 137.6083903312683, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "ffee687a2fb378ea"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "7dd5ae34ffbcc954"}, "library|input_2": {"src": "hda", "id": "6fe0f1a8ca107e01"}, "library|paired_options|no_mixed": true, "library|paired_options|no_discordant": true, "library|paired_options|paired_options_selector": "advanced", "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "8923133135ef894a", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T15:02:07.867489", "create_time": "2023-10-03T15:00:08.408655", "galaxy_version": "21.09", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-jbpr5", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/a/8/8/dataset_a884e8f7-5693-4f80-910f-4600e3366ec7.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/7/c/8/dataset_7c8707f6-9cd5-4c37-b559-1d1bc048cf22.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/9/c/f/dataset_9cfa5ec0-4a44-4557-9351-593ecd2d6d79.dat' input_r.fastq.gz &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq.gz' -2 'input_r.fastq.gz'  --fr --no-mixed --no-discordant        --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/4/d/4/dataset_4d4ac8d3-a9af-4926-96f6-4219bd02d3a4.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": \"false\", \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": \"false\", \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": \"false\", \"summary_file\": \"false\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 208, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 209, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": \"true\", \"no_mixed\": \"true\", \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 207, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "ffee687a2fb378ea", "src": "hda", "uuid": "a884e8f7-5693-4f80-910f-4600e3366ec7"}, "input_1": {"id": "7dd5ae34ffbcc954", "src": "hda", "uuid": "7c8707f6-9cd5-4c37-b559-1d1bc048cf22"}, "input_2": {"id": "6fe0f1a8ca107e01", "src": "hda", "uuid": "9cfa5ec0-4a44-4557-9351-593ecd2d6d79"}}, "outputs": {"output_alignments": {"id": "2a4e195596a6d035", "src": "hda", "uuid": "4d4ac8d3-a9af-4926-96f6-4219bd02d3a4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 29\n  Reserving size (252) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\nGetting block 3 of 29\n  bucket 1: 10%\n  Reserving size (252) for bucket 3\n  Entering block accumulator loop for bucket 2:\nGetting block 4 of 29\n  bucket 1: 20%\n  Calculating Z arrays for bucket 3\n  bucket 2: 10%\n  bucket 1: 30%\n  Reserving size (252) for bucket 4\n  bucket 2: 20%\n  Calculating Z arrays for bucket 4\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 3: 10%\n  bucket 2: 50%\n  bucket 1: 70%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 3: 20%\n  bucket 2: 70%\n  bucket 4: 10%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 3: 30%\n  bucket 1: 100%\n  bucket 4: 20%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 2: 90%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 2: 100%\n  bucket 3: 60%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 90%\n  bucket 6: 10%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  Sorting block time: 00:00:00\n  bucket 8: 40%\nReturning block of 221 for bucket 7\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  Entering block accumulator loop for bucket 17:\n  bucket 18: 10%\n  bucket 17: 10%\n  bucket 18: 20%\n  bucket 17: 20%\n  bucket 18: 30%\n  bucket 17: 30%\n  bucket 18: 40%\n  bucket 17: 40%\n  bucket 18: 50%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 17: 60%\n  bucket 18: 70%\n  bucket 17: 70%\n  bucket 18: 80%\n  bucket 17: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 19: 90%\n  bucket 20: 70%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  bucket 21: 30%\n  Calculating Z arrays for bucket 22\n  bucket 21: 40%\n  bucket 21: 50%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 22: 10%\n  bucket 21: 80%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 21: 90%\n  bucket 22: 40%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 80%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 23: 100%\n  bucket 24: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 29\n  bucket 25: 20%\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 30%\n  bucket 25: 40%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 50%\n  bucket 26: 10%\n  bucket 25: 60%\n  bucket 26: 20%\n  bucket 25: 70%\n  bucket 26: 30%\n  bucket 25: 80%\n  bucket 26: 40%\n  bucket 25: 90%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  bucket 26: 70%\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stderr": "\nSettings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stdout": "\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 29\n  Reserving size (252) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\nGetting block 3 of 29\n  bucket 1: 10%\n  Reserving size (252) for bucket 3\n  Entering block accumulator loop for bucket 2:\nGetting block 4 of 29\n  bucket 1: 20%\n  Calculating Z arrays for bucket 3\n  bucket 2: 10%\n  bucket 1: 30%\n  Reserving size (252) for bucket 4\n  bucket 2: 20%\n  Calculating Z arrays for bucket 4\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 30%\n  bucket 1: 50%\n  bucket 2: 40%\n  bucket 1: 60%\n  bucket 3: 10%\n  bucket 2: 50%\n  bucket 1: 70%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 3: 20%\n  bucket 2: 70%\n  bucket 4: 10%\n  bucket 1: 90%\n  bucket 2: 80%\n  bucket 3: 30%\n  bucket 1: 100%\n  bucket 4: 20%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 2: 90%\n  bucket 3: 50%\n  bucket 4: 40%\n  bucket 2: 100%\n  bucket 3: 60%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 50%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\nGetting block 6 of 29\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 90%\n  bucket 6: 10%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  Sorting block time: 00:00:00\n  bucket 8: 40%\nReturning block of 221 for bucket 7\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  Entering block accumulator loop for bucket 17:\n  bucket 18: 10%\n  bucket 17: 10%\n  bucket 18: 20%\n  bucket 17: 20%\n  bucket 18: 30%\n  bucket 17: 30%\n  bucket 18: 40%\n  bucket 17: 40%\n  bucket 18: 50%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 17: 60%\n  bucket 18: 70%\n  bucket 17: 70%\n  bucket 18: 80%\n  bucket 17: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 19: 90%\n  bucket 20: 70%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  bucket 21: 30%\n  Calculating Z arrays for bucket 22\n  bucket 21: 40%\n  bucket 21: 50%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 22: 10%\n  bucket 21: 80%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 21: 90%\n  bucket 22: 40%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 80%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 23: 100%\n  bucket 24: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\nGetting block 26 of 29\n  bucket 25: 20%\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 30%\n  bucket 25: 40%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 50%\n  bucket 26: 10%\n  bucket 25: 60%\n  bucket 26: 20%\n  bucket 25: 70%\n  bucket 26: 30%\n  bucket 25: 80%\n  bucket 26: 40%\n  bucket 25: 90%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  bucket 26: 70%\n  (Using difference cover)\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-10-03 15:01:56", "plugin": "core", "name": "end_epoch", "raw_value": "1696345316.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 15:01:56", "plugin": "core", "name": "start_epoch", "raw_value": "1696345316.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-8", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 8, "time_seconds": 135.52675104141235, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "60f7eac41823805d"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "cfdbdb60afc13505"}, "library|input_2": {"src": "hda", "id": "b5d9a72bd00931d3"}, "library|paired_options|no_mixed": true, "library|paired_options|no_discordant": true, "library|paired_options|paired_options_selector": "advanced", "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "be18fbaac67a86bf", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T15:04:23.367526", "create_time": "2023-10-03T15:02:25.503500", "galaxy_version": "21.09", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-nk624", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/2/7/8/dataset_27868b5a-77b2-4213-89fd-e2344a039d7c.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/8/5/2/dataset_852e92a0-706f-4ffd-8e2c-800c12de6c48.dat' input_f.fastq.bz2 &&  ln -f -s '/galaxy/server/database/objects/c/3/a/dataset_c3ad8c64-4a1a-4820-a409-d173eba71747.dat' input_r.fastq.bz2 &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq.bz2' -2 'input_r.fastq.bz2'  --fr --no-mixed --no-discordant        --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/1/2/b/dataset_12b6ea35-74e2-4906-a931-b1e9e38a0c5b.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": \"false\", \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": \"false\", \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": \"false\", \"summary_file\": \"false\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 212, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 213, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": \"true\", \"no_mixed\": \"true\", \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 211, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "60f7eac41823805d", "src": "hda", "uuid": "27868b5a-77b2-4213-89fd-e2344a039d7c"}, "input_1": {"id": "cfdbdb60afc13505", "src": "hda", "uuid": "852e92a0-706f-4ffd-8e2c-800c12de6c48"}, "input_2": {"id": "b5d9a72bd00931d3", "src": "hda", "uuid": "c3ad8c64-4a1a-4820-a409-d173eba71747"}}, "outputs": {"output_alignments": {"id": "36fc38509c3897e4", "src": "hda", "uuid": "12b6ea35-74e2-4906-a931-b1e9e38a0c5b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\n  Reserving size (252) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\nGetting block 3 of 29\n  Entering block accumulator loop for bucket 1:\n  Reserving size (252) for bucket 3\nGetting block 4 of 29\n  Reserving size (252) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 4: 10%\n  bucket 2: 40%\n  bucket 3: 10%\n  bucket 1: 50%\n  bucket 4: 20%\n  bucket 2: 50%\n  bucket 3: 20%\n  bucket 1: 60%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 4: 50%\n  bucket 3: 40%\n  bucket 2: 80%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  bucket 2: 100%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 60%\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 29\n  Entering block accumulator loop for bucket 5:\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 50%\nGetting block 8 of 29\n  bucket 7: 30%\n  bucket 6: 30%\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 40%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 7: 50%\n  bucket 5: 70%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 60%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 7: 70%\n  bucket 8: 10%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 7: 80%\n  bucket 5: 100%\n  bucket 8: 20%\n  bucket 7: 90%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  bucket 8: 30%\n  bucket 6: 80%\n  bucket 8: 40%\n  bucket 6: 90%\n  bucket 8: 50%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\n  bucket 8: 60%\nReturning block of 221 for bucket 7\nReturning block of 163 for bucket 5\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  Calculating Z arrays for bucket 11\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 11:\n  bucket 12: 20%\n  bucket 11: 10%\n  bucket 12: 30%\n  bucket 11: 20%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 11: 30%\n  bucket 12: 60%\n  bucket 11: 40%\n  bucket 12: 70%\n  bucket 11: 50%\n  bucket 12: 80%\n  bucket 11: 60%\n  bucket 12: 90%\n  bucket 11: 70%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 80%\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 20: 60%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 20: 70%\n  bucket 21: 80%\n  bucket 20: 80%\n  bucket 21: 90%\n  bucket 20: 90%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 22: 40%\n  bucket 23: 30%\n  bucket 22: 50%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 30%\n  bucket 24: 40%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 50%\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 26: 100%\n  bucket 27: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 80%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stderr": "\nSettings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stdout": "\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\nGetting block 2 of 29\n  Reserving size (252) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\nGetting block 3 of 29\n  Entering block accumulator loop for bucket 1:\n  Reserving size (252) for bucket 3\nGetting block 4 of 29\n  Reserving size (252) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  bucket 2: 10%\n  bucket 1: 20%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 4: 10%\n  bucket 2: 40%\n  bucket 3: 10%\n  bucket 1: 50%\n  bucket 4: 20%\n  bucket 2: 50%\n  bucket 3: 20%\n  bucket 1: 60%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 3: 30%\n  bucket 4: 40%\n  bucket 1: 80%\n  bucket 2: 70%\n  bucket 4: 50%\n  bucket 3: 40%\n  bucket 2: 80%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  bucket 2: 100%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 3: 60%\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\nGetting block 5 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 6 of 29\n  Entering block accumulator loop for bucket 5:\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Calculating Z arrays for bucket 7\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 5: 50%\nGetting block 8 of 29\n  bucket 7: 30%\n  bucket 6: 30%\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  bucket 7: 40%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 7: 50%\n  bucket 5: 70%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 60%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 7: 70%\n  bucket 8: 10%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 7: 80%\n  bucket 5: 100%\n  bucket 8: 20%\n  bucket 7: 90%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 7: 100%\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  bucket 8: 30%\n  bucket 6: 80%\n  bucket 8: 40%\n  bucket 6: 90%\n  bucket 8: 50%\n  bucket 6: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\n  bucket 8: 60%\nReturning block of 221 for bucket 7\nReturning block of 163 for bucket 5\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  Calculating Z arrays for bucket 11\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 11:\n  bucket 12: 20%\n  bucket 11: 10%\n  bucket 12: 30%\n  bucket 11: 20%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 11: 30%\n  bucket 12: 60%\n  bucket 11: 40%\n  bucket 12: 70%\n  bucket 11: 50%\n  bucket 12: 80%\n  bucket 11: 60%\n  bucket 12: 90%\n  bucket 11: 70%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 80%\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 20: 60%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 20: 70%\n  bucket 21: 80%\n  bucket 20: 80%\n  bucket 21: 90%\n  bucket 20: 90%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 22: 40%\n  bucket 23: 30%\n  bucket 22: 50%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 30%\n  bucket 24: 40%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 50%\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 197 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 26: 100%\n  bucket 27: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 80%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-10-03 15:04:12", "plugin": "core", "name": "end_epoch", "raw_value": "1696345452.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 15:04:12", "plugin": "core", "name": "start_epoch", "raw_value": "1696345452.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-9", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 9, "time_seconds": 135.27941608428955, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "927ff2435a0741b5"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "43731d08869f7c60"}, "library|input_2": {"src": "hda", "id": "6ebcad6c2529d080"}, "library|rna_strandness": "FR", "library|type": "paired"}, "job": {"model_class": "Job", "id": "0ba6f5f022965a83", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T15:06:38.626138", "create_time": "2023-10-03T15:04:41.652173", "galaxy_version": "21.09", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-hjlxg", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/8/a/f/dataset_8af6c80b-cd80-4d4a-aff3-c4821f1f15f4.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/0/7/2/dataset_07225f66-6093-4872-9464-46fbefef2266.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/e/3/9/dataset_e392b1be-83b3-4cd3-9d3d-5fecfc25f69b.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'      --rna-strandness FR                           | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/8/9/9/dataset_899622c9-6f56-4296-a29b-fb7ac80471f8.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": \"false\", \"summary_file\": \"false\"}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 216, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 217, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"FR\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 215, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "927ff2435a0741b5", "src": "hda", "uuid": "8af6c80b-cd80-4d4a-aff3-c4821f1f15f4"}, "input_1": {"id": "43731d08869f7c60", "src": "hda", "uuid": "07225f66-6093-4872-9464-46fbefef2266"}, "input_2": {"id": "6ebcad6c2529d080", "src": "hda", "uuid": "e392b1be-83b3-4cd3-9d3d-5fecfc25f69b"}}, "outputs": {"output_alignments": {"id": "03945b09a42f0e3f", "src": "hda", "uuid": "899622c9-6f56-4296-a29b-fb7ac80471f8"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 29\nGetting block 3 of 29\n  Reserving size (252) for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Reserving size (252) for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\nGetting block 4 of 29\n  Entering block accumulator loop for bucket 3:\n  Reserving size (252) for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 3: 40%\n  bucket 4: 10%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 4: 20%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 4: 30%\n  bucket 3: 80%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 1: 90%\n  bucket 4: 40%\n  bucket 2: 90%\n  bucket 3: 100%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 50%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\nGetting block 6 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 7: 10%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 7: 30%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 7: 40%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 7: 50%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 7: 60%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  bucket 7: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  bucket 15: 50%\n  Calculating Z arrays for bucket 16\n  bucket 15: 60%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  bucket 16: 10%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 30%\n  bucket 24: 40%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 25: 10%\n  bucket 24: 70%\n  bucket 25: 20%\n  bucket 24: 80%\n  bucket 25: 30%\n  bucket 24: 90%\n  bucket 25: 40%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  Sorting block time: 00:00:00\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\nReturning block of 197 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 20%\n  bucket 26: 30%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 27: 20%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 27: 30%\n  bucket 26: 90%\n  bucket 27: 40%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Calculating Z arrays for bucket 29\n  bucket 28: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 29: 90%\n  bucket 28: 100%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stderr": "\nSettings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 252 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 252 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 44 sample suffixes\nGenerating random suffixes\nQSorting 44 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 44 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 20; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 2; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 184.759 (target: 251)\nGetting block 1 of 29\n  Reserving size (252) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 29\nGetting block 3 of 29\n  Reserving size (252) for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Reserving size (252) for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\nGetting block 4 of 29\n  Entering block accumulator loop for bucket 3:\n  Reserving size (252) for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 3: 40%\n  bucket 4: 10%\n  bucket 2: 40%\n  bucket 3: 50%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 4: 20%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 4: 30%\n  bucket 3: 80%\n  bucket 1: 80%\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 1: 90%\n  bucket 4: 40%\n  bucket 2: 90%\n  bucket 3: 100%\n  bucket 1: 100%\n  Sorting block of length 127 for bucket 1\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 166 for bucket 3\n  (Using difference cover)\n  bucket 4: 50%\n  Sorting block of length 239 for bucket 2\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 242 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 128 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 167 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 240 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 4\nGetting block 5 of 29\nGetting block 6 of 29\n  Reserving size (252) for bucket 5\n  Calculating Z arrays for bucket 5\nGetting block 7 of 29\n  Reserving size (252) for bucket 7\n  Reserving size (252) for bucket 6\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 7: 10%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 5: 40%\n  bucket 7: 30%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 7: 40%\n  bucket 5: 60%\n  bucket 6: 40%\n  bucket 7: 50%\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 7: 60%\n  bucket 5: 80%\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 5: 100%\n  Sorting block of length 162 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  bucket 7: 100%\n  Sorting block of length 164 for bucket 6\n  (Using difference cover)\n  Sorting block of length 220 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 165 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 7\nGetting block 8 of 29\n  Reserving size (252) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 242 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 243 for bucket 8\nGetting block 9 of 29\n  Reserving size (252) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 29\n  Reserving size (252) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 216 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 214 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 217 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 215 for bucket 10\nGetting block 11 of 29\n  Reserving size (252) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 229 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 230 for bucket 11\nGetting block 12 of 29\n  Reserving size (252) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 195 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 12\nGetting block 13 of 29\n  Reserving size (252) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 197 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 198 for bucket 13\nGetting block 14 of 29\n  Reserving size (252) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 191 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 192 for bucket 14\nGetting block 15 of 29\n  Reserving size (252) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\nGetting block 16 of 29\n  Reserving size (252) for bucket 16\n  bucket 15: 50%\n  Calculating Z arrays for bucket 16\n  bucket 15: 60%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  bucket 16: 10%\n  Sorting block of length 177 for bucket 15\n  (Using difference cover)\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  Sorting block time: 00:00:00\nReturning block of 178 for bucket 15\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 102 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 103 for bucket 16\nGetting block 17 of 29\n  Reserving size (252) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 162 for bucket 17\n  (Using difference cover)\nGetting block 18 of 29\n  Reserving size (252) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  Sorting block time: 00:00:00\nReturning block of 163 for bucket 17\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 117 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 18\nGetting block 19 of 29\n  Reserving size (252) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 161 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 162 for bucket 19\nGetting block 20 of 29\n  Reserving size (252) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 232 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 233 for bucket 20\nGetting block 21 of 29\n  Reserving size (252) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 131 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 132 for bucket 21\nGetting block 22 of 29\n  Reserving size (252) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 220 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 221 for bucket 22\nGetting block 23 of 29\n  Reserving size (252) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 141 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 142 for bucket 23\nGetting block 24 of 29\n  Reserving size (252) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\nGetting block 25 of 29\n  Reserving size (252) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 30%\n  bucket 24: 40%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 25: 10%\n  bucket 24: 70%\n  bucket 25: 20%\n  bucket 24: 80%\n  bucket 25: 30%\n  bucket 24: 90%\n  bucket 25: 40%\n  bucket 24: 100%\n  Sorting block of length 196 for bucket 24\n  (Using difference cover)\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  Sorting block time: 00:00:00\n  bucket 25: 100%\n  Sorting block of length 227 for bucket 25\n  (Using difference cover)\nReturning block of 197 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 228 for bucket 25\nGetting block 26 of 29\n  Reserving size (252) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 29\n  Reserving size (252) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 20%\n  bucket 26: 30%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 27: 20%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 27: 30%\n  bucket 26: 90%\n  bucket 27: 40%\n  bucket 26: 100%\n  Sorting block of length 195 for bucket 26\n  (Using difference cover)\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 233 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 234 for bucket 27\nGetting block 28 of 29\n  Reserving size (252) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 29\n  Reserving size (252) for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Calculating Z arrays for bucket 29\n  bucket 28: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 29: 90%\n  bucket 28: 100%\n  bucket 29: 100%\n  Sorting block of length 180 for bucket 29\n  (Using difference cover)\n  Sorting block of length 80 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 181 for bucket 29\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-10-03 15:06:27", "plugin": "core", "name": "end_epoch", "raw_value": "1696345587.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 15:06:27", "plugin": "core", "name": "start_epoch", "raw_value": "1696345587.0000000"}, {"title": "Memory Allocated (MB)", "value": "12000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "ivar_removereads/1.2.2+galaxy1-0", "has_data": true, "data": {"tool_id": "ivar_removereads", "tool_version": "1.2.2+galaxy1", "test_index": 0, "time_seconds": 152.4387402534485, "inputs": {"input_bam": {"src": "hda", "id": "dcadce1443bb9a02"}, "variants_tsv": {"src": "hda", "id": "0ca4675db108aa70"}, "input_bed": {"src": "hda", "id": "f1508eeba44fe36e"}, "amplicon_info": {"src": "hda", "id": "444ecf3c9737efe5"}}, "job": {"model_class": "Job", "id": "f507f6b6b242a66c", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:43:43.001533", "create_time": "2023-10-03T14:41:36.284831", "galaxy_version": "21.09", "command_version": "iVar version 1.2.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/ivar_removereads/ivar_removereads/1.2.2+galaxy1", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-vzvpt", "command_line": "cp '/galaxy/server/database/objects/9/9/4/dataset_99450b1c-5e8d-43ab-aac2-b09950150391.dat' binding_sites.bed && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/ivar_removereads/ee2beb764a7b/ivar_removereads/sanitize_bed.py' binding_sites.bed &&  ivar getmasked -i '/galaxy/server/database/objects/2/5/0/dataset_250474c2-79cc-4a74-bf9e-25b3e05deb05.dat' -b binding_sites.bed -f '/galaxy/server/database/objects/7/7/3/dataset_773e065f-4578-4d52-b443-7211dbf18433.dat' -p masked_primers &&  python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/ivar_removereads/ee2beb764a7b/ivar_removereads/completemask.py' masked_primers.txt '/galaxy/server/database/objects/7/7/3/dataset_773e065f-4578-4d52-b443-7211dbf18433.dat' && ln -s '/galaxy/server/database/objects/2/4/f/dataset_24fa68d0-eced-4fe9-9a9b-ffdb6ed0e589.dat' sorted.bam && ln -s '/galaxy/server/database/objects/_metadata_files/9/a/4/metadata_9a4eb6ad-51ec-45fc-9cc4-8409faf65a5b.dat' sorted.bam.bai &&  ivar removereads -i sorted.bam -b binding_sites.bed -p removed_reads.bam -t masked_primers.txt", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input_bam": {"id": "dcadce1443bb9a02", "src": "hda", "uuid": "24fa68d0-eced-4fe9-9a9b-ffdb6ed0e589"}, "variants_tsv": {"id": "0ca4675db108aa70", "src": "hda", "uuid": "250474c2-79cc-4a74-bf9e-25b3e05deb05"}, "input_bed": {"id": "f1508eeba44fe36e", "src": "hda", "uuid": "99450b1c-5e8d-43ab-aac2-b09950150391"}, "amplicon_info": {"id": "444ecf3c9737efe5", "src": "hda", "uuid": "773e065f-4578-4d52-b443-7211dbf18433"}}, "outputs": {"output_bam": {"id": "428eb28cc0486c14", "src": "hda", "uuid": "4f6fe6a5-7fb4-4bcd-af9a-3f81c1beb926"}}, "output_collections": {}, "tool_stdout": "Found 67 primers in BED file\nPrimer pair for 400_1_out_R not found in BED file.\nPrimer pair for 400_34_out_L* not found in BED file.\nPrimer pair for 400_35_out_L not found in BED file.\n400_18_out_L**\t400_23_out_R\t400_32_out_L\n\nRemoving reads primed with any of:\n400_18_out_L**\t400_18_out_R**\t400_23_out_L\t400_23_out_R\t400_32_out_L\t400_32_out_R\nFound 67 primers in BED file\nWriting to removed_reads.bam\nNumber of references: 1\nReference Name: PRV\nReference Length: 10807\nUsing Region: PRV\nSorted By Coordinate\nResults:\n1629 reads were removed.\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "Found 67 primers in BED file\nPrimer pair for 400_1_out_R not found in BED file.\nPrimer pair for 400_34_out_L* not found in BED file.\nPrimer pair for 400_35_out_L not found in BED file.\n400_18_out_L**\t400_23_out_R\t400_32_out_L\n\nRemoving reads primed with any of:\n400_18_out_L**\t400_18_out_R**\t400_23_out_L\t400_23_out_R\t400_32_out_L\t400_32_out_R\nFound 67 primers in BED file\nWriting to removed_reads.bam\nNumber of references: 1\nReference Name: PRV\nReference Length: 10807\nUsing Region: PRV\nSorted By Coordinate\nResults:\n1629 reads were removed.\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:43:30", "plugin": "core", "name": "end_epoch", "raw_value": "1696344210.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:43:29", "plugin": "core", "name": "start_epoch", "raw_value": "1696344209.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-0", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 0, "time_seconds": 160.55830645561218, "inputs": {"input": {"src": "hda", "id": "246b2b8863c9d4cd"}}, "job": {"model_class": "Job", "id": "bf13e6ca0a5a3ba7", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:16:20.255546", "create_time": "2023-10-03T14:13:51.906295", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-bg9rc", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/c/4/1/dataset_c419c64b-e28a-4092-b1cb-7aef60cd5cfb.dat' > '/galaxy/server/database/objects/6/3/4/dataset_634532b8-feed-40b7-a212-cfffb109f56d.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "246b2b8863c9d4cd", "src": "hda", "uuid": "c419c64b-e28a-4092-b1cb-7aef60cd5cfb"}}, "outputs": {"output": {"id": "8bf2ae4967a66f17", "src": "hda", "uuid": "634532b8-feed-40b7-a212-cfffb109f56d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:16:02", "plugin": "core", "name": "end_epoch", "raw_value": "1696342562.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:16:01", "plugin": "core", "name": "start_epoch", "raw_value": "1696342561.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-1", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 1, "time_seconds": 128.2485373020172, "inputs": {"input": {"src": "hda", "id": "0ba6f5f022965a83"}}, "job": {"model_class": "Job", "id": "8ce84878befde9a0", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:18:28.490146", "create_time": "2023-10-03T14:16:32.180944", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-4kjzh", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/3/d/8/dataset_3d884d22-aab6-47ab-98f3-164a9c6a3ef8.dat' > '/galaxy/server/database/objects/9/9/c/dataset_99cd5c0a-e0d0-4fbe-b418-89b690dae1f7.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "0ba6f5f022965a83", "src": "hda", "uuid": "3d884d22-aab6-47ab-98f3-164a9c6a3ef8"}}, "outputs": {"output": {"id": "5295abfb1aa9afdf", "src": "hda", "uuid": "99cd5c0a-e0d0-4fbe-b418-89b690dae1f7"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:18:17", "plugin": "core", "name": "end_epoch", "raw_value": "1696342697.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:18:16", "plugin": "core", "name": "start_epoch", "raw_value": "1696342696.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-2", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 2, "time_seconds": 128.23948740959167, "inputs": {"input": {"src": "hda", "id": "ba53f27db1e78f0b"}}, "job": {"model_class": "Job", "id": "8a402cd36c10620d", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:20:36.966912", "create_time": "2023-10-03T14:18:41.022604", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-77xfw", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/7/5/4/dataset_7545e5b2-6cf9-45b8-919d-791bb92e4c75.dat' > '/galaxy/server/database/objects/6/b/8/dataset_6b820562-7ea7-4dcb-a03c-430478e03a0a.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "ba53f27db1e78f0b", "src": "hda", "uuid": "7545e5b2-6cf9-45b8-919d-791bb92e4c75"}}, "outputs": {"output": {"id": "04f24daab40f53e4", "src": "hda", "uuid": "6b820562-7ea7-4dcb-a03c-430478e03a0a"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:20:26", "plugin": "core", "name": "end_epoch", "raw_value": "1696342826.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:20:25", "plugin": "core", "name": "start_epoch", "raw_value": "1696342825.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-3", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 3, "time_seconds": 127.4319052696228, "inputs": {"input": {"src": "hda", "id": "af139ebf6fbb7186"}}, "job": {"model_class": "Job", "id": "18ba0a711db06c71", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:22:44.239803", "create_time": "2023-10-03T14:20:48.888829", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-kmspm", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/5/8/1/dataset_58124259-6d23-40eb-9430-5620d66f5509.dat' > '/galaxy/server/database/objects/9/e/5/dataset_9e563b77-7dc9-4b4d-9efe-a42636b19b55.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "af139ebf6fbb7186", "src": "hda", "uuid": "58124259-6d23-40eb-9430-5620d66f5509"}}, "outputs": {"output": {"id": "a882c8a14c9665cd", "src": "hda", "uuid": "9e563b77-7dc9-4b4d-9efe-a42636b19b55"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:22:34", "plugin": "core", "name": "end_epoch", "raw_value": "1696342954.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:22:33", "plugin": "core", "name": "start_epoch", "raw_value": "1696342953.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-4", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 4, "time_seconds": 127.04610800743103, "inputs": {"input": {"src": "hda", "id": "0b6fa992e475597a"}}, "job": {"model_class": "Job", "id": "a27b92c01a515723", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:24:51.590971", "create_time": "2023-10-03T14:22:56.746268", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-mmfpx", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/d/7/0/dataset_d70f5b47-2d54-426c-a762-bdc974d37432.dat' > '/galaxy/server/database/objects/f/2/0/dataset_f20b7db5-6d21-42a0-8f08-22c4728846e8.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "0b6fa992e475597a", "src": "hda", "uuid": "d70f5b47-2d54-426c-a762-bdc974d37432"}}, "outputs": {"output": {"id": "6ff63b0c54910ac8", "src": "hda", "uuid": "f20b7db5-6d21-42a0-8f08-22c4728846e8"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:24:40", "plugin": "core", "name": "end_epoch", "raw_value": "1696343080.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:24:39", "plugin": "core", "name": "start_epoch", "raw_value": "1696343079.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_idxstats/2.0.4-0", "has_data": true, "data": {"tool_id": "samtools_idxstats", "tool_version": "2.0.4", "test_index": 0, "time_seconds": 131.51983833312988, "inputs": {"input": {"src": "hda", "id": "77ca22115a74ea5d"}}, "job": {"model_class": "Job", "id": "ff6b6ff14982c1c9", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:41:35.151144", "create_time": "2023-10-03T13:39:36.379442", "galaxy_version": "21.09", "command_version": "Version: 1.13 (using htslib 1.13)", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_idxstats/samtools_idxstats/2.0.4", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-dhbk6", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/f/d/0/dataset_fd0537b0-cefa-4b6c-913b-3c92ae0a787a.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/d/4/b/metadata_d4b116d9-0fdd-4843-a528-1ea43901f476.dat' infile.bai &&  samtools idxstats -@ $addthreads infile  > '/galaxy/server/database/objects/5/e/1/dataset_5e16de51-eef1-45d1-8a86-b058b0c6980d.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input": {"id": "77ca22115a74ea5d", "src": "hda", "uuid": "fd0537b0-cefa-4b6c-913b-3c92ae0a787a"}}, "outputs": {"output": {"id": "a9c566fd17aa92bc", "src": "hda", "uuid": "5e16de51-eef1-45d1-8a86-b058b0c6980d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:41:23", "plugin": "core", "name": "start_epoch", "raw_value": "1696340483.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:41:23", "plugin": "core", "name": "end_epoch", "raw_value": "1696340483.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "samtools_idxstats/2.0.4-1", "has_data": true, "data": {"tool_id": "samtools_idxstats", "tool_version": "2.0.4", "test_index": 1, "time_seconds": 126.25765800476074, "inputs": {"input": {"src": "hda", "id": "ef70595550d3e9e1"}}, "job": {"model_class": "Job", "id": "dacd4fee14f0ce5a", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:43:41.525537", "create_time": "2023-10-03T13:41:47.936437", "galaxy_version": "21.09", "command_version": "Version: 1.13 (using htslib 1.13)", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_idxstats/samtools_idxstats/2.0.4", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-4lmxk", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/4/e/1/dataset_4e1b2c75-5603-4634-8316-e1b81e8aacdc.dat' infile && ln -s '/galaxy/server/database/objects/_metadata_files/b/6/e/metadata_b6e6f145-cb60-4d91-8bef-546e2484d628.dat' infile.bai &&  samtools idxstats -@ $addthreads infile  > '/galaxy/server/database/objects/7/0/1/dataset_70183005-fea5-4a91-8ee1-326272a69ac8.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input": {"id": "ef70595550d3e9e1", "src": "hda", "uuid": "4e1b2c75-5603-4634-8316-e1b81e8aacdc"}}, "outputs": {"output": {"id": "84d62bc29bc6ac08", "src": "hda", "uuid": "70183005-fea5-4a91-8ee1-326272a69ac8"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:43:30", "plugin": "core", "name": "start_epoch", "raw_value": "1696340610.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:43:30", "plugin": "core", "name": "end_epoch", "raw_value": "1696340610.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-0", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 0, "time_seconds": 123.9654061794281, "inputs": {"split_parms|input": {"src": "hda", "id": "419bbf4bb98bd90a"}, "split_parms|top": "2", "split_parms|split_by|id_col": "1", "split_parms|split_by|match_regex": "(.*)\\.mgf", "split_parms|split_by|sub_regex": "\\1.tab", "split_parms|split_by|select_split_by": "col", "split_parms|select_ftype": "tabular"}, "job": {"model_class": "Job", "id": "f82d99e1f5e1de23", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T12:48:17.893897", "create_time": "2023-10-03T12:46:26.694279", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-kns8p", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/f/9/b/dataset_f9bbc0c4-761f-426f-a5be-7854beb26860.dat' --ftype 'tabular' --top '2' --by 'col' --id_column '1' --match '(.*)__backslash__.mgf' --sub '__backslash__1.tab'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 1, \"src\": \"hda\"}]}, \"select_ftype\": \"tabular\", \"split_by\": {\"__current_case__\": 0, \"id_col\": \"1\", \"match_regex\": \"(.*)\\\\.mgf\", \"select_split_by\": \"col\", \"sub_regex\": \"\\\\1.tab\"}, \"top\": \"2\"}"}, "inputs": {"input": {"id": "419bbf4bb98bd90a", "src": "hda", "uuid": "f9bbc0c4-761f-426f-a5be-7854beb26860"}}, "outputs": {"__new_primary_file_list_output_tab|foo3.tab__": {"id": "e4d452fe35b4e3de", "src": "hda", "uuid": "b9715b65-ae0f-4a23-b071-4ee9630984cb"}, "__new_primary_file_list_output_tab|foo2.tab__": {"id": "a2a84839a6b593dc", "src": "hda", "uuid": "7a929a0c-7a23-44f6-bb09-b85374482c83"}, "__new_primary_file_list_output_tab|foo.tab__": {"id": "f82d99e1f5e1de23", "src": "hda", "uuid": "8f259e96-c83e-44b5-8102-09bf7a93247f"}}, "output_collections": {"list_output_tab": {"id": "419bbf4bb98bd90a", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-10-03 12:48:13", "plugin": "core", "name": "end_epoch", "raw_value": "1696337293.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 12:48:13", "plugin": "core", "name": "start_epoch", "raw_value": "1696337293.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-1", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 1, "time_seconds": 117.93920636177063, "inputs": {"split_parms|input": {"src": "hda", "id": "9a3e457a9521f06c"}, "split_parms|top": "2", "split_parms|split_by|select_mode|numnew": "2", "split_parms|split_by|select_mode|mode": "numnew", "split_parms|split_by|newfilenames": "test", "split_parms|split_by|select_split_by": "row", "split_parms|select_ftype": "tabular"}, "job": {"model_class": "Job", "id": "e4d452fe35b4e3de", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T12:50:16.118877", "create_time": "2023-10-03T12:48:29.694587", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-6bltv", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/d/1/5/dataset_d154c3a3-a516-4452-80e5-f8afc0242c7d.dat' --ftype 'tabular' --top '2' --by 'row' --numnew '2' --file_names 'test' --file_ext 'tabular'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 5, \"src\": \"hda\"}]}, \"select_ftype\": \"tabular\", \"split_by\": {\"__current_case__\": 1, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}, \"select_split_by\": \"row\"}, \"top\": \"2\"}"}, "inputs": {"input": {"id": "9a3e457a9521f06c", "src": "hda", "uuid": "d154c3a3-a516-4452-80e5-f8afc0242c7d"}}, "outputs": {"__new_primary_file_list_output_tab|test_000001.tabular__": {"id": "b380eaf6d6c24c1d", "src": "hda", "uuid": "7942eab3-9c4e-40d4-bce5-0ccff723a08b"}, "__new_primary_file_list_output_tab|test_000000.tabular__": {"id": "1d7e3801a9f43c7d", "src": "hda", "uuid": "d1779c3c-8553-45c0-af75-63962887abe2"}}, "output_collections": {"list_output_tab": {"id": "f82d99e1f5e1de23", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-10-03 12:50:12", "plugin": "core", "name": "end_epoch", "raw_value": "1696337412.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 12:50:12", "plugin": "core", "name": "start_epoch", "raw_value": "1696337412.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-10", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 10, "time_seconds": 118.33313226699829, "inputs": {"split_parms|input": {"src": "hda", "id": "dacd4fee14f0ce5a"}, "split_parms|split_method|record_length": "4", "split_parms|split_method|select_split_method": "number", "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "test", "split_parms|select_ftype": "generic"}, "job": {"model_class": "Job", "id": "cbde08797130a6b1", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:08:25.052671", "create_time": "2023-10-03T13:06:38.460172", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-mcr7d", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/1/0/d/dataset_10d7d474-1cd0-4d1e-9ab3-a8810c0112ae.dat' --ftype 'generic' --generic_num 4 --numnew '2' --file_names 'test' --file_ext 'fastq'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 6, \"input\": {\"values\": [{\"id\": 57, \"src\": \"hda\"}]}, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"generic\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}, \"split_method\": {\"__current_case__\": 1, \"record_length\": \"4\", \"select_split_method\": \"number\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fastq\""}, "inputs": {"input": {"id": "dacd4fee14f0ce5a", "src": "hda", "uuid": "10d7d474-1cd0-4d1e-9ab3-a8810c0112ae"}}, "outputs": {"__new_primary_file_list_output_generic|test_000000__": {"id": "a42f1fc84e5f432f", "src": "hda", "uuid": "a455bc73-6a7b-4751-9de9-74287b0ab6c8"}, "__new_primary_file_list_output_generic|test_000001__": {"id": "27205d73567edfd8", "src": "hda", "uuid": "124abc3e-68fa-44e4-abc9-7321e100dec7"}}, "output_collections": {"list_output_generic": {"id": "410755b96f862309", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:08:20", "plugin": "core", "name": "start_epoch", "raw_value": "1696338500.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:08:20", "plugin": "core", "name": "end_epoch", "raw_value": "1696338500.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-11", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 11, "time_seconds": 119.09116625785828, "inputs": {"split_parms|input": {"src": "hda", "id": "c73b17875b94d003"}, "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "rand", "split_parms|select_allocate|seed": "1010", "split_parms|select_allocate|allocate": "random", "split_parms|select_ftype": "fasta"}, "job": {"model_class": "Job", "id": "4e4ee54fbd1bc67e", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:10:24.362959", "create_time": "2023-10-03T13:08:36.874142", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-8rp47", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/0/6/f/dataset_06f69e5e-5258-48b5-a296-ad351dfb4e32.dat' --ftype 'fasta' --numnew '2' --rand --seed '1010' --file_names 'rand' --file_ext 'fasta'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 3, \"input\": {\"values\": [{\"id\": 60, \"src\": \"hda\"}]}, \"newfilenames\": \"rand\", \"select_allocate\": {\"__current_case__\": 0, \"allocate\": \"random\", \"seed\": \"1010\"}, \"select_ftype\": \"fasta\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fasta\""}, "inputs": {"input": {"id": "c73b17875b94d003", "src": "hda", "uuid": "06f69e5e-5258-48b5-a296-ad351dfb4e32"}}, "outputs": {"__new_primary_file_list_output_fasta|rand_000000.fasta__": {"id": "617753d6f7c3ed43", "src": "hda", "uuid": "dc0366e8-d35d-47fd-ac3a-c48a9a174265"}, "__new_primary_file_list_output_fasta|rand_000001.fasta__": {"id": "08c6652d07cc85dd", "src": "hda", "uuid": "c6892a48-9dd3-46b1-b508-1cf4a763ab49"}}, "output_collections": {"list_output_fasta": {"id": "133661bf12a93025", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:10:20", "plugin": "core", "name": "start_epoch", "raw_value": "1696338620.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:10:20", "plugin": "core", "name": "end_epoch", "raw_value": "1696338620.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-12", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 12, "time_seconds": 118.41293501853943, "inputs": {"split_parms|input": {"src": "hda", "id": "b3be70a427437823"}, "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "fasta_batch", "split_parms|select_allocate|allocate": "batch", "split_parms|select_ftype": "fasta"}, "job": {"model_class": "Job", "id": "e2787bcafa265f69", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:12:22.642201", "create_time": "2023-10-03T13:10:36.051999", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-hcztx", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/5/f/4/dataset_5f471881-81df-4830-88b7-4b08f3775e1f.dat' --ftype 'fasta' --numnew '2' --batch --file_names 'fasta_batch' --file_ext 'fasta'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 3, \"input\": {\"values\": [{\"id\": 63, \"src\": \"hda\"}]}, \"newfilenames\": \"fasta_batch\", \"select_allocate\": {\"__current_case__\": 1, \"allocate\": \"batch\"}, \"select_ftype\": \"fasta\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fasta\""}, "inputs": {"input": {"id": "b3be70a427437823", "src": "hda", "uuid": "5f471881-81df-4830-88b7-4b08f3775e1f"}}, "outputs": {"__new_primary_file_list_output_fasta|fasta_batch_000000.fasta__": {"id": "e3dda80ff894c424", "src": "hda", "uuid": "6b0f139e-7f9b-4fab-bfa5-c28775e40f3a"}, "__new_primary_file_list_output_fasta|fasta_batch_000001.fasta__": {"id": "fb9ab28dea9d231a", "src": "hda", "uuid": "404f0b28-4a2b-433f-9a66-2dba8a92dc5d"}}, "output_collections": {"list_output_fasta": {"id": "7c6d3880f43f32b5", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:12:18", "plugin": "core", "name": "start_epoch", "raw_value": "1696338738.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:12:18", "plugin": "core", "name": "end_epoch", "raw_value": "1696338738.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-13", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 13, "time_seconds": 121.06072688102722, "inputs": {"split_parms|input": {"src": "hda", "id": "02447288fdc69c7e"}, "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "test", "split_parms|select_ftype": "txt"}, "job": {"model_class": "Job", "id": "10653d2578fe00df", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:14:23.979100", "create_time": "2023-10-03T13:12:34.829543", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-z6k6f", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/a/9/c/dataset_a9c44530-5b1d-4ddb-b1ad-fc608e446b55.dat' --ftype 'txt' --numnew '2' --file_names 'test' --file_ext 'txt'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 5, \"input\": {\"values\": [{\"id\": 66, \"src\": \"hda\"}]}, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"txt\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"txt\""}, "inputs": {"input": {"id": "02447288fdc69c7e", "src": "hda", "uuid": "a9c44530-5b1d-4ddb-b1ad-fc608e446b55"}}, "outputs": {"__new_primary_file_list_output_txt|test_000000.txt__": {"id": "bb5587f667c04c7b", "src": "hda", "uuid": "af9b2b72-14d0-4a4b-aa8c-50c337bbe945"}, "__new_primary_file_list_output_txt|test_000001.txt__": {"id": "049afe0515eb4358", "src": "hda", "uuid": "18ecdf76-b5aa-493d-a8ec-dafb3908299a"}}, "output_collections": {"list_output_txt": {"id": "1c60f35cfea585df", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:14:19", "plugin": "core", "name": "start_epoch", "raw_value": "1696338859.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:14:19", "plugin": "core", "name": "end_epoch", "raw_value": "1696338859.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-14", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 14, "time_seconds": 119.49390816688538, "inputs": {"split_parms|input": {"src": "hda", "id": "83b4dba29e3d38b5"}, "split_parms|split_method|generic_regex": "^.*", "split_parms|split_method|select_split_method": "regex", "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "test", "split_parms|select_ftype": "generic"}, "job": {"model_class": "Job", "id": "99d7acfd024ebd3a", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:16:23.256605", "create_time": "2023-10-03T13:14:35.920887", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-hk2n2", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/d/d/a/dataset_ddaed58f-9d61-4dc0-9881-d8363d0d531e.dat' --ftype 'generic' --generic_re '^.*' --numnew '2' --file_names 'test' --file_ext 'txt'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 6, \"input\": {\"values\": [{\"id\": 69, \"src\": \"hda\"}]}, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"generic\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}, \"split_method\": {\"__current_case__\": 0, \"generic_regex\": \"^.*\", \"select_split_method\": \"regex\", \"split_after\": \"false\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"txt\""}, "inputs": {"input": {"id": "83b4dba29e3d38b5", "src": "hda", "uuid": "ddaed58f-9d61-4dc0-9881-d8363d0d531e"}}, "outputs": {"__new_primary_file_list_output_generic|test_000000__": {"id": "03f356c22307e365", "src": "hda", "uuid": "a88bc3bb-32f4-48bb-978c-47f64b2107fb"}, "__new_primary_file_list_output_generic|test_000001__": {"id": "7b8c39a02ee098d6", "src": "hda", "uuid": "d848ea01-e851-4dc2-b6aa-27072999548b"}}, "output_collections": {"list_output_generic": {"id": "29c981657ce9a66e", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:16:19", "plugin": "core", "name": "start_epoch", "raw_value": "1696338979.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:16:19", "plugin": "core", "name": "end_epoch", "raw_value": "1696338979.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-15", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 15, "time_seconds": 118.07544422149658, "inputs": {"split_parms|input": {"src": "hda", "id": "cf8baebf3e61d353"}, "split_parms|split_method|generic_regex": "^>.*", "split_parms|split_method|select_split_method": "regex", "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "rand", "split_parms|select_allocate|seed": "1010", "split_parms|select_allocate|allocate": "random", "split_parms|select_ftype": "generic"}, "job": {"model_class": "Job", "id": "494625570ec443b7", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:18:21.512573", "create_time": "2023-10-03T13:16:35.121773", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-7xt47", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/c/8/d/dataset_c8d4b22f-df3d-4400-9fac-1dd614e4d70d.dat' --ftype 'generic' --generic_re '^>.*' --numnew '2' --rand --seed '1010' --file_names 'rand' --file_ext 'fasta'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 6, \"input\": {\"values\": [{\"id\": 72, \"src\": \"hda\"}]}, \"newfilenames\": \"rand\", \"select_allocate\": {\"__current_case__\": 0, \"allocate\": \"random\", \"seed\": \"1010\"}, \"select_ftype\": \"generic\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}, \"split_method\": {\"__current_case__\": 0, \"generic_regex\": \"^>.*\", \"select_split_method\": \"regex\", \"split_after\": \"false\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fasta\""}, "inputs": {"input": {"id": "cf8baebf3e61d353", "src": "hda", "uuid": "c8d4b22f-df3d-4400-9fac-1dd614e4d70d"}}, "outputs": {"__new_primary_file_list_output_generic|rand_000000__": {"id": "cbe82ce2aeca0318", "src": "hda", "uuid": "20de4b19-07ea-4ca5-979f-a0d6324ecf53"}, "__new_primary_file_list_output_generic|rand_000001__": {"id": "bfe9a80a67952f4d", "src": "hda", "uuid": "19042ca7-71ff-4125-b2bf-394009c7f56c"}}, "output_collections": {"list_output_generic": {"id": "daeeeba0a5ab01da", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:18:17", "plugin": "core", "name": "start_epoch", "raw_value": "1696339097.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:18:17", "plugin": "core", "name": "end_epoch", "raw_value": "1696339097.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-16", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 16, "time_seconds": 119.65815854072571, "inputs": {"split_parms|input": {"src": "hda", "id": "5db46a210eb49b58"}, "split_parms|select_mode|numnew": "10", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "mol", "split_parms|select_allocate|allocate": "batch", "split_parms|select_ftype": "sdf"}, "job": {"model_class": "Job", "id": "e1e8d1e260d9a3b3", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:20:20.922454", "create_time": "2023-10-03T13:18:33.252471", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-dl8fc", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/2/9/9/dataset_2994368e-5cd3-4f8a-acf3-a31b61fccc09.dat' --ftype 'sdf' --numnew '10' --batch --file_names 'mol' --file_ext 'sdf'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 4, \"input\": {\"values\": [{\"id\": 75, \"src\": \"hda\"}]}, \"newfilenames\": \"mol\", \"select_allocate\": {\"__current_case__\": 1, \"allocate\": \"batch\"}, \"select_ftype\": \"sdf\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"10\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"sdf\""}, "inputs": {"input": {"id": "5db46a210eb49b58", "src": "hda", "uuid": "2994368e-5cd3-4f8a-acf3-a31b61fccc09"}}, "outputs": {"__new_primary_file_list_output_sdf|mol_000000.sdf__": {"id": "bbe168dc828d98db", "src": "hda", "uuid": "2c5eaaa7-98cc-4e29-80a9-e07164ccc755"}, "__new_primary_file_list_output_sdf|mol_000001.sdf__": {"id": "1a51171e49c13379", "src": "hda", "uuid": "e39c1128-b3c4-40bd-a6c4-5431c1edd816"}, "__new_primary_file_list_output_sdf|mol_000002.sdf__": {"id": "90dd62796b1f8184", "src": "hda", "uuid": "d30e4444-f6cb-4dfa-aa98-ce294fa0a761"}}, "output_collections": {"list_output_sdf": {"id": "ba275b99d9ae6df8", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:20:16", "plugin": "core", "name": "start_epoch", "raw_value": "1696339216.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:20:17", "plugin": "core", "name": "end_epoch", "raw_value": "1696339217.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-17", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 17, "time_seconds": 120.02602887153625, "inputs": {"split_parms|input": {"src": "hda", "id": "5e34b067d33f68a4"}, "split_parms|select_mode|chunksize": "1", "split_parms|select_mode|mode": "chunk", "split_parms|newfilenames": "mol", "split_parms|select_allocate|allocate": "batch", "split_parms|select_ftype": "sdf"}, "job": {"model_class": "Job", "id": "0f115a009992706a", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:22:21.237689", "create_time": "2023-10-03T13:20:32.662873", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-fl7sc", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/5/b/e/dataset_5be6666c-0dfa-4d7f-88aa-f411d09e8886.dat' --ftype 'sdf' --chunksize 1 --batch --file_names 'mol' --file_ext 'sdf'", "traceback": null, "params": {"__input_ext": "\"sdf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 4, \"input\": {\"values\": [{\"id\": 79, \"src\": \"hda\"}]}, \"newfilenames\": \"mol\", \"select_allocate\": {\"__current_case__\": 1, \"allocate\": \"batch\"}, \"select_ftype\": \"sdf\", \"select_mode\": {\"__current_case__\": 0, \"chunksize\": \"1\", \"mode\": \"chunk\"}}"}, "inputs": {"input": {"id": "5e34b067d33f68a4", "src": "hda", "uuid": "5be6666c-0dfa-4d7f-88aa-f411d09e8886"}}, "outputs": {"__new_primary_file_list_output_sdf|mol_000000.sdf__": {"id": "4a7a3cf792e48374", "src": "hda", "uuid": "aca00b82-4d78-4fc7-a78e-16423374cd59"}, "__new_primary_file_list_output_sdf|mol_000001.sdf__": {"id": "f9612f9fbc070b2b", "src": "hda", "uuid": "195d4290-48a4-44b3-ae2c-be619cfc7ff4"}, "__new_primary_file_list_output_sdf|mol_000002.sdf__": {"id": "bf13e6ca0a5a3ba7", "src": "hda", "uuid": "34827ca7-9260-454d-a665-52dee53bea42"}}, "output_collections": {"list_output_sdf": {"id": "61866f89633a2ebf", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:22:16", "plugin": "core", "name": "start_epoch", "raw_value": "1696339336.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:22:16", "plugin": "core", "name": "end_epoch", "raw_value": "1696339336.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-18", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 18, "time_seconds": 117.14937829971313, "inputs": {"split_parms|input": {"src": "hda", "id": "92df2cba880224ee"}, "split_parms|split_method|generic_regex": "^[^>].*", "split_parms|split_method|split_after": "true", "split_parms|split_method|select_split_method": "regex", "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "rand", "split_parms|select_allocate|seed": "1010", "split_parms|select_allocate|allocate": "random", "split_parms|select_ftype": "generic"}, "job": {"model_class": "Job", "id": "f619bfe702b73e42", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:24:18.453142", "create_time": "2023-10-03T13:22:33.018167", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-9m7mw", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/4/9/f/dataset_49fbd0bd-279e-4173-8362-3001597cd519.dat' --ftype 'generic' --generic_re '^[^>].*' --split_after --numnew '2' --rand --seed '1010' --file_names 'rand' --file_ext 'fasta'", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 6, \"input\": {\"values\": [{\"id\": 83, \"src\": \"hda\"}]}, \"newfilenames\": \"rand\", \"select_allocate\": {\"__current_case__\": 0, \"allocate\": \"random\", \"seed\": \"1010\"}, \"select_ftype\": \"generic\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}, \"split_method\": {\"__current_case__\": 0, \"generic_regex\": \"^[^>].*\", \"select_split_method\": \"regex\", \"split_after\": \"true\"}}"}, "inputs": {"input": {"id": "92df2cba880224ee", "src": "hda", "uuid": "49fbd0bd-279e-4173-8362-3001597cd519"}}, "outputs": {"__new_primary_file_list_output_generic|rand_000000__": {"id": "8ce84878befde9a0", "src": "hda", "uuid": "d5ff8f91-a8b2-4c10-95ae-a1afcc7c0f75"}, "__new_primary_file_list_output_generic|rand_000001__": {"id": "ab64ad5009580dba", "src": "hda", "uuid": "a3a2ee5c-910c-4af2-b4e6-377ed2e8d006"}}, "output_collections": {"list_output_generic": {"id": "86ff8eedb363b695", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:24:14", "plugin": "core", "name": "start_epoch", "raw_value": "1696339454.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:24:14", "plugin": "core", "name": "end_epoch", "raw_value": "1696339454.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-2", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 2, "time_seconds": 121.34074854850769, "inputs": {"split_parms|input": {"src": "hda", "id": "29333a9116ce7533"}, "split_parms|top": "2", "split_parms|split_by|select_mode|numnew": "2", "split_parms|split_by|select_mode|mode": "numnew", "split_parms|split_by|newfilenames": "batch_tab", "split_parms|split_by|select_allocate|allocate": "batch", "split_parms|split_by|select_split_by": "row", "split_parms|select_ftype": "tabular"}, "job": {"model_class": "Job", "id": "1d7e3801a9f43c7d", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T12:52:17.423090", "create_time": "2023-10-03T12:50:28.291535", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-mwfcm", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/8/2/8/dataset_828d5e54-33bf-42d6-9855-e80a98ef8ced.dat' --ftype 'tabular' --top '2' --by 'row' --numnew '2' --batch --file_names 'batch_tab' --file_ext 'tabular'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 8, \"src\": \"hda\"}]}, \"select_ftype\": \"tabular\", \"split_by\": {\"__current_case__\": 1, \"newfilenames\": \"batch_tab\", \"select_allocate\": {\"__current_case__\": 1, \"allocate\": \"batch\"}, \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}, \"select_split_by\": \"row\"}, \"top\": \"2\"}"}, "inputs": {"input": {"id": "29333a9116ce7533", "src": "hda", "uuid": "828d5e54-33bf-42d6-9855-e80a98ef8ced"}}, "outputs": {"__new_primary_file_list_output_tab|batch_tab_000001.tabular__": {"id": "9043e403a1ef8574", "src": "hda", "uuid": "3e6c09d9-be7e-4f0e-925e-c712068442f0"}, "__new_primary_file_list_output_tab|batch_tab_000000.tabular__": {"id": "40dacceafde7eaf5", "src": "hda", "uuid": "f47b4078-efcc-403f-b27f-9cfb6e7d00b2"}}, "output_collections": {"list_output_tab": {"id": "a2a84839a6b593dc", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-10-03 12:52:12", "plugin": "core", "name": "end_epoch", "raw_value": "1696337532.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 12:52:12", "plugin": "core", "name": "start_epoch", "raw_value": "1696337532.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-3", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 3, "time_seconds": 117.06636190414429, "inputs": {"split_parms|input": {"src": "hda", "id": "410755b96f862309"}, "split_parms|top": "2", "split_parms|split_by|select_mode|chunksize": "2", "split_parms|split_by|select_mode|mode": "chunk", "split_parms|split_by|newfilenames": "batch_tab", "split_parms|split_by|select_allocate|allocate": "batch", "split_parms|split_by|select_split_by": "row", "split_parms|select_ftype": "tabular"}, "job": {"model_class": "Job", "id": "29333a9116ce7533", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T12:54:14.733099", "create_time": "2023-10-03T12:52:29.418178", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-zg5z5", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/e/4/2/dataset_e4248ee2-c28b-4f86-93b6-57e642e5e475.dat' --ftype 'tabular' --top '2' --by 'row' --chunksize 2 --batch --file_names 'batch_tab' --file_ext 'tabular'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "split_parms": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 11, \"src\": \"hda\"}]}, \"select_ftype\": \"tabular\", \"split_by\": {\"__current_case__\": 1, \"newfilenames\": \"batch_tab\", \"select_allocate\": {\"__current_case__\": 1, \"allocate\": \"batch\"}, \"select_mode\": {\"__current_case__\": 0, \"chunksize\": \"2\", \"mode\": \"chunk\"}, \"select_split_by\": \"row\"}, \"top\": \"2\"}"}, "inputs": {"input": {"id": "410755b96f862309", "src": "hda", "uuid": "e4248ee2-c28b-4f86-93b6-57e642e5e475"}}, "outputs": {"__new_primary_file_list_output_tab|batch_tab_000001.tabular__": {"id": "7c6d3880f43f32b5", "src": "hda", "uuid": "1b39b90b-0440-4051-ab23-461e2bba2b13"}, "__new_primary_file_list_output_tab|batch_tab_000000.tabular__": {"id": "133661bf12a93025", "src": "hda", "uuid": "4fb26277-14c2-45c3-819c-4deccd1465f6"}}, "output_collections": {"list_output_tab": {"id": "e4d452fe35b4e3de", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-10-03 12:54:10", "plugin": "core", "name": "end_epoch", "raw_value": "1696337650.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 12:54:10", "plugin": "core", "name": "start_epoch", "raw_value": "1696337650.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-4", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 4, "time_seconds": 125.36162257194519, "inputs": {"split_parms|input": {"src": "hda", "id": "1c60f35cfea585df"}, "split_parms|select_mode|numnew": "24", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "chr", "split_parms|select_allocate|allocate": "batch", "split_parms|select_ftype": "txt"}, "job": {"model_class": "Job", "id": "9043e403a1ef8574", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T12:56:15.775298", "create_time": "2023-10-03T12:54:26.607825", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-dq984", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/5/c/2/dataset_5c201275-4313-4971-ab96-1f2efcef2414.dat' --ftype 'txt' --numnew '24' --batch --file_names 'chr' --file_ext 'txt'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 5, \"input\": {\"values\": [{\"id\": 14, \"src\": \"hda\"}]}, \"newfilenames\": \"chr\", \"select_allocate\": {\"__current_case__\": 1, \"allocate\": \"batch\"}, \"select_ftype\": \"txt\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"24\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"txt\""}, "inputs": {"input": {"id": "1c60f35cfea585df", "src": "hda", "uuid": "5c201275-4313-4971-ab96-1f2efcef2414"}}, "outputs": {"__new_primary_file_list_output_txt|chr_000023.txt__": {"id": "f619bfe702b73e42", "src": "hda", "uuid": "f1bee55a-3083-4271-829a-10085f9f6c91"}, "__new_primary_file_list_output_txt|chr_000022.txt__": {"id": "48b0c083950b6e35", "src": "hda", "uuid": "3c368bce-0432-4639-be22-7f4cc38a68d2"}, "__new_primary_file_list_output_txt|chr_000021.txt__": {"id": "0f115a009992706a", "src": "hda", "uuid": "35d4b1b7-4800-4632-a029-9b0ee0d48039"}, "__new_primary_file_list_output_txt|chr_000020.txt__": {"id": "a1025b9a004145ae", "src": "hda", "uuid": "744cfb42-ff17-4ada-b88b-f26aaa464f33"}, "__new_primary_file_list_output_txt|chr_000019.txt__": {"id": "e1e8d1e260d9a3b3", "src": "hda", "uuid": "671ff8bc-6b13-487b-817e-c87e07fa7362"}, "__new_primary_file_list_output_txt|chr_000018.txt__": {"id": "7384c7a89d517449", "src": "hda", "uuid": "e177cb34-fc99-4b63-84b9-ed3ea09f2616"}, "__new_primary_file_list_output_txt|chr_000017.txt__": {"id": "494625570ec443b7", "src": "hda", "uuid": "cadc4695-9e64-4212-bcec-03414d01ca2c"}, "__new_primary_file_list_output_txt|chr_000016.txt__": {"id": "e6f610c4201fa08f", "src": "hda", "uuid": "8ce9aa0f-1eae-4d7f-a4e0-b8fa671eddcd"}, "__new_primary_file_list_output_txt|chr_000015.txt__": {"id": "99d7acfd024ebd3a", "src": "hda", "uuid": "a6f58eef-6bba-49aa-8167-9dbb48df19e1"}, "__new_primary_file_list_output_txt|chr_000014.txt__": {"id": "9379278f910f0275", "src": "hda", "uuid": "5cff3a1c-ffc5-48c3-832a-19efa88ba0d8"}, "__new_primary_file_list_output_txt|chr_000013.txt__": {"id": "10653d2578fe00df", "src": "hda", "uuid": "041a5331-e455-47d9-a37a-659b3338e222"}, "__new_primary_file_list_output_txt|chr_000012.txt__": {"id": "6d97405082ede45e", "src": "hda", "uuid": "b6016d18-425a-4e35-b1fc-1ca81f520e86"}, "__new_primary_file_list_output_txt|chr_000011.txt__": {"id": "e2787bcafa265f69", "src": "hda", "uuid": "72a94586-88eb-4402-b5ae-1aa577f819ec"}, "__new_primary_file_list_output_txt|chr_000010.txt__": {"id": "e5f3b1f7a2d422a5", "src": "hda", "uuid": "06e2af25-e80f-43dc-871d-816c5c0addae"}, "__new_primary_file_list_output_txt|chr_000009.txt__": {"id": "4e4ee54fbd1bc67e", "src": "hda", "uuid": "0b0e4790-e532-422e-a666-eace529cb877"}, "__new_primary_file_list_output_txt|chr_000008.txt__": {"id": "a1fe6332a3de4e20", "src": "hda", "uuid": "7c067d61-91f7-4474-8526-df39f8578248"}, "__new_primary_file_list_output_txt|chr_000007.txt__": {"id": "cbde08797130a6b1", "src": "hda", "uuid": "f91d7462-a258-47e5-b5b1-3ce3669a688e"}, "__new_primary_file_list_output_txt|chr_000006.txt__": {"id": "f7dd38572405a12d", "src": "hda", "uuid": "b5e5052d-fe29-4f53-a7af-71d525a2123f"}, "__new_primary_file_list_output_txt|chr_000005.txt__": {"id": "9a0ee1dcdbdfe998", "src": "hda", "uuid": "27fcdafd-5bfe-4e69-a1d3-ce13e3e18215"}, "__new_primary_file_list_output_txt|chr_000004.txt__": {"id": "86ff8eedb363b695", "src": "hda", "uuid": "eec08610-c68e-4cd9-a4aa-47d73feafc08"}, "__new_primary_file_list_output_txt|chr_000003.txt__": {"id": "61866f89633a2ebf", "src": "hda", "uuid": "0a4ddf32-8eea-4f45-8f0a-2f9ede33d10f"}, "__new_primary_file_list_output_txt|chr_000002.txt__": {"id": "ba275b99d9ae6df8", "src": "hda", "uuid": "8f39cc2a-d3bb-485d-b875-1979be4e6c5d"}, "__new_primary_file_list_output_txt|chr_000001.txt__": {"id": "daeeeba0a5ab01da", "src": "hda", "uuid": "fe47fcb3-04f2-442a-a39e-c51e592b818f"}, "__new_primary_file_list_output_txt|chr_000000.txt__": {"id": "29c981657ce9a66e", "src": "hda", "uuid": "5114af52-ae1e-4651-b0af-89506f0087a9"}}, "output_collections": {"list_output_txt": {"id": "9a3e457a9521f06c", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-10-03 12:56:10", "plugin": "core", "name": "end_epoch", "raw_value": "1696337770.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 12:56:10", "plugin": "core", "name": "start_epoch", "raw_value": "1696337770.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-5", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 5, "time_seconds": 123.8801794052124, "inputs": {"split_parms|input": {"src": "hda", "id": "3d8bf64154015a36"}, "split_parms|top": "1", "split_parms|split_by|id_col": "10", "split_parms|split_by|match_regex": "(.*)\\.mgf", "split_parms|split_by|sub_regex": "\\1.tab", "split_parms|split_by|select_split_by": "col", "split_parms|select_ftype": "tabular"}, "job": {"model_class": "Job", "id": "133661bf12a93025", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T12:58:23.490189", "create_time": "2023-10-03T12:56:31.941711", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-p6wkq", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/a/b/a/dataset_abae9bfb-4205-445d-898a-9689179e81db.dat' --ftype 'tabular' --top '1' --by 'col' --id_column '10' --match '(.*)__backslash__.mgf' --sub '__backslash__1.tab'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 0, \"input\": {\"values\": [{\"id\": 39, \"src\": \"hda\"}]}, \"select_ftype\": \"tabular\", \"split_by\": {\"__current_case__\": 0, \"id_col\": \"10\", \"match_regex\": \"(.*)\\\\.mgf\", \"select_split_by\": \"col\", \"sub_regex\": \"\\\\1.tab\"}, \"top\": \"1\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"tabular\""}, "inputs": {"input": {"id": "3d8bf64154015a36", "src": "hda", "uuid": "abae9bfb-4205-445d-898a-9689179e81db"}}, "outputs": {"__new_primary_file_list_output_tab|file1.tab__": {"id": "fac88c270dc27c2b", "src": "hda", "uuid": "dfe89dd9-47da-499a-8d60-9ad7e8118cd4"}, "__new_primary_file_list_output_tab|file2.tab__": {"id": "b2e91de23b5c4ab8", "src": "hda", "uuid": "79e40631-4aff-4b58-b252-cac00a70fbac"}, "__new_primary_file_list_output_tab|file3.tab__": {"id": "d8458b9257207353", "src": "hda", "uuid": "77dc899c-612e-4143-9e9a-245caa2fda2b"}, "__new_primary_file_list_output_tab|file4.tab__": {"id": "9a03c84755691ff8", "src": "hda", "uuid": "bcf0c206-afec-449e-91f1-01e7eefc1cd2"}}, "output_collections": {"list_output_tab": {"id": "1d7e3801a9f43c7d", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-10-03 12:58:19", "plugin": "core", "name": "end_epoch", "raw_value": "1696337899.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 12:58:18", "plugin": "core", "name": "start_epoch", "raw_value": "1696337898.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-6", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 6, "time_seconds": 119.87095761299133, "inputs": {"split_parms|input": {"src": "hda", "id": "058733ca920ccabb"}, "split_parms|select_mode|numnew": "3", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "demo", "split_parms|select_ftype": "mgf"}, "job": {"model_class": "Job", "id": "1c60f35cfea585df", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:00:23.759356", "create_time": "2023-10-03T12:58:35.237535", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-gqh9s", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/e/d/c/dataset_edc97bbf-5f88-4f2c-9a24-1cdac2d1cf21.dat' --ftype 'mgf' --numnew '3' --file_names 'demo' --file_ext 'mgf'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 1, \"input\": {\"values\": [{\"id\": 44, \"src\": \"hda\"}]}, \"newfilenames\": \"demo\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"mgf\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"3\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"mgf\""}, "inputs": {"input": {"id": "058733ca920ccabb", "src": "hda", "uuid": "edc97bbf-5f88-4f2c-9a24-1cdac2d1cf21"}}, "outputs": {"__new_primary_file_list_output_mgf|demo_000000.mgf__": {"id": "074004a6bc4521a4", "src": "hda", "uuid": "02e8f579-7cbb-4a9e-abf5-f78b29b8908f"}, "__new_primary_file_list_output_mgf|demo_000001.mgf__": {"id": "2410b616ac7bd297", "src": "hda", "uuid": "db7c4937-5903-4eff-92fa-705aca9062b4"}, "__new_primary_file_list_output_mgf|demo_000002.mgf__": {"id": "4988693b86367e7d", "src": "hda", "uuid": "a2bfc20f-40a5-4ea3-a913-7dd7e333f149"}}, "output_collections": {"list_output_mgf": {"id": "b380eaf6d6c24c1d", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:00:19", "plugin": "core", "name": "start_epoch", "raw_value": "1696338019.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:00:19", "plugin": "core", "name": "end_epoch", "raw_value": "1696338019.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-7", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 7, "time_seconds": 123.94275903701782, "inputs": {"split_parms|input": {"src": "hda", "id": "541aa1e50f7ea18a"}, "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "test", "split_parms|select_ftype": "fasta"}, "job": {"model_class": "Job", "id": "daeeeba0a5ab01da", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:02:28.075555", "create_time": "2023-10-03T13:00:35.403542", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-7q9pc", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/b/3/d/dataset_b3dbf722-71d8-4ec9-a171-acb608a8106c.dat' --ftype 'fasta' --numnew '2' --file_names 'test' --file_ext 'fasta'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 3, \"input\": {\"values\": [{\"id\": 48, \"src\": \"hda\"}]}, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"fasta\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fasta\""}, "inputs": {"input": {"id": "541aa1e50f7ea18a", "src": "hda", "uuid": "b3dbf722-71d8-4ec9-a171-acb608a8106c"}}, "outputs": {"__new_primary_file_list_output_fasta|test_000000.fasta__": {"id": "9036868f54dd2400", "src": "hda", "uuid": "133d974c-8e36-4f1c-9a6f-3cac812af8b8"}, "__new_primary_file_list_output_fasta|test_000001.fasta__": {"id": "0bd56e3e0cceb794", "src": "hda", "uuid": "a80db50c-c2cf-4729-9bf9-465204d3da6e"}}, "output_collections": {"list_output_fasta": {"id": "29333a9116ce7533", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:02:23", "plugin": "core", "name": "start_epoch", "raw_value": "1696338143.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:02:23", "plugin": "core", "name": "end_epoch", "raw_value": "1696338143.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-8", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 8, "time_seconds": 119.22316670417786, "inputs": {"split_parms|input": {"src": "hda", "id": "136b2eb4ae44fd0e"}, "split_parms|select_mode|chunksize": "3", "split_parms|select_mode|mode": "chunk", "split_parms|newfilenames": "test", "split_parms|select_ftype": "fasta"}, "job": {"model_class": "Job", "id": "61866f89633a2ebf", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:04:27.379281", "create_time": "2023-10-03T13:02:39.717313", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-qrt8b", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/a/5/f/dataset_a5fee3e1-c752-4d87-8272-ac23e4890d17.dat' --ftype 'fasta' --chunksize 3 --file_names 'test' --file_ext 'fasta'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 3, \"input\": {\"values\": [{\"id\": 51, \"src\": \"hda\"}]}, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"fasta\", \"select_mode\": {\"__current_case__\": 0, \"chunksize\": \"3\", \"mode\": \"chunk\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fasta\""}, "inputs": {"input": {"id": "136b2eb4ae44fd0e", "src": "hda", "uuid": "a5fee3e1-c752-4d87-8272-ac23e4890d17"}}, "outputs": {"__new_primary_file_list_output_fasta|test_000000.fasta__": {"id": "529a84db588234e7", "src": "hda", "uuid": "1b0ecda6-e429-4aaf-a00b-fa6a2694ff40"}, "__new_primary_file_list_output_fasta|test_000001.fasta__": {"id": "ad1062e568546e1c", "src": "hda", "uuid": "b7455480-78d4-4fa3-9eb5-f720d8fa6b26"}}, "output_collections": {"list_output_fasta": {"id": "40dacceafde7eaf5", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:04:22", "plugin": "core", "name": "start_epoch", "raw_value": "1696338262.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:04:23", "plugin": "core", "name": "end_epoch", "raw_value": "1696338263.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "split_file_to_collection/0.5.0-9", "has_data": true, "data": {"tool_id": "split_file_to_collection", "tool_version": "0.5.0", "test_index": 9, "time_seconds": 119.37863445281982, "inputs": {"split_parms|input": {"src": "hda", "id": "e3587cb44548695d"}, "split_parms|select_mode|numnew": "2", "split_parms|select_mode|mode": "numnew", "split_parms|newfilenames": "test", "split_parms|select_ftype": "fastq"}, "job": {"model_class": "Job", "id": "9a0ee1dcdbdfe998", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:06:26.742013", "create_time": "2023-10-03T13:04:39.059773", "galaxy_version": "21.09", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/split_file_to_collection/0.5.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-fwsnq", "command_line": "mkdir ./out && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/bgruening/split_file_to_collection/6cbe2f30c2d7/split_file_to_collection/split_file_to_collection.py' --out ./out --in '/galaxy/server/database/objects/b/5/d/dataset_b5d0838f-9ab7-4f82-a1d1-c26a4b18f023.dat' --ftype 'fastq' --numnew '2' --file_names 'test' --file_ext 'fastq'", "traceback": null, "params": {"split_parms": "{\"__current_case__\": 2, \"input\": {\"values\": [{\"id\": 54, \"src\": \"hda\"}]}, \"newfilenames\": \"test\", \"select_allocate\": {\"__current_case__\": 2, \"allocate\": \"byrow\"}, \"select_ftype\": \"fastq\", \"select_mode\": {\"__current_case__\": 1, \"mode\": \"numnew\", \"numnew\": \"2\"}}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fastq\""}, "inputs": {"input": {"id": "e3587cb44548695d", "src": "hda", "uuid": "b5d0838f-9ab7-4f82-a1d1-c26a4b18f023"}}, "outputs": {"__new_primary_file_list_output_fastq|test_000001.fastq__": {"id": "93c9e60abd8efda3", "src": "hda", "uuid": "64129fc8-c910-4560-9c56-fdde62c7805d"}, "__new_primary_file_list_output_fastq|test_000000.fastq__": {"id": "ff6b6ff14982c1c9", "src": "hda", "uuid": "2cb247d1-b720-425a-95e5-1b129b3c08f0"}}, "output_collections": {"list_output_fastq": {"id": "9043e403a1ef8574", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:06:22", "plugin": "core", "name": "start_epoch", "raw_value": "1696338382.0000000"}, {"title": "Job End Time", "value": "2023-10-03 13:06:22", "plugin": "core", "name": "end_epoch", "raw_value": "1696338382.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "unicycler/0.4.8.0-0", "has_data": true, "data": {"tool_id": "unicycler", "tool_version": "0.4.8.0", "test_index": 0, "time_seconds": 248.14849543571472, "inputs": {"paired_unpaired|fastq_input1": {"src": "hda", "id": "5d9ba2f78a7f41b7"}, "paired_unpaired|fastq_input2": {"src": "hda", "id": "88e8bce11292b942"}, "paired_unpaired|fastq_input_selector": "paired", "mode": "normal", "min_fasta_length": "100", "linear_seqs": "0", "spades|no_correct": true, "spades|min_kmer_frac": "0.2", "spades|max_kmer_frac": "0.95", "spades|kmer_count": "10", "spades|depth_filter": "0.25", "rotation|no_rotate": false, "rotation|start_gene_id": "90", "rotation|start_gene_cov": "95", "pilon|no_pilon": false, "pilon|min_polish_size": "1000", "graph_clean|min_component_size": "1000", "graph_clean|min_dead_end_size": "1000", "lr_align|scores": "3,-6,-5,-2"}, "job": {"model_class": "Job", "id": "84c7613f610cc8e4", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:31:39.629691", "create_time": "2023-10-03T14:27:45.215866", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-nn5vf", "command_line": "ln -s '/galaxy/server/database/objects/0/0/9/dataset_009f6ff0-4fa5-494b-8ae9-60fb408663f0.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/1/1/2/dataset_112bba7e-85a7-4cb6-a168-9a9d77106502.dat' fq2.fastq && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -1 'fq1.fastq' -2 'fq2.fastq' --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --no_correct --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0'  --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"false\"}", "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"true\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "long": null, "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 156, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 157, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}"}, "inputs": {"fastq_input2": {"id": "88e8bce11292b942", "src": "hda", "uuid": "112bba7e-85a7-4cb6-a168-9a9d77106502"}, "fastq_input1": {"id": "5d9ba2f78a7f41b7", "src": "hda", "uuid": "009f6ff0-4fa5-494b-8ae9-60fb408663f0"}}, "outputs": {"assembly_graph": {"id": "3050d1c53665af65", "src": "hda", "uuid": "a1afd437-bceb-410b-885b-04a250a70a30"}, "assembly": {"id": "6d6924cb01da3802", "src": "hda", "uuid": "095854ed-b831-4de3-8021-5fd5b341c2e2"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2023-10-03 14:29:55)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/95/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version             Status     Path                                   \n  spades.py       3.14.1              good       /usr/local/bin/spades.py               \n  racon                               not used                                          \n  makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb             \n  tblastn         2.12.0+             good       /usr/local/bin/tblastn                 \n  bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build           \n  bowtie2         2.4.4               good       /usr/local/bin/bowtie2                 \n  samtools        1.14                good       /usr/local/bin/samtools                \n  java            11.0.9.1-internal   good       /usr/local/bin/java                    \n  pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar\n  bcftools                            not used                                          \n\n\nChoosing k-mer range for assembly (2023-10-03 14:30:00)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2023-10-03 14:30:00)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/95/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/95/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.176+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/95/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/95/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 78\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/95/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/95/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 78 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.004     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.004     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.132    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.132    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.134    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.134    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.135    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.203    25M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.208    25M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.208    25M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.209    25M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.209    25M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.210    25M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.210    25M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 6.49995 Gb\n  0:00:00.210    25M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.430    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.430    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.491    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.491    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.540    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.541    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.542    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.542    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.543    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 6.49992 Gb\n  0:00:00.543    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.034     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:01.035     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:01.040    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.272    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.274    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.403    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.442    38M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.472    38M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:01.472    38M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.478    38M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.480    38M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:01.480    38M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:01.480    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:01.490    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:01.491    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:01.491    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:01.491    39M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:01.494    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:01.500    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:01.503    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:01.507    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.510    37M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.510    37M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.510    37M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.523    38M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:01.523    38M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.639    38M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:01.642    38M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:01.647    38M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:01.647    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:01.648    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:01.648    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:01.648    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.740    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:01.973    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.521    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:03.142    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.204    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:04.205    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:04.206    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:04.206    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:04.207    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:04.207    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:04.207    38M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:04.207    38M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:04.207    38M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:04.207    38M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:04.207    38M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:04.208    38M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:04.208    38M / \n..\nO    General                 (launcher.cpp              : 246)   Deduplicating paths\n  0:00:05.225    32M / 102M  INFO    General                 (launcher.cpp              : 250)   Paths deduplicated\n  0:00:05.225    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.225    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.225    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.225    32M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.225    32M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.226    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.226    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.226    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.226    32M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:05.226    32M / 102M  INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished\n  0:00:05.226    32M / 102M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output\n  0:00:05.226    32M / 102M  INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/before_rr.fasta\n  0:00:05.231    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa\n  0:00:05.231    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/assembly_graph.fastg\n  0:00:05.235    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds\n  0:00:05.235    32M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/final_contigs.fasta\n  0:00:05.239    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/final_contigs.paths\n  0:00:05.242    32M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/scaffolds.fasta\n  0:00:05.246    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/scaffolds.paths\n  0:00:05.250    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths\n  0:00:05.259    32M / 102M  INFO    General                 (pipeline.cpp              : 259)   SPAdes finished\n  0:00:05.261    32M / 102M  INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 5 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:05.220    33M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2023-10-03 14:31:00)\nFilter by read depth        (2023-10-03 14:31:00)\nFilter homopolymer loops    (2023-10-03 14:31:00)\nMerge all possible          (2023-10-03 14:31:00)\nNormalise read depths       (2023-10-03 14:31:00)\nRemove zero length segments (2023-10-03 14:31:00)\nSort link order             (2023-10-03 14:31:00)\nGraph cleaning finished     (2023-10-03 14:31:00)\nSaving /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2023-10-03 14:31:00)\nFilter by read depth        (2023-10-03 14:31:00)\nFilter homopolymer loops    (2023-10-03 14:31:00)\nMerge all possible          (2023-10-03 14:31:00)\nNormalise read depths       (2023-10-03 14:31:00)\nRemove zero length segments (2023-10-03 14:31:00)\nSort link order             (2023-10-03 14:31:00)\nGraph cleaning finished     (2023-10-03 14:31:00)\nSaving /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2023-10-03 14:31:00)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/\n\n\nDetermining graph multiplicity (2023-10-03 14:31:00)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/95/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2023-10-03 14:31:00)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/95/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2023-10-03 14:31:00)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2023-10-03 14:31:00)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2023-10-03 14:31:00)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/95/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2023-10-03 14:31:00)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2023-10-03 14:31:00)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/95/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nPolishing assembly with Pilon (2023-10-03 14:31:00)\n    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any\nremaining small-scale errors with the assembly.\n\nAligning reads to find appropriate insert size range...\n  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta\n  bowtie2 -1 /galaxy/server/database/jobs_directory/000/95/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/95/working/fq2.fastq -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.sam\nInsert size 1st percentile:  263\nInsert size 99th percentile: 450\n\nPilon polish round 1\n  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/95/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/95/working/fq2.fastq\n  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam\n  samtools index 1_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/95/working/pilon_polish --fix bases --frags 1_paired_alignments.bam\nNo Pilon changes\n\nSaving /galaxy/server/database/jobs_directory/000/95/working/005_polished.gfa\n\n\nRotating completed replicons (2023-10-03 14:31:09)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2023-10-03 14:31:29)\nSaving /galaxy/server/database/jobs_directory/000/95/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/95/working/assembly.fasta\n\n", "tool_stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "job_stdout": "", "job_stderr": "", "stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "stdout": "\nStarting Unicycler (2023-10-03 14:29:55)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/95/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version             Status     Path                                   \n  spades.py       3.14.1              good       /usr/local/bin/spades.py               \n  racon                               not used                                          \n  makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb             \n  tblastn         2.12.0+             good       /usr/local/bin/tblastn                 \n  bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build           \n  bowtie2         2.4.4               good       /usr/local/bin/bowtie2                 \n  samtools        1.14                good       /usr/local/bin/samtools                \n  java            11.0.9.1-internal   good       /usr/local/bin/java                    \n  pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar\n  bcftools                            not used                                          \n\n\nChoosing k-mer range for assembly (2023-10-03 14:30:00)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2023-10-03 14:30:00)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/95/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/95/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.176+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/95/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/95/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 78\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/95/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/95/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 78 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.004     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.004     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.132    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.132    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.134    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.134    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.135    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.203    25M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.208    25M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.208    25M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.209    25M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.209    25M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.210    25M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.210    25M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 6.49995 Gb\n  0:00:00.210    25M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.430    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.430    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.491    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.491    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.540    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.541    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.542    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.542    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.543    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 6.49992 Gb\n  0:00:00.543    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.034     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:01.035     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:01.040    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.272    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.274    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.403    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.442    38M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.472    38M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:01.472    38M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.478    38M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.480    38M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:01.480    38M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:01.480    38M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:01.490    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:01.491    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:01.491    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:01.491    39M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:01.494    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:01.500    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:01.503    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:01.507    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.510    37M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.510    37M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.510    37M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.523    38M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:01.523    38M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.639    38M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:01.642    38M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:01.647    38M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:01.647    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:01.648    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:01.648    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:01.648    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.740    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:01.973    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.521    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:03.142    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.204    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:04.205    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:04.206    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:04.206    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:04.207    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:04.207    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:04.207    38M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:04.207    38M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:04.207    38M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:04.207    38M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:04.207    38M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:04.208    38M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:04.208    38M / \n..\nO    General                 (launcher.cpp              : 246)   Deduplicating paths\n  0:00:05.225    32M / 102M  INFO    General                 (launcher.cpp              : 250)   Paths deduplicated\n  0:00:05.225    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.225    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.225    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.225    32M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.225    32M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.226    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.226    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.226    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.226    32M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:05.226    32M / 102M  INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished\n  0:00:05.226    32M / 102M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output\n  0:00:05.226    32M / 102M  INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/before_rr.fasta\n  0:00:05.231    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa\n  0:00:05.231    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/assembly_graph.fastg\n  0:00:05.235    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds\n  0:00:05.235    32M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/final_contigs.fasta\n  0:00:05.239    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/final_contigs.paths\n  0:00:05.242    32M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/scaffolds.fasta\n  0:00:05.246    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/scaffolds.paths\n  0:00:05.250    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths\n  0:00:05.259    32M / 102M  INFO    General                 (pipeline.cpp              : 259)   SPAdes finished\n  0:00:05.261    32M / 102M  INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 5 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:05.220    33M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2023-10-03 14:31:00)\nFilter by read depth        (2023-10-03 14:31:00)\nFilter homopolymer loops    (2023-10-03 14:31:00)\nMerge all possible          (2023-10-03 14:31:00)\nNormalise read depths       (2023-10-03 14:31:00)\nRemove zero length segments (2023-10-03 14:31:00)\nSort link order             (2023-10-03 14:31:00)\nGraph cleaning finished     (2023-10-03 14:31:00)\nSaving /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2023-10-03 14:31:00)\nFilter by read depth        (2023-10-03 14:31:00)\nFilter homopolymer loops    (2023-10-03 14:31:00)\nMerge all possible          (2023-10-03 14:31:00)\nNormalise read depths       (2023-10-03 14:31:00)\nRemove zero length segments (2023-10-03 14:31:00)\nSort link order             (2023-10-03 14:31:00)\nGraph cleaning finished     (2023-10-03 14:31:00)\nSaving /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2023-10-03 14:31:00)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/95/working/spades_assembly/\n\n\nDetermining graph multiplicity (2023-10-03 14:31:00)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/95/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2023-10-03 14:31:00)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/95/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2023-10-03 14:31:00)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2023-10-03 14:31:00)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2023-10-03 14:31:00)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/95/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2023-10-03 14:31:00)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2023-10-03 14:31:00)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/95/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nPolishing assembly with Pilon (2023-10-03 14:31:00)\n    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any\nremaining small-scale errors with the assembly.\n\nAligning reads to find appropriate insert size range...\n  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta\n  bowtie2 -1 /galaxy/server/database/jobs_directory/000/95/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/95/working/fq2.fastq -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.sam\nInsert size 1st percentile:  263\nInsert size 99th percentile: 450\n\nPilon polish round 1\n  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/95/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/95/working/fq2.fastq\n  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam\n  samtools index 1_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/95/working/pilon_polish --fix bases --frags 1_paired_alignments.bam\nNo Pilon changes\n\nSaving /galaxy/server/database/jobs_directory/000/95/working/005_polished.gfa\n\n\nRotating completed replicons (2023-10-03 14:31:09)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2023-10-03 14:31:29)\nSaving /galaxy/server/database/jobs_directory/000/95/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/95/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "94.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:31:29", "plugin": "core", "name": "end_epoch", "raw_value": "1696343489.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:29:55", "plugin": "core", "name": "start_epoch", "raw_value": "1696343395.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "unicycler/0.4.8.0-1", "has_data": true, "data": {"tool_id": "unicycler", "tool_version": "0.4.8.0", "test_index": 1, "time_seconds": 230.25946974754333, "inputs": {"paired_unpaired|fastq_input1": {"src": "hda", "id": "f2c4f7918042c16b"}, "paired_unpaired|fastq_input2": {"src": "hda", "id": "f83e11dbc44e3ac0"}, "paired_unpaired|fastq_input_selector": "paired", "long": {"src": "hda", "id": "2d6e853ff01375ca"}, "mode": "normal", "min_fasta_length": "100", "linear_seqs": "0", "spades|no_correct": true, "spades|min_kmer_frac": "0.2", "spades|max_kmer_frac": "0.95", "spades|kmer_count": "10", "spades|depth_filter": "0.25", "rotation|no_rotate": false, "rotation|start_gene_id": "90", "rotation|start_gene_cov": "95", "pilon|no_pilon": false, "pilon|min_polish_size": "1000", "graph_clean|min_component_size": "1000", "graph_clean|min_dead_end_size": "1000", "lr_align|scores": "3,-6,-5,-2"}, "job": {"model_class": "Job", "id": "415905817716727a", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:35:30.087929", "create_time": "2023-10-03T14:31:58.652780", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-shxxv", "command_line": "ln -s '/galaxy/server/database/objects/f/1/e/dataset_f1ee8441-d2c7-4c0e-87e6-ab8a0f4d0874.dat' fq1.fastq.gz && ln -s '/galaxy/server/database/objects/a/9/4/dataset_a9480699-fd48-4f5d-baca-b7bde4ebe4e6.dat' fq2.fastq.gz && ln -s '/galaxy/server/database/objects/5/1/3/dataset_513efcbd-6ee8-48dc-aa91-6f6a5bdf769f.dat' 'lr.fasta' && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -1 'fq1.fastq.gz' -2 'fq2.fastq.gz' -l lr.fasta --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --no_correct --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0'  --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"false\"}", "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"true\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "paired_unpaired": "{\"__current_case__\": 0, \"fastq_input1\": {\"values\": [{\"id\": 160, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 161, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}"}, "inputs": {"fastq_input1": {"id": "f2c4f7918042c16b", "src": "hda", "uuid": "f1ee8441-d2c7-4c0e-87e6-ab8a0f4d0874"}, "fastq_input2": {"id": "f83e11dbc44e3ac0", "src": "hda", "uuid": "a9480699-fd48-4f5d-baca-b7bde4ebe4e6"}, "long": {"id": "2d6e853ff01375ca", "src": "hda", "uuid": "513efcbd-6ee8-48dc-aa91-6f6a5bdf769f"}}, "outputs": {"assembly_graph": {"id": "f3b524175324118f", "src": "hda", "uuid": "ed453e73-ee0c-4419-8f29-1cee91ebb683"}, "assembly": {"id": "a97101034ad5024f", "src": "hda", "uuid": "032a709b-58f3-4b41-a5a8-b749490483cb"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2023-10-03 14:33:41)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq.gz -2 fq2.fastq.gz -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/99/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version             Status     Path                                   \n  spades.py       3.14.1              good       /usr/local/bin/spades.py               \n  racon           1.4.20              good       /usr/local/bin/racon                   \n  makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb             \n  tblastn         2.12.0+             good       /usr/local/bin/tblastn                 \n  bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build           \n  bowtie2         2.4.4               good       /usr/local/bin/bowtie2                 \n  samtools        1.14                good       /usr/local/bin/samtools                \n  java            11.0.9.1-internal   good       /usr/local/bin/java                    \n  pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar\n  bcftools                            not used                                          \n\n\nChoosing k-mer range for assembly (2023-10-03 14:33:46)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2023-10-03 14:33:46)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/99/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/99/working/fq2.fastq.gz\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.176+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/99/working/fq1.fastq.gz']\n      right reads: ['/galaxy/server/database/jobs_directory/000/99/working/fq2.fastq.gz']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 78\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/99/working/fq1.fastq.gz: max reads length: 251\n/galaxy/server/database/jobs_directory/000/99/working/fq2.fastq.gz: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 78 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.004     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.160    89M / 89M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.161    65M / 65M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.163    75M / 75M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.163    75M / 75M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.164    75M / 75M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.200    27M / 28M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.207    27M / 28M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.207    27M / 28M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.207    27M / 28M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.208    27M / 28M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.209    27M / 28M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.209    27M / 28M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 6.49994 Gb\n  0:00:00.209    27M / 28M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.425    44M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.425    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.483    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.484    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.520    45M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.520    45M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.521    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.522    45M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.522    45M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 6.49992 Gb\n  0:00:00.522    45M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.976     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:00.976     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:00.981    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.211    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.211    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.344    45M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.382    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.407    45M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:01.408    45M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.413    45M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.414    45M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:01.414    45M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:01.414    45M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:01.423    46M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:01.423    46M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:01.424    46M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:01.424    46M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:01.425    46M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:01.431    46M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:01.433    46M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:01.437    46M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.439    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.439    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.439    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.452    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:01.452    43M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.588    43M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:01.590    43M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:01.594    43M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:01.595    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:01.595    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:01.595    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:01.595    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.688    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:01.920    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.464    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:03.089    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.151    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:04.151    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:04.153    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:04.154    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:04.154    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:04.154    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:04.154    43M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:04.154    43M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:04.154    43M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:04.154    43M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:04.155    43M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:04.155    43M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n \n..\nry/000/99/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:05.386    35M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2023-10-03 14:34:46)\nFilter by read depth        (2023-10-03 14:34:46)\nFilter homopolymer loops    (2023-10-03 14:34:46)\nMerge all possible          (2023-10-03 14:34:46)\nNormalise read depths       (2023-10-03 14:34:46)\nRemove zero length segments (2023-10-03 14:34:46)\nSort link order             (2023-10-03 14:34:46)\nGraph cleaning finished     (2023-10-03 14:34:46)\nSaving /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2023-10-03 14:34:46)\nFilter by read depth        (2023-10-03 14:34:46)\nFilter homopolymer loops    (2023-10-03 14:34:46)\nMerge all possible          (2023-10-03 14:34:46)\nNormalise read depths       (2023-10-03 14:34:46)\nRemove zero length segments (2023-10-03 14:34:46)\nSort link order             (2023-10-03 14:34:46)\nGraph cleaning finished     (2023-10-03 14:34:46)\nSaving /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2023-10-03 14:34:46)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/\n\n\nDetermining graph multiplicity (2023-10-03 14:34:46)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/99/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2023-10-03 14:34:46)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/99/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2023-10-03 14:34:46)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2023-10-03 14:34:46)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2023-10-03 14:34:46)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2023-10-03 14:34:46)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/99/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/99/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2023-10-03 14:34:46)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/99/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times\n(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2023-10-03 14:34:46)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2023-10-03 14:34:46)\n1\t5386\t5\t5077\t-\t1\t5386\t8\t5080\t5072\t5072\t255\tcm:i:945\n1\t5386\t5093\t5384\t-\t1\t5386\t5087\t5378\t291\t291\t255\tcm:i:52\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2023-10-03 14:34:46)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5077,-,1,8,5080\n    5093,5384,-,1,5087,5378\nReference ranges:\n    1-: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 5076 points, score=5074.000394 (good)\n    line 2: 292 points, score=290.006826 (good)\nAll Seqan alignments (time to align = 0.069 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\n\n\nRead alignment summary (2023-10-03 14:34:46)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nDeleting /galaxy/server/database/jobs_directory/000/99/working/read_alignment/\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2023-10-03 14:34:46)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2023-10-03 14:34:46)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/99/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2023-10-03 14:34:46)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2023-10-03 14:34:46)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/99/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nPolishing assembly with Pilon (2023-10-03 14:34:46)\n    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any\nremaining small-scale errors with the assembly.\n\nAligning reads to find appropriate insert size range...\n  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta\n  bowtie2 -1 /galaxy/server/database/jobs_directory/000/99/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/99/working/fq2.fastq.gz -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.sam\nInsert size 1st percentile:  263\nInsert size 99th percentile: 450\n\nPilon polish round 1\n  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/99/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/99/working/fq2.fastq.gz\n  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam\n  samtools index 1_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/99/working/pilon_polish --fix bases --frags 1_paired_alignments.bam\nNo Pilon changes\n\nPilon polish round 2\n  bowtie2-build 2_polish_input.fasta 2_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 2_polish_input.fasta -S 2_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/99/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/99/working/fq2.fastq.gz\n  samtools sort -@ 4 -o 2_paired_alignments.bam -O bam -T temp 2_paired_alignments.sam\n  samtools index 2_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 2_polish_input.fasta --changes --output 2_pilon --outdir /galaxy/server/database/jobs_directory/000/99/working/pilon_polish --fix all --frags 2_paired_alignments.bam\nNo Pilon changes\n\nSaving /galaxy/server/database/jobs_directory/000/99/working/005_polished.gfa\n\n\nRotating completed replicons (2023-10-03 14:35:02)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2023-10-03 14:35:19)\nSaving /galaxy/server/database/jobs_directory/000/99/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/99/working/assembly.fasta\n\n", "tool_stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "job_stdout": "", "job_stderr": "", "stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "stdout": "\nStarting Unicycler (2023-10-03 14:33:41)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided both short and long reads, Unicycler will perform a hybrid assembly.\nIt will first use SPAdes to make a short-read assembly graph, and then it will\nuse various methods to scaffold that graph with the long reads.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq.gz -2 fq2.fastq.gz -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/99/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version             Status     Path                                   \n  spades.py       3.14.1              good       /usr/local/bin/spades.py               \n  racon           1.4.20              good       /usr/local/bin/racon                   \n  makeblastdb     2.12.0+             good       /usr/local/bin/makeblastdb             \n  tblastn         2.12.0+             good       /usr/local/bin/tblastn                 \n  bowtie2-build   2.4.4               good       /usr/local/bin/bowtie2-build           \n  bowtie2         2.4.4               good       /usr/local/bin/bowtie2                 \n  samtools        1.14                good       /usr/local/bin/samtools                \n  java            11.0.9.1-internal   good       /usr/local/bin/java                    \n  pilon           1.24                good       /usr/local/share/pilon-1.24-0/pilon.jar\n  bcftools                            not used                                          \n\n\nChoosing k-mer range for assembly (2023-10-03 14:33:46)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2023-10-03 14:33:46)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/99/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/99/working/fq2.fastq.gz\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.176+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/99/working/fq1.fastq.gz']\n      right reads: ['/galaxy/server/database/jobs_directory/000/99/working/fq2.fastq.gz']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 78\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/99/working/fq1.fastq.gz: max reads length: 251\n/galaxy/server/database/jobs_directory/000/99/working/fq2.fastq.gz: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 78 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.004     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.160    89M / 89M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.161    65M / 65M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.163    75M / 75M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.163    75M / 75M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.164    75M / 75M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.200    27M / 28M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.207    27M / 28M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.207    27M / 28M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.207    27M / 28M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.208    27M / 28M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.209    27M / 28M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.209    27M / 28M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 6.49994 Gb\n  0:00:00.209    27M / 28M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.425    44M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.425    44M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.483    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.484    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.520    45M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.520    45M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.521    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.522    45M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.522    45M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 6.49992 Gb\n  0:00:00.522    45M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:00.976     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:00.976     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:00.981    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.211    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.211    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.344    45M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.382    45M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.407    45M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:01.408    45M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.413    45M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.414    45M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:01.414    45M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:01.414    45M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:01.423    46M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:01.423    46M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:01.424    46M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:01.424    46M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:01.425    46M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:01.431    46M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:01.433    46M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:01.437    46M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.439    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.439    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.439    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.452    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:01.452    43M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.588    43M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:01.590    43M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:01.594    43M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:01.595    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:01.595    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:01.595    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:01.595    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.688    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:01.920    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.464    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:03.089    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.151    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:04.151    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:04.153    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:04.154    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:04.154    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:04.154    43M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:04.154    43M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:04.154    43M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:04.154    43M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:04.154    43M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:04.155    43M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:04.155    43M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n \n..\nry/000/99/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:05.386    35M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2023-10-03 14:34:46)\nFilter by read depth        (2023-10-03 14:34:46)\nFilter homopolymer loops    (2023-10-03 14:34:46)\nMerge all possible          (2023-10-03 14:34:46)\nNormalise read depths       (2023-10-03 14:34:46)\nRemove zero length segments (2023-10-03 14:34:46)\nSort link order             (2023-10-03 14:34:46)\nGraph cleaning finished     (2023-10-03 14:34:46)\nSaving /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2023-10-03 14:34:46)\nFilter by read depth        (2023-10-03 14:34:46)\nFilter homopolymer loops    (2023-10-03 14:34:46)\nMerge all possible          (2023-10-03 14:34:46)\nNormalise read depths       (2023-10-03 14:34:46)\nRemove zero length segments (2023-10-03 14:34:46)\nSort link order             (2023-10-03 14:34:46)\nGraph cleaning finished     (2023-10-03 14:34:46)\nSaving /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2023-10-03 14:34:46)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/99/working/spades_assembly/\n\n\nDetermining graph multiplicity (2023-10-03 14:34:46)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/99/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2023-10-03 14:34:46)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/99/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2023-10-03 14:34:46)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2023-10-03 14:34:46)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nLoading reads (2023-10-03 14:34:46)\n\r0 / 1 (0.0%)\r1 / 1 (100.0%) - 5,386 bp\r1 / 1 (100.0%) - 5,386 bp\n\n\nAssembling contigs and long reads with miniasm (2023-10-03 14:34:46)\n    Unicycler uses miniasm to construct a string graph assembly using both the\nshort read contigs and the long reads. It will then use the resulting string\ngraph to produce bridges between contigs. This method requires decent coverage\nof long reads and therefore may not be fruitful if long reads are sparse.\nHowever, it does not rely on the short read assembly graph having good\nconnectivity and is able to bridge an assembly graph even when it contains many\ndead ends.\n    Unicycler uses two types of \"reads\" as assembly input: anchor contigs from\nthe short-read assembly and actual long reads which overlap two or more of\nthese contigs. It then assembles them with miniasm.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/99/working/miniasm_assembly/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\nSaving to /galaxy/server/database/jobs_directory/000/99/working/miniasm_assembly/01_assembly_reads.fastq:\n  0 short-read contigs\n  1 long reads\n\nFinding overlaps with minimap... failed\nAssembling reads with miniasm... empty result\n\n\nCreating simple long read bridges (2023-10-03 14:34:46)\n    Unicycler uses long read alignments (from minimap) to resolve simple repeat\nstructures in the graph. This takes care of some \"low-hanging fruit\" of the\ngraph simplification.\n\nAligning long reads to graph using minimap\nSaving /galaxy/server/database/jobs_directory/000/99/working/simple_bridging/all_segments.fasta\n1\t5386\t3\t5081\t-\t1\t5386\t4\t5082\t5078\t5078\t255\tcm:i:1134\n1\t5386\t5090\t5383\t-\t1\t5386\t5088\t5381\t293\t293\t255\tcm:i:63\nNumber of minimap alignments: 1\n\n    Two-way junctions are defined as cases where two graph contigs (A and B)\njoin together (C) and then split apart again (D and E). This usually represents\na simple 2-copy repeat, and there are two possible options for its resolution:\n(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such a\njunction gets to \"vote\" for option 1, option 2 or neither. Unicycler creates a\nbridge at each junction for the most voted for option.\n\nNo suitable two-way junctions present\n\n    Simple loops are parts of the graph where two contigs (A and B) are\nconnected via a repeat (C) which loops back to itself (via D). It is possible\nto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times\n(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is the\ncorrect number of times through. In this step, such reads are found and each is\naligned against alternative loop counts. A reads casts its \"vote\" for the loop\ncount it agrees best with, and Unicycler creates a bridge using the most voted\nfor count.\n\nNo suitable simple loops present\n\n\nDetermining low score threshold (2023-10-03 14:34:46)\n    Before conducting semi-global alignment of the long reads to the assembly\ngraph, Unicycler must determine a minimum alignment score threshold such that\nnonsense alignments are excluded. To choose a threshold automatically, it\nexamines alignments between random sequences and selects a score a few standard\ndeviations above the mean.\n\nAutomatically choosing a threshold using random alignment scores.\n\nRandom alignment mean score: 61.66\n         standard deviation:  1.31\n        Low score threshold: 61.66 + (7 x 1.31) = 70.86\n\n\nAligning reads with minimap (2023-10-03 14:34:46)\n1\t5386\t5\t5077\t-\t1\t5386\t8\t5080\t5072\t5072\t255\tcm:i:945\n1\t5386\t5093\t5384\t-\t1\t5386\t5087\t5378\t291\t291\t255\tcm:i:52\n\nDone! 1 out of 1 reads aligned\n\n\nAligning reads (2023-10-03 14:34:46)\n1/1: 1 (5386 bp)\nminimap alignments:\n    5,5077,-,1,8,5080\n    5093,5384,-,1,5087,5378\nReference ranges:\n    1-: 0 - 5386\nRange: 1: 0 - 5386\n    common 10-mers: 5464\n    line 1: 5076 points, score=5074.000394 (good)\n    line 2: 292 points, score=290.006826 (good)\nAll Seqan alignments (time to align = 0.069 s):\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\nFinal alignments:\n  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity\n         1          0     5085           0      5085       -      15255        100.00   100.00%\n         1       5085     5386        5085      5386       -        903        100.00   100.00%\n\n\nRead alignment summary (2023-10-03 14:34:46)\nTotal read count:            1\nFully aligned reads:         1\nPartially aligned reads:     0\nUnaligned reads:             0\nTotal bases aligned:     5,386 bp\nMean alignment identity:   100.0%\n\nDeleting /galaxy/server/database/jobs_directory/000/99/working/read_alignment/\n\nSetting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00\n\n\nBuilding long read bridges (2023-10-03 14:34:46)\n    Unicycler uses the long read alignments to produce bridges between anchor\nsegments. These bridges can be formed using as few as one long read, giving\nUnicycler the ability to bridge the graph even when long-read depth is low.\n\nMedian depth of 10 longest contigs: 1.00\n\n                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path           \n     Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  Quality\n\n\nApplying bridges (2023-10-03 14:34:46)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/99/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2023-10-03 14:34:46)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2023-10-03 14:34:46)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/99/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nPolishing assembly with Pilon (2023-10-03 14:34:46)\n    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any\nremaining small-scale errors with the assembly.\n\nAligning reads to find appropriate insert size range...\n  bowtie2-build 0_insert_size_check.fasta 0_insert_size_check.fasta\n  bowtie2 -1 /galaxy/server/database/jobs_directory/000/99/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/99/working/fq2.fastq.gz -x 0_insert_size_check.fasta --fast --threads 4 -I 0 -X 5000 -S 0_alignments.sam\nInsert size 1st percentile:  263\nInsert size 99th percentile: 450\n\nPilon polish round 1\n  bowtie2-build 1_polish_input.fasta 1_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 1_polish_input.fasta -S 1_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/99/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/99/working/fq2.fastq.gz\n  samtools sort -@ 4 -o 1_paired_alignments.bam -O bam -T temp 1_paired_alignments.sam\n  samtools index 1_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 1_polish_input.fasta --changes --output 1_pilon --outdir /galaxy/server/database/jobs_directory/000/99/working/pilon_polish --fix bases --frags 1_paired_alignments.bam\nNo Pilon changes\n\nPilon polish round 2\n  bowtie2-build 2_polish_input.fasta 2_polish_input.fasta\n  bowtie2 --local --very-sensitive-local --threads 4 -I 263 -X 450 -x 2_polish_input.fasta -S 2_paired_alignments.sam -1 /galaxy/server/database/jobs_directory/000/99/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/99/working/fq2.fastq.gz\n  samtools sort -@ 4 -o 2_paired_alignments.bam -O bam -T temp 2_paired_alignments.sam\n  samtools index 2_paired_alignments.bam\n  java -jar /usr/local/share/pilon-1.24-0/pilon.jar --genome 2_polish_input.fasta --changes --output 2_pilon --outdir /galaxy/server/database/jobs_directory/000/99/working/pilon_polish --fix all --frags 2_paired_alignments.bam\nNo Pilon changes\n\nSaving /galaxy/server/database/jobs_directory/000/99/working/005_polished.gfa\n\n\nRotating completed replicons (2023-10-03 14:35:02)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2023-10-03 14:35:19)\nSaving /galaxy/server/database/jobs_directory/000/99/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/99/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "98.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:35:19", "plugin": "core", "name": "end_epoch", "raw_value": "1696343719.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:33:41", "plugin": "core", "name": "start_epoch", "raw_value": "1696343621.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "unicycler/0.4.8.0-2", "has_data": true, "data": {"tool_id": "unicycler", "tool_version": "0.4.8.0", "test_index": 2, "time_seconds": 209.33307147026062, "inputs": {"paired_unpaired|fastq_input1": {"src": "hdca", "id": "9a0ee1dcdbdfe998"}, "paired_unpaired|fastq_input_selector": "paired_collection", "mode": "normal", "min_fasta_length": "100", "linear_seqs": "0", "spades|no_correct": true, "spades|min_kmer_frac": "0.2", "spades|max_kmer_frac": "0.95", "spades|kmer_count": "10", "spades|depth_filter": "0.25", "rotation|no_rotate": false, "rotation|start_gene_id": "90", "rotation|start_gene_cov": "95", "pilon|no_pilon": true, "pilon|min_polish_size": "1000", "graph_clean|min_component_size": "1000", "graph_clean|min_dead_end_size": "1000", "lr_align|scores": "3,-6,-5,-2"}, "job": {"model_class": "Job", "id": "a9c566fd17aa92bc", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:38:59.251737", "create_time": "2023-10-03T14:35:44.030153", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-n4sc4", "command_line": "ln -s '/galaxy/server/database/objects/e/f/0/dataset_ef0a1cef-feca-448c-8458-d20590dc6fb0.dat' fq1.fastq && ln -s '/galaxy/server/database/objects/7/6/4/dataset_764be727-5824-487d-975a-850f4edfd983.dat' fq2.fastq && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -1 'fq1.fastq' -2 'fq2.fastq' --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --no_correct --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0' --no_pilon --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"true\"}", "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"true\"}", "min_anchor_seg_len": "\"\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "long": null, "paired_unpaired": "{\"__current_case__\": 1, \"fastq_input1\": {\"values\": [{\"id\": 20, \"src\": \"hdca\"}]}, \"fastq_input_selector\": \"paired_collection\"}"}, "inputs": {"fastq_input11": {"id": "629255a2f7340faf", "src": "hda", "uuid": "ef0a1cef-feca-448c-8458-d20590dc6fb0"}, "fastq_input12": {"id": "c8f5ebb654756bb6", "src": "hda", "uuid": "764be727-5824-487d-975a-850f4edfd983"}}, "outputs": {"assembly_graph": {"id": "220064ab9d4b027a", "src": "hda", "uuid": "b3581182-9ede-4dfc-9e4c-dd5b6fca4bd7"}, "assembly": {"id": "b0f08082f63098c7", "src": "hda", "uuid": "f3a9ecba-9949-4d83-80d4-dfbb9c25fab8"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2023-10-03 14:37:26)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --no_pilon --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/102/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py       3.14.1    good       /usr/local/bin/spades.py  \n  racon                     not used                             \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nChoosing k-mer range for assembly (2023-10-03 14:37:26)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2023-10-03 14:37:27)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/102/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/102/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.176+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/102/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/102/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 78\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/102/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/102/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 78 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.004     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.137    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.137    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.139    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.139    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.140    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.174    25M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.183    25M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.184    25M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.184    25M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.185    25M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.185    25M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.186    25M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 6.49995 Gb\n  0:00:00.186    25M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.432    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.433    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.496    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.497    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.537    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.538    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.538    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.539    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.539    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 6.49992 Gb\n  0:00:00.539    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.067     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:01.067     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:01.073    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.308    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.309    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.429    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.464    39M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.489    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:01.490    39M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.497    39M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.498    39M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:01.498    39M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:01.498    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:01.507    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:01.508    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:01.508    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:01.508    39M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:01.510    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:01.515    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:01.518    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:01.523    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.525    38M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.525    38M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.526    38M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.538    38M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:01.538    38M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.650    38M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:01.653    38M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:01.657    38M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:01.657    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:01.658    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:01.658    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:01.658    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.751    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:01.982    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.530    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:03.146    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.213    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:04.214    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:04.215    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:04.215    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:04.216    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:04.216    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:04.216    38M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:04.216    38M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:04.216    38M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:04.216    38M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:04.217    38M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:04.217    38M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:04.217    38M / 57M   INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:04.217    38M / 57M   INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge r\n..\n overlaps\n  0:00:05.248    33M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.248    33M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.248    33M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.249    33M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.249    33M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.249    33M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:05.249    33M / 102M  INFO    General                 (launcher.cpp              : 439)   Closing gaps in paths\n  0:00:05.249    32M / 102M  INFO    General                 (launcher.cpp              : 467)   Gap closing completed\n  0:00:05.250    32M / 102M  INFO    General                 (launcher.cpp              : 296)   Traversing tandem repeats\n  0:00:05.250    32M / 102M  INFO    General                 (launcher.cpp              : 306)   Traversed 0 loops\n  0:00:05.250    32M / 102M  INFO    General                 (launcher.cpp              : 244)   Finalizing paths\n  0:00:05.250    32M / 102M  INFO    General                 (launcher.cpp              : 246)   Deduplicating paths\n  0:00:05.250    32M / 102M  INFO    General                 (launcher.cpp              : 250)   Paths deduplicated\n  0:00:05.250    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.250    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.251    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.251    32M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.251    32M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.251    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.251    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.251    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.251    32M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:05.252    32M / 102M  INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished\n  0:00:05.252    32M / 102M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output\n  0:00:05.252    32M / 102M  INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/before_rr.fasta\n  0:00:05.257    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa\n  0:00:05.257    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/assembly_graph.fastg\n  0:00:05.262    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds\n  0:00:05.263    32M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/final_contigs.fasta\n  0:00:05.267    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/final_contigs.paths\n  0:00:05.271    32M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/scaffolds.fasta\n  0:00:05.276    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/scaffolds.paths\n  0:00:05.279    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths\n  0:00:05.287    32M / 102M  INFO    General                 (pipeline.cpp              : 259)   SPAdes finished\n  0:00:05.289    32M / 102M  INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 5 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:05.245    33M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2023-10-03 14:38:26)\nFilter by read depth        (2023-10-03 14:38:26)\nFilter homopolymer loops    (2023-10-03 14:38:26)\nMerge all possible          (2023-10-03 14:38:26)\nNormalise read depths       (2023-10-03 14:38:26)\nRemove zero length segments (2023-10-03 14:38:26)\nSort link order             (2023-10-03 14:38:26)\nGraph cleaning finished     (2023-10-03 14:38:26)\nSaving /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2023-10-03 14:38:26)\nFilter by read depth        (2023-10-03 14:38:26)\nFilter homopolymer loops    (2023-10-03 14:38:26)\nMerge all possible          (2023-10-03 14:38:26)\nNormalise read depths       (2023-10-03 14:38:26)\nRemove zero length segments (2023-10-03 14:38:26)\nSort link order             (2023-10-03 14:38:26)\nGraph cleaning finished     (2023-10-03 14:38:26)\nSaving /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2023-10-03 14:38:26)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/\n\n\nDetermining graph multiplicity (2023-10-03 14:38:26)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/102/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2023-10-03 14:38:26)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/102/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2023-10-03 14:38:26)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2023-10-03 14:38:26)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2023-10-03 14:38:26)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/102/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2023-10-03 14:38:26)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2023-10-03 14:38:26)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/102/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2023-10-03 14:38:26)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2023-10-03 14:38:48)\nSaving /galaxy/server/database/jobs_directory/000/102/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/102/working/assembly.fasta\n\n", "tool_stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "job_stdout": "", "job_stderr": "", "stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "stdout": "\nStarting Unicycler (2023-10-03 14:37:26)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --no_correct --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --no_pilon --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/102/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py       3.14.1    good       /usr/local/bin/spades.py  \n  racon                     not used                             \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nChoosing k-mer range for assembly (2023-10-03 14:37:26)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2023-10-03 14:37:27)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\n== Warning ==  No assembly mode was specified! If you intend to assemble high-coverage multi-cell/isolate data, use '--isolate' option.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly -k 27,47,63,77,89,99,107,115,121,127 --threads 4 --only-assembler -1 /galaxy/server/database/jobs_directory/000/102/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/102/working/fq2.fastq\n\nSystem information:\n  SPAdes version: 3.14.1\n  Python version: 3.9.9\n  OS: Linux-5.10.176+-x86_64-with-glibc2.28\nOutput dir: /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Standard mode\n  For multi-cell/isolate data we recommend to use '--isolate' option; for single-cell MDA data use '--sc'; for metagenomic data use '--meta'; for RNA-Seq use '--rna'.\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/galaxy/server/database/jobs_directory/000/102/working/fq1.fastq']\n      right reads: ['/galaxy/server/database/jobs_directory/000/102/working/fq2.fastq']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27, 47, 63, 77, 89, 99, 107, 115, 121, 127]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/tmp\n  Threads: 4\n  Memory limit (in Gb): 78\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/spades.log\n/galaxy/server/database/jobs_directory/000/102/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/102/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K27/configs/config.info\nWARNING: Try to use logger before create one. Level=INFO. Message=Additional contigs is tmp_contigs.fasta\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  75)   Loaded config from /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K27/configs/config.info\n  0:00:00.000     5M / 20M   INFO    General                 (memory_limit.cpp          :  49)   Memory limit set to 78 Gb\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  85)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  86)   Maximum k-mer length: 128\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  87)   Assembling dataset (/galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/dataset.info) with K=27\n  0:00:00.000     5M / 20M   INFO    General                 (main.cpp                  :  88)   Maximum # of threads to use (adjusted due to OMP capabilities): 4\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 194)   SPAdes started\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 201)   Starting from stage: read_conversion\n  0:00:00.000     5M / 20M   INFO    General                 (pipeline.cpp              : 207)   Two-step RR enabled: 0\n  0:00:00.000     5M / 20M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Binary Read Conversion\n  0:00:00.004     5M / 20M   INFO    General                 (read_converter.cpp        :  72)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     5M / 20M   INFO    General                 (read_converter.cpp        :  73)   Converting paired reads\n  0:00:00.137    87M / 87M   INFO    General                 (binary_converter.cpp      : 111)   7925 reads written\n  0:00:00.137    63M / 63M   INFO    General                 (read_converter.cpp        :  81)   Converting single reads\n  0:00:00.139    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.139    73M / 73M   INFO    General                 (read_converter.cpp        :  87)   Converting merged reads\n  0:00:00.140    73M / 73M   INFO    General                 (binary_converter.cpp      : 111)   0 reads written\n  0:00:00.174    25M / 29M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == de Bruijn graph construction\n  0:00:00.183    25M / 29M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.184    25M / 29M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.184    25M / 29M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == k+1-mer counting\n  0:00:00.185    25M / 29M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 16 files using 4 threads. This might take a while.\n  0:00:00.185    25M / 29M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.186    25M / 29M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 6.49995 Gb\n  0:00:00.186    25M / 29M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 4194304\n  0:00:00.432    42M / 57M   INFO    General                 (kmer_splitters.hpp        : 293)   Used 31700 reads\n  0:00:00.433    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:00.496    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.497    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:00.537    42M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Extension index construction\n  0:00:00.538    42M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:00.538    42M / 57M   INFO    General                 (kmer_index_builder.hpp    : 117)   Splitting kmer instances into 64 files using 4 threads. This might take a while.\n  0:00:00.539    42M / 57M   INFO    General                 (file_limit.hpp            :  32)   Open file limit set to 1048576\n  0:00:00.539    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  89)   Memory available for splitting buffers: 6.49992 Gb\n  0:00:00.539    42M / 57M   INFO    General                 (kmer_splitters.hpp        :  97)   Using cell size of 1048576\n  0:00:01.067     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 364)   Processed 35249 kmers\n  0:00:01.067     3G / 3G    INFO    General                 (kmer_splitters.hpp        : 369)   Used 35249 kmers.\n  0:00:01.073    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 120)   Starting k-mer counting.\n  0:00:01.308    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 127)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.309    43M / 57M   INFO    General                 (kmer_index_builder.hpp    : 133)   Merging temporary buckets.\n  0:00:01.429    43M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.464    39M / 57M   INFO    General                 (kmer_index_builder.hpp    : 150)   Merging final buckets.\n  0:00:01.489    39M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 24880 bytes occupied (5.7676 bits per kmer).\n  0:00:01.490    39M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build:  99)   Building k-mer extensions from k+1-mers\n  0:00:01.497    39M / 57M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 103)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.498    39M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Early tip clipping\n  0:00:01.498    39M / 57M   INFO    General                 (construction.cpp          : 293)   Early tip clipper length bound set as (RL - K)\n  0:00:01.498    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  28)   Early tip clipping\n  0:00:01.507    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  63)   #tipped junctions: 404\n  0:00:01.508    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  74)   Clipped tips: 413\n  0:00:01.508    39M / 57M   INFO   Early tip clipping       (early_simplification.hpp  :  30)   7414 28-mers were removed by early tip clipper\n  0:00:01.508    39M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Condensing graph\n  0:00:01.510    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 354)   Extracting unbranching paths\n  0:00:01.515    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 373)   Extracting unbranching paths finished. 2055 sequences extracted\n  0:00:01.518    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 309)   Collecting perfect loops\n  0:00:01.523    39M / 57M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 342)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.525    38M / 57M   INFO    General                 (stage.cpp                 : 113)   PROCEDURE == Filling coverage indices (PHM)\n  0:00:01.525    38M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 301)   Building kmer index\n  0:00:01.526    38M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 314)   Building perfect hash indices\n  0:00:01.538    38M / 57M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 336)   Index built. Total 18528 bytes occupied (4.20506 bits per kmer).\n  0:00:01.538    38M / 57M   INFO    General                 (construction.cpp          : 429)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.650    38M / 57M   INFO    General                 (construction.cpp          : 549)   Filling coverage and flanking coverage from PHM\n  0:00:01.653    38M / 57M   INFO    General                 (construction.cpp          : 505)   Processed 4110 edges\n  0:00:01.657    38M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == EC Threshold Finding\n  0:00:01.657    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 181)   Kmer coverage valley at: 7\n  0:00:01.658    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 201)   K-mer histogram maximum: 695\n  0:00:01.658    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 237)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:01.658    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 259)   Fitting coverage model\n  0:00:01.751    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 2\n  0:00:01.982    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 4\n  0:00:02.530    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 8\n  0:00:03.146    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 16\n  0:00:04.213    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 295)   ... iteration 32\n  0:00:04.214    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 309)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:04.215    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 334)   Probability of erroneous kmer at valley: 1\n  0:00:04.215    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 358)   Preliminary threshold calculated as: 275\n  0:00:04.216    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 362)   Threshold adjusted to: 275\n  0:00:04.216    38M / 57M   INFO    General                 (kmer_coverage_model.cpp   : 375)   Estimated genome size (ignoring repeats): 5132\n  0:00:04.216    38M / 57M   INFO    General                 (genomic_info_filler.cpp   :  53)   Mean coverage was calculated as 671.577\n  0:00:04.216    38M / 57M   INFO    General                 (genomic_info_filler.cpp   :  68)   EC coverage threshold value was calculated as 275\n  0:00:04.216    38M / 57M   INFO    General                 (genomic_info_filler.cpp   :  69)   Trusted kmer low bound: 0\n  0:00:04.216    38M / 57M   INFO   StageManager             (stage.cpp                 : 166)   STAGE == Raw Simplification\n  0:00:04.217    38M / 57M   INFO    General                 (simplification.cpp        : 128)   PROCEDURE == InitialCleaning\n  0:00:04.217    38M / 57M   INFO    General                 (graph_simplification.hpp  : 671)   Flanking coverage based disconnection disabled\n  0:00:04.217    38M / 57M   INFO   Simplification           (parallel_processing.hpp   : 165)   Running Self conjugate edge remover\n  0:00:04.217    38M / 57M   INFO   Simplification           (parallel_processing.hpp   : 167)   Self conjugate edge r\n..\n overlaps\n  0:00:05.248    33M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.248    33M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.248    33M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.249    33M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.249    33M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.249    33M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:05.249    33M / 102M  INFO    General                 (launcher.cpp              : 439)   Closing gaps in paths\n  0:00:05.249    32M / 102M  INFO    General                 (launcher.cpp              : 467)   Gap closing completed\n  0:00:05.250    32M / 102M  INFO    General                 (launcher.cpp              : 296)   Traversing tandem repeats\n  0:00:05.250    32M / 102M  INFO    General                 (launcher.cpp              : 306)   Traversed 0 loops\n  0:00:05.250    32M / 102M  INFO    General                 (launcher.cpp              : 244)   Finalizing paths\n  0:00:05.250    32M / 102M  INFO    General                 (launcher.cpp              : 246)   Deduplicating paths\n  0:00:05.250    32M / 102M  INFO    General                 (launcher.cpp              : 250)   Paths deduplicated\n  0:00:05.250    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 295)   Removing overlaps\n  0:00:05.250    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 298)   Sorting paths\n  0:00:05.251    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 305)   Marking overlaps\n  0:00:05.251    32M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 130)   Marking start/end overlaps\n  0:00:05.251    32M / 102M  INFO   OverlapRemover           (pe_resolver.hpp           : 133)   Marking remaining overlaps\n  0:00:05.251    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 308)   Splitting paths\n  0:00:05.251    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 313)   Deduplicating paths\n  0:00:05.251    32M / 102M  INFO   PEResolver               (pe_resolver.hpp           : 315)   Overlaps removed\n  0:00:05.251    32M / 102M  INFO    General                 (launcher.cpp              : 267)   Paths finalized\n  0:00:05.252    32M / 102M  INFO    General                 (launcher.cpp              : 596)   ExSPAnder repeat resolving tool finished\n  0:00:05.252    32M / 102M  INFO   StageManager             (stage.cpp                 : 166)   STAGE == Contig Output\n  0:00:05.252    32M / 102M  INFO    General                 (contig_output.hpp         :  21)   Outputting contigs to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/before_rr.fasta\n  0:00:05.257    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 146)   Writing GFA graph to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa\n  0:00:05.257    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 160)   Outputting FastG graph to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/assembly_graph.fastg\n  0:00:05.262    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 190)   Breaking scaffolds\n  0:00:05.263    32M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/final_contigs.fasta\n  0:00:05.267    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/final_contigs.paths\n  0:00:05.271    32M / 102M  INFO    General                 (contig_output_stage.cpp   :  95)   Outputting contigs to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/scaffolds.fasta\n  0:00:05.276    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 101)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/scaffolds.paths\n  0:00:05.279    32M / 102M  INFO    General                 (contig_output_stage.cpp   : 108)   Populating GFA with scaffold paths\n  0:00:05.287    32M / 102M  INFO    General                 (pipeline.cpp              : 259)   SPAdes finished\n  0:00:05.289    32M / 102M  INFO    General                 (main.cpp                  : 107)   Assembling time: 0 hours 0 minutes 5 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished WITH WARNINGS!\n=== Error correction and assembling warnings:\n * 0:00:05.245    33M / 102M  WARN    General                 (launcher.cpp              : 172)   Your data seems to have high uniform coverage depth. It is strongly recommended to use --isolate option.\n======= Warnings saved to /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/warnings.log\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/assembly/spades.log\nThank you for using SPAdes!\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k127 graph\nRepair multi way junctions  (2023-10-03 14:38:26)\nFilter by read depth        (2023-10-03 14:38:26)\nFilter homopolymer loops    (2023-10-03 14:38:26)\nMerge all possible          (2023-10-03 14:38:26)\nNormalise read depths       (2023-10-03 14:38:26)\nRemove zero length segments (2023-10-03 14:38:26)\nSort link order             (2023-10-03 14:38:26)\nGraph cleaning finished     (2023-10-03 14:38:26)\nSaving /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2023-10-03 14:38:26)\nFilter by read depth        (2023-10-03 14:38:26)\nFilter homopolymer loops    (2023-10-03 14:38:26)\nMerge all possible          (2023-10-03 14:38:26)\nNormalise read depths       (2023-10-03 14:38:26)\nRemove zero length segments (2023-10-03 14:38:26)\nSort link order             (2023-10-03 14:38:26)\nGraph cleaning finished     (2023-10-03 14:38:26)\nSaving /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/k127_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2023-10-03 14:38:26)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27                                                                                 \n   47                                                                                 \n   63                                                                                 \n   77                                                                                 \n   89                                                                                 \n   99                                                                                 \n  107                                                                                 \n  115                                                                                 \n  121                                                                                 \n  127         1       1          5,513   5,513            5,513           0   5.00e-01 <-best\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/102/working/spades_assembly/\n\n\nDetermining graph multiplicity (2023-10-03 14:38:26)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\nSaving /galaxy/server/database/jobs_directory/000/102/working/001_best_spades_graph.gfa\n\n\nCleaning graph (2023-10-03 14:38:26)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        63        64\nGraph overlaps removed\n\nSaving /galaxy/server/database/jobs_directory/000/102/working/002_overlaps_removed.gfa\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2023-10-03 14:38:26)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2023-10-03 14:38:26)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2023-10-03 14:38:26)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -> end   Path   Quality   Result\n\nSaving /galaxy/server/database/jobs_directory/000/102/working/003_bridges_applied.gfa\n\n\nCleaning up leftover segments (2023-10-03 14:38:26)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2023-10-03 14:38:26)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\nSaving /galaxy/server/database/jobs_directory/000/102/working/004_final_clean.gfa\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2023-10-03 14:38:26)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.9/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2023-10-03 14:38:48)\nSaving /galaxy/server/database/jobs_directory/000/102/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/102/working/assembly.fasta\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "82.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:38:48", "plugin": "core", "name": "end_epoch", "raw_value": "1696343928.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:37:26", "plugin": "core", "name": "start_epoch", "raw_value": "1696343846.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "unicycler/0.4.8.0-3", "has_data": true, "data": {"tool_id": "unicycler", "tool_version": "0.4.8.0", "test_index": 3, "time_seconds": 129.89442038536072, "inputs": {"paired_unpaired|fastq_input_selector": "none", "long": {"src": "hda", "id": "2d17a852c20272d9"}, "min_anchor_seg_len": "10", "spades|kmers": "21,23"}, "job": {"model_class": "Job", "id": "84d62bc29bc6ac08", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T14:41:09.431660", "create_time": "2023-10-03T14:39:11.573837", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.4.8.0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-ffwnq", "command_line": "ln -s '/galaxy/server/database/objects/d/3/3/dataset_d3371d1e-b9c2-4c38-83ec-527ba594532c.dat' 'lr.fasta' && pilon=`pilon --jar_dir` && unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 --pilon_path $pilon -l lr.fasta --mode 'normal' --min_fasta_length '100' --linear_seqs '0' --min_anchor_seg_len '10'  --min_kmer_frac '0.2' --max_kmer_frac '0.95' --kmers '21,23' --kmer_count '10' --depth_filter '0.25'  --start_gene_id '90.0' --start_gene_cov '95.0'  --min_polish_size '1000' --min_component_size '1000' --min_dead_end_size '1000' --scores '3,-6,-5,-2'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"scores\": \"3,-6,-5,-2\"}", "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}", "pilon": "{\"min_polish_size\": \"1000\", \"no_pilon\": \"false\"}", "rotation": "{\"no_rotate\": \"false\", \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}", "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"21,23\", \"largest_component\": \"false\", \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\", \"no_correct\": \"false\"}", "min_anchor_seg_len": "\"10\"", "linear_seqs": "\"0\"", "min_fasta_length": "\"100\"", "mode": "\"normal\"", "paired_unpaired": "{\"__current_case__\": 3, \"fastq_input_selector\": \"none\"}"}, "inputs": {"long": {"id": "2d17a852c20272d9", "src": "hda", "uuid": "d3371d1e-b9c2-4c38-83ec-527ba594532c"}}, "outputs": {"assembly_graph": {"id": "10d6e057dde3c9e2", "src": "hda", "uuid": "c5afd03c-efde-4713-b41c-9698cc9fe279"}, "assembly": {"id": "733e839429712bcf", "src": "hda", "uuid": "521d4e9b-1b77-462a-b393-e03b833f2ea7"}}, "output_collections": {}, "tool_stdout": "\nStarting Unicycler (2023-10-03 14:40:56)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only long reads, Unicycler will assemble the reads with miniasm and\nthen run repeated polishing rounds using Racon.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/104/working\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py                 not used                             \n  racon           1.4.20    good       /usr/local/bin/racon      \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nLoading reads (2023-10-03 14:40:58)\n\r0 / 40 (0.0%)\r1 / 40 (2.5%) - 412 bp\r2 / 40 (5.0%) - 4,847 bp\r3 / 40 (7.5%) - 8,974 bp\r4 / 40 (10.0%) - 13,249 bp\r5 / 40 (12.5%) - 14,258 bp\r6 / 40 (15.0%) - 14,806 bp\r7 / 40 (17.5%) - 19,262 bp\r8 / 40 (20.0%) - 19,737 bp\r9 / 40 (22.5%) - 20,395 bp\r10 / 40 (25.0%) - 32,024 bp\r11 / 40 (27.5%) - 32,698 bp\r12 / 40 (30.0%) - 34,509 bp\r13 / 40 (32.5%) - 39,018 bp\r14 / 40 (35.0%) - 43,351 bp\r15 / 40 (37.5%) - 44,224 bp\r16 / 40 (40.0%) - 45,978 bp\r17 / 40 (42.5%) - 46,402 bp\r18 / 40 (45.0%) - 61,596 bp\r19 / 40 (47.5%) - 62,279 bp\r20 / 40 (50.0%) - 63,700 bp\r21 / 40 (52.5%) - 66,412 bp\r22 / 40 (55.0%) - 66,845 bp\r23 / 40 (57.5%) - 67,316 bp\r24 / 40 (60.0%) - 69,428 bp\r25 / 40 (62.5%) - 73,964 bp\r26 / 40 (65.0%) - 75,608 bp\r27 / 40 (67.5%) - 80,223 bp\r28 / 40 (70.0%) - 84,810 bp\r29 / 40 (72.5%) - 92,076 bp\r30 / 40 (75.0%) - 92,832 bp\r31 / 40 (77.5%) - 92,939 bp\r32 / 40 (80.0%) - 93,532 bp\r33 / 40 (82.5%) - 96,370 bp\r34 / 40 (85.0%) - 100,656 bp\r35 / 40 (87.5%) - 119,222 bp\r36 / 40 (90.0%) - 123,827 bp\r37 / 40 (92.5%) - 155,106 bp\r38 / 40 (95.0%) - 156,254 bp\r39 / 40 (97.5%) - 157,993 bp\r40 / 40 (100.0%) - 162,406 bp\r40 / 40 (100.0%) - 162,406 bp\n\n\nAssembling contigs and long reads with miniasm (2023-10-03 14:40:58)\nSaving to /galaxy/server/database/jobs_directory/000/104/working/miniasm_assembly/01_assembly_reads.fastq:\n  40 long reads\n\nFinding overlaps with minimap... success\n  120 overlaps\n\nAssembling reads with miniasm... success\n  7 segments, 6 links\n\n    Unicycler removes any links from the string graph which create branches.\nI.e. if any segment has two or more links connected to one end, those links are\nremoved. This will result in a graph with only simple linear paths that is\nsuitable for creating unambiguous bridges.\n\nNo links needed removal\nSaving /galaxy/server/database/jobs_directory/000/104/working/miniasm_assembly/11_branching_paths_removed.gfa\nMerging segments into unitigs:\n\nLinear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-\n\n  1 linear unitig\n  total size = 5,836 bp\nSaving /galaxy/server/database/jobs_directory/000/104/working/miniasm_assembly/12_unitig_graph.gfa\nSaving /galaxy/server/database/jobs_directory/000/104/working/002_unitig_graph.gfa\n\n\nPolishing miniasm assembly with Racon (2023-10-03 14:40:58)\n    Unicycler now uses Racon to polish the miniasm assembly. It does multiple\nrounds of polishing to get the best consensus. Circular unitigs are rotated\nbetween rounds such that all parts (including the ends) are polished well.\n\nSaving to /galaxy/server/database/jobs_directory/000/104/working/miniasm_assembly/racon_polish/polishing_reads.fastq:\n  40 long reads\n\nPolish       Assembly          Mapping\nround            size          quality\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t210\t4010\t+\t1\t5836\t1061\t4603\t1147\t3800\t255\tcm:i:200\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t5836\t5221\t5833\t179\t612\t255\tcm:i:27\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t5836\t2376\t5833\t3457\t3457\t255\tcm:i:1153\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2525\t-\t1\t5836\t30\t2314\t787\t2399\t255\tcm:i:144\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t280\t4284\t-\t1\t5836\t4\t3936\t1481\t4004\t255\tcm:i:246\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4286\t-\t1\t5836\t4215\t5833\t546\t1618\t255\tcm:i:88\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t170\t4027\t+\t1\t5836\t1680\t5833\t1032\t4153\t255\tcm:i:174\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4082\t+\t1\t5836\t4\t1602\t220\t1598\t255\tcm:i:30\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1334\t4566\t-\t1\t5836\t2699\t5786\t1281\t3232\t255\tcm:i:243\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t5836\t50\t2663\t772\t2680\t255\tcm:i:129\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t5836\t2657\t5833\t1469\t3386\t255\tcm:i:268\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2786\t-\t1\t5836\t30\t2636\t905\t2689\t255\tcm:i:157\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t143\t4271\t-\t1\t5836\t338\t4254\t1834\t4128\t255\tcm:i:470\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3092\t4330\t-\t1\t5836\t4503\t5798\t430\t1295\t255\tcm:i:77\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t544\t4408\t-\t1\t5836\t69\t3927\t1208\t3864\t255\tcm:i:237\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3008\t4472\t-\t1\t5836\t4215\t5748\t351\t1533\t255\tcm:i:53\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t5836\t2909\t3222\t131\t313\t255\tcm:i:22\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t335\t4397\t+\t1\t5836\t1321\t5257\t1351\t4062\t255\tcm:i:280\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4349\t+\t1\t5836\t23\t961\t238\t938\t255\tcm:i:40\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t537\t+\t1\t5836\t5334\t5798\t154\t464\t255\tcm:i:26\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t111\t4359\t-\t1\t5836\t1673\t5798\t2062\t4248\t255\tcm:i:487\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t109\t1619\t-\t1\t5836\t30\t1525\t472\t1510\t255\tcm:i:68\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t5836\t1733\t5833\t1303\t4100\t255\tcm:i:230\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t5836\t4\t1690\t311\t1712\t255\tcm:i:43\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4205\t+\t1\t5836\t23\t3939\t1039\t3916\t255\tcm:i:166\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t296\t1782\t+\t1\t5836\t4242\t5798\t367\t1556\t255\tcm:i:63\nbegin           5,836             5.33\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6290\t1009\t5054\t2431\t4045\t255\tcm:i:529\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6290\t5670\t6287\t297\t617\t255\tcm:i:63\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6290\t4\t404\t122\t400\t255\tcm:i:19\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6290\t2540\t6287\t2249\t3747\t255\tcm:i:527\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6290\t51\t2474\t1276\t2423\t255\tcm:i:245\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6290\t4\t4316\t2322\t4312\t255\tcm:i:486\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6290\t4354\t6287\t943\t1933\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t116\t4027\t+\t1\t6290\t1774\t6287\t2145\t4513\t255\tcm:i:426\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6290\t4\t1741\t421\t1737\t255\tcm:i:61\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6290\t2854\t6226\t2257\t3372\t255\tcm:i:501\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6290\t51\t2831\t1459\t2780\t255\tcm:i:289\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6290\t2825\t6287\t2268\t3462\t255\tcm:i:513\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2745\t-\t1\t6290\t74\t2805\t1501\t2731\t255\tcm:i:289\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6290\t354\t4699\t2022\t4345\t255\tcm:i:377\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6290\t4984\t6271\t614\t1287\t255\tcm:i:117\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6290\t72\t4534\t1921\t4462\t255\tcm:i:337\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6290\t4597\t6206\t580\t1609\t255\tcm:i:103\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6290\t3083\t3386\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6290\t1126\t5708\t2368\t4582\t255\tcm:i:487\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4392\t+\t1\t6290\t23\t1039\t362\t1016\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t539\t+\t1\t6290\t5785\t6254\t217\t469\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6290\t1806\t6258\t2777\t4452\t255\tcm:i:600\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6290\t74\t1603\t761\t1529\t255\tcm:i:150\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t795\t+\t1\t6290\t5209\t5912\t149\t703\t255\tcm:i:24\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6290\t585\t1307\t155\t722\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t6290\t1886\t6287\t2070\t4401\t255\tcm:i:456\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6290\t4\t1838\t656\t1834\t255\tcm:i:109\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6290\t2060\t2358\t156\t298\t255\tcm:i:35\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6290\t23\t4436\t2106\t4413\t255\tcm:i:421\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6290\t4488\t6273\t744\t1785\t255\tcm:i:131\n1               6,290             7.82\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6242\t1016\t5009\t2460\t3993\t255\tcm:i:530\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6242\t5626\t6239\t283\t613\t255\tcm:i:61\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6242\t4\t408\t117\t404\t255\tcm:i:18\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6242\t2535\t6239\t2234\t3704\t255\tcm:i:514\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6242\t51\t2469\t1387\t2418\t255\tcm:i:271\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6242\t4\t4276\t2380\t4272\t255\tcm:i:494\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6242\t4314\t6239\t955\t1925\t255\tcm:i:196\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6242\t1759\t6239\t2194\t4480\t255\tcm:i:440\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6242\t4\t1735\t450\t1731\t255\tcm:i:67\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6242\t2848\t6178\t2284\t3330\t255\tcm:i:509\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6242\t51\t2825\t1504\t2774\t255\tcm:i:295\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6242\t2819\t6239\t2235\t3420\t255\tcm:i:510\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t109\t2745\t-\t1\t6242\t74\t2787\t1517\t2713\t255\tcm:i:304\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6242\t358\t4659\t2051\t4301\t255\tcm:i:391\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6242\t4939\t6223\t618\t1284\t255\tcm:i:114\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6242\t72\t4493\t1941\t4421\t255\tcm:i:345\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6242\t4556\t6158\t579\t1602\t255\tcm:i:105\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6242\t3077\t3380\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6242\t1133\t5664\t2405\t4531\t255\tcm:i:507\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6242\t23\t1051\t353\t1028\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6242\t5759\t6206\t204\t447\t255\tcm:i:40\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6242\t1799\t6210\t2749\t4411\t255\tcm:i:591\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6242\t74\t1601\t795\t1527\t255\tcm:i:165\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6242\t5166\t5916\t224\t750\t255\tcm:i:35\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t160\t847\t+\t1\t6242\t602\t1310\t144\t708\t255\tcm:i:16\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6242\t1908\t6239\t2061\t4331\t255\tcm:i:454\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6242\t4\t1831\t667\t1827\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6242\t2053\t2352\t157\t299\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6242\t23\t4395\t2130\t4372\t255\tcm:i:425\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6242\t4447\t6225\t762\t1778\t255\tcm:i:138\n2               6,242             8.02\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6265\t1028\t5025\t2436\t3997\t255\tcm:i:527\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6265\t5642\t6262\t281\t620\t255\tcm:i:59\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6265\t4\t408\t105\t404\t255\tcm:i:17\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6265\t2544\t6262\t2228\t3718\t255\tcm:i:507\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6265\t51\t2478\t1353\t2427\t255\tcm:i:260\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6265\t4\t4293\t2377\t4289\t255\tcm:i:492\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6265\t4331\t6262\t967\t1931\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6265\t1772\t6262\t2190\t4490\t255\tcm:i:436\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6265\t4\t1748\t448\t1744\t255\tcm:i:62\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6265\t2857\t6201\t2270\t3344\t255\tcm:i:503\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6265\t51\t2834\t1463\t2783\t255\tcm:i:284\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6265\t2828\t6262\t2251\t3434\t255\tcm:i:515\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t102\t2745\t-\t1\t6265\t74\t2804\t1511\t2730\t255\tcm:i:305\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6265\t358\t4676\t2063\t4318\t255\tcm:i:392\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4328\t-\t1\t6265\t4930\t6246\t623\t1316\t255\tcm:i:113\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6265\t72\t4510\t1987\t4438\t255\tcm:i:350\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6265\t4573\t6181\t569\t1608\t255\tcm:i:102\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6265\t3089\t3392\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6265\t1145\t5680\t2423\t4535\t255\tcm:i:509\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6265\t23\t1063\t337\t1040\t255\tcm:i:56\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6265\t5779\t6229\t223\t450\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6265\t1812\t6233\t2769\t4421\t255\tcm:i:601\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6265\t74\t1615\t764\t1541\t255\tcm:i:156\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6265\t5182\t5936\t236\t754\t255\tcm:i:36\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6265\t589\t1322\t155\t733\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6265\t1921\t6262\t2062\t4341\t255\tcm:i:449\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6265\t4\t1844\t660\t1840\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6265\t2063\t2361\t157\t298\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6265\t23\t4412\t2182\t4389\t255\tcm:i:436\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6265\t4464\t6248\t787\t1784\t255\tcm:i:141\n3               6,265             8.04\n\nBest polish: /galaxy/server/database/jobs_directory/000/104/working/miniasm_assembly/racon_polish/016_rotated.fasta\nSaving /galaxy/server/database/jobs_directory/000/104/working/miniasm_assembly/13_racon_polished.gfa\nSaving /galaxy/server/database/jobs_directory/000/104/working/003_racon_polished.gfa\n\n\nAssembly complete (2023-10-03 14:40:58)\nSaving /galaxy/server/database/jobs_directory/000/104/working/assembly.gfa\n\n", "tool_stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "job_stdout": "", "job_stderr": "", "stderr": "tput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\ntput: No value for $TERM and no -T specified\n", "stdout": "\nStarting Unicycler (2023-10-03 14:40:56)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only long reads, Unicycler will assemble the reads with miniasm and\nthen run repeated polishing rounds using Racon.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 4 -o ./ --verbosity 3 --pilon_path /usr/local/share/pilon-1.24-0/pilon.jar -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_polish_size 1000 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2\n\nUnicycler version: v0.4.8\nUsing 4 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/104/working\n\nDependencies:\n  Program         Version   Status     Path                      \n  spades.py                 not used                             \n  racon           1.4.20    good       /usr/local/bin/racon      \n  makeblastdb     2.12.0+   good       /usr/local/bin/makeblastdb\n  tblastn         2.12.0+   good       /usr/local/bin/tblastn    \n  bowtie2-build             not used                             \n  bowtie2                   not used                             \n  samtools                  not used                             \n  java                      not used                             \n  pilon                     not used                             \n  bcftools                  not used                             \n\n\nLoading reads (2023-10-03 14:40:58)\n\r0 / 40 (0.0%)\r1 / 40 (2.5%) - 412 bp\r2 / 40 (5.0%) - 4,847 bp\r3 / 40 (7.5%) - 8,974 bp\r4 / 40 (10.0%) - 13,249 bp\r5 / 40 (12.5%) - 14,258 bp\r6 / 40 (15.0%) - 14,806 bp\r7 / 40 (17.5%) - 19,262 bp\r8 / 40 (20.0%) - 19,737 bp\r9 / 40 (22.5%) - 20,395 bp\r10 / 40 (25.0%) - 32,024 bp\r11 / 40 (27.5%) - 32,698 bp\r12 / 40 (30.0%) - 34,509 bp\r13 / 40 (32.5%) - 39,018 bp\r14 / 40 (35.0%) - 43,351 bp\r15 / 40 (37.5%) - 44,224 bp\r16 / 40 (40.0%) - 45,978 bp\r17 / 40 (42.5%) - 46,402 bp\r18 / 40 (45.0%) - 61,596 bp\r19 / 40 (47.5%) - 62,279 bp\r20 / 40 (50.0%) - 63,700 bp\r21 / 40 (52.5%) - 66,412 bp\r22 / 40 (55.0%) - 66,845 bp\r23 / 40 (57.5%) - 67,316 bp\r24 / 40 (60.0%) - 69,428 bp\r25 / 40 (62.5%) - 73,964 bp\r26 / 40 (65.0%) - 75,608 bp\r27 / 40 (67.5%) - 80,223 bp\r28 / 40 (70.0%) - 84,810 bp\r29 / 40 (72.5%) - 92,076 bp\r30 / 40 (75.0%) - 92,832 bp\r31 / 40 (77.5%) - 92,939 bp\r32 / 40 (80.0%) - 93,532 bp\r33 / 40 (82.5%) - 96,370 bp\r34 / 40 (85.0%) - 100,656 bp\r35 / 40 (87.5%) - 119,222 bp\r36 / 40 (90.0%) - 123,827 bp\r37 / 40 (92.5%) - 155,106 bp\r38 / 40 (95.0%) - 156,254 bp\r39 / 40 (97.5%) - 157,993 bp\r40 / 40 (100.0%) - 162,406 bp\r40 / 40 (100.0%) - 162,406 bp\n\n\nAssembling contigs and long reads with miniasm (2023-10-03 14:40:58)\nSaving to /galaxy/server/database/jobs_directory/000/104/working/miniasm_assembly/01_assembly_reads.fastq:\n  40 long reads\n\nFinding overlaps with minimap... success\n  120 overlaps\n\nAssembling reads with miniasm... success\n  7 segments, 6 links\n\n    Unicycler removes any links from the string graph which create branches.\nI.e. if any segment has two or more links connected to one end, those links are\nremoved. This will result in a graph with only simple linear paths that is\nsuitable for creating unambiguous bridges.\n\nNo links needed removal\nSaving /galaxy/server/database/jobs_directory/000/104/working/miniasm_assembly/11_branching_paths_removed.gfa\nMerging segments into unitigs:\n\nLinear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-\n\n  1 linear unitig\n  total size = 5,836 bp\nSaving /galaxy/server/database/jobs_directory/000/104/working/miniasm_assembly/12_unitig_graph.gfa\nSaving /galaxy/server/database/jobs_directory/000/104/working/002_unitig_graph.gfa\n\n\nPolishing miniasm assembly with Racon (2023-10-03 14:40:58)\n    Unicycler now uses Racon to polish the miniasm assembly. It does multiple\nrounds of polishing to get the best consensus. Circular unitigs are rotated\nbetween rounds such that all parts (including the ends) are polished well.\n\nSaving to /galaxy/server/database/jobs_directory/000/104/working/miniasm_assembly/racon_polish/polishing_reads.fastq:\n  40 long reads\n\nPolish       Assembly          Mapping\nround            size          quality\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t210\t4010\t+\t1\t5836\t1061\t4603\t1147\t3800\t255\tcm:i:200\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t5836\t5221\t5833\t179\t612\t255\tcm:i:27\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t5836\t2376\t5833\t3457\t3457\t255\tcm:i:1153\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2525\t-\t1\t5836\t30\t2314\t787\t2399\t255\tcm:i:144\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t280\t4284\t-\t1\t5836\t4\t3936\t1481\t4004\t255\tcm:i:246\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4286\t-\t1\t5836\t4215\t5833\t546\t1618\t255\tcm:i:88\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t170\t4027\t+\t1\t5836\t1680\t5833\t1032\t4153\t255\tcm:i:174\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4082\t+\t1\t5836\t4\t1602\t220\t1598\t255\tcm:i:30\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1334\t4566\t-\t1\t5836\t2699\t5786\t1281\t3232\t255\tcm:i:243\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t5836\t50\t2663\t772\t2680\t255\tcm:i:129\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t5836\t2657\t5833\t1469\t3386\t255\tcm:i:268\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2786\t-\t1\t5836\t30\t2636\t905\t2689\t255\tcm:i:157\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t143\t4271\t-\t1\t5836\t338\t4254\t1834\t4128\t255\tcm:i:470\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3092\t4330\t-\t1\t5836\t4503\t5798\t430\t1295\t255\tcm:i:77\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t544\t4408\t-\t1\t5836\t69\t3927\t1208\t3864\t255\tcm:i:237\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3008\t4472\t-\t1\t5836\t4215\t5748\t351\t1533\t255\tcm:i:53\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t5836\t2909\t3222\t131\t313\t255\tcm:i:22\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t335\t4397\t+\t1\t5836\t1321\t5257\t1351\t4062\t255\tcm:i:280\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4349\t+\t1\t5836\t23\t961\t238\t938\t255\tcm:i:40\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t537\t+\t1\t5836\t5334\t5798\t154\t464\t255\tcm:i:26\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t111\t4359\t-\t1\t5836\t1673\t5798\t2062\t4248\t255\tcm:i:487\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t109\t1619\t-\t1\t5836\t30\t1525\t472\t1510\t255\tcm:i:68\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t5836\t1733\t5833\t1303\t4100\t255\tcm:i:230\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t5836\t4\t1690\t311\t1712\t255\tcm:i:43\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4205\t+\t1\t5836\t23\t3939\t1039\t3916\t255\tcm:i:166\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t296\t1782\t+\t1\t5836\t4242\t5798\t367\t1556\t255\tcm:i:63\nbegin           5,836             5.33\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6290\t1009\t5054\t2431\t4045\t255\tcm:i:529\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6290\t5670\t6287\t297\t617\t255\tcm:i:63\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6290\t4\t404\t122\t400\t255\tcm:i:19\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6290\t2540\t6287\t2249\t3747\t255\tcm:i:527\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6290\t51\t2474\t1276\t2423\t255\tcm:i:245\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6290\t4\t4316\t2322\t4312\t255\tcm:i:486\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6290\t4354\t6287\t943\t1933\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t116\t4027\t+\t1\t6290\t1774\t6287\t2145\t4513\t255\tcm:i:426\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6290\t4\t1741\t421\t1737\t255\tcm:i:61\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6290\t2854\t6226\t2257\t3372\t255\tcm:i:501\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6290\t51\t2831\t1459\t2780\t255\tcm:i:289\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6290\t2825\t6287\t2268\t3462\t255\tcm:i:513\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t97\t2745\t-\t1\t6290\t74\t2805\t1501\t2731\t255\tcm:i:289\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6290\t354\t4699\t2022\t4345\t255\tcm:i:377\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6290\t4984\t6271\t614\t1287\t255\tcm:i:117\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6290\t72\t4534\t1921\t4462\t255\tcm:i:337\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6290\t4597\t6206\t580\t1609\t255\tcm:i:103\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6290\t3083\t3386\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6290\t1126\t5708\t2368\t4582\t255\tcm:i:487\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4392\t+\t1\t6290\t23\t1039\t362\t1016\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t539\t+\t1\t6290\t5785\t6254\t217\t469\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6290\t1806\t6258\t2777\t4452\t255\tcm:i:600\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6290\t74\t1603\t761\t1529\t255\tcm:i:150\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t795\t+\t1\t6290\t5209\t5912\t149\t703\t255\tcm:i:24\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6290\t585\t1307\t155\t722\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t93\t4048\t+\t1\t6290\t1886\t6287\t2070\t4401\t255\tcm:i:456\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6290\t4\t1838\t656\t1834\t255\tcm:i:109\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6290\t2060\t2358\t156\t298\t255\tcm:i:35\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6290\t23\t4436\t2106\t4413\t255\tcm:i:421\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6290\t4488\t6273\t744\t1785\t255\tcm:i:131\n1               6,290             7.82\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6242\t1016\t5009\t2460\t3993\t255\tcm:i:530\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6242\t5626\t6239\t283\t613\t255\tcm:i:61\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6242\t4\t408\t117\t404\t255\tcm:i:18\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6242\t2535\t6239\t2234\t3704\t255\tcm:i:514\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6242\t51\t2469\t1387\t2418\t255\tcm:i:271\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6242\t4\t4276\t2380\t4272\t255\tcm:i:494\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6242\t4314\t6239\t955\t1925\t255\tcm:i:196\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6242\t1759\t6239\t2194\t4480\t255\tcm:i:440\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6242\t4\t1735\t450\t1731\t255\tcm:i:67\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6242\t2848\t6178\t2284\t3330\t255\tcm:i:509\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6242\t51\t2825\t1504\t2774\t255\tcm:i:295\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6242\t2819\t6239\t2235\t3420\t255\tcm:i:510\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t109\t2745\t-\t1\t6242\t74\t2787\t1517\t2713\t255\tcm:i:304\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6242\t358\t4659\t2051\t4301\t255\tcm:i:391\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4304\t-\t1\t6242\t4939\t6223\t618\t1284\t255\tcm:i:114\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6242\t72\t4493\t1941\t4421\t255\tcm:i:345\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6242\t4556\t6158\t579\t1602\t255\tcm:i:105\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6242\t3077\t3380\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6242\t1133\t5664\t2405\t4531\t255\tcm:i:507\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6242\t23\t1051\t353\t1028\t255\tcm:i:59\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6242\t5759\t6206\t204\t447\t255\tcm:i:40\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6242\t1799\t6210\t2749\t4411\t255\tcm:i:591\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6242\t74\t1601\t795\t1527\t255\tcm:i:165\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6242\t5166\t5916\t224\t750\t255\tcm:i:35\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t160\t847\t+\t1\t6242\t602\t1310\t144\t708\t255\tcm:i:16\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6242\t1908\t6239\t2061\t4331\t255\tcm:i:454\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6242\t4\t1831\t667\t1827\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6242\t2053\t2352\t157\t299\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6242\t23\t4395\t2130\t4372\t255\tcm:i:425\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6242\t4447\t6225\t762\t1778\t255\tcm:i:138\n2               6,242             8.02\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t4010\t+\t1\t6265\t1028\t5025\t2436\t3997\t255\tcm:i:527\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t129\t722\t+\t1\t6265\t5642\t6262\t281\t620\t255\tcm:i:59\n0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template\t4286\t3632\t4010\t+\t1\t6265\t4\t408\t105\t404\t255\tcm:i:17\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t934\t4391\t-\t1\t6265\t2544\t6262\t2228\t3718\t255\tcm:i:507\n054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template\t4413\t126\t2508\t-\t1\t6265\t51\t2478\t1353\t2427\t255\tcm:i:260\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t110\t4284\t-\t1\t6265\t4\t4293\t2377\t4289\t255\tcm:i:492\n3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template\t4605\t2719\t4590\t-\t1\t6265\t4331\t6262\t967\t1931\t255\tcm:i:194\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t108\t4027\t+\t1\t6265\t1772\t6262\t2190\t4490\t255\tcm:i:436\n4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template\t4127\t2893\t4124\t+\t1\t6265\t4\t1748\t448\t1744\t255\tcm:i:62\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t1345\t4580\t-\t1\t6265\t2857\t6201\t2270\t3344\t255\tcm:i:503\n598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template\t4587\t98\t2778\t-\t1\t6265\t51\t2834\t1463\t2783\t255\tcm:i:284\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t1225\t4611\t-\t1\t6265\t2828\t6262\t2251\t3434\t255\tcm:i:515\n771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template\t4615\t102\t2745\t-\t1\t6265\t74\t2804\t1511\t2730\t255\tcm:i:305\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t140\t4284\t-\t1\t6265\t358\t4676\t2063\t4318\t255\tcm:i:392\n9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template\t4333\t3069\t4328\t-\t1\t6265\t4930\t6246\t623\t1316\t255\tcm:i:113\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t138\t4408\t-\t1\t6265\t72\t4510\t1987\t4438\t255\tcm:i:350\n9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template\t4536\t3002\t4533\t-\t1\t6265\t4573\t6181\t569\t1608\t255\tcm:i:102\na152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template\t433\t106\t396\t+\t1\t6265\t3089\t3392\t169\t303\t255\tcm:i:32\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t86\t4397\t+\t1\t6265\t1145\t5680\t2423\t4535\t255\tcm:i:509\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t3437\t4397\t+\t1\t6265\t23\t1063\t337\t1040\t255\tcm:i:56\na53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template\t4456\t107\t539\t+\t1\t6265\t5779\t6229\t223\t450\t255\tcm:i:45\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t4374\t-\t1\t6265\t1812\t6233\t2769\t4421\t255\tcm:i:601\nb9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template\t4435\t105\t1578\t-\t1\t6265\t74\t1615\t764\t1541\t255\tcm:i:156\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t122\t847\t+\t1\t6265\t5182\t5936\t236\t754\t255\tcm:i:36\nbca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template\t1421\t149\t847\t+\t1\t6265\t589\t1322\t155\t733\t255\tcm:i:17\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t124\t4048\t+\t1\t6265\t1921\t6262\t2062\t4341\t255\tcm:i:449\nbd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template\t4275\t2532\t4244\t+\t1\t6265\t4\t1844\t660\t1840\t255\tcm:i:111\nc2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template\t1148\t97\t391\t+\t1\t6265\t2063\t2361\t157\t298\t255\tcm:i:37\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t289\t4485\t+\t1\t6265\t23\t4412\t2182\t4389\t255\tcm:i:436\nf49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template\t4509\t111\t1803\t+\t1\t6265\t4464\t6248\t787\t1784\t255\tcm:i:141\n3               6,265             8.04\n\nBest polish: /galaxy/server/database/jobs_directory/000/104/working/miniasm_assembly/racon_polish/016_rotated.fasta\nSaving /galaxy/server/database/jobs_directory/000/104/working/miniasm_assembly/13_racon_polished.gfa\nSaving /galaxy/server/database/jobs_directory/000/104/working/003_racon_polished.gfa\n\n\nAssembly complete (2023-10-03 14:40:58)\nSaving /galaxy/server/database/jobs_directory/000/104/working/assembly.gfa\n\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2023-10-03 14:40:59", "plugin": "core", "name": "end_epoch", "raw_value": "1696344059.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 14:40:56", "plugin": "core", "name": "start_epoch", "raw_value": "1696344056.0000000"}, {"title": "Memory Allocated (MB)", "value": "40000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "40000.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "vcfgenotypes/1.0.0_rc3+galaxy0-0", "has_data": true, "data": {"tool_id": "vcfgenotypes", "tool_version": "1.0.0_rc3+galaxy0", "test_index": 0, "time_seconds": 132.81595253944397, "inputs": {"vcf_input": {"src": "hda", "id": "10db765122628bfa"}}, "job": {"model_class": "Job", "id": "cf8baebf3e61d353", "state": "ok", "exit_code": 0, "update_time": "2023-10-03T13:56:57.467321", "create_time": "2023-10-03T13:54:56.374704", "galaxy_version": "21.09", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/vcfgenotypes/vcfgenotypes/1.0.0_rc3+galaxy0", "history_id": "419bbf4bb98bd90a", "external_id": "gxy-5kxnv", "command_line": "vcfgenotypes '/galaxy/server/database/objects/6/1/3/dataset_613eb461-946c-4f5e-831e-19119d6cfaf4.dat' > '/galaxy/server/database/objects/e/2/d/dataset_e2d0b7d7-d2a5-4597-86cb-d6a56db9c189.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"vcf_input": {"id": "10db765122628bfa", "src": "hda", "uuid": "613eb461-946c-4f5e-831e-19119d6cfaf4"}}, "outputs": {"out_file1": {"id": "a899d722f21aef16", "src": "hda", "uuid": "e2d0b7d7-d2a5-4597-86cb-d6a56db9c189"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-10-03 13:56:45", "plugin": "core", "name": "end_epoch", "raw_value": "1696341405.0000000"}, {"title": "Job Start Time", "value": "2023-10-03 13:56:45", "plugin": "core", "name": "start_epoch", "raw_value": "1696341405.0000000"}, {"title": "Memory Allocated (MB)", "value": "2000", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "2000.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}], "galaxy_url": "http://34.148.59.35:8000/galaxy/"}